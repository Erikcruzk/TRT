{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 232,
            "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop.",
            "name": "array-length-outside-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 441,
            "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop.",
            "name": "array-length-outside-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 451,
            "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop.",
            "name": "array-length-outside-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 572,
            "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop.",
            "name": "array-length-outside-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 710,
            "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop.",
            "name": "array-length-outside-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 738,
            "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables.",
            "name": "inefficient-state-variable-increment"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 44,
            "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas.",
            "name": "init-variables-with-default-value"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 232,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 233,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 233,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 234,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 295,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 295,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 298,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 298,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 298,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 301,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 303,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 303,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 304,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 304,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 305,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 308,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 308,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 311,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 311,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 312,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 312,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 329,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 329,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 331,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 331,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 333,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 333,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 335,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 442,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 452,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 573,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 575,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 710,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 711,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 711,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 713,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 232,
            "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks.",
            "name": "unnecessary-checked-arithmetic-in-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 294,
            "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks.",
            "name": "unnecessary-checked-arithmetic-in-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 327,
            "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks.",
            "name": "unnecessary-checked-arithmetic-in-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 441,
            "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks.",
            "name": "unnecessary-checked-arithmetic-in-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 451,
            "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks.",
            "name": "unnecessary-checked-arithmetic-in-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 572,
            "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks.",
            "name": "unnecessary-checked-arithmetic-in-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 710,
            "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks.",
            "name": "unnecessary-checked-arithmetic-in-loop"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 99,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 126,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 127,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 135,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 136,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 154,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 155,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 156,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 157,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 301,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 302,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 303,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 304,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 305,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 306,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 307,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 308,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 309,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 310,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 350,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 351,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 352,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 353,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 354,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 355,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 356,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 357,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 358,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 359,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 376,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 377,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 378,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 379,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 380,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 381,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 382,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 383,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 384,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 385,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 768,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 769,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 770,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 819,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 820,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 821,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 822,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 823,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 824,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 232,
            "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas.",
            "name": "use-prefix-increment-not-postfix"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 235,
            "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas.",
            "name": "use-prefix-increment-not-postfix"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 240,
            "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas.",
            "name": "use-prefix-increment-not-postfix"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 294,
            "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas.",
            "name": "use-prefix-increment-not-postfix"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 327,
            "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas.",
            "name": "use-prefix-increment-not-postfix"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 441,
            "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas.",
            "name": "use-prefix-increment-not-postfix"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 451,
            "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas.",
            "name": "use-prefix-increment-not-postfix"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 572,
            "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas.",
            "name": "use-prefix-increment-not-postfix"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 603,
            "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas.",
            "name": "use-prefix-increment-not-postfix"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 623,
            "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas.",
            "name": "use-prefix-increment-not-postfix"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 710,
            "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas.",
            "name": "use-prefix-increment-not-postfix"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 753,
            "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas.",
            "name": "use-prefix-increment-not-postfix"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 767,
            "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas.",
            "name": "use-prefix-increment-not-postfix"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 794,
            "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas.",
            "name": "use-prefix-increment-not-postfix"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 800,
            "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas.",
            "name": "use-prefix-increment-not-postfix"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 818,
            "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas.",
            "name": "use-prefix-increment-not-postfix"
        },
        {
            "category": "performance",
            "filename": "../sc_datasets/compiled_DAppSCAN/Blockchain Labs NZ-Gifto/GiftoSmartContract-50e1f1895dd91a0dad0d4f0b2ea620e5827ed1fa/Gifto_ERC20Standard_final.sol",
            "line": 826,
            "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas.",
            "name": "use-prefix-increment-not-postfix"
        }
    ],
    "infos": [],
    "parser": {
        "id": "semgrep",
        "mode": "solidity",
        "version": "2023/08/21"
    }
}
