from SmartContract import SmartContract
from PromptEngine import PromptEngine
import os

def find_vulnerablities_and_repair_sc(sc_path):
    """
    Finds vulnerabilities in a given Solidity smart contract, repairs it, and displays the differences in vulnerability detection between the original and repaired contract.

    This function takes a file path to a Solidity smart contract as a parameter, creates an instance of the SmartContract class with the file path, and then calls its `find_vulnerabilities` method to detect any vulnerabilities in the contract.

    The function then creates an instance of the PromptEngine class with the SmartContract instance as a parameter, and uses its `get_codex_repaired_sc` method to generate a list of repaired contracts that fix the detected vulnerabilities. The repaired contracts are filtered based on the type of prompt to use, the maximum number of repairs to generate, and the minimum repair similarity threshold.

    Finally, the function prints a header for the repaired contracts, loops through each repaired contract to detect its vulnerabilities using `find_vulnerabilities` method, and prints the differences in vulnerability detection between the original and repaired contract.

    Args:
    - sc_path (str): a string representing the file path to the Solidity smart contract to be analyzed and repaired.

    """
    sc = SmartContract(sc_path)
    sc.find_vulnerabilities()

    pe = PromptEngine(sc)
    repaired_contracts = pe.get_codex_repaired_sc('C_vulnerability_examples', 0.5, 0.93, 1)
    print(f'\n\n{sc.filename} Repairs')
    for repaired_sc in repaired_contracts:
        repaired_sc.find_vulnerabilities()
        vulnerability_differences = sc.get_repaired_vulnerabilities(repaired_sc)
        print(f'{repaired_sc.filename} fixes \n{vulnerability_differences}\n')

def find_vulnerabilities_and_repair_sc_in_directory(directory_path):
    for filename in os.listdir(directory_path):
        find_vulnerablities_and_repair_sc(os.path.join(directory_path, filename))


def show_prompt_types(sc_path):
    """
    Displays example prompts generated by the PromptEngine for a given Solidity smart contract.

    This function takes a file path to a Solidity smart contract as a parameter, creates an instance of the SmartContract class with the file path, sets its vulnerabilities attribute to a dictionary of detected vulnerabilities, and then creates a PromptEngine instance with the SmartContract instance as a parameter.

    The function then generates and displays three types of prompts using the PromptEngine's generate_prompt() method, each identified by a string parameter: "A_basic", "B_vulnerability_context", and "C_vulnerability_examples". The generated prompts are printed to the console.

    Note: Vulnerability detection tools are not used in this demo function.

    Args:
    - sc_path (str): a string representing the file path to the Solidity smart contract to be analyzed

    """
    sc = SmartContract(sc_path)
    sc.vulnerabilities = {'oyente': ['reentrancy', 'reentrancy']}

    pe = PromptEngine(sc)
    print(f'A_basic\n\n{pe.generate_prompt("A_basic")}\n\n')
    print(f'B_vulnerability_context\n\n{pe.generate_prompt("B_vulnerability_context")}\n\n')
    print(f'C_vulnerability_examples\n\n{pe.generate_prompt("C_vulnerability_examples")}\n\n')

def main():
    sc_path = 'experiments/sc_to_repair/reentrance.sol'
    # show_prompt_types(sc_path)
    find_vulnerablities_and_repair_sc(sc_path)

if __name__ == "__main__":
    main()
