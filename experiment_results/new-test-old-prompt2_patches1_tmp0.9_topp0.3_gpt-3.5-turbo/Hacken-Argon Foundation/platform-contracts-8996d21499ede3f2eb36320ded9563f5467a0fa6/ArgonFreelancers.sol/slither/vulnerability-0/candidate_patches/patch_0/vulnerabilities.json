{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_92"
      ],
      "vulnerability_findings": [
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 719,
          "vulnerability_to_line": 748,
          "vulnerability_code": "    function _payFreelancer() private {\n        uint256 amount;\n\n        if (isBNB) {\n            amount = workPrice.safeSub(\n                (workPrice.safeMul(deployedFromContract.bnbFeeRate())).safeDiv(\n                    1e6\n                )\n            );\n            freelancerAddress.transfer(amount);\n            deployedFromContract.feeAddress().transfer(\n                workPrice.safeSub(amount)\n            );\n        } else {\n            amount = workPrice.safeSub(\n                (\n                    workPrice.safeMul(\n                        deployedFromContract.feeRates(tokenContractAddress)\n                    )\n                )\n                    .safeDiv(1e6)\n            );\n\n            IERC20(tokenContractAddress).transfer(freelancerAddress, amount);\n            IERC20(tokenContractAddress).transfer(\n                deployedFromContract.feeAddress(),\n                workPrice.safeSub(amount)\n            );\n        }",
          "message": "WorkContract._payFreelancer (patch_0.sol#719-748) sends eth to arbitrary user\n\tDangerous calls:\n\t- deployedFromContract.feeAddress().transfer(workPrice.safeSub(amount)) (patch_0.sol#729-731)\n"
        },
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 750,
          "vulnerability_to_line": 756,
          "vulnerability_code": "    function _payEmployer() private {\n        if (isBNB) {\n            employerAddress.transfer(workPrice);\n        } else {\n            IERC20(tokenContractAddress).transfer(employerAddress, workPrice);\n        }",
          "message": "WorkContract._payEmployer (patch_0.sol#750-756) sends eth to arbitrary user\n\tDangerous calls:\n\t- employerAddress.transfer(workPrice) (patch_0.sol#752)\n"
        },
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 758,
          "vulnerability_to_line": 771,
          "vulnerability_code": "function employerReceiveFile(uint256 _puan, string _remark)\n    external\n    nonReentrant\n{\n    require(msg.sender == employerAddress);\n    require(freelancerSendFiles, \"freelancer must be sent files\");\n    require(!employerReceiveFiles);\n\n    _payFreelancer();\n    deployedFromContract.setPuan(_puan, freelancerAddress);\n    employerRemark = _remark;\n    employerReceiveFiles = true;\n    workEndDate = now;",
          "message": "Reentrancy in WorkContract.employerReceiveFile (patch_0.sol#758-771):\n\tExternal calls:\n\t- _payFreelancer() (patch_0.sol#766)\n\t- deployedFromContract.setPuan(_puan,freelancerAddress) (patch_0.sol#767)\n\tExternal calls sending eth:\n\t- _payFreelancer() (patch_0.sol#766)\n\tState variables written after the call(s):\n\t- employerReceiveFiles (patch_0.sol#769)\n"
        },
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 773,
          "vulnerability_to_line": 783,
          "vulnerability_code": "    function employerCancel(string _depscription) external {\n        require(msg.sender == employerAddress);\n        require(argonShield);\n        require(approverStartDate == 0);\n        require(!employerReceiveFiles);\n        require(freelancerSendFiles, \"freelancer must be sent files\");\n\n        approverConfirmStatus = 0;\n        employerCancelDescription = _depscription;\n        approverStartDate = now;",
          "message": "WorkContract.employerCancel (patch_0.sol#773-783) uses a dangerous strict equality:\n\t- require(bool)(approverStartDate == 0)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 464,
          "vulnerability_to_line": 470,
          "vulnerability_code": "    function sendApproverArgonCoin(address _approveraddress) external {\n        require(isDeployedWorks[msg.sender]);\n\n        uint256 amount = (remainingArgonToken.safeMul(3)).safeDiv(1e5);\n        argonToken.transfer(_approveraddress, amount);\n        remainingArgonToken = remainingArgonToken.safeSub(amount);",
          "message": "Reentrancy in MainContract.sendApproverArgonCoin (patch_0.sol#464-470):\n\tExternal calls:\n\t- argonToken.transfer(_approveraddress,amount) (patch_0.sol#468)\n\tState variables written after the call(s):\n\t- remainingArgonToken (patch_0.sol#469)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 289,
          "vulnerability_to_line": 302,
          "vulnerability_code": "    function unLock() external mustApprover nonReentrant {\n        require(approverLockBalances[msg.sender] > 0);\n        AccountData storage data = accounts[msg.sender];\n        require(data.WorkAddresses.length == 0);\n        delete accounts[msg.sender];\n        personsAddress[msg.sender] = false;\n        for (uint256 x = 0; x < allPersons.length; x++) {\n            if (allPersons[x] == msg.sender) {\n                delete allPersons[x];\n            }\n        }\n        argonToken.transfer(msg.sender, approverLockBalances[msg.sender]);\n        approverLockBalances[msg.sender] = 0;",
          "message": "Reentrancy in MainContract.unLock (patch_0.sol#289-302):\n\tExternal calls:\n\t- argonToken.transfer(msg.sender,approverLockBalances[msg.sender]) (patch_0.sol#300)\n\tState variables written after the call(s):\n\t- approverLockBalances (patch_0.sol#301)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 281,
          "vulnerability_to_line": 287,
          "vulnerability_code": "    function sendArgonTokenAdmin(address _address, uint256 amount)\n        external\n        onlyApprover\n        nonReentrant\n    {\n        argonToken.transfer(_address, amount);",
          "message": "MainContract.sendArgonTokenAdmin (patch_0.sol#281-287) does not use the value returned by external calls:\n\t-argonToken.transfer(_address,amount) (patch_0.sol#286)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 289,
          "vulnerability_to_line": 302,
          "vulnerability_code": "    function unLock() external mustApprover nonReentrant {\n        require(approverLockBalances[msg.sender] > 0);\n        AccountData storage data = accounts[msg.sender];\n        require(data.WorkAddresses.length == 0);\n        delete accounts[msg.sender];\n        personsAddress[msg.sender] = false;\n        for (uint256 x = 0; x < allPersons.length; x++) {\n            if (allPersons[x] == msg.sender) {\n                delete allPersons[x];\n            }\n        }\n        argonToken.transfer(msg.sender, approverLockBalances[msg.sender]);\n        approverLockBalances[msg.sender] = 0;",
          "message": "MainContract.unLock (patch_0.sol#289-302) does not use the value returned by external calls:\n\t-argonToken.transfer(msg.sender,approverLockBalances[msg.sender]) (patch_0.sol#300)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 464,
          "vulnerability_to_line": 470,
          "vulnerability_code": "    function sendApproverArgonCoin(address _approveraddress) external {\n        require(isDeployedWorks[msg.sender]);\n\n        uint256 amount = (remainingArgonToken.safeMul(3)).safeDiv(1e5);\n        argonToken.transfer(_approveraddress, amount);\n        remainingArgonToken = remainingArgonToken.safeSub(amount);",
          "message": "MainContract.sendApproverArgonCoin (patch_0.sol#464-470) does not use the value returned by external calls:\n\t-argonToken.transfer(_approveraddress,amount) (patch_0.sol#468)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 719,
          "vulnerability_to_line": 748,
          "vulnerability_code": "    function _payFreelancer() private {\n        uint256 amount;\n\n        if (isBNB) {\n            amount = workPrice.safeSub(\n                (workPrice.safeMul(deployedFromContract.bnbFeeRate())).safeDiv(\n                    1e6\n                )\n            );\n            freelancerAddress.transfer(amount);\n            deployedFromContract.feeAddress().transfer(\n                workPrice.safeSub(amount)\n            );\n        } else {\n            amount = workPrice.safeSub(\n                (\n                    workPrice.safeMul(\n                        deployedFromContract.feeRates(tokenContractAddress)\n                    )\n                )\n                    .safeDiv(1e6)\n            );\n\n            IERC20(tokenContractAddress).transfer(freelancerAddress, amount);\n            IERC20(tokenContractAddress).transfer(\n                deployedFromContract.feeAddress(),\n                workPrice.safeSub(amount)\n            );\n        }",
          "message": "WorkContract._payFreelancer (patch_0.sol#719-748) does not use the value returned by external calls:\n\t-IERC20(tokenContractAddress).transfer(freelancerAddress,amount) (patch_0.sol#742)\n\t-IERC20(tokenContractAddress).transfer(deployedFromContract.feeAddress(),workPrice.safeSub(amount)) (patch_0.sol#743-746)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 750,
          "vulnerability_to_line": 756,
          "vulnerability_code": "    function _payEmployer() private {\n        if (isBNB) {\n            employerAddress.transfer(workPrice);\n        } else {\n            IERC20(tokenContractAddress).transfer(employerAddress, workPrice);\n        }",
          "message": "WorkContract._payEmployer (patch_0.sol#750-756) does not use the value returned by external calls:\n\t-IERC20(tokenContractAddress).transfer(employerAddress,workPrice) (patch_0.sol#754)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 308,
          "vulnerability_to_line": 338,
          "vulnerability_code": "    function addPerson(uint8 _accountType, string _personInfoData)\n        external\n        mustActive\n        nonReentrant\n    {\n        if (_accountType == 1) {\n            approverLockBalances[msg.sender] = approverLockBalances[msg.sender]\n                .safeAdd(approverMinArgonLimit);\n            require(\n                argonToken.transferFrom(\n                    msg.sender,\n                    address(this),\n                    approverMinArgonLimit\n                )\n            );\n        }\n        require(!personsAddress[msg.sender]);\n        AccountData memory newAccount =\n            AccountData({\n                accountType: _accountType,\n                personWalletAddress: msg.sender,\n                personWorkCount: 0,\n                personPuan: new uint256[](0),\n                WorkAddresses: new address[](0),\n                personInfoData: _personInfoData\n            });\n\n        accounts[msg.sender] = newAccount; \n        allPersons.push(msg.sender); \n        personsAddress[msg.sender] = true;",
          "message": "Reentrancy in MainContract.addPerson (patch_0.sol#308-338):\n\tExternal calls:\n\t- require(bool)(argonToken.transferFrom(msg.sender,address(this),approverMinArgonLimit)) (patch_0.sol#316-322)\n\tState variables written after the call(s):\n\t- accounts (patch_0.sol#335)\n\t- allPersons (patch_0.sol#336)\n\t- personsAddress (patch_0.sol#337)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 829,
          "vulnerability_to_line": 837,
          "vulnerability_code": "    function autoConfirm() external nonReentrant {\n        require(now > freelancerSendFilesDate.safeAdd(5 days));\n        require(!employerReceiveFiles);\n        require(freelancerSendFiles);\n        _payFreelancer();\n        deployedFromContract.setPuan(5, freelancerAddress);\n        employerRemark = \"Auto Confirmed By Smart Contract\";\n        workEndDate = now;",
          "message": "Reentrancy in WorkContract.autoConfirm (patch_0.sol#829-837):\n\tExternal calls:\n\t- _payFreelancer() (patch_0.sol#833)\n\t- deployedFromContract.setPuan(5,freelancerAddress) (patch_0.sol#834)\n\tExternal calls sending eth:\n\t- _payFreelancer() (patch_0.sol#833)\n\tState variables written after the call(s):\n\t- employerRemark (patch_0.sol#835)\n\t- workEndDate (patch_0.sol#836)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 809,
          "vulnerability_to_line": 827,
          "vulnerability_code": "    function cancelApprover(string _description)\n        external\n        nonReentrant\n        requireForApprover\n    {\n        if (now > approverStartDate.safeAdd(5 days)) {\n            require(isApprover(msg.sender));\n        } else {\n            require(msg.sender == approverAddress);\n            deployedFromContract.deleteApproverWorkAddress(\n                this,\n                approverAddress\n            );\n            deployedFromContract.sendApproverArgonCoin(approverAddress);\n        }\n        approverConfirmStatus = 2;\n        approverReport = _description;\n        _payEmployer();",
          "message": "Reentrancy in WorkContract.cancelApprover (patch_0.sol#809-827):\n\tExternal calls:\n\t- deployedFromContract.deleteApproverWorkAddress(this,approverAddress) (patch_0.sol#818-821)\n\t- deployedFromContract.sendApproverArgonCoin(approverAddress) (patch_0.sol#822)\n\tState variables written after the call(s):\n\t- approverConfirmStatus (patch_0.sol#824)\n\t- approverReport (patch_0.sol#825)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 785,
          "vulnerability_to_line": 807,
          "vulnerability_code": "    function confirmApprover(string _description)\n        external\n        nonReentrant\n        requireForApprover\n    {\n        if (now > approverStartDate.safeAdd(5 days)) {\n            require(isApprover(msg.sender));\n        } else {\n            require(msg.sender == approverAddress);\n\n            deployedFromContract.deleteApproverWorkAddress(\n                this,\n                approverAddress\n            );\n\n            deployedFromContract.sendApproverArgonCoin(approverAddress);\n        }\n\n        approverConfirmStatus = 1;\n        _payFreelancer();\n        approverReport = _description;\n        workEndDate = now;",
          "message": "Reentrancy in WorkContract.confirmApprover (patch_0.sol#785-807):\n\tExternal calls:\n\t- deployedFromContract.deleteApproverWorkAddress(this,approverAddress) (patch_0.sol#795-798)\n\t- deployedFromContract.sendApproverArgonCoin(approverAddress) (patch_0.sol#800)\n\tState variables written after the call(s):\n\t- approverConfirmStatus (patch_0.sol#803)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 785,
          "vulnerability_to_line": 807,
          "vulnerability_code": "    function confirmApprover(string _description)\n        external\n        nonReentrant\n        requireForApprover\n    {\n        if (now > approverStartDate.safeAdd(5 days)) {\n            require(isApprover(msg.sender));\n        } else {\n            require(msg.sender == approverAddress);\n\n            deployedFromContract.deleteApproverWorkAddress(\n                this,\n                approverAddress\n            );\n\n            deployedFromContract.sendApproverArgonCoin(approverAddress);\n        }\n\n        approverConfirmStatus = 1;\n        _payFreelancer();\n        approverReport = _description;\n        workEndDate = now;",
          "message": "Reentrancy in WorkContract.confirmApprover (patch_0.sol#785-807):\n\tExternal calls:\n\t- deployedFromContract.deleteApproverWorkAddress(this,approverAddress) (patch_0.sol#795-798)\n\t- deployedFromContract.sendApproverArgonCoin(approverAddress) (patch_0.sol#800)\n\t- _payFreelancer() (patch_0.sol#804)\n\tExternal calls sending eth:\n\t- _payFreelancer() (patch_0.sol#804)\n\tState variables written after the call(s):\n\t- approverReport (patch_0.sol#805)\n\t- workEndDate (patch_0.sol#806)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 533,
          "vulnerability_to_line": 555,
          "vulnerability_code": "    constructor(\n        string _workTitle,\n        string _workCategory,\n        string _workDescription,\n        string _workAvarageBudget,\n        address _employerAddress,\n        address _t\n    ) public {\n        require(MainContract(_t).isActive());\n        require(MainContract(_t).getPersonAccountType(_employerAddress) == 2);\n        workTitle = _workTitle;\n        workCategory = _workCategory;\n        workDescription = _workDescription;\n        workCreateTime = now;\n        workAvarageBudget = _workAvarageBudget;\n        workOfferCount = 0;\n        workStatus = false;\n        employerAddress = _employerAddress;\n        freelancerSendFiles = false;\n        employerReceiveFiles = false;\n        deployedFromContract = MainContract(_t);\n        argonToken = IERC20(MainContract(_t).argonTokenContractAddress());",
          "message": "Reentrancy in WorkContract.constructor (patch_0.sol#533-555):\n\tExternal calls:\n\t- require(bool)(MainContract(_t).isActive()) (patch_0.sol#541)\n\t- require(bool)(MainContract(_t).getPersonAccountType(_employerAddress) == 2) (patch_0.sol#542)\n\tState variables written after the call(s):\n\t- deployedFromContract (patch_0.sol#553)\n\t- employerAddress (patch_0.sol#550)\n\t- employerReceiveFiles (patch_0.sol#552)\n\t- freelancerSendFiles (patch_0.sol#551)\n\t- workAvarageBudget (patch_0.sol#547)\n\t- workCategory (patch_0.sol#544)\n\t- workCreateTime (patch_0.sol#546)\n\t- workDescription (patch_0.sol#545)\n\t- workOfferCount (patch_0.sol#548)\n\t- workStatus (patch_0.sol#549)\n\t- workTitle (patch_0.sol#543)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 533,
          "vulnerability_to_line": 555,
          "vulnerability_code": "    constructor(\n        string _workTitle,\n        string _workCategory,\n        string _workDescription,\n        string _workAvarageBudget,\n        address _employerAddress,\n        address _t\n    ) public {\n        require(MainContract(_t).isActive());\n        require(MainContract(_t).getPersonAccountType(_employerAddress) == 2);\n        workTitle = _workTitle;\n        workCategory = _workCategory;\n        workDescription = _workDescription;\n        workCreateTime = now;\n        workAvarageBudget = _workAvarageBudget;\n        workOfferCount = 0;\n        workStatus = false;\n        employerAddress = _employerAddress;\n        freelancerSendFiles = false;\n        employerReceiveFiles = false;\n        deployedFromContract = MainContract(_t);\n        argonToken = IERC20(MainContract(_t).argonTokenContractAddress());",
          "message": "Reentrancy in WorkContract.constructor (patch_0.sol#533-555):\n\tExternal calls:\n\t- require(bool)(MainContract(_t).isActive()) (patch_0.sol#541)\n\t- require(bool)(MainContract(_t).getPersonAccountType(_employerAddress) == 2) (patch_0.sol#542)\n\t- argonToken = IERC20(MainContract(_t).argonTokenContractAddress()) (patch_0.sol#554)\n\tState variables written after the call(s):\n\t- argonToken (patch_0.sol#554)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 576,
          "vulnerability_to_line": 604,
          "vulnerability_code": "    function createOffer(\n        uint256 _offerPrice,\n        string _description,\n        uint256 _deadline,\n        string _title,\n        address _tokenContract,\n        bool _isBNB,\n        bool _ArgonShield\n    ) external mustActive {\n        require(deployedFromContract.getPersonAccountType(msg.sender) == 0);\n        if (!_isBNB) {\n            require(_tokenContract != address(0));\n            require(deployedFromContract.availableTokens(_tokenContract));\n        }\n        Offer memory newOffer =\n            Offer({\n                offerPrice: _offerPrice,\n                freelancerAddress: msg.sender,\n                description: _description,\n                deadline: _deadline,\n                title: _title,\n                offerTokenContract: _tokenContract,\n                tokenContractIsBNB: _isBNB,\n                ArgonShield: _ArgonShield\n            });\n        offers[msg.sender] = newOffer;\n        allFreelancerAddress.push(msg.sender);\n        workOfferCount++;",
          "message": "Reentrancy in WorkContract.createOffer (patch_0.sol#576-604):\n\tExternal calls:\n\t- require(bool)(deployedFromContract.getPersonAccountType(msg.sender) == 0) (patch_0.sol#585)\n\t- require(bool)(deployedFromContract.availableTokens(_tokenContract)) (patch_0.sol#588)\n\tState variables written after the call(s):\n\t- allFreelancerAddress (patch_0.sol#602)\n\t- offers (patch_0.sol#601)\n\t- workOfferCount (patch_0.sol#603)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 758,
          "vulnerability_to_line": 771,
          "vulnerability_code": "function employerReceiveFile(uint256 _puan, string _remark)\n    external\n    nonReentrant\n{\n    require(msg.sender == employerAddress);\n    require(freelancerSendFiles, \"freelancer must be sent files\");\n    require(!employerReceiveFiles);\n\n    _payFreelancer();\n    deployedFromContract.setPuan(_puan, freelancerAddress);\n    employerRemark = _remark;\n    employerReceiveFiles = true;\n    workEndDate = now;",
          "message": "Reentrancy in WorkContract.employerReceiveFile (patch_0.sol#758-771):\n\tExternal calls:\n\t- _payFreelancer() (patch_0.sol#766)\n\t- deployedFromContract.setPuan(_puan,freelancerAddress) (patch_0.sol#767)\n\tExternal calls sending eth:\n\t- _payFreelancer() (patch_0.sol#766)\n\tState variables written after the call(s):\n\t- employerRemark (patch_0.sol#768)\n\t- workEndDate (patch_0.sol#770)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 651,
          "vulnerability_to_line": 676,
          "vulnerability_code": "    function selectOffer(address _freelancerAddress, address _approveraddress)\n        external\n        payable\n        mustActive\n    {\n        require(msg.sender == employerAddress);\n        Offer storage data = offers[_freelancerAddress];\n        require(data.tokenContractIsBNB);\n        if (data.ArgonShield) {\n            require(\n                deployedFromContract.approverLockBalances(_approveraddress) >=\n                    deployedFromContract.approverMinArgonLimit()\n            );\n            approverAddress = _approveraddress;\n            deployedFromContract.setApproverWorkAddress(this, _approveraddress);\n        }\n\n        require(msg.value >= data.offerPrice);\n        freelancerAddress = data.freelancerAddress;\n        workStatus = true;\n        workStartDate = now;\n        deadLine = data.deadline;\n        workPrice = data.offerPrice;\n        isBNB = true;\n        argonShield = data.ArgonShield;",
          "message": "Reentrancy in WorkContract.selectOffer (patch_0.sol#651-676):\n\tExternal calls:\n\t- require(bool)(deployedFromContract.approverLockBalances(_approveraddress) >= deployedFromContract.approverMinArgonLimit()) (patch_0.sol#660-663)\n\tState variables written after the call(s):\n\t- approverAddress (patch_0.sol#664)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 651,
          "vulnerability_to_line": 676,
          "vulnerability_code": "    function selectOffer(address _freelancerAddress, address _approveraddress)\n        external\n        payable\n        mustActive\n    {\n        require(msg.sender == employerAddress);\n        Offer storage data = offers[_freelancerAddress];\n        require(data.tokenContractIsBNB);\n        if (data.ArgonShield) {\n            require(\n                deployedFromContract.approverLockBalances(_approveraddress) >=\n                    deployedFromContract.approverMinArgonLimit()\n            );\n            approverAddress = _approveraddress;\n            deployedFromContract.setApproverWorkAddress(this, _approveraddress);\n        }\n\n        require(msg.value >= data.offerPrice);\n        freelancerAddress = data.freelancerAddress;\n        workStatus = true;\n        workStartDate = now;\n        deadLine = data.deadline;\n        workPrice = data.offerPrice;\n        isBNB = true;\n        argonShield = data.ArgonShield;",
          "message": "Reentrancy in WorkContract.selectOffer (patch_0.sol#651-676):\n\tExternal calls:\n\t- require(bool)(deployedFromContract.approverLockBalances(_approveraddress) >= deployedFromContract.approverMinArgonLimit()) (patch_0.sol#660-663)\n\t- deployedFromContract.setApproverWorkAddress(this,_approveraddress) (patch_0.sol#665)\n\tState variables written after the call(s):\n\t- argonShield (patch_0.sol#675)\n\t- deadLine (patch_0.sol#672)\n\t- freelancerAddress (patch_0.sol#669)\n\t- isBNB (patch_0.sol#674)\n\t- workPrice (patch_0.sol#673)\n\t- workStartDate (patch_0.sol#671)\n\t- workStatus (patch_0.sol#670)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 678,
          "vulnerability_to_line": 709,
          "vulnerability_code": "    function selectOfferWithToken(\n        address _freelancerAddress,\n        address _approveraddress\n    ) external mustActive {\n        require(msg.sender == employerAddress);\n        Offer storage data = offers[_freelancerAddress];\n        require(!data.tokenContractIsBNB);\n        if (data.ArgonShield) {\n            require(\n                deployedFromContract.approverLockBalances(_approveraddress) >=\n                    deployedFromContract.approverMinArgonLimit()\n            );\n\n            approverAddress = _approveraddress;\n            deployedFromContract.setApproverWorkAddress(this, _approveraddress);\n        }\n        freelancerAddress = data.freelancerAddress;\n        workStatus = true;\n        workStartDate = now;\n        deadLine = data.deadline;\n        workPrice = data.offerPrice;\n        isBNB = false;\n        tokenContractAddress = data.offerTokenContract;\n        require(\n            IERC20(data.offerTokenContract).transferFrom(\n                msg.sender,\n                address(this),\n                data.offerPrice\n            )\n        );\n        argonShield = data.ArgonShield;",
          "message": "Reentrancy in WorkContract.selectOfferWithToken (patch_0.sol#678-709):\n\tExternal calls:\n\t- require(bool)(deployedFromContract.approverLockBalances(_approveraddress) >= deployedFromContract.approverMinArgonLimit()) (patch_0.sol#686-689)\n\tState variables written after the call(s):\n\t- approverAddress (patch_0.sol#691)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 678,
          "vulnerability_to_line": 709,
          "vulnerability_code": "    function selectOfferWithToken(\n        address _freelancerAddress,\n        address _approveraddress\n    ) external mustActive {\n        require(msg.sender == employerAddress);\n        Offer storage data = offers[_freelancerAddress];\n        require(!data.tokenContractIsBNB);\n        if (data.ArgonShield) {\n            require(\n                deployedFromContract.approverLockBalances(_approveraddress) >=\n                    deployedFromContract.approverMinArgonLimit()\n            );\n\n            approverAddress = _approveraddress;\n            deployedFromContract.setApproverWorkAddress(this, _approveraddress);\n        }\n        freelancerAddress = data.freelancerAddress;\n        workStatus = true;\n        workStartDate = now;\n        deadLine = data.deadline;\n        workPrice = data.offerPrice;\n        isBNB = false;\n        tokenContractAddress = data.offerTokenContract;\n        require(\n            IERC20(data.offerTokenContract).transferFrom(\n                msg.sender,\n                address(this),\n                data.offerPrice\n            )\n        );\n        argonShield = data.ArgonShield;",
          "message": "Reentrancy in WorkContract.selectOfferWithToken (patch_0.sol#678-709):\n\tExternal calls:\n\t- require(bool)(deployedFromContract.approverLockBalances(_approveraddress) >= deployedFromContract.approverMinArgonLimit()) (patch_0.sol#686-689)\n\t- deployedFromContract.setApproverWorkAddress(this,_approveraddress) (patch_0.sol#692)\n\tState variables written after the call(s):\n\t- deadLine (patch_0.sol#697)\n\t- freelancerAddress (patch_0.sol#694)\n\t- isBNB (patch_0.sol#699)\n\t- tokenContractAddress (patch_0.sol#700)\n\t- workPrice (patch_0.sol#698)\n\t- workStartDate (patch_0.sol#696)\n\t- workStatus (patch_0.sol#695)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 678,
          "vulnerability_to_line": 709,
          "vulnerability_code": "    function selectOfferWithToken(\n        address _freelancerAddress,\n        address _approveraddress\n    ) external mustActive {\n        require(msg.sender == employerAddress);\n        Offer storage data = offers[_freelancerAddress];\n        require(!data.tokenContractIsBNB);\n        if (data.ArgonShield) {\n            require(\n                deployedFromContract.approverLockBalances(_approveraddress) >=\n                    deployedFromContract.approverMinArgonLimit()\n            );\n\n            approverAddress = _approveraddress;\n            deployedFromContract.setApproverWorkAddress(this, _approveraddress);\n        }\n        freelancerAddress = data.freelancerAddress;\n        workStatus = true;\n        workStartDate = now;\n        deadLine = data.deadline;\n        workPrice = data.offerPrice;\n        isBNB = false;\n        tokenContractAddress = data.offerTokenContract;\n        require(\n            IERC20(data.offerTokenContract).transferFrom(\n                msg.sender,\n                address(this),\n                data.offerPrice\n            )\n        );\n        argonShield = data.ArgonShield;",
          "message": "Reentrancy in WorkContract.selectOfferWithToken (patch_0.sol#678-709):\n\tExternal calls:\n\t- require(bool)(deployedFromContract.approverLockBalances(_approveraddress) >= deployedFromContract.approverMinArgonLimit()) (patch_0.sol#686-689)\n\t- deployedFromContract.setApproverWorkAddress(this,_approveraddress) (patch_0.sol#692)\n\t- require(bool)(IERC20(data.offerTokenContract).transferFrom(msg.sender,address(this),data.offerPrice)) (patch_0.sol#701-707)\n\tState variables written after the call(s):\n\t- argonShield (patch_0.sol#708)\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 89,
          "vulnerability_to_line": 92,
          "vulnerability_code": "    function _addApprover(address account) internal {\n        _approvers.add(account);\n        emit ApproverAdded(account);",
          "message": "Function 'ApproverRole._addApprover' (patch_0.sol#89-92) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": 97,
          "vulnerability_code": "    function _removeApprover(address account) internal {\n        _approvers.remove(account);\n        emit ApproverRemoved(account);",
          "message": "Function 'ApproverRole._removeApprover' (patch_0.sol#94-97) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 246,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _argonTokenAddress,",
          "message": "Parameter '_argonTokenAddress' of MainContract. (patch_0.sol#246) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 247,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint8 _bnbFeeRate,",
          "message": "Parameter '_bnbFeeRate' of MainContract. (patch_0.sol#247) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 248,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _feeAddress",
          "message": "Parameter '_feeAddress' of MainContract. (patch_0.sol#248) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 258,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function changeActive(bool _active) external onlyApprover {",
          "message": "Parameter '_active' of MainContract.changeActive (patch_0.sol#258) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 263,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _tokenAddress,",
          "message": "Parameter '_tokenAddress' of MainContract.changeAvailableTokenFee (patch_0.sol#263) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 264,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint8 _feeRate,",
          "message": "Parameter '_feeRate' of MainContract.changeAvailableTokenFee (patch_0.sol#264) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 265,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool _available",
          "message": "Parameter '_available' of MainContract.changeAvailableTokenFee (patch_0.sol#265) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 272,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _approverMinArgonLimit,",
          "message": "Parameter '_approverMinArgonLimit' of MainContract.changeSettings (patch_0.sol#272) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 273,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint8 _bnbFeeRate,",
          "message": "Parameter '_bnbFeeRate' of MainContract.changeSettings (patch_0.sol#273) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 274,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _feeAddress",
          "message": "Parameter '_feeAddress' of MainContract.changeSettings (patch_0.sol#274) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 281,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function sendArgonTokenAdmin(address _address, uint256 amount)",
          "message": "Parameter '_address' of MainContract.sendArgonTokenAdmin (patch_0.sol#281) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 308,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addPerson(uint8 _accountType, string _personInfoData)",
          "message": "Parameter '_accountType' of MainContract.addPerson (patch_0.sol#308) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 308,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addPerson(uint8 _accountType, string _personInfoData)",
          "message": "Parameter '_personInfoData' of MainContract.addPerson (patch_0.sol#308) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 340,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getPersonInfoData(address _personAddress)",
          "message": "Parameter '_personAddress' of MainContract.getPersonInfoData (patch_0.sol#340) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 361,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getPersonAccountType(address _personAddress)",
          "message": "Parameter '_personAddress' of MainContract.getPersonAccountType (patch_0.sol#361) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 370,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function updatePerson(string _personInfoData)",
          "message": "Parameter '_personInfoData' of MainContract.updatePerson (patch_0.sol#370) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 380,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _workTitle,",
          "message": "Parameter '_workTitle' of MainContract.createWork (patch_0.sol#380) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 381,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _workCategory,",
          "message": "Parameter '_workCategory' of MainContract.createWork (patch_0.sol#381) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 382,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _workDescription,",
          "message": "Parameter '_workDescription' of MainContract.createWork (patch_0.sol#382) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 383,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _workAvarageBudget",
          "message": "Parameter '_workAvarageBudget' of MainContract.createWork (patch_0.sol#383) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 405,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setPuan(uint256 _puan, address _freelancerAddress) external {",
          "message": "Parameter '_puan' of MainContract.setPuan (patch_0.sol#405) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 405,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setPuan(uint256 _puan, address _freelancerAddress) external {",
          "message": "Parameter '_freelancerAddress' of MainContract.setPuan (patch_0.sol#405) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 412,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _workAddress,",
          "message": "Parameter '_workAddress' of MainContract.setApproverWorkAddress (patch_0.sol#412) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 413,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _approveraddress",
          "message": "Parameter '_approveraddress' of MainContract.setApproverWorkAddress (patch_0.sol#413) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 421,
          "vulnerability_to_line": 434,
          "vulnerability_code": "    function _removeApproverWorkAddressArray(\n        uint256 index,\n        address _approveraddress\n    ) private {\n        AccountData storage data = accounts[_approveraddress];\n\n        if (index >= data.WorkAddresses.length) return;\n\n        for (uint256 i = index; i < data.WorkAddresses.length - 1; i++) {\n            data.WorkAddresses[i] = data.WorkAddresses[i + 1];\n        }\n        delete data.WorkAddresses[data.WorkAddresses.length - 1];\n        data.WorkAddresses.length--;",
          "message": "Function 'MainContract._removeApproverWorkAddressArray' (patch_0.sol#421-434) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 423,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _approveraddress",
          "message": "Parameter '_approveraddress' of MainContract._removeApproverWorkAddressArray (patch_0.sol#423) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 437,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _workAddress,",
          "message": "Parameter '_workAddress' of MainContract.deleteApproverWorkAddress (patch_0.sol#437) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 438,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _approveraddress",
          "message": "Parameter '_approveraddress' of MainContract.deleteApproverWorkAddress (patch_0.sol#438) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 450,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function checkDeadline(address _workAddress)",
          "message": "Parameter '_workAddress' of MainContract.checkDeadline (patch_0.sol#450) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 464,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function sendApproverArgonCoin(address _approveraddress) external {",
          "message": "Parameter '_approveraddress' of MainContract.sendApproverArgonCoin (patch_0.sol#464) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 534,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _workTitle,",
          "message": "Parameter '_workTitle' of WorkContract. (patch_0.sol#534) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 535,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _workCategory,",
          "message": "Parameter '_workCategory' of WorkContract. (patch_0.sol#535) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 536,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _workDescription,",
          "message": "Parameter '_workDescription' of WorkContract. (patch_0.sol#536) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 537,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _workAvarageBudget,",
          "message": "Parameter '_workAvarageBudget' of WorkContract. (patch_0.sol#537) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 538,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _employerAddress,",
          "message": "Parameter '_employerAddress' of WorkContract. (patch_0.sol#538) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 539,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _t",
          "message": "Parameter '_t' of WorkContract. (patch_0.sol#539) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 562,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _workTitle,",
          "message": "Parameter '_workTitle' of WorkContract.updateWork (patch_0.sol#562) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 563,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _workCategory,",
          "message": "Parameter '_workCategory' of WorkContract.updateWork (patch_0.sol#563) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 564,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _workDescription,",
          "message": "Parameter '_workDescription' of WorkContract.updateWork (patch_0.sol#564) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 565,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _workAvarageBudget,",
          "message": "Parameter '_workAvarageBudget' of WorkContract.updateWork (patch_0.sol#565) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 566,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _workaddress",
          "message": "Parameter '_workaddress' of WorkContract.updateWork (patch_0.sol#566) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 577,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _offerPrice,",
          "message": "Parameter '_offerPrice' of WorkContract.createOffer (patch_0.sol#577) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 578,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _description,",
          "message": "Parameter '_description' of WorkContract.createOffer (patch_0.sol#578) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 579,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _deadline,",
          "message": "Parameter '_deadline' of WorkContract.createOffer (patch_0.sol#579) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 580,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _title,",
          "message": "Parameter '_title' of WorkContract.createOffer (patch_0.sol#580) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 581,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _tokenContract,",
          "message": "Parameter '_tokenContract' of WorkContract.createOffer (patch_0.sol#581) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 582,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool _isBNB,",
          "message": "Parameter '_isBNB' of WorkContract.createOffer (patch_0.sol#582) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 583,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool _ArgonShield",
          "message": "Parameter '_ArgonShield' of WorkContract.createOffer (patch_0.sol#583) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 612,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _offerPrice,",
          "message": "Parameter '_offerPrice' of WorkContract.updateOffer (patch_0.sol#612) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 613,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _description,",
          "message": "Parameter '_description' of WorkContract.updateOffer (patch_0.sol#613) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 614,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _title,",
          "message": "Parameter '_title' of WorkContract.updateOffer (patch_0.sol#614) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 615,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool _ArgonShield",
          "message": "Parameter '_ArgonShield' of WorkContract.updateOffer (patch_0.sol#615) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 624,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getOfferData(address _freelancerAddress)",
          "message": "Parameter '_freelancerAddress' of WorkContract.getOfferData (patch_0.sol#624) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 651,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function selectOffer(address _freelancerAddress, address _approveraddress)",
          "message": "Parameter '_freelancerAddress' of WorkContract.selectOffer (patch_0.sol#651) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 651,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function selectOffer(address _freelancerAddress, address _approveraddress)",
          "message": "Parameter '_approveraddress' of WorkContract.selectOffer (patch_0.sol#651) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 679,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _freelancerAddress,",
          "message": "Parameter '_freelancerAddress' of WorkContract.selectOfferWithToken (patch_0.sol#679) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 680,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _approveraddress",
          "message": "Parameter '_approveraddress' of WorkContract.selectOfferWithToken (patch_0.sol#680) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 711,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function freelancerSendFile(string _workFilesLink) external {",
          "message": "Parameter '_workFilesLink' of WorkContract.freelancerSendFile (patch_0.sol#711) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 719,
          "vulnerability_to_line": 748,
          "vulnerability_code": "    function _payFreelancer() private {\n        uint256 amount;\n\n        if (isBNB) {\n            amount = workPrice.safeSub(\n                (workPrice.safeMul(deployedFromContract.bnbFeeRate())).safeDiv(\n                    1e6\n                )\n            );\n            freelancerAddress.transfer(amount);\n            deployedFromContract.feeAddress().transfer(\n                workPrice.safeSub(amount)\n            );\n        } else {\n            amount = workPrice.safeSub(\n                (\n                    workPrice.safeMul(\n                        deployedFromContract.feeRates(tokenContractAddress)\n                    )\n                )\n                    .safeDiv(1e6)\n            );\n\n            IERC20(tokenContractAddress).transfer(freelancerAddress, amount);\n            IERC20(tokenContractAddress).transfer(\n                deployedFromContract.feeAddress(),\n                workPrice.safeSub(amount)\n            );\n        }",
          "message": "Function 'WorkContract._payFreelancer' (patch_0.sol#719-748) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 750,
          "vulnerability_to_line": 756,
          "vulnerability_code": "    function _payEmployer() private {\n        if (isBNB) {\n            employerAddress.transfer(workPrice);\n        } else {\n            IERC20(tokenContractAddress).transfer(employerAddress, workPrice);\n        }",
          "message": "Function 'WorkContract._payEmployer' (patch_0.sol#750-756) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 758,
          "vulnerability_to_line": null,
          "vulnerability_code": "function employerReceiveFile(uint256 _puan, string _remark)",
          "message": "Parameter '_puan' of WorkContract.employerReceiveFile (patch_0.sol#758) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 758,
          "vulnerability_to_line": null,
          "vulnerability_code": "function employerReceiveFile(uint256 _puan, string _remark)",
          "message": "Parameter '_remark' of WorkContract.employerReceiveFile (patch_0.sol#758) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 773,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function employerCancel(string _depscription) external {",
          "message": "Parameter '_depscription' of WorkContract.employerCancel (patch_0.sol#773) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 785,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function confirmApprover(string _description)",
          "message": "Parameter '_description' of WorkContract.confirmApprover (patch_0.sol#785) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 809,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function cancelApprover(string _description)",
          "message": "Parameter '_description' of WorkContract.cancelApprover (patch_0.sol#809) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "        firstSignAddress = 0xBdCf81639242C471f79f985D66BE8A289bD78428; ",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "        secondSignAddress = 0xFb46431618d4769F2b14178C19402eca7fbb2b5f; ",
          "message": null
        },
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 433,
          "vulnerability_to_line": null,
          "vulnerability_code": "        data.WorkAddresses.length--;",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function totalSupply() external constant returns (uint256);",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address tokenOwner)",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 130,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address tokenOwner, address spender)",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 x = 0; x < allPersons.length; x++) {",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 429,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = index; i < data.WorkAddresses.length - 1; i++) {",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 443,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < data.WorkAddresses.length; i++) {",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 x = 0; x < allPersons.length; x++) {",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 443,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < data.WorkAddresses.length; i++) {",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Roles.Role private _approvers;",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 169,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private constant _NOT_ENTERED = 1;",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 170,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private constant _ENTERED = 2;",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _status;",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 474,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 534,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _workTitle,",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 535,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _workCategory,",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 536,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _workDescription,",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 537,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _workAvarageBudget,",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address firstSignAddress;",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address secondSignAddress;",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => bool) signed; ",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => AccountData) accounts;",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 212,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => bool) personsAddress;",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 476,
          "vulnerability_to_line": null,
          "vulnerability_code": "    MainContract deployedFromContract;",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 520,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => Offer) offers;",
          "message": null
        }
      ]
    },
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 x = 0; x < allPersons.length; x++) {",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 429,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = index; i < data.WorkAddresses.length - 1; i++) {",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 443,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < data.WorkAddresses.length; i++) {",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() internal {",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _addApprover(msg.sender);",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "        firstSignAddress = 0xBdCf81639242C471f79f985D66BE8A289bD78428; ",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "        secondSignAddress = 0xFb46431618d4769F2b14178C19402eca7fbb2b5f; ",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 174,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 175,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _status = _NOT_ENTERED;",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 176,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 245,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 246,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _argonTokenAddress,",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 247,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint8 _bnbFeeRate,",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 248,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _feeAddress",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 249,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) public {",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 250,
          "vulnerability_to_line": null,
          "vulnerability_code": "        argonToken = IERC20(_argonTokenAddress);",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 251,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bnbFeeRate = _bnbFeeRate;",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": null,
          "vulnerability_code": "        remainingArgonToken = 5e6 ether;",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 253,
          "vulnerability_to_line": null,
          "vulnerability_code": "        approverMinArgonLimit = 20000 * 10**18;",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 254,
          "vulnerability_to_line": null,
          "vulnerability_code": "        feeAddress = _feeAddress;",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 533,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 534,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _workTitle,",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 535,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _workCategory,",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 536,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _workDescription,",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 537,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _workAvarageBudget,",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 538,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _employerAddress,",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 539,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _t",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 540,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) public {",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 541,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(MainContract(_t).isActive());",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 542,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(MainContract(_t).getPersonAccountType(_employerAddress) == 2);",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 x = 0; x < allPersons.length; x++) {",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 296,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (allPersons[x] == msg.sender) {",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 297,
          "vulnerability_to_line": null,
          "vulnerability_code": "                delete allPersons[x];",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 x = 0; x < allPersons.length; x++) {",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 429,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = index; i < data.WorkAddresses.length - 1; i++) {",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 443,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < data.WorkAddresses.length; i++) {",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 187,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 763,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(freelancerSendFiles, \"freelancer must be sent files\");",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 778,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(freelancerSendFiles, \"freelancer must be sent files\");",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(signed[firstSignAddress] && signed[secondSignAddress]);",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(signed[firstSignAddress] && signed[secondSignAddress]);",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(signed[firstSignAddress] && signed[secondSignAddress]);",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 528,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(approverConfirmStatus == 0 && approverStartDate > 0);",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 457,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (now > deployedWork.deadLine() && deployedWork.deadLine() != 0) {",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 458,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return (true, _workAddress);",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 459,
          "vulnerability_to_line": null,
          "vulnerability_code": "        } else {",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 460,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return (false, _workAddress);",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 461,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 433,
          "vulnerability_to_line": null,
          "vulnerability_code": "        data.WorkAddresses.length--;",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 608,
          "vulnerability_to_line": null,
          "vulnerability_code": "        workOfferCount--;",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 x = 0; x < allPersons.length; x++) {",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 429,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = index; i < data.WorkAddresses.length - 1; i++) {",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 443,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < data.WorkAddresses.length; i++) {",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 603,
          "vulnerability_to_line": null,
          "vulnerability_code": "        workOfferCount++;",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    }
  }
}