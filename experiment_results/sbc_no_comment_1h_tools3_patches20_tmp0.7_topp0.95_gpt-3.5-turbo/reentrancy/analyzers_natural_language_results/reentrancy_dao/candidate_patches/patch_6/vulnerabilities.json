{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_4"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": 18,
          "vulnerability_code": "    function withdrawAll() public {\n        require(!locked);\n        uint oCredit = credit[msg.sender];\n        if (oCredit > 0) {\n            locked = true;\n            balance -= oCredit;\n            credit[msg.sender] = 0;\n            locked = false;\n            require(msg.sender.call.value(oCredit)());\n        }",
          "message": "ReentrancyDAO.withdrawAll (patch_6.sol#8-18) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": 23,
          "vulnerability_code": "    function deposit() public payable {\n        credit[msg.sender] += msg.value;\n        balance += msg.value;",
          "message": "ReentrancyDAO.deposit (patch_6.sol#20-23) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_6.sol:\n\t- pragma solidity^0.4.19 (patch_6.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": 18,
          "vulnerability_code": "    function withdrawAll() public {\n        require(!locked);\n        uint oCredit = credit[msg.sender];\n        if (oCredit > 0) {\n            locked = true;\n            balance -= oCredit;\n            credit[msg.sender] = 0;\n            locked = false;\n            require(msg.sender.call.value(oCredit)());\n        }",
          "message": "Low level call in ReentrancyDAO.withdrawAll (patch_6.sol#8-18):\n\t-require(bool)(msg.sender.call.value(oCredit)()) patch_6.sol#16\n"
        }
      ]
    },
    "mythril-0.23.15": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(msg.sender.call.value(oCredit)());",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "        credit[msg.sender] += msg.value;",
          "message": null
        }
      ]
    }
  }
}