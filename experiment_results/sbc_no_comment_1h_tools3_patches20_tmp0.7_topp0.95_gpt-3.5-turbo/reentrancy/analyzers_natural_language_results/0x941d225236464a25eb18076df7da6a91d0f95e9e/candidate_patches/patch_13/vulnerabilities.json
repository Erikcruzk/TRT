{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril-0.23.15": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Dependence on predictable environment variable (SWC 120)",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_am <= balances[msg.sender] && block.number > lastBlock);",
          "message": "A control flow decision is made based on The block.number environment variable.\nThe block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-120"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": "The arithmetic operator can underflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "        TransferLog.AddMessage(msg.sender, _am, \"CashOut\");",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "        TransferLog.AddMessage(msg.sender, _am, \"CashOut\");",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": "The arithmetic operator can underflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "        reentrancy_lock = false;",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "        reentrancy_lock = false;",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.\nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.\nClassification: SWC-101"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "        TransferLog.AddMessage(msg.sender, msg.value, \"Deposit\");",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "        lastBlock = block.number;",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_23"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": 33,
          "vulnerability_code": "    function CashOut(uint _am) public {\n        require(_am <= balances[msg.sender] && block.number > lastBlock);\n        require(!reentrancy_lock);\n        reentrancy_lock = true;\n        msg.sender.transfer(_am);\n        balances[msg.sender] -= _am;\n        TransferLog.AddMessage(msg.sender, _am, \"CashOut\");\n        reentrancy_lock = false;",
          "message": "Reentrancy in ETH_FUND.CashOut (patch_13.sol#25-33):\n\tExternal calls:\n\t- TransferLog.AddMessage(msg.sender,_am,CashOut) (patch_13.sol#31)\n\tExternal calls sending eth:\n\t- msg.sender.transfer(_am) (patch_13.sol#29)\n\tState variables written after the call(s):\n\t- reentrancy_lock (patch_13.sol#32)\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Message memory LastMsg;",
          "message": "LastMsg in Log.AddMessage (patch_13.sol#50) is a local variable never initialiazed\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": 23,
          "vulnerability_code": "    function Deposit() public payable {\n        require(msg.value > MinDeposit);\n        balances[msg.sender] += msg.value;\n        TransferLog.AddMessage(msg.sender, msg.value, \"Deposit\");\n        lastBlock = block.number;",
          "message": "Reentrancy in ETH_FUND.Deposit (patch_13.sol#18-23):\n\tExternal calls:\n\t- TransferLog.AddMessage(msg.sender,msg.value,Deposit) (patch_13.sol#21)\n\tState variables written after the call(s):\n\t- lastBlock (patch_13.sol#22)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinDeposit = 1 ether;",
          "message": "ETH_FUND.MinDeposit should be constant (patch_13.sol#6)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": 23,
          "vulnerability_code": "    function Deposit() public payable {\n        require(msg.value > MinDeposit);\n        balances[msg.sender] += msg.value;\n        TransferLog.AddMessage(msg.sender, msg.value, \"Deposit\");\n        lastBlock = block.number;",
          "message": "ETH_FUND.Deposit (patch_13.sol#18-23) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": 33,
          "vulnerability_code": "    function CashOut(uint _am) public {\n        require(_am <= balances[msg.sender] && block.number > lastBlock);\n        require(!reentrancy_lock);\n        reentrancy_lock = true;\n        msg.sender.transfer(_am);\n        balances[msg.sender] -= _am;\n        TransferLog.AddMessage(msg.sender, _am, \"CashOut\");\n        reentrancy_lock = false;",
          "message": "ETH_FUND.CashOut (patch_13.sol#25-33) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() public payable {}",
          "message": "ETH_FUND.fallback (patch_13.sol#35) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": 56,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        Message memory LastMsg;\n        LastMsg.Sender = _adr;\n        LastMsg.Time = now;\n        LastMsg.Val = _val;\n        LastMsg.Data = _data;\n        History.push(LastMsg);",
          "message": "Log.AddMessage (patch_13.sol#49-56) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_13.sol:\n\t- pragma solidity^0.4.19 (patch_13.sol#1): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 37,
          "vulnerability_code": "contract ETH_FUND {\n    mapping(address => uint) public balances;\n\n    uint public MinDeposit = 1 ether;\n\n    Log TransferLog;\n\n    uint lastBlock;\n\n    bool reentrancy_lock = false;\n\n    function ETH_FUND(address _log) public {\n        TransferLog = Log(_log);\n    }\n\n    function Deposit() public payable {\n        require(msg.value > MinDeposit);\n        balances[msg.sender] += msg.value;\n        TransferLog.AddMessage(msg.sender, msg.value, \"Deposit\");\n        lastBlock = block.number;\n    }\n\n    function CashOut(uint _am) public {\n        require(_am <= balances[msg.sender] && block.number > lastBlock);\n        require(!reentrancy_lock);\n        reentrancy_lock = true;\n        msg.sender.transfer(_am);\n        balances[msg.sender] -= _am;\n        TransferLog.AddMessage(msg.sender, _am, \"CashOut\");\n        reentrancy_lock = false;\n    }\n\n    function() public payable {}\n",
          "message": "Contract 'ETH_FUND' (patch_13.sol#3-37) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": 16,
          "vulnerability_code": "    function ETH_FUND(address _log) public {\n        TransferLog = Log(_log);",
          "message": "Function 'ETH_FUND.ETH_FUND' (patch_13.sol#14-16) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ETH_FUND(address _log) public {",
          "message": "Parameter '_log' of ETH_FUND.ETH_FUND (patch_13.sol#14) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": 23,
          "vulnerability_code": "    function Deposit() public payable {\n        require(msg.value > MinDeposit);\n        balances[msg.sender] += msg.value;\n        TransferLog.AddMessage(msg.sender, msg.value, \"Deposit\");\n        lastBlock = block.number;",
          "message": "Function 'ETH_FUND.Deposit' (patch_13.sol#18-23) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": 33,
          "vulnerability_code": "    function CashOut(uint _am) public {\n        require(_am <= balances[msg.sender] && block.number > lastBlock);\n        require(!reentrancy_lock);\n        reentrancy_lock = true;\n        msg.sender.transfer(_am);\n        balances[msg.sender] -= _am;\n        TransferLog.AddMessage(msg.sender, _am, \"CashOut\");\n        reentrancy_lock = false;",
          "message": "Function 'ETH_FUND.CashOut' (patch_13.sol#25-33) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function CashOut(uint _am) public {",
          "message": "Parameter '_am' of ETH_FUND.CashOut (patch_13.sol#25) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinDeposit = 1 ether;",
          "message": "Variable 'ETH_FUND.MinDeposit' (patch_13.sol#6) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Log TransferLog;",
          "message": "Variable 'ETH_FUND.TransferLog' (patch_13.sol#8) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool reentrancy_lock = false;",
          "message": "Variable 'ETH_FUND.reentrancy_lock' (patch_13.sol#12) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": 56,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        Message memory LastMsg;\n        LastMsg.Sender = _adr;\n        LastMsg.Time = now;\n        LastMsg.Val = _val;\n        LastMsg.Data = _data;\n        History.push(LastMsg);",
          "message": "Function 'Log.AddMessage' (patch_13.sol#49-56) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of Log.AddMessage (patch_13.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of Log.AddMessage (patch_13.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of Log.AddMessage (patch_13.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": "Variable 'Log.History' (patch_13.sol#47) is not in mixedCase\n"
        }
      ]
    }
  }
}