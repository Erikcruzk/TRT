{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_token.call(bytes4(keccak256(\"transfer(address,uint256)\")), _to, _amount));",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_addr.call.value(_wei)());",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": null,
          "vulnerability_code": "        token.withdrawToken(_token, _amount, _to);",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "        holders[msg.sender] += msg.value;",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_20"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 14,
          "vulnerability_code": "    function changeOwner(address _newOwner) public onlyOwner {\n        require(_newOwner != address(0));\n        newOwner = _newOwner;",
          "message": "Ownable.changeOwner (patch_0.sol#11-14) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 19,
          "vulnerability_code": "    function confirmOwner() public {\n        require(msg.sender == newOwner);\n        owner = newOwner;",
          "message": "Ownable.confirmOwner (patch_0.sol#16-19) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": 38,
          "vulnerability_code": "    function withdrawToken(\n        address _token,\n        uint256 _amount,\n        address _to\n    ) public onlyOwner {\n        require(_token != address(0));\n        require(_to != address(0));\n        require(_amount > 0);\n\n        require(_token.call(bytes4(keccak256(\"transfer(address,uint256)\")), _to, _amount));",
          "message": "Token.withdrawToken (patch_0.sol#28-38) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": 51,
          "vulnerability_code": "    function() public payable {\n        deposit();",
          "message": "TokenBank.fallback (patch_0.sol#49-51) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": 71,
          "vulnerability_code": "    function withdrawTokenToHolder(\n        address _to,\n        address _token,\n        uint _amount\n    ) public onlyOwner {\n        require(holders[_to] > 0);\n        require(_token != address(0));\n        require(_to != address(0));\n        require(_amount > 0);\n\n        holders[_to] = 0;\n        Token token = Token(_token);\n        token.withdrawToken(_token, _amount, _to);",
          "message": "TokenBank.withdrawTokenToHolder (patch_0.sol#58-71) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": 83,
          "vulnerability_code": "    function withdrawToHolder(\n        address _addr,\n        uint _wei\n    ) public onlyOwner {\n        require(holders[_addr] > 0);\n        require(_addr != address(0));\n        require(_wei > 0);\n\n        holders[_addr] -= _wei;\n        require(_addr.call.value(_wei)());",
          "message": "TokenBank.withdrawToHolder (patch_0.sol#73-83) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_0.sol:\n\t- pragma solidity^0.4.19 (patch_0.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": 38,
          "vulnerability_code": "    function withdrawToken(\n        address _token,\n        uint256 _amount,\n        address _to\n    ) public onlyOwner {\n        require(_token != address(0));\n        require(_to != address(0));\n        require(_amount > 0);\n\n        require(_token.call(bytes4(keccak256(\"transfer(address,uint256)\")), _to, _amount));",
          "message": "Low level call in Token.withdrawToken (patch_0.sol#28-38):\n\t-require(bool)(_token.call(bytes4(keccak256()(transfer(address,uint256))),_to,_amount)) patch_0.sol#37\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": 83,
          "vulnerability_code": "    function withdrawToHolder(\n        address _addr,\n        uint _wei\n    ) public onlyOwner {\n        require(holders[_addr] > 0);\n        require(_addr != address(0));\n        require(_wei > 0);\n\n        holders[_addr] -= _wei;\n        require(_addr.call.value(_wei)());",
          "message": "Low level call in TokenBank.withdrawToHolder (patch_0.sol#73-83):\n\t-require(bool)(_addr.call.value(_wei)()) patch_0.sol#82\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 9,
          "vulnerability_code": "    function Ownable() public {\n        owner = msg.sender;",
          "message": "Function 'Ownable.Ownable' (patch_0.sol#7-9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function changeOwner(address _newOwner) public onlyOwner {",
          "message": "Parameter '_newOwner' of Ownable.changeOwner (patch_0.sol#11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _token,",
          "message": "Parameter '_token' of Token.withdrawToken (patch_0.sol#29) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _amount,",
          "message": "Parameter '_amount' of Token.withdrawToken (patch_0.sol#30) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _to",
          "message": "Parameter '_to' of Token.withdrawToken (patch_0.sol#31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": 47,
          "vulnerability_code": "    function TokenBank() public {\n        minDeposit = 1 ether;",
          "message": "Function 'TokenBank.TokenBank' (patch_0.sol#45-47) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _to,",
          "message": "Parameter '_to' of TokenBank.withdrawTokenToHolder (patch_0.sol#59) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _token,",
          "message": "Parameter '_token' of TokenBank.withdrawTokenToHolder (patch_0.sol#60) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _amount",
          "message": "Parameter '_amount' of TokenBank.withdrawTokenToHolder (patch_0.sol#61) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _addr,",
          "message": "Parameter '_addr' of TokenBank.withdrawToHolder (patch_0.sol#74) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _wei",
          "message": "Parameter '_wei' of TokenBank.withdrawToHolder (patch_0.sol#75) is not in mixedCase\n"
        }
      ]
    }
  }
}