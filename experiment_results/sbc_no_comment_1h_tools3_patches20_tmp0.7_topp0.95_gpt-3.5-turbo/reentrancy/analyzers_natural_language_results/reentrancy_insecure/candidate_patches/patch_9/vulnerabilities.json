{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender.call.value(amountToWithdraw)());",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_3"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 14,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!locked);\n        uint amountToWithdraw = userBalances[msg.sender];\n        locked = true;\n        userBalances[msg.sender] = 0;\n        locked = false;\n        require(msg.sender.call.value(amountToWithdraw)());",
          "message": "Reentrancy_secure.withdrawBalance (patch_9.sol#7-14) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 14,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!locked);\n        uint amountToWithdraw = userBalances[msg.sender];\n        locked = true;\n        userBalances[msg.sender] = 0;\n        locked = false;\n        require(msg.sender.call.value(amountToWithdraw)());",
          "message": "Low level call in Reentrancy_secure.withdrawBalance (patch_9.sol#7-14):\n\t-require(bool)(msg.sender.call.value(amountToWithdraw)()) patch_9.sol#13\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 15,
          "vulnerability_code": "contract Reentrancy_secure {\n    mapping(address => uint) private userBalances;\n    bool private locked;\n\n    function withdrawBalance() public {\n        require(!locked);\n        uint amountToWithdraw = userBalances[msg.sender];\n        locked = true;\n        userBalances[msg.sender] = 0;\n        locked = false;\n        require(msg.sender.call.value(amountToWithdraw)());\n    }",
          "message": "Contract 'Reentrancy_secure' (patch_9.sol#3-15) is not in CapWords\n"
        }
      ]
    }
  }
}