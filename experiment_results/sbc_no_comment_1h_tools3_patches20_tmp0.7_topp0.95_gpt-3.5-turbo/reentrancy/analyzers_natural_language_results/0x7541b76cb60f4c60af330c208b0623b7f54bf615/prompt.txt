/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.25;

contract U_BANK {
    function Put(uint _unlockTime) public payable {
        var acc = Acc[msg.sender];
        acc.balance += msg.value;
        acc.unlockTime = _unlockTime > now ? _unlockTime : now;
        LogFile.AddMessage(msg.sender, msg.value, "Put");
    }

    function Collect(uint _am) public payable {
        var acc = Acc[msg.sender];
        if (
            acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime
        ) {
            if (msg.sender.call.value(_am)()) {
                acc.balance -= _am;
                LogFile.AddMessage(msg.sender, _am, "Collect");
            }
        }
    }

    function() public payable {
        Put(0);
    }

    struct Holder {
        uint unlockTime;
        uint balance;
    }

    mapping(address => Holder) public Acc;

    Log LogFile;

    uint public MinSum = 2 ether;

    function U_BANK(address log) public {
        LogFile = Log(log);
    }
}

contract Log {
    struct Message {
        address Sender;
        string Data;
        uint Val;
        uint Time;
    }

    Message[] public History;

    Message LastMsg;

    function AddMessage(address _adr, uint _val, string _data) public {
        LastMsg.Sender = _adr;
        LastMsg.Time = now;
        LastMsg.Val = _val;
        LastMsg.Data = _data;
        History.push(LastMsg);
    }
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.

/// 1. Slither Analysis Results
/// 1.1. Vulnerability: reentrancy at Line 11-21:
    function Collect(uint _am) public payable {
        var acc = Acc[msg.sender];
        if (
            acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime
        ) {
            if (msg.sender.call.value(_am)()) {
                acc.balance -= _am;
                LogFile.AddMessage(msg.sender, _am, "Collect");
            }
        }
///  Message:Reentrancy in U_BANK.Collect (0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol#11-21):
///   	External calls:
///   	- msg.sender.call.value(_am)() (0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol#16-19)
///   	State variables written after the call(s):
///   	- Acc (0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol#17)


/// 2. Mythril-0.23.15 Analysis Results
/// 2.1. Vulnerability: reentrancy at Line 8:
        LogFile.AddMessage(msg.sender, msg.value, "Put");
///  Message:A call to a user-supplied address is executed.
///   An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
///   Classification: SWC-107
/// 2.2. Vulnerability: reentrancy at Line 16:
            if (msg.sender.call.value(_am)()) {
///  Message:A call to a user-supplied address is executed.
///   An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
///   Classification: SWC-107


/// 3. Oyente Analysis Results
/// 3.1. Vulnerability: reentrancy at Line 16:
            if (msg.sender.call.value(_am)()) {



/// Repaired Solidity Smart Contract