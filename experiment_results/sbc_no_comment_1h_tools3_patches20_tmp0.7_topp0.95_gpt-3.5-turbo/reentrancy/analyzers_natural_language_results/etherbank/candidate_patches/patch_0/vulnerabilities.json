{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (amountToWithdraw > 0 && msg.sender.call.value(amountToWithdraw)()) {",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "        userBalances[msg.sender] += msg.value;",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_5"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": 24,
          "vulnerability_code": "    function withdrawBalance() public {\n        uint amountToWithdraw = userBalances[msg.sender];\n        userBalances[msg.sender] = 0;\n        if (amountToWithdraw > 0 && msg.sender.call.value(amountToWithdraw)()) {\n            // Successful withdraw\n        } else {\n            // Revert the state if unsuccessful\n            userBalances[msg.sender] = amountToWithdraw;\n            revert();\n        }",
          "message": "Reentrancy in EtherBank.withdrawBalance (patch_0.sol#14-24):\n\tExternal calls:\n\t- amountToWithdraw > 0 && msg.sender.call.value(amountToWithdraw)() (patch_0.sol#17-23)\n\tState variables written after the call(s):\n\t- userBalances (patch_0.sol#21)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": 8,
          "vulnerability_code": "    function getBalance(address user) public view returns (uint) {\n        return userBalances[user];",
          "message": "EtherBank.getBalance (patch_0.sol#6-8) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": 12,
          "vulnerability_code": "    function addToBalance() public payable {\n        userBalances[msg.sender] += msg.value;",
          "message": "EtherBank.addToBalance (patch_0.sol#10-12) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": 24,
          "vulnerability_code": "    function withdrawBalance() public {\n        uint amountToWithdraw = userBalances[msg.sender];\n        userBalances[msg.sender] = 0;\n        if (amountToWithdraw > 0 && msg.sender.call.value(amountToWithdraw)()) {\n            // Successful withdraw\n        } else {\n            // Revert the state if unsuccessful\n            userBalances[msg.sender] = amountToWithdraw;\n            revert();\n        }",
          "message": "EtherBank.withdrawBalance (patch_0.sol#14-24) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": 24,
          "vulnerability_code": "    function withdrawBalance() public {\n        uint amountToWithdraw = userBalances[msg.sender];\n        userBalances[msg.sender] = 0;\n        if (amountToWithdraw > 0 && msg.sender.call.value(amountToWithdraw)()) {\n            // Successful withdraw\n        } else {\n            // Revert the state if unsuccessful\n            userBalances[msg.sender] = amountToWithdraw;\n            revert();\n        }",
          "message": "Low level call in EtherBank.withdrawBalance (patch_0.sol#14-24):\n\t-amountToWithdraw > 0 && msg.sender.call.value(amountToWithdraw)() patch_0.sol#17-23\n"
        }
      ]
    }
  }
}