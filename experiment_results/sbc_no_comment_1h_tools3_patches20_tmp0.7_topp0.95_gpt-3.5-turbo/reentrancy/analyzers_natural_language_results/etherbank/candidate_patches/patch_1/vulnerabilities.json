{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (!(msg.sender.call.value(amountToWithdraw)())) {",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "            isLocked[msg.sender] = false; // unlock the user if the external call fails",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "            isLocked[msg.sender] = false; // unlock the user if the external call fails",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "        isLocked[msg.sender] = false; // unlock the user after the external call succeeds",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "        isLocked[msg.sender] = false; // unlock the user after the external call succeeds",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "        userBalances[msg.sender] += msg.value;",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_6"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 26,
          "vulnerability_code": "    function withdrawBalance() {\n        require(!isLocked[msg.sender]); // check if the user is locked\n        uint amountToWithdraw = userBalances[msg.sender];\n        userBalances[msg.sender] = 0;\n        isLocked[msg.sender] = true; // lock the user before making the external call\n        if (!(msg.sender.call.value(amountToWithdraw)())) {\n            isLocked[msg.sender] = false; // unlock the user if the external call fails\n            userBalances[msg.sender] = amountToWithdraw; // restore the user's balance\n            revert();\n        }\n        isLocked[msg.sender] = false; // unlock the user after the external call succeeds",
          "message": "Reentrancy in EtherBank.withdrawBalance (patch_1.sol#15-26):\n\tExternal calls:\n\t- ! (msg.sender.call.value(amountToWithdraw)()) (patch_1.sol#20-24)\n\tState variables written after the call(s):\n\t- isLocked (patch_1.sol#25)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 9,
          "vulnerability_code": "    function getBalance(address user) constant returns (uint) {\n        return userBalances[user];",
          "message": "EtherBank.getBalance (patch_1.sol#7-9) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 13,
          "vulnerability_code": "    function addToBalance() payable {\n        userBalances[msg.sender] += msg.value;",
          "message": "EtherBank.addToBalance (patch_1.sol#11-13) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 26,
          "vulnerability_code": "    function withdrawBalance() {\n        require(!isLocked[msg.sender]); // check if the user is locked\n        uint amountToWithdraw = userBalances[msg.sender];\n        userBalances[msg.sender] = 0;\n        isLocked[msg.sender] = true; // lock the user before making the external call\n        if (!(msg.sender.call.value(amountToWithdraw)())) {\n            isLocked[msg.sender] = false; // unlock the user if the external call fails\n            userBalances[msg.sender] = amountToWithdraw; // restore the user's balance\n            revert();\n        }\n        isLocked[msg.sender] = false; // unlock the user after the external call succeeds",
          "message": "EtherBank.withdrawBalance (patch_1.sol#15-26) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;",
          "message": "Detected issues with version pragma in patch_1.sol:\n\t- pragma solidity^0.4.0 (patch_1.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 26,
          "vulnerability_code": "    function withdrawBalance() {\n        require(!isLocked[msg.sender]); // check if the user is locked\n        uint amountToWithdraw = userBalances[msg.sender];\n        userBalances[msg.sender] = 0;\n        isLocked[msg.sender] = true; // lock the user before making the external call\n        if (!(msg.sender.call.value(amountToWithdraw)())) {\n            isLocked[msg.sender] = false; // unlock the user if the external call fails\n            userBalances[msg.sender] = amountToWithdraw; // restore the user's balance\n            revert();\n        }\n        isLocked[msg.sender] = false; // unlock the user after the external call succeeds",
          "message": "Low level call in EtherBank.withdrawBalance (patch_1.sol#15-26):\n\t-! (msg.sender.call.value(amountToWithdraw)()) patch_1.sol#20-24\n"
        }
      ]
    }
  }
}