{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_7"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 29,
          "vulnerability_code": "    function withdrawBalance() {\n        uint amountToWithdraw = userBalances[msg.sender];\n\n        require(amountToWithdraw > 0);\n        require(!locked[msg.sender]);\n\n        locked[msg.sender] = true;\n\n        if (!(msg.sender.call.value(amountToWithdraw)())) {\n            throw;\n        }\n\n        userBalances[msg.sender] = 0;\n        locked[msg.sender] = false;",
          "message": "Reentrancy in EtherBank.withdrawBalance (patch_13.sol#15-29):\n\tExternal calls:\n\t- ! (msg.sender.call.value(amountToWithdraw)()) (patch_13.sol#23-25)\n\tState variables written after the call(s):\n\t- locked (patch_13.sol#28)\n\t- userBalances (patch_13.sol#27)\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "            throw;",
          "message": "Deprecated standard detected @ patch_13.sol#24:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 9,
          "vulnerability_code": "    function getBalance(address user) constant returns (uint) {\n        return userBalances[user];",
          "message": "EtherBank.getBalance (patch_13.sol#7-9) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 13,
          "vulnerability_code": "    function addToBalance() {\n        userBalances[msg.sender] += msg.value;",
          "message": "EtherBank.addToBalance (patch_13.sol#11-13) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 29,
          "vulnerability_code": "    function withdrawBalance() {\n        uint amountToWithdraw = userBalances[msg.sender];\n\n        require(amountToWithdraw > 0);\n        require(!locked[msg.sender]);\n\n        locked[msg.sender] = true;\n\n        if (!(msg.sender.call.value(amountToWithdraw)())) {\n            throw;\n        }\n\n        userBalances[msg.sender] = 0;\n        locked[msg.sender] = false;",
          "message": "EtherBank.withdrawBalance (patch_13.sol#15-29) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;",
          "message": "Detected issues with version pragma in patch_13.sol:\n\t- pragma solidity^0.4.0 (patch_13.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 29,
          "vulnerability_code": "    function withdrawBalance() {\n        uint amountToWithdraw = userBalances[msg.sender];\n\n        require(amountToWithdraw > 0);\n        require(!locked[msg.sender]);\n\n        locked[msg.sender] = true;\n\n        if (!(msg.sender.call.value(amountToWithdraw)())) {\n            throw;\n        }\n\n        userBalances[msg.sender] = 0;\n        locked[msg.sender] = false;",
          "message": "Low level call in EtherBank.withdrawBalance (patch_13.sol#15-29):\n\t-! (msg.sender.call.value(amountToWithdraw)()) patch_13.sol#23-25\n"
        }
      ]
    }
  }
}