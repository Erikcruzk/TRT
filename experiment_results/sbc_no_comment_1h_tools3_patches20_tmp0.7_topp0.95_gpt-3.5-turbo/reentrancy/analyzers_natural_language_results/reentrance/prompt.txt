/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.18;

contract Reentrance {
    mapping(address => uint) public balances;

    function donate(address _to) public payable {
        balances[_to] += msg.value;
    }

    function balanceOf(address _who) public view returns (uint balance) {
        return balances[_who];
    }

    function withdraw(uint _amount) public {
        if (balances[msg.sender] >= _amount) {
            if (msg.sender.call.value(_amount)()) {
                _amount;
            }
            balances[msg.sender] -= _amount;
        }
    }

    function() public payable {}
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.

/// 1. Mythril-0.23.15 Analysis Results
/// 1.1. Vulnerability: reentrancy at Line 16:
            if (msg.sender.call.value(_amount)()) {
///  Message:A call to a user-supplied address is executed.
///   An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
///   Classification: SWC-107
/// 1.2. Vulnerability: reentrancy at Line 19:
            balances[msg.sender] -= _amount;
///  Message:Read of persistent state following external call
///   The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
///   Classification: SWC-107
/// 1.3. Vulnerability: reentrancy at Line 19:
            balances[msg.sender] -= _amount;
///  Message:Write to persistent state following external call
///   The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
///   Classification: SWC-107


/// 2. Slither Analysis Results
/// 2.1. Vulnerability: reentrancy at Line 14-21:
    function withdraw(uint _amount) public {
        if (balances[msg.sender] >= _amount) {
            if (msg.sender.call.value(_amount)()) {
                _amount;
            }
            balances[msg.sender] -= _amount;
        }
///  Message:Reentrancy in Reentrance.withdraw (reentrance.sol#14-21):
///   	External calls:
///   	- msg.sender.call.value(_amount)() (reentrance.sol#16-18)
///   	State variables written after the call(s):
///   	- balances (reentrance.sol#19)


/// 3. Oyente Analysis Results
/// 3.1. Vulnerability: reentrancy at Line 16:
            if (msg.sender.call.value(_amount)()) {



/// Repaired Solidity Smart Contract