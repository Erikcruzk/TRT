/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.21;

contract TokenSaleChallenge {
    mapping(address => uint256) public balanceOf;
    uint256 constant PRICE_PER_TOKEN = 1 ether;

    function TokenSaleChallenge(address _player) public payable {
        require(msg.value == 1 ether);
    }

    function isComplete() public view returns (bool) {
        return address(this).balance < 1 ether;
    }

    function buy(uint256 numTokens) public payable {
        require(msg.value == numTokens * PRICE_PER_TOKEN);

        balanceOf[msg.sender] += numTokens;
    }

    function sell(uint256 numTokens) public {
        require(balanceOf[msg.sender] >= numTokens);

        balanceOf[msg.sender] -= numTokens;

        msg.sender.transfer(numTokens * PRICE_PER_TOKEN);
    }
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.

/// 1. Oyente Analysis Results
/// 1.1. Vulnerability: arithmetic at Line 18:
        balanceOf[msg.sender] += numTokens;


/// 2. Mythril-0.23.15 Analysis Results
/// 2.1. Vulnerability: arithmetic at Line 16:
        require(msg.value == numTokens * PRICE_PER_TOKEN);
///  Message:The arithmetic operator can overflow.
///   It is possible to cause an integer overflow or underflow in the arithmetic operation. 
///   Classification: SWC-101
/// 2.2. Vulnerability: arithmetic at Line 18:
        balanceOf[msg.sender] += numTokens;
///  Message:The arithmetic operator can overflow.
///   It is possible to cause an integer overflow or underflow in the arithmetic operation. 
///   Classification: SWC-101



/// Repaired Solidity Smart Contract