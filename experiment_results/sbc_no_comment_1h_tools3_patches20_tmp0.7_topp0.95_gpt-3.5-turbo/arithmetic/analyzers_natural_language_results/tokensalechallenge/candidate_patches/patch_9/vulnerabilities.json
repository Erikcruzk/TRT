{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.value == numTokens * PRICE_PER_TOKEN);",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Unprotected Ether Withdrawal (SWC 105)",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "        msg.sender.transfer(numTokens * PRICE_PER_TOKEN);",
          "message": "Any sender can withdraw Ether from the contract account.\nArbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.\nClassification: SWC-105"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balanceOf[msg.sender] += numTokens;",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_6"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": 16,
          "vulnerability_code": "    function isComplete() public view returns (bool) {\n        return address(this).balance >= totalTokens * PRICE_PER_TOKEN;",
          "message": "TokenSaleChallenge.isComplete (patch_9.sol#14-16) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": 22,
          "vulnerability_code": "    function buy(uint256 numTokens) public payable {\n        require(msg.value == numTokens * PRICE_PER_TOKEN);\n        balanceOf[msg.sender] += numTokens;\n        totalTokens += numTokens;",
          "message": "TokenSaleChallenge.buy (patch_9.sol#18-22) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 29,
          "vulnerability_code": "    function sell(uint256 numTokens) public {\n        require(balanceOf[msg.sender] >= numTokens);\n        balanceOf[msg.sender] -= numTokens;\n        totalTokens -= numTokens;\n        msg.sender.transfer(numTokens * PRICE_PER_TOKEN);",
          "message": "TokenSaleChallenge.sell (patch_9.sol#24-29) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;",
          "message": "Detected issues with version pragma in patch_9.sol:\n\t- pragma solidity^0.4.21 (patch_9.sol#1): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": 12,
          "vulnerability_code": "    function TokenSaleChallenge(address _player) public payable {\n        require(msg.value == 1 ether);\n        totalTokens = msg.value / PRICE_PER_TOKEN;\n        balanceOf[_player] = totalTokens;",
          "message": "Function 'TokenSaleChallenge.TokenSaleChallenge' (patch_9.sol#8-12) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function TokenSaleChallenge(address _player) public payable {",
          "message": "Parameter '_player' of TokenSaleChallenge.TokenSaleChallenge (patch_9.sol#8) is not in mixedCase\n"
        }
      ]
    }
  }
}