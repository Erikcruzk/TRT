{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_5"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 10,
          "vulnerability_code": "    function deposit() public payable {\n        balances[msg.sender] += msg.value;\n        lockTime[msg.sender] = SafeMath.add(now, 1 weeks);",
          "message": "TimeLock.deposit (patch_7.sol#7-10) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": 14,
          "vulnerability_code": "    function increaseLockTime(uint _secondsToIncrease) public {\n        lockTime[msg.sender] = SafeMath.add(lockTime[msg.sender], _secondsToIncrease);",
          "message": "TimeLock.increaseLockTime (patch_7.sol#12-14) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 22,
          "vulnerability_code": "    function withdraw() public {\n        require(balances[msg.sender] > 0);\n        require(now > lockTime[msg.sender]);\n        uint transferValue = balances[msg.sender];\n        balances[msg.sender] = 0;\n        msg.sender.transfer(transferValue);",
          "message": "TimeLock.withdraw (patch_7.sol#16-22) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;",
          "message": "Detected issues with version pragma in patch_7.sol:\n\t- pragma solidity^0.4.0 (patch_7.sol#1): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function increaseLockTime(uint _secondsToIncrease) public {",
          "message": "Parameter '_secondsToIncrease' of TimeLock.increaseLockTime (patch_7.sol#12) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Timestamp Dependency",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(now > lockTime[msg.sender]);",
          "message": null
        }
      ]
    },
    "mythril-0.23.15": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Dependence on predictable environment variable (SWC 116)",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(now > lockTime[msg.sender]);",
          "message": "A control flow decision is made based on The block.timestamp environment variable.\nThe block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-116"
        },
        {
          "name": "Dependence on predictable environment variable (SWC 116)",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a);",
          "message": "A control flow decision is made based on The block.timestamp environment variable.\nThe block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-116"
        }
      ]
    }
  }
}