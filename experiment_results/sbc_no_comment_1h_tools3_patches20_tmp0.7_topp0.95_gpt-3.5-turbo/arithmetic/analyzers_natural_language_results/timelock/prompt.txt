/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.0;

contract TimeLock {
    mapping(address => uint) public balances;
    mapping(address => uint) public lockTime;

    function deposit() public payable {
        balances[msg.sender] += msg.value;
        lockTime[msg.sender] = now + 1 weeks;
    }

    function increaseLockTime(uint _secondsToIncrease) public {
        lockTime[msg.sender] += _secondsToIncrease;
    }

    function withdraw() public {
        require(balances[msg.sender] > 0);
        require(now > lockTime[msg.sender]);
        uint transferValue = balances[msg.sender];
        balances[msg.sender] = 0;
        msg.sender.transfer(transferValue);
    }
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.

/// 1. Oyente Analysis Results
/// 1.1. Vulnerability: arithmetic at Line 13:
        lockTime[msg.sender] += _secondsToIncrease;


/// 2. Mythril-0.23.15 Analysis Results
/// 2.1. Vulnerability: arithmetic at Line 13:
        lockTime[msg.sender] += _secondsToIncrease;
///  Message:The arithmetic operator can overflow.
///   It is possible to cause an integer overflow or underflow in the arithmetic operation. 
///   Classification: SWC-101
/// 2.2. Vulnerability: arithmetic at Line 9:
        lockTime[msg.sender] = now + 1 weeks;
///  Message:The arithmetic operator can overflow.
///   It is possible to cause an integer overflow or underflow in the arithmetic operation. 
///   Classification: SWC-101



/// Repaired Solidity Smart Contract