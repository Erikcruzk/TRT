{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_7"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": 9,
          "vulnerability_code": "    function overflowaddtostate(uint256 input) public {\n        require(input + count >= count);\n        count += input;",
          "message": "IntegerOverflowSingleTransaction.overflowaddtostate (patch_1.sol#6-9) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 14,
          "vulnerability_code": "    function overflowmultostate(uint256 input) public {\n        require(input == 0 || count * input / input == count);\n        count *= input;",
          "message": "IntegerOverflowSingleTransaction.overflowmultostate (patch_1.sol#11-14) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 19,
          "vulnerability_code": "    function underflowtostate(uint256 input) public {\n        require(input <= count);\n        count -= input;",
          "message": "IntegerOverflowSingleTransaction.underflowtostate (patch_1.sol#16-19) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 24,
          "vulnerability_code": "    function overflowlocalonly(uint256 input) public {\n        require(input + count >= count);\n        uint res = count + input;",
          "message": "IntegerOverflowSingleTransaction.overflowlocalonly (patch_1.sol#21-24) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": 29,
          "vulnerability_code": "    function overflowmulocalonly(uint256 input) public {\n        require(input == 0 || count * input / input == count);\n        uint res = count * input;",
          "message": "IntegerOverflowSingleTransaction.overflowmulocalonly (patch_1.sol#26-29) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": 34,
          "vulnerability_code": "    function underflowlocalonly(uint256 input) public {\n        require(input <= count);\n        uint res = count - input;",
          "message": "IntegerOverflowSingleTransaction.underflowlocalonly (patch_1.sol#31-34) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;",
          "message": "Detected issues with version pragma in patch_1.sol:\n\t- pragma solidity^0.4.23 (patch_1.sol#1): it allows old versions\n"
        }
      ]
    },
    "mythril-0.23.15": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}