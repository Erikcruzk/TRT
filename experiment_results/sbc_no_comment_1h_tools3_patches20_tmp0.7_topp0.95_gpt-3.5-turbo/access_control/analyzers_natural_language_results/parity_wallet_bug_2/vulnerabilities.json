{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function initMultiowned(",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 213,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function initWallet(",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return address(m_owners[ownerIndex + 1]);",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getOwner(uint ownerIndex) external constant returns (address) {",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_52"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 262,
          "vulnerability_to_line": 287,
          "vulnerability_code": "    function confirm(bytes32 _h) onlymanyowners(_h) returns (bool o_success) {\n        if (\n            m_txs[_h].to != 0 ||\n            m_txs[_h].value != 0 ||\n            m_txs[_h].data.length != 0\n        ) {\n            address created;\n            if (m_txs[_h].to == 0) {\n                created = create(m_txs[_h].value, m_txs[_h].data);\n            } else {\n                if (!m_txs[_h].to.call.value(m_txs[_h].value)(m_txs[_h].data))\n                    throw;\n            }\n\n            MultiTransact(\n                msg.sender,\n                _h,\n                m_txs[_h].value,\n                m_txs[_h].to,\n                m_txs[_h].data,\n                created\n            );\n            delete m_txs[_h];\n            return true;\n        }",
          "message": "Reentrancy in WalletLibrary.confirm (parity_wallet_bug_2.sol#262-287):\n\tExternal calls:\n\t- ! m_txs[_h].to.call.value(m_txs[_h].value)(m_txs[_h].data) (parity_wallet_bug_2.sol#272-273)\n\tState variables written after the call(s):\n\t- m_txs (parity_wallet_bug_2.sol#284)\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 268,
          "vulnerability_to_line": null,
          "vulnerability_code": "            address created;",
          "message": "created in WalletLibrary.confirm (parity_wallet_bug_2.sol#268) is a local variable never initialiazed\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "            address created;",
          "message": "created in WalletLibrary.execute (parity_wallet_bug_2.sol#232) is a local variable never initialiazed\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 223,
          "vulnerability_to_line": null,
          "vulnerability_code": "        suicide(_to);",
          "message": "Deprecated standard detected @ parity_wallet_bug_2.sol#223:\n\t- Usage of \"suicide()\" should be replaced with \"selfdestruct()\"\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 236,
          "vulnerability_to_line": null,
          "vulnerability_code": "                if (!_to.call.value(_value)(_data)) throw;",
          "message": "Deprecated standard detected @ parity_wallet_bug_2.sol#236:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 240,
          "vulnerability_to_line": null,
          "vulnerability_code": "            o_hash = sha3(msg.data, block.number);",
          "message": "Deprecated standard detected @ parity_wallet_bug_2.sol#240:\n\t- Usage of \"sha3()\" should be replaced with \"keccak256()\"\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 273,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    throw;",
          "message": "Deprecated standard detected @ parity_wallet_bug_2.sol#273:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 209,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (m_numOwners > 0) throw;",
          "message": "Deprecated standard detected @ parity_wallet_bug_2.sol#209:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isOwner(address _addr) constant returns (bool);",
          "message": "WalletAbi.isOwner (parity_wallet_bug_2.sol#52) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function confirm(bytes32 _h) returns (bool o_success);",
          "message": "WalletAbi.confirm (parity_wallet_bug_2.sol#67) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": 93,
          "vulnerability_code": "    function() payable {\n        if (msg.value > 0) Deposit(msg.sender, msg.value);",
          "message": "WalletLibrary.fallback (parity_wallet_bug_2.sol#91-93) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 213,
          "vulnerability_to_line": 220,
          "vulnerability_code": "    function initWallet(\n        address[] _owners,\n        uint _required,\n        uint _daylimit\n    ) only_uninitialized {\n        initDaylimit(_daylimit);\n        initMultiowned(_owners, _required);",
          "message": "WalletLibrary.initWallet (parity_wallet_bug_2.sol#213-220) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.9;",
          "message": "Detected issues with version pragma in parity_wallet_bug_2.sol:\n\t- pragma solidity^0.4.9 (parity_wallet_bug_2.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 226,
          "vulnerability_to_line": 255,
          "vulnerability_code": "    function execute(\n        address _to,\n        uint _value,\n        bytes _data\n    ) external onlyowner returns (bytes32 o_hash) {\n        if ((_data.length == 0 && underLimit(_value)) || m_required == 1) {\n            address created;\n            if (_to == 0) {\n                created = create(_value, _data);\n            } else {\n                if (!_to.call.value(_value)(_data)) throw;\n            }\n            SingleTransact(msg.sender, _value, _to, _data, created);\n        } else {\n            o_hash = sha3(msg.data, block.number);\n\n            if (\n                m_txs[o_hash].to == 0 &&\n                m_txs[o_hash].value == 0 &&\n                m_txs[o_hash].data.length == 0\n            ) {\n                m_txs[o_hash].to = _to;\n                m_txs[o_hash].value = _value;\n                m_txs[o_hash].data = _data;\n            }\n            if (!confirm(o_hash)) {\n                ConfirmationNeeded(o_hash, msg.sender, _value, _to, _data);\n            }\n        }",
          "message": "Low level call in WalletLibrary.execute (parity_wallet_bug_2.sol#226-255):\n\t-! _to.call.value(_value)(_data) parity_wallet_bug_2.sol#236\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 262,
          "vulnerability_to_line": 287,
          "vulnerability_code": "    function confirm(bytes32 _h) onlymanyowners(_h) returns (bool o_success) {\n        if (\n            m_txs[_h].to != 0 ||\n            m_txs[_h].value != 0 ||\n            m_txs[_h].data.length != 0\n        ) {\n            address created;\n            if (m_txs[_h].to == 0) {\n                created = create(m_txs[_h].value, m_txs[_h].data);\n            } else {\n                if (!m_txs[_h].to.call.value(m_txs[_h].value)(m_txs[_h].data))\n                    throw;\n            }\n\n            MultiTransact(\n                msg.sender,\n                _h,\n                m_txs[_h].value,\n                m_txs[_h].to,\n                m_txs[_h].data,\n                created\n            );\n            delete m_txs[_h];\n            return true;\n        }",
          "message": "Low level call in WalletLibrary.confirm (parity_wallet_bug_2.sol#262-287):\n\t-! m_txs[_h].to.call.value(m_txs[_h].value)(m_txs[_h].data) parity_wallet_bug_2.sol#272-273\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] _owners,",
          "message": "Parameter '_owners' of WalletLibrary.initMultiowned (parity_wallet_bug_2.sol#96) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _required",
          "message": "Parameter '_required' of WalletLibrary.initMultiowned (parity_wallet_bug_2.sol#97) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 109,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function revoke(bytes32 _operation) external {",
          "message": "Parameter '_operation' of WalletLibrary.revoke (parity_wallet_bug_2.sol#109) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _from,",
          "message": "Parameter '_from' of WalletLibrary.changeOwner (parity_wallet_bug_2.sol#123) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 124,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _to",
          "message": "Parameter '_to' of WalletLibrary.changeOwner (parity_wallet_bug_2.sol#124) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 137,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addOwner(address _owner) external onlymanyowners(sha3(msg.data)) {",
          "message": "Parameter '_owner' of WalletLibrary.addOwner (parity_wallet_bug_2.sol#137) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _owner",
          "message": "Parameter '_owner' of WalletLibrary.removeOwner (parity_wallet_bug_2.sol#150) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 164,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _newRequired",
          "message": "Parameter '_newRequired' of WalletLibrary.changeRequirement (parity_wallet_bug_2.sol#164) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 176,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isOwner(address _addr) constant returns (bool) {",
          "message": "Parameter '_addr' of WalletLibrary.isOwner (parity_wallet_bug_2.sol#176) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 181,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32 _operation,",
          "message": "Parameter '_operation' of WalletLibrary.hasConfirmed (parity_wallet_bug_2.sol#181) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 182,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _owner",
          "message": "Parameter '_owner' of WalletLibrary.hasConfirmed (parity_wallet_bug_2.sol#182) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 193,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function initDaylimit(uint _limit) only_uninitialized {",
          "message": "Parameter '_limit' of WalletLibrary.initDaylimit (parity_wallet_bug_2.sol#193) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 199,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _newLimit",
          "message": "Parameter '_newLimit' of WalletLibrary.setDailyLimit (parity_wallet_bug_2.sol#199) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 214,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] _owners,",
          "message": "Parameter '_owners' of WalletLibrary.initWallet (parity_wallet_bug_2.sol#214) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _required,",
          "message": "Parameter '_required' of WalletLibrary.initWallet (parity_wallet_bug_2.sol#215) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _daylimit",
          "message": "Parameter '_daylimit' of WalletLibrary.initWallet (parity_wallet_bug_2.sol#216) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 222,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function kill(address _to) external onlymanyowners(sha3(msg.data)) {",
          "message": "Parameter '_to' of WalletLibrary.kill (parity_wallet_bug_2.sol#222) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 227,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _to,",
          "message": "Parameter '_to' of WalletLibrary.execute (parity_wallet_bug_2.sol#227) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _value,",
          "message": "Parameter '_value' of WalletLibrary.execute (parity_wallet_bug_2.sol#228) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 229,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes _data",
          "message": "Parameter '_data' of WalletLibrary.execute (parity_wallet_bug_2.sol#229) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 262,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function confirm(bytes32 _h) onlymanyowners(_h) returns (bool o_success) {",
          "message": "Parameter '_h' of WalletLibrary.confirm (parity_wallet_bug_2.sol#262) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 289,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function confirmAndCheck(bytes32 _operation) internal returns (bool) {",
          "message": "Parameter '_operation' of WalletLibrary.confirmAndCheck (parity_wallet_bug_2.sol#289) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 337,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function underLimit(uint _value) internal onlyowner returns (bool) {",
          "message": "Parameter '_value' of WalletLibrary.underLimit (parity_wallet_bug_2.sol#337) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 369,
          "vulnerability_to_line": 370,
          "vulnerability_code": "    address constant _walletLibrary =",
          "message": "Constant 'WalletLibrary._walletLibrary' (parity_wallet_bug_2.sol#369-370) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 372,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public m_required;",
          "message": "Variable 'WalletLibrary.m_required' (parity_wallet_bug_2.sol#372) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 374,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public m_numOwners;",
          "message": "Variable 'WalletLibrary.m_numOwners' (parity_wallet_bug_2.sol#374) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 376,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public m_dailyLimit;",
          "message": "Variable 'WalletLibrary.m_dailyLimit' (parity_wallet_bug_2.sol#376) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 377,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public m_spentToday;",
          "message": "Variable 'WalletLibrary.m_spentToday' (parity_wallet_bug_2.sol#377) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 378,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public m_lastDay;",
          "message": "Variable 'WalletLibrary.m_lastDay' (parity_wallet_bug_2.sol#378) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 380,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint[256] m_owners;",
          "message": "Variable 'WalletLibrary.m_owners' (parity_wallet_bug_2.sol#380) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 382,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant c_maxOwners = 250;",
          "message": "Constant 'WalletLibrary.c_maxOwners' (parity_wallet_bug_2.sol#382) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 384,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(uint => uint) m_ownerIndex;",
          "message": "Variable 'WalletLibrary.m_ownerIndex' (parity_wallet_bug_2.sol#384) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 386,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes32 => PendingState) m_pending;",
          "message": "Variable 'WalletLibrary.m_pending' (parity_wallet_bug_2.sol#386) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 387,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32[] m_pendingIndex;",
          "message": "Variable 'WalletLibrary.m_pendingIndex' (parity_wallet_bug_2.sol#387) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 389,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes32 => Transaction) m_txs;",
          "message": "Variable 'WalletLibrary.m_txs' (parity_wallet_bug_2.sol#389) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 208,
          "vulnerability_to_line": 211,
          "vulnerability_code": "    modifier only_uninitialized() {\n        if (m_numOwners > 0) throw;\n        _;",
          "message": "Modifier 'WalletLibrary.only_uninitialized' (parity_wallet_bug_2.sol#208-211) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 369,
          "vulnerability_to_line": 370,
          "vulnerability_code": "    address constant _walletLibrary =",
          "message": "WalletLibrary._walletLibrary (parity_wallet_bug_2.sol#369-370) is never used in WalletLibrary\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 306,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (pending.ownersDone & ownerIndexBit == 0) {",
          "message": null
        }
      ]
    }
  }
}