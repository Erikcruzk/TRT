{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function nextPayoutWhenPyramidBalanceTotalsApproximately()",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _amt *= 1 ether;",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_23"
      ],
      "vulnerability_findings": [
        {
          "name": "calls-loop",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "            participants[payoutOrder].etherAddress.transfer(payoutToSend);",
          "message": "Rubixi.addPayout has external calls inside a loop:\n\t- participants[payoutOrder].etherAddress.transfer(payoutToSend) (patch_2.sol#58)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": 30,
          "vulnerability_code": "    function() public payable {\n        init();",
          "message": "Rubixi.fallback (patch_2.sol#28-30) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": 70,
          "vulnerability_code": "    function collectAllFees() public onlyowner {\n        require(collectedFees > 0);\n\n        creator.transfer(collectedFees);\n        collectedFees = 0;",
          "message": "Rubixi.collectAllFees (patch_2.sol#65-70) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": 79,
          "vulnerability_code": "    function collectFeesInEther(uint _amt) public onlyowner {\n        _amt *= 1 ether;\n        require(_amt <= collectedFees);\n        if (collectedFees == 0) return;\n\n        creator.transfer(_amt);\n        collectedFees -= _amt;",
          "message": "Rubixi.collectFeesInEther (patch_2.sol#72-79) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": 87,
          "vulnerability_code": "    function collectPercentOfFees(uint _pcent) public onlyowner {\n        require(collectedFees > 0 && _pcent <= 100);\n\n        uint feesToCollect = (collectedFees * _pcent) / 100;\n        creator.transfer(feesToCollect);\n        collectedFees -= feesToCollect;",
          "message": "Rubixi.collectPercentOfFees (patch_2.sol#81-87) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 89,
          "vulnerability_to_line": 91,
          "vulnerability_code": "    function changeOwner(address _owner) public onlyowner {\n        creator = _owner;",
          "message": "Rubixi.changeOwner (patch_2.sol#89-91) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": 97,
          "vulnerability_code": "    function changeMultiplier(uint _mult) public onlyowner {\n        require(_mult <= 300 && _mult >= 120);\n\n        pyramidMultiplier = _mult;",
          "message": "Rubixi.changeMultiplier (patch_2.sol#93-97) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": 103,
          "vulnerability_code": "    function changeFeePercentage(uint _fee) public onlyowner {\n        require(_fee <= 10);\n\n        feePercent = _fee;",
          "message": "Rubixi.changeFeePercentage (patch_2.sol#99-103) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": 112,
          "vulnerability_code": "    function currentMultiplier()\n        public\n        constant\n        returns (uint multiplier, string info)\n    {\n        multiplier = pyramidMultiplier;\n        info = \"This multiplier applies to you as soon as transaction is received, may be lowered to hasten payouts or increased if payouts are fast enough. Due to no float or decimals, multiplier is x100 for a fractional multiplier e.g. 250 is actually a 2.5x multiplier. Capped at 3x max and 1.2x min.\";",
          "message": "Rubixi.currentMultiplier (patch_2.sol#105-112) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": 117,
          "vulnerability_code": "    function currentFeePercentage() public constant returns (uint fee, string info) {\n        fee = feePercent;\n        info = \"Shown in % form. Fee is halved(50%) for amounts equal or greater than 50 ethers. (Fee may change, but is capped to a maximum of 10%)\";",
          "message": "Rubixi.currentFeePercentage (patch_2.sol#114-117) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 119,
          "vulnerability_to_line": 126,
          "vulnerability_code": "    function currentPyramidBalanceApproximately()\n        public\n        constant\n        returns (uint pyramidBalance, string info)\n    {\n        pyramidBalance = balance / 1 ether;\n        info = \"All balance values are measured in Ethers, note that due to no decimal placing, these values show up as integers only, within the contract itself you will get the exact decimal value you are supposed to\";",
          "message": "Rubixi.currentPyramidBalanceApproximately (patch_2.sol#119-126) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": 134,
          "vulnerability_code": "    function nextPayoutWhenPyramidBalanceTotalsApproximately()\n        public\n        constant\n        returns (uint balancePayout)\n    {\n        balancePayout = participants[payoutOrder].payout / 1 ether;",
          "message": "Rubixi.nextPayoutWhenPyramidBalanceTotalsApproximately (patch_2.sol#128-134) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": 142,
          "vulnerability_code": "    function feesSeperateFromBalanceApproximately()\n        public\n        constant\n        returns (uint fees)\n    {\n        fees = collectedFees / 1 ether;",
          "message": "Rubixi.feesSeperateFromBalanceApproximately (patch_2.sol#136-142) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 144,
          "vulnerability_to_line": 146,
          "vulnerability_code": "    function totalParticipants() public constant returns (uint count) {\n        count = participants.length;",
          "message": "Rubixi.totalParticipants (patch_2.sol#144-146) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 148,
          "vulnerability_to_line": 154,
          "vulnerability_code": "    function numberOfParticipantsWaitingForPayout()\n        public\n        constant\n        returns (uint count)\n    {\n        count = participants.length - payoutOrder;",
          "message": "Rubixi.numberOfParticipantsWaitingForPayout (patch_2.sol#148-154) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 156,
          "vulnerability_to_line": 163,
          "vulnerability_code": "    function participantDetails(\n        uint orderInPyramid\n    ) public constant returns (address Address, uint Payout) {\n        if (orderInPyramid < participants.length) {\n            Address = participants[orderInPyramid].etherAddress;\n            Payout = participants[orderInPyramid].payout / 1 ether;\n        }",
          "message": "Rubixi.participantDetails (patch_2.sol#156-163) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.15;",
          "message": "Detected issues with version pragma in patch_2.sol:\n\t- pragma solidity^0.4.15 (patch_2.sol#1): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addPayout(uint _fee) private {",
          "message": "Parameter '_fee' of Rubixi.addPayout (patch_2.sol#45) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function collectFeesInEther(uint _amt) public onlyowner {",
          "message": "Parameter '_amt' of Rubixi.collectFeesInEther (patch_2.sol#72) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function collectPercentOfFees(uint _pcent) public onlyowner {",
          "message": "Parameter '_pcent' of Rubixi.collectPercentOfFees (patch_2.sol#81) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 89,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function changeOwner(address _owner) public onlyowner {",
          "message": "Parameter '_owner' of Rubixi.changeOwner (patch_2.sol#89) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function changeMultiplier(uint _mult) public onlyowner {",
          "message": "Parameter '_mult' of Rubixi.changeMultiplier (patch_2.sol#93) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function changeFeePercentage(uint _fee) public onlyowner {",
          "message": "Parameter '_fee' of Rubixi.changeFeePercentage (patch_2.sol#99) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 133,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balancePayout = participants[payoutOrder].payout / 1 ether;",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 153,
          "vulnerability_to_line": null,
          "vulnerability_code": "        count = participants.length - payoutOrder;",
          "message": null
        }
      ]
    }
  }
}