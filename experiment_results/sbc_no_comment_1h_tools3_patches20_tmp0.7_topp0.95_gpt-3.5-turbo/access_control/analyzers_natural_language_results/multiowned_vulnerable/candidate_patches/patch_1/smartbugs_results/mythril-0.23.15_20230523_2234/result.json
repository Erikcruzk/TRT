{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "address": 12,
            "contract": "MultiOwnable",
            "exploit": {
                "initialState": {
                    "accounts": {
                        "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {
                            "balance": "0x2",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        },
                        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {
                            "balance": "0x0",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        }
                    }
                },
                "steps": [
                    {
                        "address": "",
                        "calldata": "",
                        "input": "0x608060405234801561000f575f80fd5b50335f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001805f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550610797806100d05f395ff3fe608060405234801561000f575f80fd5b506004361061004a575f3560e01c8063022914a71461004e578063173825d91461007e5780637065cb481461009a578063ebf0c717146100b6575b5f80fd5b61006860048036038101906100639190610505565b6100d4565b604051610075919061054a565b60405180910390f35b61009860048036038101906100939190610505565b6100f1565b005b6100b460048036038101906100af9190610505565b610336565b005b6100be610484565b6040516100cb9190610572565b60405180910390f35b6001602052805f5260405f205f915054906101000a900460ff1681565b60015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1661017a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101719061060b565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036101e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101df90610673565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610256576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024d906106db565b60405180910390fd5b60015f8273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff166102df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d690610743565b60405180910390fd5b5f60015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555050565b60015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff166103bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b69061060b565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361042d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042490610673565b60405180910390fd5b6001805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6104d4826104ab565b9050919050565b6104e4816104ca565b81146104ee575f80fd5b50565b5f813590506104ff816104db565b92915050565b5f6020828403121561051a576105196104a7565b5b5f610527848285016104f1565b91505092915050565b5f8115159050919050565b61054481610530565b82525050565b5f60208201905061055d5f83018461053b565b92915050565b61056c816104ca565b82525050565b5f6020820190506105855f830184610563565b92915050565b5f82825260208201905092915050565b7f4f6e6c79206f776e6572732063616e2063616c6c20746869732066756e6374695f8201527f6f6e000000000000000000000000000000000000000000000000000000000000602082015250565b5f6105f560228361058b565b91506106008261059b565b604082019050919050565b5f6020820190508181035f830152610622816105e9565b9050919050565b7f496e76616c6964206f776e6572206164647265737300000000000000000000005f82015250565b5f61065d60158361058b565b915061066882610629565b602082019050919050565b5f6020820190508181035f83015261068a81610651565b9050919050565b7f43616e6e6f742072656d6f76652073656c6600000000000000000000000000005f82015250565b5f6106c560128361058b565b91506106d082610691565b602082019050919050565b5f6020820190508181035f8301526106f2816106b9565b9050919050565b7f41646472657373206973206e6f7420616e206f776e65720000000000000000005f82015250565b5f61072d60178361058b565b9150610738826106f9565b602082019050919050565b5f6020820190508181035f83015261075a81610721565b905091905056fea26469706673582212202cb0765b695384f40b7e4bc6e623578cdb4e01573f84a5667015528a32c40ff364736f6c63430008140033",
                        "name": "unknown",
                        "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe",
                        "value": "0x1"
                    }
                ]
            },
            "filename": "experiment_results/sbc_no_comment_1h_tools3_patches20_tmp0.7_topp0.95_gpt-3.5-turbo/access_control/analyzers_natural_language_results/multiowned_vulnerable/candidate_patches/patch_1/patch_1.sol",
            "function": "constructor",
            "line": 7,
            "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110",
            "name": "Exception State (SWC 110)",
            "severity": "Medium"
        },
        {
            "address": 12,
            "contract": "TestContract",
            "exploit": {
                "initialState": {
                    "accounts": {
                        "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {
                            "balance": "0x2",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        },
                        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {
                            "balance": "0x0",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        }
                    }
                },
                "steps": [
                    {
                        "address": "",
                        "calldata": "",
                        "input": "0x608060405234801561000f575f80fd5b50335f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001805f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550610960806100d05f395ff3fe60806040526004361061004d575f3560e01c8063022914a714610058578063173825d9146100945780637065cb48146100bc578063853828b6146100e4578063ebf0c717146100fa57610054565b3661005457005b5f80fd5b348015610063575f80fd5b5061007e60048036038101906100799190610666565b610124565b60405161008b91906106ab565b60405180910390f35b34801561009f575f80fd5b506100ba60048036038101906100b59190610666565b610141565b005b3480156100c7575f80fd5b506100e260048036038101906100dd9190610666565b610386565b005b3480156100ef575f80fd5b506100f86104d4565b005b348015610105575f80fd5b5061010e6105e5565b60405161011b91906106d3565b60405180910390f35b6001602052805f5260405f205f915054906101000a900460ff1681565b60015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff166101ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101c19061076c565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610238576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022f906107d4565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036102a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029d9061083c565b60405180910390fd5b60015f8273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1661032f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610326906108a4565b60405180910390fd5b5f60015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555050565b60015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1661040f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104069061076c565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361047d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610474906107d4565b60405180910390fd5b6001805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555050565b60015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1661055d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105549061076c565b60405180910390fd5b5f471161059f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105969061090c565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc4790811502906040515f60405180830381858888f193505050501580156105e2573d5f803e3d5ffd5b50565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6106358261060c565b9050919050565b6106458161062b565b811461064f575f80fd5b50565b5f813590506106608161063c565b92915050565b5f6020828403121561067b5761067a610608565b5b5f61068884828501610652565b91505092915050565b5f8115159050919050565b6106a581610691565b82525050565b5f6020820190506106be5f83018461069c565b92915050565b6106cd8161062b565b82525050565b5f6020820190506106e65f8301846106c4565b92915050565b5f82825260208201905092915050565b7f4f6e6c79206f776e6572732063616e2063616c6c20746869732066756e6374695f8201527f6f6e000000000000000000000000000000000000000000000000000000000000602082015250565b5f6107566022836106ec565b9150610761826106fc565b604082019050919050565b5f6020820190508181035f8301526107838161074a565b9050919050565b7f496e76616c6964206f776e6572206164647265737300000000000000000000005f82015250565b5f6107be6015836106ec565b91506107c98261078a565b602082019050919050565b5f6020820190508181035f8301526107eb816107b2565b9050919050565b7f43616e6e6f742072656d6f76652073656c6600000000000000000000000000005f82015250565b5f6108266012836106ec565b9150610831826107f2565b602082019050919050565b5f6020820190508181035f8301526108538161081a565b9050919050565b7f41646472657373206973206e6f7420616e206f776e65720000000000000000005f82015250565b5f61088e6017836106ec565b91506108998261085a565b602082019050919050565b5f6020820190508181035f8301526108bb81610882565b9050919050565b7f496e73756666696369656e742062616c616e63650000000000000000000000005f82015250565b5f6108f66014836106ec565b9150610901826108c2565b602082019050919050565b5f6020820190508181035f830152610923816108ea565b905091905056fea2646970667358221220c04aea68e9046e39a9e79270b991fa54b5a5cd75efa40b4a0494aca3885b16af64736f6c63430008140033",
                        "name": "unknown",
                        "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe",
                        "value": "0x1"
                    }
                ]
            },
            "filename": "experiment_results/sbc_no_comment_1h_tools3_patches20_tmp0.7_topp0.95_gpt-3.5-turbo/access_control/analyzers_natural_language_results/multiowned_vulnerable/candidate_patches/patch_1/patch_1.sol",
            "function": "constructor",
            "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.\nClassification: SWC-110",
            "name": "Exception State (SWC 110)",
            "severity": "Low"
        }
    ],
    "infos": [],
    "parser": {
        "id": "mythril-0.23.15",
        "mode": "solidity",
        "version": "2023/01/20"
    }
}
