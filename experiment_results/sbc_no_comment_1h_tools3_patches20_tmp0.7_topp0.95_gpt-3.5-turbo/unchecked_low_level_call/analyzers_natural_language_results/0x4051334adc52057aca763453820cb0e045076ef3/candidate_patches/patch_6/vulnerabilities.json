{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(",
          "message": null
        }
      ]
    },
    "mythril-0.23.15": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(caddress.call(id, from, _tos[i], v), \"External call failed\");",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(caddress.call(id, from, _tos[i], v), \"External call failed\");",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_5"
      ],
      "vulnerability_findings": [
        {
          "name": "calls-loop",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(caddress.call(id, from, _tos[i], v), \"External call failed\");",
          "message": "airdrop.transfer has external calls inside a loop:\n\t- require(bool,string)(caddress.call(id,from,_tos[i],v),External call failed) (patch_6.sol#13)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": 16,
          "vulnerability_code": "    function transfer(\n        address from,\n        address caddress,\n        address[] _tos,\n        uint v\n    ) public returns (bool) {\n        require(_tos.length > 0);\n        bytes4 id = bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\n        for (uint i = 0; i < _tos.length; i++) {\n            require(caddress.call(id, from, _tos[i], v), \"External call failed\");\n        }\n        return true;",
          "message": "airdrop.transfer (patch_6.sol#4-16) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": 16,
          "vulnerability_code": "    function transfer(\n        address from,\n        address caddress,\n        address[] _tos,\n        uint v\n    ) public returns (bool) {\n        require(_tos.length > 0);\n        bytes4 id = bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\n        for (uint i = 0; i < _tos.length; i++) {\n            require(caddress.call(id, from, _tos[i], v), \"External call failed\");\n        }\n        return true;",
          "message": "Low level call in airdrop.transfer (patch_6.sol#4-16):\n\t-require(bool,string)(caddress.call(id,from,_tos[i],v),External call failed) patch_6.sol#13\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 17,
          "vulnerability_code": "contract airdrop {\n    function transfer(\n        address from,\n        address caddress,\n        address[] _tos,\n        uint v\n    ) public returns (bool) {\n        require(_tos.length > 0);\n        bytes4 id = bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\n        for (uint i = 0; i < _tos.length; i++) {\n            require(caddress.call(id, from, _tos[i], v), \"External call failed\");\n        }\n        return true;\n    }",
          "message": "Contract 'airdrop' (patch_6.sol#3-17) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] _tos,",
          "message": "Parameter '_tos' of airdrop.transfer (patch_6.sol#7) is not in mixedCase\n"
        }
      ]
    }
  }
}