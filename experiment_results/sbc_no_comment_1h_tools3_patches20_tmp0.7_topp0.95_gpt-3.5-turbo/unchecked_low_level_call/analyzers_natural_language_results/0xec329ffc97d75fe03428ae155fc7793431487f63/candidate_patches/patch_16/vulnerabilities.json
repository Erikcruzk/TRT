{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "Solc experienced a fatal error"
      ],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_22"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": 101,
          "vulnerability_code": "    function gas() internal view returns (uint _gas) {\n        assembly {\n            _gas := gas()\n        }",
          "message": "TokenSender.gas (patch_16.sol#97-101) is declared view but contains assembly code\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": 87,
          "vulnerability_code": "    function run() public onlyOwner {\n        require(transfers.length > 0, \"No transfers to execute\");\n        uint mNext = next;\n\n        next = transfers.length;\n\n        if ((mNext == 0) && (token.balanceOf(address(this)) != totalToDistribute)) {\n            revert(\"Invalid total amount\");\n        }\n\n        while ((mNext < transfers.length) && (gasleft() > 150000)) {\n            uint amount = transfers[mNext].amount;\n            address addr = transfers[mNext].addr;\n            if (amount > 0) {\n                require(token.transfer(addr, amount), \"Transfer failed\");\n            }\n            mNext++;\n        }\n\n        next = mNext;",
          "message": "Reentrancy in TokenSender.run (patch_16.sol#67-87):\n\tExternal calls:\n\t- (mNext == 0) && (token.balanceOf(address(this)) != totalToDistribute) (patch_16.sol#73-75)\n\t- require(bool,string)(token.transfer(addr,amount),Transfer failed) (patch_16.sol#81)\n\tState variables written after the call(s):\n\t- next (patch_16.sol#86)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "                require(token.transfer(addr, amount), \"Transfer failed\");",
          "message": "TokenSender.run has external calls inside a loop:\n\t- require(bool,string)(token.transfer(addr,amount),Transfer failed) (patch_16.sol#81)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": 101,
          "vulnerability_code": "    function gas() internal view returns (uint _gas) {\n        assembly {\n            _gas := gas()\n        }",
          "message": "TokenSender.gas uses assembly (patch_16.sol#97-101)\n\t- patch_16.sol#98-101\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 17,
          "vulnerability_code": "    function changeOwner(address _newOwner) public onlyOwner {\n        owner = _newOwner;",
          "message": "Owned.changeOwner (patch_16.sol#15-17) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": 23,
          "vulnerability_code": "    function execute(address _dst, uint _value, bytes memory _data) public onlyOwner returns (bool) {\n        (bool success, ) = _dst.call.value(_value)(_data);\n        require(success, \"Execution failed\");\n        return true;",
          "message": "Owned.execute (patch_16.sol#19-23) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address, uint) public returns (bool);",
          "message": "Token.transfer (patch_16.sol#27) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address) public view returns (uint);",
          "message": "Token.balanceOf (patch_16.sol#29) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": 65,
          "vulnerability_code": "    function fill(uint[] memory data) public onlyOwner {\n        require(next == 0, \"Filling already in progress\");\n        uint acc;\n        uint offset = transfers.length;\n        transfers.length += data.length;\n        for (uint i = 0; i < data.length; i++) {\n            address addr = address(data[i] & (D160 - 1));\n            uint amount = data[i] / D160;\n\n            transfers[offset + i].addr = addr;\n            transfers[offset + i].amount = amount;\n            acc += amount;\n        }\n        totalToDistribute += acc;",
          "message": "TokenSender.fill (patch_16.sol#51-65) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": 87,
          "vulnerability_code": "    function run() public onlyOwner {\n        require(transfers.length > 0, \"No transfers to execute\");\n        uint mNext = next;\n\n        next = transfers.length;\n\n        if ((mNext == 0) && (token.balanceOf(address(this)) != totalToDistribute)) {\n            revert(\"Invalid total amount\");\n        }\n\n        while ((mNext < transfers.length) && (gasleft() > 150000)) {\n            uint amount = transfers[mNext].amount;\n            address addr = transfers[mNext].addr;\n            if (amount > 0) {\n                require(token.transfer(addr, amount), \"Transfer failed\");\n            }\n            mNext++;\n        }\n\n        next = mNext;",
          "message": "TokenSender.run (patch_16.sol#67-87) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 89,
          "vulnerability_to_line": 91,
          "vulnerability_code": "    function hasTerminated() public view returns (bool) {\n        return (transfers.length > 0 && next >= transfers.length);",
          "message": "TokenSender.hasTerminated (patch_16.sol#89-91) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": 95,
          "vulnerability_code": "    function nTransfers() public view returns (uint) {\n        return transfers.length;",
          "message": "TokenSender.nTransfers (patch_16.sol#93-95) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.4.11;",
          "message": "Detected issues with version pragma in patch_16.sol:\n\t- pragma solidity>=0.4.11 (patch_16.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": 23,
          "vulnerability_code": "    function execute(address _dst, uint _value, bytes memory _data) public onlyOwner returns (bool) {\n        (bool success, ) = _dst.call.value(_value)(_data);\n        require(success, \"Execution failed\");\n        return true;",
          "message": "Low level call in Owned.execute (patch_16.sol#19-23):\n\t-(success) = _dst.call.value(_value)(_data) patch_16.sol#20\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function changeOwner(address _newOwner) public onlyOwner {",
          "message": "Parameter '_newOwner' of Owned.changeOwner (patch_16.sol#15) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(address _dst, uint _value, bytes memory _data) public onlyOwner returns (bool) {",
          "message": "Parameter '_dst' of Owned.execute (patch_16.sol#19) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(address _dst, uint _value, bytes memory _data) public onlyOwner returns (bool) {",
          "message": "Parameter '_value' of Owned.execute (patch_16.sol#19) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(address _dst, uint _value, bytes memory _data) public onlyOwner returns (bool) {",
          "message": "Parameter '_data' of Owned.execute (patch_16.sol#19) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address, uint) public returns (bool);",
          "message": "Parameter '' of Token.transfer (patch_16.sol#27) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address, uint) public returns (bool);",
          "message": "Parameter '_scope_0' of Token.transfer (patch_16.sol#27) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address) public view returns (uint);",
          "message": "Parameter '' of Token.balanceOf (patch_16.sol#29) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _token) public {",
          "message": "Parameter '_token' of TokenSender. (patch_16.sol#45) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Callstack Depth Attack Vulnerability",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = _dst.call.value(_value)(_data);",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(address _dst, uint _value, bytes memory _data) public onlyOwner returns (bool) {",
          "message": null
        },
        {
          "name": "Callstack Depth Attack Vulnerability",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = _dst.call.value(_value)(_data);",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function fill(uint[] memory data) public onlyOwner {",
          "message": null
        }
      ]
    }
  }
}