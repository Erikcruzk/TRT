{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public messages;",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string public marriageStatus;",
          "message": null
        }
      ]
    },
    "mythril-0.23.15": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_dst.call.value(_value)(_data));",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public messages;",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Event[] public majorEvents;",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_dst.call.value(_value)(_data));",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_20"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 19,
          "vulnerability_code": "    function changeOwner(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;",
          "message": "Owned.changeOwner (patch_11.sol#17-19) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 26,
          "vulnerability_code": "    function acceptOwnership() public {\n        if (msg.sender == newOwner) {\n            owner = newOwner;\n            newOwner = address(0);\n        }",
          "message": "Owned.acceptOwnership (patch_11.sol#21-26) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": 30,
          "vulnerability_code": "    function execute(address _dst, uint _value, bytes _data) public onlyOwner {\n        require(_dst.call.value(_value)(_data));",
          "message": "Owned.execute (patch_11.sol#28-30) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": 69,
          "vulnerability_code": "    function numberOfMajorEvents() public constant returns (uint) {\n        return majorEvents.length;",
          "message": "Marriage.numberOfMajorEvents (patch_11.sol#67-69) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": 73,
          "vulnerability_code": "    function numberOfMessages() public constant returns (uint) {\n        return messages.length;",
          "message": "Marriage.numberOfMessages (patch_11.sol#71-73) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": 89,
          "vulnerability_code": "    function createMarriage(\n        string _partner1,\n        string _partner2,\n        string _vows,\n        string url\n    ) public onlyOwner {\n        require(majorEvents.length == 0);\n        partner1 = _partner1;\n        partner2 = _partner2;\n        marriageDate = now;\n        vows = _vows;\n        marriageStatus = \"Married\";\n        majorEvents.push(Event(now, \"Marriage\", vows, url));\n        emit MajorEvent(\"Marrigage\", vows, url);",
          "message": "Marriage.createMarriage (patch_11.sol#75-89) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": 94,
          "vulnerability_code": "    function setStatus(string status, string url) public onlyOwner {\n        marriageStatus = status;\n        setMajorEvent(\"Changed Status\", status, url);",
          "message": "Marriage.setStatus (patch_11.sol#91-94) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": 115,
          "vulnerability_code": "    function sendMessage(\n        string nameFrom,\n        string text,\n        string url\n    ) public payable areMarried {\n        if (msg.value > 0) {\n            owner.transfer(msg.value);\n        }\n        messages.push(Message(now, nameFrom, text, url, msg.value));\n        emit MessageSent(nameFrom, text, url, msg.value);",
          "message": "Marriage.sendMessage (patch_11.sol#105-115) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.16;",
          "message": "Detected issues with version pragma in patch_11.sol:\n\t- pragma solidity^0.4.16 (patch_11.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": 30,
          "vulnerability_code": "    function execute(address _dst, uint _value, bytes _data) public onlyOwner {\n        require(_dst.call.value(_value)(_data));",
          "message": "Low level call in Owned.execute (patch_11.sol#28-30):\n\t-require(bool)(_dst.call.value(_value)(_data)) patch_11.sol#29\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 13,
          "vulnerability_code": "    function Owned() public {\n        owner = msg.sender;",
          "message": "Function 'Owned.Owned' (patch_11.sol#11-13) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function changeOwner(address _newOwner) public onlyOwner {",
          "message": "Parameter '_newOwner' of Owned.changeOwner (patch_11.sol#17) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(address _dst, uint _value, bytes _data) public onlyOwner {",
          "message": "Parameter '_dst' of Owned.execute (patch_11.sol#28) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(address _dst, uint _value, bytes _data) public onlyOwner {",
          "message": "Parameter '_value' of Owned.execute (patch_11.sol#28) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(address _dst, uint _value, bytes _data) public onlyOwner {",
          "message": "Parameter '_data' of Owned.execute (patch_11.sol#28) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": 65,
          "vulnerability_code": "    function Marriage(address _owner) public {\n        owner = _owner;",
          "message": "Function 'Marriage.Marriage' (patch_11.sol#63-65) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Marriage(address _owner) public {",
          "message": "Parameter '_owner' of Marriage.Marriage (patch_11.sol#63) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _partner1,",
          "message": "Parameter '_partner1' of Marriage.createMarriage (patch_11.sol#76) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _partner2,",
          "message": "Parameter '_partner2' of Marriage.createMarriage (patch_11.sol#77) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _vows,",
          "message": "Parameter '_vows' of Marriage.createMarriage (patch_11.sol#78) is not in mixedCase\n"
        }
      ]
    }
  }
}