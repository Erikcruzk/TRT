{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Dependence on tx.origin (SWC 115)",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == tx.origin);",
          "message": "Use of tx.origin as a part of authorization control.\nThe tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.\nClassification: SWC-115"
        },
        {
          "name": "Dependence on tx.origin (SWC 115)",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == owner);",
          "message": "Use of tx.origin as a part of authorization control.\nThe tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.\nClassification: SWC-115"
        },
        {
          "name": "Dependence on tx.origin (SWC 115)",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == tx.origin);",
          "message": "Use of tx.origin as a part of authorization control.\nThe tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.\nClassification: SWC-115"
        },
        {
          "name": "Dependence on tx.origin (SWC 115)",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == tx.origin);",
          "message": "Use of tx.origin as a part of authorization control.\nThe tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.\nClassification: SWC-115"
        },
        {
          "name": "Dependence on tx.origin (SWC 115)",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == owner);",
          "message": "Use of tx.origin as a part of authorization control.\nThe tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.\nClassification: SWC-115"
        },
        {
          "name": "Dependence on tx.origin (SWC 115)",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == owner);",
          "message": "Use of tx.origin as a part of authorization control.\nThe tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.\nClassification: SWC-115"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 153,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return ERC20Interface(tokenAddress).transfer(tokenOwner, tokens);",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = whale.call.value(amount)(bytes4(keccak256(\"donate()\")));",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "        totalDonated += amount;",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "        totalDonated += amount;",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit Donate(amount, whale, msg.sender);",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_23"
      ],
      "vulnerability_findings": [
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": 122,
          "vulnerability_code": "    function loseWager(uint256 amount, uint256 wagerValue) internal {\n        (bool success, ) = whale.call.value(amount)(bytes4(keccak256(\"donate()\")));\n        require(success, \"Donation failed\");\n        totalDonated += amount;\n        emit Lose(wagerValue, msg.sender);",
          "message": "PoCGame.loseWager (patch_14.sol#117-122) sends eth to arbitrary user\n\tDangerous calls:\n\t- (success) = whale.call.value(amount)(bytes4(keccak256()(donate()))) (patch_14.sol#118)\n"
        },
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": 97,
          "vulnerability_code": "    function play() public isOpenToPublic onlyRealPeople onlyPlayers {\n        uint256 blockNumber = timestamps[msg.sender];\n        if (blockNumber < block.number) {\n            timestamps[msg.sender] = 0;\n            uint256 wagerValue = wagers[msg.sender];\n            wagers[msg.sender] = 0;\n\n            uint256 winningNumber = (uint256(\n                keccak256(abi.encodePacked(blockhash(blockNumber), msg.sender))\n            ) % difficulty) + 1;\n\n            if (winningNumber == difficulty / 2) {\n                payout(msg.sender, wagerValue);\n            } else {\n                loseWager(betLimit / 2, wagerValue);\n            }\n        } else {\n            revert();\n        }",
          "message": "PoCGame.play (patch_14.sol#78-97) uses a dangerous strict equality:\n\t- winningNumber == difficulty / 2\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": 115,
          "vulnerability_code": "    function donateToWhale(uint256 amount) internal {\n        (bool success, ) = whale.call.value(amount)(bytes4(keccak256(\"donate()\")));\n        require(success, \"Donation failed\");\n        totalDonated += amount;\n        emit Donate(amount, whale, msg.sender);",
          "message": "Reentrancy in PoCGame.donateToWhale (patch_14.sol#110-115):\n\tExternal calls:\n\t- (success) = whale.call.value(amount)(bytes4(keccak256()(donate()))) (patch_14.sol#111)\n\tState variables written after the call(s):\n\t- totalDonated (patch_14.sol#113)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": 122,
          "vulnerability_code": "    function loseWager(uint256 amount, uint256 wagerValue) internal {\n        (bool success, ) = whale.call.value(amount)(bytes4(keccak256(\"donate()\")));\n        require(success, \"Donation failed\");\n        totalDonated += amount;\n        emit Lose(wagerValue, msg.sender);",
          "message": "Reentrancy in PoCGame.loseWager (patch_14.sol#117-122):\n\tExternal calls:\n\t- (success) = whale.call.value(amount)(bytes4(keccak256()(donate()))) (patch_14.sol#118)\n\tState variables written after the call(s):\n\t- totalDonated (patch_14.sol#120)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint private randomSeed;",
          "message": "PoCGame.randomSeed should be constant (patch_14.sol#34)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": 54,
          "vulnerability_code": "    function openToThePublic() public onlyOwner {\n        openToPublic = true;",
          "message": "PoCGame.openToThePublic (patch_14.sol#52-54) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": 60,
          "vulnerability_code": "    function adjustBetAmounts(uint256 amount) public onlyOwner {\n        betLimit = amount;\n\n        emit BetLimitChanged(betLimit);",
          "message": "PoCGame.adjustBetAmounts (patch_14.sol#56-60) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": 66,
          "vulnerability_code": "    function adjustDifficulty(uint256 amount) public onlyOwner {\n        difficulty = amount;\n\n        emit DifficultyChanged(difficulty);",
          "message": "PoCGame.adjustDifficulty (patch_14.sol#62-66) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() public payable {}",
          "message": "PoCGame.fallback (patch_14.sol#68) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": 76,
          "vulnerability_code": "    function wager() public payable isOpenToPublic onlyRealPeople {\n        require(msg.value == betLimit);\n\n        timestamps[msg.sender] = block.number;\n        wagers[msg.sender] = msg.value;\n        emit Wager(msg.value, msg.sender);",
          "message": "PoCGame.wager (patch_14.sol#70-76) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": 97,
          "vulnerability_code": "    function play() public isOpenToPublic onlyRealPeople onlyPlayers {\n        uint256 blockNumber = timestamps[msg.sender];\n        if (blockNumber < block.number) {\n            timestamps[msg.sender] = 0;\n            uint256 wagerValue = wagers[msg.sender];\n            wagers[msg.sender] = 0;\n\n            uint256 winningNumber = (uint256(\n                keccak256(abi.encodePacked(blockhash(blockNumber), msg.sender))\n            ) % difficulty) + 1;\n\n            if (winningNumber == difficulty / 2) {\n                payout(msg.sender, wagerValue);\n            } else {\n                loseWager(betLimit / 2, wagerValue);\n            }\n        } else {\n            revert();\n        }",
          "message": "PoCGame.play (patch_14.sol#78-97) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": 101,
          "vulnerability_code": "    function donate() public payable isOpenToPublic {\n        donateToWhale(msg.value);",
          "message": "PoCGame.donate (patch_14.sol#99-101) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 124,
          "vulnerability_to_line": 126,
          "vulnerability_code": "    function ethBalance() public view returns (uint256) {\n        return address(this).balance;",
          "message": "PoCGame.ethBalance (patch_14.sol#124-126) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": 130,
          "vulnerability_code": "    function currentDifficulty() public view returns (uint256) {\n        return difficulty;",
          "message": "PoCGame.currentDifficulty (patch_14.sol#128-130) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 132,
          "vulnerability_to_line": 134,
          "vulnerability_code": "    function currentBetLimit() public view returns (uint256) {\n        return betLimit;",
          "message": "PoCGame.currentBetLimit (patch_14.sol#132-134) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": 142,
          "vulnerability_code": "    function hasPlayerWagered(address player) public view returns (bool) {\n        if (wagers[player] > 0) {\n            return true;\n        } else {\n            return false;\n        }",
          "message": "PoCGame.hasPlayerWagered (patch_14.sol#136-142) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 144,
          "vulnerability_to_line": 146,
          "vulnerability_code": "    function winnersPot() public view returns (uint256) {\n        return address(this).balance / 2;",
          "message": "PoCGame.winnersPot (patch_14.sol#144-146) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 148,
          "vulnerability_to_line": 154,
          "vulnerability_code": "    function transferAnyERC20Token(\n        address tokenAddress,\n        address tokenOwner,\n        uint tokens\n    ) public onlyOwner returns (bool success) {\n        return ERC20Interface(tokenAddress).transfer(tokenOwner, tokens);",
          "message": "PoCGame.transferAnyERC20Token (patch_14.sol#148-154) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address to, uint256 tokens) public returns (bool success);",
          "message": "ERC20Interface.transfer (patch_14.sol#158) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;",
          "message": "Detected issues with version pragma in patch_14.sol:\n\t- pragma solidity^0.4.21 (patch_14.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": 115,
          "vulnerability_code": "    function donateToWhale(uint256 amount) internal {\n        (bool success, ) = whale.call.value(amount)(bytes4(keccak256(\"donate()\")));\n        require(success, \"Donation failed\");\n        totalDonated += amount;\n        emit Donate(amount, whale, msg.sender);",
          "message": "Low level call in PoCGame.donateToWhale (patch_14.sol#110-115):\n\t-(success) = whale.call.value(amount)(bytes4(keccak256()(donate()))) patch_14.sol#111\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": 122,
          "vulnerability_code": "    function loseWager(uint256 amount, uint256 wagerValue) internal {\n        (bool success, ) = whale.call.value(amount)(bytes4(keccak256(\"donate()\")));\n        require(success, \"Donation failed\");\n        totalDonated += amount;\n        emit Lose(wagerValue, msg.sender);",
          "message": "Low level call in PoCGame.loseWager (patch_14.sol#117-122):\n\t-(success) = whale.call.value(amount)(bytes4(keccak256()(donate()))) patch_14.sol#118\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint private randomSeed;",
          "message": "PoCGame.randomSeed (patch_14.sol#34) is never used in PoCGame\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Callstack Depth Attack Vulnerability",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = whale.call.value(amount)(bytes4(keccak256(\"donate()\")));",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": null,
          "vulnerability_code": "                keccak256(abi.encodePacked(blockhash(blockNumber), msg.sender))",
          "message": null
        }
      ]
    }
  }
}