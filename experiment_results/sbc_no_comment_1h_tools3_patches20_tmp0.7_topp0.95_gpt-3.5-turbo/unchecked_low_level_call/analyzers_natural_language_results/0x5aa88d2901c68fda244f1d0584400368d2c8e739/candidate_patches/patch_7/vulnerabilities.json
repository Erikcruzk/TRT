{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Transaction-Ordering Dependence (TOD)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_9"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() public payable {}",
          "message": "MultiplicatorX3.fallback (patch_7.sol#6) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": 11,
          "vulnerability_code": "    function withdraw() public {\n        require(msg.sender == owner);\n        owner.transfer(this.balance);",
          "message": "MultiplicatorX3.withdraw (patch_7.sol#8-11) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": 16,
          "vulnerability_code": "    function command(address _target, bytes _data) public payable {\n        require(msg.sender == owner);\n        require(_target.call.value(msg.value)(_data));",
          "message": "MultiplicatorX3.command (patch_7.sol#13-16) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": 22,
          "vulnerability_code": "    function multiply(address _target) public payable {\n        require(msg.value > 0);\n        uint256 valueToSend = msg.value * 3;\n        require(_target.send(valueToSend));",
          "message": "MultiplicatorX3.multiply (patch_7.sol#18-22) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;",
          "message": "Detected issues with version pragma in patch_7.sol:\n\t- pragma solidity^0.4.18 (patch_7.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": 16,
          "vulnerability_code": "    function command(address _target, bytes _data) public payable {\n        require(msg.sender == owner);\n        require(_target.call.value(msg.value)(_data));",
          "message": "Low level call in MultiplicatorX3.command (patch_7.sol#13-16):\n\t-require(bool)(_target.call.value(msg.value)(_data)) patch_7.sol#15\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function command(address _target, bytes _data) public payable {",
          "message": "Parameter '_target' of MultiplicatorX3.command (patch_7.sol#13) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function command(address _target, bytes _data) public payable {",
          "message": "Parameter '_data' of MultiplicatorX3.command (patch_7.sol#13) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function multiply(address _target) public payable {",
          "message": "Parameter '_target' of MultiplicatorX3.multiply (patch_7.sol#18) is not in mixedCase\n"
        }
      ]
    },
    "mythril-0.23.15": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_target.call.value(msg.value)(_data));",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Unprotected Ether Withdrawal (SWC 105)",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_target.send(valueToSend));",
          "message": "Any sender can withdraw Ether from the contract account.\nArbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.\nClassification: SWC-105"
        }
      ]
    }
  }
}