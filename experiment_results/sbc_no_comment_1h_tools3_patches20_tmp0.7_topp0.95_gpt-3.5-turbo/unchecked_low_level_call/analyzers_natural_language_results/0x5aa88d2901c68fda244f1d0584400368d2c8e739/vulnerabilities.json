{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Callstack Depth Attack Vulnerability",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "        adr.call.value(msg.value)(data);",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Command(address adr, bytes data) public payable {",
          "message": null
        },
        {
          "name": "Transaction-Ordering Dependence (TOD)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_8"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() public payable {}",
          "message": "MultiplicatorX3.fallback (0x5aa88d2901c68fda244f1d0584400368d2c8e739.sol#6) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": 11,
          "vulnerability_code": "    function withdraw() public payable {\n        require(msg.sender == Owner);\n        Owner.transfer(this.balance);",
          "message": "MultiplicatorX3.withdraw (0x5aa88d2901c68fda244f1d0584400368d2c8e739.sol#8-11) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": 17,
          "vulnerability_code": "    function Command(address adr, bytes data) public payable {\n        require(msg.sender == Owner);\n\n        adr.call.value(msg.value)(data);",
          "message": "MultiplicatorX3.Command (0x5aa88d2901c68fda244f1d0584400368d2c8e739.sol#13-17) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": 23,
          "vulnerability_code": "    function multiplicate(address adr) public payable {\n        if (msg.value >= this.balance) {\n            adr.transfer(this.balance + msg.value);\n        }",
          "message": "MultiplicatorX3.multiplicate (0x5aa88d2901c68fda244f1d0584400368d2c8e739.sol#19-23) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;",
          "message": "Detected issues with version pragma in 0x5aa88d2901c68fda244f1d0584400368d2c8e739.sol:\n\t- pragma solidity^0.4.18 (0x5aa88d2901c68fda244f1d0584400368d2c8e739.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": 17,
          "vulnerability_code": "    function Command(address adr, bytes data) public payable {\n        require(msg.sender == Owner);\n\n        adr.call.value(msg.value)(data);",
          "message": "Low level call in MultiplicatorX3.Command (0x5aa88d2901c68fda244f1d0584400368d2c8e739.sol#13-17):\n\t-adr.call.value(msg.value)(data) 0x5aa88d2901c68fda244f1d0584400368d2c8e739.sol#16\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": 17,
          "vulnerability_code": "    function Command(address adr, bytes data) public payable {\n        require(msg.sender == Owner);\n\n        adr.call.value(msg.value)(data);",
          "message": "Function 'MultiplicatorX3.Command' (0x5aa88d2901c68fda244f1d0584400368d2c8e739.sol#13-17) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address public Owner = msg.sender;",
          "message": "Variable 'MultiplicatorX3.Owner' (0x5aa88d2901c68fda244f1d0584400368d2c8e739.sol#4) is not in mixedCase\n"
        }
      ]
    },
    "mythril-0.23.15": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "        adr.call.value(msg.value)(data);",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Unchecked return value from external call. (SWC 104)",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "        adr.call.value(msg.value)(data);",
          "message": "The return value of a message call is not checked.\nExternal calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.\nClassification: SWC-104"
        }
      ]
    }
  }
}