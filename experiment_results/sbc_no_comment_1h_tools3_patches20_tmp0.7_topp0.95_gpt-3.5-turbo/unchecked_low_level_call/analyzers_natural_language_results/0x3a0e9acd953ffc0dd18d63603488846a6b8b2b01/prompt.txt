/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.18;

contract Ownable {
    address newOwner;
    address owner = msg.sender;

    function changeOwner(address addr) public onlyOwner {
        newOwner = addr;
    }

    function confirmOwner() public {
        if (msg.sender == newOwner) {
            owner = newOwner;
        }
    }

    modifier onlyOwner() {
        if (owner == msg.sender) _;
    }
}

contract Token is Ownable {
    address owner = msg.sender;

    function WithdrawToken(
        address token,
        uint256 amount,
        address to
    ) public onlyOwner {
        token.call(bytes4(sha3("transfer(address,uint256)")), to, amount);
    }
}

contract TokenBank is Token {
    uint public MinDeposit;
    mapping(address => uint) public Holders;

    function initTokenBank() public {
        owner = msg.sender;
        MinDeposit = 1 ether;
    }

    function() payable {
        Deposit();
    }

    function Deposit() payable {
        if (msg.value > MinDeposit) {
            Holders[msg.sender] += msg.value;
        }
    }

    function WitdrawTokenToHolder(
        address _to,
        address _token,
        uint _amount
    ) public onlyOwner {
        if (Holders[_to] > 0) {
            Holders[_to] = 0;
            WithdrawToken(_token, _amount, _to);
        }
    }

    function WithdrawToHolder(
        address _addr,
        uint _wei
    ) public payable onlyOwner {
        if (Holders[msg.sender] > 0) {
            if (Holders[_addr] >= _wei) {
                _addr.call.value(_wei);
                Holders[_addr] -= _wei;
            }
        }
    }

    function Bal() public constant returns (uint) {
        return this.balance;
    }
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.

/// 1. Slither Analysis Results
/// 1.1. Vulnerability: unchecked_low_level_call at Line 25-31:
    function WithdrawToken(
        address token,
        uint256 amount,
        address to
    ) public onlyOwner {
        token.call(bytes4(sha3("transfer(address,uint256)")), to, amount);
///  Message:Low level call in Token.WithdrawToken (0x3a0e9acd953ffc0dd18d63603488846a6b8b2b01.sol#25-31):
///   	-token.call(bytes4(sha3()(transfer(address,uint256))),to,amount) 0x3a0e9acd953ffc0dd18d63603488846a6b8b2b01.sol#30


/// 2. Mythril-0.23.15 Analysis Results
/// 2.1. Vulnerability: unchecked_low_level_call at Line 30:
        token.call(bytes4(sha3("transfer(address,uint256)")), to, amount);
///  Message:The return value of a message call is not checked.
///   External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.
///   Classification: SWC-104
/// 2.2. Vulnerability: unchecked_low_level_call at Line 30:
        token.call(bytes4(sha3("transfer(address,uint256)")), to, amount);
///  Message:The return value of a message call is not checked.
///   External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.
///   Classification: SWC-104
/// 2.3. Vulnerability: unchecked_low_level_call at Line 30:
        token.call(bytes4(sha3("transfer(address,uint256)")), to, amount);
///  Message:The return value of a message call is not checked.
///   External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.
///   Classification: SWC-104



/// Repaired Solidity Smart Contract