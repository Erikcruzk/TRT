{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Transaction-Ordering Dependence (TOD)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_11"
      ],
      "vulnerability_findings": [
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": 18,
          "vulnerability_code": "    function redeem() public payable {\n        if (msg.value >= minEligibility) {\n            msg.sender.transfer(this.balance);\n        }",
          "message": "WhaleGiveaway1.redeem (patch_6.sol#14-18) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(this.balance) (patch_6.sol#16)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() public payable {}",
          "message": "WhaleGiveaway1.fallback (patch_6.sol#12) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": 18,
          "vulnerability_code": "    function redeem() public payable {\n        if (msg.value >= minEligibility) {\n            msg.sender.transfer(this.balance);\n        }",
          "message": "WhaleGiveaway1.redeem (patch_6.sol#14-18) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": 23,
          "vulnerability_code": "    function withdraw() public payable {\n        require(msg.sender == owner);\n        owner.transfer(this.balance);",
          "message": "WhaleGiveaway1.withdraw (patch_6.sol#20-23) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": 28,
          "vulnerability_code": "    function command(address _address, bytes _data) public payable {\n        require(msg.sender == owner);\n        require(_address.call.value(msg.value)(_data));",
          "message": "WhaleGiveaway1.command (patch_6.sol#25-28) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_6.sol:\n\t- pragma solidity^0.4.19 (patch_6.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": 28,
          "vulnerability_code": "    function command(address _address, bytes _data) public payable {\n        require(msg.sender == owner);\n        require(_address.call.value(msg.value)(_data));",
          "message": "Low level call in WhaleGiveaway1.command (patch_6.sol#25-28):\n\t-require(bool)(_address.call.value(msg.value)(_data)) patch_6.sol#27\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": 10,
          "vulnerability_code": "    function WhaleGiveaway1() public {\n        owner = msg.sender;",
          "message": "Function 'WhaleGiveaway1.WhaleGiveaway1' (patch_6.sol#8-10) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function command(address _address, bytes _data) public payable {",
          "message": "Parameter '_address' of WhaleGiveaway1.command (patch_6.sol#25) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function command(address _address, bytes _data) public payable {",
          "message": "Parameter '_data' of WhaleGiveaway1.command (patch_6.sol#25) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public constant minEligibility = 0.999001 ether;",
          "message": "Constant 'WhaleGiveaway1.minEligibility' (patch_6.sol#6) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        }
      ]
    },
    "mythril-0.23.15": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_address.call.value(msg.value)(_data));",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Unprotected Ether Withdrawal (SWC 105)",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "            msg.sender.transfer(this.balance);",
          "message": "Any sender can withdraw Ether from the contract account.\nArbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.\nClassification: SWC-105"
        }
      ]
    }
  }
}