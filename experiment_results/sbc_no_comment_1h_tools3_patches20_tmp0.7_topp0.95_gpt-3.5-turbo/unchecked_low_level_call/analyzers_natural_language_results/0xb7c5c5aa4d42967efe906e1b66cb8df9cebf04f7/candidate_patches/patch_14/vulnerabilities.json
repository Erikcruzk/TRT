{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool success = msg.sender.call.value(balances[msg.sender])();",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balances[msg.sender] = 0;",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_6"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": 15,
          "vulnerability_code": "    function withdraw() public {\n        require(balances[msg.sender] > 0); //check if the balance is greater than zero before making the call\n        bool success = msg.sender.call.value(balances[msg.sender])();\n        require(success); //check if the call was successful\n        balances[msg.sender] = 0;",
          "message": "Reentrancy in keepMyEther.withdraw (patch_14.sol#10-15):\n\tExternal calls:\n\t- success = msg.sender.call.value(balances[msg.sender])() (patch_14.sol#12)\n\tState variables written after the call(s):\n\t- balances (patch_14.sol#14)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": 8,
          "vulnerability_code": "    function() public payable {\n        balances[msg.sender] += msg.value;",
          "message": "keepMyEther.fallback (patch_14.sol#6-8) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": 15,
          "vulnerability_code": "    function withdraw() public {\n        require(balances[msg.sender] > 0); //check if the balance is greater than zero before making the call\n        bool success = msg.sender.call.value(balances[msg.sender])();\n        require(success); //check if the call was successful\n        balances[msg.sender] = 0;",
          "message": "keepMyEther.withdraw (patch_14.sol#10-15) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;",
          "message": "Detected issues with version pragma in patch_14.sol:\n\t- pragma solidity^0.4.23 (patch_14.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": 15,
          "vulnerability_code": "    function withdraw() public {\n        require(balances[msg.sender] > 0); //check if the balance is greater than zero before making the call\n        bool success = msg.sender.call.value(balances[msg.sender])();\n        require(success); //check if the call was successful\n        balances[msg.sender] = 0;",
          "message": "Low level call in keepMyEther.withdraw (patch_14.sol#10-15):\n\t-success = msg.sender.call.value(balances[msg.sender])() patch_14.sol#12\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 16,
          "vulnerability_code": "contract keepMyEther {\n    mapping(address => uint256) public balances;\n\n    function() public payable {\n        balances[msg.sender] += msg.value;\n    }\n\n    function withdraw() public {\n        require(balances[msg.sender] > 0); //check if the balance is greater than zero before making the call\n        bool success = msg.sender.call.value(balances[msg.sender])();\n        require(success); //check if the call was successful\n        balances[msg.sender] = 0;\n    }",
          "message": "Contract 'keepMyEther' (patch_14.sol#3-16) is not in CapWords\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Callstack Depth Attack Vulnerability",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool success = msg.sender.call.value(balances[msg.sender])();",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balances[msg.sender] += msg.value;",
          "message": null
        },
        {
          "name": "Re-Entrancy Vulnerability",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool success = msg.sender.call.value(balances[msg.sender])();",
          "message": null
        }
      ]
    }
  }
}