/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.16;

contract Owned {
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }

    address public owner;

    function Owned() {
        owner = msg.sender;
    }

    address public newOwner;

    function changeOwner(address _newOwner) onlyOwner {
        newOwner = _newOwner;
    }

    function acceptOwnership() {
        if (msg.sender == newOwner) {
            owner = newOwner;
        }
    }

    function execute(address _dst, uint _value, bytes _data) onlyOwner {
        _dst.call.value(_value)(_data);
    }
}

contract WedIndex is Owned {
    string public wedaddress;
    string public partnernames;
    uint public indexdate;
    uint public weddingdate;
    uint public displaymultisig;

    IndexArray[] public indexarray;

    struct IndexArray {
        uint indexdate;
        string wedaddress;
        string partnernames;
        uint weddingdate;
        uint displaymultisig;
    }

    function numberOfIndex() public constant returns (uint) {
        return indexarray.length;
    }

    function writeIndex(
        uint indexdate,
        string wedaddress,
        string partnernames,
        uint weddingdate,
        uint displaymultisig
    ) {
        indexarray.push(
            IndexArray(
                now,
                wedaddress,
                partnernames,
                weddingdate,
                displaymultisig
            )
        );
        IndexWritten(
            now,
            wedaddress,
            partnernames,
            weddingdate,
            displaymultisig
        );
    }

    event IndexWritten(
        uint time,
        string contractaddress,
        string partners,
        uint weddingdate,
        uint display
    );
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.

/// 1. Slither Analysis Results
/// 1.1. Vulnerability: unchecked_low_level_call at Line 27-29:
    function execute(address _dst, uint _value, bytes _data) onlyOwner {
        _dst.call.value(_value)(_data);
///  Message:Low level call in Owned.execute (0x84d9ec85c9c568eb332b7226a8f826d897e0a4a8.sol#27-29):
///   	-_dst.call.value(_value)(_data) 0x84d9ec85c9c568eb332b7226a8f826d897e0a4a8.sol#28


/// 2. Mythril-0.23.15 Analysis Results
/// 2.1. Vulnerability: unchecked_low_level_call at Line 28:
        _dst.call.value(_value)(_data);
///  Message:The return value of a message call is not checked.
///   External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.
///   Classification: SWC-104
/// 2.2. Vulnerability: unchecked_low_level_call at Line 28:
        _dst.call.value(_value)(_data);
///  Message:The return value of a message call is not checked.
///   External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.
///   Classification: SWC-104



/// Repaired Solidity Smart Contract