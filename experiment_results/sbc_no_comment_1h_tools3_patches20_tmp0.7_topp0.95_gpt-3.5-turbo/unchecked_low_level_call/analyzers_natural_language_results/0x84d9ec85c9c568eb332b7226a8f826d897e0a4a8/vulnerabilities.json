{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Callstack Depth Attack Vulnerability",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _dst.call.value(_value)(_data);",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(address _dst, uint _value, bytes _data) onlyOwner {",
          "message": null
        },
        {
          "name": "Callstack Depth Attack Vulnerability",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _dst.call.value(_value)(_data);",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function writeIndex(",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string public partnernames;",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_18"
      ],
      "vulnerability_findings": [
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint indexdate,",
          "message": "WedIndex.writeIndex.indexdate (local variable @ 0x84d9ec85c9c568eb332b7226a8f826d897e0a4a8.sol#54) shadows:\n\t- WedIndex.indexdate (state variable @ 0x84d9ec85c9c568eb332b7226a8f826d897e0a4a8.sol#35)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string wedaddress,",
          "message": "WedIndex.writeIndex.wedaddress (local variable @ 0x84d9ec85c9c568eb332b7226a8f826d897e0a4a8.sol#55) shadows:\n\t- WedIndex.wedaddress (state variable @ 0x84d9ec85c9c568eb332b7226a8f826d897e0a4a8.sol#33)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string partnernames,",
          "message": "WedIndex.writeIndex.partnernames (local variable @ 0x84d9ec85c9c568eb332b7226a8f826d897e0a4a8.sol#56) shadows:\n\t- WedIndex.partnernames (state variable @ 0x84d9ec85c9c568eb332b7226a8f826d897e0a4a8.sol#34)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint weddingdate,",
          "message": "WedIndex.writeIndex.weddingdate (local variable @ 0x84d9ec85c9c568eb332b7226a8f826d897e0a4a8.sol#57) shadows:\n\t- WedIndex.weddingdate (state variable @ 0x84d9ec85c9c568eb332b7226a8f826d897e0a4a8.sol#36)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint displaymultisig",
          "message": "WedIndex.writeIndex.displaymultisig (local variable @ 0x84d9ec85c9c568eb332b7226a8f826d897e0a4a8.sol#58) shadows:\n\t- WedIndex.displaymultisig (state variable @ 0x84d9ec85c9c568eb332b7226a8f826d897e0a4a8.sol#37)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public displaymultisig;",
          "message": "WedIndex.displaymultisig should be constant (0x84d9ec85c9c568eb332b7226a8f826d897e0a4a8.sol#37)\nWedIndex.indexdate should be constant (0x84d9ec85c9c568eb332b7226a8f826d897e0a4a8.sol#35)\nWedIndex.partnernames should be constant (0x84d9ec85c9c568eb332b7226a8f826d897e0a4a8.sol#34)\nWedIndex.wedaddress should be constant (0x84d9ec85c9c568eb332b7226a8f826d897e0a4a8.sol#33)\nWedIndex.weddingdate should be constant (0x84d9ec85c9c568eb332b7226a8f826d897e0a4a8.sol#36)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 19,
          "vulnerability_code": "    function changeOwner(address _newOwner) onlyOwner {\n        newOwner = _newOwner;",
          "message": "Owned.changeOwner (0x84d9ec85c9c568eb332b7226a8f826d897e0a4a8.sol#17-19) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 25,
          "vulnerability_code": "    function acceptOwnership() {\n        if (msg.sender == newOwner) {\n            owner = newOwner;\n        }",
          "message": "Owned.acceptOwnership (0x84d9ec85c9c568eb332b7226a8f826d897e0a4a8.sol#21-25) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": 29,
          "vulnerability_code": "    function execute(address _dst, uint _value, bytes _data) onlyOwner {\n        _dst.call.value(_value)(_data);",
          "message": "Owned.execute (0x84d9ec85c9c568eb332b7226a8f826d897e0a4a8.sol#27-29) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": 51,
          "vulnerability_code": "    function numberOfIndex() public constant returns (uint) {\n        return indexarray.length;",
          "message": "WedIndex.numberOfIndex (0x84d9ec85c9c568eb332b7226a8f826d897e0a4a8.sol#49-51) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": 76,
          "vulnerability_code": "    function writeIndex(\n        uint indexdate,\n        string wedaddress,\n        string partnernames,\n        uint weddingdate,\n        uint displaymultisig\n    ) {\n        indexarray.push(\n            IndexArray(\n                now,\n                wedaddress,\n                partnernames,\n                weddingdate,\n                displaymultisig\n            )\n        );\n        IndexWritten(\n            now,\n            wedaddress,\n            partnernames,\n            weddingdate,\n            displaymultisig\n        );",
          "message": "WedIndex.writeIndex (0x84d9ec85c9c568eb332b7226a8f826d897e0a4a8.sol#53-76) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.16;",
          "message": "Detected issues with version pragma in 0x84d9ec85c9c568eb332b7226a8f826d897e0a4a8.sol:\n\t- pragma solidity^0.4.16 (0x84d9ec85c9c568eb332b7226a8f826d897e0a4a8.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": 29,
          "vulnerability_code": "    function execute(address _dst, uint _value, bytes _data) onlyOwner {\n        _dst.call.value(_value)(_data);",
          "message": "Low level call in Owned.execute (0x84d9ec85c9c568eb332b7226a8f826d897e0a4a8.sol#27-29):\n\t-_dst.call.value(_value)(_data) 0x84d9ec85c9c568eb332b7226a8f826d897e0a4a8.sol#28\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 13,
          "vulnerability_code": "    function Owned() {\n        owner = msg.sender;",
          "message": "Function 'Owned.Owned' (0x84d9ec85c9c568eb332b7226a8f826d897e0a4a8.sol#11-13) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function changeOwner(address _newOwner) onlyOwner {",
          "message": "Parameter '_newOwner' of Owned.changeOwner (0x84d9ec85c9c568eb332b7226a8f826d897e0a4a8.sol#17) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(address _dst, uint _value, bytes _data) onlyOwner {",
          "message": "Parameter '_dst' of Owned.execute (0x84d9ec85c9c568eb332b7226a8f826d897e0a4a8.sol#27) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(address _dst, uint _value, bytes _data) onlyOwner {",
          "message": "Parameter '_value' of Owned.execute (0x84d9ec85c9c568eb332b7226a8f826d897e0a4a8.sol#27) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(address _dst, uint _value, bytes _data) onlyOwner {",
          "message": "Parameter '_data' of Owned.execute (0x84d9ec85c9c568eb332b7226a8f826d897e0a4a8.sol#27) is not in mixedCase\n"
        }
      ]
    },
    "mythril-0.23.15": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function writeIndex(",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _dst.call.value(_value)(_data);",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Unchecked return value from external call. (SWC 104)",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _dst.call.value(_value)(_data);",
          "message": "The return value of a message call is not checked.\nExternal calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.\nClassification: SWC-104"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": null,
          "vulnerability_code": "    IndexArray[] public indexarray;",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _dst.call.value(_value)(_data);",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Unchecked return value from external call. (SWC 104)",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _dst.call.value(_value)(_data);",
          "message": "The return value of a message call is not checked.\nExternal calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.\nClassification: SWC-104"
        }
      ]
    }
  }
}