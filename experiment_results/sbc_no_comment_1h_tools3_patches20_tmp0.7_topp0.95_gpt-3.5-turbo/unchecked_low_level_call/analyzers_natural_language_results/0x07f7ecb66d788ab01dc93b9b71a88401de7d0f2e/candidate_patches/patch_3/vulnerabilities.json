{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": null,
          "vulnerability_code": "                keccak256(abi.encodePacked(blockhash(blockNumber), msg.sender, randomSeed))",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_16"
      ],
      "vulnerability_findings": [
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": 101,
          "vulnerability_code": "    function play() public isOpenToPublic onlyRealPeople onlyPlayers {\n        uint256 blockNumber = timestamps[msg.sender];\n        if (blockNumber < block.number) {\n            timestamps[msg.sender] = 0;\n            uint256 wagerAmount = wagers[msg.sender];\n            wagers[msg.sender] = 0;\n\n            uint256 winningNumber = (uint256(\n                keccak256(abi.encodePacked(blockhash(blockNumber), msg.sender, randomSeed))\n            ) % difficulty) + 1;\n\n            randomSeed = uint256(keccak256(abi.encodePacked(blockhash(blockNumber), randomSeed)));\n\n            if (winningNumber == difficulty / 2) {\n                payout(msg.sender, wagerAmount);\n            } else {\n                loseWager(wagerAmount / 2);\n            }\n        } else {\n            revert();\n        }",
          "message": "PoCGame.play (patch_3.sol#80-101) uses a dangerous strict equality:\n\t- winningNumber == difficulty / 2\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": 54,
          "vulnerability_code": "    function openToThePublic() public onlyOwner {\n        openToPublic = true;",
          "message": "PoCGame.openToThePublic (patch_3.sol#52-54) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": 60,
          "vulnerability_code": "    function adjustBetAmounts(uint256 amount) public onlyOwner {\n        betLimit = amount;\n\n        emit BetLimitChanged(betLimit);",
          "message": "PoCGame.adjustBetAmounts (patch_3.sol#56-60) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": 66,
          "vulnerability_code": "    function adjustDifficulty(uint256 amount) public onlyOwner {\n        difficulty = amount;\n\n        emit DifficultyChanged(difficulty);",
          "message": "PoCGame.adjustDifficulty (patch_3.sol#62-66) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() public payable {}",
          "message": "PoCGame.fallback (patch_3.sol#68) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": 78,
          "vulnerability_code": "    function wager() public payable isOpenToPublic onlyRealPeople {\n        require(msg.value == betLimit);\n\n        require(wagers[msg.sender] == 0);\n\n        timestamps[msg.sender] = block.number;\n        wagers[msg.sender] = msg.value;\n        emit Wager(msg.value, msg.sender);",
          "message": "PoCGame.wager (patch_3.sol#70-78) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": 101,
          "vulnerability_code": "    function play() public isOpenToPublic onlyRealPeople onlyPlayers {\n        uint256 blockNumber = timestamps[msg.sender];\n        if (blockNumber < block.number) {\n            timestamps[msg.sender] = 0;\n            uint256 wagerAmount = wagers[msg.sender];\n            wagers[msg.sender] = 0;\n\n            uint256 winningNumber = (uint256(\n                keccak256(abi.encodePacked(blockhash(blockNumber), msg.sender, randomSeed))\n            ) % difficulty) + 1;\n\n            randomSeed = uint256(keccak256(abi.encodePacked(blockhash(blockNumber), randomSeed)));\n\n            if (winningNumber == difficulty / 2) {\n                payout(msg.sender, wagerAmount);\n            } else {\n                loseWager(wagerAmount / 2);\n            }\n        } else {\n            revert();\n        }",
          "message": "PoCGame.play (patch_3.sol#80-101) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": 106,
          "vulnerability_code": "    function donate() public payable isOpenToPublic {\n        require(msg.value > 0);\n        donateToWhale(msg.sender, msg.value);",
          "message": "PoCGame.donate (patch_3.sol#103-106) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 130,
          "vulnerability_to_line": 132,
          "vulnerability_code": "    function ethBalance() public view returns (uint256) {\n        return address(this).balance;",
          "message": "PoCGame.ethBalance (patch_3.sol#130-132) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": 136,
          "vulnerability_code": "    function currentDifficulty() public view returns (uint256) {\n        return difficulty;",
          "message": "PoCGame.currentDifficulty (patch_3.sol#134-136) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": 140,
          "vulnerability_code": "    function currentBetLimit() public view returns (uint256) {\n        return betLimit;",
          "message": "PoCGame.currentBetLimit (patch_3.sol#138-140) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": 148,
          "vulnerability_code": "    function hasPlayerWagered(address player) public view returns (bool) {\n        if (wagers[player] > 0) {\n            return true;\n        } else {\n            return false;\n        }",
          "message": "PoCGame.hasPlayerWagered (patch_3.sol#142-148) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": 152,
          "vulnerability_code": "    function winnersPot() public view returns (uint256) {\n        return address(this).balance / 2;",
          "message": "PoCGame.winnersPot (patch_3.sol#150-152) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 154,
          "vulnerability_to_line": 160,
          "vulnerability_code": "    function transferAnyERC20Token(\n        address tokenAddress,\n        address tokenOwner,\n        uint tokens\n    ) public onlyOwner returns (bool success) {\n        return ERC20Interface(tokenAddress).transfer(tokenOwner, tokens);",
          "message": "PoCGame.transferAnyERC20Token (patch_3.sol#154-160) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 164,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address to, uint256 tokens) public returns (bool success);",
          "message": "ERC20Interface.transfer (patch_3.sol#164) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;",
          "message": "Detected issues with version pragma in patch_3.sol:\n\t- pragma solidity^0.4.21 (patch_3.sol#1): it allows old versions\n"
        }
      ]
    },
    "mythril-0.23.15": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Dependence on tx.origin (SWC 115)",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == tx.origin);",
          "message": "Use of tx.origin as a part of authorization control.\nThe tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.\nClassification: SWC-115"
        },
        {
          "name": "Dependence on tx.origin (SWC 115)",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == owner);",
          "message": "Use of tx.origin as a part of authorization control.\nThe tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.\nClassification: SWC-115"
        },
        {
          "name": "Dependence on tx.origin (SWC 115)",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == tx.origin);",
          "message": "Use of tx.origin as a part of authorization control.\nThe tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.\nClassification: SWC-115"
        },
        {
          "name": "Dependence on tx.origin (SWC 115)",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == tx.origin);",
          "message": "Use of tx.origin as a part of authorization control.\nThe tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.\nClassification: SWC-115"
        },
        {
          "name": "Dependence on tx.origin (SWC 115)",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == owner);",
          "message": "Use of tx.origin as a part of authorization control.\nThe tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.\nClassification: SWC-115"
        },
        {
          "name": "Dependence on tx.origin (SWC 115)",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == owner);",
          "message": "Use of tx.origin as a part of authorization control.\nThe tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.\nClassification: SWC-115"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 159,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return ERC20Interface(tokenAddress).transfer(tokenOwner, tokens);",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        }
      ]
    }
  }
}