{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Callstack Depth Attack Vulnerability",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": null,
          "vulnerability_code": "        whale.call.value(amount)(bytes4(keccak256(\"donate()\")));",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "        totalDonated += amount;",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "                keccak256(abi.encodePacked(blockhash(blockNumber), msg.sender))",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_27"
      ],
      "vulnerability_findings": [
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": 109,
          "vulnerability_code": "    function payout(address winner) internal {\n        uint256 ethToTransfer = address(this).balance / 2;\n\n        winner.transfer(ethToTransfer);\n        emit Win(ethToTransfer, winner);",
          "message": "PoCGame.payout (0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#104-109) sends eth to arbitrary user\n\tDangerous calls:\n\t- winner.transfer(ethToTransfer) (0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#107)\n"
        },
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": 121,
          "vulnerability_code": "    function loseWager(uint256 amount) internal {\n        whale.call.value(amount)(bytes4(keccak256(\"donate()\")));\n        totalDonated += amount;\n        emit Lose(amount, msg.sender);",
          "message": "PoCGame.loseWager (0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#117-121) sends eth to arbitrary user\n\tDangerous calls:\n\t- whale.call.value(amount)(bytes4(keccak256()(donate()))) (0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#118)\n"
        },
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": 98,
          "vulnerability_code": "    function play() public isOpenToPublic onlyRealPeople onlyPlayers {\n        uint256 blockNumber = timestamps[msg.sender];\n        if (blockNumber < block.number) {\n            timestamps[msg.sender] = 0;\n            wagers[msg.sender] = 0;\n\n            uint256 winningNumber = (uint256(\n                keccak256(abi.encodePacked(blockhash(blockNumber), msg.sender))\n            ) % difficulty) + 1;\n\n            if (winningNumber == difficulty / 2) {\n                payout(msg.sender);\n            } else {\n                loseWager(betLimit / 2);\n            }\n        } else {\n            revert();\n        }",
          "message": "PoCGame.play (0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#80-98) uses a dangerous strict equality:\n\t- winningNumber == difficulty / 2\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": 115,
          "vulnerability_code": "    function donateToWhale(uint256 amount) internal {\n        whale.call.value(amount)(bytes4(keccak256(\"donate()\")));\n        totalDonated += amount;\n        emit Donate(amount, whale, msg.sender);",
          "message": "Reentrancy in PoCGame.donateToWhale (0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#111-115):\n\tExternal calls:\n\t- whale.call.value(amount)(bytes4(keccak256()(donate()))) (0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#112)\n\tState variables written after the call(s):\n\t- totalDonated (0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#113)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": 121,
          "vulnerability_code": "    function loseWager(uint256 amount) internal {\n        whale.call.value(amount)(bytes4(keccak256(\"donate()\")));\n        totalDonated += amount;\n        emit Lose(amount, msg.sender);",
          "message": "Reentrancy in PoCGame.loseWager (0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#117-121):\n\tExternal calls:\n\t- whale.call.value(amount)(bytes4(keccak256()(donate()))) (0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#118)\n\tState variables written after the call(s):\n\t- totalDonated (0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#119)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint private randomSeed;",
          "message": "PoCGame.randomSeed should be constant (0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#34)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": 54,
          "vulnerability_code": "    function OpenToThePublic() public onlyOwner {\n        openToPublic = true;",
          "message": "PoCGame.OpenToThePublic (0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#52-54) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": 60,
          "vulnerability_code": "    function AdjustBetAmounts(uint256 amount) public onlyOwner {\n        betLimit = amount;\n\n        emit BetLimitChanged(betLimit);",
          "message": "PoCGame.AdjustBetAmounts (0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#56-60) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": 66,
          "vulnerability_code": "    function AdjustDifficulty(uint256 amount) public onlyOwner {\n        difficulty = amount;\n\n        emit DifficultyChanged(difficulty);",
          "message": "PoCGame.AdjustDifficulty (0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#62-66) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() public payable {}",
          "message": "PoCGame.fallback (0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#68) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": 78,
          "vulnerability_code": "    function wager() public payable isOpenToPublic onlyRealPeople {\n        require(msg.value == betLimit);\n\n        require(wagers[msg.sender] == 0);\n\n        timestamps[msg.sender] = block.number;\n        wagers[msg.sender] = msg.value;\n        emit Wager(msg.value, msg.sender);",
          "message": "PoCGame.wager (0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#70-78) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": 98,
          "vulnerability_code": "    function play() public isOpenToPublic onlyRealPeople onlyPlayers {\n        uint256 blockNumber = timestamps[msg.sender];\n        if (blockNumber < block.number) {\n            timestamps[msg.sender] = 0;\n            wagers[msg.sender] = 0;\n\n            uint256 winningNumber = (uint256(\n                keccak256(abi.encodePacked(blockhash(blockNumber), msg.sender))\n            ) % difficulty) + 1;\n\n            if (winningNumber == difficulty / 2) {\n                payout(msg.sender);\n            } else {\n                loseWager(betLimit / 2);\n            }\n        } else {\n            revert();\n        }",
          "message": "PoCGame.play (0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#80-98) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 100,
          "vulnerability_to_line": 102,
          "vulnerability_code": "    function donate() public payable isOpenToPublic {\n        donateToWhale(msg.value);",
          "message": "PoCGame.donate (0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#100-102) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": 125,
          "vulnerability_code": "    function ethBalance() public view returns (uint256) {\n        return address(this).balance;",
          "message": "PoCGame.ethBalance (0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#123-125) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 127,
          "vulnerability_to_line": 129,
          "vulnerability_code": "    function currentDifficulty() public view returns (uint256) {\n        return difficulty;",
          "message": "PoCGame.currentDifficulty (0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#127-129) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 131,
          "vulnerability_to_line": 133,
          "vulnerability_code": "    function currentBetLimit() public view returns (uint256) {\n        return betLimit;",
          "message": "PoCGame.currentBetLimit (0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#131-133) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": 141,
          "vulnerability_code": "    function hasPlayerWagered(address player) public view returns (bool) {\n        if (wagers[player] > 0) {\n            return true;\n        } else {\n            return false;\n        }",
          "message": "PoCGame.hasPlayerWagered (0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#135-141) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": 145,
          "vulnerability_code": "    function winnersPot() public view returns (uint256) {\n        return address(this).balance / 2;",
          "message": "PoCGame.winnersPot (0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#143-145) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 147,
          "vulnerability_to_line": 153,
          "vulnerability_code": "    function transferAnyERC20Token(\n        address tokenAddress,\n        address tokenOwner,\n        uint tokens\n    ) public onlyOwner returns (bool success) {\n        return ERC20Interface(tokenAddress).transfer(tokenOwner, tokens);",
          "message": "PoCGame.transferAnyERC20Token (0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#147-153) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address to, uint256 tokens) public returns (bool success);",
          "message": "ERC20Interface.transfer (0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#157) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;",
          "message": "Detected issues with version pragma in 0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol:\n\t- pragma solidity^0.4.21 (0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": 115,
          "vulnerability_code": "    function donateToWhale(uint256 amount) internal {\n        whale.call.value(amount)(bytes4(keccak256(\"donate()\")));\n        totalDonated += amount;\n        emit Donate(amount, whale, msg.sender);",
          "message": "Low level call in PoCGame.donateToWhale (0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#111-115):\n\t-whale.call.value(amount)(bytes4(keccak256()(donate()))) 0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#112\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": 121,
          "vulnerability_code": "    function loseWager(uint256 amount) internal {\n        whale.call.value(amount)(bytes4(keccak256(\"donate()\")));\n        totalDonated += amount;\n        emit Lose(amount, msg.sender);",
          "message": "Low level call in PoCGame.loseWager (0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#117-121):\n\t-whale.call.value(amount)(bytes4(keccak256()(donate()))) 0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#118\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": 54,
          "vulnerability_code": "    function OpenToThePublic() public onlyOwner {\n        openToPublic = true;",
          "message": "Function 'PoCGame.OpenToThePublic' (0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#52-54) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": 60,
          "vulnerability_code": "    function AdjustBetAmounts(uint256 amount) public onlyOwner {\n        betLimit = amount;\n\n        emit BetLimitChanged(betLimit);",
          "message": "Function 'PoCGame.AdjustBetAmounts' (0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#56-60) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": 66,
          "vulnerability_code": "    function AdjustDifficulty(uint256 amount) public onlyOwner {\n        difficulty = amount;\n\n        emit DifficultyChanged(difficulty);",
          "message": "Function 'PoCGame.AdjustDifficulty' (0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#62-66) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint private randomSeed;",
          "message": "PoCGame.randomSeed (0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol#34) is never used in PoCGame\n"
        }
      ]
    },
    "mythril-0.23.15": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Dependence on tx.origin (SWC 115)",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == tx.origin);",
          "message": "Use of tx.origin as a part of authorization control.\nThe tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.\nClassification: SWC-115"
        },
        {
          "name": "Dependence on tx.origin (SWC 115)",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == owner);",
          "message": "Use of tx.origin as a part of authorization control.\nThe tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.\nClassification: SWC-115"
        },
        {
          "name": "Dependence on tx.origin (SWC 115)",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == tx.origin);",
          "message": "Use of tx.origin as a part of authorization control.\nThe tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.\nClassification: SWC-115"
        },
        {
          "name": "Dependence on tx.origin (SWC 115)",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == tx.origin);",
          "message": "Use of tx.origin as a part of authorization control.\nThe tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.\nClassification: SWC-115"
        },
        {
          "name": "Dependence on tx.origin (SWC 115)",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == owner);",
          "message": "Use of tx.origin as a part of authorization control.\nThe tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.\nClassification: SWC-115"
        },
        {
          "name": "Dependence on tx.origin (SWC 115)",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == owner);",
          "message": "Use of tx.origin as a part of authorization control.\nThe tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.\nClassification: SWC-115"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 152,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return ERC20Interface(tokenAddress).transfer(tokenOwner, tokens);",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "        whale.call.value(amount)(bytes4(keccak256(\"donate()\")));",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Unchecked return value from external call. (SWC 104)",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "        whale.call.value(amount)(bytes4(keccak256(\"donate()\")));",
          "message": "The return value of a message call is not checked.\nExternal calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.\nClassification: SWC-104"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "        totalDonated += amount;",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "        totalDonated += amount;",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit Donate(amount, whale, msg.sender);",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        }
      ]
    }
  }
}