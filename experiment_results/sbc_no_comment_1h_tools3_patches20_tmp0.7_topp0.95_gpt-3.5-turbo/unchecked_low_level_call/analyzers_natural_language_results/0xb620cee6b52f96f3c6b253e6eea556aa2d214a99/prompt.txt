/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.23;

contract DrainMe {
    address public winner = 0x0;
    address public owner;
    address public firstTarget = 0x461ec7309F187dd4650EE6b4D25D93c922d7D56b;
    address public secondTarget = 0x1C3E062c77f09fC61550703bDd1D59842C22c766;
    address[] public players;

    mapping(address => bool) approvedPlayers;

    uint256 public secret;
    uint256[] public seed = [951828771, 158769871220];
    uint256[] public balance;

    function DranMe() public payable {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }

    modifier onlyWinner() {
        require(msg.sender == winner);
        _;
    }

    modifier onlyPlayers() {
        require(approvedPlayers[msg.sender]);
        _;
    }

    function getLength() public constant returns (uint256) {
        return seed.length;
    }

    function setSecret(uint256 _secret) public payable onlyOwner {
        secret = _secret;
    }

    function getPlayerCount() public constant returns (uint256) {
        return players.length;
    }

    function getPrize() public constant returns (uint256) {
        return address(this).balance;
    }

    function becomePlayer() public payable {
        require(msg.value >= 0.02 ether);
        players.push(msg.sender);
        approvedPlayers[msg.sender] = true;
    }

    function manipulateSecret() public payable onlyPlayers {
        require(msg.value >= 0.01 ether);
        if (msg.sender != owner || unlockSecret()) {
            uint256 amount = 0;
            msg.sender.transfer(amount);
        }
    }

    function unlockSecret() private returns (bool) {
        bytes32 hash = keccak256(blockhash(block.number - 1));
        uint256 secret = uint256(hash);
        if (secret % 5 == 0) {
            winner = msg.sender;
            return true;
        } else {
            return false;
        }
    }

    function callFirstTarget() public payable onlyPlayers {
        require(msg.value >= 0.005 ether);

        firstTarget.call.value(msg.value)();
    }

    function callSecondTarget() public payable onlyPlayers {
        require(msg.value >= 0.005 ether);

        secondTarget.call.value(msg.value)();
    }

    function setSeed(
        uint256 _index,
        uint256 _value
    ) public payable onlyPlayers {
        seed[_index] = _value;
    }

    function addSeed(uint256 _add) public payable onlyPlayers {
        seed.length = _add;
    }

    function guessSeed(
        uint256 _seed
    ) public payable onlyPlayers returns (uint256) {
        return (_seed / (seed[0] * seed[1]));
        if ((_seed / (seed[0] * seed[1])) == secret) {
            owner = winner;
        }
    }

    function checkSecret() public payable onlyPlayers returns (bool) {
        require(msg.value >= 0.01 ether);
        if (msg.value == secret) {
            return true;
        }
    }

    function winPrize() public payable onlyOwner {
        owner.call.value(1 wei)();
    }

    function claimPrize() public payable onlyWinner {
        winner.transfer(address(this).balance);
    }

    function() public payable {}
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.

/// 1. Slither Analysis Results
/// 1.1. Vulnerability: unchecked_low_level_call at Line 76-80:
    function callFirstTarget() public payable onlyPlayers {
        require(msg.value >= 0.005 ether);

        firstTarget.call.value(msg.value)();
///  Message:Low level call in DrainMe.callFirstTarget (0xb620cee6b52f96f3c6b253e6eea556aa2d214a99.sol#76-80):
///   	-firstTarget.call.value(msg.value)() 0xb620cee6b52f96f3c6b253e6eea556aa2d214a99.sol#79
/// 1.2. Vulnerability: unchecked_low_level_call at Line 82-86:
    function callSecondTarget() public payable onlyPlayers {
        require(msg.value >= 0.005 ether);

        secondTarget.call.value(msg.value)();
///  Message:Low level call in DrainMe.callSecondTarget (0xb620cee6b52f96f3c6b253e6eea556aa2d214a99.sol#82-86):
///   	-secondTarget.call.value(msg.value)() 0xb620cee6b52f96f3c6b253e6eea556aa2d214a99.sol#85
/// 1.3. Vulnerability: unchecked_low_level_call at Line 115-117:
    function winPrize() public payable onlyOwner {
        owner.call.value(1 wei)();
///  Message:Low level call in DrainMe.winPrize (0xb620cee6b52f96f3c6b253e6eea556aa2d214a99.sol#115-117):
///   	-owner.call.value(1)() 0xb620cee6b52f96f3c6b253e6eea556aa2d214a99.sol#116


/// 2. Mythril-0.23.15 Analysis Results
/// 2.1. Vulnerability: unchecked_low_level_call at Line 79:
        firstTarget.call.value(msg.value)();
///  Message:The return value of a message call is not checked.
///   External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.
///   Classification: SWC-104
/// 2.2. Vulnerability: unchecked_low_level_call at Line 85:
        secondTarget.call.value(msg.value)();
///  Message:The return value of a message call is not checked.
///   External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.
///   Classification: SWC-104
/// 2.3. Vulnerability: unchecked_low_level_call at Line 116:
        owner.call.value(1 wei)();
///  Message:The return value of a message call is not checked.
///   External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.
///   Classification: SWC-104



/// Repaired Solidity Smart Contract