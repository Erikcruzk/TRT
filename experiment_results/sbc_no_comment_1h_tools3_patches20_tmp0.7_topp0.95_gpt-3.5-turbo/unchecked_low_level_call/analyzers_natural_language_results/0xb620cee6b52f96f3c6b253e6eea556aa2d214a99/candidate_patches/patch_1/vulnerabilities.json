{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "        seed.length += _add;",
          "message": null
        },
        {
          "name": "Transaction-Ordering Dependence (TOD)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_28"
      ],
      "vulnerability_findings": [
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": 74,
          "vulnerability_code": "    function unlockSecret() private returns (bool) {\n        bytes32 hash = keccak256(blockhash(block.number - 1));\n        uint256 secret = uint256(hash);\n        if (secret % 5 == 0) {\n            winner = msg.sender;\n            return true;\n        } else {\n            return false;\n        }",
          "message": "DrainMe.unlockSecret (patch_1.sol#65-74) uses a dangerous strict equality:\n\t- secret % 5 == 0\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 secret = uint256(hash);",
          "message": "DrainMe.unlockSecret.secret (local variable @ patch_1.sol#67) shadows:\n\t- DrainMe.secret (state variable @ patch_1.sol#12)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address public firstTarget = 0x461ec7309F187dd4650EE6b4D25D93c922d7D56b;",
          "message": "DrainMe.firstTarget should be constant (patch_1.sol#6)\nDrainMe.secondTarget should be constant (patch_1.sol#7)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": 37,
          "vulnerability_code": "    function getLength() public view returns (uint256) {\n        return seed.length;",
          "message": "DrainMe.getLength (patch_1.sol#35-37) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": 41,
          "vulnerability_code": "    function setSecret(uint256 _secret) public payable onlyOwner {\n        secret = _secret;",
          "message": "DrainMe.setSecret (patch_1.sol#39-41) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": 45,
          "vulnerability_code": "    function getPlayerCount() public view returns (uint256) {\n        return players.length;",
          "message": "DrainMe.getPlayerCount (patch_1.sol#43-45) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": 49,
          "vulnerability_code": "    function getPrize() public view returns (uint256) {\n        return address(this).balance;",
          "message": "DrainMe.getPrize (patch_1.sol#47-49) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": 55,
          "vulnerability_code": "    function becomePlayer() public payable {\n        require(msg.value >= 0.02 ether);\n        players.push(msg.sender);\n        approvedPlayers[msg.sender] = true;",
          "message": "DrainMe.becomePlayer (patch_1.sol#51-55) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": 63,
          "vulnerability_code": "    function manipulateSecret() public payable onlyPlayers {\n        require(msg.value >= 0.01 ether);\n        if (msg.sender != owner || unlockSecret()) {\n            uint256 amount = 0;\n            msg.sender.transfer(amount);\n        }",
          "message": "DrainMe.manipulateSecret (patch_1.sol#57-63) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": 80,
          "vulnerability_code": "    function callFirstTarget() public payable onlyPlayers {\n        require(msg.value >= 0.005 ether);\n\n        require(firstTarget.call.value(msg.value)());",
          "message": "DrainMe.callFirstTarget (patch_1.sol#76-80) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": 86,
          "vulnerability_code": "    function callSecondTarget() public payable onlyPlayers {\n        require(msg.value >= 0.005 ether);\n\n        require(secondTarget.call.value(msg.value)());",
          "message": "DrainMe.callSecondTarget (patch_1.sol#82-86) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": 93,
          "vulnerability_code": "    function setSeed(\n        uint256 _index,\n        uint256 _value\n    ) public payable onlyPlayers {\n        seed[_index] = _value;",
          "message": "DrainMe.setSeed (patch_1.sol#88-93) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": 97,
          "vulnerability_code": "    function addSeed(uint256 _add) public payable onlyPlayers {\n        seed.length += _add;",
          "message": "DrainMe.addSeed (patch_1.sol#95-97) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": 107,
          "vulnerability_code": "    function guessSeed(\n        uint256 _seed\n    ) public payable onlyPlayers returns (bool) {\n        if ((_seed / (seed[0] * seed[1])) == secret) {\n            owner = winner;\n            return true;\n        }\n        return false;",
          "message": "DrainMe.guessSeed (patch_1.sol#99-107) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 109,
          "vulnerability_to_line": 115,
          "vulnerability_code": "    function checkSecret(uint256 _secret) public payable onlyPlayers returns (bool) {\n        require(msg.value >= 0.01 ether);\n        if (_secret == secret) {\n            return true;\n        }\n        return false;",
          "message": "DrainMe.checkSecret (patch_1.sol#109-115) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": 119,
          "vulnerability_code": "    function winPrize() public payable onlyOwner {\n        require(owner.send(1 wei));",
          "message": "DrainMe.winPrize (patch_1.sol#117-119) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 121,
          "vulnerability_to_line": 123,
          "vulnerability_code": "    function claimPrize() public payable onlyWinner {\n        require(winner.send(address(this).balance));",
          "message": "DrainMe.claimPrize (patch_1.sol#121-123) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() public payable {}",
          "message": "DrainMe.fallback (patch_1.sol#125) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;",
          "message": "Detected issues with version pragma in patch_1.sol:\n\t- pragma solidity^0.4.23 (patch_1.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": 80,
          "vulnerability_code": "    function callFirstTarget() public payable onlyPlayers {\n        require(msg.value >= 0.005 ether);\n\n        require(firstTarget.call.value(msg.value)());",
          "message": "Low level call in DrainMe.callFirstTarget (patch_1.sol#76-80):\n\t-require(bool)(firstTarget.call.value(msg.value)()) patch_1.sol#79\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": 86,
          "vulnerability_code": "    function callSecondTarget() public payable onlyPlayers {\n        require(msg.value >= 0.005 ether);\n\n        require(secondTarget.call.value(msg.value)());",
          "message": "Low level call in DrainMe.callSecondTarget (patch_1.sol#82-86):\n\t-require(bool)(secondTarget.call.value(msg.value)()) patch_1.sol#85\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 18,
          "vulnerability_code": "    function DrainMe() public payable {\n        owner = msg.sender;",
          "message": "Function 'DrainMe.DrainMe' (patch_1.sol#16-18) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setSecret(uint256 _secret) public payable onlyOwner {",
          "message": "Parameter '_secret' of DrainMe.setSecret (patch_1.sol#39) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 89,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _index,",
          "message": "Parameter '_index' of DrainMe.setSeed (patch_1.sol#89) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _value",
          "message": "Parameter '_value' of DrainMe.setSeed (patch_1.sol#90) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addSeed(uint256 _add) public payable onlyPlayers {",
          "message": "Parameter '_add' of DrainMe.addSeed (patch_1.sol#95) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 100,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _seed",
          "message": "Parameter '_seed' of DrainMe.guessSeed (patch_1.sol#100) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 109,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function checkSecret(uint256 _secret) public payable onlyPlayers returns (bool) {",
          "message": "Parameter '_secret' of DrainMe.checkSecret (patch_1.sol#109) is not in mixedCase\n"
        }
      ]
    },
    "mythril-0.23.15": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setSeed(",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256[] public balance;",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256[] public seed = [951828771, 158769871220];",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "        seed.length += _add;",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address[] public players;",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "Dependence on predictable environment variable (SWC 120)",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (secret % 5 == 0) {",
          "message": "A control flow decision is made based on The block hash of a previous block.\nThe block hash of a previous block is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-120"
        }
      ]
    }
  }
}