{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_tokenContractAddress.call(id, _from, _toAddresses[i], _values[i]));",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_tokenContractAddress.call(id, _from, _toAddresses[i], _values[i]));",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_8"
      ],
      "vulnerability_findings": [
        {
          "name": "calls-loop",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_tokenContractAddress.call(id, _from, _toAddresses[i], _values[i]));",
          "message": "Demo.transfer has external calls inside a loop:\n\t- require(bool)(_tokenContractAddress.call(id,_from,_toAddresses[i],_values[i])) (patch_3.sol#13)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": 16,
          "vulnerability_code": "    function transfer(\n        address _from,\n        address _tokenContractAddress,\n        address[] _toAddresses,\n        uint[] _values\n    ) public returns (bool) {\n        require(_toAddresses.length > 0 && _toAddresses.length == _values.length);\n        bytes4 id = bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\n        for (uint i = 0; i < _toAddresses.length; i++) {\n            require(_tokenContractAddress.call(id, _from, _toAddresses[i], _values[i]));\n        }\n        return true;",
          "message": "Demo.transfer (patch_3.sol#4-16) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;",
          "message": "Detected issues with version pragma in patch_3.sol:\n\t- pragma solidity^0.4.0 (patch_3.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": 16,
          "vulnerability_code": "    function transfer(\n        address _from,\n        address _tokenContractAddress,\n        address[] _toAddresses,\n        uint[] _values\n    ) public returns (bool) {\n        require(_toAddresses.length > 0 && _toAddresses.length == _values.length);\n        bytes4 id = bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\n        for (uint i = 0; i < _toAddresses.length; i++) {\n            require(_tokenContractAddress.call(id, _from, _toAddresses[i], _values[i]));\n        }\n        return true;",
          "message": "Low level call in Demo.transfer (patch_3.sol#4-16):\n\t-require(bool)(_tokenContractAddress.call(id,_from,_toAddresses[i],_values[i])) patch_3.sol#13\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _from,",
          "message": "Parameter '_from' of Demo.transfer (patch_3.sol#5) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _tokenContractAddress,",
          "message": "Parameter '_tokenContractAddress' of Demo.transfer (patch_3.sol#6) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] _toAddresses,",
          "message": "Parameter '_toAddresses' of Demo.transfer (patch_3.sol#7) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint[] _values",
          "message": "Parameter '_values' of Demo.transfer (patch_3.sol#8) is not in mixedCase\n"
        }
      ]
    }
  }
}