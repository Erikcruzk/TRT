/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.23;

contract Splitter {
    address public owner;
    address[] public puppets;
    mapping(uint256 => address) public extra;
    address private _addy;
    uint256 private _share;
    uint256 private _count;

    constructor() public payable {
        owner = msg.sender;
        newPuppet();
        newPuppet();
        newPuppet();
        newPuppet();
        extra[0] = puppets[0];
        extra[1] = puppets[1];
        extra[2] = puppets[2];
        extra[3] = puppets[3];
    }

    function withdraw() public {
        require(msg.sender == owner);
        owner.transfer(address(this).balance);
    }

    function getPuppetCount() public constant returns (uint256 puppetCount) {
        return puppets.length;
    }

    function newPuppet() public returns (address newPuppet) {
        require(msg.sender == owner);
        Puppet p = new Puppet();
        puppets.push(p);
        return p;
    }

    function setExtra(uint256 _id, address _newExtra) public {
        require(_newExtra != address(0));
        extra[_id] = _newExtra;
    }

    function fundPuppets() public payable {
        require(msg.sender == owner);
        _share = SafeMath.div(msg.value, 4);

        extra[0].call.value(_share).gas(800000)();

        extra[1].call.value(_share).gas(800000)();

        extra[2].call.value(_share).gas(800000)();

        extra[3].call.value(_share).gas(800000)();
    }

    function() public payable {}
}

contract Puppet {
    mapping(uint256 => address) public target;
    mapping(uint256 => address) public master;

    constructor() public payable {
        target[0] = 0x509Cb8cB2F8ba04aE81eEC394175707Edd37e109;
        master[0] = 0x5C035Bb4Cb7dacbfeE076A5e61AA39a10da2E956;
    }

    function() public payable {
        if (msg.sender != target[0]) {
            target[0].call.value(msg.value).gas(600000)();
        }
    }

    function withdraw() public {
        require(msg.sender == master[0]);
        master[0].transfer(address(this).balance);
    }
}

library SafeMath {
    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
        if (a == 0) {
            return 0;
        }
        c = a * b;
        assert(c / a == b);
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
        c = a + b;
        assert(c >= a);
        return c;
    }
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.

/// 1. Slither Analysis Results
/// 1.1. Vulnerability: unchecked_low_level_call at Line 44-55:
    function fundPuppets() public payable {
        require(msg.sender == owner);
        _share = SafeMath.div(msg.value, 4);

        extra[0].call.value(_share).gas(800000)();

        extra[1].call.value(_share).gas(800000)();

        extra[2].call.value(_share).gas(800000)();

        extra[3].call.value(_share).gas(800000)();
///  Message:Low level call in Splitter.fundPuppets (0xb0510d68f210b7db66e8c7c814f22680f2b8d1d6.sol#44-55):
///   	-extra[0].call.value(_share).gas(800000)() 0xb0510d68f210b7db66e8c7c814f22680f2b8d1d6.sol#48
///   	-extra[1].call.value(_share).gas(800000)() 0xb0510d68f210b7db66e8c7c814f22680f2b8d1d6.sol#50
///   	-extra[2].call.value(_share).gas(800000)() 0xb0510d68f210b7db66e8c7c814f22680f2b8d1d6.sol#52
///   	-extra[3].call.value(_share).gas(800000)() 0xb0510d68f210b7db66e8c7c814f22680f2b8d1d6.sol#54
/// 1.2. Vulnerability: unchecked_low_level_call at Line 69-73:
    function() public payable {
        if (msg.sender != target[0]) {
            target[0].call.value(msg.value).gas(600000)();
        }
///  Message:Low level call in Puppet.fallback (0xb0510d68f210b7db66e8c7c814f22680f2b8d1d6.sol#69-73):
///   	-target[0].call.value(msg.value).gas(600000)() 0xb0510d68f210b7db66e8c7c814f22680f2b8d1d6.sol#71


/// 2. Mythril-0.23.15 Analysis Results
/// 2.1. Vulnerability: unchecked_low_level_call at Line 71:
            target[0].call.value(msg.value).gas(600000)();
///  Message:The return value of a message call is not checked.
///   External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.
///   Classification: SWC-104
/// 2.2. Vulnerability: unchecked_low_level_call at Line 23:
    function withdraw() public {
///  Message:The return value of a message call is not checked.
///   External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.
///   Classification: SWC-104
/// 2.3. Vulnerability: unchecked_low_level_call at Line 23:
    function withdraw() public {
///  Message:The return value of a message call is not checked.
///   External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.
///   Classification: SWC-104
/// 2.4. Vulnerability: unchecked_low_level_call at Line 23:
    function withdraw() public {
///  Message:The return value of a message call is not checked.
///   External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.
///   Classification: SWC-104
/// 2.5. Vulnerability: unchecked_low_level_call at Line 23:
    function withdraw() public {
///  Message:The return value of a message call is not checked.
///   External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.
///   Classification: SWC-104



/// Repaired Solidity Smart Contract