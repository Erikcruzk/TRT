{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address[] public puppets;",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(extra[1].call.value(_share).gas(800000)());",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(extra[1].call.value(_share).gas(800000)());",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(extra[1].call.value(_share).gas(800000)());",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(extra[1].call.value(_share).gas(800000)());",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(extra[2].call.value(_share).gas(800000)());",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(extra[2].call.value(_share).gas(800000)());",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(extra[2].call.value(_share).gas(800000)());",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(extra[2].call.value(_share).gas(800000)());",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(extra[3].call.value(_share).gas(800000)());",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(extra[3].call.value(_share).gas(800000)());",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(extra[3].call.value(_share).gas(800000)());",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(extra[3].call.value(_share).gas(800000)());",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_15"
      ],
      "vulnerability_findings": [
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function newPuppet() public returns (address newPuppet) {",
          "message": "Splitter.newPuppet.newPuppet (local variable @ patch_1.sol#33) shadows:\n\t- Splitter.newPuppet (function @ patch_1.sol#33-38)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address private _addy;",
          "message": "Splitter._addy should be constant (patch_1.sol#7)\nSplitter._count should be constant (patch_1.sol#9)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": 27,
          "vulnerability_code": "    function withdraw() public {\n        require(msg.sender == owner);\n        require(address(this).balance > 0);\n        owner.transfer(address(this).balance);",
          "message": "Splitter.withdraw (patch_1.sol#23-27) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": 31,
          "vulnerability_code": "    function getPuppetCount() public view returns (uint256 puppetCount) {\n        return puppets.length;",
          "message": "Splitter.getPuppetCount (patch_1.sol#29-31) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": 43,
          "vulnerability_code": "    function setExtra(uint256 _id, address _newExtra) public {\n        require(_newExtra != address(0));\n        extra[_id] = _newExtra;",
          "message": "Splitter.setExtra (patch_1.sol#40-43) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": 54,
          "vulnerability_code": "    function fundPuppets() public payable {\n        require(msg.sender == owner);\n        require(address(this).balance >= msg.value);\n        _share = msg.value / 4;\n\n        require(extra[0].call.value(_share).gas(800000)());\n        require(extra[1].call.value(_share).gas(800000)());\n        require(extra[2].call.value(_share).gas(800000)());\n        require(extra[3].call.value(_share).gas(800000)());",
          "message": "Splitter.fundPuppets (patch_1.sol#45-54) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": 58,
          "vulnerability_code": "    function() public payable {\n        revert();",
          "message": "Splitter.fallback (patch_1.sol#56-58) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": 73,
          "vulnerability_code": "    function() public payable {\n        require(msg.sender == target[0]);\n        require(target[0].call.value(msg.value).gas(600000)());",
          "message": "Puppet.fallback (patch_1.sol#70-73) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": 79,
          "vulnerability_code": "    function withdraw() public {\n        require(msg.sender == master[0]);\n        require(address(this).balance > 0);\n        require(master[0].send(address(this).balance));",
          "message": "Puppet.withdraw (patch_1.sol#75-79) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;",
          "message": "Detected issues with version pragma in patch_1.sol:\n\t- pragma solidity^0.4.23 (patch_1.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": 54,
          "vulnerability_code": "    function fundPuppets() public payable {\n        require(msg.sender == owner);\n        require(address(this).balance >= msg.value);\n        _share = msg.value / 4;\n\n        require(extra[0].call.value(_share).gas(800000)());\n        require(extra[1].call.value(_share).gas(800000)());\n        require(extra[2].call.value(_share).gas(800000)());\n        require(extra[3].call.value(_share).gas(800000)());",
          "message": "Low level call in Splitter.fundPuppets (patch_1.sol#45-54):\n\t-require(bool)(extra[0].call.value(_share).gas(800000)()) patch_1.sol#50\n\t-require(bool)(extra[1].call.value(_share).gas(800000)()) patch_1.sol#51\n\t-require(bool)(extra[2].call.value(_share).gas(800000)()) patch_1.sol#52\n\t-require(bool)(extra[3].call.value(_share).gas(800000)()) patch_1.sol#53\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": 73,
          "vulnerability_code": "    function() public payable {\n        require(msg.sender == target[0]);\n        require(target[0].call.value(msg.value).gas(600000)());",
          "message": "Low level call in Puppet.fallback (patch_1.sol#70-73):\n\t-require(bool)(target[0].call.value(msg.value).gas(600000)()) patch_1.sol#72\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setExtra(uint256 _id, address _newExtra) public {",
          "message": "Parameter '_id' of Splitter.setExtra (patch_1.sol#40) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setExtra(uint256 _id, address _newExtra) public {",
          "message": "Parameter '_newExtra' of Splitter.setExtra (patch_1.sol#40) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address private _addy;",
          "message": "Splitter._addy (patch_1.sol#7) is never used in Splitter\nSplitter._count (patch_1.sol#9) is never used in Splitter\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Transaction-Ordering Dependence (TOD)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "Re-Entrancy Vulnerability",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(extra[0].call.value(_share).gas(800000)());",
          "message": null
        },
        {
          "name": "Transaction-Ordering Dependence (TOD)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    }
  }
}