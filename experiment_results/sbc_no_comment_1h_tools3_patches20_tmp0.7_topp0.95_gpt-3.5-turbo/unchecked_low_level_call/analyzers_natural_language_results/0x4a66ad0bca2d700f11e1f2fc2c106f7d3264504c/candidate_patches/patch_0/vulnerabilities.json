{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_6"
      ],
      "vulnerability_findings": [
        {
          "name": "calls-loop",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(caddress.call(id, from, _tos[i], v[i] * 1000000000000000000));",
          "message": "EBU.transfer has external calls inside a loop:\n\t- require(bool)(caddress.call(id,from,_tos[i],v[i] * 1000000000000000000)) (patch_0.sol#12)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address public caddress = 0x1f844685f7Bf86eFcc0e74D8642c54A257111923;",
          "message": "EBU.caddress should be constant (patch_0.sol#5)\nEBU.from should be constant (patch_0.sol#4)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 15,
          "vulnerability_code": "    function transfer(address[] _tos, uint[] v) public returns (bool) {\n        require(msg.sender == from);\n        require(_tos.length > 0);\n        bytes4 id = bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\n        for (uint i = 0; i < _tos.length; i++) {\n            require(caddress.call(id, from, _tos[i], v[i] * 1000000000000000000));\n        }\n        return true;",
          "message": "EBU.transfer (patch_0.sol#7-15) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;",
          "message": "Detected issues with version pragma in patch_0.sol:\n\t- pragma solidity^0.4.18 (patch_0.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 15,
          "vulnerability_code": "    function transfer(address[] _tos, uint[] v) public returns (bool) {\n        require(msg.sender == from);\n        require(_tos.length > 0);\n        bytes4 id = bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\n        for (uint i = 0; i < _tos.length; i++) {\n            require(caddress.call(id, from, _tos[i], v[i] * 1000000000000000000));\n        }\n        return true;",
          "message": "Low level call in EBU.transfer (patch_0.sol#7-15):\n\t-require(bool)(caddress.call(id,from,_tos[i],v[i] * 1000000000000000000)) patch_0.sol#12\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address[] _tos, uint[] v) public returns (bool) {",
          "message": "Parameter '_tos' of EBU.transfer (patch_0.sol#7) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address[] _tos, uint[] v) public returns (bool) {",
          "message": null
        }
      ]
    }
  }
}