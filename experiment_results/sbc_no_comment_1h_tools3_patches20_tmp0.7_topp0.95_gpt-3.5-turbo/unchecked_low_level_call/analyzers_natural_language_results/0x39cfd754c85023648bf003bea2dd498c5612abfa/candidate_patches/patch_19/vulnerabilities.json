{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool success = _token.call(bytes4(keccak256(\"transfer(address,uint256)\")), _to, _amount);",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool success = _token.call(bytes4(keccak256(\"transfer(address,uint256)\")), _to, _amount);",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "            holders[msg.sender] += msg.value;",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_17"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 13,
          "vulnerability_code": "    function changeOwner(address addr) public onlyOwner {\n        newOwner = addr;",
          "message": "Ownable.changeOwner (patch_19.sol#11-13) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 20,
          "vulnerability_code": "    function confirmOwner() public {\n        if (msg.sender == newOwner) {\n            owner = newOwner;\n            newOwner = address(0);\n        }",
          "message": "Ownable.confirmOwner (patch_19.sol#15-20) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": 54,
          "vulnerability_code": "    function() public payable {\n        deposit();",
          "message": "TokenBank.fallback (patch_19.sol#52-54) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": 74,
          "vulnerability_code": "    function withdrawTokenToHolder(\n        address _to,\n        address _token,\n        uint _amount\n    ) public onlyOwner {\n        require(holders[_to] > 0);\n        require(_amount > 0);\n        require(_token != address(0));\n        require(_to != address(0));\n\n        holders[_to] = 0;\n        withdrawToken(_token, _amount, _to);",
          "message": "TokenBank.withdrawTokenToHolder (patch_19.sol#62-74) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": 87,
          "vulnerability_code": "    function withdrawToHolder(\n        address _addr,\n        uint _wei\n    ) public onlyOwner {\n        require(holders[msg.sender] > 0);\n        require(holders[_addr] >= _wei);\n        require(_addr != address(0));\n        require(_wei > 0);\n\n        holders[_addr] -= _wei;\n        _addr.transfer(_wei);",
          "message": "TokenBank.withdrawToHolder (patch_19.sol#76-87) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;",
          "message": "Detected issues with version pragma in patch_19.sol:\n\t- pragma solidity^0.4.18 (patch_19.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": 40,
          "vulnerability_code": "    function withdrawToken(\n        address _token,\n        uint256 _amount,\n        address _to\n    ) public onlyOwner {\n        require(_token != address(0));\n        require(_to != address(0));\n        require(_amount > 0);\n\n        bool success = _token.call(bytes4(keccak256(\"transfer(address,uint256)\")), _to, _amount);\n        require(success);",
          "message": "Low level call in Token.withdrawToken (patch_19.sol#29-40):\n\t-success = _token.call(bytes4(keccak256()(transfer(address,uint256))),_to,_amount) patch_19.sol#38\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 9,
          "vulnerability_code": "    function Ownable() public {\n        owner = msg.sender;",
          "message": "Function 'Ownable.Ownable' (patch_19.sol#7-9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _token,",
          "message": "Parameter '_token' of Token.withdrawToken (patch_19.sol#30) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _amount,",
          "message": "Parameter '_amount' of Token.withdrawToken (patch_19.sol#31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _to",
          "message": "Parameter '_to' of Token.withdrawToken (patch_19.sol#32) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": 50,
          "vulnerability_code": "    function TokenBank() public {\n        owner = msg.sender;\n        minDeposit = 1 ether;",
          "message": "Function 'TokenBank.TokenBank' (patch_19.sol#47-50) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _to,",
          "message": "Parameter '_to' of TokenBank.withdrawTokenToHolder (patch_19.sol#63) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _token,",
          "message": "Parameter '_token' of TokenBank.withdrawTokenToHolder (patch_19.sol#64) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _amount",
          "message": "Parameter '_amount' of TokenBank.withdrawTokenToHolder (patch_19.sol#65) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _addr,",
          "message": "Parameter '_addr' of TokenBank.withdrawToHolder (patch_19.sol#77) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _wei",
          "message": "Parameter '_wei' of TokenBank.withdrawToHolder (patch_19.sol#78) is not in mixedCase\n"
        }
      ]
    }
  }
}