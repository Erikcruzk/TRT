{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return ERC20(_token).transfer(_to, _amount);",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return ERC20(_token).transfer(_to, _amount);",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "            Holders[msg.sender] += msg.value;",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_18"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 13,
          "vulnerability_code": "    function changeOwner(address addr) public onlyOwner {\n        newOwner = addr;",
          "message": "Ownable.changeOwner (patch_2.sol#11-13) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 18,
          "vulnerability_code": "    function confirmOwner() public {\n        require(msg.sender == newOwner);\n        owner = newOwner;",
          "message": "Ownable.confirmOwner (patch_2.sol#15-18) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": 46,
          "vulnerability_code": "    function initTokenBank() public {\n        owner = msg.sender;\n        MinDeposit = 1 ether;",
          "message": "TokenBank.initTokenBank (patch_2.sol#43-46) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": 50,
          "vulnerability_code": "    function() public payable {\n        deposit();",
          "message": "TokenBank.fallback (patch_2.sol#48-50) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": 68,
          "vulnerability_code": "    function withdrawTokenToHolder(\n        address _to,\n        address _token,\n        uint256 _amount\n    ) public onlyOwner returns (bool) {\n        if (Holders[_to] > 0) {\n            Holders[_to] = 0;\n            return withdrawToken(_token, _amount, _to);\n        }\n        return false;",
          "message": "TokenBank.withdrawTokenToHolder (patch_2.sol#58-68) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": 82,
          "vulnerability_code": "    function withdrawToHolder(\n        address _addr,\n        uint _wei\n    ) public onlyOwner returns (bool) {\n        if (Holders[msg.sender] > 0) {\n            if (Holders[_addr] >= _wei) {\n                _addr.transfer(_wei);\n                Holders[_addr] -= _wei;\n                return true;\n            }\n        }\n        return false;",
          "message": "TokenBank.withdrawToHolder (patch_2.sol#70-82) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;",
          "message": "Detected issues with version pragma in patch_2.sol:\n\t- pragma solidity^0.4.18 (patch_2.sol#1): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 9,
          "vulnerability_code": "    function Ownable() public {\n        owner = msg.sender;",
          "message": "Function 'Ownable.Ownable' (patch_2.sol#7-9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _token,",
          "message": "Parameter '_token' of Token.withdrawToken (patch_2.sol#28) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _amount,",
          "message": "Parameter '_amount' of Token.withdrawToken (patch_2.sol#29) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _to",
          "message": "Parameter '_to' of Token.withdrawToken (patch_2.sol#30) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _to,",
          "message": "Parameter '_to' of TokenBank.withdrawTokenToHolder (patch_2.sol#59) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _token,",
          "message": "Parameter '_token' of TokenBank.withdrawTokenToHolder (patch_2.sol#60) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _amount",
          "message": "Parameter '_amount' of TokenBank.withdrawTokenToHolder (patch_2.sol#61) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _addr,",
          "message": "Parameter '_addr' of TokenBank.withdrawToHolder (patch_2.sol#71) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _wei",
          "message": "Parameter '_wei' of TokenBank.withdrawToHolder (patch_2.sol#72) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinDeposit;",
          "message": "Variable 'TokenBank.MinDeposit' (patch_2.sol#40) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint) public Holders;",
          "message": "Variable 'TokenBank.Holders' (patch_2.sol#41) is not in mixedCase\n"
        }
      ]
    }
  }
}