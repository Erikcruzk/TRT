{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Callstack Depth Attack Vulnerability",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool sent = winner.send(winAmount);",
          "message": null
        },
        {
          "name": "Transaction-Ordering Dependence (TOD)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_6"
      ],
      "vulnerability_findings": [
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address public winner;",
          "message": "Lotto.winner (patch_13.sol#5) is never initialized. It is used in:\n\t- sendToWinner (patch_13.sol#8-18)\n"
        },
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public winAmount;",
          "message": "Lotto.winAmount (patch_13.sol#6) is never initialized. It is used in:\n\t- sendToWinner (patch_13.sol#8-18)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public winAmount;",
          "message": "Lotto.winAmount should be constant (patch_13.sol#6)\nLotto.winner should be constant (patch_13.sol#5)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": 18,
          "vulnerability_code": "    function sendToWinner() public {\n        require(!payedOut);\n\n        require(winner != address(0)); // Ensure winner address is not empty\n        require(winAmount > 0); // Ensure win amount is greater than 0\n\n        bool sent = winner.send(winAmount);\n        require(sent); // Check if send was successful\n\n        payedOut = true;",
          "message": "Lotto.sendToWinner (patch_13.sol#8-18) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": 26,
          "vulnerability_code": "    function withdrawLeftOver() public {\n        require(payedOut);\n\n        require(msg.sender != address(0)); // Ensure sender address is not empty\n        bool sent = msg.sender.send(this.balance);\n        require(sent); // Check if send was successful",
          "message": "Lotto.withdrawLeftOver (patch_13.sol#20-26) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;",
          "message": "Detected issues with version pragma in patch_13.sol:\n\t- pragma solidity^0.4.18 (patch_13.sol#1): it allows old versions\n"
        }
      ]
    }
  }
}