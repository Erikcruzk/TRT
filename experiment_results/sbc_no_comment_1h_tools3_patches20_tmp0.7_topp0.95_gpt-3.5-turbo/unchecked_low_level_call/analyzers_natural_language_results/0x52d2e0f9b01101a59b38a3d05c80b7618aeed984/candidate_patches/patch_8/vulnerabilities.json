{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_11"
      ],
      "vulnerability_findings": [
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": 22,
          "vulnerability_code": "    function withdrawEther() public {\n        owner.transfer(this.balance);",
          "message": "EtherGet.withdrawEther (patch_8.sol#20-22) sends eth to arbitrary user\n\tDangerous calls:\n\t- owner.transfer(this.balance) (patch_8.sol#21)\n"
        },
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 28,
          "vulnerability_code": "    function getTokens(uint num, address addr) public {\n        for (uint i = 0; i < num; i++) {\n            require(addr.call.value(0 wei)(), \"Call failed\");\n        }",
          "message": "EtherGet.getTokens (patch_8.sol#24-28) sends eth to arbitrary user\n\tDangerous calls:\n\t- require(bool,string)(addr.call.value(0)(),Call failed) (patch_8.sol#26)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(addr.call.value(0 wei)(), \"Call failed\");",
          "message": "EtherGet.getTokens has external calls inside a loop:\n\t- require(bool,string)(addr.call.value(0)(),Call failed) (patch_8.sol#26)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint _value) public returns (bool success);",
          "message": "Token.transfer (patch_8.sol#4) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint balance);",
          "message": "Token.balanceOf (patch_8.sol#5) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 18,
          "vulnerability_code": "    function withdrawTokens(address tokenContract) public {\n        Token tc = Token(tokenContract);\n        require(tc.transfer(owner, tc.balanceOf(this)), \"Transfer failed\");",
          "message": "EtherGet.withdrawTokens (patch_8.sol#15-18) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": 22,
          "vulnerability_code": "    function withdrawEther() public {\n        owner.transfer(this.balance);",
          "message": "EtherGet.withdrawEther (patch_8.sol#20-22) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 28,
          "vulnerability_code": "    function getTokens(uint num, address addr) public {\n        for (uint i = 0; i < num; i++) {\n            require(addr.call.value(0 wei)(), \"Call failed\");\n        }",
          "message": "EtherGet.getTokens (patch_8.sol#24-28) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_8.sol:\n\t- pragma solidity^0.4.19 (patch_8.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 28,
          "vulnerability_code": "    function getTokens(uint num, address addr) public {\n        for (uint i = 0; i < num; i++) {\n            require(addr.call.value(0 wei)(), \"Call failed\");\n        }",
          "message": "Low level call in EtherGet.getTokens (patch_8.sol#24-28):\n\t-require(bool,string)(addr.call.value(0)(),Call failed) patch_8.sol#26\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 13,
          "vulnerability_code": "    function EtherGet() public {\n        owner = msg.sender;",
          "message": "Function 'EtherGet.EtherGet' (patch_8.sol#11-13) is not in mixedCase\n"
        }
      ]
    },
    "mythril-0.23.15": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(addr.call.value(0 wei)(), \"Call failed\");",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(addr.call.value(0 wei)(), \"Call failed\");",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(tc.transfer(owner, tc.balanceOf(this)), \"Transfer failed\");",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(tc.transfer(owner, tc.balanceOf(this)), \"Transfer failed\");",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(tc.transfer(owner, tc.balanceOf(this)), \"Transfer failed\");",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        }
      ]
    }
  }
}