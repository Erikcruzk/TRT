{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_11"
      ],
      "vulnerability_findings": [
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": 31,
          "vulnerability_code": "    function withdrawEther() public {\n        owner.transfer(address(this).balance);",
          "message": "EtherGet.withdrawEther (patch_7.sol#29-31) sends eth to arbitrary user\n\tDangerous calls:\n\t- owner.transfer(address(this).balance) (patch_7.sol#30)\n"
        },
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": 41,
          "vulnerability_code": "    function getTokens(uint num, address addr) public returns(bool success) {\n        for (uint i = 0; i < num; i++) {\n            bool callSuccess = addr.call.value(0 wei)();\n            if(!callSuccess) {\n                return false;\n            }\n        }\n        return true;",
          "message": "EtherGet.getTokens (patch_7.sol#33-41) sends eth to arbitrary user\n\tDangerous calls:\n\t- callSuccess = addr.call.value(0)() (patch_7.sol#35)\n"
        },
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 27,
          "vulnerability_code": "    function withdrawTokens(address tokenContract) public returns(bool success) {\n        Token tc = Token(tokenContract);\n        uint balance = tc.balanceOf(address(this));\n        if(balance == 0) {\n            return false;\n        }\n        bool transferSuccess = tc.transfer(owner, balance);\n        if(!transferSuccess) {\n            return false;\n        }\n        return true;",
          "message": "EtherGet.withdrawTokens (patch_7.sol#16-27) uses a dangerous strict equality:\n\t- balance == 0\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "            bool callSuccess = addr.call.value(0 wei)();",
          "message": "EtherGet.getTokens has external calls inside a loop:\n\t- callSuccess = addr.call.value(0)() (patch_7.sol#35)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint _value) public returns (bool success);",
          "message": "Token.transfer (patch_7.sol#4) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint balance);",
          "message": "Token.balanceOf (patch_7.sol#6) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 27,
          "vulnerability_code": "    function withdrawTokens(address tokenContract) public returns(bool success) {\n        Token tc = Token(tokenContract);\n        uint balance = tc.balanceOf(address(this));\n        if(balance == 0) {\n            return false;\n        }\n        bool transferSuccess = tc.transfer(owner, balance);\n        if(!transferSuccess) {\n            return false;\n        }\n        return true;",
          "message": "EtherGet.withdrawTokens (patch_7.sol#16-27) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": 31,
          "vulnerability_code": "    function withdrawEther() public {\n        owner.transfer(address(this).balance);",
          "message": "EtherGet.withdrawEther (patch_7.sol#29-31) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": 41,
          "vulnerability_code": "    function getTokens(uint num, address addr) public returns(bool success) {\n        for (uint i = 0; i < num; i++) {\n            bool callSuccess = addr.call.value(0 wei)();\n            if(!callSuccess) {\n                return false;\n            }\n        }\n        return true;",
          "message": "EtherGet.getTokens (patch_7.sol#33-41) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_7.sol:\n\t- pragma solidity^0.4.19 (patch_7.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": 41,
          "vulnerability_code": "    function getTokens(uint num, address addr) public returns(bool success) {\n        for (uint i = 0; i < num; i++) {\n            bool callSuccess = addr.call.value(0 wei)();\n            if(!callSuccess) {\n                return false;\n            }\n        }\n        return true;",
          "message": "Low level call in EtherGet.getTokens (patch_7.sol#33-41):\n\t-callSuccess = addr.call.value(0)() patch_7.sol#35\n"
        }
      ]
    },
    "mythril-0.23.15": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "            bool callSuccess = addr.call.value(0 wei)();",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "            bool callSuccess = addr.call.value(0 wei)();",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint balance = tc.balanceOf(address(this));",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool transferSuccess = tc.transfer(owner, balance);",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool transferSuccess = tc.transfer(owner, balance);",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool transferSuccess = tc.transfer(owner, balance);",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool transferSuccess = tc.transfer(owner, balance);",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        }
      ]
    }
  }
}