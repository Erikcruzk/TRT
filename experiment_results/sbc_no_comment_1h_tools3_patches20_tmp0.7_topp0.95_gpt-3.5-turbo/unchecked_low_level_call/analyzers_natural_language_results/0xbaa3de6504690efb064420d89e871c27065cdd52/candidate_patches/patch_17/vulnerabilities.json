{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril-0.23.15": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(target.call.value(msg.value)(data));",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(target.call.value(msg.value)(data));",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_7"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 14,
          "vulnerability_code": "    function transferOwner(address _owner) public onlyOwner {\n        require(_owner != address(0));\n        owner = _owner;",
          "message": "Proxy.transferOwner (patch_17.sol#11-14) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 19,
          "vulnerability_code": "    function proxy(address target, bytes data) public payable {\n        require(target != address(0));\n        require(target.call.value(msg.value)(data));",
          "message": "Proxy.proxy (patch_17.sol#16-19) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": 27,
          "vulnerability_code": "    function() public payable {\n        deposit();",
          "message": "VaultProxy.fallback (patch_17.sol#25-27) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": 39,
          "vulnerability_code": "    function withdraw(uint256 amount) public onlyOwner {\n        require(amount > 0 && deposits[msg.sender] >= amount);\n        deposits[msg.sender] -= amount;\n        msg.sender.transfer(amount);",
          "message": "VaultProxy.withdraw (patch_17.sol#35-39) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;",
          "message": "Detected issues with version pragma in patch_17.sol:\n\t- pragma solidity^0.4.23 (patch_17.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 19,
          "vulnerability_code": "    function proxy(address target, bytes data) public payable {\n        require(target != address(0));\n        require(target.call.value(msg.value)(data));",
          "message": "Low level call in Proxy.proxy (patch_17.sol#16-19):\n\t-require(bool)(target.call.value(msg.value)(data)) patch_17.sol#18\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferOwner(address _owner) public onlyOwner {",
          "message": "Parameter '_owner' of Proxy.transferOwner (patch_17.sol#11) is not in mixedCase\n"
        }
      ]
    }
  }
}