{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(token.call(bytes4(keccak256(\"transfer(address,uint256)\")), to, amount));",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_addr.call.value(_wei)());",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "            holders[_addr] -= _wei;",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "            holders[_addr] -= _wei;",
          "message": "The arithmetic operator can underflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "            holders[_addr] -= _wei;",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(token.call(bytes4(keccak256(\"transfer(address,uint256)\")), to, amount));",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_15"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": 61,
          "vulnerability_code": "    function withdrawToHolder(address _addr, uint _wei) public onlyOwner payable {\n        if (holders[_addr] > 0) {\n            require(_addr.call.value(_wei)());\n            holders[_addr] -= _wei;\n        }",
          "message": "Reentrancy in TokenBank.withdrawToHolder (patch_10.sol#56-61):\n\tExternal calls:\n\t- require(bool)(_addr.call.value(_wei)()) (patch_10.sol#58)\n\tState variables written after the call(s):\n\t- holders (patch_10.sol#59)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 9,
          "vulnerability_code": "    function changeOwner(address addr) public onlyOwner {\n        newOwner = addr;",
          "message": "Ownable.changeOwner (patch_10.sol#7-9) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 16,
          "vulnerability_code": "    function confirmOwner() public {\n        if (msg.sender == newOwner) {\n            owner = newOwner;\n            newOwner = address(0);\n        }",
          "message": "Ownable.confirmOwner (patch_10.sol#11-16) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": 37,
          "vulnerability_code": "    function initTokenBank() public {\n        owner = msg.sender;\n        minDeposit = 1 ether;",
          "message": "TokenBank.initTokenBank (patch_10.sol#34-37) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": 41,
          "vulnerability_code": "    function() public payable {\n        deposit();",
          "message": "TokenBank.fallback (patch_10.sol#39-41) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": 54,
          "vulnerability_code": "    function withdrawTokenToHolder(address _to, address _token, uint _amount) public onlyOwner {\n        if (holders[_to] > 0) {\n            holders[_to] = 0;\n            withdrawToken(_token, _amount, _to);     \n        }",
          "message": "TokenBank.withdrawTokenToHolder (patch_10.sol#49-54) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": 61,
          "vulnerability_code": "    function withdrawToHolder(address _addr, uint _wei) public onlyOwner payable {\n        if (holders[_addr] > 0) {\n            require(_addr.call.value(_wei)());\n            holders[_addr] -= _wei;\n        }",
          "message": "TokenBank.withdrawToHolder (patch_10.sol#56-61) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_10.sol:\n\t- pragma solidity^0.4.19 (patch_10.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": 27,
          "vulnerability_code": "    function withdrawToken(address token, uint256 amount, address to) public onlyOwner {\n        require(token.call(bytes4(keccak256(\"transfer(address,uint256)\")), to, amount));",
          "message": "Low level call in Token.withdrawToken (patch_10.sol#25-27):\n\t-require(bool)(token.call(bytes4(keccak256()(transfer(address,uint256))),to,amount)) patch_10.sol#26\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": 61,
          "vulnerability_code": "    function withdrawToHolder(address _addr, uint _wei) public onlyOwner payable {\n        if (holders[_addr] > 0) {\n            require(_addr.call.value(_wei)());\n            holders[_addr] -= _wei;\n        }",
          "message": "Low level call in TokenBank.withdrawToHolder (patch_10.sol#56-61):\n\t-require(bool)(_addr.call.value(_wei)()) patch_10.sol#58\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawTokenToHolder(address _to, address _token, uint _amount) public onlyOwner {",
          "message": "Parameter '_to' of TokenBank.withdrawTokenToHolder (patch_10.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawTokenToHolder(address _to, address _token, uint _amount) public onlyOwner {",
          "message": "Parameter '_token' of TokenBank.withdrawTokenToHolder (patch_10.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawTokenToHolder(address _to, address _token, uint _amount) public onlyOwner {",
          "message": "Parameter '_amount' of TokenBank.withdrawTokenToHolder (patch_10.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawToHolder(address _addr, uint _wei) public onlyOwner payable {",
          "message": "Parameter '_addr' of TokenBank.withdrawToHolder (patch_10.sol#56) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawToHolder(address _addr, uint _wei) public onlyOwner payable {",
          "message": "Parameter '_wei' of TokenBank.withdrawToHolder (patch_10.sol#56) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "            holders[msg.sender] += msg.value;",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "            holders[_addr] -= _wei;",
          "message": null
        },
        {
          "name": "Re-Entrancy Vulnerability",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_addr.call.value(_wei)());",
          "message": null
        }
      ]
    }
  }
}