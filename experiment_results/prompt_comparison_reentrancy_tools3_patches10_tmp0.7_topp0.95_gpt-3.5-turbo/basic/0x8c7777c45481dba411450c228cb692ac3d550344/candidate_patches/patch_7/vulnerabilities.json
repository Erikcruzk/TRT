{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_12"
      ],
      "vulnerability_findings": [
        {
          "name": "constable-states",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinDeposit = 1 ether;",
          "message": "ETH_VAULT.MinDeposit should be constant (patch_7.sol#8)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": 18,
          "vulnerability_code": "    function deposit() public payable {\n        require(msg.value > MinDeposit, \"Deposit amount must be greater than minimum deposit\");\n        balances[msg.sender] += msg.value;\n        TransferLog.addMessage(msg.sender, msg.value, \"Deposit\");",
          "message": "ETH_VAULT.deposit (patch_7.sol#14-18) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": 25,
          "vulnerability_code": "    function cashOut(uint _am) public payable {\n        require(_am <= balances[msg.sender], \"Insufficient balance\");\n        balances[msg.sender] -= _am;\n        TransferLog.addMessage(msg.sender, _am, \"CashOut\");\n        msg.sender.transfer(_am);",
          "message": "ETH_VAULT.cashOut (patch_7.sol#20-25) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": 44,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string memory _data) public {\n        Message memory newMessage = Message(_adr, _data, _val, now);\n        history.push(newMessage);",
          "message": "Log.addMessage (patch_7.sol#41-44) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;",
          "message": "Detected issues with version pragma in patch_7.sol:\n\t- pragma solidity^0.5.0 (patch_7.sol#1): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 29,
          "vulnerability_code": "contract ETH_VAULT {\n    mapping(address => uint) public balances;\n\n    Log TransferLog;\n\n    uint public MinDeposit = 1 ether;\n\n    constructor(address _log) public {\n        TransferLog = new Log();\n    }\n\n    function deposit() public payable {\n        require(msg.value > MinDeposit, \"Deposit amount must be greater than minimum deposit\");\n        balances[msg.sender] += msg.value;\n        TransferLog.addMessage(msg.sender, msg.value, \"Deposit\");\n    }\n\n    function cashOut(uint _am) public payable {\n        require(_am <= balances[msg.sender], \"Insufficient balance\");\n        balances[msg.sender] -= _am;\n        TransferLog.addMessage(msg.sender, _am, \"CashOut\");\n        msg.sender.transfer(_am);\n    }\n\n    function() external payable {}\n",
          "message": "Contract 'ETH_VAULT' (patch_7.sol#3-29) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function cashOut(uint _am) public payable {",
          "message": "Parameter '_am' of ETH_VAULT.cashOut (patch_7.sol#20) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Log TransferLog;",
          "message": "Variable 'ETH_VAULT.TransferLog' (patch_7.sol#6) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinDeposit = 1 ether;",
          "message": "Variable 'ETH_VAULT.MinDeposit' (patch_7.sol#8) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string memory _data) public {",
          "message": "Parameter '_adr' of Log.addMessage (patch_7.sol#41) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string memory _data) public {",
          "message": "Parameter '_val' of Log.addMessage (patch_7.sol#41) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string memory _data) public {",
          "message": "Parameter '_data' of Log.addMessage (patch_7.sol#41) is not in mixedCase\n"
        }
      ]
    },
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    }
  }
}