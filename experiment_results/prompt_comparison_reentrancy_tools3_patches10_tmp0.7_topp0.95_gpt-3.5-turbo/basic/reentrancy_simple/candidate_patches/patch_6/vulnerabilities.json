{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (msg.sender.call.value(balanceToWithdraw)()) {",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "            locked = false;",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "            locked = false;",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "            userBalance[msg.sender] = balanceToWithdraw;",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "        userBalance[msg.sender] += msg.value;",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_6"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 27,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!locked);\n        locked = true;\n        uint balanceToWithdraw = userBalance[msg.sender];\n        userBalance[msg.sender] = 0;\n        if (msg.sender.call.value(balanceToWithdraw)()) {\n            locked = false;\n        } else {\n            userBalance[msg.sender] = balanceToWithdraw;\n            locked = false;\n            revert();\n        }",
          "message": "Reentrancy in Reentrance.withdrawBalance (patch_6.sol#15-27):\n\tExternal calls:\n\t- msg.sender.call.value(balanceToWithdraw)() (patch_6.sol#20-26)\n\tState variables written after the call(s):\n\t- locked (patch_6.sol#21)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 9,
          "vulnerability_code": "    function getBalance(address u) public constant returns (uint) {\n        return userBalance[u];",
          "message": "Reentrance.getBalance (patch_6.sol#7-9) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 13,
          "vulnerability_code": "    function addToBalance() public payable {\n        userBalance[msg.sender] += msg.value;",
          "message": "Reentrance.addToBalance (patch_6.sol#11-13) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 27,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!locked);\n        locked = true;\n        uint balanceToWithdraw = userBalance[msg.sender];\n        userBalance[msg.sender] = 0;\n        if (msg.sender.call.value(balanceToWithdraw)()) {\n            locked = false;\n        } else {\n            userBalance[msg.sender] = balanceToWithdraw;\n            locked = false;\n            revert();\n        }",
          "message": "Reentrance.withdrawBalance (patch_6.sol#15-27) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.15;",
          "message": "Detected issues with version pragma in patch_6.sol:\n\t- pragma solidity^0.4.15 (patch_6.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 27,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!locked);\n        locked = true;\n        uint balanceToWithdraw = userBalance[msg.sender];\n        userBalance[msg.sender] = 0;\n        if (msg.sender.call.value(balanceToWithdraw)()) {\n            locked = false;\n        } else {\n            userBalance[msg.sender] = balanceToWithdraw;\n            locked = false;\n            revert();\n        }",
          "message": "Low level call in Reentrance.withdrawBalance (patch_6.sol#15-27):\n\t-msg.sender.call.value(balanceToWithdraw)() patch_6.sol#20-26\n"
        }
      ]
    }
  }
}