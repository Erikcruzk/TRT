{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_8"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 12,
          "vulnerability_code": "    function donate(address _to) public payable {\n        require(!locked);\n        locked = true;\n        balances[_to] += msg.value;\n        locked = false;",
          "message": "Reentrance.donate (patch_9.sol#7-12) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": 16,
          "vulnerability_code": "    function balanceOf(address _who) public view returns (uint balance) {\n        return balances[_who];",
          "message": "Reentrance.balanceOf (patch_9.sol#14-16) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": 26,
          "vulnerability_code": "    function withdraw(uint _amount) public {\n        require(!locked);\n        locked = true;\n        if (balances[msg.sender] >= _amount) {\n            msg.sender.transfer(_amount);\n            balances[msg.sender] -= _amount;\n        }\n        locked = false;",
          "message": "Reentrance.withdraw (patch_9.sol#18-26) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() public payable {}",
          "message": "Reentrance.fallback (patch_9.sol#28) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;",
          "message": "Detected issues with version pragma in patch_9.sol:\n\t- pragma solidity^0.4.18 (patch_9.sol#1): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function donate(address _to) public payable {",
          "message": "Parameter '_to' of Reentrance.donate (patch_9.sol#7) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _who) public view returns (uint balance) {",
          "message": "Parameter '_who' of Reentrance.balanceOf (patch_9.sol#14) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(uint _amount) public {",
          "message": "Parameter '_amount' of Reentrance.withdraw (patch_9.sol#18) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    }
  }
}