{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_15"
      ],
      "vulnerability_findings": [
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Message memory lastMsg;",
          "message": "lastMsg in Log.addMessage (patch_1.sol#51) is a local variable never initialiazed\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 22,
          "vulnerability_code": "    function deposit() public payable {\n        if (msg.value > minDeposit) {\n            balances[msg.sender] += msg.value;\n            transferLog.addMessage(msg.sender, msg.value, \"Deposit\");\n            lastBlock = block.number;\n        }",
          "message": "Reentrancy in ETH_FUND.deposit (patch_1.sol#16-22):\n\tExternal calls:\n\t- transferLog.addMessage(msg.sender,msg.value,Deposit) (patch_1.sol#19)\n\tState variables written after the call(s):\n\t- lastBlock (patch_1.sol#20)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public minDeposit = 1 ether;",
          "message": "ETH_FUND.minDeposit should be constant (patch_1.sol#6)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 22,
          "vulnerability_code": "    function deposit() public payable {\n        if (msg.value > minDeposit) {\n            balances[msg.sender] += msg.value;\n            transferLog.addMessage(msg.sender, msg.value, \"Deposit\");\n            lastBlock = block.number;\n        }",
          "message": "ETH_FUND.deposit (patch_1.sol#16-22) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 31,
          "vulnerability_code": "    function cashOut(uint _am) public {\n        if (_am <= balances[msg.sender] && block.number > lastBlock) {\n            if (msg.sender.send(_am)) {\n                balances[msg.sender] -= _am;\n                transferLog.addMessage(msg.sender, _am, \"CashOut\");\n            }\n        }",
          "message": "ETH_FUND.cashOut (patch_1.sol#24-31) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() public payable {}",
          "message": "ETH_FUND.fallback (patch_1.sol#33) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": 37,
          "vulnerability_code": "    function getBalance() public view returns (uint) {\n        return address(this).balance;",
          "message": "ETH_FUND.getBalance (patch_1.sol#35-37) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": 57,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {\n        Message memory lastMsg;\n        lastMsg.sender = _adr;\n        lastMsg.time = now;\n        lastMsg.val = _val;\n        lastMsg.data = _data;\n        history.push(lastMsg);",
          "message": "Log.addMessage (patch_1.sol#50-57) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_1.sol:\n\t- pragma solidity^0.4.19 (patch_1.sol#1): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 38,
          "vulnerability_code": "contract ETH_FUND {\n    mapping(address => uint) public balances;\n\n    uint public minDeposit = 1 ether;\n\n    Log public transferLog;\n\n    uint public lastBlock;\n\n    function ETH_FUND(address _log) public {\n        transferLog = new Log();\n    }\n\n    function deposit() public payable {\n        if (msg.value > minDeposit) {\n            balances[msg.sender] += msg.value;\n            transferLog.addMessage(msg.sender, msg.value, \"Deposit\");\n            lastBlock = block.number;\n        }\n    }\n\n    function cashOut(uint _am) public {\n        if (_am <= balances[msg.sender] && block.number > lastBlock) {\n            if (msg.sender.send(_am)) {\n                balances[msg.sender] -= _am;\n                transferLog.addMessage(msg.sender, _am, \"CashOut\");\n            }\n        }\n    }\n\n    function() public payable {}\n\n    function getBalance() public view returns (uint) {\n        return address(this).balance;\n    }",
          "message": "Contract 'ETH_FUND' (patch_1.sol#3-38) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": 14,
          "vulnerability_code": "    function ETH_FUND(address _log) public {\n        transferLog = new Log();",
          "message": "Function 'ETH_FUND.ETH_FUND' (patch_1.sol#12-14) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function cashOut(uint _am) public {",
          "message": "Parameter '_am' of ETH_FUND.cashOut (patch_1.sol#24) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of Log.addMessage (patch_1.sol#50) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of Log.addMessage (patch_1.sol#50) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of Log.addMessage (patch_1.sol#50) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}