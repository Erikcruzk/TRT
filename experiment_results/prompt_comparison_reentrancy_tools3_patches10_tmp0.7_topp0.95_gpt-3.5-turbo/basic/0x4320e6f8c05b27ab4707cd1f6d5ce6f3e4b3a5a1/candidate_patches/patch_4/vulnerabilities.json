{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_18"
      ],
      "vulnerability_findings": [
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool initialized;",
          "message": "ACCURAL_DEPOSIT.initialized (patch_4.sol#10) is never initialized. It is used in:\n\t- setMinSum (patch_4.sol#16-19)\n\t- collect (patch_4.sol#26-35)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool initialized;",
          "message": "ACCURAL_DEPOSIT.initialized should be constant (patch_4.sol#10)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 19,
          "vulnerability_code": "    function setMinSum(uint _val) public {\n        require(!initialized);\n        MinSum = _val;",
          "message": "ACCURAL_DEPOSIT.setMinSum (patch_4.sol#16-19) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": 35,
          "vulnerability_code": "    function collect(uint _am) public {\n        require(initialized);\n        require(balances[msg.sender] >= MinSum && balances[msg.sender] >= _am);\n        balances[msg.sender] -= _am;\n        if (msg.sender.call.value(_am)()) {\n            Log.addMessage(msg.sender, _am, \"Collect\");\n        } else {\n            balances[msg.sender] += _am;\n        }",
          "message": "ACCURAL_DEPOSIT.collect (patch_4.sol#26-35) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": 39,
          "vulnerability_code": "    function() public payable {\n        deposit();",
          "message": "ACCURAL_DEPOSIT.fallback (patch_4.sol#37-39) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": 60,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {\n        Message memory newMessage = Message({\n            sender: _adr,\n            time: now,\n            val: _val,\n            data: _data\n        });\n        history.push(newMessage);",
          "message": "LogFile.addMessage (patch_4.sol#52-60) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_4.sol:\n\t- pragma solidity^0.4.19 (patch_4.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": 35,
          "vulnerability_code": "    function collect(uint _am) public {\n        require(initialized);\n        require(balances[msg.sender] >= MinSum && balances[msg.sender] >= _am);\n        balances[msg.sender] -= _am;\n        if (msg.sender.call.value(_am)()) {\n            Log.addMessage(msg.sender, _am, \"Collect\");\n        } else {\n            balances[msg.sender] += _am;\n        }",
          "message": "Low level call in ACCURAL_DEPOSIT.collect (patch_4.sol#26-35):\n\t-msg.sender.call.value(_am)() patch_4.sol#30-34\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 40,
          "vulnerability_code": "contract ACCURAL_DEPOSIT {\n    mapping(address => uint256) public balances;\n\n    uint public MinSum = 1 ether;\n\n    LogFile Log;\n\n    bool initialized;\n\n    function ACCURAL_DEPOSIT(address _log) public {\n        Log = LogFile(_log);\n    }\n\n    function setMinSum(uint _val) public {\n        require(!initialized);\n        MinSum = _val;\n    }\n\n    function deposit() public payable {\n        balances[msg.sender] += msg.value;\n        Log.addMessage(msg.sender, msg.value, \"Put\");\n    }\n\n    function collect(uint _am) public {\n        require(initialized);\n        require(balances[msg.sender] >= MinSum && balances[msg.sender] >= _am);\n        balances[msg.sender] -= _am;\n        if (msg.sender.call.value(_am)()) {\n            Log.addMessage(msg.sender, _am, \"Collect\");\n        } else {\n            balances[msg.sender] += _am;\n        }\n    }\n\n    function() public payable {\n        deposit();\n    }",
          "message": "Contract 'ACCURAL_DEPOSIT' (patch_4.sol#3-40) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": 14,
          "vulnerability_code": "    function ACCURAL_DEPOSIT(address _log) public {\n        Log = LogFile(_log);",
          "message": "Function 'ACCURAL_DEPOSIT.ACCURAL_DEPOSIT' (patch_4.sol#12-14) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ACCURAL_DEPOSIT(address _log) public {",
          "message": "Parameter '_log' of ACCURAL_DEPOSIT.ACCURAL_DEPOSIT (patch_4.sol#12) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMinSum(uint _val) public {",
          "message": "Parameter '_val' of ACCURAL_DEPOSIT.setMinSum (patch_4.sol#16) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function collect(uint _am) public {",
          "message": "Parameter '_am' of ACCURAL_DEPOSIT.collect (patch_4.sol#26) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum = 1 ether;",
          "message": "Variable 'ACCURAL_DEPOSIT.MinSum' (patch_4.sol#6) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    LogFile Log;",
          "message": "Variable 'ACCURAL_DEPOSIT.Log' (patch_4.sol#8) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of LogFile.addMessage (patch_4.sol#52) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of LogFile.addMessage (patch_4.sol#52) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of LogFile.addMessage (patch_4.sol#52) is not in mixedCase\n"
        }
      ]
    }
  }
}