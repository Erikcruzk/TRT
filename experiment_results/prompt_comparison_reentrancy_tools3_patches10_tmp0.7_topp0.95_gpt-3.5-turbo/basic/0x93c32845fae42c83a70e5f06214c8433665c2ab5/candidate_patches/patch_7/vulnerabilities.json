{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_19"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": 29,
          "vulnerability_code": "    function Collect(uint _am) public {\n        require(Acc[msg.sender].balance >= MinSum && Acc[msg.sender].balance >= _am && now > Acc[msg.sender].unlockTime);\n        if (msg.sender.call.value(_am)()) {\n            Acc[msg.sender].balance -= _am;\n            LogFile.AddMessage(msg.sender, _am, \"Collect\");\n        }",
          "message": "Reentrancy in X_WALLET.Collect (patch_7.sol#23-29):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (patch_7.sol#25-28)\n\tState variables written after the call(s):\n\t- Acc (patch_7.sol#26)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum = 1 ether;",
          "message": "X_WALLET.MinSum should be constant (patch_7.sol#11)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": 29,
          "vulnerability_code": "    function Collect(uint _am) public {\n        require(Acc[msg.sender].balance >= MinSum && Acc[msg.sender].balance >= _am && now > Acc[msg.sender].unlockTime);\n        if (msg.sender.call.value(_am)()) {\n            Acc[msg.sender].balance -= _am;\n            LogFile.AddMessage(msg.sender, _am, \"Collect\");\n        }",
          "message": "X_WALLET.Collect (patch_7.sol#23-29) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": 33,
          "vulnerability_code": "    function() public payable {\n        Put(0);",
          "message": "X_WALLET.fallback (patch_7.sol#31-33) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": 49,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        Message memory lastMsg = Message(_adr, _data, _val, now);\n        History.push(lastMsg);",
          "message": "Log.AddMessage (patch_7.sol#46-49) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": 29,
          "vulnerability_code": "    function Collect(uint _am) public {\n        require(Acc[msg.sender].balance >= MinSum && Acc[msg.sender].balance >= _am && now > Acc[msg.sender].unlockTime);\n        if (msg.sender.call.value(_am)()) {\n            Acc[msg.sender].balance -= _am;\n            LogFile.AddMessage(msg.sender, _am, \"Collect\");\n        }",
          "message": "Low level call in X_WALLET.Collect (patch_7.sol#23-29):\n\t-msg.sender.call.value(_am)() patch_7.sol#25-28\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 34,
          "vulnerability_code": "contract X_WALLET {\n    struct Holder {\n        uint unlockTime;\n        uint balance;\n    }\n\n    mapping(address => Holder) public Acc;\n    Log LogFile;\n    uint public MinSum = 1 ether;\n\n    constructor(address log) public {\n        LogFile = Log(log);\n    }\n\n    function Put(uint _unlockTime) public payable {\n        Acc[msg.sender].balance += msg.value;\n        Acc[msg.sender].unlockTime = _unlockTime > now ? _unlockTime : now;\n        LogFile.AddMessage(msg.sender, msg.value, \"Put\");\n    }\n\n    function Collect(uint _am) public {\n        require(Acc[msg.sender].balance >= MinSum && Acc[msg.sender].balance >= _am && now > Acc[msg.sender].unlockTime);\n        if (msg.sender.call.value(_am)()) {\n            Acc[msg.sender].balance -= _am;\n            LogFile.AddMessage(msg.sender, _am, \"Collect\");\n        }\n    }\n\n    function() public payable {\n        Put(0);\n    }",
          "message": "Contract 'X_WALLET' (patch_7.sol#3-34) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 21,
          "vulnerability_code": "    function Put(uint _unlockTime) public payable {\n        Acc[msg.sender].balance += msg.value;\n        Acc[msg.sender].unlockTime = _unlockTime > now ? _unlockTime : now;\n        LogFile.AddMessage(msg.sender, msg.value, \"Put\");",
          "message": "Function 'X_WALLET.Put' (patch_7.sol#17-21) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Put(uint _unlockTime) public payable {",
          "message": "Parameter '_unlockTime' of X_WALLET.Put (patch_7.sol#17) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": 29,
          "vulnerability_code": "    function Collect(uint _am) public {\n        require(Acc[msg.sender].balance >= MinSum && Acc[msg.sender].balance >= _am && now > Acc[msg.sender].unlockTime);\n        if (msg.sender.call.value(_am)()) {\n            Acc[msg.sender].balance -= _am;\n            LogFile.AddMessage(msg.sender, _am, \"Collect\");\n        }",
          "message": "Function 'X_WALLET.Collect' (patch_7.sol#23-29) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Collect(uint _am) public {",
          "message": "Parameter '_am' of X_WALLET.Collect (patch_7.sol#23) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => Holder) public Acc;",
          "message": "Variable 'X_WALLET.Acc' (patch_7.sol#9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Log LogFile;",
          "message": "Variable 'X_WALLET.LogFile' (patch_7.sol#10) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum = 1 ether;",
          "message": "Variable 'X_WALLET.MinSum' (patch_7.sol#11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": 49,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        Message memory lastMsg = Message(_adr, _data, _val, now);\n        History.push(lastMsg);",
          "message": "Function 'Log.AddMessage' (patch_7.sol#46-49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of Log.AddMessage (patch_7.sol#46) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of Log.AddMessage (patch_7.sol#46) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of Log.AddMessage (patch_7.sol#46) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": "Variable 'Log.History' (patch_7.sol#44) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    }
  }
}