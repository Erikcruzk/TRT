{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_13"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": 36,
          "vulnerability_code": "    function collect(uint _am) public {\n        Holder storage account = acc[msg.sender];\n        if (\n            account.balance >= minSum && account.balance >= _am && now > account.unlockTime\n        ) {\n            if (msg.sender.call.value(_am)()) {\n                account.balance -= _am;\n                logFile.addMessage(msg.sender, _am, \"Collect\");\n            }\n        }",
          "message": "Reentrancy in X_Wallet.collect (patch_1.sol#26-36):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (patch_1.sol#31-34)\n\tState variables written after the call(s):\n\t- acc (patch_1.sol#32)\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Message memory lastMsg;",
          "message": "lastMsg in Log.addMessage (patch_1.sol#54) is a local variable never initialiazed\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public minSum = 1 ether;",
          "message": "X_Wallet.minSum should be constant (patch_1.sol#13)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": 36,
          "vulnerability_code": "    function collect(uint _am) public {\n        Holder storage account = acc[msg.sender];\n        if (\n            account.balance >= minSum && account.balance >= _am && now > account.unlockTime\n        ) {\n            if (msg.sender.call.value(_am)()) {\n                account.balance -= _am;\n                logFile.addMessage(msg.sender, _am, \"Collect\");\n            }\n        }",
          "message": "X_Wallet.collect (patch_1.sol#26-36) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": 40,
          "vulnerability_code": "    function() public payable {\n        put(0);",
          "message": "X_Wallet.fallback (patch_1.sol#38-40) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": 60,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {\n        Message memory lastMsg;\n        lastMsg.sender = _adr;\n        lastMsg.time = now;\n        lastMsg.val = _val;\n        lastMsg.data = _data;\n        history.push(lastMsg);",
          "message": "Log.addMessage (patch_1.sol#53-60) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": 36,
          "vulnerability_code": "    function collect(uint _am) public {\n        Holder storage account = acc[msg.sender];\n        if (\n            account.balance >= minSum && account.balance >= _am && now > account.unlockTime\n        ) {\n            if (msg.sender.call.value(_am)()) {\n                account.balance -= _am;\n                logFile.addMessage(msg.sender, _am, \"Collect\");\n            }\n        }",
          "message": "Low level call in X_Wallet.collect (patch_1.sol#26-36):\n\t-msg.sender.call.value(_am)() patch_1.sol#31-34\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 41,
          "vulnerability_code": "contract X_Wallet {\n    struct Holder {\n        uint unlockTime;\n        uint balance;\n    }\n\n    mapping(address => Holder) public acc;\n\n    Log logFile;\n\n    uint public minSum = 1 ether;\n\n    constructor(address log) public {\n        logFile = Log(log);\n    }\n\n    function put(uint _unlockTime) public payable {\n        Holder storage account = acc[msg.sender];\n        account.balance += msg.value;\n        account.unlockTime = _unlockTime > now ? _unlockTime : now;\n        logFile.addMessage(msg.sender, msg.value, \"Put\");\n    }\n\n    function collect(uint _am) public {\n        Holder storage account = acc[msg.sender];\n        if (\n            account.balance >= minSum && account.balance >= _am && now > account.unlockTime\n        ) {\n            if (msg.sender.call.value(_am)()) {\n                account.balance -= _am;\n                logFile.addMessage(msg.sender, _am, \"Collect\");\n            }\n        }\n    }\n\n    function() public payable {\n        put(0);\n    }",
          "message": "Contract 'X_Wallet' (patch_1.sol#3-41) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function put(uint _unlockTime) public payable {",
          "message": "Parameter '_unlockTime' of X_Wallet.put (patch_1.sol#19) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function collect(uint _am) public {",
          "message": "Parameter '_am' of X_Wallet.collect (patch_1.sol#26) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of Log.addMessage (patch_1.sol#53) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of Log.addMessage (patch_1.sol#53) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of Log.addMessage (patch_1.sol#53) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    }
  }
}