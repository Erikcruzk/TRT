{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_25"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 24,
          "vulnerability_code": "    function SetMinSum(uint _val) public {\n        require(!Acc[msg.sender].initialized);\n        MinSum = _val;",
          "message": "PENNY_BY_PENNY.SetMinSum (patch_0.sol#21-24) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": 29,
          "vulnerability_code": "    function SetLogFile(address _log) public {\n        require(!Acc[msg.sender].initialized);\n        Log = LogFile(_log);",
          "message": "PENNY_BY_PENNY.SetLogFile (patch_0.sol#26-29) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": 33,
          "vulnerability_code": "    function Initialized() public {\n        Acc[msg.sender].initialized = true;",
          "message": "PENNY_BY_PENNY.Initialized (patch_0.sol#31-33) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": 48,
          "vulnerability_code": "    function Collect(uint _am) public onlyInitialized {\n        var acc = Acc[msg.sender];\n        require(acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime);\n        acc.balance -= _am;\n        Log.AddMessage(msg.sender, _am, \"Collect\");\n        msg.sender.transfer(_am);",
          "message": "PENNY_BY_PENNY.Collect (patch_0.sol#42-48) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": 52,
          "vulnerability_code": "    function() public payable {\n        Put(0);",
          "message": "PENNY_BY_PENNY.fallback (patch_0.sol#50-52) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": 73,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        Message memory lastMsg = Message({\n            Sender: _adr,\n            Time: now,\n            Val: _val,\n            Data: _data\n        });\n        History.push(lastMsg);",
          "message": "LogFile.AddMessage (patch_0.sol#65-73) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_0.sol:\n\t- pragma solidity^0.4.19 (patch_0.sol#1): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 53,
          "vulnerability_code": "contract PENNY_BY_PENNY {\n    struct Holder {\n        uint unlockTime;\n        uint balance;\n        bool initialized;\n    }\n\n    mapping(address => Holder) public Acc;\n\n    uint public MinSum;\n\n    LogFile Log;\n\n    modifier onlyInitialized {\n        require(Acc[msg.sender].initialized);\n        _;\n    }\n\n    function SetMinSum(uint _val) public {\n        require(!Acc[msg.sender].initialized);\n        MinSum = _val;\n    }\n\n    function SetLogFile(address _log) public {\n        require(!Acc[msg.sender].initialized);\n        Log = LogFile(_log);\n    }\n\n    function Initialized() public {\n        Acc[msg.sender].initialized = true;\n    }\n\n    function Put(uint _lockTime) public payable onlyInitialized {\n        var acc = Acc[msg.sender];\n        acc.balance += msg.value;\n        if (now + _lockTime > acc.unlockTime) acc.unlockTime = now + _lockTime;\n        Log.AddMessage(msg.sender, msg.value, \"Put\");\n    }\n\n    function Collect(uint _am) public onlyInitialized {\n        var acc = Acc[msg.sender];\n        require(acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime);\n        acc.balance -= _am;\n        Log.AddMessage(msg.sender, _am, \"Collect\");\n        msg.sender.transfer(_am);\n    }\n\n    function() public payable {\n        Put(0);\n    }",
          "message": "Contract 'PENNY_BY_PENNY' (patch_0.sol#3-53) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 24,
          "vulnerability_code": "    function SetMinSum(uint _val) public {\n        require(!Acc[msg.sender].initialized);\n        MinSum = _val;",
          "message": "Function 'PENNY_BY_PENNY.SetMinSum' (patch_0.sol#21-24) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function SetMinSum(uint _val) public {",
          "message": "Parameter '_val' of PENNY_BY_PENNY.SetMinSum (patch_0.sol#21) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": 29,
          "vulnerability_code": "    function SetLogFile(address _log) public {\n        require(!Acc[msg.sender].initialized);\n        Log = LogFile(_log);",
          "message": "Function 'PENNY_BY_PENNY.SetLogFile' (patch_0.sol#26-29) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function SetLogFile(address _log) public {",
          "message": "Parameter '_log' of PENNY_BY_PENNY.SetLogFile (patch_0.sol#26) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": 33,
          "vulnerability_code": "    function Initialized() public {\n        Acc[msg.sender].initialized = true;",
          "message": "Function 'PENNY_BY_PENNY.Initialized' (patch_0.sol#31-33) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": 40,
          "vulnerability_code": "    function Put(uint _lockTime) public payable onlyInitialized {\n        var acc = Acc[msg.sender];\n        acc.balance += msg.value;\n        if (now + _lockTime > acc.unlockTime) acc.unlockTime = now + _lockTime;\n        Log.AddMessage(msg.sender, msg.value, \"Put\");",
          "message": "Function 'PENNY_BY_PENNY.Put' (patch_0.sol#35-40) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Put(uint _lockTime) public payable onlyInitialized {",
          "message": "Parameter '_lockTime' of PENNY_BY_PENNY.Put (patch_0.sol#35) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": 48,
          "vulnerability_code": "    function Collect(uint _am) public onlyInitialized {\n        var acc = Acc[msg.sender];\n        require(acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime);\n        acc.balance -= _am;\n        Log.AddMessage(msg.sender, _am, \"Collect\");\n        msg.sender.transfer(_am);",
          "message": "Function 'PENNY_BY_PENNY.Collect' (patch_0.sol#42-48) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Collect(uint _am) public onlyInitialized {",
          "message": "Parameter '_am' of PENNY_BY_PENNY.Collect (patch_0.sol#42) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => Holder) public Acc;",
          "message": "Variable 'PENNY_BY_PENNY.Acc' (patch_0.sol#10) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum;",
          "message": "Variable 'PENNY_BY_PENNY.MinSum' (patch_0.sol#12) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "    LogFile Log;",
          "message": "Variable 'PENNY_BY_PENNY.Log' (patch_0.sol#14) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": 73,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        Message memory lastMsg = Message({\n            Sender: _adr,\n            Time: now,\n            Val: _val,\n            Data: _data\n        });\n        History.push(lastMsg);",
          "message": "Function 'LogFile.AddMessage' (patch_0.sol#65-73) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of LogFile.AddMessage (patch_0.sol#65) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of LogFile.AddMessage (patch_0.sol#65) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of LogFile.AddMessage (patch_0.sol#65) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": "Variable 'LogFile.History' (patch_0.sol#63) is not in mixedCase\n"
        }
      ]
    }
  }
}