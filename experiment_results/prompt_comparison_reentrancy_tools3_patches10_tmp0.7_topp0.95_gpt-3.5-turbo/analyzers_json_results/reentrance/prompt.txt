/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.18;

contract Reentrance {
    mapping(address => uint) public balances;

    function donate(address _to) public payable {
        balances[_to] += msg.value;
    }

    function balanceOf(address _who) public view returns (uint balance) {
        return balances[_who];
    }

    function withdraw(uint _amount) public {
        if (balances[msg.sender] >= _amount) {
            if (msg.sender.call.value(_amount)()) {
                _amount;
            }
            balances[msg.sender] -= _amount;
        }
    }

    function() public payable {}
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.
{
  "slither": {
    "successfull_analysis": true,
    "errors": [
      "EXIT_CODE_10"
    ],
    "vulnerability_findings": [
      {
        "name": "reentrancy",
        "vulnerability_from_line": 14,
        "vulnerability_to_line": 21,
        "vulnerability_code": "    function withdraw(uint _amount) public {\n        if (balances[msg.sender] >= _amount) {\n            if (msg.sender.call.value(_amount)()) {\n                _amount;\n            }\n            balances[msg.sender] -= _amount;\n        }",
        "message": "Reentrancy in Reentrance.withdraw (reentrance.sol#14-21):\n\tExternal calls:\n\t- msg.sender.call.value(_amount)() (reentrance.sol#16-18)\n\tState variables written after the call(s):\n\t- balances (reentrance.sol#19)\n"
      }
    ]
  },
  "oyente": {
    "successfull_analysis": true,
    "errors": [],
    "vulnerability_findings": [
      {
        "name": "reentrancy",
        "vulnerability_from_line": 16,
        "vulnerability_to_line": null,
        "vulnerability_code": "            if (msg.sender.call.value(_amount)()) {",
        "message": null
      }
    ]
  }
}

/// Repaired Solidity Smart Contract