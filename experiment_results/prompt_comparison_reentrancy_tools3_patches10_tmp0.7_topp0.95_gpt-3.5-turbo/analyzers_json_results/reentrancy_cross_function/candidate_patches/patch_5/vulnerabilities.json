{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_7"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": 22,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!locked);\n        uint amountToWithdraw = userBalances[msg.sender];\n        locked = true;\n        (bool success, ) = msg.sender.call.value(amountToWithdraw)(\"\");\n        require(success);\n        locked = false;\n        userBalances[msg.sender] = 0;",
          "message": "Reentrancy in Reentrancy_cross_function.withdrawBalance (patch_5.sol#14-22):\n\tExternal calls:\n\t- (success) = msg.sender.call.value(amountToWithdraw)() (patch_5.sol#18)\n\tState variables written after the call(s):\n\t- locked (patch_5.sol#20)\n\t- userBalances (patch_5.sol#21)\n"
        },
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 23,
          "vulnerability_code": "contract Reentrancy_cross_function {\n    mapping(address => uint) private userBalances;\n    bool private locked;\n\n    function transfer(address to, uint amount) {\n        if (userBalances[msg.sender] >= amount) {\n            userBalances[to] += amount;\n            userBalances[msg.sender] -= amount;\n        }\n    }\n\n    function withdrawBalance() public {\n        require(!locked);\n        uint amountToWithdraw = userBalances[msg.sender];\n        locked = true;\n        (bool success, ) = msg.sender.call.value(amountToWithdraw)(\"\");\n        require(success);\n        locked = false;\n        userBalances[msg.sender] = 0;\n    }",
          "message": "Reentrancy_cross_function (patch_5.sol#3-23) has incorrect ERC20 function interface(s):\n\t-transfer (patch_5.sol#7-12)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 12,
          "vulnerability_code": "    function transfer(address to, uint amount) {\n        if (userBalances[msg.sender] >= amount) {\n            userBalances[to] += amount;\n            userBalances[msg.sender] -= amount;\n        }",
          "message": "Reentrancy_cross_function.transfer (patch_5.sol#7-12) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": 22,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!locked);\n        uint amountToWithdraw = userBalances[msg.sender];\n        locked = true;\n        (bool success, ) = msg.sender.call.value(amountToWithdraw)(\"\");\n        require(success);\n        locked = false;\n        userBalances[msg.sender] = 0;",
          "message": "Reentrancy_cross_function.withdrawBalance (patch_5.sol#14-22) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;",
          "message": "Detected issues with version pragma in patch_5.sol:\n\t- pragma solidity^0.4.0 (patch_5.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": 22,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!locked);\n        uint amountToWithdraw = userBalances[msg.sender];\n        locked = true;\n        (bool success, ) = msg.sender.call.value(amountToWithdraw)(\"\");\n        require(success);\n        locked = false;\n        userBalances[msg.sender] = 0;",
          "message": "Low level call in Reentrancy_cross_function.withdrawBalance (patch_5.sol#14-22):\n\t-(success) = msg.sender.call.value(amountToWithdraw)() patch_5.sol#18\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 23,
          "vulnerability_code": "contract Reentrancy_cross_function {\n    mapping(address => uint) private userBalances;\n    bool private locked;\n\n    function transfer(address to, uint amount) {\n        if (userBalances[msg.sender] >= amount) {\n            userBalances[to] += amount;\n            userBalances[msg.sender] -= amount;\n        }\n    }\n\n    function withdrawBalance() public {\n        require(!locked);\n        uint amountToWithdraw = userBalances[msg.sender];\n        locked = true;\n        (bool success, ) = msg.sender.call.value(amountToWithdraw)(\"\");\n        require(success);\n        locked = false;\n        userBalances[msg.sender] = 0;\n    }",
          "message": "Contract 'Reentrancy_cross_function' (patch_5.sol#3-23) is not in CapWords\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Callstack Depth Attack Vulnerability",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = msg.sender.call.value(amountToWithdraw)(\"\");",
          "message": null
        }
      ]
    }
  }
}