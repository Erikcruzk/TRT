{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_16"
      ],
      "vulnerability_findings": [
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Message memory lastMsg;",
          "message": "lastMsg in Log.addMessage (patch_2.sol#50) is a local variable never initialiazed\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum = 2 ether;",
          "message": "U_BANK.MinSum should be constant (patch_2.sol#11)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": 32,
          "vulnerability_code": "    function collect(uint _am) public {\n        require(Acc[msg.sender].balance >= MinSum, \"Balance is less than minimum sum.\");\n        require(Acc[msg.sender].balance >= _am, \"Amount requested is greater than balance.\");\n        require(now > Acc[msg.sender].unlockTime, \"Unlock time is not yet reached.\");\n        Acc[msg.sender].balance -= _am;\n        require(msg.sender.call.value(_am)(), \"Transaction failed.\");\n        LogFile.addMessage(msg.sender, _am, \"Collect\");",
          "message": "U_BANK.collect (patch_2.sol#25-32) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": 36,
          "vulnerability_code": "    function() public payable {\n        put(0);",
          "message": "U_BANK.fallback (patch_2.sol#34-36) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": 56,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {\n        Message memory lastMsg;\n        lastMsg.sender = _adr;\n        lastMsg.time = now;\n        lastMsg.val = _val;\n        lastMsg.data = _data;\n        history.push(lastMsg);",
          "message": "Log.addMessage (patch_2.sol#49-56) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": 32,
          "vulnerability_code": "    function collect(uint _am) public {\n        require(Acc[msg.sender].balance >= MinSum, \"Balance is less than minimum sum.\");\n        require(Acc[msg.sender].balance >= _am, \"Amount requested is greater than balance.\");\n        require(now > Acc[msg.sender].unlockTime, \"Unlock time is not yet reached.\");\n        Acc[msg.sender].balance -= _am;\n        require(msg.sender.call.value(_am)(), \"Transaction failed.\");\n        LogFile.addMessage(msg.sender, _am, \"Collect\");",
          "message": "Low level call in U_BANK.collect (patch_2.sol#25-32):\n\t-require(bool,string)(msg.sender.call.value(_am)(),Transaction failed.) patch_2.sol#30\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 37,
          "vulnerability_code": "contract U_BANK {\n    struct Holder {\n        uint unlockTime;\n        uint balance;\n    }\n\n    mapping(address => Holder) public Acc;\n\n    uint public MinSum = 2 ether;\n\n    Log LogFile;\n\n    function U_BANK(address log) public {\n        LogFile = Log(log);\n    }\n\n    function put(uint _unlockTime) public payable {\n        Acc[msg.sender].balance += msg.value;\n        Acc[msg.sender].unlockTime = _unlockTime > now ? _unlockTime : now;\n        LogFile.addMessage(msg.sender, msg.value, \"Put\");\n    }\n\n    function collect(uint _am) public {\n        require(Acc[msg.sender].balance >= MinSum, \"Balance is less than minimum sum.\");\n        require(Acc[msg.sender].balance >= _am, \"Amount requested is greater than balance.\");\n        require(now > Acc[msg.sender].unlockTime, \"Unlock time is not yet reached.\");\n        Acc[msg.sender].balance -= _am;\n        require(msg.sender.call.value(_am)(), \"Transaction failed.\");\n        LogFile.addMessage(msg.sender, _am, \"Collect\");\n    }\n\n    function() public payable {\n        put(0);\n    }",
          "message": "Contract 'U_BANK' (patch_2.sol#3-37) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 17,
          "vulnerability_code": "    function U_BANK(address log) public {\n        LogFile = Log(log);",
          "message": "Function 'U_BANK.U_BANK' (patch_2.sol#15-17) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function put(uint _unlockTime) public payable {",
          "message": "Parameter '_unlockTime' of U_BANK.put (patch_2.sol#19) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function collect(uint _am) public {",
          "message": "Parameter '_am' of U_BANK.collect (patch_2.sol#25) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => Holder) public Acc;",
          "message": "Variable 'U_BANK.Acc' (patch_2.sol#9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum = 2 ether;",
          "message": "Variable 'U_BANK.MinSum' (patch_2.sol#11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Log LogFile;",
          "message": "Variable 'U_BANK.LogFile' (patch_2.sol#13) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of Log.addMessage (patch_2.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of Log.addMessage (patch_2.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of Log.addMessage (patch_2.sol#49) is not in mixedCase\n"
        }
      ]
    },
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    }
  }
}