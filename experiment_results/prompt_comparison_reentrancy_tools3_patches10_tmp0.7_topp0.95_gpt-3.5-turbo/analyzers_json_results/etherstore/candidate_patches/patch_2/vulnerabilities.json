{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_6"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": 25,
          "vulnerability_code": "    function withdrawFunds(uint256 _weiToWithdraw) public {\n        require(!locked[msg.sender]); // prevent withdrawal if sender is locked\n        require(balances[msg.sender] >= _weiToWithdraw);\n        require(_weiToWithdraw <= withdrawalLimit);\n        require(now >= lastWithdrawTime[msg.sender] + 1 weeks);\n\n        balances[msg.sender] -= _weiToWithdraw;\n        lastWithdrawTime[msg.sender] = now;\n        locked[msg.sender] = true; // lock sender to prevent reentrancy\n        require(msg.sender.call.value(_weiToWithdraw)());\n        locked[msg.sender] = false; // unlock sender after external call completes",
          "message": "Reentrancy in EtherStore.withdrawFunds (patch_2.sol#14-25):\n\tExternal calls:\n\t- require(bool)(msg.sender.call.value(_weiToWithdraw)()) (patch_2.sol#23)\n\tState variables written after the call(s):\n\t- locked (patch_2.sol#24)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public withdrawalLimit = 1 ether;",
          "message": "EtherStore.withdrawalLimit should be constant (patch_2.sol#4)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": 12,
          "vulnerability_code": "    function depositFunds() public payable {\n        require(!locked[msg.sender]); // prevent deposit if sender is locked\n        balances[msg.sender] += msg.value;",
          "message": "EtherStore.depositFunds (patch_2.sol#9-12) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": 25,
          "vulnerability_code": "    function withdrawFunds(uint256 _weiToWithdraw) public {\n        require(!locked[msg.sender]); // prevent withdrawal if sender is locked\n        require(balances[msg.sender] >= _weiToWithdraw);\n        require(_weiToWithdraw <= withdrawalLimit);\n        require(now >= lastWithdrawTime[msg.sender] + 1 weeks);\n\n        balances[msg.sender] -= _weiToWithdraw;\n        lastWithdrawTime[msg.sender] = now;\n        locked[msg.sender] = true; // lock sender to prevent reentrancy\n        require(msg.sender.call.value(_weiToWithdraw)());\n        locked[msg.sender] = false; // unlock sender after external call completes",
          "message": "EtherStore.withdrawFunds (patch_2.sol#14-25) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": 25,
          "vulnerability_code": "    function withdrawFunds(uint256 _weiToWithdraw) public {\n        require(!locked[msg.sender]); // prevent withdrawal if sender is locked\n        require(balances[msg.sender] >= _weiToWithdraw);\n        require(_weiToWithdraw <= withdrawalLimit);\n        require(now >= lastWithdrawTime[msg.sender] + 1 weeks);\n\n        balances[msg.sender] -= _weiToWithdraw;\n        lastWithdrawTime[msg.sender] = now;\n        locked[msg.sender] = true; // lock sender to prevent reentrancy\n        require(msg.sender.call.value(_weiToWithdraw)());\n        locked[msg.sender] = false; // unlock sender after external call completes",
          "message": "Low level call in EtherStore.withdrawFunds (patch_2.sol#14-25):\n\t-require(bool)(msg.sender.call.value(_weiToWithdraw)()) patch_2.sol#23\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawFunds(uint256 _weiToWithdraw) public {",
          "message": "Parameter '_weiToWithdraw' of EtherStore.withdrawFunds (patch_2.sol#14) is not in mixedCase\n"
        }
      ]
    }
  }
}