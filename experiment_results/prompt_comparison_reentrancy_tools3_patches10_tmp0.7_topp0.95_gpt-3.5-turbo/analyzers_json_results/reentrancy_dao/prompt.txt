/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.19;

contract ReentrancyDAO {
    mapping(address => uint) credit;
    uint balance;

    function withdrawAll() public {
        uint oCredit = credit[msg.sender];
        if (oCredit > 0) {
            balance -= oCredit;

            bool callResult = msg.sender.call.value(oCredit)();
            require(callResult);
            credit[msg.sender] = 0;
        }
    }

    function deposit() public payable {
        credit[msg.sender] += msg.value;
        balance += msg.value;
    }
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.
{
  "slither": {
    "successfull_analysis": true,
    "errors": [
      "EXIT_CODE_5"
    ],
    "vulnerability_findings": [
      {
        "name": "reentrancy",
        "vulnerability_from_line": 7,
        "vulnerability_to_line": 16,
        "vulnerability_code": "    function withdrawAll() public {\n        uint oCredit = credit[msg.sender];\n        if (oCredit > 0) {\n            balance -= oCredit;\n\n            bool callResult = msg.sender.call.value(oCredit)();\n            require(callResult);\n            credit[msg.sender] = 0;\n        }",
        "message": "Reentrancy in ReentrancyDAO.withdrawAll (reentrancy_dao.sol#7-16):\n\tExternal calls:\n\t- callResult = msg.sender.call.value(oCredit)() (reentrancy_dao.sol#12)\n\tState variables written after the call(s):\n\t- credit (reentrancy_dao.sol#14)\n"
      }
    ]
  }
}

/// Repaired Solidity Smart Contract