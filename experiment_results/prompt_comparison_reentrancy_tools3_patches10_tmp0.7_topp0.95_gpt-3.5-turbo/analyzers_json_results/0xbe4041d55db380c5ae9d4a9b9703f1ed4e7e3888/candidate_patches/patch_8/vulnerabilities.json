{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_25"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 19,
          "vulnerability_code": "    function SetMinSum(uint _val) public {\n        require(!Acc[msg.sender].initialized); // require that contract is not yet initialized\n        MinSum = _val;",
          "message": "MONEY_BOX.SetMinSum (patch_8.sol#16-19) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 24,
          "vulnerability_code": "    function SetLogFile(address _log) public {\n        require(!Acc[msg.sender].initialized); // require that contract is not yet initialized\n        LogFile = Log(_log);",
          "message": "MONEY_BOX.SetLogFile (patch_8.sol#21-24) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": 28,
          "vulnerability_code": "    function Initialized() public {\n        Acc[msg.sender].initialized = true; // set initialized flag",
          "message": "MONEY_BOX.Initialized (patch_8.sol#26-28) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": 46,
          "vulnerability_code": "    function Collect(uint _am) public payable {\n        var acc = Acc[msg.sender];\n        require(\n            acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime && acc.initialized // require initialized flag\n        );\n        acc.initialized = false; // reset initialized flag\n        acc.balance -= _am;\n        msg.sender.transfer(_am); // use transfer instead of call\n        LogFile.AddMessage(msg.sender, _am, \"Collect\");",
          "message": "MONEY_BOX.Collect (patch_8.sol#37-46) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": 50,
          "vulnerability_code": "    function() public payable {\n        Put(0);",
          "message": "MONEY_BOX.fallback (patch_8.sol#48-50) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": 71,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        Message memory newMessage = Message({\n            Sender: _adr,\n            Time: now,\n            Val: _val,\n            Data: _data\n        });\n        History.push(newMessage);",
          "message": "Log.AddMessage (patch_8.sol#63-71) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_8.sol:\n\t- pragma solidity^0.4.19 (patch_8.sol#1): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 51,
          "vulnerability_code": "contract MONEY_BOX {\n    struct Holder {\n        uint unlockTime;\n        uint balance;\n        bool initialized; // added initialized flag\n    }\n\n    mapping(address => Holder) public Acc;\n\n    uint public MinSum;\n\n    Log LogFile;\n\n    function SetMinSum(uint _val) public {\n        require(!Acc[msg.sender].initialized); // require that contract is not yet initialized\n        MinSum = _val;\n    }\n\n    function SetLogFile(address _log) public {\n        require(!Acc[msg.sender].initialized); // require that contract is not yet initialized\n        LogFile = Log(_log);\n    }\n\n    function Initialized() public {\n        Acc[msg.sender].initialized = true; // set initialized flag\n    }\n\n    function Put(uint _lockTime) public payable {\n        var acc = Acc[msg.sender];\n        acc.balance += msg.value;\n        if (now + _lockTime > acc.unlockTime) acc.unlockTime = now + _lockTime;\n        LogFile.AddMessage(msg.sender, msg.value, \"Put\");\n    }\n\n    function Collect(uint _am) public payable {\n        var acc = Acc[msg.sender];\n        require(\n            acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime && acc.initialized // require initialized flag\n        );\n        acc.initialized = false; // reset initialized flag\n        acc.balance -= _am;\n        msg.sender.transfer(_am); // use transfer instead of call\n        LogFile.AddMessage(msg.sender, _am, \"Collect\");\n    }\n\n    function() public payable {\n        Put(0);\n    }",
          "message": "Contract 'MONEY_BOX' (patch_8.sol#3-51) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 19,
          "vulnerability_code": "    function SetMinSum(uint _val) public {\n        require(!Acc[msg.sender].initialized); // require that contract is not yet initialized\n        MinSum = _val;",
          "message": "Function 'MONEY_BOX.SetMinSum' (patch_8.sol#16-19) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function SetMinSum(uint _val) public {",
          "message": "Parameter '_val' of MONEY_BOX.SetMinSum (patch_8.sol#16) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 24,
          "vulnerability_code": "    function SetLogFile(address _log) public {\n        require(!Acc[msg.sender].initialized); // require that contract is not yet initialized\n        LogFile = Log(_log);",
          "message": "Function 'MONEY_BOX.SetLogFile' (patch_8.sol#21-24) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function SetLogFile(address _log) public {",
          "message": "Parameter '_log' of MONEY_BOX.SetLogFile (patch_8.sol#21) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": 28,
          "vulnerability_code": "    function Initialized() public {\n        Acc[msg.sender].initialized = true; // set initialized flag",
          "message": "Function 'MONEY_BOX.Initialized' (patch_8.sol#26-28) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": 35,
          "vulnerability_code": "    function Put(uint _lockTime) public payable {\n        var acc = Acc[msg.sender];\n        acc.balance += msg.value;\n        if (now + _lockTime > acc.unlockTime) acc.unlockTime = now + _lockTime;\n        LogFile.AddMessage(msg.sender, msg.value, \"Put\");",
          "message": "Function 'MONEY_BOX.Put' (patch_8.sol#30-35) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Put(uint _lockTime) public payable {",
          "message": "Parameter '_lockTime' of MONEY_BOX.Put (patch_8.sol#30) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": 46,
          "vulnerability_code": "    function Collect(uint _am) public payable {\n        var acc = Acc[msg.sender];\n        require(\n            acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime && acc.initialized // require initialized flag\n        );\n        acc.initialized = false; // reset initialized flag\n        acc.balance -= _am;\n        msg.sender.transfer(_am); // use transfer instead of call\n        LogFile.AddMessage(msg.sender, _am, \"Collect\");",
          "message": "Function 'MONEY_BOX.Collect' (patch_8.sol#37-46) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Collect(uint _am) public payable {",
          "message": "Parameter '_am' of MONEY_BOX.Collect (patch_8.sol#37) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => Holder) public Acc;",
          "message": "Variable 'MONEY_BOX.Acc' (patch_8.sol#10) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum;",
          "message": "Variable 'MONEY_BOX.MinSum' (patch_8.sol#12) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Log LogFile;",
          "message": "Variable 'MONEY_BOX.LogFile' (patch_8.sol#14) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": 71,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        Message memory newMessage = Message({\n            Sender: _adr,\n            Time: now,\n            Val: _val,\n            Data: _data\n        });\n        History.push(newMessage);",
          "message": "Function 'Log.AddMessage' (patch_8.sol#63-71) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of Log.AddMessage (patch_8.sol#63) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of Log.AddMessage (patch_8.sol#63) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of Log.AddMessage (patch_8.sol#63) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": "Variable 'Log.History' (patch_8.sol#61) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}