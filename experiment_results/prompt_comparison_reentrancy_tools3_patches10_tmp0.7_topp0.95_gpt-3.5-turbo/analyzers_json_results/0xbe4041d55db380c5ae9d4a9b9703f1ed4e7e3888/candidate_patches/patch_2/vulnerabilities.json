{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_16"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 19,
          "vulnerability_code": "    function setMinSum(uint _val) public {\n        require(!acc[msg.sender].initialized);\n        minSum = _val;",
          "message": "MONEY_BOX.setMinSum (patch_2.sol#16-19) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 24,
          "vulnerability_code": "    function setLogFile(address _log) public {\n        require(!acc[msg.sender].initialized);\n        logFile = Log(_log);",
          "message": "MONEY_BOX.setLogFile (patch_2.sol#21-24) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": 29,
          "vulnerability_code": "    function initialize() public {\n        require(!acc[msg.sender].initialized);\n        acc[msg.sender].initialized = true;",
          "message": "MONEY_BOX.initialize (patch_2.sol#26-29) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": 46,
          "vulnerability_code": "    function collect(uint _am) public {\n        Holder storage holder = acc[msg.sender];\n        require(holder.balance >= minSum && holder.balance >= _am && now > holder.unlockTime);\n        holder.balance -= _am;\n        require(msg.sender.call.value(_am)());\n        logFile.addMessage(msg.sender, _am, \"Collect\");",
          "message": "MONEY_BOX.collect (patch_2.sol#40-46) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": 50,
          "vulnerability_code": "    function() public payable {\n        put(0);",
          "message": "MONEY_BOX.fallback (patch_2.sol#48-50) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": 65,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {\n        history.push(Message(_adr, _data, _val, now));",
          "message": "Log.addMessage (patch_2.sol#63-65) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_2.sol:\n\t- pragma solidity^0.4.19 (patch_2.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": 46,
          "vulnerability_code": "    function collect(uint _am) public {\n        Holder storage holder = acc[msg.sender];\n        require(holder.balance >= minSum && holder.balance >= _am && now > holder.unlockTime);\n        holder.balance -= _am;\n        require(msg.sender.call.value(_am)());\n        logFile.addMessage(msg.sender, _am, \"Collect\");",
          "message": "Low level call in MONEY_BOX.collect (patch_2.sol#40-46):\n\t-require(bool)(msg.sender.call.value(_am)()) patch_2.sol#44\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 51,
          "vulnerability_code": "contract MONEY_BOX {\n    struct Holder {\n        uint unlockTime;\n        uint balance;\n        bool initialized;\n    }\n\n    mapping(address => Holder) public acc;\n\n    uint public minSum;\n\n    Log logFile;\n\n    function setMinSum(uint _val) public {\n        require(!acc[msg.sender].initialized);\n        minSum = _val;\n    }\n\n    function setLogFile(address _log) public {\n        require(!acc[msg.sender].initialized);\n        logFile = Log(_log);\n    }\n\n    function initialize() public {\n        require(!acc[msg.sender].initialized);\n        acc[msg.sender].initialized = true;\n    }\n\n    function put(uint _lockTime) public payable {\n        Holder storage holder = acc[msg.sender];\n        holder.balance += msg.value;\n        if (now + _lockTime > holder.unlockTime) {\n            holder.unlockTime = now + _lockTime;\n        }\n        logFile.addMessage(msg.sender, msg.value, \"Put\");\n    }\n\n    function collect(uint _am) public {\n        Holder storage holder = acc[msg.sender];\n        require(holder.balance >= minSum && holder.balance >= _am && now > holder.unlockTime);\n        holder.balance -= _am;\n        require(msg.sender.call.value(_am)());\n        logFile.addMessage(msg.sender, _am, \"Collect\");\n    }\n\n    function() public payable {\n        put(0);\n    }",
          "message": "Contract 'MONEY_BOX' (patch_2.sol#3-51) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMinSum(uint _val) public {",
          "message": "Parameter '_val' of MONEY_BOX.setMinSum (patch_2.sol#16) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setLogFile(address _log) public {",
          "message": "Parameter '_log' of MONEY_BOX.setLogFile (patch_2.sol#21) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function put(uint _lockTime) public payable {",
          "message": "Parameter '_lockTime' of MONEY_BOX.put (patch_2.sol#31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function collect(uint _am) public {",
          "message": "Parameter '_am' of MONEY_BOX.collect (patch_2.sol#40) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of Log.addMessage (patch_2.sol#63) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of Log.addMessage (patch_2.sol#63) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of Log.addMessage (patch_2.sol#63) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}