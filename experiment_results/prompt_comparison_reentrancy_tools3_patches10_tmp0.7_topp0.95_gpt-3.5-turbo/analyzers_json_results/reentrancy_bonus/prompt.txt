/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.0;

contract Reentrancy_bonus {
    mapping(address => uint) private userBalances;
    mapping(address => bool) private claimedBonus;
    mapping(address => uint) private rewardsForA;

    function withdrawReward(address recipient) public {
        uint amountToWithdraw = rewardsForA[recipient];
        rewardsForA[recipient] = 0;
        (bool success, ) = recipient.call.value(amountToWithdraw)("");
        require(success);
    }

    function getFirstWithdrawalBonus(address recipient) public {
        require(!claimedBonus[recipient]);

        rewardsForA[recipient] += 100;

        withdrawReward(recipient);
        claimedBonus[recipient] = true;
    }
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.
{
  "slither": {
    "successfull_analysis": true,
    "errors": [
      "EXIT_CODE_7"
    ],
    "vulnerability_findings": [
      {
        "name": "reentrancy",
        "vulnerability_from_line": 15,
        "vulnerability_to_line": 22,
        "vulnerability_code": "    function getFirstWithdrawalBonus(address recipient) public {\n        require(!claimedBonus[recipient]);\n\n        rewardsForA[recipient] += 100;\n\n        withdrawReward(recipient);\n        claimedBonus[recipient] = true;",
        "message": "Reentrancy in Reentrancy_bonus.getFirstWithdrawalBonus (reentrancy_bonus.sol#15-22):\n\tExternal calls:\n\t- withdrawReward(recipient) (reentrancy_bonus.sol#20)\n\tState variables written after the call(s):\n\t- claimedBonus (reentrancy_bonus.sol#21)\n"
      }
    ]
  }
}

/// Repaired Solidity Smart Contract