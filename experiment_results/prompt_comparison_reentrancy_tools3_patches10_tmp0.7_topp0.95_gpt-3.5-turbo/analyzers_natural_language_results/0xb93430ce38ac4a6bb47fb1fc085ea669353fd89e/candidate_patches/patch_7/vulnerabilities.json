{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_19"
      ],
      "vulnerability_findings": [
        {
          "name": "constable-states",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinDeposit = 1 ether;",
          "message": "PrivateBank.MinDeposit should be constant (patch_7.sol#6)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": 19,
          "vulnerability_code": "    function Deposit() public payable {\n        if (msg.value >= MinDeposit) {\n            balances[msg.sender] += msg.value;\n            TransferLog.AddMessage(msg.sender, msg.value, \"Deposit\");\n        }",
          "message": "PrivateBank.Deposit (patch_7.sol#14-19) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 30,
          "vulnerability_code": "    function CashOut(uint _am) public {\n        require(_am <= balances[msg.sender]); // Check if balance is sufficient\n        balances[msg.sender] -= _am;\n        if (msg.sender.call.value(_am)()) {\n            TransferLog.AddMessage(msg.sender, _am, \"CashOut\");\n        }\n        else {\n            balances[msg.sender] += _am; // Revert balance changes if external call fails\n        }",
          "message": "PrivateBank.CashOut (patch_7.sol#21-30) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() public payable {}",
          "message": "PrivateBank.fallback (patch_7.sol#32) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": 54,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        Message memory newMessage = Message({\n            Sender: _adr,\n            Data: _data,\n            Val: _val,\n            Time: now\n        });\n        History.push(newMessage);",
          "message": "Log.AddMessage (patch_7.sol#46-54) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_7.sol:\n\t- pragma solidity^0.4.19 (patch_7.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 30,
          "vulnerability_code": "    function CashOut(uint _am) public {\n        require(_am <= balances[msg.sender]); // Check if balance is sufficient\n        balances[msg.sender] -= _am;\n        if (msg.sender.call.value(_am)()) {\n            TransferLog.AddMessage(msg.sender, _am, \"CashOut\");\n        }\n        else {\n            balances[msg.sender] += _am; // Revert balance changes if external call fails\n        }",
          "message": "Low level call in PrivateBank.CashOut (patch_7.sol#21-30):\n\t-msg.sender.call.value(_am)() patch_7.sol#24-29\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": 12,
          "vulnerability_code": "    function PrivateBank(address _lib) public {\n        TransferLog = Log(_lib);",
          "message": "Function 'PrivateBank.PrivateBank' (patch_7.sol#10-12) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function PrivateBank(address _lib) public {",
          "message": "Parameter '_lib' of PrivateBank.PrivateBank (patch_7.sol#10) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": 19,
          "vulnerability_code": "    function Deposit() public payable {\n        if (msg.value >= MinDeposit) {\n            balances[msg.sender] += msg.value;\n            TransferLog.AddMessage(msg.sender, msg.value, \"Deposit\");\n        }",
          "message": "Function 'PrivateBank.Deposit' (patch_7.sol#14-19) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 30,
          "vulnerability_code": "    function CashOut(uint _am) public {\n        require(_am <= balances[msg.sender]); // Check if balance is sufficient\n        balances[msg.sender] -= _am;\n        if (msg.sender.call.value(_am)()) {\n            TransferLog.AddMessage(msg.sender, _am, \"CashOut\");\n        }\n        else {\n            balances[msg.sender] += _am; // Revert balance changes if external call fails\n        }",
          "message": "Function 'PrivateBank.CashOut' (patch_7.sol#21-30) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function CashOut(uint _am) public {",
          "message": "Parameter '_am' of PrivateBank.CashOut (patch_7.sol#21) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinDeposit = 1 ether;",
          "message": "Variable 'PrivateBank.MinDeposit' (patch_7.sol#6) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Log TransferLog;",
          "message": "Variable 'PrivateBank.TransferLog' (patch_7.sol#8) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": 54,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        Message memory newMessage = Message({\n            Sender: _adr,\n            Data: _data,\n            Val: _val,\n            Time: now\n        });\n        History.push(newMessage);",
          "message": "Function 'Log.AddMessage' (patch_7.sol#46-54) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of Log.AddMessage (patch_7.sol#46) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of Log.AddMessage (patch_7.sol#46) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of Log.AddMessage (patch_7.sol#46) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": "Variable 'Log.History' (patch_7.sol#44) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    }
  }
}