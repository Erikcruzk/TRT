/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.18;

contract Reentrance {
    mapping(address => uint) public balances;

    function donate(address _to) public payable {
        balances[_to] += msg.value;
    }

    function balanceOf(address _who) public view returns (uint balance) {
        return balances[_who];
    }

    function withdraw(uint _amount) public {
        if (balances[msg.sender] >= _amount) {
            if (msg.sender.call.value(_amount)()) {
                _amount;
            }
            balances[msg.sender] -= _amount;
        }
    }

    function() public payable {}
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.

/// 1. Slither Analysis Results
/// 1.1. Vulnerability: reentrancy at Line 14-21:
    function withdraw(uint _amount) public {
        if (balances[msg.sender] >= _amount) {
            if (msg.sender.call.value(_amount)()) {
                _amount;
            }
            balances[msg.sender] -= _amount;
        }
///  Message:Reentrancy in Reentrance.withdraw (reentrance.sol#14-21):
///   	External calls:
///   	- msg.sender.call.value(_amount)() (reentrance.sol#16-18)
///   	State variables written after the call(s):
///   	- balances (reentrance.sol#19)



/// Repaired Solidity Smart Contract