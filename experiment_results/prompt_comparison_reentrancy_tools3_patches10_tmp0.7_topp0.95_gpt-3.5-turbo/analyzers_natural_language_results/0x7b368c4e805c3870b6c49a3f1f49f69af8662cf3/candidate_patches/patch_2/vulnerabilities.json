{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_12"
      ],
      "vulnerability_findings": [
        {
          "name": "constable-states",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public minSum = 1 ether;",
          "message": "W_WALLET.minSum should be constant (patch_2.sol#6)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": 25,
          "vulnerability_code": "    function collect(uint _am) public payable {\n        require(balances[msg.sender] >= minSum && balances[msg.sender] >= _am && now > unlockTimes[msg.sender]);\n        balances[msg.sender] -= _am;\n        if (msg.sender.call.value(_am)()) {\n            logFile.addMessage(msg.sender, _am, \"Collect\");\n        }",
          "message": "W_WALLET.collect (patch_2.sol#19-25) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": 29,
          "vulnerability_code": "    function() public payable {\n        put(0);",
          "message": "W_WALLET.fallback (patch_2.sol#27-29) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": 49,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {\n        history.push(Message({\n            sender: _adr,\n            time: now,\n            val: _val,\n            data: _data\n        }));",
          "message": "Log.addMessage (patch_2.sol#42-49) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": 25,
          "vulnerability_code": "    function collect(uint _am) public payable {\n        require(balances[msg.sender] >= minSum && balances[msg.sender] >= _am && now > unlockTimes[msg.sender]);\n        balances[msg.sender] -= _am;\n        if (msg.sender.call.value(_am)()) {\n            logFile.addMessage(msg.sender, _am, \"Collect\");\n        }",
          "message": "Low level call in W_WALLET.collect (patch_2.sol#19-25):\n\t-msg.sender.call.value(_am)() patch_2.sol#22-24\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 30,
          "vulnerability_code": "contract W_WALLET {\n    mapping(address => uint) public balances;\n    mapping(address => uint) public unlockTimes;\n    uint public minSum = 1 ether;\n    Log logFile;\n\n    function W_WALLET(address log) public {\n        logFile = Log(log);\n    }\n\n    function put(uint _unlockTime) public payable {\n        balances[msg.sender] += msg.value;\n        unlockTimes[msg.sender] = _unlockTime > now ? _unlockTime : now;\n        logFile.addMessage(msg.sender, msg.value, \"Put\");\n    }\n\n    function collect(uint _am) public payable {\n        require(balances[msg.sender] >= minSum && balances[msg.sender] >= _am && now > unlockTimes[msg.sender]);\n        balances[msg.sender] -= _am;\n        if (msg.sender.call.value(_am)()) {\n            logFile.addMessage(msg.sender, _am, \"Collect\");\n        }\n    }\n\n    function() public payable {\n        put(0);\n    }",
          "message": "Contract 'W_WALLET' (patch_2.sol#3-30) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": 11,
          "vulnerability_code": "    function W_WALLET(address log) public {\n        logFile = Log(log);",
          "message": "Function 'W_WALLET.W_WALLET' (patch_2.sol#9-11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function put(uint _unlockTime) public payable {",
          "message": "Parameter '_unlockTime' of W_WALLET.put (patch_2.sol#13) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function collect(uint _am) public payable {",
          "message": "Parameter '_am' of W_WALLET.collect (patch_2.sol#19) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of Log.addMessage (patch_2.sol#42) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of Log.addMessage (patch_2.sol#42) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of Log.addMessage (patch_2.sol#42) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}