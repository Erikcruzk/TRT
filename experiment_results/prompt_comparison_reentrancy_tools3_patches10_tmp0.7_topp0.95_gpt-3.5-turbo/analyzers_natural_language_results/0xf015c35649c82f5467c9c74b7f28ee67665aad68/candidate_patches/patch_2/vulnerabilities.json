{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_22"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 34,
          "vulnerability_code": "    function Collect(uint _am) public payable {\n        Holder storage acc = Acc[msg.sender];\n        if (acc.isExist && acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime) {\n            acc.isExist = false;\n            if (msg.sender.call.value(_am)()) {\n                acc.balance -= _am;\n                LogFile.AddMessage(msg.sender, _am, \"Collect\");\n            }\n            acc.isExist = true;\n        }",
          "message": "Reentrancy in MY_BANK.Collect (patch_2.sol#24-34):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (patch_2.sol#28-31)\n\tState variables written after the call(s):\n\t- Acc (patch_2.sol#29)\n"
        },
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 34,
          "vulnerability_code": "    function Collect(uint _am) public payable {\n        Holder storage acc = Acc[msg.sender];\n        if (acc.isExist && acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime) {\n            acc.isExist = false;\n            if (msg.sender.call.value(_am)()) {\n                acc.balance -= _am;\n                LogFile.AddMessage(msg.sender, _am, \"Collect\");\n            }\n            acc.isExist = true;\n        }",
          "message": "Reentrancy in MY_BANK.Collect (patch_2.sol#24-34):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (patch_2.sol#28-31)\n\t- LogFile.AddMessage(msg.sender,_am,Collect) (patch_2.sol#30)\n\tExternal calls sending eth:\n\t- msg.sender.call.value(_am)() (patch_2.sol#28-31)\n\tState variables written after the call(s):\n\t- Acc (patch_2.sol#32)\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Message memory LastMsg;",
          "message": "LastMsg in Log.AddMessage (patch_2.sol#56) is a local variable never initialiazed\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum = 1 ether;",
          "message": "MY_BANK.MinSum should be constant (patch_2.sol#5)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 34,
          "vulnerability_code": "    function Collect(uint _am) public payable {\n        Holder storage acc = Acc[msg.sender];\n        if (acc.isExist && acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime) {\n            acc.isExist = false;\n            if (msg.sender.call.value(_am)()) {\n                acc.balance -= _am;\n                LogFile.AddMessage(msg.sender, _am, \"Collect\");\n            }\n            acc.isExist = true;\n        }",
          "message": "MY_BANK.Collect (patch_2.sol#24-34) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": 38,
          "vulnerability_code": "    function() public payable {\n        Put(0);",
          "message": "MY_BANK.fallback (patch_2.sol#36-38) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": 62,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        Message memory LastMsg;\n        LastMsg.Sender = _adr;\n        LastMsg.Time = now;\n        LastMsg.Val = _val;\n        LastMsg.Data = _data;\n        History.push(LastMsg);",
          "message": "Log.AddMessage (patch_2.sol#55-62) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 34,
          "vulnerability_code": "    function Collect(uint _am) public payable {\n        Holder storage acc = Acc[msg.sender];\n        if (acc.isExist && acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime) {\n            acc.isExist = false;\n            if (msg.sender.call.value(_am)()) {\n                acc.balance -= _am;\n                LogFile.AddMessage(msg.sender, _am, \"Collect\");\n            }\n            acc.isExist = true;\n        }",
          "message": "Low level call in MY_BANK.Collect (patch_2.sol#24-34):\n\t-msg.sender.call.value(_am)() patch_2.sol#28-31\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 43,
          "vulnerability_code": "contract MY_BANK {\n    mapping(address => Holder) public Acc;\n    uint public MinSum = 1 ether;\n    Log LogFile;\n\n    struct Holder {\n        uint unlockTime;\n        uint balance;\n        bool isExist;\n    }\n\n    function Put(uint _unlockTime) public payable {\n        Holder storage acc = Acc[msg.sender];\n        if(!acc.isExist){\n            acc.isExist = true;\n        }\n        acc.balance += msg.value;\n        acc.unlockTime = _unlockTime > now ? _unlockTime : now;\n        LogFile.AddMessage(msg.sender, msg.value, \"Put\");\n    }\n\n    function Collect(uint _am) public payable {\n        Holder storage acc = Acc[msg.sender];\n        if (acc.isExist && acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime) {\n            acc.isExist = false;\n            if (msg.sender.call.value(_am)()) {\n                acc.balance -= _am;\n                LogFile.AddMessage(msg.sender, _am, \"Collect\");\n            }\n            acc.isExist = true;\n        }\n    }\n\n    function() public payable {\n        Put(0);\n    }\n\n    function MY_BANK(address log) public {\n        LogFile = Log(log);\n    }",
          "message": "Contract 'MY_BANK' (patch_2.sol#3-43) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": 22,
          "vulnerability_code": "    function Put(uint _unlockTime) public payable {\n        Holder storage acc = Acc[msg.sender];\n        if(!acc.isExist){\n            acc.isExist = true;\n        }\n        acc.balance += msg.value;\n        acc.unlockTime = _unlockTime > now ? _unlockTime : now;\n        LogFile.AddMessage(msg.sender, msg.value, \"Put\");",
          "message": "Function 'MY_BANK.Put' (patch_2.sol#14-22) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Put(uint _unlockTime) public payable {",
          "message": "Parameter '_unlockTime' of MY_BANK.Put (patch_2.sol#14) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 34,
          "vulnerability_code": "    function Collect(uint _am) public payable {\n        Holder storage acc = Acc[msg.sender];\n        if (acc.isExist && acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime) {\n            acc.isExist = false;\n            if (msg.sender.call.value(_am)()) {\n                acc.balance -= _am;\n                LogFile.AddMessage(msg.sender, _am, \"Collect\");\n            }\n            acc.isExist = true;\n        }",
          "message": "Function 'MY_BANK.Collect' (patch_2.sol#24-34) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Collect(uint _am) public payable {",
          "message": "Parameter '_am' of MY_BANK.Collect (patch_2.sol#24) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": 42,
          "vulnerability_code": "    function MY_BANK(address log) public {\n        LogFile = Log(log);",
          "message": "Function 'MY_BANK.MY_BANK' (patch_2.sol#40-42) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => Holder) public Acc;",
          "message": "Variable 'MY_BANK.Acc' (patch_2.sol#4) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum = 1 ether;",
          "message": "Variable 'MY_BANK.MinSum' (patch_2.sol#5) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Log LogFile;",
          "message": "Variable 'MY_BANK.LogFile' (patch_2.sol#6) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": 62,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        Message memory LastMsg;\n        LastMsg.Sender = _adr;\n        LastMsg.Time = now;\n        LastMsg.Val = _val;\n        LastMsg.Data = _data;\n        History.push(LastMsg);",
          "message": "Function 'Log.AddMessage' (patch_2.sol#55-62) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of Log.AddMessage (patch_2.sol#55) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of Log.AddMessage (patch_2.sol#55) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of Log.AddMessage (patch_2.sol#55) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": "Variable 'Log.History' (patch_2.sol#53) is not in mixedCase\n"
        }
      ]
    },
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    }
  }
}