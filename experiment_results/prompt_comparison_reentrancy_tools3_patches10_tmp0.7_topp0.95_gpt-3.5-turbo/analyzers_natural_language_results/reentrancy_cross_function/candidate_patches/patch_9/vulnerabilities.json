{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Callstack Depth Attack Vulnerability",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = msg.sender.call.value(amountToWithdraw)(\"\");",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_5"
      ],
      "vulnerability_findings": [
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 18,
          "vulnerability_code": "contract Reentrancy_cross_function {\n    mapping(address => uint) private userBalances;\n\n    function transfer(address to, uint amount) public {\n        require(userBalances[msg.sender] >= amount, \"Insufficient balance\");\n        userBalances[to] += amount;\n        userBalances[msg.sender] -= amount;\n    }\n\n    function withdrawBalance() public {\n        uint amountToWithdraw = userBalances[msg.sender];\n        userBalances[msg.sender] = 0;\n        (bool success, ) = msg.sender.call.value(amountToWithdraw)(\"\");\n        require(success, \"Transfer failed\");\n    }",
          "message": "Reentrancy_cross_function (patch_9.sol#3-18) has incorrect ERC20 function interface(s):\n\t-transfer (patch_9.sol#6-10)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": 10,
          "vulnerability_code": "    function transfer(address to, uint amount) public {\n        require(userBalances[msg.sender] >= amount, \"Insufficient balance\");\n        userBalances[to] += amount;\n        userBalances[msg.sender] -= amount;",
          "message": "Reentrancy_cross_function.transfer (patch_9.sol#6-10) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": 17,
          "vulnerability_code": "    function withdrawBalance() public {\n        uint amountToWithdraw = userBalances[msg.sender];\n        userBalances[msg.sender] = 0;\n        (bool success, ) = msg.sender.call.value(amountToWithdraw)(\"\");\n        require(success, \"Transfer failed\");",
          "message": "Reentrancy_cross_function.withdrawBalance (patch_9.sol#12-17) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": 17,
          "vulnerability_code": "    function withdrawBalance() public {\n        uint amountToWithdraw = userBalances[msg.sender];\n        userBalances[msg.sender] = 0;\n        (bool success, ) = msg.sender.call.value(amountToWithdraw)(\"\");\n        require(success, \"Transfer failed\");",
          "message": "Low level call in Reentrancy_cross_function.withdrawBalance (patch_9.sol#12-17):\n\t-(success) = msg.sender.call.value(amountToWithdraw)() patch_9.sol#15\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 18,
          "vulnerability_code": "contract Reentrancy_cross_function {\n    mapping(address => uint) private userBalances;\n\n    function transfer(address to, uint amount) public {\n        require(userBalances[msg.sender] >= amount, \"Insufficient balance\");\n        userBalances[to] += amount;\n        userBalances[msg.sender] -= amount;\n    }\n\n    function withdrawBalance() public {\n        uint amountToWithdraw = userBalances[msg.sender];\n        userBalances[msg.sender] = 0;\n        (bool success, ) = msg.sender.call.value(amountToWithdraw)(\"\");\n        require(success, \"Transfer failed\");\n    }",
          "message": "Contract 'Reentrancy_cross_function' (patch_9.sol#3-18) is not in CapWords\n"
        }
      ]
    },
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    }
  }
}