{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_15"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 14,
          "vulnerability_code": "    function setMinSum(uint _val) public {\n        require(!initialized[msg.sender]);\n        minSum = _val;",
          "message": "ACCURAL_DEPOSIT.setMinSum (patch_7.sol#11-14) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 19,
          "vulnerability_code": "    function setLogFile(LogFile _log) public {\n        require(!initialized[msg.sender]);\n        log = _log;",
          "message": "ACCURAL_DEPOSIT.setLogFile (patch_7.sol#16-19) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 23,
          "vulnerability_code": "    function initialize() public {\n        initialized[msg.sender] = true;",
          "message": "ACCURAL_DEPOSIT.initialize (patch_7.sol#21-23) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": 36,
          "vulnerability_code": "    function collect(uint _am) public {\n        require(initialized[msg.sender]);\n        require(balances[msg.sender] >= minSum && balances[msg.sender] >= _am);\n        balances[msg.sender] -= _am;\n        log.addMessage(msg.sender, _am, \"Collect\");\n        require(msg.sender.call.value(_am)());",
          "message": "ACCURAL_DEPOSIT.collect (patch_7.sol#30-36) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": 40,
          "vulnerability_code": "    function() public payable {\n        deposit();",
          "message": "ACCURAL_DEPOSIT.fallback (patch_7.sol#38-40) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": 61,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {\n        Message memory newMessage = Message({\n            sender: _adr,\n            time: now,\n            val: _val,\n            data: _data\n        });\n        history.push(newMessage);",
          "message": "LogFile.addMessage (patch_7.sol#53-61) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_7.sol:\n\t- pragma solidity^0.4.19 (patch_7.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": 36,
          "vulnerability_code": "    function collect(uint _am) public {\n        require(initialized[msg.sender]);\n        require(balances[msg.sender] >= minSum && balances[msg.sender] >= _am);\n        balances[msg.sender] -= _am;\n        log.addMessage(msg.sender, _am, \"Collect\");\n        require(msg.sender.call.value(_am)());",
          "message": "Low level call in ACCURAL_DEPOSIT.collect (patch_7.sol#30-36):\n\t-require(bool)(msg.sender.call.value(_am)()) patch_7.sol#35\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 41,
          "vulnerability_code": "contract ACCURAL_DEPOSIT {\n    mapping(address => uint256) public balances;\n    mapping(address => bool) public initialized;\n\n    uint public minSum = 1 ether;\n\n    LogFile public log;\n\n    function setMinSum(uint _val) public {\n        require(!initialized[msg.sender]);\n        minSum = _val;\n    }\n\n    function setLogFile(LogFile _log) public {\n        require(!initialized[msg.sender]);\n        log = _log;\n    }\n\n    function initialize() public {\n        initialized[msg.sender] = true;\n    }\n\n    function deposit() public payable {\n        balances[msg.sender] += msg.value;\n        log.addMessage(msg.sender, msg.value, \"Put\");\n    }\n\n    function collect(uint _am) public {\n        require(initialized[msg.sender]);\n        require(balances[msg.sender] >= minSum && balances[msg.sender] >= _am);\n        balances[msg.sender] -= _am;\n        log.addMessage(msg.sender, _am, \"Collect\");\n        require(msg.sender.call.value(_am)());\n    }\n\n    function() public payable {\n        deposit();\n    }",
          "message": "Contract 'ACCURAL_DEPOSIT' (patch_7.sol#3-41) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMinSum(uint _val) public {",
          "message": "Parameter '_val' of ACCURAL_DEPOSIT.setMinSum (patch_7.sol#11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setLogFile(LogFile _log) public {",
          "message": "Parameter '_log' of ACCURAL_DEPOSIT.setLogFile (patch_7.sol#16) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function collect(uint _am) public {",
          "message": "Parameter '_am' of ACCURAL_DEPOSIT.collect (patch_7.sol#30) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of LogFile.addMessage (patch_7.sol#53) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of LogFile.addMessage (patch_7.sol#53) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of LogFile.addMessage (patch_7.sol#53) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    }
  }
}