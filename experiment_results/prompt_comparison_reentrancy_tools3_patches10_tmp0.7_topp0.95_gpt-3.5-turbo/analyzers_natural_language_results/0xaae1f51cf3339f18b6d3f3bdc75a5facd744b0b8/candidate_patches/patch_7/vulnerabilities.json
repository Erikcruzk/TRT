{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_25"
      ],
      "vulnerability_findings": [
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Message memory msg;",
          "message": "msg in LogFile.AddMessage (patch_7.sol#59) is a local variable never initialiazed\n"
        },
        {
          "name": "shadowing-builtin",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Message memory msg;",
          "message": "LogFile.AddMessage.msg (local variable @ patch_7.sol#59) shadows built-in symbol \"msg\"\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 20,
          "vulnerability_code": "    function SetMinSum(uint _val) public {\n        require(initialized == false);\n        MinSum = _val;",
          "message": "DEP_BANK.SetMinSum (patch_7.sol#17-20) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": 25,
          "vulnerability_code": "    function SetLogFile(address _log) public {\n        require(initialized == false);\n        Log = LogFile(_log);",
          "message": "DEP_BANK.SetLogFile (patch_7.sol#22-25) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": 29,
          "vulnerability_code": "    function Initialized() public {\n        initialized = true;",
          "message": "DEP_BANK.Initialized (patch_7.sol#27-29) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": 41,
          "vulnerability_code": "    function Collect(uint _am) public isInitialized {\n        require(balances[msg.sender] >= MinSum && balances[msg.sender] >= _am);\n        balances[msg.sender] -= _am;\n        Log.AddMessage(msg.sender, _am, \"Collect\");\n        msg.sender.transfer(_am);",
          "message": "DEP_BANK.Collect (patch_7.sol#36-41) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": 45,
          "vulnerability_code": "    function() public payable {\n        Deposit();",
          "message": "DEP_BANK.fallback (patch_7.sol#43-45) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": 65,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        Message memory msg;\n        msg.Sender = _adr;\n        msg.Time = now;\n        msg.Val = _val;\n        msg.Data = _data;\n        History.push(msg);",
          "message": "LogFile.AddMessage (patch_7.sol#58-65) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_7.sol:\n\t- pragma solidity^0.4.19 (patch_7.sol#1): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 46,
          "vulnerability_code": "contract DEP_BANK {\n    mapping(address => uint256) public balances;\n\n    uint public MinSum;\n\n    LogFile Log;\n\n    bool initialized;\n\n    modifier isInitialized() {\n        require(initialized == true);\n        _;\n    }\n\n    function SetMinSum(uint _val) public {\n        require(initialized == false);\n        MinSum = _val;\n    }\n\n    function SetLogFile(address _log) public {\n        require(initialized == false);\n        Log = LogFile(_log);\n    }\n\n    function Initialized() public {\n        initialized = true;\n    }\n\n    function Deposit() public payable {\n        balances[msg.sender] += msg.value;\n        Log.AddMessage(msg.sender, msg.value, \"Put\");\n    }\n\n    function Collect(uint _am) public isInitialized {\n        require(balances[msg.sender] >= MinSum && balances[msg.sender] >= _am);\n        balances[msg.sender] -= _am;\n        Log.AddMessage(msg.sender, _am, \"Collect\");\n        msg.sender.transfer(_am);\n    }\n\n    function() public payable {\n        Deposit();\n    }",
          "message": "Contract 'DEP_BANK' (patch_7.sol#3-46) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 20,
          "vulnerability_code": "    function SetMinSum(uint _val) public {\n        require(initialized == false);\n        MinSum = _val;",
          "message": "Function 'DEP_BANK.SetMinSum' (patch_7.sol#17-20) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function SetMinSum(uint _val) public {",
          "message": "Parameter '_val' of DEP_BANK.SetMinSum (patch_7.sol#17) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": 25,
          "vulnerability_code": "    function SetLogFile(address _log) public {\n        require(initialized == false);\n        Log = LogFile(_log);",
          "message": "Function 'DEP_BANK.SetLogFile' (patch_7.sol#22-25) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function SetLogFile(address _log) public {",
          "message": "Parameter '_log' of DEP_BANK.SetLogFile (patch_7.sol#22) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": 29,
          "vulnerability_code": "    function Initialized() public {\n        initialized = true;",
          "message": "Function 'DEP_BANK.Initialized' (patch_7.sol#27-29) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": 34,
          "vulnerability_code": "    function Deposit() public payable {\n        balances[msg.sender] += msg.value;\n        Log.AddMessage(msg.sender, msg.value, \"Put\");",
          "message": "Function 'DEP_BANK.Deposit' (patch_7.sol#31-34) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": 41,
          "vulnerability_code": "    function Collect(uint _am) public isInitialized {\n        require(balances[msg.sender] >= MinSum && balances[msg.sender] >= _am);\n        balances[msg.sender] -= _am;\n        Log.AddMessage(msg.sender, _am, \"Collect\");\n        msg.sender.transfer(_am);",
          "message": "Function 'DEP_BANK.Collect' (patch_7.sol#36-41) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Collect(uint _am) public isInitialized {",
          "message": "Parameter '_am' of DEP_BANK.Collect (patch_7.sol#36) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum;",
          "message": "Variable 'DEP_BANK.MinSum' (patch_7.sol#6) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    LogFile Log;",
          "message": "Variable 'DEP_BANK.Log' (patch_7.sol#8) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": 65,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        Message memory msg;\n        msg.Sender = _adr;\n        msg.Time = now;\n        msg.Val = _val;\n        msg.Data = _data;\n        History.push(msg);",
          "message": "Function 'LogFile.AddMessage' (patch_7.sol#58-65) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of LogFile.AddMessage (patch_7.sol#58) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of LogFile.AddMessage (patch_7.sol#58) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of LogFile.AddMessage (patch_7.sol#58) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": "Variable 'LogFile.History' (patch_7.sol#56) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}