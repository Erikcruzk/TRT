{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_17"
      ],
      "vulnerability_findings": [
        {
          "name": "constable-states",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum = 1 ether;",
          "message": "WALLET.MinSum should be constant (patch_4.sol#13)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": 35,
          "vulnerability_code": "    function Collect(uint _am) public {\n        require(Acc[msg.sender].balance >= MinSum, \"Balance must be greater than MinSum\");\n        require(Acc[msg.sender].balance >= _am, \"Balance must be greater than amount to be collected\");\n        require(now > Acc[msg.sender].unlockTime, \"Funds are still locked\");\n\n        Acc[msg.sender].balance -= _am;\n\n        if (msg.sender.call.value(_am)()) {\n            LogFile.AddMessage(msg.sender, _am, \"Collect\");\n        }",
          "message": "WALLET.Collect (patch_4.sol#25-35) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": 39,
          "vulnerability_code": "    function() public payable {\n        Put(0);",
          "message": "WALLET.fallback (patch_4.sol#37-39) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": 59,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        History.push(Message({\n            Sender: _adr,\n            Time: now,\n            Val: _val,\n            Data: _data\n        }));",
          "message": "Log.AddMessage (patch_4.sol#52-59) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": 35,
          "vulnerability_code": "    function Collect(uint _am) public {\n        require(Acc[msg.sender].balance >= MinSum, \"Balance must be greater than MinSum\");\n        require(Acc[msg.sender].balance >= _am, \"Balance must be greater than amount to be collected\");\n        require(now > Acc[msg.sender].unlockTime, \"Funds are still locked\");\n\n        Acc[msg.sender].balance -= _am;\n\n        if (msg.sender.call.value(_am)()) {\n            LogFile.AddMessage(msg.sender, _am, \"Collect\");\n        }",
          "message": "Low level call in WALLET.Collect (patch_4.sol#25-35):\n\t-msg.sender.call.value(_am)() patch_4.sol#32-34\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": 23,
          "vulnerability_code": "    function Put(uint _unlockTime) public payable {\n        Acc[msg.sender].balance += msg.value;\n        Acc[msg.sender].unlockTime = _unlockTime > now ? _unlockTime : now;\n        LogFile.AddMessage(msg.sender, msg.value, \"Put\");",
          "message": "Function 'WALLET.Put' (patch_4.sol#19-23) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Put(uint _unlockTime) public payable {",
          "message": "Parameter '_unlockTime' of WALLET.Put (patch_4.sol#19) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": 35,
          "vulnerability_code": "    function Collect(uint _am) public {\n        require(Acc[msg.sender].balance >= MinSum, \"Balance must be greater than MinSum\");\n        require(Acc[msg.sender].balance >= _am, \"Balance must be greater than amount to be collected\");\n        require(now > Acc[msg.sender].unlockTime, \"Funds are still locked\");\n\n        Acc[msg.sender].balance -= _am;\n\n        if (msg.sender.call.value(_am)()) {\n            LogFile.AddMessage(msg.sender, _am, \"Collect\");\n        }",
          "message": "Function 'WALLET.Collect' (patch_4.sol#25-35) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Collect(uint _am) public {",
          "message": "Parameter '_am' of WALLET.Collect (patch_4.sol#25) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => Holder) public Acc;",
          "message": "Variable 'WALLET.Acc' (patch_4.sol#9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Log LogFile;",
          "message": "Variable 'WALLET.LogFile' (patch_4.sol#11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum = 1 ether;",
          "message": "Variable 'WALLET.MinSum' (patch_4.sol#13) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": 59,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        History.push(Message({\n            Sender: _adr,\n            Time: now,\n            Val: _val,\n            Data: _data\n        }));",
          "message": "Function 'Log.AddMessage' (patch_4.sol#52-59) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of Log.AddMessage (patch_4.sol#52) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of Log.AddMessage (patch_4.sol#52) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of Log.AddMessage (patch_4.sol#52) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": "Variable 'Log.History' (patch_4.sol#50) is not in mixedCase\n"
        }
      ]
    },
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    }
  }
}