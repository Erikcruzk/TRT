pragma solidity 0.6.12;

interface IBEP20 {
  


  function totalSupply() external view returns (uint256);

  


  function decimals() external view returns (uint8);

  


  function symbol() external view returns (string memory);

  


  function name() external view returns (string memory);

  


  function getOwner() external view returns (address);

  


  function balanceOf(address account) external view returns (uint256);

  






  function transfer(address recipient, uint256 amount) external returns (bool);

  






  function allowance(address _owner, address spender) external view returns (uint256);

  













  function approve(address spender, uint256 amount) external returns (bool);

  








  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

  





  event Transfer(address indexed from, address indexed to, uint256 value);

  



  event Approval(address indexed owner, address indexed spender, uint256 value);
}











contract Context {
  
  

  function _msgSender() internal view returns (address payable) {
    return payable(msg.sender);
  }

  function _msgData() internal view returns (bytes memory) {
    this; 
    return msg.data;
  }
}














library SafeMath {
  








  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a, "SafeMath: addition overflow");

    return c;
  }

  








  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    return sub(a, b, "SafeMath: subtraction overflow");
  }

  








  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    require(b <= a, errorMessage);
    uint256 c = a - b;

    return c;
  }

  








  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    
    
    
    if (a == 0) {
      return 0;
    }

    uint256 c = a * b;
    require(c / a == b, "SafeMath: multiplication overflow");

    return c;
  }

  










  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    return div(a, b, "SafeMath: division by zero");
  }

  










  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    
    require(b > 0, errorMessage);
    uint256 c = a / b;
    

    return c;
  }

  










  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    return mod(a, b, "SafeMath: modulo by zero");
  }

  










  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    require(b != 0, errorMessage);
    return a % b;
  }
}













contract Ownable is Context {
  address internal _owner;

  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

  


  constructor () public  {
    address msgSender = _msgSender();
    _owner = msgSender;
    emit OwnershipTransferred(address(0), msgSender);
  }

  


  function owner() public view returns (address) {
    return _owner;
  }

  


  modifier onlyOwner() {
    require(_owner == _msgSender(), "Ownable: caller is not the owner");
    _;
  }

  






  function renounceOwnership() public onlyOwner {
    emit OwnershipTransferred(_owner, address(0));
    _owner = address(0);
  }

  



  function transferOwnership(address newOwner) public onlyOwner {
    _transferOwnership(newOwner);
  }

  


  function _transferOwnership(address newOwner) internal {
    emit OwnershipTransferred(_owner, newOwner);
    _owner = newOwner;
  }
}

function initialize(
    string memory tokenName,
    string memory tokenSymbol,
    uint8 tokenDecimals,
    uint256 totalSupply_
  ) public {
    require(!initialized, "FiatToken: contract is already initialized");
    _name = tokenName;
    _symbol = tokenSymbol;
    _decimals = tokenDecimals;
    _totalSupply = totalSupply_;
    _balances[msg.sender] = _totalSupply;
    _owner = msg.sender;
    initialized = true;
  }