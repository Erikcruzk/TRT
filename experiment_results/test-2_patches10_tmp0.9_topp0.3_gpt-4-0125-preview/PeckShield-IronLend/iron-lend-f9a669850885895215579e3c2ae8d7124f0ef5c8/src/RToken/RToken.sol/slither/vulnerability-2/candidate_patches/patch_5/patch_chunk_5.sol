function _reduceReservesFresh(uint reduceAmount) internal returns (uint) {
    // Administrative check not part of the original vulnerability, but essential for security
    if (msg.sender != admin) {
        return fail(Error.UNAUTHORIZED, FailureInfo.REDUCE_RESERVES_ADMIN_CHECK);
    }

    // Freshness check not part of the original vulnerability, but ensures state consistency
    if (accrualBlockNumber != getBlockNumber()) {
        return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);
    }

    // Accrue interest to ensure total reserves are updated accurately
    uint error = accrueInterest();
    if (error != uint(Error.NO_ERROR)) {
        return fail(Error(error), FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED);
    }

    // Requires cash available to be greater than or equal to reduceAmount
    if (getCashPrior() < reduceAmount) {
        return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);
    }

    // Checking for underflow
    if (reduceAmount > totalReserves) {
        return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);
    }

    // Update total reserves
    totalReserves = sub_(totalReserves, reduceAmount);

    // Move the funds to the admin
    doTransferOut(admin, reduceAmount);

    // Emit an event
    emit ReservesReduced(admin, reduceAmount, totalReserves);

    return uint(Error.NO_ERROR);
}