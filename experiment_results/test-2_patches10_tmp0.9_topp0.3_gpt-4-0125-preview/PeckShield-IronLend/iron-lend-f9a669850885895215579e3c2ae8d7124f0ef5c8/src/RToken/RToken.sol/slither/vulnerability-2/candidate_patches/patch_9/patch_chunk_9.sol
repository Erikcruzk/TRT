function _reduceReservesFresh(uint reduceAmount) internal returns (uint) {
    // Ensure method has not been re-entered
    _notEntered = false;

    uint totalReservesNew;

    if (msg.sender != admin) {
        // Reset reentrancy guard before revert
        _notEntered = true;
        return fail(Error.UNAUTHORIZED, FailureInfo.REDUCE_RESERVES_ADMIN_CHECK);
    }

    if (accrualBlockNumber != getBlockNumber()) {
        // Reset reentrancy guard before revert
        _notEntered = true;
        return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);
    }

    if (getCashPrior() < reduceAmount) {
        // Reset reentrancy guard before revert
        _notEntered = true;
        return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);
    }

    if (reduceAmount > totalReserves) {
        // Reset reentrancy guard before revert
        _notEntered = true;
        return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);
    }

    totalReservesNew = totalReserves - reduceAmount;
    
    require(totalReservesNew <= totalReserves, "reduce reserves unexpected underflow");

    totalReserves = totalReservesNew;

    doTransferOut(admin, reduceAmount);

    emit ReservesReduced(admin, reduceAmount, totalReservesNew);

    // Reset reentrancy guard before exit
    _notEntered = true;

    return uint(Error.NO_ERROR);
}