function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint) {
    // Accrue interest should be done before any state changes to prevent re-entrancy attacks
    uint error = accrueInterest();
    if (error != uint(Error.NO_ERROR)) {
        // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reserve factor change failed.
        return fail(Error(error), FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED);
    }

    // Ensure this function is called by the admin only
    if (msg.sender != admin) {
        return fail(Error.UNAUTHORIZED, FailureInfo.SET_RESERVE_FACTOR_ADMIN_CHECK);
    }

    // Disallow changing the reserve factor if the market is not fresh
    if (accrualBlockNumber != getBlockNumber()) {
        return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK);
    }

    // Ensure the new reserve factor is within bounds
    if (newReserveFactorMantissa > reserveFactorMaxMantissa) {
        return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);
    }

    // Update state variables in a specific order to mitigate potential re-entrancy
    uint oldReserveFactorMantissa = reserveFactorMantissa;
    reserveFactorMantissa = newReserveFactorMantissa;

    // Emit an event for the reserve factor change
    emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);

    return uint(Error.NO_ERROR);
}