function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint) {
    // Ensures that no Ether is sent to this function
    require(msg.value == 0, "Do not send Ether");

    // Accrues interest before setting the new model to ensure the contract is up-to-date
    uint error = accrueInterest();
    if (error != uint(Error.NO_ERROR)) {
        // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted change of interest rate model failed
        return fail(Error(error), FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED);
    }

    // Checks caller is admin
    if (msg.sender != admin) {
        return fail(Error.UNAUTHORIZED, FailureInfo.SET_INTEREST_RATE_MODEL_OWNER_CHECK);
    }

    // Ensure the market is fresh before updating the interest rate model
    if (accrualBlockNumber != getBlockNumber()) {
        return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);
    }

    // Ensure the new interest rate model is a contract before setting it
    require(address(newInterestRateModel) != address(0), "Model cannot be a zero address");
    require(Address.isContract(address(newInterestRateModel)), "Passed InterestRateModel is not a contract");

    // Ensure the new interest rate model has the correct interface
    require(newInterestRateModel.isInterestRateModel(), "marker method returned false");

    // Set the new interest rate model
    InterestRateModel oldInterestRateModel = interestRateModel;
    interestRateModel = newInterestRateModel;

    // Emit event for the interest rate model change
    emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);

    return uint(Error.NO_ERROR);
}