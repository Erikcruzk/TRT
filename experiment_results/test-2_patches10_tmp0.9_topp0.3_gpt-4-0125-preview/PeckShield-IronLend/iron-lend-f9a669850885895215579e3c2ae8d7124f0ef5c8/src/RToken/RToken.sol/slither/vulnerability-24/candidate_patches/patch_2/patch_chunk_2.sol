function repayBorrowFresh(address payer, address borrower, uint repayAmount) internal returns (uint, uint) {
    // The function logic remains the same up to the point of actual repay amount transfer
    uint actualRepayAmount = doTransferIn(payer, vars.repayAmount);

    // Ensure this contract's code execution is complete before calling external contract
    // Update borrower's account state before external call to prevent re-entrancy
    (vars.mathErr, vars.accountBorrowsNew) = subUInt(vars.accountBorrows, vars.actualRepayAmount);
    require(vars.mathErr == MathError.NO_ERROR, "REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED");

    (vars.mathErr, vars.totalBorrowsNew) = subUInt(totalBorrows, vars.actualRepayAmount);
    require(vars.mathErr == MathError.NO_ERROR, "REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED");

    accountBorrows[borrower].principal = vars.accountBorrowsNew;
    accountBorrows[borrower].interestIndex = borrowIndex;
    totalBorrows = vars.totalBorrowsNew;

    // Emit event after state changes
    emit RepayBorrow(payer, borrower, vars.actualRepayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);

    return (uint(Error.NO_ERROR), vars.actualRepayAmount);
}