function _setIronController(IronControllerInterface newIronController) public returns (uint) {
    // Check caller is admin
    if (msg.sender != admin) {
        return fail(Error.UNAUTHORIZED, FailureInfo.SET_IRON_CONTROLLER_OWNER_CHECK);
    }

    IronControllerInterface oldIronController = ironController;

    // Ensure invoke ironController.isIronController() returns true
    require(newIronController.isIronController(), "marker method returned false");

    // Capture the state of the current ironController in a local variable to prevent re-entrancy attack
    IronControllerInterface localIronController = ironController;

    // Set market's ironController to newIronController
    ironController = newIronController;

    // Invoke the isIronController() to ensure the ironController address is correct
    // This call is safe because it's made after the state changes and using a local variable
    require(localIronController.isIronController(), "isIronController check failed on old controller");

    // Emit NewIronController(oldIronController, newIronController)
    emit NewIronController(oldIronController, newIronController);

    return uint(Error.NO_ERROR);
}