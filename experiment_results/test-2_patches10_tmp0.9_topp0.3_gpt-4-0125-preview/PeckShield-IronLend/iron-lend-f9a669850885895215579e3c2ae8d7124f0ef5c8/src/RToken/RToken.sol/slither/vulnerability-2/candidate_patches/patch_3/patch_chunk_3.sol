function _reduceReservesFresh(uint reduceAmount) internal returns (uint) {
    // Unauthorized calls are blocked
    if (msg.sender != admin) {
        return fail(Error.UNAUTHORIZED, FailureInfo.REDUCE_RESERVES_ADMIN_CHECK);
    }

    // Fail if we're trying this on a non-fresh market
    if (accrualBlockNumber != getBlockNumber()) {
        return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);
    }

    // Disallow reducing reserves if it would reduce them to less than required
    if (reduceAmount > totalReserves) {
        return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);
    }

    // Ensure sufficient cash is available
    if (getCashPrior() < reduceAmount) {
        return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);
    }

    // Optimistically subtract the amount to totalReserves
    totalReserves = totalReserves - reduceAmount;

    // Transfer out the reserves to the admin
    doTransferOut(admin, reduceAmount);

    emit ReservesReduced(admin, reduceAmount, totalReserves);

    return uint(Error.NO_ERROR);
}