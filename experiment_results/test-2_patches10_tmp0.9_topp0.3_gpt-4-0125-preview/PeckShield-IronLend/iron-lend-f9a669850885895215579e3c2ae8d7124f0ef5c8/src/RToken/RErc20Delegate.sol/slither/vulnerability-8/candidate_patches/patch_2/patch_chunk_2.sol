function borrowInternal(uint borrowAmount) internal nonReentrant returns (uint) {
    uint error = accrueInterest();
    if (error != uint(Error.NO_ERROR)) {
        return fail(Error(error), FailureInfo.BORROW_ACCRUE_INTEREST_FAILED);
    }

    uint allowed = ironController.borrowAllowed(address(this), msg.sender, borrowAmount);
    if (allowed != 0) {
        return failOpaque(Error.IRON_CONTROLLER_REJECTION, FailureInfo.BORROW_IRON_CONTROLLER_REJECTION, allowed);
    }

    if (accrualBlockNumber != getBlockNumber()) {
        return fail(Error.MARKET_NOT_FRESH, FailureInfo.BORROW_FRESHNESS_CHECK);
    }

    if (getCashPrior() < borrowAmount) {
        return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.BORROW_CASH_NOT_AVAILABLE);
    }

    (MathError mathErr, uint accountBorrows) = borrowBalanceStoredInternal(msg.sender);
    if (mathErr != MathError.NO_ERROR) {
        return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(mathErr));
    }

    (mathErr, uint accountBorrowsNew) = addUInt(accountBorrows, borrowAmount);
    require(mathErr == MathError.NO_ERROR, "REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED");

    (mathErr, uint totalBorrowsNew) = addUInt(totalBorrows, borrowAmount);
    require(mathErr == MathError.NO_ERROR, "REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED");

    doTransferOut(msg.sender, borrowAmount);

    accountBorrows[msg.sender].principal = accountBorrowsNew;
    accountBorrows[msg.sender].interestIndex = borrowIndex;
    totalBorrows = totalBorrowsNew;

    emit Borrow(msg.sender, borrowAmount, accountBorrowsNew, totalBorrowsNew);

    return uint(Error.NO_ERROR);
}