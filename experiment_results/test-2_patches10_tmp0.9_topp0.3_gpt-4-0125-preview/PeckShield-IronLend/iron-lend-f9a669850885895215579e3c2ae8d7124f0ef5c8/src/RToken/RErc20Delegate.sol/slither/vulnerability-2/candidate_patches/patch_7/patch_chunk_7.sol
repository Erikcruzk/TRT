function _reduceReserves(uint reduceAmount) external nonReentrant returns (uint) {
    uint totalReservesNew;

    // Check caller is admin
    if (msg.sender != admin) {
        return fail(Error.UNAUTHORIZED, FailureInfo.REDUCE_RESERVES_ADMIN_CHECK);
    }

    // Fail if market not fresh
    if (accrualBlockNumber != getBlockNumber()) {
        return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);
    }

    // Check cash availability
    if (getCashPrior() < reduceAmount) {
        return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);
    }

    // Verify market's state
    if (reduceAmount > totalReserves) {
        return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);
    }

    // Safe math subtraction
    totalReservesNew = totalReserves - reduceAmount;

    // Underflow check
    require(totalReservesNew <= totalReserves, "reduce reserves underflow");

    // Update state variables
    totalReserves = totalReservesNew;

    // Perform the transfer
    doTransferOut(admin, reduceAmount);

    emit ReservesReduced(admin, reduceAmount, totalReservesNew);

    return uint(Error.NO_ERROR);
}