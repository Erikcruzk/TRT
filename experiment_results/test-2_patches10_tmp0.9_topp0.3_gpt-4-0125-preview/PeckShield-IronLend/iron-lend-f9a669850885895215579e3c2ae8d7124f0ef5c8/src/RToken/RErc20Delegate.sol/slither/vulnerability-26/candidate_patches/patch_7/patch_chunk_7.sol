function seizeInternal(address seizeRToken, address liquidator, address borrower, uint seizeTokens) internal returns (uint) {
    uint allowed = ironController.seizeAllowed(address(this), seizeRToken, liquidator, borrower, seizeTokens);
    if (allowed != 0) {
        return failOpaque(Error.IRON_CONTROLLER_REJECTION, FailureInfo.LIQUIDATE_SEIZE_IRON_CONTROLLER_REJECTION, allowed);
    }

    if (borrower == liquidator) {
        return fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER);
    }

    MathError mathErr;
    uint borroweRTokensNew;
    uint liquidatoRTokensNew;

    (mathErr, borroweRTokensNew) = subUInt(accountTokens[borrower], seizeTokens);
    if (mathErr != MathError.NO_ERROR) {
        return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED, uint(mathErr));
    }

    (mathErr, liquidatoRTokensNew) = addUInt(accountTokens[liquidator], seizeTokens);
    if (mathErr != MathError.NO_ERROR) {
        return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED, uint(mathErr));
    }

    // IMPORTANT: This is the check that prevents re-entrancy.
    require(accountTokens[borrower] >= borroweRTokensNew, "SafeMath: subtraction overflow");
    require(accountTokens[liquidator] + seizeTokens >= accountTokens[liquidator], "SafeMath: addition overflow");

    accountTokens[borrower] = borroweRTokensNew;
    accountTokens[liquidator] = liquidatoRTokensNew;

    emit Transfer(borrower, liquidator, seizeTokens);

    return uint(Error.NO_ERROR);
}