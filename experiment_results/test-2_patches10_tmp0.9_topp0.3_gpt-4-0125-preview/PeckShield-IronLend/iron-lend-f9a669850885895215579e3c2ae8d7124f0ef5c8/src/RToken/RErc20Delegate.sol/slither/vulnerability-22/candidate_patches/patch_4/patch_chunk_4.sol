function initialize(address underlying_,
                    IronControllerInterface ironController_,
                    InterestRateModel interestRateModel_,
                    uint initialExchangeRateMantissa_,
                    string memory name_,
                    string memory symbol_,
                    uint8 decimals_) public {
    // Ensure that this function is only called once
    require(accrualBlockNumber == 0 && borrowIndex == 0, "RToken: may only be initialized once");

    // Ensure caller is admin
    require(msg.sender == admin, "RToken: only admin may initialize the market");

    // Set initial market parameters
    initialExchangeRateMantissa = initialExchangeRateMantissa_;
    require(initialExchangeRateMantissa > 0, "RToken: initial exchange rate must be greater than zero.");

    // Set the IronController
    uint err = _setIronController(ironController_);
    require(err == uint(Error.NO_ERROR), "RToken: setting ironController failed");

    // Initialize block number and borrow index (these will be set by the first user interaction)
    accrualBlockNumber = getBlockNumber();
    borrowIndex = mantissaOne;

    // Set the interest rate model
    err = _setInterestRateModelFresh(interestRateModel_);
    require(err == uint(Error.NO_ERROR), "RToken: setting interest rate model failed");

    // Set RToken details
    name = name_;
    symbol = symbol_;
    decimals = decimals_;

    // Set the underlying asset
    underlying = underlying_;
    EIP20Interface(underlying).totalSupply();  // This acts as a basic check to ensure the provided address adheres to the EIP-20 standard

    // Mark the contract as entered to prevent re-entrancy attacks
    _notEntered = true;
}