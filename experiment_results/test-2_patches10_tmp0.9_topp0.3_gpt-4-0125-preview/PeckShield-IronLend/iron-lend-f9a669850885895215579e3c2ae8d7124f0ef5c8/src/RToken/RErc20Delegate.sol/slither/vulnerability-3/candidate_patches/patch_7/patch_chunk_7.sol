function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint) {
    // accrue interest happens here (removed for brevity)
    // ...code before critical section...

    // Ensure the call to this function is not re-entrant.
    require(!_notEntered, "re-entered");
    _notEntered = false;

    // Keep the original logic that updates the interest rate model
    InterestRateModel oldInterestRateModel = interestRateModel;
    require(newInterestRateModel.isInterestRateModel(), "marker method returned false");

    // Ensure the message sender is the admin of the contract
    require(msg.sender == admin, "only admin may set interest rate model");

    // Accrue interest before updating the interest model
    uint error = accrueInterest();
    if (error != uint(Error.NO_ERROR)) {
        // Reset re-entrancy guard before reverting
        _notEntered = true;
        // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted change of interest rate model failed
        return fail(Error(error), FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED);
    }

    // Perform the interest rate model update
    interestRateModel = newInterestRateModel;

    // Emit an event for the interest rate model update
    emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);

    // Reset re-entrancy guard after the logic is executed
    _notEntered = true;

    // Return no error
    return uint(Error.NO_ERROR);
}