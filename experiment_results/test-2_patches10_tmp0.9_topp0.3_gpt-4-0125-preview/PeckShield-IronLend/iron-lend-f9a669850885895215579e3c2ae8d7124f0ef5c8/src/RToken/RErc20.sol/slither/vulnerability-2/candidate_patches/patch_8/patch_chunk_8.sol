function _reduceReserves(uint reduceAmount) external nonReentrant returns (uint) {
    // Accrue interest before reducing reserves to ensure the total amount
    // of reserves is up-to-date.
    uint error = accrueInterest();
    if (error != uint(Error.NO_ERROR)) {
        // If there's an error accruing interest, return the error.
        return fail(Error(error), FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED);
    }

    // Check if caller is the admin.
    if (msg.sender != admin) {
        return fail(Error.UNAUTHORIZED, FailureInfo.REDUCE_RESERVES_ADMIN_CHECK);
    }

    // Check market freshness.
    if (accrualBlockNumber != getBlockNumber()) {
        return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);
    }

    // Check if there's enough cash available to reduce the reserves.
    if (getCashPrior() < reduceAmount) {
        return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);
    }

    // Ensure the reduce amount does not exceed the available reserves.
    if (reduceAmount > totalReserves) {
        return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);
    }

    // Update total reserves after reduction.
    totalReserves = totalReserves - reduceAmount;

    // Transfer the reduced amount back to admin.
    doTransferOut(admin, reduceAmount);

    // Emit an event for reducing reserves.
    emit ReservesReduced(admin, reduceAmount, totalReserves);

    // Return no error.
    return uint(Error.NO_ERROR);
}