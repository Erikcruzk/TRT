function seizeInternal(address seizeRToken, address liquidator, address borrower, uint seizeTokens) internal returns (uint) {
    // Ensure seizing is allowed
    uint allowed = ironController.seizeAllowed(address(this), seizeRToken, liquidator, borrower, seizeTokens);
    if (allowed != 0) {
        return failOpaque(Error.IRON_CONTROLLER_REJECTION, FailureInfo.LIQUIDATE_SEIZE_IRON_CONTROLLER_REJECTION, allowed);
    }

    // Ensure liquidator and borrower are different
    if (borrower == liquidator) {
        return fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER);
    }

    // Calculate new token balances for borrower and liquidator
    uint borrowerTokensNew = accountTokens[borrower] - seizeTokens;
    uint liquidatorTokensNew = accountTokens[liquidator] + seizeTokens;

    // Update storage mappings with new balances
    accountTokens[borrower] = borrowerTokensNew;
    accountTokens[liquidator] = liquidatorTokensNew;

    // Emit a Transfer event
    emit Transfer(borrower, liquidator, seizeTokens);

    return uint(Error.NO_ERROR);
}