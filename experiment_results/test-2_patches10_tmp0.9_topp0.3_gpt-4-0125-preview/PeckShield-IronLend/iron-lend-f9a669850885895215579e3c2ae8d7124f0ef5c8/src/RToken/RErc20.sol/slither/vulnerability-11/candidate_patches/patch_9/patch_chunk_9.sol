function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal returns (uint) {
    require(redeemTokensIn == 0 || redeemAmountIn == 0, "one of redeemTokensIn or redeemAmountIn must be zero");

    RedeemLocalVars memory vars;

    /* Fail if redeem not allowed */
    uint allowed = ironController.redeemAllowed(address(this), redeemer, redeemTokensIn);
    if (allowed != 0) {
        return failOpaque(Error.IRON_CONTROLLER_REJECTION, FailureInfo.REDEEM_IRON_CONTROLLER_REJECTION, allowed);
    }

    /* Verify market's block number equals current block number */
    if (accrualBlockNumber != getBlockNumber()) {
        return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDEEM_FRESHNESS_CHECK);
    }

    /* Fail gracefully if protocol has insufficient cash */
    if (getCashPrior() < redeemAmountIn) {
        return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDEEM_TRANSFER_OUT_NOT_POSSIBLE);
    }

    /////////////////////////
    // EFFECTS & INTERACTIONS
    // (No safe failures beyond this point)

    if (redeemTokensIn > 0) {
        vars.redeemTokens = redeemTokensIn;
        vars.redeemAmount = redeemTokensIn; // Placeholder assignment
    } else {
        vars.redeemAmount = redeemAmountIn;
        vars.redeemTokens = redeemAmountIn; // Placeholder assignment
    }

    /* We write previously calculated values into storage */
    totalSupply -= vars.redeemTokens;
    accountTokens[redeemer] -= vars.redeemTokens;

    /* We invoke doTransferOut for the redeemer and the redeemAmount.
     *  Note: The RToken must handle variations between ERC-20 and ETH underlying.
     *  On success, the RToken has redeemAmount less of cash.
     *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.
     */
    doTransferOut(redeemer, vars.redeemAmount);

    /* We emit a Transfer event, and a Redeem event */
    emit Transfer(redeemer, address(this), vars.redeemTokens);
    emit Redeem(redeemer, vars.redeemAmount, vars.redeemTokens);

    /* We call the defense hook */
    ironController.redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);

    return uint(Error.NO_ERROR);
}