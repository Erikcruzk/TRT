function _reduceReserves(uint reduceAmount) external returns (uint) {
    uint error = accrueInterest();
    if (error != uint(Error.NO_ERROR)) {
        return fail(Error(error), FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED);
    }
    // Only the admin can call this function
    if (msg.sender != admin) {
        return fail(Error.UNAUTHORIZED, FailureInfo.REDUCE_RESERVES_ADMIN_CHECK);
    }
    // Ensuring the market is fresh
    if (accrualBlockNumber != getBlockNumber()) {
        return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);
    }
    // Check if the protocol has enough cash to reduce the reserves
    if (getCashPrior() < reduceAmount) {
        return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);
    }
    // Checking for underflow
    if (reduceAmount > totalReserves) {
        return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);
    }
    // Safely subtracting reduce amount from total reserves
    totalReserves = totalReserves - reduceAmount;
    // Sending the reduce amount to admin
    doTransferOut(admin, reduceAmount);
    // Emitting the ReservesReduced event
    emit ReservesReduced(admin, reduceAmount, totalReserves);
    return uint(Error.NO_ERROR);
}