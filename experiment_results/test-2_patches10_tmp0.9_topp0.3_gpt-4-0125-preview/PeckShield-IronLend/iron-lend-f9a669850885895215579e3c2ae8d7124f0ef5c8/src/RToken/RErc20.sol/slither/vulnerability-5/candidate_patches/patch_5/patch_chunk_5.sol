function _setIronController(IronControllerInterface newIronController) public returns (uint) {
    // Check caller is admin
    if (msg.sender != admin) {
        return fail(Error.UNAUTHORIZED, FailureInfo.SET_IRON_CONTROLLER_OWNER_CHECK);
    }

    // Store the current ironController for the event emission before it gets updated
    IronControllerInterface oldIronController = ironController;

    // Ensure invoke ironController.isIronController() returns true
    require(newIronController.isIronController(), "marker method returned false");

    // Reentrancy guard
    if (_notEntered) {
        _notEntered = false;

        // Set market's ironController to newIronController
        ironController = newIronController;

        // Emit NewIronController(oldIronController, newIronController)
        emit NewIronController(oldIronController, newIronController);

        // Reentrancy guard reset
        _notEntered = true;

        return uint(Error.NO_ERROR);
    } else {
        // If reentrancy occurs, fail the transaction
        return fail(Error.REENTRANCY, FailureInfo.REENTRANCY_GUARD);
    }
}