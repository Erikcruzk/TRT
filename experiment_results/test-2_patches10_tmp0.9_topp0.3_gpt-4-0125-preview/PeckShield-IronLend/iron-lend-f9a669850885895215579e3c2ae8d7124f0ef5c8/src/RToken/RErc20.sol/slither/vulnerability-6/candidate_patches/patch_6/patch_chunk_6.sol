function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint) {
    // Accrue interest depends on total borrows and reserves, so any change to those needs to first accrue interest
    uint error = accrueInterest();
    if (error != uint(Error.NO_ERROR)) {
        // Only revert on a failed accrual if the change is actually increasing the reserve factor
        // This allows reducing the reserve factor even if accrual fails
        if (newReserveFactorMantissa > reserveFactorMantissa) {
            return fail(Error(error), FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED);
        }
    }

    // Check caller is admin
    if (msg.sender != admin) {
        return fail(Error.UNAUTHORIZED, FailureInfo.SET_RESERVE_FACTOR_ADMIN_CHECK);
    }

    // Verify market's block number equals current block number
    if (accrualBlockNumber != getBlockNumber()) {
        return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK);
    }

    // Check new reserve factor is within bounds
    if (newReserveFactorMantissa > reserveFactorMaxMantissa) {
        return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);
    }

    uint oldReserveFactorMantissa = reserveFactorMantissa;
    reserveFactorMantissa = newReserveFactorMantissa;

    emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);

    return uint(Error.NO_ERROR);
}