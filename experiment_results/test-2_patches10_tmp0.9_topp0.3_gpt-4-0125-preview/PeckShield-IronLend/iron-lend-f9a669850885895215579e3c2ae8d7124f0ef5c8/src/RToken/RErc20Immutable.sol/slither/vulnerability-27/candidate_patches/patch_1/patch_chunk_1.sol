function seizeInternal(address seizeRToken, address liquidator, address borrower, uint seizeTokens) internal returns (uint) {
    // Ensure that this function can only be called from within the contract by a valid transaction.
    require(msg.sender == address(this), "seize is internal");

    // Check with the IronController if the seize is allowed
    uint allowed = ironController.seizeAllowed(address(this), seizeRToken, liquidator, borrower, seizeTokens);
    if (allowed != 0) {
        return failOpaque(Error.IRON_CONTROLLER_REJECTION, FailureInfo.LIQUIDATE_SEIZE_IRON_CONTROLLER_REJECTION, allowed);
    }

    // Fail if borrower = liquidator
    if (borrower == liquidator) {
        return fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER);
    }

    MathError mathErr;
    uint borrowerTokensNew;
    uint liquidatorTokensNew;

    // We calculate the new borrower and liquidator token balances, failing on underflow/overflow:
    (mathErr, borrowerTokensNew) = subUInt(accountTokens[borrower], seizeTokens);
    if (mathErr != MathError.NO_ERROR) {
        return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED, uint(mathErr));
    }

    (mathErr, liquidatorTokensNew) = addUInt(accountTokens[liquidator], seizeTokens);
    if (mathErr != MathError.NO_ERROR) {
        return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED, uint(mathErr));
    }

    // EFFECTS & INTERACTIONS
    accountTokens[borrower] = borrowerTokensNew;
    accountTokens[liquidator] = liquidatorTokensNew;

    // Emit a Transfer event
    emit Transfer(borrower, liquidator, seizeTokens);

    return uint(Error.NO_ERROR);
}