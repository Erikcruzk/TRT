function doTransferOut(address payable to, uint amount) internal {
    EIP20NonStandardInterface token = EIP20NonStandardInterface(underlying);
    
    // Ensuring re-entrancy is not possible by updating state before external call
    totalBorrows = totalBorrows.sub(amount);

    token.transfer(to, amount);

    bool success;
    assembly {
        switch returndatasize()
            case 0 {                      
                success := not(0)          
            }
            case 32 {                     
                returndatacopy(0, 0, 32)
                success := mload(0)        
            }
            default {                     
                revert(0, 0)
            }
    }
    require(success, "TOKEN_TRANSFER_OUT_FAILED");

    // Revert the state update in case of transfer failure.
    if (!success) {
        totalBorrows = totalBorrows.add(amount);
    }
}