function _reduceReservesFresh(uint reduceAmount) internal returns (uint) {
    // Ensuring function is called by the admin.
    if (msg.sender != admin) {
        return fail(Error.UNAUTHORIZED, FailureInfo.REDUCE_RESERVES_ADMIN_CHECK);
    }

    // Update the interest before modifying the reserves.
    uint error = accrueInterest();
    if (error != uint(Error.NO_ERROR)) {
        return fail(Error(error), FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED);
    }

    // Check for freshness.
    if (accrualBlockNumber != getBlockNumber()) {
        return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);
    }

    // Check if reduceAmount is not greater than available cash (prevents underflow).
    if (getCashPrior() < reduceAmount) {
        return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);
    }

    // Check if reduceAmount is not greater than the total reserves (prevents underflow).
    if (reduceAmount > totalReserves) {
        return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);
    }

    // Subtract the amount from reserves.
    totalReserves = totalReserves - reduceAmount;

    // Transfer the reduceAmount to the admin.
    doTransferOut(admin, reduceAmount);

    // Emitting an event that reserves have been reduced.
    emit ReservesReduced(admin, reduceAmount, totalReserves);

    return uint(Error.NO_ERROR);
}