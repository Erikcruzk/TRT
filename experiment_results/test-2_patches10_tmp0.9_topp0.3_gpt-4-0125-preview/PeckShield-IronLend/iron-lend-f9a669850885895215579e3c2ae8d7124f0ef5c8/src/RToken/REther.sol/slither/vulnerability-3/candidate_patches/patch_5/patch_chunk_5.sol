function _reduceReservesFresh(uint reduceAmount) internal returns (uint) {
    // Ensures the call is authorized
    if (msg.sender != admin) {
        return fail(Error.UNAUTHORIZED, FailureInfo.REDUCE_RESERVES_ADMIN_CHECK);
    }

    // Ensures the market is fresh
    if (accrualBlockNumber != getBlockNumber()) {
        return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);
    }

    // Checks there is enough cash available to reduce reserves
    if (getCashPrior() < reduceAmount) {
        return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);
    }

    // Checks the amount doesn't exceed the reserves
    if (reduceAmount > totalReserves) {
        return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);
    }

    // Safety check to prevent underflow
    uint totalReservesNew = totalReserves - reduceAmount;
    require(totalReservesNew <= totalReserves, "reduce reserves underflow");

    // Update the total reserves of the market
    totalReserves = totalReservesNew;

    // Perform the actual transfer
    doTransferOut(admin, reduceAmount);

    // Emit an event
    emit ReservesReduced(admin, reduceAmount, totalReservesNew);

    // Return no error
    return uint(Error.NO_ERROR);
}