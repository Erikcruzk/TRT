pragma solidity ^0.5.16;





contract InterestRateModel {
    
    bool public constant isInterestRateModel = true;

    






    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint);

    







    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) external view returns (uint);

}



pragma solidity ^0.5.16;

contract IronControllerInterface {
    
    bool public constant isIronController = true;

    

    function enterMarkets(address[] calldata RTokens) external returns (uint[] memory);
    function exitMarket(address RToken) external returns (uint);

    

    function mintAllowed(address RToken, address minter, uint mintAmount) external returns (uint);
    function mintVerify(address RToken, address minter, uint mintAmount, uint mintTokens) external;

    function redeemAllowed(address RToken, address redeemer, uint redeemTokens) external returns (uint);
    function redeemVerify(address RToken, address redeemer, uint redeemAmount, uint redeemTokens) external;

    function borrowAllowed(address RToken, address borrower, uint borrowAmount) external returns (uint);
    function borrowVerify(address RToken, address borrower, uint borrowAmount) external;

    function repayBorrowAllowed(
        address RToken,
        address payer,
        address borrower,
        uint repayAmount) external returns (uint);
    function repayBorrowVerify(
        address RToken,
        address payer,
        address borrower,
        uint repayAmount,
        uint borrowerIndex) external;

    function liquidateBorrowAllowed(
        address RTokenBorrowed,
        address RTokenCollateral,
        address liquidator,
        address borrower,
        uint repayAmount) external returns (uint);
    function liquidateBorrowVerify(
        address RTokenBorrowed,
        address RTokenCollateral,
        address liquidator,
        address borrower,
        uint repayAmount,
        uint seizeTokens) external;

    function seizeAllowed(
        address RTokenCollateral,
        address RTokenBorrowed,
        address liquidator,
        address borrower,
        uint seizeTokens) external returns (uint);
    function seizeVerify(
        address RTokenCollateral,
        address RTokenBorrowed,
        address liquidator,
        address borrower,
        uint seizeTokens) external;

    function transferAllowed(address RToken, address src, address dst, uint transfeRTokens) external returns (uint);
    function transferVerify(address RToken, address src, address dst, uint transfeRTokens) external;

    

    function liquidateCalculateSeizeTokens(
        address RTokenBorrowed,
        address RTokenCollateral,
        uint repayAmount) external view returns (uint, uint);
}



pragma solidity ^0.5.16;






interface EIP20NonStandardInterface {

    



    function totalSupply() external view returns (uint256);

    




    function balanceOf(address owner) external view returns (uint256 balance);

    
    
    
    
    

    




    function transfer(address dst, uint256 amount) external;

    
    
    
    
    

    





    function transferFrom(address src, address dst, uint256 amount) external;

    







    function approve(address spender, uint256 amount) external returns (bool success);

    





    function allowance(address owner, address spender) external view returns (uint256 remaining);

    event Transfer(address indexed from, address indexed to, uint256 amount);
    event Approval(address indexed owner, address indexed spender, uint256 amount);
}



pragma solidity ^0.5.16;



contract RTokenStorage {
    


    bool internal _notEntered;

    


    string public name;

    


    string public symbol;

    


    uint8 public decimals;

    



    uint internal constant borrowRateMaxMantissa = 0.0005e16;

    


    uint internal constant reserveFactorMaxMantissa = 1e18;

    


    address payable public admin;

    


    address payable public pendingAdmin;

    


    IronControllerInterface public ironController;

    


    InterestRateModel public interestRateModel;

    


    uint internal initialExchangeRateMantissa;

    


    uint public reserveFactorMantissa;

    


    uint public accrualBlockNumber;

    


    uint public borrowIndex;

    


    uint public totalBorrows;

    


    uint public totalReserves;

    


    uint public totalSupply;

    


    mapping (address => uint) internal accountTokens;

    


    mapping (address => mapping (address => uint)) internal transferAllowances;

    




    struct BorrowSnapshot {
        uint principal;
        uint interestIndex;
    }

    


    mapping(address => BorrowSnapshot) internal accountBorrows;
}

contract RTokenInterface is RTokenStorage {
    


    bool public constant isRToken = true;


    

    


    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);

    


    event Mint(address minter, uint mintAmount, uint mintTokens);

    


    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);

    


    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);

    


    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);

    


    event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address RTokenCollateral, uint seizeTokens);


    

    


    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);

    


    event NewAdmin(address oldAdmin, address newAdmin);

    


    event NewIronController(IronControllerInterface oldIronController, IronControllerInterface newIronController);

    


    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);

    


    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);

    


    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);

    


    event ReservesReduced(address admin, uint reduceAmount, uint newTotalReserves);

    


    event Transfer(address indexed from, address indexed to, uint amount);

    


    event Approval(address indexed owner, address indexed spender, uint amount);

    


    event Failure(uint error, uint info, uint detail);


    

    function transfer(address dst, uint amount) external returns (bool);
    function transferFrom(address src, address dst, uint amount) external returns (bool);
    function approve(address spender, uint amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function balanceOfUnderlying(address owner) external returns (uint);
    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);
    function borrowRatePerBlock() external view returns (uint);
    function supplyRatePerBlock() external view returns (uint);
    function totalBorrowsCurrent() external returns (uint);
    function borrowBalanceCurrent(address account) external returns (uint);
    function borrowBalanceStored(address account) public view returns (uint);
    function exchangeRateCurrent() public returns (uint);
    function exchangeRateStored() public view returns (uint);
    function getCash() external view returns (uint);
    function accrueInterest() public returns (uint);
    function seize(address liquidator, address borrower, uint seizeTokens) external returns (uint);


    

    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);
    function _acceptAdmin() external returns (uint);
    function _setIronController(IronControllerInterface newIronController) public returns (uint);
    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint);
    function _reduceReserves(uint reduceAmount) external returns (uint);
    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint);
}

contract RErc20Storage {
    


    address public underlying;
}

contract RErc20Interface is RErc20Storage {

    

    function mint(uint mintAmount) external returns (uint);
    function redeem(uint redeemTokens) external returns (uint);
    function redeemUnderlying(uint redeemAmount) external returns (uint);
    function borrow(uint borrowAmount) external returns (uint);
    function repayBorrow(uint repayAmount) external returns (uint);
    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);
    function liquidateBorrow(address borrower, uint repayAmount, RTokenInterface RTokenCollateral) external returns (uint);
    function sweepToken(EIP20NonStandardInterface token) external;


    

    function _addReserves(uint addAmount) external returns (uint);
}

contract RDelegationStorage {
    


    address public implementation;
}

contract rDelegatorInterface is RDelegationStorage {
    


    event NewImplementation(address oldImplementation, address newImplementation);

    





    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) public;
}

contract RDelegateInterface is RDelegationStorage {
    




    function _becomeImplementation(bytes memory data) public;

    


    function _resignImplementation() public;
}



pragma solidity ^0.5.16;






// The RErc20Delegator contract does not contain a beginMigration() function directly.
// However, based on the context, here's an example fix for a hypothetical vulnerable beginMigration() function.

function beginMigration() external {
    require(msg.sender == admin, "Only admin can start migration");
    // Additional logic for migration would go here
    // Ensure that the migration logic prevents locking of funds or other vulnerabilities
}