{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Re-Entrancy Vulnerability",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if(msg.sender.call.value(_am)())",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_26"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": 53,
          "vulnerability_code": "    function Collect(uint _am)\n    public\n    payable\n    {\n        if(balances[msg.sender]>=MinSum && balances[msg.sender]>=_am)\n        {\n            if(msg.sender.call.value(_am)())\n            {\n                balances[msg.sender]-=_am;\n                Log.AddMessage(msg.sender,_am,\"Collect\");\n            }\n        }",
          "message": "Reentrancy in PRIVATE_ETH_CELL.Collect (0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol#41-53):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol#47-51)\n\tState variables written after the call(s):\n\t- balances (0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol#49)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": 18,
          "vulnerability_code": "    function SetMinSum(uint _val)\n    public\n    {\n        require(!intitalized);\n        MinSum = _val;",
          "message": "PRIVATE_ETH_CELL.SetMinSum (0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol#13-18) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": 25,
          "vulnerability_code": "    function SetLogFile(address _log)\n    public\n    {\n        require(!intitalized);\n        Log = LogFile(_log);",
          "message": "PRIVATE_ETH_CELL.SetLogFile (0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol#20-25) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": 31,
          "vulnerability_code": "    function Initialized()\n    public\n    {\n        intitalized = true;",
          "message": "PRIVATE_ETH_CELL.Initialized (0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol#27-31) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": 53,
          "vulnerability_code": "    function Collect(uint _am)\n    public\n    payable\n    {\n        if(balances[msg.sender]>=MinSum && balances[msg.sender]>=_am)\n        {\n            if(msg.sender.call.value(_am)())\n            {\n                balances[msg.sender]-=_am;\n                Log.AddMessage(msg.sender,_am,\"Collect\");\n            }\n        }",
          "message": "PRIVATE_ETH_CELL.Collect (0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol#41-53) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": 60,
          "vulnerability_code": "    function() \n    public \n    payable\n    {\n        Deposit();",
          "message": "PRIVATE_ETH_CELL.fallback (0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol#55-60) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": 88,
          "vulnerability_code": "    function AddMessage(address _adr,uint _val,string _data)\n    public\n    {\n        LastMsg.Sender = _adr;\n        LastMsg.Time = now;\n        LastMsg.Val = _val;\n        LastMsg.Data = _data;\n        History.push(LastMsg);",
          "message": "LogFile.AddMessage (0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol#80-88) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in 0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol:\n\t- pragma solidity^0.4.19 (0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": 53,
          "vulnerability_code": "    function Collect(uint _am)\n    public\n    payable\n    {\n        if(balances[msg.sender]>=MinSum && balances[msg.sender]>=_am)\n        {\n            if(msg.sender.call.value(_am)())\n            {\n                balances[msg.sender]-=_am;\n                Log.AddMessage(msg.sender,_am,\"Collect\");\n            }\n        }",
          "message": "Low level call in PRIVATE_ETH_CELL.Collect (0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol#41-53):\n\t-msg.sender.call.value(_am)() 0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol#47-51\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 62,
          "vulnerability_code": "contract PRIVATE_ETH_CELL\n{\n    mapping (address=>uint256) public balances;   \n   \n    uint public MinSum;\n    \n    LogFile Log;\n    \n    bool intitalized;\n    \n    function SetMinSum(uint _val)\n    public\n    {\n        require(!intitalized);\n        MinSum = _val;\n    }\n    \n    function SetLogFile(address _log)\n    public\n    {\n        require(!intitalized);\n        Log = LogFile(_log);\n    }\n    \n    function Initialized()\n    public\n    {\n        intitalized = true;\n    }\n    \n    function Deposit()\n    public\n    payable\n    {\n        balances[msg.sender]+= msg.value;\n        Log.AddMessage(msg.sender,msg.value,\"Put\");\n    }\n    \n    function Collect(uint _am)\n    public\n    payable\n    {\n        if(balances[msg.sender]>=MinSum && balances[msg.sender]>=_am)\n        {\n            if(msg.sender.call.value(_am)())\n            {\n                balances[msg.sender]-=_am;\n                Log.AddMessage(msg.sender,_am,\"Collect\");\n            }\n        }\n    }\n    \n    function() \n    public \n    payable\n    {\n        Deposit();\n    }\n    ",
          "message": "Contract 'PRIVATE_ETH_CELL' (0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol#3-62) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": 18,
          "vulnerability_code": "    function SetMinSum(uint _val)\n    public\n    {\n        require(!intitalized);\n        MinSum = _val;",
          "message": "Function 'PRIVATE_ETH_CELL.SetMinSum' (0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol#13-18) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function SetMinSum(uint _val)",
          "message": "Parameter '_val' of PRIVATE_ETH_CELL.SetMinSum (0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol#13) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": 25,
          "vulnerability_code": "    function SetLogFile(address _log)\n    public\n    {\n        require(!intitalized);\n        Log = LogFile(_log);",
          "message": "Function 'PRIVATE_ETH_CELL.SetLogFile' (0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol#20-25) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function SetLogFile(address _log)",
          "message": "Parameter '_log' of PRIVATE_ETH_CELL.SetLogFile (0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol#20) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": 31,
          "vulnerability_code": "    function Initialized()\n    public\n    {\n        intitalized = true;",
          "message": "Function 'PRIVATE_ETH_CELL.Initialized' (0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol#27-31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": 39,
          "vulnerability_code": "    function Deposit()\n    public\n    payable\n    {\n        balances[msg.sender]+= msg.value;\n        Log.AddMessage(msg.sender,msg.value,\"Put\");",
          "message": "Function 'PRIVATE_ETH_CELL.Deposit' (0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol#33-39) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": 53,
          "vulnerability_code": "    function Collect(uint _am)\n    public\n    payable\n    {\n        if(balances[msg.sender]>=MinSum && balances[msg.sender]>=_am)\n        {\n            if(msg.sender.call.value(_am)())\n            {\n                balances[msg.sender]-=_am;\n                Log.AddMessage(msg.sender,_am,\"Collect\");\n            }\n        }",
          "message": "Function 'PRIVATE_ETH_CELL.Collect' (0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol#41-53) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Collect(uint _am)",
          "message": "Parameter '_am' of PRIVATE_ETH_CELL.Collect (0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol#41) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum;",
          "message": "Variable 'PRIVATE_ETH_CELL.MinSum' (0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol#7) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    LogFile Log;",
          "message": "Variable 'PRIVATE_ETH_CELL.Log' (0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol#9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": 88,
          "vulnerability_code": "    function AddMessage(address _adr,uint _val,string _data)\n    public\n    {\n        LastMsg.Sender = _adr;\n        LastMsg.Time = now;\n        LastMsg.Val = _val;\n        LastMsg.Data = _data;\n        History.push(LastMsg);",
          "message": "Function 'LogFile.AddMessage' (0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol#80-88) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr,uint _val,string _data)",
          "message": "Parameter '_adr' of LogFile.AddMessage (0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol#80) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr,uint _val,string _data)",
          "message": "Parameter '_val' of LogFile.AddMessage (0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol#80) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr,uint _val,string _data)",
          "message": "Parameter '_data' of LogFile.AddMessage (0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol#80) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": "Variable 'LogFile.History' (0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol#76) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message LastMsg;",
          "message": "Variable 'LogFile.LastMsg' (0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol#78) is not in mixedCase\n"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "        History.push(LastMsg);",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "        History.push(LastMsg);",
          "message": null
        }
      ]
    }
  }
}