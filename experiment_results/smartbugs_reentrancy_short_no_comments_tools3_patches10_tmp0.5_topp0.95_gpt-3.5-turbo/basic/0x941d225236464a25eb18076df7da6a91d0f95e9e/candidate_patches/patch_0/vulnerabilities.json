{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_19"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": 18,
          "vulnerability_code": "    function deposit() public payable {\n        require(msg.value > MinDeposit); // use require to validate conditions\n        balances[msg.sender] += msg.value;\n        TransferLog.AddMessage(msg.sender, msg.value, \"Deposit\");\n        lastBlock = block.number;",
          "message": "Reentrancy in ETH_FUND.deposit (patch_0.sol#13-18):\n\tExternal calls:\n\t- TransferLog.AddMessage(msg.sender,msg.value,Deposit) (patch_0.sol#16)\n\tState variables written after the call(s):\n\t- lastBlock (patch_0.sol#17)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinDeposit = 1 ether;",
          "message": "ETH_FUND.MinDeposit should be constant (patch_0.sol#5)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": 18,
          "vulnerability_code": "    function deposit() public payable {\n        require(msg.value > MinDeposit); // use require to validate conditions\n        balances[msg.sender] += msg.value;\n        TransferLog.AddMessage(msg.sender, msg.value, \"Deposit\");\n        lastBlock = block.number;",
          "message": "ETH_FUND.deposit (patch_0.sol#13-18) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": 29,
          "vulnerability_code": "    function cashOut(uint _am) public {\n        require(_am <= balances[msg.sender]); // use require to validate conditions\n        require(block.number > lastBlock); // use require to validate conditions\n        balances[msg.sender] -= _am;\n        if (msg.sender.call.value(_am)()) {\n            TransferLog.AddMessage(msg.sender, _am, \"CashOut\");\n        } else {\n            balances[msg.sender] += _am;\n        }",
          "message": "ETH_FUND.cashOut (patch_0.sol#20-29) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() public payable {}",
          "message": "ETH_FUND.fallback (patch_0.sol#31) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": 51,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        lastMsg.Sender = _adr;\n        lastMsg.Time = now;\n        lastMsg.Val = _val;\n        lastMsg.Data = _data;\n        History.push(lastMsg);",
          "message": "Log.AddMessage (patch_0.sol#45-51) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_0.sol:\n\t- pragma solidity^0.4.19 (patch_0.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": 29,
          "vulnerability_code": "    function cashOut(uint _am) public {\n        require(_am <= balances[msg.sender]); // use require to validate conditions\n        require(block.number > lastBlock); // use require to validate conditions\n        balances[msg.sender] -= _am;\n        if (msg.sender.call.value(_am)()) {\n            TransferLog.AddMessage(msg.sender, _am, \"CashOut\");\n        } else {\n            balances[msg.sender] += _am;\n        }",
          "message": "Low level call in ETH_FUND.cashOut (patch_0.sol#20-29):\n\t-msg.sender.call.value(_am)() patch_0.sol#24-28\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 33,
          "vulnerability_code": "contract ETH_FUND {\n    mapping (address => uint) public balances;\n    uint public MinDeposit = 1 ether;\n    Log TransferLog;\n    uint lastBlock;\n\n    function ETH_FUND(address _log) public {\n        TransferLog = Log(_log);\n    }\n\n    function deposit() public payable {\n        require(msg.value > MinDeposit); // use require to validate conditions\n        balances[msg.sender] += msg.value;\n        TransferLog.AddMessage(msg.sender, msg.value, \"Deposit\");\n        lastBlock = block.number;\n    }\n\n    function cashOut(uint _am) public {\n        require(_am <= balances[msg.sender]); // use require to validate conditions\n        require(block.number > lastBlock); // use require to validate conditions\n        balances[msg.sender] -= _am;\n        if (msg.sender.call.value(_am)()) {\n            TransferLog.AddMessage(msg.sender, _am, \"CashOut\");\n        } else {\n            balances[msg.sender] += _am;\n        }\n    }\n\n    function() public payable {}\n",
          "message": "Contract 'ETH_FUND' (patch_0.sol#3-33) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": 11,
          "vulnerability_code": "    function ETH_FUND(address _log) public {\n        TransferLog = Log(_log);",
          "message": "Function 'ETH_FUND.ETH_FUND' (patch_0.sol#9-11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ETH_FUND(address _log) public {",
          "message": "Parameter '_log' of ETH_FUND.ETH_FUND (patch_0.sol#9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function cashOut(uint _am) public {",
          "message": "Parameter '_am' of ETH_FUND.cashOut (patch_0.sol#20) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinDeposit = 1 ether;",
          "message": "Variable 'ETH_FUND.MinDeposit' (patch_0.sol#5) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Log TransferLog;",
          "message": "Variable 'ETH_FUND.TransferLog' (patch_0.sol#6) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": 51,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        lastMsg.Sender = _adr;\n        lastMsg.Time = now;\n        lastMsg.Val = _val;\n        lastMsg.Data = _data;\n        History.push(lastMsg);",
          "message": "Function 'Log.AddMessage' (patch_0.sol#45-51) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of Log.AddMessage (patch_0.sol#45) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of Log.AddMessage (patch_0.sol#45) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of Log.AddMessage (patch_0.sol#45) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": "Variable 'Log.History' (patch_0.sol#42) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [
        "SYMBOLIC EXECUTION TIMEOUT"
      ],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balances[msg.sender] += msg.value;",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (msg.sender.call.value(_am)()) {",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "            TransferLog.AddMessage(msg.sender, _am, \"CashOut\");",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": null
        }
      ]
    }
  }
}