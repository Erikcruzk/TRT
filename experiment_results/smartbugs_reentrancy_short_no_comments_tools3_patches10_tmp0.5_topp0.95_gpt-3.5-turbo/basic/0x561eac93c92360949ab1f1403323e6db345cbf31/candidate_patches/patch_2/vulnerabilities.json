{
  "smartbugs_completed": true,
  "analyzer_results": {
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balances[msg.sender] += msg.value;",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(msg.sender.call.value(_am)()) {",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "            Log.addMessage(msg.sender, _am, \"Collect\");",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "            balances[msg.sender] -= _am;",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_18"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": 35,
          "vulnerability_code": "    function collect(uint _am) public {\n        require(balances[msg.sender] >= MinSum && balances[msg.sender] >= _am);\n        if(msg.sender.call.value(_am)()) {\n            balances[msg.sender] -= _am;\n            Log.addMessage(msg.sender, _am, \"Collect\");\n        }",
          "message": "Reentrancy in BANK_SAFE.collect (patch_2.sol#29-35):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (patch_2.sol#31-34)\n\tState variables written after the call(s):\n\t- balances (patch_2.sol#32)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": 13,
          "vulnerability_code": "    function setMinSum(uint _val) public {\n        require(!initialized);\n        MinSum = _val;",
          "message": "BANK_SAFE.setMinSum (patch_2.sol#10-13) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 18,
          "vulnerability_code": "    function setLogFile(address _log) public {\n        require(!initialized);\n        Log = LogFile(_log);",
          "message": "BANK_SAFE.setLogFile (patch_2.sol#15-18) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": 22,
          "vulnerability_code": "    function initialize() public {\n        initialized = true;",
          "message": "BANK_SAFE.initialize (patch_2.sol#20-22) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": 35,
          "vulnerability_code": "    function collect(uint _am) public {\n        require(balances[msg.sender] >= MinSum && balances[msg.sender] >= _am);\n        if(msg.sender.call.value(_am)()) {\n            balances[msg.sender] -= _am;\n            Log.addMessage(msg.sender, _am, \"Collect\");\n        }",
          "message": "BANK_SAFE.collect (patch_2.sol#29-35) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": 39,
          "vulnerability_code": "    function() public payable {\n        deposit();",
          "message": "BANK_SAFE.fallback (patch_2.sol#37-39) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": 59,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {\n        lastMsg.sender = _adr;\n        lastMsg.time = now;\n        lastMsg.val = _val;\n        lastMsg.data = _data;\n        history.push(lastMsg);",
          "message": "LogFile.addMessage (patch_2.sol#53-59) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_2.sol:\n\t- pragma solidity^0.4.19 (patch_2.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": 35,
          "vulnerability_code": "    function collect(uint _am) public {\n        require(balances[msg.sender] >= MinSum && balances[msg.sender] >= _am);\n        if(msg.sender.call.value(_am)()) {\n            balances[msg.sender] -= _am;\n            Log.addMessage(msg.sender, _am, \"Collect\");\n        }",
          "message": "Low level call in BANK_SAFE.collect (patch_2.sol#29-35):\n\t-msg.sender.call.value(_am)() patch_2.sol#31-34\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 40,
          "vulnerability_code": "contract BANK_SAFE {\n    mapping (address => uint256) public balances;   \n   \n    uint public MinSum;\n    LogFile public Log;\n    bool initialized;\n    \n    function setMinSum(uint _val) public {\n        require(!initialized);\n        MinSum = _val;\n    }\n    \n    function setLogFile(address _log) public {\n        require(!initialized);\n        Log = LogFile(_log);\n    }\n    \n    function initialize() public {\n        initialized = true;\n    }\n    \n    function deposit() public payable {\n        balances[msg.sender] += msg.value;\n        Log.addMessage(msg.sender, msg.value, \"Put\");\n    }\n    \n    function collect(uint _am) public {\n        require(balances[msg.sender] >= MinSum && balances[msg.sender] >= _am);\n        if(msg.sender.call.value(_am)()) {\n            balances[msg.sender] -= _am;\n            Log.addMessage(msg.sender, _am, \"Collect\");\n        }\n    }\n    \n    function() public payable {\n        deposit();\n    }",
          "message": "Contract 'BANK_SAFE' (patch_2.sol#3-40) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMinSum(uint _val) public {",
          "message": "Parameter '_val' of BANK_SAFE.setMinSum (patch_2.sol#10) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setLogFile(address _log) public {",
          "message": "Parameter '_log' of BANK_SAFE.setLogFile (patch_2.sol#15) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function collect(uint _am) public {",
          "message": "Parameter '_am' of BANK_SAFE.collect (patch_2.sol#29) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum;",
          "message": "Variable 'BANK_SAFE.MinSum' (patch_2.sol#6) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    LogFile public Log;",
          "message": "Variable 'BANK_SAFE.Log' (patch_2.sol#7) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of LogFile.addMessage (patch_2.sol#53) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of LogFile.addMessage (patch_2.sol#53) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of LogFile.addMessage (patch_2.sol#53) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Re-Entrancy Vulnerability",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(msg.sender.call.value(_am)()) {",
          "message": null
        }
      ]
    }
  }
}