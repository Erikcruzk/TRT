{
  "smartbugs_completed": true,
  "analyzer_results": {
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Concurrency bug",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(recipient.send(amountToWithdraw)); // Use send instead of call",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_4"
      ],
      "vulnerability_findings": [
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": 17,
          "vulnerability_code": "    function withdrawReward(address recipient) public {\n        require(!withdrawalInProgress[recipient]); // Prevent reentrancy\n        withdrawalInProgress[recipient] = true;\n        uint amountToWithdraw = rewardsForA[recipient];\n        rewardsForA[recipient] = 0;\n        withdrawalInProgress[recipient] = false;\n        require(recipient.send(amountToWithdraw)); // Use send instead of call",
          "message": "Reentrancy_bonus.withdrawReward (patch_5.sol#10-17) sends eth to arbitrary user\n\tDangerous calls:\n\t- require(bool)(recipient.send(amountToWithdraw)) (patch_5.sol#16)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": 24,
          "vulnerability_code": "    function getFirstWithdrawalBonus(address recipient) public {\n        require(!claimedBonus[recipient]); // Each recipient should only be able to claim the bonus once\n        claimedBonus[recipient] = true;\n        rewardsForA[recipient] = 100;\n        withdrawReward(recipient);",
          "message": "Reentrancy_bonus.getFirstWithdrawalBonus (patch_5.sol#19-24) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 25,
          "vulnerability_code": "contract Reentrancy_bonus{\n\n    mapping (address => uint) private userBalances;\n    mapping (address => bool) private claimedBonus;\n    mapping (address => uint) private rewardsForA;\n    mapping (address => bool) private withdrawalInProgress;\n\n    function withdrawReward(address recipient) public {\n        require(!withdrawalInProgress[recipient]); // Prevent reentrancy\n        withdrawalInProgress[recipient] = true;\n        uint amountToWithdraw = rewardsForA[recipient];\n        rewardsForA[recipient] = 0;\n        withdrawalInProgress[recipient] = false;\n        require(recipient.send(amountToWithdraw)); // Use send instead of call\n    }\n\n    function getFirstWithdrawalBonus(address recipient) public {\n        require(!claimedBonus[recipient]); // Each recipient should only be able to claim the bonus once\n        claimedBonus[recipient] = true;\n        rewardsForA[recipient] = 100;\n        withdrawReward(recipient);\n    }",
          "message": "Contract 'Reentrancy_bonus' (patch_5.sol#3-25) is not in CapWords\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => uint) private userBalances;",
          "message": "Reentrancy_bonus.userBalances (patch_5.sol#5) is never used in Reentrancy_bonus\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}