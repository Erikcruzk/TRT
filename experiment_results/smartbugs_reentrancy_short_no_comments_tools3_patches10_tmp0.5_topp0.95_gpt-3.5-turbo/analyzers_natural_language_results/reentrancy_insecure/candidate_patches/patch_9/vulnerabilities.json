{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_4"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": 16,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!locked[msg.sender]); // check if the user is not already withdrawing\n        uint amountToWithdraw = userBalances[msg.sender];\n        locked[msg.sender] = true; // set the lock\n        userBalances[msg.sender] = 0; // update user balance before making the external call\n        (bool success, ) = msg.sender.call.value(amountToWithdraw)(\"\"); // make the external call\n        require(success);\n        locked[msg.sender] = false; // release the lock",
          "message": "Reentrancy in Reentrancy_secure.withdrawBalance (patch_9.sol#8-16):\n\tExternal calls:\n\t- (success) = msg.sender.call.value(amountToWithdraw)() (patch_9.sol#13)\n\tState variables written after the call(s):\n\t- locked (patch_9.sol#15)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": 16,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!locked[msg.sender]); // check if the user is not already withdrawing\n        uint amountToWithdraw = userBalances[msg.sender];\n        locked[msg.sender] = true; // set the lock\n        userBalances[msg.sender] = 0; // update user balance before making the external call\n        (bool success, ) = msg.sender.call.value(amountToWithdraw)(\"\"); // make the external call\n        require(success);\n        locked[msg.sender] = false; // release the lock",
          "message": "Reentrancy_secure.withdrawBalance (patch_9.sol#8-16) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": 16,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!locked[msg.sender]); // check if the user is not already withdrawing\n        uint amountToWithdraw = userBalances[msg.sender];\n        locked[msg.sender] = true; // set the lock\n        userBalances[msg.sender] = 0; // update user balance before making the external call\n        (bool success, ) = msg.sender.call.value(amountToWithdraw)(\"\"); // make the external call\n        require(success);\n        locked[msg.sender] = false; // release the lock",
          "message": "Low level call in Reentrancy_secure.withdrawBalance (patch_9.sol#8-16):\n\t-(success) = msg.sender.call.value(amountToWithdraw)() patch_9.sol#13\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 17,
          "vulnerability_code": "contract Reentrancy_secure {\n\n    mapping (address => uint) private userBalances;\n    mapping (address => bool) private locked;\n\n    function withdrawBalance() public {\n        require(!locked[msg.sender]); // check if the user is not already withdrawing\n        uint amountToWithdraw = userBalances[msg.sender];\n        locked[msg.sender] = true; // set the lock\n        userBalances[msg.sender] = 0; // update user balance before making the external call\n        (bool success, ) = msg.sender.call.value(amountToWithdraw)(\"\"); // make the external call\n        require(success);\n        locked[msg.sender] = false; // release the lock\n    }",
          "message": "Contract 'Reentrancy_secure' (patch_9.sol#3-17) is not in CapWords\n"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Callstack bug",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = msg.sender.call.value(amountToWithdraw)(\"\"); // make the external call",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = msg.sender.call.value(amountToWithdraw)(\"\"); // make the external call",
          "message": null
        }
      ]
    }
  }
}