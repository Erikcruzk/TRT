{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Callstack Depth Attack Vulnerability",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool res = msg.sender.call.value(amount)();",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_4"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": 9,
          "vulnerability_code": "  function donate(address to) public payable {\n    require(to != address(0)); // added to prevent sending funds to the zero address\n    credit[to] = credit[to] + msg.value;",
          "message": "SimpleDAO.donate (patch_3.sol#6-9) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 16,
          "vulnerability_code": "  function withdraw(uint amount) public {\n    require(amount > 0 && credit[msg.sender] >= amount); // added to prevent withdrawing a negative amount or more than the credit balance\n    credit[msg.sender] = credit[msg.sender] - amount;\n    bool res = msg.sender.call.value(amount)();\n    require(res); // added to check if the external call was successful",
          "message": "SimpleDAO.withdraw (patch_3.sol#11-16) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": 20,
          "vulnerability_code": "  function queryCredit(address to) public view returns (uint){\n    return credit[to];",
          "message": "SimpleDAO.queryCredit (patch_3.sol#18-20) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 16,
          "vulnerability_code": "  function withdraw(uint amount) public {\n    require(amount > 0 && credit[msg.sender] >= amount); // added to prevent withdrawing a negative amount or more than the credit balance\n    credit[msg.sender] = credit[msg.sender] - amount;\n    bool res = msg.sender.call.value(amount)();\n    require(res); // added to check if the external call was successful",
          "message": "Low level call in SimpleDAO.withdraw (patch_3.sol#11-16):\n\t-res = msg.sender.call.value(amount)() patch_3.sol#14\n"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    credit[to] = credit[to] + msg.value;",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool res = msg.sender.call.value(amount)();",
          "message": null
        }
      ]
    }
  }
}