/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.2;

contract SimpleDAO {
  mapping (address => uint) public credit;

  function donate(address to) payable {
    credit[to] += msg.value;
  }

  function withdraw(uint amount) {
    if (credit[msg.sender]>= amount) {
      bool res = msg.sender.call.value(amount)();
      credit[msg.sender]-=amount;
    }
  }

  function queryCredit(address to) returns (uint){
    return credit[to];
  }
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.

/// 1. Osiris Analysis Results
/// 1.1. Vulnerability: integer_over-underflow at Line 7:
    credit[to] += msg.value;/// 1.2. Vulnerability: reentrancy at Line 12:
      bool res = msg.sender.call.value(amount)();/// 1.3. Vulnerability: integer_over-underflow at Line 13:
      credit[msg.sender]-=amount;

/// 2. Slither Analysis Results
/// 2.1. Vulnerability: reentrancy at Line 10-15:
  function withdraw(uint amount) {
    if (credit[msg.sender]>= amount) {
      bool res = msg.sender.call.value(amount)();
      credit[msg.sender]-=amount;
    }
///  Message:Reentrancy in SimpleDAO.withdraw (simple_dao.sol#10-15):
///   	External calls:
///   	- res = msg.sender.call.value(amount)() (simple_dao.sol#12)
///   	State variables written after the call(s):
///   	- credit (simple_dao.sol#13)


/// Repaired Solidity Smart Contract