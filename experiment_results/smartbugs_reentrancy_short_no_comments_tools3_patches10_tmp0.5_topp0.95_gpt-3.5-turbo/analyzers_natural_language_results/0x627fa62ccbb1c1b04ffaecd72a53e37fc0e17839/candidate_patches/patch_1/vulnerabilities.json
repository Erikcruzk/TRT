{
  "smartbugs_completed": true,
  "analyzer_results": {
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "        holders[msg.sender] += msg.value;",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(addr.call.value(weiAmount)());",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": null,
          "vulnerability_code": "        holders[addr] -= weiAmount;",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_11"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 14,
          "vulnerability_code": "    function changeOwner(address addr) public onlyOwner {\n        require(addr != address(0));\n        newOwner = addr;",
          "message": "Ownable.changeOwner (patch_1.sol#11-14) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 20,
          "vulnerability_code": "    function confirmOwner() public {\n        require(msg.sender == newOwner);\n        owner = newOwner;\n        newOwner = address(0);",
          "message": "Ownable.confirmOwner (patch_1.sol#16-20) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": 34,
          "vulnerability_code": "    function withdrawToken(address token, uint256 amount, address to) public onlyOwner {\n        require(token != address(0));\n        require(to != address(0));\n        require(amount > 0);\n        require(token.call(bytes4(keccak256(\"transfer(address,uint256)\")), to, amount));",
          "message": "Token.withdrawToken (patch_1.sol#29-34) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": 48,
          "vulnerability_code": "    function() public payable {\n        deposit();",
          "message": "TokenBank.fallback (patch_1.sol#46-48) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": 62,
          "vulnerability_code": "    function withdrawTokenToHolder(address to, address token, uint amount) public onlyOwner {\n        require(to != address(0));\n        require(token != address(0));\n        require(amount > 0);\n        require(holders[to] > 0);\n        holders[to] = 0;\n        Token(token).withdrawToken(token, amount, to);",
          "message": "TokenBank.withdrawTokenToHolder (patch_1.sol#55-62) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": 70,
          "vulnerability_code": "    function withdrawToHolder(address addr, uint weiAmount) public onlyOwner {\n        require(addr != address(0));\n        require(weiAmount > 0);\n        require(holders[addr] > 0);\n        holders[addr] -= weiAmount;\n        require(addr.call.value(weiAmount)());",
          "message": "TokenBank.withdrawToHolder (patch_1.sol#64-70) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_1.sol:\n\t- pragma solidity^0.4.19 (patch_1.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": 34,
          "vulnerability_code": "    function withdrawToken(address token, uint256 amount, address to) public onlyOwner {\n        require(token != address(0));\n        require(to != address(0));\n        require(amount > 0);\n        require(token.call(bytes4(keccak256(\"transfer(address,uint256)\")), to, amount));",
          "message": "Low level call in Token.withdrawToken (patch_1.sol#29-34):\n\t-require(bool)(token.call(bytes4(keccak256()(transfer(address,uint256))),to,amount)) patch_1.sol#33\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": 70,
          "vulnerability_code": "    function withdrawToHolder(address addr, uint weiAmount) public onlyOwner {\n        require(addr != address(0));\n        require(weiAmount > 0);\n        require(holders[addr] > 0);\n        holders[addr] -= weiAmount;\n        require(addr.call.value(weiAmount)());",
          "message": "Low level call in TokenBank.withdrawToHolder (patch_1.sol#64-70):\n\t-require(bool)(addr.call.value(weiAmount)()) patch_1.sol#69\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 9,
          "vulnerability_code": "    function Ownable() public {\n        owner = msg.sender;",
          "message": "Function 'Ownable.Ownable' (patch_1.sol#7-9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": 44,
          "vulnerability_code": "    function TokenBank() public {\n        owner = msg.sender;\n        minDeposit = 1 ether;",
          "message": "Function 'TokenBank.TokenBank' (patch_1.sol#41-44) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}