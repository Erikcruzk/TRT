{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "    return(keccak256(abi.encodePacked(\"Nu Token\")));",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_5"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": 17,
          "vulnerability_code": "  function airDrop() public {\n    require(bank.supportsToken() == keccak256(abi.encodePacked(name)));\n    require(tokenBalance[msg.sender] == 0);\n    tokenBalance[msg.sender] += 20;",
          "message": "Reentrancy in ModifierEntrancy.airDrop (patch_5.sol#13-17):\n\tExternal calls:\n\t- require(bool)(bank.supportsToken() == keccak256()(abi.encodePacked(name))) (patch_5.sol#14)\n\tState variables written after the call(s):\n\t- tokenBalance (patch_5.sol#16)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": 17,
          "vulnerability_code": "  function airDrop() public {\n    require(bank.supportsToken() == keccak256(abi.encodePacked(name)));\n    require(tokenBalance[msg.sender] == 0);\n    tokenBalance[msg.sender] += 20;",
          "message": "ModifierEntrancy.airDrop (patch_5.sol#13-17) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": 37,
          "vulnerability_code": "  function call(address token) public {\n    ModifierEntrancy(token).airDrop();",
          "message": "attack.call (patch_5.sol#35-37) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(address _bankAddress) public {",
          "message": "Parameter '_bankAddress' of ModifierEntrancy. (patch_5.sol#8) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": 38,
          "vulnerability_code": "contract attack { //An example of a contract that breaks the contract above.\n  bool hasBeenCalled;\n  function supportsToken() external returns(bytes32) {\n    if(!hasBeenCalled) {\n      hasBeenCalled = true;\n      ModifierEntrancy(msg.sender).airDrop();\n    }\n    return(keccak256(abi.encodePacked(\"Nu Token\")));\n  }\n  function call(address token) public {\n    ModifierEntrancy(token).airDrop();\n  }",
          "message": "Contract 'attack' (patch_5.sol#26-38) is not in CapWords\n"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}