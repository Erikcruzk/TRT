{
  "smartbugs_completed": true,
  "analyzer_results": {
    "osiris": {
      "successfull_analysis": true,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 92,
          "vulnerability_to_line": null,
          "vulnerability_code": "        history.push(newMsg);",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 92,
          "vulnerability_to_line": null,
          "vulnerability_code": "        history.push(newMsg);",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_19"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": 24,
          "vulnerability_code": "    function setMinSum(uint _val)\n    public\n    {\n        require(!initialized);\n        MinSum = _val;",
          "message": "MONEY_BOX.setMinSum (patch_1.sol#19-24) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": 31,
          "vulnerability_code": "    function setLogFile(address _log)\n    public\n    {\n        require(!initialized);\n        LogFile = Log(_log);",
          "message": "MONEY_BOX.setLogFile (patch_1.sol#26-31) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": 37,
          "vulnerability_code": "    function initialize()\n    public\n    {\n        initialized = true;",
          "message": "MONEY_BOX.initialize (patch_1.sol#33-37) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": 59,
          "vulnerability_code": "    function collect(uint _am)\n    public\n    {\n        Holder storage acc = Acc[msg.sender];\n        require(acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime);\n        acc.balance -= _am;\n        require(msg.sender.call.value(_am)());\n        LogFile.addMessage(msg.sender, _am, \"Collect\");",
          "message": "MONEY_BOX.collect (patch_1.sol#51-59) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": 66,
          "vulnerability_code": "    function() \n    public \n    payable\n    {\n        put(0);",
          "message": "MONEY_BOX.fallback (patch_1.sol#61-66) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": 93,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data)\n    public\n    {\n        Message memory newMsg = Message({\n            sender: _adr,\n            time: now,\n            val: _val,\n            data: _data\n        });\n        history.push(newMsg);",
          "message": "Log.addMessage (patch_1.sol#83-93) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_1.sol:\n\t- pragma solidity^0.4.19 (patch_1.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": 59,
          "vulnerability_code": "    function collect(uint _am)\n    public\n    {\n        Holder storage acc = Acc[msg.sender];\n        require(acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime);\n        acc.balance -= _am;\n        require(msg.sender.call.value(_am)());\n        LogFile.addMessage(msg.sender, _am, \"Collect\");",
          "message": "Low level call in MONEY_BOX.collect (patch_1.sol#51-59):\n\t-require(bool)(msg.sender.call.value(_am)()) patch_1.sol#57\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 68,
          "vulnerability_code": "contract MONEY_BOX   \n{\n    struct Holder   \n    {\n        uint unlockTime;\n        uint balance;\n    }\n    \n    mapping (address => Holder) public Acc;\n    \n    uint public MinSum;\n    \n    Log LogFile;\n    \n    bool initialized;\n    \n    function setMinSum(uint _val)\n    public\n    {\n        require(!initialized);\n        MinSum = _val;\n    }\n    \n    function setLogFile(address _log)\n    public\n    {\n        require(!initialized);\n        LogFile = Log(_log);\n    }\n    \n    function initialize()\n    public\n    {\n        initialized = true;\n    }\n    \n    function put(uint _lockTime)\n    public\n    payable\n    {\n        Holder storage acc = Acc[msg.sender];\n        acc.balance += msg.value;\n        if(now + _lockTime > acc.unlockTime) {\n            acc.unlockTime = now + _lockTime;\n        }\n        LogFile.addMessage(msg.sender, msg.value, \"Put\");\n    }\n    \n    function collect(uint _am)\n    public\n    {\n        Holder storage acc = Acc[msg.sender];\n        require(acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime);\n        acc.balance -= _am;\n        require(msg.sender.call.value(_am)());\n        LogFile.addMessage(msg.sender, _am, \"Collect\");\n    }\n    \n    function() \n    public \n    payable\n    {\n        put(0);\n    }\n    ",
          "message": "Contract 'MONEY_BOX' (patch_1.sol#3-68) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMinSum(uint _val)",
          "message": "Parameter '_val' of MONEY_BOX.setMinSum (patch_1.sol#19) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setLogFile(address _log)",
          "message": "Parameter '_log' of MONEY_BOX.setLogFile (patch_1.sol#26) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function put(uint _lockTime)",
          "message": "Parameter '_lockTime' of MONEY_BOX.put (patch_1.sol#39) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function collect(uint _am)",
          "message": "Parameter '_am' of MONEY_BOX.collect (patch_1.sol#51) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => Holder) public Acc;",
          "message": "Variable 'MONEY_BOX.Acc' (patch_1.sol#11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum;",
          "message": "Variable 'MONEY_BOX.MinSum' (patch_1.sol#13) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Log LogFile;",
          "message": "Variable 'MONEY_BOX.LogFile' (patch_1.sol#15) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data)",
          "message": "Parameter '_adr' of Log.addMessage (patch_1.sol#83) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data)",
          "message": "Parameter '_val' of Log.addMessage (patch_1.sol#83) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data)",
          "message": "Parameter '_data' of Log.addMessage (patch_1.sol#83) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}