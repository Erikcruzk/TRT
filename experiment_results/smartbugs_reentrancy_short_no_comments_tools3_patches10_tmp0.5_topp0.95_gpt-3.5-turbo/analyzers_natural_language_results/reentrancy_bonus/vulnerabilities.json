{
  "smartbugs_completed": true,
  "analyzer_results": {
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Callstack bug",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = recipient.call.value(amountToWithdraw)(\"\");",
          "message": null
        },
        {
          "name": "Concurrency bug",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = recipient.call.value(amountToWithdraw)(\"\");",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "        rewardsForA[recipient] += 100;",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = recipient.call.value(amountToWithdraw)(\"\");",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_7"
      ],
      "vulnerability_findings": [
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": 15,
          "vulnerability_code": "    function withdrawReward(address recipient) public {\n        uint amountToWithdraw = rewardsForA[recipient];\n        rewardsForA[recipient] = 0;\n        (bool success, ) = recipient.call.value(amountToWithdraw)(\"\");\n        require(success);",
          "message": "Reentrancy_bonus.withdrawReward (reentrancy_bonus.sol#10-15) sends eth to arbitrary user\n\tDangerous calls:\n\t- (success) = recipient.call.value(amountToWithdraw)() (reentrancy_bonus.sol#13)\n"
        },
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 23,
          "vulnerability_code": "    function getFirstWithdrawalBonus(address recipient) public {\n        require(!claimedBonus[recipient]); // Each recipient should only be able to claim the bonus once\n\n        rewardsForA[recipient] += 100;\n        withdrawReward(recipient); // At this point, the caller will be able to execute getFirstWithdrawalBonus again.\n        claimedBonus[recipient] = true;",
          "message": "Reentrancy in Reentrancy_bonus.getFirstWithdrawalBonus (reentrancy_bonus.sol#17-23):\n\tExternal calls:\n\t- withdrawReward(recipient) (reentrancy_bonus.sol#21)\n\tState variables written after the call(s):\n\t- claimedBonus (reentrancy_bonus.sol#22)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 23,
          "vulnerability_code": "    function getFirstWithdrawalBonus(address recipient) public {\n        require(!claimedBonus[recipient]); // Each recipient should only be able to claim the bonus once\n\n        rewardsForA[recipient] += 100;\n        withdrawReward(recipient); // At this point, the caller will be able to execute getFirstWithdrawalBonus again.\n        claimedBonus[recipient] = true;",
          "message": "Reentrancy_bonus.getFirstWithdrawalBonus (reentrancy_bonus.sol#17-23) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;",
          "message": "Detected issues with version pragma in reentrancy_bonus.sol:\n\t- pragma solidity^0.4.0 (reentrancy_bonus.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": 15,
          "vulnerability_code": "    function withdrawReward(address recipient) public {\n        uint amountToWithdraw = rewardsForA[recipient];\n        rewardsForA[recipient] = 0;\n        (bool success, ) = recipient.call.value(amountToWithdraw)(\"\");\n        require(success);",
          "message": "Low level call in Reentrancy_bonus.withdrawReward (reentrancy_bonus.sol#10-15):\n\t-(success) = recipient.call.value(amountToWithdraw)() reentrancy_bonus.sol#13\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 24,
          "vulnerability_code": "contract Reentrancy_bonus{\n\n    // INSECURE\n    mapping (address => uint) private userBalances;\n    mapping (address => bool) private claimedBonus;\n    mapping (address => uint) private rewardsForA;\n\n    function withdrawReward(address recipient) public {\n        uint amountToWithdraw = rewardsForA[recipient];\n        rewardsForA[recipient] = 0;\n        (bool success, ) = recipient.call.value(amountToWithdraw)(\"\");\n        require(success);\n    }\n\n    function getFirstWithdrawalBonus(address recipient) public {\n        require(!claimedBonus[recipient]); // Each recipient should only be able to claim the bonus once\n\n        rewardsForA[recipient] += 100;\n        withdrawReward(recipient); // At this point, the caller will be able to execute getFirstWithdrawalBonus again.\n        claimedBonus[recipient] = true;\n    }",
          "message": "Contract 'Reentrancy_bonus' (reentrancy_bonus.sol#3-24) is not in CapWords\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => uint) private userBalances;",
          "message": "Reentrancy_bonus.userBalances (reentrancy_bonus.sol#6) is never used in Reentrancy_bonus\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Callstack Depth Attack Vulnerability",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = recipient.call.value(amountToWithdraw)(\"\");",
          "message": null
        }
      ]
    }
  }
}