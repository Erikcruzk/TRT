{
  "smartbugs_completed": true,
  "analyzer_results": {
    "osiris": {
      "successfull_analysis": true,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": [
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public history;",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_11"
      ],
      "vulnerability_findings": [
        {
          "name": "constable-states",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public minSum = 1 ether;",
          "message": "W_WALLET.minSum should be constant (patch_0.sol#7)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": 26,
          "vulnerability_code": "    function collect(uint _amount) public {\n        require(balances[msg.sender] >= minSum, \"Balance must be greater than or equal to minSum\");\n        require(balances[msg.sender] >= _amount, \"Balance must be greater than or equal to the amount\");\n        require(now >= unlockTimes[msg.sender], \"Unlock time has not been reached yet\");\n        balances[msg.sender] -= _amount;\n        msg.sender.transfer(_amount);\n        logContract.addMessage(msg.sender, _amount, \"Collect\");",
          "message": "W_WALLET.collect (patch_0.sol#19-26) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": 30,
          "vulnerability_code": "    function() public payable {\n        put(0);",
          "message": "W_WALLET.fallback (patch_0.sol#28-30) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": 44,
          "vulnerability_code": "    function addMessage(address _sender, uint _val, string _data) public {\n        history.push(Message(_sender, _data, _val, now));",
          "message": "Log.addMessage (patch_0.sol#42-44) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 31,
          "vulnerability_code": "contract W_WALLET {\n    mapping (address => uint) public balances;\n    mapping (address => uint) public unlockTimes;\n    Log logContract;\n    uint public minSum = 1 ether;\n\n    constructor(address _logContract) public {\n        logContract = Log(_logContract);\n    }\n\n    function put(uint _unlockTime) public payable {\n        balances[msg.sender] += msg.value;\n        unlockTimes[msg.sender] = _unlockTime > now ? _unlockTime : now;\n        logContract.addMessage(msg.sender, msg.value, \"Put\");\n    }\n\n    function collect(uint _amount) public {\n        require(balances[msg.sender] >= minSum, \"Balance must be greater than or equal to minSum\");\n        require(balances[msg.sender] >= _amount, \"Balance must be greater than or equal to the amount\");\n        require(now >= unlockTimes[msg.sender], \"Unlock time has not been reached yet\");\n        balances[msg.sender] -= _amount;\n        msg.sender.transfer(_amount);\n        logContract.addMessage(msg.sender, _amount, \"Collect\");\n    }\n\n    function() public payable {\n        put(0);\n    }",
          "message": "Contract 'W_WALLET' (patch_0.sol#3-31) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _logContract) public {",
          "message": "Parameter '_logContract' of W_WALLET. (patch_0.sol#9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function put(uint _unlockTime) public payable {",
          "message": "Parameter '_unlockTime' of W_WALLET.put (patch_0.sol#13) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function collect(uint _amount) public {",
          "message": "Parameter '_amount' of W_WALLET.collect (patch_0.sol#19) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _sender, uint _val, string _data) public {",
          "message": "Parameter '_sender' of Log.addMessage (patch_0.sol#42) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _sender, uint _val, string _data) public {",
          "message": "Parameter '_val' of Log.addMessage (patch_0.sol#42) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _sender, uint _val, string _data) public {",
          "message": "Parameter '_data' of Log.addMessage (patch_0.sol#42) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}