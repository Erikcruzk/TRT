/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.18;

contract Reentrance {

  mapping(address => uint) public balances;

  function donate(address _to) public payable {
    balances[_to] += msg.value;
  }

  function balanceOf(address _who) public view returns (uint balance) {
    return balances[_who];
  }

  function withdraw(uint _amount) public {
    if(balances[msg.sender] >= _amount) {
      if(msg.sender.call.value(_amount)()) {
        _amount;
      }
      balances[msg.sender] -= _amount;
    }
  }

  function() public payable {}
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.

/// 1. Osiris Analysis Results
/// 1.1. Vulnerability: integer_over-underflow at Line 8:
    balances[_to] += msg.value;/// 1.2. Vulnerability: reentrancy at Line 17:
      if(msg.sender.call.value(_amount)()) {/// 1.3. Vulnerability: integer_over-underflow at Line 20:
      balances[msg.sender] -= _amount;

/// 2. Slither Analysis Results
/// 2.1. Vulnerability: reentrancy at Line 15-22:
  function withdraw(uint _amount) public {
    if(balances[msg.sender] >= _amount) {
      if(msg.sender.call.value(_amount)()) {
        _amount;
      }
      balances[msg.sender] -= _amount;
    }
///  Message:Reentrancy in Reentrance.withdraw (reentrance.sol#15-22):
///   	External calls:
///   	- msg.sender.call.value(_amount)() (reentrance.sol#17-19)
///   	State variables written after the call(s):
///   	- balances (reentrance.sol#20)


/// Repaired Solidity Smart Contract