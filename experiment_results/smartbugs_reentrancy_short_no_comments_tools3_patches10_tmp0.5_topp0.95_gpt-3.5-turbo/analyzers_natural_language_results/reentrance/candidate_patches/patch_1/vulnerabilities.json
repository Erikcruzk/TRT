{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_10"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 27,
          "vulnerability_code": "  function withdraw(uint _amount) public {\n    require(!locked[msg.sender]);\n    require(balances[msg.sender] >= _amount);\n\n    locked[msg.sender] = true;\n\n    if(msg.sender.call.value(_amount)()) {\n      balances[msg.sender] -= _amount;\n    }\n\n    locked[msg.sender] = false;",
          "message": "Reentrancy in Reentrance.withdraw (patch_1.sol#16-27):\n\tExternal calls:\n\t- msg.sender.call.value(_amount)() (patch_1.sol#22-24)\n\tState variables written after the call(s):\n\t- balances (patch_1.sol#23)\n\t- locked (patch_1.sol#26)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": 10,
          "vulnerability_code": "  function donate(address _to) public payable {\n    balances[_to] += msg.value;",
          "message": "Reentrance.donate (patch_1.sol#8-10) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": 14,
          "vulnerability_code": "  function balanceOf(address _who) public view returns (uint balance) {\n    return balances[_who];",
          "message": "Reentrance.balanceOf (patch_1.sol#12-14) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 27,
          "vulnerability_code": "  function withdraw(uint _amount) public {\n    require(!locked[msg.sender]);\n    require(balances[msg.sender] >= _amount);\n\n    locked[msg.sender] = true;\n\n    if(msg.sender.call.value(_amount)()) {\n      balances[msg.sender] -= _amount;\n    }\n\n    locked[msg.sender] = false;",
          "message": "Reentrance.withdraw (patch_1.sol#16-27) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function() public payable {}",
          "message": "Reentrance.fallback (patch_1.sol#29) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;",
          "message": "Detected issues with version pragma in patch_1.sol:\n\t- pragma solidity^0.4.18 (patch_1.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 27,
          "vulnerability_code": "  function withdraw(uint _amount) public {\n    require(!locked[msg.sender]);\n    require(balances[msg.sender] >= _amount);\n\n    locked[msg.sender] = true;\n\n    if(msg.sender.call.value(_amount)()) {\n      balances[msg.sender] -= _amount;\n    }\n\n    locked[msg.sender] = false;",
          "message": "Low level call in Reentrance.withdraw (patch_1.sol#16-27):\n\t-msg.sender.call.value(_amount)() patch_1.sol#22-24\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function donate(address _to) public payable {",
          "message": "Parameter '_to' of Reentrance.donate (patch_1.sol#8) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address _who) public view returns (uint balance) {",
          "message": "Parameter '_who' of Reentrance.balanceOf (patch_1.sol#12) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function withdraw(uint _amount) public {",
          "message": "Parameter '_amount' of Reentrance.withdraw (patch_1.sol#16) is not in mixedCase\n"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    balances[_to] += msg.value;",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "    if(msg.sender.call.value(_amount)()) {",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "      balances[msg.sender] -= _amount;",
          "message": null
        }
      ]
    }
  }
}