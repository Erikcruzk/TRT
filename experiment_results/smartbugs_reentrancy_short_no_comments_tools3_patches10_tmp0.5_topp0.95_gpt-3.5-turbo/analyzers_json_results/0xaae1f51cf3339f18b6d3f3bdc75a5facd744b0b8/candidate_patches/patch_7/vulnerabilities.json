{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_15"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": 15,
          "vulnerability_code": "    function setMinSum(uint _val) public {\n        require(!initialized);\n        minSum = _val;",
          "message": "DEP_BANK.setMinSum (patch_7.sol#12-15) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 20,
          "vulnerability_code": "    function setLogFile(address _log) public {\n        require(!initialized);\n        log = LogFile(_log);",
          "message": "DEP_BANK.setLogFile (patch_7.sol#17-20) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": 24,
          "vulnerability_code": "    function initialize() public {\n        initialized = true;",
          "message": "DEP_BANK.initialize (patch_7.sol#22-24) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": 36,
          "vulnerability_code": "    function collect(uint _am) public {\n        require(balances[msg.sender] >= minSum && balances[msg.sender] >= _am);\n        balances[msg.sender] -= _am;\n        require(msg.sender.call.value(_am)());\n        log.addMessage(msg.sender, _am, \"Collect\");",
          "message": "DEP_BANK.collect (patch_7.sol#31-36) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": 40,
          "vulnerability_code": "    function() public payable {\n        deposit();",
          "message": "DEP_BANK.fallback (patch_7.sol#38-40) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": 63,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {\n        Message memory newMsg = Message({\n            sender: _adr,\n            time: now,\n            val: _val,\n            data: _data\n        });\n        history.push(newMsg);",
          "message": "LogFile.addMessage (patch_7.sol#55-63) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_7.sol:\n\t- pragma solidity^0.4.19 (patch_7.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": 36,
          "vulnerability_code": "    function collect(uint _am) public {\n        require(balances[msg.sender] >= minSum && balances[msg.sender] >= _am);\n        balances[msg.sender] -= _am;\n        require(msg.sender.call.value(_am)());\n        log.addMessage(msg.sender, _am, \"Collect\");",
          "message": "Low level call in DEP_BANK.collect (patch_7.sol#31-36):\n\t-require(bool)(msg.sender.call.value(_am)()) patch_7.sol#34\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 42,
          "vulnerability_code": "contract DEP_BANK {\n    mapping (address => uint256) public balances;   \n   \n    uint public minSum;\n    \n    LogFile log;\n    \n    bool initialized;\n    \n    function setMinSum(uint _val) public {\n        require(!initialized);\n        minSum = _val;\n    }\n    \n    function setLogFile(address _log) public {\n        require(!initialized);\n        log = LogFile(_log);\n    }\n    \n    function initialize() public {\n        initialized = true;\n    }\n    \n    function deposit() public payable {\n        balances[msg.sender] += msg.value;\n        log.addMessage(msg.sender, msg.value, \"Deposit\");\n    }\n    \n    function collect(uint _am) public {\n        require(balances[msg.sender] >= minSum && balances[msg.sender] >= _am);\n        balances[msg.sender] -= _am;\n        require(msg.sender.call.value(_am)());\n        log.addMessage(msg.sender, _am, \"Collect\");\n    }\n    \n    function() public payable {\n        deposit();\n    }\n    ",
          "message": "Contract 'DEP_BANK' (patch_7.sol#3-42) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMinSum(uint _val) public {",
          "message": "Parameter '_val' of DEP_BANK.setMinSum (patch_7.sol#12) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setLogFile(address _log) public {",
          "message": "Parameter '_log' of DEP_BANK.setLogFile (patch_7.sol#17) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function collect(uint _am) public {",
          "message": "Parameter '_am' of DEP_BANK.collect (patch_7.sol#31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of LogFile.addMessage (patch_7.sol#55) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of LogFile.addMessage (patch_7.sol#55) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of LogFile.addMessage (patch_7.sol#55) is not in mixedCase\n"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [
        "SYMBOLIC EXECUTION TIMEOUT"
      ],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balances[msg.sender] += msg.value;",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender.call.value(_am)());",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "        log.addMessage(msg.sender, _am, \"Collect\");",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "        history.push(newMsg);",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "        history.push(newMsg);",
          "message": null
        }
      ]
    }
  }
}