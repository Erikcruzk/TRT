/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.0;

contract Reentrancy_bonus{

    // INSECURE
    mapping (address => uint) private userBalances;
    mapping (address => bool) private claimedBonus;
    mapping (address => uint) private rewardsForA;

    function withdrawReward(address recipient) public {
        uint amountToWithdraw = rewardsForA[recipient];
        rewardsForA[recipient] = 0;
        (bool success, ) = recipient.call.value(amountToWithdraw)("");
        require(success);
    }

    function getFirstWithdrawalBonus(address recipient) public {
        require(!claimedBonus[recipient]); // Each recipient should only be able to claim the bonus once

        rewardsForA[recipient] += 100;
        withdrawReward(recipient); // At this point, the caller will be able to execute getFirstWithdrawalBonus again.
        claimedBonus[recipient] = true;
    }
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.
{
  "slither": {
    "successfull_analysis": true,
    "errors": [
      "EXIT_CODE_7"
    ],
    "vulnerability_findings": [
      {
        "name": "reentrancy",
        "vulnerability_from_line": 17,
        "vulnerability_to_line": 23,
        "vulnerability_code": "    function getFirstWithdrawalBonus(address recipient) public {\n        require(!claimedBonus[recipient]); // Each recipient should only be able to claim the bonus once\n\n        rewardsForA[recipient] += 100;\n        withdrawReward(recipient); // At this point, the caller will be able to execute getFirstWithdrawalBonus again.\n        claimedBonus[recipient] = true;",
        "message": "Reentrancy in Reentrancy_bonus.getFirstWithdrawalBonus (reentrancy_bonus.sol#17-23):\n\tExternal calls:\n\t- withdrawReward(recipient) (reentrancy_bonus.sol#21)\n\tState variables written after the call(s):\n\t- claimedBonus (reentrancy_bonus.sol#22)\n"
      }
    ]
  },
  "osiris": {
    "successfull_analysis": true,
    "errors": [],
    "vulnerability_findings": [
      {
        "name": "integer_over-underflow",
        "vulnerability_from_line": 20,
        "vulnerability_to_line": null,
        "vulnerability_code": "        rewardsForA[recipient] += 100;",
        "message": null
      },
      {
        "name": "reentrancy",
        "vulnerability_from_line": 13,
        "vulnerability_to_line": null,
        "vulnerability_code": "        (bool success, ) = recipient.call.value(amountToWithdraw)(\"\");",
        "message": null
      }
    ]
  }
}

/// Repaired Solidity Smart Contract