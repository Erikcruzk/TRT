{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_7"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 27,
          "vulnerability_code": "    function withdrawFunds (uint256 _weiToWithdraw) public {\n        require(!locked[msg.sender]);\n        require(balances[msg.sender] >= _weiToWithdraw);\n        // limit the withdrawal\n        require(_weiToWithdraw <= withdrawalLimit);\n        // limit the time allowed to withdraw\n        require(now >= lastWithdrawTime[msg.sender] + 1 weeks);\n        locked[msg.sender] = true;\n        require(msg.sender.call.value(_weiToWithdraw)());\n        balances[msg.sender] -= _weiToWithdraw;\n        lastWithdrawTime[msg.sender] = now;\n        locked[msg.sender] = false;",
          "message": "Reentrancy in EtherStore.withdrawFunds (patch_8.sol#15-27):\n\tExternal calls:\n\t- require(bool)(msg.sender.call.value(_weiToWithdraw)()) (patch_8.sol#23)\n\tState variables written after the call(s):\n\t- balances (patch_8.sol#24)\n\t- lastWithdrawTime (patch_8.sol#25)\n\t- locked (patch_8.sol#26)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public withdrawalLimit = 1 ether;",
          "message": "EtherStore.withdrawalLimit should be constant (patch_8.sol#5)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": 13,
          "vulnerability_code": "    function depositFunds() public payable {\n        require(!locked[msg.sender]);\n        balances[msg.sender] += msg.value;",
          "message": "EtherStore.depositFunds (patch_8.sol#10-13) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 27,
          "vulnerability_code": "    function withdrawFunds (uint256 _weiToWithdraw) public {\n        require(!locked[msg.sender]);\n        require(balances[msg.sender] >= _weiToWithdraw);\n        // limit the withdrawal\n        require(_weiToWithdraw <= withdrawalLimit);\n        // limit the time allowed to withdraw\n        require(now >= lastWithdrawTime[msg.sender] + 1 weeks);\n        locked[msg.sender] = true;\n        require(msg.sender.call.value(_weiToWithdraw)());\n        balances[msg.sender] -= _weiToWithdraw;\n        lastWithdrawTime[msg.sender] = now;\n        locked[msg.sender] = false;",
          "message": "EtherStore.withdrawFunds (patch_8.sol#15-27) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;",
          "message": "Detected issues with version pragma in patch_8.sol:\n\t- pragma solidity^0.4.0 (patch_8.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 27,
          "vulnerability_code": "    function withdrawFunds (uint256 _weiToWithdraw) public {\n        require(!locked[msg.sender]);\n        require(balances[msg.sender] >= _weiToWithdraw);\n        // limit the withdrawal\n        require(_weiToWithdraw <= withdrawalLimit);\n        // limit the time allowed to withdraw\n        require(now >= lastWithdrawTime[msg.sender] + 1 weeks);\n        locked[msg.sender] = true;\n        require(msg.sender.call.value(_weiToWithdraw)());\n        balances[msg.sender] -= _weiToWithdraw;\n        lastWithdrawTime[msg.sender] = now;\n        locked[msg.sender] = false;",
          "message": "Low level call in EtherStore.withdrawFunds (patch_8.sol#15-27):\n\t-require(bool)(msg.sender.call.value(_weiToWithdraw)()) patch_8.sol#23\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawFunds (uint256 _weiToWithdraw) public {",
          "message": "Parameter '_weiToWithdraw' of EtherStore.withdrawFunds (patch_8.sol#15) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balances[msg.sender] += msg.value;",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(now >= lastWithdrawTime[msg.sender] + 1 weeks);",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender.call.value(_weiToWithdraw)());",
          "message": null
        },
        {
          "name": "Time dependency bug",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(now >= lastWithdrawTime[msg.sender] + 1 weeks);",
          "message": null
        }
      ]
    }
  }
}