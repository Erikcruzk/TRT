/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.15;

contract Reentrance {
    mapping (address => uint) userBalance;

    function getBalance(address u) constant returns(uint){
        return userBalance[u];
    }

    function addToBalance() payable{
        userBalance[msg.sender] += msg.value;
    }

    function withdrawBalance(){
        if( ! (msg.sender.call.value(userBalance[msg.sender])() ) ){
            throw;
        }
        userBalance[msg.sender] = 0;
    }
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.
{
  "slither": {
    "successfull_analysis": true,
    "errors": [
      "EXIT_CODE_7"
    ],
    "vulnerability_findings": [
      {
        "name": "reentrancy",
        "vulnerability_from_line": 14,
        "vulnerability_to_line": 19,
        "vulnerability_code": "    function withdrawBalance(){\n        if( ! (msg.sender.call.value(userBalance[msg.sender])() ) ){\n            throw;\n        }\n        userBalance[msg.sender] = 0;",
        "message": "Reentrancy in Reentrance.withdrawBalance (reentrancy_simple.sol#14-19):\n\tExternal calls:\n\t- ! (msg.sender.call.value(userBalance[msg.sender])()) (reentrancy_simple.sol#15-17)\n\tState variables written after the call(s):\n\t- userBalance (reentrancy_simple.sol#18)\n"
      }
    ]
  },
  "osiris": {
    "successfull_analysis": true,
    "errors": [],
    "vulnerability_findings": [
      {
        "name": "integer_over-underflow",
        "vulnerability_from_line": 11,
        "vulnerability_to_line": null,
        "vulnerability_code": "        userBalance[msg.sender] += msg.value;",
        "message": null
      },
      {
        "name": "reentrancy",
        "vulnerability_from_line": 15,
        "vulnerability_to_line": null,
        "vulnerability_code": "        if( ! (msg.sender.call.value(userBalance[msg.sender])() ) ){",
        "message": null
      }
    ]
  }
}

/// Repaired Solidity Smart Contract