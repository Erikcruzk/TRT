{
  "smartbugs_completed": true,
  "analyzer_results": {
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    balances[_to] += msg.value;",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "    msg.sender.transfer(_amount);",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_12"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 9,
          "vulnerability_code": "  function donate(address _to) public payable {\n    balances[_to] += msg.value;",
          "message": "Reentrance.donate (patch_9.sol#7-9) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 13,
          "vulnerability_code": "  function balanceOf(address _who) public view returns (uint balance) {\n    return balances[_who];",
          "message": "Reentrance.balanceOf (patch_9.sol#11-13) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 20,
          "vulnerability_code": "  function withdraw(uint _amount) public {\n    require(!locked[msg.sender]);\n    require(balances[msg.sender] >= _amount);\n    msg.sender.transfer(_amount);\n    balances[msg.sender] -= _amount;",
          "message": "Reentrance.withdraw (patch_9.sol#15-20) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function() public payable {}",
          "message": "Reentrance.fallback (patch_9.sol#22) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 27,
          "vulnerability_code": "  function lock(address _who) public {\n    require(msg.sender == _who);\n    locked[_who] = true;",
          "message": "Reentrance.lock (patch_9.sol#24-27) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": 32,
          "vulnerability_code": "  function unlock(address _who) public {\n    require(msg.sender == _who);\n    locked[_who] = false;",
          "message": "Reentrance.unlock (patch_9.sol#29-32) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;",
          "message": "Detected issues with version pragma in patch_9.sol:\n\t- pragma solidity^0.4.18 (patch_9.sol#1): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function donate(address _to) public payable {",
          "message": "Parameter '_to' of Reentrance.donate (patch_9.sol#7) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address _who) public view returns (uint balance) {",
          "message": "Parameter '_who' of Reentrance.balanceOf (patch_9.sol#11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function withdraw(uint _amount) public {",
          "message": "Parameter '_amount' of Reentrance.withdraw (patch_9.sol#15) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function lock(address _who) public {",
          "message": "Parameter '_who' of Reentrance.lock (patch_9.sol#24) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function unlock(address _who) public {",
          "message": "Parameter '_who' of Reentrance.unlock (patch_9.sol#29) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    balances[_to] += msg.value;",
          "message": null
        }
      ]
    }
  }
}