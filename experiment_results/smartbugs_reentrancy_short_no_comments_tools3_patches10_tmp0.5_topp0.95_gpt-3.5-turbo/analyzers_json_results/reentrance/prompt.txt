/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.18;

contract Reentrance {

  mapping(address => uint) public balances;

  function donate(address _to) public payable {
    balances[_to] += msg.value;
  }

  function balanceOf(address _who) public view returns (uint balance) {
    return balances[_who];
  }

  function withdraw(uint _amount) public {
    if(balances[msg.sender] >= _amount) {
      if(msg.sender.call.value(_amount)()) {
        _amount;
      }
      balances[msg.sender] -= _amount;
    }
  }

  function() public payable {}
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.
{
  "slither": {
    "successfull_analysis": true,
    "errors": [
      "EXIT_CODE_10"
    ],
    "vulnerability_findings": [
      {
        "name": "reentrancy",
        "vulnerability_from_line": 15,
        "vulnerability_to_line": 22,
        "vulnerability_code": "  function withdraw(uint _amount) public {\n    if(balances[msg.sender] >= _amount) {\n      if(msg.sender.call.value(_amount)()) {\n        _amount;\n      }\n      balances[msg.sender] -= _amount;\n    }",
        "message": "Reentrancy in Reentrance.withdraw (reentrance.sol#15-22):\n\tExternal calls:\n\t- msg.sender.call.value(_amount)() (reentrance.sol#17-19)\n\tState variables written after the call(s):\n\t- balances (reentrance.sol#20)\n"
      }
    ]
  },
  "oyente": {
    "successfull_analysis": true,
    "errors": [],
    "vulnerability_findings": [
      {
        "name": "reentrancy",
        "vulnerability_from_line": 17,
        "vulnerability_to_line": null,
        "vulnerability_code": "      if(msg.sender.call.value(_amount)()) {",
        "message": null
      }
    ]
  },
  "osiris": {
    "successfull_analysis": true,
    "errors": [],
    "vulnerability_findings": [
      {
        "name": "integer_over-underflow",
        "vulnerability_from_line": 8,
        "vulnerability_to_line": null,
        "vulnerability_code": "    balances[_to] += msg.value;",
        "message": null
      },
      {
        "name": "reentrancy",
        "vulnerability_from_line": 17,
        "vulnerability_to_line": null,
        "vulnerability_code": "      if(msg.sender.call.value(_amount)()) {",
        "message": null
      },
      {
        "name": "integer_over-underflow",
        "vulnerability_from_line": 20,
        "vulnerability_to_line": null,
        "vulnerability_code": "      balances[msg.sender] -= _amount;",
        "message": null
      }
    ]
  }
}

/// Repaired Solidity Smart Contract