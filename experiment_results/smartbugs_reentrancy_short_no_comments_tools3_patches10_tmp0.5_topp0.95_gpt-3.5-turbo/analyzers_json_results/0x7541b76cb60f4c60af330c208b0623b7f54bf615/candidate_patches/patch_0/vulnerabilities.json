{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_18"
      ],
      "vulnerability_findings": [
        {
          "name": "constable-states",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum = 2 ether;    ",
          "message": "U_BANK.MinSum should be constant (patch_0.sol#15)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": 41,
          "vulnerability_code": "    function Collect(uint _am)\n    public\n    {\n        require(Acc[msg.sender].balance >= MinSum, \"Insufficient balance\");\n        require(Acc[msg.sender].balance >= _am, \"Requested amount exceeds balance\");\n        require(now > Acc[msg.sender].unlockTime, \"Funds are locked\");\n\n        Acc[msg.sender].balance -= _am;\n        LogFile.AddMessage(msg.sender, _am, \"Collect\");\n\n        msg.sender.transfer(_am);",
          "message": "U_BANK.Collect (patch_0.sol#30-41) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": 48,
          "vulnerability_code": "    function() \n    public \n    payable\n    {\n        Put(0);",
          "message": "U_BANK.fallback (patch_0.sol#43-48) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": 69,
          "vulnerability_code": "    function AddMessage(address _adr,uint _val,string _data)\n    public\n    {\n        Message memory newMessage = Message(_adr, _data, _val, now);\n        History.push(newMessage);",
          "message": "Log.AddMessage (patch_0.sol#64-69) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 49,
          "vulnerability_code": "contract U_BANK\n{\n    struct Holder   \n    {\n        uint unlockTime;\n        uint balance;\n    }\n\n    mapping (address => Holder) public Acc;\n\n    Log LogFile;\n\n    uint public MinSum = 2 ether;    \n\n    function U_BANK(address log) public{\n        LogFile = Log(log);\n    }\n\n    function Put(uint _unlockTime)\n    public\n    payable\n    {\n        Acc[msg.sender].balance += msg.value;\n        Acc[msg.sender].unlockTime = _unlockTime > now ? _unlockTime : now;\n        LogFile.AddMessage(msg.sender, msg.value, \"Put\");\n    }\n\n    function Collect(uint _am)\n    public\n    {\n        require(Acc[msg.sender].balance >= MinSum, \"Insufficient balance\");\n        require(Acc[msg.sender].balance >= _am, \"Requested amount exceeds balance\");\n        require(now > Acc[msg.sender].unlockTime, \"Funds are locked\");\n\n        Acc[msg.sender].balance -= _am;\n        LogFile.AddMessage(msg.sender, _am, \"Collect\");\n\n        msg.sender.transfer(_am);\n    }\n\n    function() \n    public \n    payable\n    {\n        Put(0);\n    }",
          "message": "Contract 'U_BANK' (patch_0.sol#3-49) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 19,
          "vulnerability_code": "    function U_BANK(address log) public{\n        LogFile = Log(log);",
          "message": "Function 'U_BANK.U_BANK' (patch_0.sol#17-19) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 28,
          "vulnerability_code": "    function Put(uint _unlockTime)\n    public\n    payable\n    {\n        Acc[msg.sender].balance += msg.value;\n        Acc[msg.sender].unlockTime = _unlockTime > now ? _unlockTime : now;\n        LogFile.AddMessage(msg.sender, msg.value, \"Put\");",
          "message": "Function 'U_BANK.Put' (patch_0.sol#21-28) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Put(uint _unlockTime)",
          "message": "Parameter '_unlockTime' of U_BANK.Put (patch_0.sol#21) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": 41,
          "vulnerability_code": "    function Collect(uint _am)\n    public\n    {\n        require(Acc[msg.sender].balance >= MinSum, \"Insufficient balance\");\n        require(Acc[msg.sender].balance >= _am, \"Requested amount exceeds balance\");\n        require(now > Acc[msg.sender].unlockTime, \"Funds are locked\");\n\n        Acc[msg.sender].balance -= _am;\n        LogFile.AddMessage(msg.sender, _am, \"Collect\");\n\n        msg.sender.transfer(_am);",
          "message": "Function 'U_BANK.Collect' (patch_0.sol#30-41) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Collect(uint _am)",
          "message": "Parameter '_am' of U_BANK.Collect (patch_0.sol#30) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => Holder) public Acc;",
          "message": "Variable 'U_BANK.Acc' (patch_0.sol#11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Log LogFile;",
          "message": "Variable 'U_BANK.LogFile' (patch_0.sol#13) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum = 2 ether;    ",
          "message": "Variable 'U_BANK.MinSum' (patch_0.sol#15) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": 69,
          "vulnerability_code": "    function AddMessage(address _adr,uint _val,string _data)\n    public\n    {\n        Message memory newMessage = Message(_adr, _data, _val, now);\n        History.push(newMessage);",
          "message": "Function 'Log.AddMessage' (patch_0.sol#64-69) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr,uint _val,string _data)",
          "message": "Parameter '_adr' of Log.AddMessage (patch_0.sol#64) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr,uint _val,string _data)",
          "message": "Parameter '_val' of Log.AddMessage (patch_0.sol#64) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr,uint _val,string _data)",
          "message": "Parameter '_data' of Log.AddMessage (patch_0.sol#64) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": "Variable 'Log.History' (patch_0.sol#62) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [
        "SYMBOLIC EXECUTION TIMEOUT"
      ],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.25;",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": null,
          "vulnerability_code": "        History.push(newMessage);",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": null,
          "vulnerability_code": "        History.push(newMessage);",
          "message": null
        },
        {
          "name": "Time dependency bug",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(now > Acc[msg.sender].unlockTime, \"Funds are locked\");",
          "message": null
        }
      ]
    }
  }
}