/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.19;

contract MONEY_BOX   
{
    struct Holder   
    {
        uint unlockTime;
        uint balance;
    }
    
    mapping (address => Holder) public Acc;
    
    uint public MinSum;
    
    Log LogFile;
    
    bool intitalized;
    
    function SetMinSum(uint _val)
    public
    {
        if(intitalized)throw;
        MinSum = _val;
    }
    
    function SetLogFile(address _log)
    public
    {
        if(intitalized)throw;
        LogFile = Log(_log);
    }
    
    function Initialized()
    public
    {
        intitalized = true;
    }
    
    function Put(uint _lockTime)
    public
    payable
    {
        var acc = Acc[msg.sender];
        acc.balance += msg.value;
        if(now+_lockTime>acc.unlockTime)acc.unlockTime=now+_lockTime;
        LogFile.AddMessage(msg.sender,msg.value,"Put");
    }
    
    function Collect(uint _am)
    public
    payable
    {
        var acc = Acc[msg.sender];
        if( acc.balance>=MinSum && acc.balance>=_am && now>acc.unlockTime)
        {
            if(msg.sender.call.value(_am)())
            {
                acc.balance-=_am;
                LogFile.AddMessage(msg.sender,_am,"Collect");
            }
        }
    }
    
    function() 
    public 
    payable
    {
        Put(0);
    }
    
}


contract Log 
{
    struct Message
    {
        address Sender;
        string  Data;
        uint Val;
        uint  Time;
    }
    
    Message[] public History;
    
    Message LastMsg;
    
    function AddMessage(address _adr,uint _val,string _data)
    public
    {
        LastMsg.Sender = _adr;
        LastMsg.Time = now;
        LastMsg.Val = _val;
        LastMsg.Data = _data;
        History.push(LastMsg);
    }
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.
{
  "slither": {
    "successfull_analysis": true,
    "errors": [
      "EXIT_CODE_30"
    ],
    "vulnerability_findings": [
      {
        "name": "reentrancy",
        "vulnerability_from_line": 49,
        "vulnerability_to_line": 62,
        "vulnerability_code": "    function Collect(uint _am)\n    public\n    payable\n    {\n        var acc = Acc[msg.sender];\n        if( acc.balance>=MinSum && acc.balance>=_am && now>acc.unlockTime)\n        {\n            if(msg.sender.call.value(_am)())\n            {\n                acc.balance-=_am;\n                LogFile.AddMessage(msg.sender,_am,\"Collect\");\n            }\n        }",
        "message": "Reentrancy in MONEY_BOX.Collect (0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol#49-62):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol#56-60)\n\tState variables written after the call(s):\n\t- Acc (0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol#58)\n"
      }
    ]
  },
  "osiris": {
    "successfull_analysis": true,
    "errors": [
      "DOCKER_TIMEOUT"
    ],
    "vulnerability_findings": [
      {
        "name": "integer_over-underflow",
        "vulnerability_from_line": 1,
        "vulnerability_to_line": null,
        "vulnerability_code": "pragma solidity ^0.4.19;",
        "message": null
      },
      {
        "name": "integer_over-underflow",
        "vulnerability_from_line": 95,
        "vulnerability_to_line": null,
        "vulnerability_code": "        History.push(LastMsg);",
        "message": null
      },
      {
        "name": "integer_over-underflow",
        "vulnerability_from_line": 95,
        "vulnerability_to_line": null,
        "vulnerability_code": "        History.push(LastMsg);",
        "message": null
      }
    ]
  }
}

/// Repaired Solidity Smart Contract