{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_7"
      ],
      "vulnerability_findings": [
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 19,
          "vulnerability_code": "    function withdrawLeftOver() public {\n        require(payedOut);\n\n        msg.sender.send(this.balance);",
          "message": "Lotto.withdrawLeftOver (lotto.sol#15-19) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.send(this.balance) (lotto.sol#18)\n"
        },
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address public winner;",
          "message": "Lotto.winner (lotto.sol#5) is never initialized. It is used in:\n\t- sendToWinner (lotto.sol#8-13)\n"
        },
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public winAmount;",
          "message": "Lotto.winAmount (lotto.sol#6) is never initialized. It is used in:\n\t- sendToWinner (lotto.sol#8-13)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public winAmount;",
          "message": "Lotto.winAmount should be constant (lotto.sol#6)\nLotto.winner should be constant (lotto.sol#5)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": 13,
          "vulnerability_code": "    function sendToWinner() public {\n        require(!payedOut);\n\n        winner.send(winAmount);\n        payedOut = true;",
          "message": "Lotto.sendToWinner (lotto.sol#8-13) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 19,
          "vulnerability_code": "    function withdrawLeftOver() public {\n        require(payedOut);\n\n        msg.sender.send(this.balance);",
          "message": "Lotto.withdrawLeftOver (lotto.sol#15-19) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;",
          "message": "Detected issues with version pragma in lotto.sol:\n\t- pragma solidity^0.4.18 (lotto.sol#1): it allows old versions\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Callstack Depth Attack Vulnerability",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "        msg.sender.send(this.balance);",
          "message": null
        }
      ]
    },
    "mythril-0.23.15": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Unchecked return value from external call. (SWC 104)",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "        msg.sender.send(this.balance);",
          "message": "The return value of a message call is not checked.\nExternal calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.\nClassification: SWC-104"
        },
        {
          "name": "Unchecked return value from external call. (SWC 104)",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "        winner.send(winAmount);",
          "message": "The return value of a message call is not checked.\nExternal calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.\nClassification: SWC-104"
        }
      ]
    }
  }
}