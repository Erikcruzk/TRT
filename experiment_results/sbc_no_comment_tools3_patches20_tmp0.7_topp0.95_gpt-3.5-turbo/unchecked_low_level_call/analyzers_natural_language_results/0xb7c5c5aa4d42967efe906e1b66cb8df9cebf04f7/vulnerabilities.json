{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_6"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": 13,
          "vulnerability_code": "    function withdraw() public {\n        msg.sender.call.value(balances[msg.sender])();\n        balances[msg.sender] = 0;",
          "message": "Reentrancy in keepMyEther.withdraw (0xb7c5c5aa4d42967efe906e1b66cb8df9cebf04f7.sol#10-13):\n\tExternal calls:\n\t- msg.sender.call.value(balances[msg.sender])() (0xb7c5c5aa4d42967efe906e1b66cb8df9cebf04f7.sol#11)\n\tState variables written after the call(s):\n\t- balances (0xb7c5c5aa4d42967efe906e1b66cb8df9cebf04f7.sol#12)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": 8,
          "vulnerability_code": "    function() public payable {\n        balances[msg.sender] += msg.value;",
          "message": "keepMyEther.fallback (0xb7c5c5aa4d42967efe906e1b66cb8df9cebf04f7.sol#6-8) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": 13,
          "vulnerability_code": "    function withdraw() public {\n        msg.sender.call.value(balances[msg.sender])();\n        balances[msg.sender] = 0;",
          "message": "keepMyEther.withdraw (0xb7c5c5aa4d42967efe906e1b66cb8df9cebf04f7.sol#10-13) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;",
          "message": "Detected issues with version pragma in 0xb7c5c5aa4d42967efe906e1b66cb8df9cebf04f7.sol:\n\t- pragma solidity^0.4.23 (0xb7c5c5aa4d42967efe906e1b66cb8df9cebf04f7.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": 13,
          "vulnerability_code": "    function withdraw() public {\n        msg.sender.call.value(balances[msg.sender])();\n        balances[msg.sender] = 0;",
          "message": "Low level call in keepMyEther.withdraw (0xb7c5c5aa4d42967efe906e1b66cb8df9cebf04f7.sol#10-13):\n\t-msg.sender.call.value(balances[msg.sender])() 0xb7c5c5aa4d42967efe906e1b66cb8df9cebf04f7.sol#11\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 14,
          "vulnerability_code": "contract keepMyEther {\n    mapping(address => uint256) public balances;\n\n    function() public payable {\n        balances[msg.sender] += msg.value;\n    }\n\n    function withdraw() public {\n        msg.sender.call.value(balances[msg.sender])();\n        balances[msg.sender] = 0;\n    }",
          "message": "Contract 'keepMyEther' (0xb7c5c5aa4d42967efe906e1b66cb8df9cebf04f7.sol#3-14) is not in CapWords\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balances[msg.sender] += msg.value;",
          "message": null
        },
        {
          "name": "Re-Entrancy Vulnerability",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "        msg.sender.call.value(balances[msg.sender])();",
          "message": null
        }
      ]
    }
  }
}