{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_9"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() public payable {}",
          "message": "MultiplicatorX4.fallback (patch_2.sol#6) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": 11,
          "vulnerability_code": "    function withdraw() public {\n        require(msg.sender == owner);\n        owner.transfer(this.balance);",
          "message": "MultiplicatorX4.withdraw (patch_2.sol#8-11) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": 17,
          "vulnerability_code": "    function command(address _to, bytes _data) public payable {\n        require(msg.sender == owner);\n\n        require(_to.call.value(msg.value)(_data));",
          "message": "MultiplicatorX4.command (patch_2.sol#13-17) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": 23,
          "vulnerability_code": "    function multiply(address _to) public payable {\n        if (msg.value >= this.balance) {\n            _to.transfer(this.balance + msg.value);\n        }",
          "message": "MultiplicatorX4.multiply (patch_2.sol#19-23) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;",
          "message": "Detected issues with version pragma in patch_2.sol:\n\t- pragma solidity^0.4.18 (patch_2.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": 17,
          "vulnerability_code": "    function command(address _to, bytes _data) public payable {\n        require(msg.sender == owner);\n\n        require(_to.call.value(msg.value)(_data));",
          "message": "Low level call in MultiplicatorX4.command (patch_2.sol#13-17):\n\t-require(bool)(_to.call.value(msg.value)(_data)) patch_2.sol#16\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function command(address _to, bytes _data) public payable {",
          "message": "Parameter '_to' of MultiplicatorX4.command (patch_2.sol#13) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function command(address _to, bytes _data) public payable {",
          "message": "Parameter '_data' of MultiplicatorX4.command (patch_2.sol#13) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function multiply(address _to) public payable {",
          "message": "Parameter '_to' of MultiplicatorX4.multiply (patch_2.sol#19) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}