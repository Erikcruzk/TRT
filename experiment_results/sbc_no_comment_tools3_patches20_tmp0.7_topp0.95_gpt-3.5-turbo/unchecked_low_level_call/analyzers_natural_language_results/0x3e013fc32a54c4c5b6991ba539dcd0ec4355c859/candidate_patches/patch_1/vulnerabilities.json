{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_9"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() public payable {}",
          "message": "MultiplicatorX4.fallback (patch_1.sol#10) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": 15,
          "vulnerability_code": "    function withdraw() public {\n        require(msg.sender == Owner);\n        Owner.transfer(this.balance);",
          "message": "MultiplicatorX4.withdraw (patch_1.sol#12-15) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 21,
          "vulnerability_code": "    function Command(address adr, bytes data) public payable {\n        require(msg.sender == Owner);\n\n        require(adr.call.value(msg.value)(data));",
          "message": "MultiplicatorX4.Command (patch_1.sol#17-21) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": 26,
          "vulnerability_code": "    function multiplicate(address adr) public payable {\n        require(msg.value >= this.balance);\n        adr.transfer(this.balance + msg.value);",
          "message": "MultiplicatorX4.multiplicate (patch_1.sol#23-26) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;",
          "message": "Detected issues with version pragma in patch_1.sol:\n\t- pragma solidity^0.4.18 (patch_1.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 21,
          "vulnerability_code": "    function Command(address adr, bytes data) public payable {\n        require(msg.sender == Owner);\n\n        require(adr.call.value(msg.value)(data));",
          "message": "Low level call in MultiplicatorX4.Command (patch_1.sol#17-21):\n\t-require(bool)(adr.call.value(msg.value)(data)) patch_1.sol#20\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": 8,
          "vulnerability_code": "    function MultiplicatorX4() public {\n        Owner = msg.sender;",
          "message": "Function 'MultiplicatorX4.MultiplicatorX4' (patch_1.sol#6-8) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 21,
          "vulnerability_code": "    function Command(address adr, bytes data) public payable {\n        require(msg.sender == Owner);\n\n        require(adr.call.value(msg.value)(data));",
          "message": "Function 'MultiplicatorX4.Command' (patch_1.sol#17-21) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address public Owner;",
          "message": "Variable 'MultiplicatorX4.Owner' (patch_1.sol#4) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}