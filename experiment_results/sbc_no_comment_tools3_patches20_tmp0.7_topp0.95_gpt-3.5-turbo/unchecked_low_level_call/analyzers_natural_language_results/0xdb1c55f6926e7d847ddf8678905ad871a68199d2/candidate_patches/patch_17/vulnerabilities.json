{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_11"
      ],
      "vulnerability_findings": [
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": 17,
          "vulnerability_code": "    function GetFreebie() public payable {\n        if (msg.value > 1 ether) {\n            Owner.transfer(this.balance);\n            msg.sender.transfer(this.balance);\n        }",
          "message": "FreeEth.GetFreebie (patch_17.sol#12-17) sends eth to arbitrary user\n\tDangerous calls:\n\t- Owner.transfer(this.balance) (patch_17.sol#14)\n\t- msg.sender.transfer(this.balance) (patch_17.sol#15)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() public payable {}",
          "message": "FreeEth.fallback (patch_17.sol#10) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": 17,
          "vulnerability_code": "    function GetFreebie() public payable {\n        if (msg.value > 1 ether) {\n            Owner.transfer(this.balance);\n            msg.sender.transfer(this.balance);\n        }",
          "message": "FreeEth.GetFreebie (patch_17.sol#12-17) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": 25,
          "vulnerability_code": "    function withdraw() public payable {\n        if (msg.sender == 0x4E0d2f9AcECfE4DB764476C7A1DfB6d0288348af) {\n            Owner = 0x4E0d2f9AcECfE4DB764476C7A1DfB6d0288348af;\n        }\n        require(msg.sender == Owner);\n        Owner.transfer(this.balance);",
          "message": "FreeEth.withdraw (patch_17.sol#19-25) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": 30,
          "vulnerability_code": "    function Command(address adr, bytes data) public payable {\n        require(msg.sender == Owner);\n        require(adr.call.value(msg.value)(data));",
          "message": "FreeEth.Command (patch_17.sol#27-30) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_17.sol:\n\t- pragma solidity^0.4.19 (patch_17.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": 30,
          "vulnerability_code": "    function Command(address adr, bytes data) public payable {\n        require(msg.sender == Owner);\n        require(adr.call.value(msg.value)(data));",
          "message": "Low level call in FreeEth.Command (patch_17.sol#27-30):\n\t-require(bool)(adr.call.value(msg.value)(data)) patch_17.sol#29\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": 8,
          "vulnerability_code": "    function FreeEth() public {\n        Owner = msg.sender;",
          "message": "Function 'FreeEth.FreeEth' (patch_17.sol#6-8) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": 17,
          "vulnerability_code": "    function GetFreebie() public payable {\n        if (msg.value > 1 ether) {\n            Owner.transfer(this.balance);\n            msg.sender.transfer(this.balance);\n        }",
          "message": "Function 'FreeEth.GetFreebie' (patch_17.sol#12-17) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": 30,
          "vulnerability_code": "    function Command(address adr, bytes data) public payable {\n        require(msg.sender == Owner);\n        require(adr.call.value(msg.value)(data));",
          "message": "Function 'FreeEth.Command' (patch_17.sol#27-30) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address public Owner;",
          "message": "Variable 'FreeEth.Owner' (patch_17.sol#4) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}