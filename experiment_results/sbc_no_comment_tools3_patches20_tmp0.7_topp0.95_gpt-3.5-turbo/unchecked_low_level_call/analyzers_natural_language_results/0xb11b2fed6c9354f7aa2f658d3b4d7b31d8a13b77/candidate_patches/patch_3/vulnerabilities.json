{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_7"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 17,
          "vulnerability_code": "    function transferOwner(address _owner) public onlyOwner {\n        owner = _owner;",
          "message": "Proxy.transferOwner (patch_3.sol#15-17) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": 21,
          "vulnerability_code": "    function proxy(address target, bytes data) public payable onlyOwner {\n        require(address(target).call.value(msg.value)(data));",
          "message": "Proxy.proxy (patch_3.sol#19-21) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() public payable {}",
          "message": "DepositProxy.fallback (patch_3.sol#27) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": 34,
          "vulnerability_code": "    function vault() public payable {\n        if (msg.sender == tx.origin) {\n            owner = msg.sender;\n            deposit();\n        }",
          "message": "DepositProxy.vault (patch_3.sol#29-34) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": 47,
          "vulnerability_code": "    function withdraw(uint256 amount) public onlyOwner {\n        if (amount > 0 && deposits[msg.sender] >= amount) {\n            msg.sender.transfer(amount);\n            deposits[msg.sender] -= amount;\n        }",
          "message": "DepositProxy.withdraw (patch_3.sol#42-47) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": 21,
          "vulnerability_code": "    function proxy(address target, bytes data) public payable onlyOwner {\n        require(address(target).call.value(msg.value)(data));",
          "message": "Low level call in Proxy.proxy (patch_3.sol#19-21):\n\t-require(bool)(address(target).call.value(msg.value)(data)) patch_3.sol#20\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferOwner(address _owner) public onlyOwner {",
          "message": "Parameter '_owner' of Proxy.transferOwner (patch_3.sol#15) is not in mixedCase\n"
        }
      ]
    }
  }
}