{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_7"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 13,
          "vulnerability_code": "    function transferOwner(address _owner) public onlyOwner {\n        owner = _owner;",
          "message": "Proxy.transferOwner (patch_11.sol#11-13) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 18,
          "vulnerability_code": "    function proxy(address target, bytes data) public payable {\n        require(target != address(0)); // check if target address is not zero address\n        require(target.call.value(msg.value)(data)); // use require to check if call was successful",
          "message": "Proxy.proxy (patch_11.sol#15-18) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() public payable {}",
          "message": "DepositProxy.fallback (patch_11.sol#24) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": 31,
          "vulnerability_code": "    function vault() public payable {\n        if (msg.sender == tx.origin) {\n            owner = msg.sender;\n            deposit();\n        }",
          "message": "DepositProxy.vault (patch_11.sol#26-31) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": 44,
          "vulnerability_code": "    function withdraw(uint256 amount) public onlyOwner {\n        if (amount > 0 && deposits[msg.sender] >= amount) {\n            msg.sender.transfer(amount);\n            deposits[msg.sender] -= amount;\n        }",
          "message": "DepositProxy.withdraw (patch_11.sol#39-44) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 18,
          "vulnerability_code": "    function proxy(address target, bytes data) public payable {\n        require(target != address(0)); // check if target address is not zero address\n        require(target.call.value(msg.value)(data)); // use require to check if call was successful",
          "message": "Low level call in Proxy.proxy (patch_11.sol#15-18):\n\t-require(bool)(target.call.value(msg.value)(data)) patch_11.sol#17\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferOwner(address _owner) public onlyOwner {",
          "message": "Parameter '_owner' of Proxy.transferOwner (patch_11.sol#11) is not in mixedCase\n"
        }
      ]
    }
  }
}