{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_18"
      ],
      "vulnerability_findings": [
        {
          "name": "constable-states",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public displaymultisig;",
          "message": "WedIndex.displaymultisig should be constant (patch_10.sol#39)\nWedIndex.indexdate should be constant (patch_10.sol#37)\nWedIndex.partnernames should be constant (patch_10.sol#36)\nWedIndex.wedaddress should be constant (patch_10.sol#35)\nWedIndex.weddingdate should be constant (patch_10.sol#38)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 19,
          "vulnerability_code": "    function changeOwner(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;",
          "message": "Owned.changeOwner (patch_10.sol#17-19) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 26,
          "vulnerability_code": "    function acceptOwnership() public {\n        if (msg.sender == newOwner) {\n            owner = newOwner;\n            newOwner = address(0);\n        }",
          "message": "Owned.acceptOwnership (patch_10.sol#21-26) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": 31,
          "vulnerability_code": "    function execute(address _dst, uint _value, bytes _data) public onlyOwner returns (bool success) {\n        require(_dst.call.value(_value)(_data));\n        return true;",
          "message": "Owned.execute (patch_10.sol#28-31) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": 53,
          "vulnerability_code": "    function numberOfIndex() public constant returns (uint) {\n        return indexarray.length;",
          "message": "WedIndex.numberOfIndex (patch_10.sol#51-53) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": 78,
          "vulnerability_code": "    function writeIndex(\n        uint _indexdate,\n        string _wedaddress,\n        string _partnernames,\n        uint _weddingdate,\n        uint _displaymultisig\n    ) public onlyOwner {\n        indexarray.push(\n            IndexArray(\n                _indexdate,\n                _wedaddress,\n                _partnernames,\n                _weddingdate,\n                _displaymultisig\n            )\n        );\n        emit IndexWritten(\n            _indexdate,\n            _wedaddress,\n            _partnernames,\n            _weddingdate,\n            _displaymultisig\n        );",
          "message": "WedIndex.writeIndex (patch_10.sol#55-78) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.16;",
          "message": "Detected issues with version pragma in patch_10.sol:\n\t- pragma solidity^0.4.16 (patch_10.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": 31,
          "vulnerability_code": "    function execute(address _dst, uint _value, bytes _data) public onlyOwner returns (bool success) {\n        require(_dst.call.value(_value)(_data));\n        return true;",
          "message": "Low level call in Owned.execute (patch_10.sol#28-31):\n\t-require(bool)(_dst.call.value(_value)(_data)) patch_10.sol#29\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 13,
          "vulnerability_code": "    function Owned() public {\n        owner = msg.sender;",
          "message": "Function 'Owned.Owned' (patch_10.sol#11-13) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function changeOwner(address _newOwner) public onlyOwner {",
          "message": "Parameter '_newOwner' of Owned.changeOwner (patch_10.sol#17) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(address _dst, uint _value, bytes _data) public onlyOwner returns (bool success) {",
          "message": "Parameter '_dst' of Owned.execute (patch_10.sol#28) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(address _dst, uint _value, bytes _data) public onlyOwner returns (bool success) {",
          "message": "Parameter '_value' of Owned.execute (patch_10.sol#28) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(address _dst, uint _value, bytes _data) public onlyOwner returns (bool success) {",
          "message": "Parameter '_data' of Owned.execute (patch_10.sol#28) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _indexdate,",
          "message": "Parameter '_indexdate' of WedIndex.writeIndex (patch_10.sol#56) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _wedaddress,",
          "message": "Parameter '_wedaddress' of WedIndex.writeIndex (patch_10.sol#57) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _partnernames,",
          "message": "Parameter '_partnernames' of WedIndex.writeIndex (patch_10.sol#58) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _weddingdate,",
          "message": "Parameter '_weddingdate' of WedIndex.writeIndex (patch_10.sol#59) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _displaymultisig",
          "message": "Parameter '_displaymultisig' of WedIndex.writeIndex (patch_10.sol#60) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    }
  }
}