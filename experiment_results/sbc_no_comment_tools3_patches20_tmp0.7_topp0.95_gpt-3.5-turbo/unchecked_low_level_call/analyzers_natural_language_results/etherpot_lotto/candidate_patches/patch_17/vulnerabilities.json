{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_10"
      ],
      "vulnerability_findings": [
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": 88,
          "vulnerability_code": "    function cash(uint roundIndex, uint subpotIndex) public {\n        uint subpotsCount = getSubpotsCount(roundIndex);\n\n        if (subpotIndex >= subpotsCount) return;\n\n        uint decisionBlockNumber = getDecisionBlockNumber(roundIndex, subpotIndex);\n\n        if (decisionBlockNumber > block.number) return;\n\n        if (rounds[roundIndex].isCashed[subpotIndex]) return;\n\n        address winner = calculateWinner(roundIndex, subpotIndex);\n        uint subpot = getSubpot(roundIndex);\n\n        if (winner != address(0)) {\n            winner.transfer(subpot);\n            rounds[roundIndex].isCashed[subpotIndex] = true;\n        }",
          "message": "Lotto.cash (patch_17.sol#70-88) sends eth to arbitrary user\n\tDangerous calls:\n\t- winner.transfer(subpot) (patch_17.sol#85)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public blockReward = 5000000000000000000;",
          "message": "Lotto.blockReward should be constant (patch_17.sol#6)\nLotto.blocksPerRound should be constant (patch_17.sol#4)\nLotto.ticketPrice should be constant (patch_17.sol#5)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": 10,
          "vulnerability_code": "    function getBlocksPerRound() public view returns (uint) {\n        return blocksPerRound;",
          "message": "Lotto.getBlocksPerRound (patch_17.sol#8-10) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": 14,
          "vulnerability_code": "    function getTicketPrice() public view returns (uint) {\n        return ticketPrice;",
          "message": "Lotto.getTicketPrice (patch_17.sol#12-14) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": 32,
          "vulnerability_code": "    function getIsCashed(uint roundIndex, uint subpotIndex) public view returns (bool) {\n        return rounds[roundIndex].isCashed[subpotIndex];",
          "message": "Lotto.getIsCashed (patch_17.sol#30-32) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": 88,
          "vulnerability_code": "    function cash(uint roundIndex, uint subpotIndex) public {\n        uint subpotsCount = getSubpotsCount(roundIndex);\n\n        if (subpotIndex >= subpotsCount) return;\n\n        uint decisionBlockNumber = getDecisionBlockNumber(roundIndex, subpotIndex);\n\n        if (decisionBlockNumber > block.number) return;\n\n        if (rounds[roundIndex].isCashed[subpotIndex]) return;\n\n        address winner = calculateWinner(roundIndex, subpotIndex);\n        uint subpot = getSubpot(roundIndex);\n\n        if (winner != address(0)) {\n            winner.transfer(subpot);\n            rounds[roundIndex].isCashed[subpotIndex] = true;\n        }",
          "message": "Lotto.cash (patch_17.sol#70-88) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": 92,
          "vulnerability_code": "    function getBuyers(uint roundIndex) public view returns (address[]) {\n        return rounds[roundIndex].buyers;",
          "message": "Lotto.getBuyers (patch_17.sol#90-92) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": 96,
          "vulnerability_code": "    function getTicketsCountByBuyer(uint roundIndex, address buyer) public view returns (uint) {\n        return rounds[roundIndex].ticketsCountByBuyer[buyer];",
          "message": "Lotto.getTicketsCountByBuyer (patch_17.sol#94-96) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": 100,
          "vulnerability_code": "    function getPot(uint roundIndex) public view returns (uint) {\n        return rounds[roundIndex].pot;",
          "message": "Lotto.getPot (patch_17.sol#98-100) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": 123,
          "vulnerability_code": "    function () public payable {\n        uint roundIndex = getRoundIndex();\n        uint value = msg.value - (msg.value % ticketPrice);\n\n        if (value == 0) return;\n\n        if (value < msg.value) {\n            msg.sender.transfer(msg.value - value);\n        }\n\n        uint ticketsCount = value / ticketPrice;\n        rounds[roundIndex].ticketsCount += ticketsCount;\n\n        if (rounds[roundIndex].ticketsCountByBuyer[msg.sender] == 0) {\n            rounds[roundIndex].buyers.push(msg.sender);\n        }\n\n        rounds[roundIndex].ticketsCountByBuyer[msg.sender] += ticketsCount;\n        rounds[roundIndex].ticketsCount += ticketsCount;\n\n        rounds[roundIndex].pot += value;",
          "message": "Lotto.fallback (patch_17.sol#102-123) should be declared external\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    }
  }
}