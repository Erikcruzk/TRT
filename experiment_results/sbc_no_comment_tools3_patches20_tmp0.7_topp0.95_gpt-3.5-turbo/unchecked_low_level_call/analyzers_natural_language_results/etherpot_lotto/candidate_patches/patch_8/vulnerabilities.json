{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_14"
      ],
      "vulnerability_findings": [
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": 110,
          "vulnerability_code": "    function cash(uint roundIndex, uint subpotIndex) public {\n        uint subpotsCount = getSubpotsCount(roundIndex);\n\n        if (subpotIndex >= subpotsCount) {\n            return;\n        }\n\n        uint decisionBlockNumber = getDecisionBlockNumber(roundIndex, subpotIndex);\n\n        if (decisionBlockNumber > block.number) {\n            return;\n        }\n\n        if (rounds[roundIndex].isCashed[subpotIndex]) {\n            return;\n        }\n\n        address winner = calculateWinner(roundIndex, subpotIndex);\n        uint subpot = getSubpot(roundIndex);\n\n        winner.transfer(subpot);\n\n        rounds[roundIndex].isCashed[subpotIndex] = true;",
          "message": "Lotto.cash (patch_8.sol#87-110) sends eth to arbitrary user\n\tDangerous calls:\n\t- winner.transfer(subpot) (patch_8.sol#107)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public blockReward = 5000000000000000000;",
          "message": "Lotto.blockReward should be constant (patch_8.sol#8)\nLotto.blocksPerRound should be constant (patch_8.sol#4)\nLotto.ticketPrice should be constant (patch_8.sol#6)\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32 decisionBlockHash = block.blockhash(decisionBlockNumber);",
          "message": "Deprecated standard detected @ patch_8.sol#49:\n\t- Usage of \"block.blockhash()\" should be replaced with \"blockhash()\"\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return block.blockhash(blockIndex);",
          "message": "Deprecated standard detected @ patch_8.sol#113:\n\t- Usage of \"block.blockhash()\" should be replaced with \"blockhash()\"\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": 12,
          "vulnerability_code": "    function getBlocksPerRound() public view returns (uint) {\n        return blocksPerRound;",
          "message": "Lotto.getBlocksPerRound (patch_8.sol#10-12) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": 16,
          "vulnerability_code": "    function getTicketPrice() public view returns (uint) {\n        return ticketPrice;",
          "message": "Lotto.getTicketPrice (patch_8.sol#14-16) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": 37,
          "vulnerability_code": "    function getIsCashed(\n        uint roundIndex,\n        uint subpotIndex\n    ) public view returns (bool) {\n        return rounds[roundIndex].isCashed[subpotIndex];",
          "message": "Lotto.getIsCashed (patch_8.sol#32-37) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": 110,
          "vulnerability_code": "    function cash(uint roundIndex, uint subpotIndex) public {\n        uint subpotsCount = getSubpotsCount(roundIndex);\n\n        if (subpotIndex >= subpotsCount) {\n            return;\n        }\n\n        uint decisionBlockNumber = getDecisionBlockNumber(roundIndex, subpotIndex);\n\n        if (decisionBlockNumber > block.number) {\n            return;\n        }\n\n        if (rounds[roundIndex].isCashed[subpotIndex]) {\n            return;\n        }\n\n        address winner = calculateWinner(roundIndex, subpotIndex);\n        uint subpot = getSubpot(roundIndex);\n\n        winner.transfer(subpot);\n\n        rounds[roundIndex].isCashed[subpotIndex] = true;",
          "message": "Lotto.cash (patch_8.sol#87-110) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": 114,
          "vulnerability_code": "    function getHashOfBlock(uint blockIndex) public view returns (bytes32) {\n        return block.blockhash(blockIndex);",
          "message": "Lotto.getHashOfBlock (patch_8.sol#112-114) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": 121,
          "vulnerability_code": "    function getBuyers(\n        uint roundIndex,\n        address buyer\n    ) public view returns (address[]) {\n        return rounds[roundIndex].buyers;",
          "message": "Lotto.getBuyers (patch_8.sol#116-121) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": 128,
          "vulnerability_code": "    function getTicketsCountByBuyer(\n        uint roundIndex,\n        address buyer\n    ) public view returns (uint) {\n        return rounds[roundIndex].ticketsCountByBuyer[buyer];",
          "message": "Lotto.getTicketsCountByBuyer (patch_8.sol#123-128) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 130,
          "vulnerability_to_line": 132,
          "vulnerability_code": "    function getPot(uint roundIndex) public view returns (uint) {\n        return rounds[roundIndex].pot;",
          "message": "Lotto.getPot (patch_8.sol#130-132) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": 157,
          "vulnerability_code": "    function () public payable {\n        uint roundIndex = getRoundIndex();\n        uint value = msg.value - (msg.value % ticketPrice);\n\n        if (value == 0) {\n            return;\n        }\n\n        if (value < msg.value) {\n            msg.sender.transfer(msg.value - value);\n        }\n\n        uint ticketsCount = value / ticketPrice;\n        rounds[roundIndex].ticketsCount += ticketsCount;\n\n        if (rounds[roundIndex].ticketsCountByBuyer[msg.sender] == 0) {\n            rounds[roundIndex].buyers.push(msg.sender);\n        }\n\n        rounds[roundIndex].ticketsCountByBuyer[msg.sender] += ticketsCount;\n        rounds[roundIndex].ticketsCount += ticketsCount;\n\n        rounds[roundIndex].pot += value;",
          "message": "Lotto.fallback (patch_8.sol#134-157) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;",
          "message": "Detected issues with version pragma in patch_8.sol:\n\t- pragma solidity^0.4.0 (patch_8.sol#1): it allows old versions\n"
        }
      ]
    },
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    }
  }
}