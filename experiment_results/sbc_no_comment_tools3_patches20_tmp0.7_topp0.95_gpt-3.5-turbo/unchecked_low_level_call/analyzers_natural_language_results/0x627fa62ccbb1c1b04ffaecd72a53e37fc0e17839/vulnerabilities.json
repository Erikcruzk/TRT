{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_23"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": 99,
          "vulnerability_code": "    function WithdrawToHolder(address _addr, uint _wei) \n    public\n    onlyOwner\n    payable\n    {\n        if(Holders[_addr]>0)\n        {\n            if(_addr.call.value(_wei)())\n            {\n                Holders[_addr]-=_wei;\n            }\n        }",
          "message": "Reentrancy in TokenBank.WithdrawToHolder (0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#87-99):\n\tExternal calls:\n\t- _addr.call.value(_wei)() (0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#94-97)\n\tState variables written after the call(s):\n\t- Holders (0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#96)\n"
        },
        {
          "name": "shadowing-state",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address owner = msg.sender;",
          "message": "Token.owner (0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#38) shadows:\n\t- Ownable.owner (0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#12)\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "        token.call(bytes4(sha3(\"transfer(address,uint256)\")),to,amount); ",
          "message": "Deprecated standard detected @ 0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#44:\n\t- Usage of \"sha3()\" should be replaced with \"keccak256()\"\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": 19,
          "vulnerability_code": "    function changeOwner(address addr)\n    public\n    onlyOwner\n    {\n        newOwner = addr;",
          "message": "Ownable.changeOwner (0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#14-19) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 28,
          "vulnerability_code": "    function confirmOwner() \n    public\n    {\n        if(msg.sender==newOwner)\n        {\n            owner=newOwner;\n        }",
          "message": "Ownable.confirmOwner (0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#21-28) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": 59,
          "vulnerability_code": "    function initTokenBank()\n    public\n    {\n        owner = msg.sender;\n        MinDeposit = 1 ether;",
          "message": "TokenBank.initTokenBank (0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#54-59) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": 65,
          "vulnerability_code": "    function()\n    payable\n    {\n        Deposit();",
          "message": "TokenBank.fallback (0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#61-65) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": 85,
          "vulnerability_code": "    function WitdrawTokenToHolder(address _to,address _token,uint _amount)\n    public\n    onlyOwner\n    {\n        if(Holders[_to]>0)\n        {\n            Holders[_to]=0;\n            WithdrawToken(_token,_amount,_to);     \n        }",
          "message": "TokenBank.WitdrawTokenToHolder (0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#76-85) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": 99,
          "vulnerability_code": "    function WithdrawToHolder(address _addr, uint _wei) \n    public\n    onlyOwner\n    payable\n    {\n        if(Holders[_addr]>0)\n        {\n            if(_addr.call.value(_wei)())\n            {\n                Holders[_addr]-=_wei;\n            }\n        }",
          "message": "TokenBank.WithdrawToHolder (0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#87-99) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in 0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol:\n\t- pragma solidity^0.4.19 (0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#7): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": 45,
          "vulnerability_code": "    function WithdrawToken(address token, uint256 amount,address to)\n    public \n    onlyOwner\n    {\n         // <yes> <report> UNCHECKED_LL_CALLS\n        token.call(bytes4(sha3(\"transfer(address,uint256)\")),to,amount); ",
          "message": "Low level call in Token.WithdrawToken (0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#39-45):\n\t-token.call(bytes4(sha3()(transfer(address,uint256))),to,amount) 0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#44\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": 99,
          "vulnerability_code": "    function WithdrawToHolder(address _addr, uint _wei) \n    public\n    onlyOwner\n    payable\n    {\n        if(Holders[_addr]>0)\n        {\n            if(_addr.call.value(_wei)())\n            {\n                Holders[_addr]-=_wei;\n            }\n        }",
          "message": "Low level call in TokenBank.WithdrawToHolder (0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#87-99):\n\t-_addr.call.value(_wei)() 0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#94-97\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": 45,
          "vulnerability_code": "    function WithdrawToken(address token, uint256 amount,address to)\n    public \n    onlyOwner\n    {\n         // <yes> <report> UNCHECKED_LL_CALLS\n        token.call(bytes4(sha3(\"transfer(address,uint256)\")),to,amount); ",
          "message": "Function 'Token.WithdrawToken' (0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#39-45) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": 74,
          "vulnerability_code": "    function Deposit() \n    payable\n    {\n        if(msg.value>MinDeposit)\n        {\n            Holders[msg.sender]+=msg.value;\n        }",
          "message": "Function 'TokenBank.Deposit' (0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#67-74) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": 85,
          "vulnerability_code": "    function WitdrawTokenToHolder(address _to,address _token,uint _amount)\n    public\n    onlyOwner\n    {\n        if(Holders[_to]>0)\n        {\n            Holders[_to]=0;\n            WithdrawToken(_token,_amount,_to);     \n        }",
          "message": "Function 'TokenBank.WitdrawTokenToHolder' (0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#76-85) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function WitdrawTokenToHolder(address _to,address _token,uint _amount)",
          "message": "Parameter '_to' of TokenBank.WitdrawTokenToHolder (0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#76) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function WitdrawTokenToHolder(address _to,address _token,uint _amount)",
          "message": "Parameter '_token' of TokenBank.WitdrawTokenToHolder (0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#76) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function WitdrawTokenToHolder(address _to,address _token,uint _amount)",
          "message": "Parameter '_amount' of TokenBank.WitdrawTokenToHolder (0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#76) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": 99,
          "vulnerability_code": "    function WithdrawToHolder(address _addr, uint _wei) \n    public\n    onlyOwner\n    payable\n    {\n        if(Holders[_addr]>0)\n        {\n            if(_addr.call.value(_wei)())\n            {\n                Holders[_addr]-=_wei;\n            }\n        }",
          "message": "Function 'TokenBank.WithdrawToHolder' (0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#87-99) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function WithdrawToHolder(address _addr, uint _wei) ",
          "message": "Parameter '_addr' of TokenBank.WithdrawToHolder (0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#87) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function WithdrawToHolder(address _addr, uint _wei) ",
          "message": "Parameter '_wei' of TokenBank.WithdrawToHolder (0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#87) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinDeposit;",
          "message": "Variable 'TokenBank.MinDeposit' (0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#50) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => uint) public Holders;",
          "message": "Variable 'TokenBank.Holders' (0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#51) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Callstack Depth Attack Vulnerability",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "        token.call(bytes4(sha3(\"transfer(address,uint256)\")),to,amount); ",
          "message": null
        },
        {
          "name": "Re-Entrancy Vulnerability",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if(_addr.call.value(_wei)())",
          "message": null
        }
      ]
    },
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    }
  }
}