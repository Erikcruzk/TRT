{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_16"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": 64,
          "vulnerability_code": "    function withdrawToHolder(address _addr, uint _wei) public onlyOwner {\n        if (holders[_addr] > 0) {\n            require(_addr.call.value(_wei)());\n            holders[_addr] -= _wei;\n        }",
          "message": "Reentrancy in TokenBank.withdrawToHolder (patch_14.sol#59-64):\n\tExternal calls:\n\t- require(bool)(_addr.call.value(_wei)()) (patch_14.sol#61)\n\tState variables written after the call(s):\n\t- holders (patch_14.sol#62)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 13,
          "vulnerability_code": "    function changeOwner(address addr) public onlyOwner {\n        newOwner = addr;",
          "message": "Ownable.changeOwner (patch_14.sol#11-13) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 19,
          "vulnerability_code": "    function confirmOwner() public {\n        if (msg.sender == newOwner) {\n            owner = newOwner;\n        }",
          "message": "Ownable.confirmOwner (patch_14.sol#15-19) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": 44,
          "vulnerability_code": "    function() public payable {\n        deposit();",
          "message": "TokenBank.fallback (patch_14.sol#42-44) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": 57,
          "vulnerability_code": "    function withdrawTokenToHolder(address _to, address _token, uint _amount) public onlyOwner {\n        if (holders[_to] > 0) {\n            holders[_to] = 0;\n            withdrawToken(_token, _amount, _to);\n        }",
          "message": "TokenBank.withdrawTokenToHolder (patch_14.sol#52-57) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": 64,
          "vulnerability_code": "    function withdrawToHolder(address _addr, uint _wei) public onlyOwner {\n        if (holders[_addr] > 0) {\n            require(_addr.call.value(_wei)());\n            holders[_addr] -= _wei;\n        }",
          "message": "TokenBank.withdrawToHolder (patch_14.sol#59-64) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_14.sol:\n\t- pragma solidity^0.4.19 (patch_14.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": 30,
          "vulnerability_code": "    function withdrawToken(address token, uint256 amount, address to) public onlyOwner {\n        require(token.call(bytes4(keccak256(\"transfer(address,uint256)\")), to, amount));",
          "message": "Low level call in Token.withdrawToken (patch_14.sol#28-30):\n\t-require(bool)(token.call(bytes4(keccak256()(transfer(address,uint256))),to,amount)) patch_14.sol#29\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": 64,
          "vulnerability_code": "    function withdrawToHolder(address _addr, uint _wei) public onlyOwner {\n        if (holders[_addr] > 0) {\n            require(_addr.call.value(_wei)());\n            holders[_addr] -= _wei;\n        }",
          "message": "Low level call in TokenBank.withdrawToHolder (patch_14.sol#59-64):\n\t-require(bool)(_addr.call.value(_wei)()) patch_14.sol#61\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 9,
          "vulnerability_code": "    function Ownable() public {\n        owner = msg.sender;",
          "message": "Function 'Ownable.Ownable' (patch_14.sol#7-9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": 40,
          "vulnerability_code": "    function TokenBank() public {\n        owner = msg.sender;\n        minDeposit = 1 ether;",
          "message": "Function 'TokenBank.TokenBank' (patch_14.sol#37-40) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawTokenToHolder(address _to, address _token, uint _amount) public onlyOwner {",
          "message": "Parameter '_to' of TokenBank.withdrawTokenToHolder (patch_14.sol#52) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawTokenToHolder(address _to, address _token, uint _amount) public onlyOwner {",
          "message": "Parameter '_token' of TokenBank.withdrawTokenToHolder (patch_14.sol#52) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawTokenToHolder(address _to, address _token, uint _amount) public onlyOwner {",
          "message": "Parameter '_amount' of TokenBank.withdrawTokenToHolder (patch_14.sol#52) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawToHolder(address _addr, uint _wei) public onlyOwner {",
          "message": "Parameter '_addr' of TokenBank.withdrawToHolder (patch_14.sol#59) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawToHolder(address _addr, uint _wei) public onlyOwner {",
          "message": "Parameter '_wei' of TokenBank.withdrawToHolder (patch_14.sol#59) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Re-Entrancy Vulnerability",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_addr.call.value(_wei)());",
          "message": null
        }
      ]
    },
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    }
  }
}