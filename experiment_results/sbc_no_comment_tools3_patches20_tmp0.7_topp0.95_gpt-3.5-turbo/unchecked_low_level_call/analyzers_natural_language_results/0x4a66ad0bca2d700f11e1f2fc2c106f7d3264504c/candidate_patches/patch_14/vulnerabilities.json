{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_7"
      ],
      "vulnerability_findings": [
        {
          "name": "calls-loop",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(tokenAddress.call(id, owner, _tos[i], _values[i]));",
          "message": "EBU.transfer has external calls inside a loop:\n\t- require(bool)(tokenAddress.call(id,owner,_tos[i],_values[i])) (patch_14.sol#12)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address public owner = 0x9797055B68C5DadDE6b3c7d5D80C9CFE2eecE6c9;",
          "message": "EBU.owner should be constant (patch_14.sol#4)\nEBU.tokenAddress should be constant (patch_14.sol#5)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 15,
          "vulnerability_code": "    function transfer(address[] _tos, uint[] _values) public returns (bool) {\n        require(msg.sender == owner);\n        require(_tos.length > 0 && _tos.length == _values.length);\n        bytes4 id = bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\n        for (uint i = 0; i < _tos.length; i++) {\n            require(tokenAddress.call(id, owner, _tos[i], _values[i]));\n        }\n        return true;",
          "message": "EBU.transfer (patch_14.sol#7-15) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;",
          "message": "Detected issues with version pragma in patch_14.sol:\n\t- pragma solidity^0.4.18 (patch_14.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 15,
          "vulnerability_code": "    function transfer(address[] _tos, uint[] _values) public returns (bool) {\n        require(msg.sender == owner);\n        require(_tos.length > 0 && _tos.length == _values.length);\n        bytes4 id = bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\n        for (uint i = 0; i < _tos.length; i++) {\n            require(tokenAddress.call(id, owner, _tos[i], _values[i]));\n        }\n        return true;",
          "message": "Low level call in EBU.transfer (patch_14.sol#7-15):\n\t-require(bool)(tokenAddress.call(id,owner,_tos[i],_values[i])) patch_14.sol#12\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address[] _tos, uint[] _values) public returns (bool) {",
          "message": "Parameter '_tos' of EBU.transfer (patch_14.sol#7) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address[] _tos, uint[] _values) public returns (bool) {",
          "message": "Parameter '_values' of EBU.transfer (patch_14.sol#7) is not in mixedCase\n"
        }
      ]
    },
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    }
  }
}