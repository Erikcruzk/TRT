/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.23;

contract Proxy {
    modifier onlyOwner() {
        if (msg.sender == Owner) _;
    }
    address Owner = msg.sender;

    function transferOwner(address _owner) public onlyOwner {
        Owner = _owner;
    }

    function proxy(address target, bytes data) public payable {
        target.call.value(msg.value)(data);
    }
}

contract VaultProxy is Proxy {
    address public Owner;
    mapping(address => uint256) public Deposits;

    function() public payable {}

    function Vault() public payable {
        if (msg.sender == tx.origin) {
            Owner = msg.sender;
            deposit();
        }
    }

    function deposit() public payable {
        if (msg.value > 0.25 ether) {
            Deposits[msg.sender] += msg.value;
        }
    }

    function withdraw(uint256 amount) public onlyOwner {
        if (amount > 0 && Deposits[msg.sender] >= amount) {
            msg.sender.transfer(amount);
        }
    }
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.

/// 1. Slither Analysis Results
/// 1.1. Vulnerability: unchecked_low_level_call at Line 13-15:
    function proxy(address target, bytes data) public payable {
        target.call.value(msg.value)(data);
///  Message:Low level call in Proxy.proxy (0xbaa3de6504690efb064420d89e871c27065cdd52.sol#13-15):
///   	-target.call.value(msg.value)(data) 0xbaa3de6504690efb064420d89e871c27065cdd52.sol#14



/// Repaired Solidity Smart Contract