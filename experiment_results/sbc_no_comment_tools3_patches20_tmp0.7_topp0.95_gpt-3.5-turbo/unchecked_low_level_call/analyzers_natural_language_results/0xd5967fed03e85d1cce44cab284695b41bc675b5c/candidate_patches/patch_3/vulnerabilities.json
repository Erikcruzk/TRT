{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_8"
      ],
      "vulnerability_findings": [
        {
          "name": "calls-loop",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_tokenContractAddress.call(id, _from, _to[i], _value));",
          "message": "Demo.transfer has external calls inside a loop:\n\t- require(bool)(_tokenContractAddress.call(id,_from,_to[i],_value)) (patch_3.sol#13)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": 16,
          "vulnerability_code": "    function transfer(\n        address _from,\n        address _tokenContractAddress,\n        address[] _to,\n        uint256 _value\n    ) public returns (bool) {\n        require(_to.length > 0);\n        bytes4 id = bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\n        for (uint256 i = 0; i < _to.length; i++) {\n            require(_tokenContractAddress.call(id, _from, _to[i], _value));\n        }\n        return true;",
          "message": "Demo.transfer (patch_3.sol#4-16) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;",
          "message": "Detected issues with version pragma in patch_3.sol:\n\t- pragma solidity^0.4.0 (patch_3.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": 16,
          "vulnerability_code": "    function transfer(\n        address _from,\n        address _tokenContractAddress,\n        address[] _to,\n        uint256 _value\n    ) public returns (bool) {\n        require(_to.length > 0);\n        bytes4 id = bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\n        for (uint256 i = 0; i < _to.length; i++) {\n            require(_tokenContractAddress.call(id, _from, _to[i], _value));\n        }\n        return true;",
          "message": "Low level call in Demo.transfer (patch_3.sol#4-16):\n\t-require(bool)(_tokenContractAddress.call(id,_from,_to[i],_value)) patch_3.sol#13\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _from,",
          "message": "Parameter '_from' of Demo.transfer (patch_3.sol#5) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _tokenContractAddress,",
          "message": "Parameter '_tokenContractAddress' of Demo.transfer (patch_3.sol#6) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] _to,",
          "message": "Parameter '_to' of Demo.transfer (patch_3.sol#7) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _value",
          "message": "Parameter '_value' of Demo.transfer (patch_3.sol#8) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    }
  }
}