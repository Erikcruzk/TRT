/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.18;

contract AirDropContract {
    function AirDropContract() public {}

    modifier validAddress(address addr) {
        require(addr != address(0x0));
        require(addr != address(this));
        _;
    }

    function transfer(
        address contract_address,
        address[] tos,
        uint[] vs
    ) public validAddress(contract_address) returns (bool) {
        require(tos.length > 0);
        require(vs.length > 0);
        require(tos.length == vs.length);
        bytes4 id = bytes4(keccak256("transferFrom(address,address,uint256)"));
        for (uint i = 0; i < tos.length; i++) {
            contract_address.call(id, msg.sender, tos[i], vs[i]);
        }
        return true;
    }
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.

/// 1. Slither Analysis Results
/// 1.1. Vulnerability: unchecked_low_level_call at Line 12-25:
    function transfer(
        address contract_address,
        address[] tos,
        uint[] vs
    ) public validAddress(contract_address) returns (bool) {
        require(tos.length > 0);
        require(vs.length > 0);
        require(tos.length == vs.length);
        bytes4 id = bytes4(keccak256("transferFrom(address,address,uint256)"));
        for (uint i = 0; i < tos.length; i++) {
            contract_address.call(id, msg.sender, tos[i], vs[i]);
        }
        return true;
///  Message:Low level call in AirDropContract.transfer (0xa1fceeff3acc57d257b917e30c4df661401d6431.sol#12-25):
///   	-contract_address.call(id,msg.sender,tos[i],vs[i]) 0xa1fceeff3acc57d257b917e30c4df661401d6431.sol#22



/// Repaired Solidity Smart Contract