{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_6"
      ],
      "vulnerability_findings": [
        {
          "name": "calls-loop",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(contract_address.call(id, msg.sender, tos[i], vs[i])); // added require to check if low-level call is successful",
          "message": "AirDropContract.transfer has external calls inside a loop:\n\t- require(bool)(contract_address.call(id,msg.sender,tos[i],vs[i])) (patch_0.sol#22)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": 25,
          "vulnerability_code": "    function transfer(\n        address contract_address,\n        address[] tos,\n        uint[] vs\n    ) public validAddress(contract_address) returns (bool) {\n        require(tos.length > 0);\n        require(vs.length > 0);\n        require(tos.length == vs.length);\n        bytes4 id = bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\n        for (uint i = 0; i < tos.length; i++) {\n            require(contract_address.call(id, msg.sender, tos[i], vs[i])); // added require to check if low-level call is successful\n        }\n        return true;",
          "message": "AirDropContract.transfer (patch_0.sol#12-25) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;",
          "message": "Detected issues with version pragma in patch_0.sol:\n\t- pragma solidity^0.4.18 (patch_0.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": 25,
          "vulnerability_code": "    function transfer(\n        address contract_address,\n        address[] tos,\n        uint[] vs\n    ) public validAddress(contract_address) returns (bool) {\n        require(tos.length > 0);\n        require(vs.length > 0);\n        require(tos.length == vs.length);\n        bytes4 id = bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\n        for (uint i = 0; i < tos.length; i++) {\n            require(contract_address.call(id, msg.sender, tos[i], vs[i])); // added require to check if low-level call is successful\n        }\n        return true;",
          "message": "Low level call in AirDropContract.transfer (patch_0.sol#12-25):\n\t-require(bool)(contract_address.call(id,msg.sender,tos[i],vs[i])) patch_0.sol#22\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AirDropContract() public {}",
          "message": "Function 'AirDropContract.AirDropContract' (patch_0.sol#4) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address contract_address,",
          "message": "Parameter 'contract_address' of AirDropContract.transfer (patch_0.sol#13) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    }
  }
}