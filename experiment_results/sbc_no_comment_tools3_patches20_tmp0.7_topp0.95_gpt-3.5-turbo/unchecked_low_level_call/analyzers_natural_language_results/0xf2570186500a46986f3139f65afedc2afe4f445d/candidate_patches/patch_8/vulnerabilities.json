{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_5"
      ],
      "vulnerability_findings": [
        {
          "name": "calls-loop",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(fuck.call(bytes4(keccak256(\"giveBlockReward()\"))));",
          "message": "RealOldFuckMaker.makeOldFucks has external calls inside a loop:\n\t- require(bool)(fuck.call(bytes4(keccak256()(giveBlockReward())))) (patch_8.sol#9)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address private fuck = 0xc63e7b1DEcE63A77eD7E4Aeef5efb3b05C81438D;",
          "message": "RealOldFuckMaker.fuck should be constant (patch_8.sol#4)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": 11,
          "vulnerability_code": "    function makeOldFucks(uint32 number) public {\n        uint32 i;\n        for (i = 0; i < number; i++) {\n            require(fuck.call(bytes4(keccak256(\"giveBlockReward()\"))));\n        }",
          "message": "RealOldFuckMaker.makeOldFucks (patch_8.sol#6-11) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.16;",
          "message": "Detected issues with version pragma in patch_8.sol:\n\t- pragma solidity^0.4.16 (patch_8.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": 11,
          "vulnerability_code": "    function makeOldFucks(uint32 number) public {\n        uint32 i;\n        for (i = 0; i < number; i++) {\n            require(fuck.call(bytes4(keccak256(\"giveBlockReward()\"))));\n        }",
          "message": "Low level call in RealOldFuckMaker.makeOldFucks (patch_8.sol#6-11):\n\t-require(bool)(fuck.call(bytes4(keccak256()(giveBlockReward())))) patch_8.sol#9\n"
        }
      ]
    },
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    }
  }
}