{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_11"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() public payable {}",
          "message": "MultiplicatorX3.fallback (patch_13.sol#6) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": 11,
          "vulnerability_code": "    function withdraw() public {\n        require(msg.sender == Owner);\n        Owner.transfer(this.balance);",
          "message": "MultiplicatorX3.withdraw (patch_13.sol#8-11) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": 16,
          "vulnerability_code": "    function Command(address _adr, bytes _data) public payable {\n        require(msg.sender == Owner);\n        require(_adr.call.value(msg.value)(_data));",
          "message": "MultiplicatorX3.Command (patch_13.sol#13-16) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": 22,
          "vulnerability_code": "    function multiplicate(address _adr) public payable {\n        if (msg.value >= this.balance) {\n            _adr.transfer(this.balance + msg.value);\n        }",
          "message": "MultiplicatorX3.multiplicate (patch_13.sol#18-22) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;",
          "message": "Detected issues with version pragma in patch_13.sol:\n\t- pragma solidity^0.4.18 (patch_13.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": 16,
          "vulnerability_code": "    function Command(address _adr, bytes _data) public payable {\n        require(msg.sender == Owner);\n        require(_adr.call.value(msg.value)(_data));",
          "message": "Low level call in MultiplicatorX3.Command (patch_13.sol#13-16):\n\t-require(bool)(_adr.call.value(msg.value)(_data)) patch_13.sol#15\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": 16,
          "vulnerability_code": "    function Command(address _adr, bytes _data) public payable {\n        require(msg.sender == Owner);\n        require(_adr.call.value(msg.value)(_data));",
          "message": "Function 'MultiplicatorX3.Command' (patch_13.sol#13-16) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Command(address _adr, bytes _data) public payable {",
          "message": "Parameter '_adr' of MultiplicatorX3.Command (patch_13.sol#13) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Command(address _adr, bytes _data) public payable {",
          "message": "Parameter '_data' of MultiplicatorX3.Command (patch_13.sol#13) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function multiplicate(address _adr) public payable {",
          "message": "Parameter '_adr' of MultiplicatorX3.multiplicate (patch_13.sol#18) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address public Owner = msg.sender;",
          "message": "Variable 'MultiplicatorX3.Owner' (patch_13.sol#4) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}