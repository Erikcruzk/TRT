{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Callstack Depth Attack Vulnerability",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool success = c.call(bytes4(keccak256(\"transferFrom(address,address,uint256)\")), owner, msg.sender, tokens_buy);",
          "message": null
        },
        {
          "name": "Re-Entrancy Vulnerability",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "        owner.transfer(balance);",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_15"
      ],
      "vulnerability_findings": [
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint tokens_buy = (msg.value * 10 ** 18) / token_price;",
          "message": "Delta.tokens_buy.tokens_buy (local variable @ patch_1.sol#19) shadows:\n\t- Delta.tokens_buy (function @ patch_1.sol#15-31)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address public c = 0xF85A2E95FA30d005F629cBe6c6d2887D979ffF2A;",
          "message": "Delta.c should be constant (patch_1.sol#4)\nDelta.owner should be constant (patch_1.sol#5)\nDelta.owner2 should be constant (patch_1.sol#6)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 13,
          "vulnerability_code": "    function() public payable {\n        tokens_buy();",
          "message": "Delta.fallback (patch_1.sol#11-13) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": 40,
          "vulnerability_code": "    function withdraw(uint256 _amount) public onlyOwner returns (bool result) {\n        uint256 balance;\n        balance = address(this).balance;\n        if (_amount > 0) balance = _amount;\n\n        owner.transfer(balance);\n        return true;",
          "message": "Delta.withdraw (patch_1.sol#33-40) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": 45,
          "vulnerability_code": "    function change_token_price(uint256 _token_price) public onlyOwner returns (bool result) {\n        token_price = _token_price;\n        return true;",
          "message": "Delta.change_token_price (patch_1.sol#42-45) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": 50,
          "vulnerability_code": "    function change_active(uint256 _active) public onlyOwner returns (bool result) {\n        active = _active;\n        return true;",
          "message": "Delta.change_active (patch_1.sol#47-50) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;",
          "message": "Detected issues with version pragma in patch_1.sol:\n\t- pragma solidity^0.4.23 (patch_1.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 31,
          "vulnerability_code": "    function tokens_buy() public payable returns (bool) {\n        require(active > 0);\n        require(msg.value >= token_price);\n\n        uint tokens_buy = (msg.value * 10 ** 18) / token_price;\n\n        require(tokens_buy > 0);\n\n        bool success = c.call(bytes4(keccak256(\"transferFrom(address,address,uint256)\")), owner, msg.sender, tokens_buy);\n        require(success);\n\n        uint sum2 = (msg.value * 3) / 10;\n\n        owner2.transfer(sum2);\n\n        return true;",
          "message": "Low level call in Delta.tokens_buy (patch_1.sol#15-31):\n\t-success = c.call(bytes4(keccak256()(transferFrom(address,address,uint256))),owner,msg.sender,tokens_buy) patch_1.sol#23\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 31,
          "vulnerability_code": "    function tokens_buy() public payable returns (bool) {\n        require(active > 0);\n        require(msg.value >= token_price);\n\n        uint tokens_buy = (msg.value * 10 ** 18) / token_price;\n\n        require(tokens_buy > 0);\n\n        bool success = c.call(bytes4(keccak256(\"transferFrom(address,address,uint256)\")), owner, msg.sender, tokens_buy);\n        require(success);\n\n        uint sum2 = (msg.value * 3) / 10;\n\n        owner2.transfer(sum2);\n\n        return true;",
          "message": "Function 'Delta.tokens_buy' (patch_1.sol#15-31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(uint256 _amount) public onlyOwner returns (bool result) {",
          "message": "Parameter '_amount' of Delta.withdraw (patch_1.sol#33) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": 45,
          "vulnerability_code": "    function change_token_price(uint256 _token_price) public onlyOwner returns (bool result) {\n        token_price = _token_price;\n        return true;",
          "message": "Function 'Delta.change_token_price' (patch_1.sol#42-45) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function change_token_price(uint256 _token_price) public onlyOwner returns (bool result) {",
          "message": "Parameter '_token_price' of Delta.change_token_price (patch_1.sol#42) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": 50,
          "vulnerability_code": "    function change_active(uint256 _active) public onlyOwner returns (bool result) {\n        active = _active;\n        return true;",
          "message": "Function 'Delta.change_active' (patch_1.sol#47-50) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function change_active(uint256 _active) public onlyOwner returns (bool result) {",
          "message": "Parameter '_active' of Delta.change_active (patch_1.sol#47) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public token_price = (10 ** 18 * 1) / 1000;",
          "message": "Variable 'Delta.token_price' (patch_1.sol#9) is not in mixedCase\n"
        }
      ]
    }
  }
}