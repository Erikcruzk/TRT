{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Callstack Depth Attack Vulnerability",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool success = whale.call.value(amount)(bytes4(keccak256(\"donate()\")));",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_25"
      ],
      "vulnerability_findings": [
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": 103,
          "vulnerability_code": "    function payout(address winner) internal {\n        uint256 ethToTransfer = address(this).balance / 2;\n        winner.transfer(ethToTransfer);\n        emit Win(ethToTransfer, winner);",
          "message": "PoCGame.payout (patch_14.sol#99-103) sends eth to arbitrary user\n\tDangerous calls:\n\t- winner.transfer(ethToTransfer) (patch_14.sol#101)\n"
        },
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": 119,
          "vulnerability_code": "    function loseWager(uint256 amount) internal {\n        require(amount > 0);\n        bool success = whale.call.value(amount)(bytes4(keccak256(\"donate()\")));\n        require(success);\n        totalDonated += amount;\n        emit Lose(amount, msg.sender);",
          "message": "PoCGame.loseWager (patch_14.sol#113-119) sends eth to arbitrary user\n\tDangerous calls:\n\t- success = whale.call.value(amount)(bytes4(keccak256()(donate()))) (patch_14.sol#115)\n"
        },
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": 93,
          "vulnerability_code": "    function play() public isOpenToPublic onlyRealPeople onlyPlayers {\n        uint256 blockNumber = timestamps[msg.sender];\n        if (blockNumber < block.number) {\n            timestamps[msg.sender] = 0;\n            wagers[msg.sender] = 0;\n            uint256 winningNumber = (uint256(\n                keccak256(abi.encodePacked(blockhash(blockNumber), msg.sender, randomSeed))\n            ) % difficulty) + 1;\n            if (winningNumber == difficulty / 2) {\n                payout(msg.sender);\n            } else {\n                loseWager(betLimit / 2);\n            }\n            randomSeed = uint256(keccak256(abi.encodePacked(blockhash(block.number), randomSeed)));\n        } else {\n            revert();\n        }",
          "message": "Reentrancy in PoCGame.play (patch_14.sol#76-93):\n\tExternal calls:\n\t- loseWager(betLimit / 2) (patch_14.sol#87)\n\tExternal calls sending eth:\n\t- payout(msg.sender) (patch_14.sol#85)\n\t- loseWager(betLimit / 2) (patch_14.sol#87)\n\tState variables written after the call(s):\n\t- randomSeed (patch_14.sol#89)\n"
        },
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": 93,
          "vulnerability_code": "    function play() public isOpenToPublic onlyRealPeople onlyPlayers {\n        uint256 blockNumber = timestamps[msg.sender];\n        if (blockNumber < block.number) {\n            timestamps[msg.sender] = 0;\n            wagers[msg.sender] = 0;\n            uint256 winningNumber = (uint256(\n                keccak256(abi.encodePacked(blockhash(blockNumber), msg.sender, randomSeed))\n            ) % difficulty) + 1;\n            if (winningNumber == difficulty / 2) {\n                payout(msg.sender);\n            } else {\n                loseWager(betLimit / 2);\n            }\n            randomSeed = uint256(keccak256(abi.encodePacked(blockhash(block.number), randomSeed)));\n        } else {\n            revert();\n        }",
          "message": "PoCGame.play (patch_14.sol#76-93) uses a dangerous strict equality:\n\t- winningNumber == difficulty / 2\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": 111,
          "vulnerability_code": "    function donateToWhale(uint256 amount) internal {\n        require(amount > 0);\n        bool success = whale.call.value(amount)(bytes4(keccak256(\"donate()\")));\n        require(success);\n        totalDonated += amount;\n        emit Donate(amount, whale, msg.sender);",
          "message": "Reentrancy in PoCGame.donateToWhale (patch_14.sol#105-111):\n\tExternal calls:\n\t- success = whale.call.value(amount)(bytes4(keccak256()(donate()))) (patch_14.sol#107)\n\tState variables written after the call(s):\n\t- totalDonated (patch_14.sol#109)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": 119,
          "vulnerability_code": "    function loseWager(uint256 amount) internal {\n        require(amount > 0);\n        bool success = whale.call.value(amount)(bytes4(keccak256(\"donate()\")));\n        require(success);\n        totalDonated += amount;\n        emit Lose(amount, msg.sender);",
          "message": "Reentrancy in PoCGame.loseWager (patch_14.sol#113-119):\n\tExternal calls:\n\t- success = whale.call.value(amount)(bytes4(keccak256()(donate()))) (patch_14.sol#115)\n\tState variables written after the call(s):\n\t- totalDonated (patch_14.sol#117)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": 55,
          "vulnerability_code": "    function openToThePublic() public onlyOwner {\n        openToPublic = true;",
          "message": "PoCGame.openToThePublic (patch_14.sol#53-55) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": 60,
          "vulnerability_code": "    function adjustBetAmounts(uint256 amount) public onlyOwner {\n        betLimit = amount;\n        emit BetLimitChanged(betLimit);",
          "message": "PoCGame.adjustBetAmounts (patch_14.sol#57-60) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": 65,
          "vulnerability_code": "    function adjustDifficulty(uint256 amount) public onlyOwner {\n        difficulty = amount;\n        emit DifficultyChanged(difficulty);",
          "message": "PoCGame.adjustDifficulty (patch_14.sol#62-65) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() public payable {}",
          "message": "PoCGame.fallback (patch_14.sol#67) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": 74,
          "vulnerability_code": "    function wager() public payable isOpenToPublic onlyRealPeople {\n        require(msg.value == betLimit);\n        timestamps[msg.sender] = block.number;\n        wagers[msg.sender] = msg.value;\n        emit Wager(msg.value, msg.sender);",
          "message": "PoCGame.wager (patch_14.sol#69-74) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": 93,
          "vulnerability_code": "    function play() public isOpenToPublic onlyRealPeople onlyPlayers {\n        uint256 blockNumber = timestamps[msg.sender];\n        if (blockNumber < block.number) {\n            timestamps[msg.sender] = 0;\n            wagers[msg.sender] = 0;\n            uint256 winningNumber = (uint256(\n                keccak256(abi.encodePacked(blockhash(blockNumber), msg.sender, randomSeed))\n            ) % difficulty) + 1;\n            if (winningNumber == difficulty / 2) {\n                payout(msg.sender);\n            } else {\n                loseWager(betLimit / 2);\n            }\n            randomSeed = uint256(keccak256(abi.encodePacked(blockhash(block.number), randomSeed)));\n        } else {\n            revert();\n        }",
          "message": "PoCGame.play (patch_14.sol#76-93) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": 97,
          "vulnerability_code": "    function donate() public payable isOpenToPublic {\n        donateToWhale(msg.value);",
          "message": "PoCGame.donate (patch_14.sol#95-97) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 121,
          "vulnerability_to_line": 123,
          "vulnerability_code": "    function ethBalance() public view returns (uint256) {\n        return address(this).balance;",
          "message": "PoCGame.ethBalance (patch_14.sol#121-123) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": 127,
          "vulnerability_code": "    function currentDifficulty() public view returns (uint256) {\n        return difficulty;",
          "message": "PoCGame.currentDifficulty (patch_14.sol#125-127) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": 131,
          "vulnerability_code": "    function currentBetLimit() public view returns (uint256) {\n        return betLimit;",
          "message": "PoCGame.currentBetLimit (patch_14.sol#129-131) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 133,
          "vulnerability_to_line": 135,
          "vulnerability_code": "    function hasPlayerWagered(address player) public view returns (bool) {\n        return wagers[player] > 0;",
          "message": "PoCGame.hasPlayerWagered (patch_14.sol#133-135) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 137,
          "vulnerability_to_line": 139,
          "vulnerability_code": "    function winnersPot() public view returns (uint256) {\n        return address(this).balance / 2;",
          "message": "PoCGame.winnersPot (patch_14.sol#137-139) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": 147,
          "vulnerability_code": "    function transferAnyERC20Token(\n        address tokenAddress,\n        address tokenOwner,\n        uint tokens\n    ) public onlyOwner returns (bool success) {\n        return ERC20Interface(tokenAddress).transfer(tokenOwner, tokens);",
          "message": "PoCGame.transferAnyERC20Token (patch_14.sol#141-147) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address to, uint256 tokens) public returns (bool success);",
          "message": "ERC20Interface.transfer (patch_14.sol#151) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;",
          "message": "Detected issues with version pragma in patch_14.sol:\n\t- pragma solidity^0.4.21 (patch_14.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": 111,
          "vulnerability_code": "    function donateToWhale(uint256 amount) internal {\n        require(amount > 0);\n        bool success = whale.call.value(amount)(bytes4(keccak256(\"donate()\")));\n        require(success);\n        totalDonated += amount;\n        emit Donate(amount, whale, msg.sender);",
          "message": "Low level call in PoCGame.donateToWhale (patch_14.sol#105-111):\n\t-success = whale.call.value(amount)(bytes4(keccak256()(donate()))) patch_14.sol#107\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": 119,
          "vulnerability_code": "    function loseWager(uint256 amount) internal {\n        require(amount > 0);\n        bool success = whale.call.value(amount)(bytes4(keccak256(\"donate()\")));\n        require(success);\n        totalDonated += amount;\n        emit Lose(amount, msg.sender);",
          "message": "Low level call in PoCGame.loseWager (patch_14.sol#113-119):\n\t-success = whale.call.value(amount)(bytes4(keccak256()(donate()))) patch_14.sol#115\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _whaleAddress,",
          "message": "Parameter '_whaleAddress' of PoCGame. (patch_14.sol#42) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _wagerLimit",
          "message": "Parameter '_wagerLimit' of PoCGame. (patch_14.sol#43) is not in mixedCase\n"
        }
      ]
    },
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    }
  }
}