{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_23"
      ],
      "vulnerability_findings": [
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 79,
          "vulnerability_to_line": 99,
          "vulnerability_code": "    function play() public isOpenToPublic onlyRealPeople onlyPlayers {\n        uint256 blockNumber = timestamps[msg.sender];\n        if (blockNumber < block.number) {\n            timestamps[msg.sender] = 0;\n            uint256 wagerValue = wagers[msg.sender];\n            wagers[msg.sender] = 0;\n\n            uint256 winningNumber = (uint256(\n                keccak256(abi.encodePacked(blockhash(blockNumber), msg.sender, randomSeed))\n            ) % difficulty) + 1;\n            randomSeed = winningNumber;\n\n            if (winningNumber == difficulty / 2) {\n                payout(msg.sender, wagerValue);\n            } else {\n                loseWager(msg.sender, wagerValue);\n            }\n        } else {\n            revert();\n        }",
          "message": "PoCGame.play (patch_15.sol#79-99) uses a dangerous strict equality:\n\t- winningNumber == difficulty / 2\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": 116,
          "vulnerability_code": "    function donateToWhale(uint256 amount) internal {\n        require(address(whale).call.value(amount)(bytes4(keccak256(\"donate()\"))));\n        totalDonated += amount;\n        emit Donate(amount, whale, msg.sender);",
          "message": "Reentrancy in PoCGame.donateToWhale (patch_15.sol#112-116):\n\tExternal calls:\n\t- require(bool)(address(whale).call.value(amount)(bytes4(keccak256()(donate())))) (patch_15.sol#113)\n\tState variables written after the call(s):\n\t- totalDonated (patch_15.sol#114)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": 122,
          "vulnerability_code": "    function loseWager(address loser, uint256 wagerValue) internal {\n        require(address(whale).call.value(wagerValue / 2)(bytes4(keccak256(\"donate()\"))));\n        totalDonated += wagerValue / 2;\n        emit Lose(wagerValue / 2, loser);",
          "message": "Reentrancy in PoCGame.loseWager (patch_15.sol#118-122):\n\tExternal calls:\n\t- require(bool)(address(whale).call.value(wagerValue / 2)(bytes4(keccak256()(donate())))) (patch_15.sol#119)\n\tState variables written after the call(s):\n\t- totalDonated (patch_15.sol#120)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": 55,
          "vulnerability_code": "    function OpenToThePublic() public onlyOwner {\n        openToPublic = true;",
          "message": "PoCGame.OpenToThePublic (patch_15.sol#53-55) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": 61,
          "vulnerability_code": "    function AdjustBetAmounts(uint256 amount) public onlyOwner {\n        betLimit = amount;\n\n        emit BetLimitChanged(betLimit);",
          "message": "PoCGame.AdjustBetAmounts (patch_15.sol#57-61) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": 67,
          "vulnerability_code": "    function AdjustDifficulty(uint256 amount) public onlyOwner {\n        difficulty = amount;\n\n        emit DifficultyChanged(difficulty);",
          "message": "PoCGame.AdjustDifficulty (patch_15.sol#63-67) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() public payable {}",
          "message": "PoCGame.fallback (patch_15.sol#69) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": 77,
          "vulnerability_code": "    function wager() public payable isOpenToPublic onlyRealPeople {\n        require(msg.value == betLimit);\n\n        timestamps[msg.sender] = block.number;\n        wagers[msg.sender] = msg.value;\n        emit Wager(msg.value, msg.sender);",
          "message": "PoCGame.wager (patch_15.sol#71-77) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 79,
          "vulnerability_to_line": 99,
          "vulnerability_code": "    function play() public isOpenToPublic onlyRealPeople onlyPlayers {\n        uint256 blockNumber = timestamps[msg.sender];\n        if (blockNumber < block.number) {\n            timestamps[msg.sender] = 0;\n            uint256 wagerValue = wagers[msg.sender];\n            wagers[msg.sender] = 0;\n\n            uint256 winningNumber = (uint256(\n                keccak256(abi.encodePacked(blockhash(blockNumber), msg.sender, randomSeed))\n            ) % difficulty) + 1;\n            randomSeed = winningNumber;\n\n            if (winningNumber == difficulty / 2) {\n                payout(msg.sender, wagerValue);\n            } else {\n                loseWager(msg.sender, wagerValue);\n            }\n        } else {\n            revert();\n        }",
          "message": "PoCGame.play (patch_15.sol#79-99) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": 103,
          "vulnerability_code": "    function donate() public payable isOpenToPublic {\n        donateToWhale(msg.value);",
          "message": "PoCGame.donate (patch_15.sol#101-103) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 124,
          "vulnerability_to_line": 126,
          "vulnerability_code": "    function ethBalance() public view returns (uint256) {\n        return address(this).balance;",
          "message": "PoCGame.ethBalance (patch_15.sol#124-126) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": 130,
          "vulnerability_code": "    function currentDifficulty() public view returns (uint256) {\n        return difficulty;",
          "message": "PoCGame.currentDifficulty (patch_15.sol#128-130) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 132,
          "vulnerability_to_line": 134,
          "vulnerability_code": "    function currentBetLimit() public view returns (uint256) {\n        return betLimit;",
          "message": "PoCGame.currentBetLimit (patch_15.sol#132-134) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": 142,
          "vulnerability_code": "    function hasPlayerWagered(address player) public view returns (bool) {\n        if (wagers[player] > 0) {\n            return true;\n        } else {\n            return false;\n        }",
          "message": "PoCGame.hasPlayerWagered (patch_15.sol#136-142) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 144,
          "vulnerability_to_line": 146,
          "vulnerability_code": "    function winnersPot() public view returns (uint256) {\n        return address(this).balance / 2;",
          "message": "PoCGame.winnersPot (patch_15.sol#144-146) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 148,
          "vulnerability_to_line": 154,
          "vulnerability_code": "    function transferAnyERC20Token(\n        address tokenAddress,\n        address tokenOwner,\n        uint tokens\n    ) public onlyOwner returns (bool success) {\n        return ERC20Interface(tokenAddress).transfer(tokenOwner, tokens);",
          "message": "PoCGame.transferAnyERC20Token (patch_15.sol#148-154) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address to, uint256 tokens) public returns (bool success);",
          "message": "ERC20Interface.transfer (patch_15.sol#158) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;",
          "message": "Detected issues with version pragma in patch_15.sol:\n\t- pragma solidity^0.4.21 (patch_15.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": 116,
          "vulnerability_code": "    function donateToWhale(uint256 amount) internal {\n        require(address(whale).call.value(amount)(bytes4(keccak256(\"donate()\"))));\n        totalDonated += amount;\n        emit Donate(amount, whale, msg.sender);",
          "message": "Low level call in PoCGame.donateToWhale (patch_15.sol#112-116):\n\t-require(bool)(address(whale).call.value(amount)(bytes4(keccak256()(donate())))) patch_15.sol#113\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": 122,
          "vulnerability_code": "    function loseWager(address loser, uint256 wagerValue) internal {\n        require(address(whale).call.value(wagerValue / 2)(bytes4(keccak256(\"donate()\"))));\n        totalDonated += wagerValue / 2;\n        emit Lose(wagerValue / 2, loser);",
          "message": "Low level call in PoCGame.loseWager (patch_15.sol#118-122):\n\t-require(bool)(address(whale).call.value(wagerValue / 2)(bytes4(keccak256()(donate())))) patch_15.sol#119\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": 55,
          "vulnerability_code": "    function OpenToThePublic() public onlyOwner {\n        openToPublic = true;",
          "message": "Function 'PoCGame.OpenToThePublic' (patch_15.sol#53-55) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": 61,
          "vulnerability_code": "    function AdjustBetAmounts(uint256 amount) public onlyOwner {\n        betLimit = amount;\n\n        emit BetLimitChanged(betLimit);",
          "message": "Function 'PoCGame.AdjustBetAmounts' (patch_15.sol#57-61) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": 67,
          "vulnerability_code": "    function AdjustDifficulty(uint256 amount) public onlyOwner {\n        difficulty = amount;\n\n        emit DifficultyChanged(difficulty);",
          "message": "Function 'PoCGame.AdjustDifficulty' (patch_15.sol#63-67) is not in mixedCase\n"
        }
      ]
    },
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    }
  }
}