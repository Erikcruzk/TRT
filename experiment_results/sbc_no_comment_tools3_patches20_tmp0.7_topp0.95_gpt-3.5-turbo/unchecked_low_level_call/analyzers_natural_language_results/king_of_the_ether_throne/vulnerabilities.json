{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_12"
      ],
      "vulnerability_findings": [
        {
          "name": "timestamp",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": 103,
          "vulnerability_code": "    function claimThrone(string name) {\n        uint valuePaid = msg.value;\n\n        if (valuePaid < currentClaimPrice) {\n            msg.sender.send(valuePaid);\n            return;\n        }\n\n        if (valuePaid > currentClaimPrice) {\n            uint excessPaid = valuePaid - currentClaimPrice;\n\n            msg.sender.send(excessPaid);\n            valuePaid = valuePaid - excessPaid;\n        }\n\n        uint wizardCommission = (valuePaid * wizardCommissionFractionNum) /\n            wizardCommissionFractionDen;\n\n        uint compensation = valuePaid - wizardCommission;\n\n        if (currentMonarch.etherAddress != wizardAddress) {\n            currentMonarch.etherAddress.send(compensation);\n        } else {}\n\n        pastMonarchs.push(currentMonarch);\n        currentMonarch = Monarch(msg.sender, name, valuePaid, block.timestamp);\n\n        uint rawNewClaimPrice = (currentClaimPrice * claimPriceAdjustNum) /\n            claimPriceAdjustDen;\n        if (rawNewClaimPrice < 10 finney) {\n            currentClaimPrice = rawNewClaimPrice;\n        } else if (rawNewClaimPrice < 100 finney) {\n            currentClaimPrice = 100 szabo * (rawNewClaimPrice / 100 szabo);\n        } else if (rawNewClaimPrice < 1 ether) {\n            currentClaimPrice = 1 finney * (rawNewClaimPrice / 1 finney);\n        } else if (rawNewClaimPrice < 10 ether) {\n            currentClaimPrice = 10 finney * (rawNewClaimPrice / 10 finney);\n        } else if (rawNewClaimPrice < 100 ether) {\n            currentClaimPrice = 100 finney * (rawNewClaimPrice / 100 finney);\n        } else if (rawNewClaimPrice < 1000 ether) {\n            currentClaimPrice = 1 ether * (rawNewClaimPrice / 1 ether);\n        } else if (rawNewClaimPrice < 10000 ether) {\n            currentClaimPrice = 10 ether * (rawNewClaimPrice / 10 ether);\n        } else {\n            currentClaimPrice = rawNewClaimPrice;\n        }\n\n        ThroneClaimed(\n            currentMonarch.etherAddress,\n            currentMonarch.name,\n            currentClaimPrice\n        );",
          "message": "KingOfTheEtherThrone.claimThrone (king_of_the_ether_throne.sol#51-103) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- currentMonarch.etherAddress != wizardAddress (king_of_the_ether_throne.sol#71-73)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": 39,
          "vulnerability_code": "    function numberOfMonarchs() constant returns (uint n) {\n        return pastMonarchs.length;",
          "message": "KingOfTheEtherThrone.numberOfMonarchs (king_of_the_ether_throne.sol#37-39) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": 49,
          "vulnerability_code": "    function() {\n        claimThrone(string(msg.data));",
          "message": "KingOfTheEtherThrone.fallback (king_of_the_ether_throne.sol#47-49) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": 107,
          "vulnerability_code": "    function sweepCommission(uint amount) onlywizard {\n        wizardAddress.send(amount);",
          "message": "KingOfTheEtherThrone.sweepCommission (king_of_the_ether_throne.sol#105-107) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 109,
          "vulnerability_to_line": 111,
          "vulnerability_code": "    function transferOwnership(address newOwner) onlywizard {\n        wizardAddress = newOwner;",
          "message": "KingOfTheEtherThrone.transferOwnership (king_of_the_ether_throne.sol#109-111) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;",
          "message": "Detected issues with version pragma in king_of_the_ether_throne.sol:\n\t- pragma solidity^0.4.0 (king_of_the_ether_throne.sol#1): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": 35,
          "vulnerability_code": "    function KingOfTheEtherThrone() {\n        wizardAddress = msg.sender;\n        currentClaimPrice = startingClaimPrice;\n        currentMonarch = Monarch(wizardAddress, \"[Vacant]\", 0, block.timestamp);",
          "message": "Function 'KingOfTheEtherThrone.KingOfTheEtherThrone' (king_of_the_ether_throne.sol#31-35) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant startingClaimPrice = 100 finney;",
          "message": "Constant 'KingOfTheEtherThrone.startingClaimPrice' (king_of_the_ether_throne.sol#17) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant claimPriceAdjustNum = 3;",
          "message": "Constant 'KingOfTheEtherThrone.claimPriceAdjustNum' (king_of_the_ether_throne.sol#19) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant claimPriceAdjustDen = 2;",
          "message": "Constant 'KingOfTheEtherThrone.claimPriceAdjustDen' (king_of_the_ether_throne.sol#20) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant wizardCommissionFractionNum = 1;",
          "message": "Constant 'KingOfTheEtherThrone.wizardCommissionFractionNum' (king_of_the_ether_throne.sol#22) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant wizardCommissionFractionDen = 100;",
          "message": "Constant 'KingOfTheEtherThrone.wizardCommissionFractionDen' (king_of_the_ether_throne.sol#23) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Callstack Depth Attack Vulnerability",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "            msg.sender.send(valuePaid);",
          "message": null
        }
      ]
    }
  }
}