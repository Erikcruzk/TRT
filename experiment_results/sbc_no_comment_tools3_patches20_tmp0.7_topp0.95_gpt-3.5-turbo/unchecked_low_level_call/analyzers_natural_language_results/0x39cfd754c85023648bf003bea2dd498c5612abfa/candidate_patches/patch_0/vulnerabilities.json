{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_19"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 18,
          "vulnerability_code": "    function changeOwner(address addr) public onlyOwner {\n        newOwner = addr;",
          "message": "Ownable.changeOwner (patch_0.sol#16-18) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": 24,
          "vulnerability_code": "    function confirmOwner() public {\n        if (msg.sender == newOwner) {\n            owner = newOwner;\n        }",
          "message": "Ownable.confirmOwner (patch_0.sol#20-24) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": 53,
          "vulnerability_code": "    function() public payable {\n        deposit();",
          "message": "TokenBank.fallback (patch_0.sol#51-53) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": 70,
          "vulnerability_code": "    function withdrawTokenToHolder(\n        address _to,\n        address _token,\n        uint _amount\n    ) public onlyOwner {\n        if (Holders[_to] > 0) {\n            Holders[_to] = 0;\n            withdrawToken(_token, _amount, _to);\n        }",
          "message": "TokenBank.withdrawTokenToHolder (patch_0.sol#61-70) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": 82,
          "vulnerability_code": "    function withdrawToHolder(\n        address _addr,\n        uint _wei\n    ) public onlyOwner {\n        if (Holders[msg.sender] > 0) {\n            if (Holders[_addr] >= _wei) {\n                _addr.transfer(_wei);\n                Holders[_addr] -= _wei;\n            }\n        }",
          "message": "TokenBank.withdrawToHolder (patch_0.sol#72-82) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;",
          "message": "Detected issues with version pragma in patch_0.sol:\n\t- pragma solidity^0.4.18 (patch_0.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": 39,
          "vulnerability_code": "    function withdrawToken(\n        address _token,\n        uint256 _amount,\n        address _to\n    ) public onlyOwner {\n        require(_token != address(0));\n        require(_to != address(0));\n        require(_to != address(this));\n\n        bool success = _token.call(bytes4(keccak256(\"transfer(address,uint256)\")), _to, _amount);\n        require(success);",
          "message": "Low level call in Token.withdrawToken (patch_0.sol#28-39):\n\t-success = _token.call(bytes4(keccak256()(transfer(address,uint256))),_to,_amount) patch_0.sol#37\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 9,
          "vulnerability_code": "    function Ownable() public {\n        owner = msg.sender;",
          "message": "Function 'Ownable.Ownable' (patch_0.sol#7-9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _token,",
          "message": "Parameter '_token' of Token.withdrawToken (patch_0.sol#29) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _amount,",
          "message": "Parameter '_amount' of Token.withdrawToken (patch_0.sol#30) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _to",
          "message": "Parameter '_to' of Token.withdrawToken (patch_0.sol#31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": 49,
          "vulnerability_code": "    function TokenBank() public {\n        owner = msg.sender;\n        MinDeposit = 1 ether;",
          "message": "Function 'TokenBank.TokenBank' (patch_0.sol#46-49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _to,",
          "message": "Parameter '_to' of TokenBank.withdrawTokenToHolder (patch_0.sol#62) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _token,",
          "message": "Parameter '_token' of TokenBank.withdrawTokenToHolder (patch_0.sol#63) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _amount",
          "message": "Parameter '_amount' of TokenBank.withdrawTokenToHolder (patch_0.sol#64) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _addr,",
          "message": "Parameter '_addr' of TokenBank.withdrawToHolder (patch_0.sol#73) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _wei",
          "message": "Parameter '_wei' of TokenBank.withdrawToHolder (patch_0.sol#74) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinDeposit;",
          "message": "Variable 'TokenBank.MinDeposit' (patch_0.sol#43) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint) public Holders;",
          "message": "Variable 'TokenBank.Holders' (patch_0.sol#44) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Callstack Depth Attack Vulnerability",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool success = _token.call(bytes4(keccak256(\"transfer(address,uint256)\")), _to, _amount);",
          "message": null
        }
      ]
    }
  }
}