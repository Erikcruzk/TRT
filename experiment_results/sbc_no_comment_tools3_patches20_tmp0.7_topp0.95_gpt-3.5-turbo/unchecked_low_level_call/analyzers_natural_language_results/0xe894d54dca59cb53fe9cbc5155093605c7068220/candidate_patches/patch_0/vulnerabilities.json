{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_6"
      ],
      "vulnerability_findings": [
        {
          "name": "calls-loop",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(caddress.call(id, from, _tos[i], _value));",
          "message": "airDrop.transfer has external calls inside a loop:\n\t- require(bool)(caddress.call(id,from,_tos[i],_value)) (patch_0.sol#15)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": 18,
          "vulnerability_code": "    function transfer(\n        address from,\n        address caddress,\n        address[] _tos,\n        uint v,\n        uint _decimals\n    ) public returns (bool) {\n        require(_tos.length > 0);\n        bytes4 id = bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\n        uint _value = v * 10 ** _decimals;\n        for (uint i = 0; i < _tos.length; i++) {\n            require(caddress.call(id, from, _tos[i], _value));\n        }\n        return true;",
          "message": "airDrop.transfer (patch_0.sol#4-18) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": 18,
          "vulnerability_code": "    function transfer(\n        address from,\n        address caddress,\n        address[] _tos,\n        uint v,\n        uint _decimals\n    ) public returns (bool) {\n        require(_tos.length > 0);\n        bytes4 id = bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\n        uint _value = v * 10 ** _decimals;\n        for (uint i = 0; i < _tos.length; i++) {\n            require(caddress.call(id, from, _tos[i], _value));\n        }\n        return true;",
          "message": "Low level call in airDrop.transfer (patch_0.sol#4-18):\n\t-require(bool)(caddress.call(id,from,_tos[i],_value)) patch_0.sol#15\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 19,
          "vulnerability_code": "contract airDrop {\n    function transfer(\n        address from,\n        address caddress,\n        address[] _tos,\n        uint v,\n        uint _decimals\n    ) public returns (bool) {\n        require(_tos.length > 0);\n        bytes4 id = bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\n        uint _value = v * 10 ** _decimals;\n        for (uint i = 0; i < _tos.length; i++) {\n            require(caddress.call(id, from, _tos[i], _value));\n        }\n        return true;\n    }",
          "message": "Contract 'airDrop' (patch_0.sol#3-19) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] _tos,",
          "message": "Parameter '_tos' of airDrop.transfer (patch_0.sol#7) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _decimals",
          "message": "Parameter '_decimals' of airDrop.transfer (patch_0.sol#9) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    }
  }
}