{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Callstack Depth Attack Vulnerability",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "            bool success = _token.call(transferSig, _from, _tos[i], _values[i]);",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_7"
      ],
      "vulnerability_findings": [
        {
          "name": "calls-loop",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "            bool success = _token.call(transferSig, _from, _tos[i], _values[i]);",
          "message": "Demo.transfer has external calls inside a loop:\n\t- success = _token.call(transferSig,_from,_tos[i],_values[i]) (patch_1.sol#18)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": 23,
          "vulnerability_code": "    function transfer(\n        address _from,\n        address _token,\n        address[] _tos,\n        uint[] _values\n    ) public returns (bool) {\n        require(_tos.length > 0 && _tos.length == _values.length);\n\n        bytes4 transferSig = bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\n\n        for (uint i = 0; i < _tos.length; i++) {\n            require(_tos[i] != address(0));\n            require(_values[i] > 0);\n\n            bool success = _token.call(transferSig, _from, _tos[i], _values[i]);\n            require(success);\n        }\n\n        return true;",
          "message": "Demo.transfer (patch_1.sol#4-23) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": 23,
          "vulnerability_code": "    function transfer(\n        address _from,\n        address _token,\n        address[] _tos,\n        uint[] _values\n    ) public returns (bool) {\n        require(_tos.length > 0 && _tos.length == _values.length);\n\n        bytes4 transferSig = bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\n\n        for (uint i = 0; i < _tos.length; i++) {\n            require(_tos[i] != address(0));\n            require(_values[i] > 0);\n\n            bool success = _token.call(transferSig, _from, _tos[i], _values[i]);\n            require(success);\n        }\n\n        return true;",
          "message": "Low level call in Demo.transfer (patch_1.sol#4-23):\n\t-success = _token.call(transferSig,_from,_tos[i],_values[i]) patch_1.sol#18\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _from,",
          "message": "Parameter '_from' of Demo.transfer (patch_1.sol#5) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _token,",
          "message": "Parameter '_token' of Demo.transfer (patch_1.sol#6) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] _tos,",
          "message": "Parameter '_tos' of Demo.transfer (patch_1.sol#7) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint[] _values",
          "message": "Parameter '_values' of Demo.transfer (patch_1.sol#8) is not in mixedCase\n"
        }
      ]
    }
  }
}