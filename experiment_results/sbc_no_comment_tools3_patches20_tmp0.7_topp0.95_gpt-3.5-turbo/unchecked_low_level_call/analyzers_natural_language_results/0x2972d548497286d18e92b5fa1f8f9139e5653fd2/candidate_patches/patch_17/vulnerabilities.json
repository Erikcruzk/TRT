{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_7"
      ],
      "vulnerability_findings": [
        {
          "name": "calls-loop",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_cAddress.call(transferMethodId, _from, _toAddresses[i], _values[i]));",
          "message": "Demo.transfer has external calls inside a loop:\n\t- require(bool)(_cAddress.call(transferMethodId,_from,_toAddresses[i],_values[i])) (patch_17.sol#13)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": 16,
          "vulnerability_code": "    function transfer(\n        address _from,\n        address _cAddress,\n        address[] _toAddresses,\n        uint[] _values\n    ) public returns (bool) {\n        require(_toAddresses.length > 0 && _toAddresses.length == _values.length);\n        bytes4 transferMethodId = bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\n        for (uint i = 0; i < _toAddresses.length; i++) {\n            require(_cAddress.call(transferMethodId, _from, _toAddresses[i], _values[i]));\n        }\n        return true;",
          "message": "Demo.transfer (patch_17.sol#4-16) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": 16,
          "vulnerability_code": "    function transfer(\n        address _from,\n        address _cAddress,\n        address[] _toAddresses,\n        uint[] _values\n    ) public returns (bool) {\n        require(_toAddresses.length > 0 && _toAddresses.length == _values.length);\n        bytes4 transferMethodId = bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\n        for (uint i = 0; i < _toAddresses.length; i++) {\n            require(_cAddress.call(transferMethodId, _from, _toAddresses[i], _values[i]));\n        }\n        return true;",
          "message": "Low level call in Demo.transfer (patch_17.sol#4-16):\n\t-require(bool)(_cAddress.call(transferMethodId,_from,_toAddresses[i],_values[i])) patch_17.sol#13\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _from,",
          "message": "Parameter '_from' of Demo.transfer (patch_17.sol#5) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _cAddress,",
          "message": "Parameter '_cAddress' of Demo.transfer (patch_17.sol#6) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] _toAddresses,",
          "message": "Parameter '_toAddresses' of Demo.transfer (patch_17.sol#7) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint[] _values",
          "message": "Parameter '_values' of Demo.transfer (patch_17.sol#8) is not in mixedCase\n"
        }
      ]
    }
  }
}