{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_13"
      ],
      "vulnerability_findings": [
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function newPuppet() public returns (address newPuppet) {",
          "message": "Splitter.newPuppet.newPuppet (local variable @ patch_12.sol#30) shadows:\n\t- Splitter.newPuppet (function @ patch_12.sol#30-35)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 24,
          "vulnerability_code": "    function withdraw() public {\n        require(msg.sender == owner);\n        owner.transfer(address(this).balance);",
          "message": "Splitter.withdraw (patch_12.sol#21-24) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": 28,
          "vulnerability_code": "    function getPuppetCount() public view returns (uint256 puppetCount) {\n        return puppets.length;",
          "message": "Splitter.getPuppetCount (patch_12.sol#26-28) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": 40,
          "vulnerability_code": "    function setExtra(uint256 _id, address _newExtra) public {\n        require(_newExtra != address(0));\n        extra[_id] = _newExtra;",
          "message": "Splitter.setExtra (patch_12.sol#37-40) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": 50,
          "vulnerability_code": "    function fundPuppets() public payable {\n        require(msg.sender == owner);\n        _share = msg.value / 4;\n\n        require(extra[0].call.value(_share)());\n        require(extra[1].call.value(_share)());\n        require(extra[2].call.value(_share)());\n        require(extra[3].call.value(_share)());",
          "message": "Splitter.fundPuppets (patch_12.sol#42-50) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() public payable {}",
          "message": "Splitter.fallback (patch_12.sol#52) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": 68,
          "vulnerability_code": "    function() public payable {\n        if (msg.sender != target[0]) {\n            require(target[0].call.value(msg.value)());\n        }",
          "message": "Puppet.fallback (patch_12.sol#64-68) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": 73,
          "vulnerability_code": "    function withdraw() public {\n        require(msg.sender == master[0]);\n        master[0].transfer(address(this).balance);",
          "message": "Puppet.withdraw (patch_12.sol#70-73) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;",
          "message": "Detected issues with version pragma in patch_12.sol:\n\t- pragma solidity^0.4.23 (patch_12.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": 50,
          "vulnerability_code": "    function fundPuppets() public payable {\n        require(msg.sender == owner);\n        _share = msg.value / 4;\n\n        require(extra[0].call.value(_share)());\n        require(extra[1].call.value(_share)());\n        require(extra[2].call.value(_share)());\n        require(extra[3].call.value(_share)());",
          "message": "Low level call in Splitter.fundPuppets (patch_12.sol#42-50):\n\t-require(bool)(extra[0].call.value(_share)()) patch_12.sol#46\n\t-require(bool)(extra[1].call.value(_share)()) patch_12.sol#47\n\t-require(bool)(extra[2].call.value(_share)()) patch_12.sol#48\n\t-require(bool)(extra[3].call.value(_share)()) patch_12.sol#49\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": 68,
          "vulnerability_code": "    function() public payable {\n        if (msg.sender != target[0]) {\n            require(target[0].call.value(msg.value)());\n        }",
          "message": "Low level call in Puppet.fallback (patch_12.sol#64-68):\n\t-require(bool)(target[0].call.value(msg.value)()) patch_12.sol#66\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setExtra(uint256 _id, address _newExtra) public {",
          "message": "Parameter '_id' of Splitter.setExtra (patch_12.sol#37) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setExtra(uint256 _id, address _newExtra) public {",
          "message": "Parameter '_newExtra' of Splitter.setExtra (patch_12.sol#37) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    }
  }
}