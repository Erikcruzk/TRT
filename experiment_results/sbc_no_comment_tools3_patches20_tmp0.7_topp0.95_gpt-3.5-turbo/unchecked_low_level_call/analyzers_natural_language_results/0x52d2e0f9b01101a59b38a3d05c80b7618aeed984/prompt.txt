/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.19;

contract Token {
    function transfer(address _to, uint _value) returns (bool success);

    function balanceOf(address _owner) constant returns (uint balance);
}

contract EtherGet {
    address owner;

    function EtherGet() {
        owner = msg.sender;
    }

    function withdrawTokens(address tokenContract) public {
        Token tc = Token(tokenContract);
        tc.transfer(owner, tc.balanceOf(this));
    }

    function withdrawEther() public {
        owner.transfer(this.balance);
    }

    function getTokens(uint num, address addr) public {
        for (uint i = 0; i < num; i++) {
            addr.call.value(0 wei)();
        }
    }
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.

/// 1. Slither Analysis Results
/// 1.1. Vulnerability: unchecked_low_level_call at Line 25-29:
    function getTokens(uint num, address addr) public {
        for (uint i = 0; i < num; i++) {
            addr.call.value(0 wei)();
        }
///  Message:Low level call in EtherGet.getTokens (0x52d2e0f9b01101a59b38a3d05c80b7618aeed984.sol#25-29):
///   	-addr.call.value(0)() 0x52d2e0f9b01101a59b38a3d05c80b7618aeed984.sol#27



/// Repaired Solidity Smart Contract