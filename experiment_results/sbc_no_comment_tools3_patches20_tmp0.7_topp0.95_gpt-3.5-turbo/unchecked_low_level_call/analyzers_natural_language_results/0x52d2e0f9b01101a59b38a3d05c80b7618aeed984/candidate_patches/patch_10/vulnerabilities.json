{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_10"
      ],
      "vulnerability_findings": [
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": 22,
          "vulnerability_code": "    function withdrawEther() public {\n        owner.transfer(address(this).balance);",
          "message": "EtherGet.withdrawEther (patch_10.sol#20-22) sends eth to arbitrary user\n\tDangerous calls:\n\t- owner.transfer(address(this).balance) (patch_10.sol#21)\n"
        },
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 28,
          "vulnerability_code": "    function getTokens(uint num, address addr) public payable {\n        for (uint i = 0; i < num; i++) {\n            require(addr.call.value(0)());\n        }",
          "message": "EtherGet.getTokens (patch_10.sol#24-28) sends eth to arbitrary user\n\tDangerous calls:\n\t- require(bool)(addr.call.value(0)()) (patch_10.sol#26)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(addr.call.value(0)());",
          "message": "EtherGet.getTokens has external calls inside a loop:\n\t- require(bool)(addr.call.value(0)()) (patch_10.sol#26)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint _value) public returns (bool success);",
          "message": "Token.transfer (patch_10.sol#4) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint balance);",
          "message": "Token.balanceOf (patch_10.sol#5) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 18,
          "vulnerability_code": "    function withdrawTokens(address tokenContract) public {\n        Token tc = Token(tokenContract);\n        require(tc.transfer(owner, tc.balanceOf(this)));",
          "message": "EtherGet.withdrawTokens (patch_10.sol#15-18) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": 22,
          "vulnerability_code": "    function withdrawEther() public {\n        owner.transfer(address(this).balance);",
          "message": "EtherGet.withdrawEther (patch_10.sol#20-22) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 28,
          "vulnerability_code": "    function getTokens(uint num, address addr) public payable {\n        for (uint i = 0; i < num; i++) {\n            require(addr.call.value(0)());\n        }",
          "message": "EtherGet.getTokens (patch_10.sol#24-28) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_10.sol:\n\t- pragma solidity^0.4.19 (patch_10.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 28,
          "vulnerability_code": "    function getTokens(uint num, address addr) public payable {\n        for (uint i = 0; i < num; i++) {\n            require(addr.call.value(0)());\n        }",
          "message": "Low level call in EtherGet.getTokens (patch_10.sol#24-28):\n\t-require(bool)(addr.call.value(0)()) patch_10.sol#26\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}