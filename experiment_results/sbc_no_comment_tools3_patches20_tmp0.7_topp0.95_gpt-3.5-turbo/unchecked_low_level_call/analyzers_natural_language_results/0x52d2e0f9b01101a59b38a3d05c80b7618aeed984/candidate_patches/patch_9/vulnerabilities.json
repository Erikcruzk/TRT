{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_8"
      ],
      "vulnerability_findings": [
        {
          "name": "calls-loop",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(addr.call.value(msg.value)());",
          "message": "EtherGet.getTokens has external calls inside a loop:\n\t- require(bool)(addr.call.value(msg.value)()) (patch_9.sol#30)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint _value) public returns (bool success);",
          "message": "Token.transfer (patch_9.sol#4) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint balance);",
          "message": "Token.balanceOf (patch_9.sol#6) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 21,
          "vulnerability_code": "    function withdrawTokens(address tokenContract) public {\n        Token tc = Token(tokenContract);\n        uint tokenBalance = tc.balanceOf(this);\n        require(tokenBalance > 0);\n        require(tc.transfer(owner, tokenBalance));",
          "message": "EtherGet.withdrawTokens (patch_9.sol#16-21) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": 26,
          "vulnerability_code": "    function withdrawEther() public {\n        require(msg.sender == owner);\n        msg.sender.transfer(this.balance);",
          "message": "EtherGet.withdrawEther (patch_9.sol#23-26) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": 32,
          "vulnerability_code": "    function getTokens(uint num, address addr) public payable {\n        for (uint i = 0; i < num; i++) {\n            require(addr.call.value(msg.value)());\n        }",
          "message": "EtherGet.getTokens (patch_9.sol#28-32) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_9.sol:\n\t- pragma solidity^0.4.19 (patch_9.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": 32,
          "vulnerability_code": "    function getTokens(uint num, address addr) public payable {\n        for (uint i = 0; i < num; i++) {\n            require(addr.call.value(msg.value)());\n        }",
          "message": "Low level call in EtherGet.getTokens (patch_9.sol#28-32):\n\t-require(bool)(addr.call.value(msg.value)()) patch_9.sol#30\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}