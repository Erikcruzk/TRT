{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_14"
      ],
      "vulnerability_findings": [
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 22,
          "vulnerability_code": "    function withdraw() public {\n        withdrawalCounter += 1;\n\n        require(fibonacciLibrary.delegatecall(fibSig, withdrawalCounter));\n        msg.sender.transfer(calculatedFibNumber * 1 ether);",
          "message": "FibonacciBalance.withdraw (patch_1.sol#17-22) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(calculatedFibNumber * 1000000000000000000) (patch_1.sol#21)\n"
        },
        {
          "name": "controlled-delegatecall",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 22,
          "vulnerability_code": "    function withdraw() public {\n        withdrawalCounter += 1;\n\n        require(fibonacciLibrary.delegatecall(fibSig, withdrawalCounter));\n        msg.sender.transfer(calculatedFibNumber * 1 ether);",
          "message": "FibonacciBalance.withdraw (patch_1.sol#17-22) uses delegatecall to a input-controlled function id\n\trequire(bool)(fibonacciLibrary.delegatecall(fibSig,withdrawalCounter)) (patch_1.sol#20)\n"
        },
        {
          "name": "controlled-delegatecall",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 26,
          "vulnerability_code": "    function() public {\n        require(fibonacciLibrary.delegatecall(msg.data));",
          "message": "FibonacciBalance.fallback (patch_1.sol#24-26) uses delegatecall to a input-controlled function id\n\trequire(bool)(fibonacciLibrary.delegatecall(msg.data)) (patch_1.sol#25)\n"
        },
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public calculatedFibNumber;",
          "message": "FibonacciBalance.calculatedFibNumber (patch_1.sol#6) is never initialized. It is used in:\n\t- withdraw (patch_1.sol#17-22)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public calculatedFibNumber;",
          "message": "FibonacciBalance.calculatedFibNumber should be constant (patch_1.sol#6)\nFibonacciBalance.start should be constant (patch_1.sol#8)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 22,
          "vulnerability_code": "    function withdraw() public {\n        withdrawalCounter += 1;\n\n        require(fibonacciLibrary.delegatecall(fibSig, withdrawalCounter));\n        msg.sender.transfer(calculatedFibNumber * 1 ether);",
          "message": "FibonacciBalance.withdraw (patch_1.sol#17-22) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 26,
          "vulnerability_code": "    function() public {\n        require(fibonacciLibrary.delegatecall(msg.data));",
          "message": "FibonacciBalance.fallback (patch_1.sol#24-26) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": 35,
          "vulnerability_code": "    function setStart(uint _start) public {\n        start = _start;",
          "message": "FibonacciLib.setStart (patch_1.sol#33-35) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": 39,
          "vulnerability_code": "    function setFibonacci(uint n) public {\n        calculatedFibNumber = fibonacci(n);",
          "message": "FibonacciLib.setFibonacci (patch_1.sol#37-39) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 22,
          "vulnerability_code": "    function withdraw() public {\n        withdrawalCounter += 1;\n\n        require(fibonacciLibrary.delegatecall(fibSig, withdrawalCounter));\n        msg.sender.transfer(calculatedFibNumber * 1 ether);",
          "message": "Low level call in FibonacciBalance.withdraw (patch_1.sol#17-22):\n\t-require(bool)(fibonacciLibrary.delegatecall(fibSig,withdrawalCounter)) patch_1.sol#20\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 26,
          "vulnerability_code": "    function() public {\n        require(fibonacciLibrary.delegatecall(msg.data));",
          "message": "Low level call in FibonacciBalance.fallback (patch_1.sol#24-26):\n\t-require(bool)(fibonacciLibrary.delegatecall(msg.data)) patch_1.sol#25\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _fibonacciLibrary) public payable {",
          "message": "Parameter '_fibonacciLibrary' of FibonacciBalance. (patch_1.sol#13) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant fibSig = bytes4(keccak256(\"setFibonacci(uint256)\"));",
          "message": "Constant 'FibonacciBalance.fibSig' (patch_1.sol#11) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setStart(uint _start) public {",
          "message": "Parameter '_start' of FibonacciLib.setStart (patch_1.sol#33) is not in mixedCase\n"
        }
      ]
    },
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    }
  }
}