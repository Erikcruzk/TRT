{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_32"
      ],
      "vulnerability_findings": [
        {
          "name": "constable-states",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 public decimals = 18;",
          "message": "BecToken.decimals should be constant (BECToken.sol#211)\nBecToken.name should be constant (BECToken.sol#208)\nBecToken.symbol should be constant (BECToken.sol#209)\nBecToken.version should be constant (BECToken.sol#210)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": 57,
          "vulnerability_code": "    function balanceOf(\n        address _owner\n    ) public constant returns (uint256 balance) {\n        return balances[_owner];",
          "message": "BasicToken.balanceOf (BECToken.sol#53-57) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address who) public constant returns (uint256);",
          "message": "ERC20Basic.balanceOf (BECToken.sol#31) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 106,
          "vulnerability_to_line": 111,
          "vulnerability_code": "    function allowance(\n        address _owner,\n        address _spender\n    ) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];",
          "message": "StandardToken.allowance (BECToken.sol#106-111) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": 64,
          "vulnerability_code": "    function allowance(\n        address owner,\n        address spender",
          "message": "ERC20.allowance (BECToken.sol#61-64) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 131,
          "vulnerability_to_line": 135,
          "vulnerability_code": "    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;",
          "message": "Ownable.transferOwnership (BECToken.sol#131-135) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 154,
          "vulnerability_to_line": 157,
          "vulnerability_code": "    function pause() public onlyOwner whenNotPaused {\n        paused = true;\n        Pause();",
          "message": "Pausable.pause (BECToken.sol#154-157) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 159,
          "vulnerability_to_line": 162,
          "vulnerability_code": "    function unpause() public onlyOwner whenPaused {\n        paused = false;\n        Unpause();",
          "message": "Pausable.unpause (BECToken.sol#159-162) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 188,
          "vulnerability_to_line": 204,
          "vulnerability_code": "    function batchTransfer(\n        address[] _receivers,\n        uint256 _value\n    ) public whenNotPaused returns (bool) {\n        uint cnt = _receivers.length;\n\n        uint256 amount = uint256(cnt) * _value;\n        require(cnt > 0 && cnt <= 20);\n        require(_value > 0 && balances[msg.sender] >= amount);\n\n        balances[msg.sender] = balances[msg.sender].sub(amount);\n        for (uint i = 0; i < cnt; i++) {\n            balances[_receivers[i]] = balances[_receivers[i]].add(_value);\n            Transfer(msg.sender, _receivers[i], _value);\n        }\n        return true;",
          "message": "PausableToken.batchTransfer (BECToken.sol#188-204) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 218,
          "vulnerability_to_line": 220,
          "vulnerability_code": "    function() {\n        revert();",
          "message": "BecToken.fallback (BECToken.sol#218-220) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.16;",
          "message": "Detected issues with version pragma in BECToken.sol:\n\t- pragma solidity^0.4.16 (BECToken.sol#1): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _owner",
          "message": "Parameter '_owner' of BasicToken.balanceOf (BECToken.sol#54) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {",
          "message": "Parameter '_to' of BasicToken.transfer (BECToken.sol#43) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {",
          "message": "Parameter '_value' of BasicToken.transfer (BECToken.sol#43) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _owner,",
          "message": "Parameter '_owner' of StandardToken.allowance (BECToken.sol#107) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _spender",
          "message": "Parameter '_spender' of StandardToken.allowance (BECToken.sol#108) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _from,",
          "message": "Parameter '_from' of StandardToken.transferFrom (BECToken.sol#85) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _to,",
          "message": "Parameter '_to' of StandardToken.transferFrom (BECToken.sol#86) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _value",
          "message": "Parameter '_value' of StandardToken.transferFrom (BECToken.sol#87) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 100,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {",
          "message": "Parameter '_spender' of StandardToken.approve (BECToken.sol#100) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 100,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {",
          "message": "Parameter '_value' of StandardToken.approve (BECToken.sol#100) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 122,
          "vulnerability_to_line": 124,
          "vulnerability_code": "    function Ownable() {\n        owner = msg.sender;",
          "message": "Function 'Ownable.Ownable' (BECToken.sol#122-124) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 167,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _to,",
          "message": "Parameter '_to' of PausableToken.transfer (BECToken.sol#167) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 168,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _value",
          "message": "Parameter '_value' of PausableToken.transfer (BECToken.sol#168) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 174,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _from,",
          "message": "Parameter '_from' of PausableToken.transferFrom (BECToken.sol#174) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 175,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _to,",
          "message": "Parameter '_to' of PausableToken.transferFrom (BECToken.sol#175) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 176,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _value",
          "message": "Parameter '_value' of PausableToken.transferFrom (BECToken.sol#176) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 182,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _spender,",
          "message": "Parameter '_spender' of PausableToken.approve (BECToken.sol#182) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _value",
          "message": "Parameter '_value' of PausableToken.approve (BECToken.sol#183) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 189,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] _receivers,",
          "message": "Parameter '_receivers' of PausableToken.batchTransfer (BECToken.sol#189) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _value",
          "message": "Parameter '_value' of PausableToken.batchTransfer (BECToken.sol#190) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 213,
          "vulnerability_to_line": 216,
          "vulnerability_code": "    function BecToken() {\n        totalSupply = 7000000000 * (10 ** (uint256(decimals)));\n        balances[msg.sender] = totalSupply;",
          "message": "Function 'BecToken.BecToken' (BECToken.sol#213-216) is not in mixedCase\n"
        }
      ]
    },
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    }
  }
}