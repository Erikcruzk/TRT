{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Callstack Depth Attack Vulnerability",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "            bool res = msg.sender.call.value(amount)();",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_6"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 18,
          "vulnerability_code": "    function withdraw(uint amount) {\n        if (credit[msg.sender] >= amount && !frozenAccount[msg.sender]) {\n            frozenAccount[msg.sender] = true;\n            bool res = msg.sender.call.value(amount)();\n            credit[msg.sender] -= amount;\n            frozenAccount[msg.sender] = false;\n        }",
          "message": "Reentrancy in SimpleDAO.withdraw (patch_11.sol#11-18):\n\tExternal calls:\n\t- res = msg.sender.call.value(amount)() (patch_11.sol#14)\n\tState variables written after the call(s):\n\t- credit (patch_11.sol#15)\n\t- frozenAccount (patch_11.sol#16)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 9,
          "vulnerability_code": "    function donate(address to) payable {\n        credit[to] += msg.value;",
          "message": "SimpleDAO.donate (patch_11.sol#7-9) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 18,
          "vulnerability_code": "    function withdraw(uint amount) {\n        if (credit[msg.sender] >= amount && !frozenAccount[msg.sender]) {\n            frozenAccount[msg.sender] = true;\n            bool res = msg.sender.call.value(amount)();\n            credit[msg.sender] -= amount;\n            frozenAccount[msg.sender] = false;\n        }",
          "message": "SimpleDAO.withdraw (patch_11.sol#11-18) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": 22,
          "vulnerability_code": "    function queryCredit(address to) returns (uint) {\n        return credit[to];",
          "message": "SimpleDAO.queryCredit (patch_11.sol#20-22) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.2;",
          "message": "Detected issues with version pragma in patch_11.sol:\n\t- pragma solidity^0.4.2 (patch_11.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 18,
          "vulnerability_code": "    function withdraw(uint amount) {\n        if (credit[msg.sender] >= amount && !frozenAccount[msg.sender]) {\n            frozenAccount[msg.sender] = true;\n            bool res = msg.sender.call.value(amount)();\n            credit[msg.sender] -= amount;\n            frozenAccount[msg.sender] = false;\n        }",
          "message": "Low level call in SimpleDAO.withdraw (patch_11.sol#11-18):\n\t-res = msg.sender.call.value(amount)() patch_11.sol#14\n"
        }
      ]
    }
  }
}