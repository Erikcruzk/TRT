{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "        credit[to] += msg.value;",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_7"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 9,
          "vulnerability_code": "    function donate(address to) payable {\n        credit[to] += msg.value;",
          "message": "SimpleDAO.donate (patch_1.sol#7-9) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 16,
          "vulnerability_code": "    function withdraw(uint amount) {\n        require(!frozenAccount[msg.sender]);\n        require(credit[msg.sender] >= amount);\n        credit[msg.sender] -= amount;\n        bool res = msg.sender.call.value(amount)();",
          "message": "SimpleDAO.withdraw (patch_1.sol#11-16) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": 20,
          "vulnerability_code": "    function queryCredit(address to) view returns (uint) {\n        return credit[to];",
          "message": "SimpleDAO.queryCredit (patch_1.sol#18-20) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": 24,
          "vulnerability_code": "    function freezeAccount(address account) {\n        frozenAccount[account] = true;",
          "message": "SimpleDAO.freezeAccount (patch_1.sol#22-24) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": 28,
          "vulnerability_code": "    function unfreezeAccount(address account) {\n        frozenAccount[account] = false;",
          "message": "SimpleDAO.unfreezeAccount (patch_1.sol#26-28) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.2;",
          "message": "Detected issues with version pragma in patch_1.sol:\n\t- pragma solidity^0.4.2 (patch_1.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 16,
          "vulnerability_code": "    function withdraw(uint amount) {\n        require(!frozenAccount[msg.sender]);\n        require(credit[msg.sender] >= amount);\n        credit[msg.sender] -= amount;\n        bool res = msg.sender.call.value(amount)();",
          "message": "Low level call in SimpleDAO.withdraw (patch_1.sol#11-16):\n\t-res = msg.sender.call.value(amount)() patch_1.sol#15\n"
        }
      ]
    }
  }
}