{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_6"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 18,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!locked[msg.sender]); // Reentrancy guard\n        uint amountToWithdraw = userBalances[msg.sender];\n        require(amountToWithdraw > 0); // Check if user has balance\n\n        locked[msg.sender] = true; // Lock user's account\n        userBalances[msg.sender] = 0; // Update user's balance before external call\n\n        require(msg.sender.call.value(amountToWithdraw)()); // External call to user's address\n\n        locked[msg.sender] = false; // Unlock user's account",
          "message": "Reentrancy in Reentrancy_secure.withdrawBalance (patch_19.sol#7-18):\n\tExternal calls:\n\t- require(bool)(msg.sender.call.value(amountToWithdraw)()) (patch_19.sol#15)\n\tState variables written after the call(s):\n\t- locked (patch_19.sol#17)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 18,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!locked[msg.sender]); // Reentrancy guard\n        uint amountToWithdraw = userBalances[msg.sender];\n        require(amountToWithdraw > 0); // Check if user has balance\n\n        locked[msg.sender] = true; // Lock user's account\n        userBalances[msg.sender] = 0; // Update user's balance before external call\n\n        require(msg.sender.call.value(amountToWithdraw)()); // External call to user's address\n\n        locked[msg.sender] = false; // Unlock user's account",
          "message": "Reentrancy_secure.withdrawBalance (patch_19.sol#7-18) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": 22,
          "vulnerability_code": "    function deposit() public payable {\n        userBalances[msg.sender] += msg.value; // Add deposited amount to user's balance",
          "message": "Reentrancy_secure.deposit (patch_19.sol#20-22) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 26,
          "vulnerability_code": "    function getBalance() public view returns (uint) {\n        return userBalances[msg.sender];",
          "message": "Reentrancy_secure.getBalance (patch_19.sol#24-26) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 18,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!locked[msg.sender]); // Reentrancy guard\n        uint amountToWithdraw = userBalances[msg.sender];\n        require(amountToWithdraw > 0); // Check if user has balance\n\n        locked[msg.sender] = true; // Lock user's account\n        userBalances[msg.sender] = 0; // Update user's balance before external call\n\n        require(msg.sender.call.value(amountToWithdraw)()); // External call to user's address\n\n        locked[msg.sender] = false; // Unlock user's account",
          "message": "Low level call in Reentrancy_secure.withdrawBalance (patch_19.sol#7-18):\n\t-require(bool)(msg.sender.call.value(amountToWithdraw)()) patch_19.sol#15\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 27,
          "vulnerability_code": "contract Reentrancy_secure {\n    mapping(address => uint) private userBalances;\n    mapping(address => bool) private locked;\n\n    function withdrawBalance() public {\n        require(!locked[msg.sender]); // Reentrancy guard\n        uint amountToWithdraw = userBalances[msg.sender];\n        require(amountToWithdraw > 0); // Check if user has balance\n\n        locked[msg.sender] = true; // Lock user's account\n        userBalances[msg.sender] = 0; // Update user's balance before external call\n\n        require(msg.sender.call.value(amountToWithdraw)()); // External call to user's address\n\n        locked[msg.sender] = false; // Unlock user's account\n    }\n\n    function deposit() public payable {\n        userBalances[msg.sender] += msg.value; // Add deposited amount to user's balance\n    }\n\n    function getBalance() public view returns (uint) {\n        return userBalances[msg.sender];\n    }",
          "message": "Contract 'Reentrancy_secure' (patch_19.sol#3-27) is not in CapWords\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}