{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_7"
      ],
      "vulnerability_findings": [
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": 17,
          "vulnerability_code": "    function withdrawReward(address recipient) public {\n        require(!locked); // added reentrancy guard\n        uint amountToWithdraw = rewardsForA[recipient];\n        rewardsForA[recipient] = 0;\n        locked = true; // set lock before external call\n        (bool success, ) = recipient.call.value(amountToWithdraw)(\"\");\n        require(success);\n        locked = false; // release lock after external call",
          "message": "Reentrancy_bonus.withdrawReward (patch_5.sol#9-17) sends eth to arbitrary user\n\tDangerous calls:\n\t- (success) = recipient.call.value(amountToWithdraw)() (patch_5.sol#14)\n"
        },
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": 17,
          "vulnerability_code": "    function withdrawReward(address recipient) public {\n        require(!locked); // added reentrancy guard\n        uint amountToWithdraw = rewardsForA[recipient];\n        rewardsForA[recipient] = 0;\n        locked = true; // set lock before external call\n        (bool success, ) = recipient.call.value(amountToWithdraw)(\"\");\n        require(success);\n        locked = false; // release lock after external call",
          "message": "Reentrancy in Reentrancy_bonus.withdrawReward (patch_5.sol#9-17):\n\tExternal calls:\n\t- (success) = recipient.call.value(amountToWithdraw)() (patch_5.sol#14)\n\tState variables written after the call(s):\n\t- locked (patch_5.sol#16)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": 26,
          "vulnerability_code": "    function getFirstWithdrawalBonus(address recipient) public {\n        require(!claimedBonus[recipient]);\n\n        rewardsForA[recipient] += 100;\n\n        claimedBonus[recipient] = true;\n        withdrawReward(recipient); // moved after setting claimedBonus",
          "message": "Reentrancy_bonus.getFirstWithdrawalBonus (patch_5.sol#19-26) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;",
          "message": "Detected issues with version pragma in patch_5.sol:\n\t- pragma solidity^0.4.0 (patch_5.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": 17,
          "vulnerability_code": "    function withdrawReward(address recipient) public {\n        require(!locked); // added reentrancy guard\n        uint amountToWithdraw = rewardsForA[recipient];\n        rewardsForA[recipient] = 0;\n        locked = true; // set lock before external call\n        (bool success, ) = recipient.call.value(amountToWithdraw)(\"\");\n        require(success);\n        locked = false; // release lock after external call",
          "message": "Low level call in Reentrancy_bonus.withdrawReward (patch_5.sol#9-17):\n\t-(success) = recipient.call.value(amountToWithdraw)() patch_5.sol#14\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 27,
          "vulnerability_code": "contract Reentrancy_bonus {\n    mapping(address => uint) private userBalances;\n    mapping(address => bool) private claimedBonus;\n    mapping(address => uint) private rewardsForA;\n    bool private locked;\n\n    function withdrawReward(address recipient) public {\n        require(!locked); // added reentrancy guard\n        uint amountToWithdraw = rewardsForA[recipient];\n        rewardsForA[recipient] = 0;\n        locked = true; // set lock before external call\n        (bool success, ) = recipient.call.value(amountToWithdraw)(\"\");\n        require(success);\n        locked = false; // release lock after external call\n    }\n\n    function getFirstWithdrawalBonus(address recipient) public {\n        require(!claimedBonus[recipient]);\n\n        rewardsForA[recipient] += 100;\n\n        claimedBonus[recipient] = true;\n        withdrawReward(recipient); // moved after setting claimedBonus\n    }",
          "message": "Contract 'Reentrancy_bonus' (patch_5.sol#3-27) is not in CapWords\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint) private userBalances;",
          "message": "Reentrancy_bonus.userBalances (patch_5.sol#4) is never used in Reentrancy_bonus\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Callstack Depth Attack Vulnerability",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = recipient.call.value(amountToWithdraw)(\"\");",
          "message": null
        }
      ]
    },
    "mythril-0.23.15": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = recipient.call.value(amountToWithdraw)(\"\");",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "        locked = false; // release lock after external call",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "        locked = false; // release lock after external call",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        }
      ]
    }
  }
}