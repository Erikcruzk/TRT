{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_19"
      ],
      "vulnerability_findings": [
        {
          "name": "constable-states",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinDeposit = 1 ether;",
          "message": "ETH_VAULT.MinDeposit should be constant (patch_10.sol#8)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": 26,
          "vulnerability_code": "    function Deposit() public payable {\n        require(msg.value > MinDeposit);\n        balances[msg.sender] += msg.value;\n        TransferLog.AddMessage(msg.sender, msg.value, \"Deposit\");",
          "message": "ETH_VAULT.Deposit (patch_10.sol#22-26) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": 33,
          "vulnerability_code": "    function CashOut(uint _am) public payable noReentrancy {\n        require(_am <= balances[msg.sender]);\n        balances[msg.sender] -= _am;\n        msg.sender.transfer(_am);\n        TransferLog.AddMessage(msg.sender, _am, \"CashOut\");",
          "message": "ETH_VAULT.CashOut (patch_10.sol#28-33) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() public payable {}",
          "message": "ETH_VAULT.fallback (patch_10.sol#35) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": 51,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        Message memory LastMsg = Message(_adr, _data, _val, now);\n        History.push(LastMsg);",
          "message": "Log.AddMessage (patch_10.sol#48-51) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_10.sol:\n\t- pragma solidity^0.4.19 (patch_10.sol#1): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 36,
          "vulnerability_code": "contract ETH_VAULT {\n    mapping(address => uint) public balances;\n\n    Log TransferLog;\n\n    uint public MinDeposit = 1 ether;\n    bool private locked;\n\n    modifier noReentrancy() {\n        require(!locked);\n        locked = true;\n        _;\n        locked = false;\n    }\n\n    function ETH_VAULT(address _log) public {\n        TransferLog = Log(_log);\n    }\n\n    function Deposit() public payable {\n        require(msg.value > MinDeposit);\n        balances[msg.sender] += msg.value;\n        TransferLog.AddMessage(msg.sender, msg.value, \"Deposit\");\n    }\n\n    function CashOut(uint _am) public payable noReentrancy {\n        require(_am <= balances[msg.sender]);\n        balances[msg.sender] -= _am;\n        msg.sender.transfer(_am);\n        TransferLog.AddMessage(msg.sender, _am, \"CashOut\");\n    }\n\n    function() public payable {}",
          "message": "Contract 'ETH_VAULT' (patch_10.sol#3-36) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": 20,
          "vulnerability_code": "    function ETH_VAULT(address _log) public {\n        TransferLog = Log(_log);",
          "message": "Function 'ETH_VAULT.ETH_VAULT' (patch_10.sol#18-20) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ETH_VAULT(address _log) public {",
          "message": "Parameter '_log' of ETH_VAULT.ETH_VAULT (patch_10.sol#18) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": 26,
          "vulnerability_code": "    function Deposit() public payable {\n        require(msg.value > MinDeposit);\n        balances[msg.sender] += msg.value;\n        TransferLog.AddMessage(msg.sender, msg.value, \"Deposit\");",
          "message": "Function 'ETH_VAULT.Deposit' (patch_10.sol#22-26) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": 33,
          "vulnerability_code": "    function CashOut(uint _am) public payable noReentrancy {\n        require(_am <= balances[msg.sender]);\n        balances[msg.sender] -= _am;\n        msg.sender.transfer(_am);\n        TransferLog.AddMessage(msg.sender, _am, \"CashOut\");",
          "message": "Function 'ETH_VAULT.CashOut' (patch_10.sol#28-33) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function CashOut(uint _am) public payable noReentrancy {",
          "message": "Parameter '_am' of ETH_VAULT.CashOut (patch_10.sol#28) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Log TransferLog;",
          "message": "Variable 'ETH_VAULT.TransferLog' (patch_10.sol#6) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinDeposit = 1 ether;",
          "message": "Variable 'ETH_VAULT.MinDeposit' (patch_10.sol#8) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": 51,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        Message memory LastMsg = Message(_adr, _data, _val, now);\n        History.push(LastMsg);",
          "message": "Function 'Log.AddMessage' (patch_10.sol#48-51) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of Log.AddMessage (patch_10.sol#48) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of Log.AddMessage (patch_10.sol#48) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of Log.AddMessage (patch_10.sol#48) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": "Variable 'Log.History' (patch_10.sol#46) is not in mixedCase\n"
        }
      ]
    }
  }
}