{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_11"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": 61,
          "vulnerability_code": "    function withdrawToHolder(address addr, uint weiAmount) public onlyOwner {\n        require(holders[addr] > 0);\n        require(addr.call.value(weiAmount)());\n        holders[addr] -= weiAmount;",
          "message": "Reentrancy in TokenBank.withdrawToHolder (patch_13.sol#57-61):\n\tExternal calls:\n\t- require(bool)(addr.call.value(weiAmount)()) (patch_13.sol#59)\n\tState variables written after the call(s):\n\t- holders (patch_13.sol#60)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 13,
          "vulnerability_code": "    function changeOwner(address addr) public onlyOwner {\n        newOwner = addr;",
          "message": "Ownable.changeOwner (patch_13.sol#11-13) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 18,
          "vulnerability_code": "    function confirmOwner() public {\n        require(msg.sender == newOwner);\n        owner = newOwner;",
          "message": "Ownable.confirmOwner (patch_13.sol#15-18) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": 43,
          "vulnerability_code": "    function() public payable {\n        deposit();",
          "message": "TokenBank.fallback (patch_13.sol#41-43) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": 55,
          "vulnerability_code": "    function withdrawTokenToHolder(address to, address token, uint amount) public onlyOwner {\n        require(holders[to] > 0);\n        holders[to] = 0;\n        withdrawToken(token, amount, to);",
          "message": "TokenBank.withdrawTokenToHolder (patch_13.sol#51-55) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": 61,
          "vulnerability_code": "    function withdrawToHolder(address addr, uint weiAmount) public onlyOwner {\n        require(holders[addr] > 0);\n        require(addr.call.value(weiAmount)());\n        holders[addr] -= weiAmount;",
          "message": "TokenBank.withdrawToHolder (patch_13.sol#57-61) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_13.sol:\n\t- pragma solidity^0.4.19 (patch_13.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": 29,
          "vulnerability_code": "    function withdrawToken(address token, uint256 amount, address to) public onlyOwner {\n        require(token.call(bytes4(keccak256(\"transfer(address,uint256)\")), to, amount));",
          "message": "Low level call in Token.withdrawToken (patch_13.sol#27-29):\n\t-require(bool)(token.call(bytes4(keccak256()(transfer(address,uint256))),to,amount)) patch_13.sol#28\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": 61,
          "vulnerability_code": "    function withdrawToHolder(address addr, uint weiAmount) public onlyOwner {\n        require(holders[addr] > 0);\n        require(addr.call.value(weiAmount)());\n        holders[addr] -= weiAmount;",
          "message": "Low level call in TokenBank.withdrawToHolder (patch_13.sol#57-61):\n\t-require(bool)(addr.call.value(weiAmount)()) patch_13.sol#59\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 9,
          "vulnerability_code": "    function Ownable() public {\n        owner = msg.sender;",
          "message": "Function 'Ownable.Ownable' (patch_13.sol#7-9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": 39,
          "vulnerability_code": "    function TokenBank() public {\n        owner = msg.sender;\n        minDeposit = 1 ether;",
          "message": "Function 'TokenBank.TokenBank' (patch_13.sol#36-39) is not in mixedCase\n"
        }
      ]
    }
  }
}