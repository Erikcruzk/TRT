{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_28"
      ],
      "vulnerability_findings": [
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Message memory msg;",
          "message": "msg in LogFile.AddMessage (patch_5.sol#62) is a local variable never initialiazed\n"
        },
        {
          "name": "shadowing-builtin",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Message memory msg;",
          "message": "LogFile.AddMessage.msg (local variable @ patch_5.sol#62) shadows built-in symbol \"msg\"\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 20,
          "vulnerability_code": "    function SetMinSum(uint _val) public {\n        require(!intitalized);\n        MinSum = _val;",
          "message": "PENNY_BY_PENNY.SetMinSum (patch_5.sol#17-20) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": 25,
          "vulnerability_code": "    function SetLogFile(address _log) public {\n        require(!intitalized);\n        Log = LogFile(_log);",
          "message": "PENNY_BY_PENNY.SetLogFile (patch_5.sol#22-25) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": 29,
          "vulnerability_code": "    function Initialized() public {\n        intitalized = true;",
          "message": "PENNY_BY_PENNY.Initialized (patch_5.sol#27-29) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": 44,
          "vulnerability_code": "    function Collect(uint _am) public {\n        require(Acc[msg.sender].balance >= MinSum && Acc[msg.sender].balance >= _am && now > Acc[msg.sender].unlockTime);\n        Acc[msg.sender].balance -= _am;\n        require(msg.sender.call.value(_am)());\n        Log.AddMessage(msg.sender, _am, \"Collect\");",
          "message": "PENNY_BY_PENNY.Collect (patch_5.sol#39-44) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": 48,
          "vulnerability_code": "    function() public payable {\n        Put(0);",
          "message": "PENNY_BY_PENNY.fallback (patch_5.sol#46-48) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": 68,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        Message memory msg;\n        msg.Sender = _adr;\n        msg.Time = now;\n        msg.Val = _val;\n        msg.Data = _data;\n        History.push(msg);",
          "message": "LogFile.AddMessage (patch_5.sol#61-68) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_5.sol:\n\t- pragma solidity^0.4.19 (patch_5.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": 44,
          "vulnerability_code": "    function Collect(uint _am) public {\n        require(Acc[msg.sender].balance >= MinSum && Acc[msg.sender].balance >= _am && now > Acc[msg.sender].unlockTime);\n        Acc[msg.sender].balance -= _am;\n        require(msg.sender.call.value(_am)());\n        Log.AddMessage(msg.sender, _am, \"Collect\");",
          "message": "Low level call in PENNY_BY_PENNY.Collect (patch_5.sol#39-44):\n\t-require(bool)(msg.sender.call.value(_am)()) patch_5.sol#42\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 49,
          "vulnerability_code": "contract PENNY_BY_PENNY {\n    struct Holder {\n        uint unlockTime;\n        uint balance;\n    }\n\n    mapping(address => Holder) public Acc;\n\n    uint public MinSum;\n\n    LogFile Log;\n\n    bool intitalized;\n\n    function SetMinSum(uint _val) public {\n        require(!intitalized);\n        MinSum = _val;\n    }\n\n    function SetLogFile(address _log) public {\n        require(!intitalized);\n        Log = LogFile(_log);\n    }\n\n    function Initialized() public {\n        intitalized = true;\n    }\n\n    function Put(uint _lockTime) public payable {\n        Acc[msg.sender].balance += msg.value;\n        if (now + _lockTime > Acc[msg.sender].unlockTime) {\n            Acc[msg.sender].unlockTime = now + _lockTime;\n        }\n        Log.AddMessage(msg.sender, msg.value, \"Put\");\n    }\n\n    function Collect(uint _am) public {\n        require(Acc[msg.sender].balance >= MinSum && Acc[msg.sender].balance >= _am && now > Acc[msg.sender].unlockTime);\n        Acc[msg.sender].balance -= _am;\n        require(msg.sender.call.value(_am)());\n        Log.AddMessage(msg.sender, _am, \"Collect\");\n    }\n\n    function() public payable {\n        Put(0);\n    }",
          "message": "Contract 'PENNY_BY_PENNY' (patch_5.sol#3-49) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 20,
          "vulnerability_code": "    function SetMinSum(uint _val) public {\n        require(!intitalized);\n        MinSum = _val;",
          "message": "Function 'PENNY_BY_PENNY.SetMinSum' (patch_5.sol#17-20) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function SetMinSum(uint _val) public {",
          "message": "Parameter '_val' of PENNY_BY_PENNY.SetMinSum (patch_5.sol#17) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": 25,
          "vulnerability_code": "    function SetLogFile(address _log) public {\n        require(!intitalized);\n        Log = LogFile(_log);",
          "message": "Function 'PENNY_BY_PENNY.SetLogFile' (patch_5.sol#22-25) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function SetLogFile(address _log) public {",
          "message": "Parameter '_log' of PENNY_BY_PENNY.SetLogFile (patch_5.sol#22) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": 29,
          "vulnerability_code": "    function Initialized() public {\n        intitalized = true;",
          "message": "Function 'PENNY_BY_PENNY.Initialized' (patch_5.sol#27-29) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": 37,
          "vulnerability_code": "    function Put(uint _lockTime) public payable {\n        Acc[msg.sender].balance += msg.value;\n        if (now + _lockTime > Acc[msg.sender].unlockTime) {\n            Acc[msg.sender].unlockTime = now + _lockTime;\n        }\n        Log.AddMessage(msg.sender, msg.value, \"Put\");",
          "message": "Function 'PENNY_BY_PENNY.Put' (patch_5.sol#31-37) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Put(uint _lockTime) public payable {",
          "message": "Parameter '_lockTime' of PENNY_BY_PENNY.Put (patch_5.sol#31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": 44,
          "vulnerability_code": "    function Collect(uint _am) public {\n        require(Acc[msg.sender].balance >= MinSum && Acc[msg.sender].balance >= _am && now > Acc[msg.sender].unlockTime);\n        Acc[msg.sender].balance -= _am;\n        require(msg.sender.call.value(_am)());\n        Log.AddMessage(msg.sender, _am, \"Collect\");",
          "message": "Function 'PENNY_BY_PENNY.Collect' (patch_5.sol#39-44) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Collect(uint _am) public {",
          "message": "Parameter '_am' of PENNY_BY_PENNY.Collect (patch_5.sol#39) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => Holder) public Acc;",
          "message": "Variable 'PENNY_BY_PENNY.Acc' (patch_5.sol#9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum;",
          "message": "Variable 'PENNY_BY_PENNY.MinSum' (patch_5.sol#11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    LogFile Log;",
          "message": "Variable 'PENNY_BY_PENNY.Log' (patch_5.sol#13) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": 68,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        Message memory msg;\n        msg.Sender = _adr;\n        msg.Time = now;\n        msg.Val = _val;\n        msg.Data = _data;\n        History.push(msg);",
          "message": "Function 'LogFile.AddMessage' (patch_5.sol#61-68) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of LogFile.AddMessage (patch_5.sol#61) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of LogFile.AddMessage (patch_5.sol#61) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of LogFile.AddMessage (patch_5.sol#61) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": "Variable 'LogFile.History' (patch_5.sol#59) is not in mixedCase\n"
        }
      ]
    }
  }
}