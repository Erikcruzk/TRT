{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_14"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": 13,
          "vulnerability_code": "    function setMinSum(uint _val) public {\n        require(!initialized[msg.sender]);\n        minSum = _val;",
          "message": "DEP_BANK.setMinSum (patch_2.sol#10-13) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 18,
          "vulnerability_code": "    function setLogFile(address _log) public {\n        require(!initialized[msg.sender]);\n        log = LogFile(_log);",
          "message": "DEP_BANK.setLogFile (patch_2.sol#15-18) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": 22,
          "vulnerability_code": "    function initialize() public {\n        initialized[msg.sender] = true;",
          "message": "DEP_BANK.initialize (patch_2.sol#20-22) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": 35,
          "vulnerability_code": "    function collect(uint _am) public {\n        require(initialized[msg.sender]);\n        require(balances[msg.sender] >= minSum && balances[msg.sender] >= _am);\n        balances[msg.sender] -= _am;\n        msg.sender.transfer(_am);\n        log.addMessage(msg.sender, _am, \"Collect\");",
          "message": "DEP_BANK.collect (patch_2.sol#29-35) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": 39,
          "vulnerability_code": "    function() public payable {\n        deposit();",
          "message": "DEP_BANK.fallback (patch_2.sol#37-39) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": 60,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {\n        Message memory newMessage = Message({\n            sender: _adr,\n            data: _data,\n            val: _val,\n            time: now\n        });\n        history.push(newMessage);",
          "message": "LogFile.addMessage (patch_2.sol#52-60) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_2.sol:\n\t- pragma solidity^0.4.19 (patch_2.sol#1): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 40,
          "vulnerability_code": "contract DEP_BANK {\n    mapping(address => uint256) public balances;\n    mapping(address => bool) public initialized;\n    uint public minSum;\n\n    LogFile public log;\n\n    function setMinSum(uint _val) public {\n        require(!initialized[msg.sender]);\n        minSum = _val;\n    }\n\n    function setLogFile(address _log) public {\n        require(!initialized[msg.sender]);\n        log = LogFile(_log);\n    }\n\n    function initialize() public {\n        initialized[msg.sender] = true;\n    }\n\n    function deposit() public payable {\n        balances[msg.sender] += msg.value;\n        log.addMessage(msg.sender, msg.value, \"Deposit\");\n    }\n\n    function collect(uint _am) public {\n        require(initialized[msg.sender]);\n        require(balances[msg.sender] >= minSum && balances[msg.sender] >= _am);\n        balances[msg.sender] -= _am;\n        msg.sender.transfer(_am);\n        log.addMessage(msg.sender, _am, \"Collect\");\n    }\n\n    function() public payable {\n        deposit();\n    }",
          "message": "Contract 'DEP_BANK' (patch_2.sol#3-40) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMinSum(uint _val) public {",
          "message": "Parameter '_val' of DEP_BANK.setMinSum (patch_2.sol#10) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setLogFile(address _log) public {",
          "message": "Parameter '_log' of DEP_BANK.setLogFile (patch_2.sol#15) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function collect(uint _am) public {",
          "message": "Parameter '_am' of DEP_BANK.collect (patch_2.sol#29) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of LogFile.addMessage (patch_2.sol#52) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of LogFile.addMessage (patch_2.sol#52) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of LogFile.addMessage (patch_2.sol#52) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    }
  }
}