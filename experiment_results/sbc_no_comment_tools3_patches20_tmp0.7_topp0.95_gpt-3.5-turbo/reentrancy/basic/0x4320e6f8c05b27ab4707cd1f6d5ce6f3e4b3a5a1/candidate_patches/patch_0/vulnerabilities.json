{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_17"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": 34,
          "vulnerability_code": "    function collect(uint _am) public {\n        require(balances[msg.sender] >= minSum && balances[msg.sender] >= _am);\n        if (msg.sender.call.value(_am)()) {\n            balances[msg.sender] -= _am;\n            log.addMessage(msg.sender, _am, \"Collect\");\n        }",
          "message": "Reentrancy in ACCURAL_DEPOSIT.collect (patch_0.sol#28-34):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (patch_0.sol#30-33)\n\tState variables written after the call(s):\n\t- balances (patch_0.sol#31)\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Message memory lastMsg;",
          "message": "lastMsg in LogFile.addMessage (patch_0.sol#51) is a local variable never initialiazed\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": 12,
          "vulnerability_code": "    function setMinSum(uint _val) public {\n        require(!initialized);\n        minSum = _val;",
          "message": "ACCURAL_DEPOSIT.setMinSum (patch_0.sol#9-12) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": 17,
          "vulnerability_code": "    function setLogFile(address _log) public {\n        require(!initialized);\n        log = LogFile(_log);",
          "message": "ACCURAL_DEPOSIT.setLogFile (patch_0.sol#14-17) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": 21,
          "vulnerability_code": "    function initialize() public {\n        initialized = true;",
          "message": "ACCURAL_DEPOSIT.initialize (patch_0.sol#19-21) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": 34,
          "vulnerability_code": "    function collect(uint _am) public {\n        require(balances[msg.sender] >= minSum && balances[msg.sender] >= _am);\n        if (msg.sender.call.value(_am)()) {\n            balances[msg.sender] -= _am;\n            log.addMessage(msg.sender, _am, \"Collect\");\n        }",
          "message": "ACCURAL_DEPOSIT.collect (patch_0.sol#28-34) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": 38,
          "vulnerability_code": "    function() public payable {\n        deposit();",
          "message": "ACCURAL_DEPOSIT.fallback (patch_0.sol#36-38) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": 57,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {\n        Message memory lastMsg;\n        lastMsg.sender = _adr;\n        lastMsg.time = now;\n        lastMsg.val = _val;\n        lastMsg.data = _data;\n        history.push(lastMsg);",
          "message": "LogFile.addMessage (patch_0.sol#50-57) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_0.sol:\n\t- pragma solidity^0.4.19 (patch_0.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": 34,
          "vulnerability_code": "    function collect(uint _am) public {\n        require(balances[msg.sender] >= minSum && balances[msg.sender] >= _am);\n        if (msg.sender.call.value(_am)()) {\n            balances[msg.sender] -= _am;\n            log.addMessage(msg.sender, _am, \"Collect\");\n        }",
          "message": "Low level call in ACCURAL_DEPOSIT.collect (patch_0.sol#28-34):\n\t-msg.sender.call.value(_am)() patch_0.sol#30-33\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 39,
          "vulnerability_code": "contract ACCURAL_DEPOSIT {\n    mapping(address => uint256) public balances;\n    uint public minSum = 1 ether;\n    LogFile log = new LogFile();\n    bool initialized;\n\n    function setMinSum(uint _val) public {\n        require(!initialized);\n        minSum = _val;\n    }\n\n    function setLogFile(address _log) public {\n        require(!initialized);\n        log = LogFile(_log);\n    }\n\n    function initialize() public {\n        initialized = true;\n    }\n\n    function deposit() public payable {\n        balances[msg.sender] += msg.value;\n        log.addMessage(msg.sender, msg.value, \"Put\");\n    }\n\n    function collect(uint _am) public {\n        require(balances[msg.sender] >= minSum && balances[msg.sender] >= _am);\n        if (msg.sender.call.value(_am)()) {\n            balances[msg.sender] -= _am;\n            log.addMessage(msg.sender, _am, \"Collect\");\n        }\n    }\n\n    function() public payable {\n        deposit();\n    }",
          "message": "Contract 'ACCURAL_DEPOSIT' (patch_0.sol#3-39) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMinSum(uint _val) public {",
          "message": "Parameter '_val' of ACCURAL_DEPOSIT.setMinSum (patch_0.sol#9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setLogFile(address _log) public {",
          "message": "Parameter '_log' of ACCURAL_DEPOSIT.setLogFile (patch_0.sol#14) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function collect(uint _am) public {",
          "message": "Parameter '_am' of ACCURAL_DEPOSIT.collect (patch_0.sol#28) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of LogFile.addMessage (patch_0.sol#50) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of LogFile.addMessage (patch_0.sol#50) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of LogFile.addMessage (patch_0.sol#50) is not in mixedCase\n"
        }
      ]
    },
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    }
  }
}