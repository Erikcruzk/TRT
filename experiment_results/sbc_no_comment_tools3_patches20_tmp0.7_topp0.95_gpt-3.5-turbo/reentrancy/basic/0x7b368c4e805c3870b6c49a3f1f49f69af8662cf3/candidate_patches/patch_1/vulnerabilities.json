{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_17"
      ],
      "vulnerability_findings": [
        {
          "name": "constable-states",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum = 1 ether;",
          "message": "W_WALLET.MinSum should be constant (patch_1.sol#11)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": 33,
          "vulnerability_code": "    function Collect(uint _am) public {\n        require(Acc[msg.sender].balance >= MinSum && Acc[msg.sender].balance >= _am && now > Acc[msg.sender].unlockTime);\n        Acc[msg.sender].balance -= _am;\n        if (!msg.sender.send(_am)) {\n            Acc[msg.sender].balance += _am;\n        } else {\n            LogFile.AddMessage(msg.sender, _am, \"Collect\");\n        }",
          "message": "W_WALLET.Collect (patch_1.sol#25-33) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": 37,
          "vulnerability_code": "    function() public payable {\n        Put(0);",
          "message": "W_WALLET.fallback (patch_1.sol#35-37) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": 53,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        Message memory newMsg = Message(_adr, _data, _val, now);\n        History.push(newMsg);",
          "message": "Log.AddMessage (patch_1.sol#50-53) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 38,
          "vulnerability_code": "contract W_WALLET {\n    struct Holder {\n        uint unlockTime;\n        uint balance;\n    }\n    \n    mapping(address => Holder) public Acc;\n    \n    uint public MinSum = 1 ether;\n    \n    Log LogFile;\n    \n    constructor(address log) public {\n        LogFile = Log(log);\n    }\n    \n    function Put(uint _unlockTime) public payable {\n        Acc[msg.sender].balance += msg.value;\n        Acc[msg.sender].unlockTime = _unlockTime > now ? _unlockTime : now;\n        LogFile.AddMessage(msg.sender, msg.value, \"Put\");\n    }\n    \n    function Collect(uint _am) public {\n        require(Acc[msg.sender].balance >= MinSum && Acc[msg.sender].balance >= _am && now > Acc[msg.sender].unlockTime);\n        Acc[msg.sender].balance -= _am;\n        if (!msg.sender.send(_am)) {\n            Acc[msg.sender].balance += _am;\n        } else {\n            LogFile.AddMessage(msg.sender, _am, \"Collect\");\n        }\n    }\n    \n    function() public payable {\n        Put(0);\n    }",
          "message": "Contract 'W_WALLET' (patch_1.sol#3-38) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": 23,
          "vulnerability_code": "    function Put(uint _unlockTime) public payable {\n        Acc[msg.sender].balance += msg.value;\n        Acc[msg.sender].unlockTime = _unlockTime > now ? _unlockTime : now;\n        LogFile.AddMessage(msg.sender, msg.value, \"Put\");",
          "message": "Function 'W_WALLET.Put' (patch_1.sol#19-23) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Put(uint _unlockTime) public payable {",
          "message": "Parameter '_unlockTime' of W_WALLET.Put (patch_1.sol#19) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": 33,
          "vulnerability_code": "    function Collect(uint _am) public {\n        require(Acc[msg.sender].balance >= MinSum && Acc[msg.sender].balance >= _am && now > Acc[msg.sender].unlockTime);\n        Acc[msg.sender].balance -= _am;\n        if (!msg.sender.send(_am)) {\n            Acc[msg.sender].balance += _am;\n        } else {\n            LogFile.AddMessage(msg.sender, _am, \"Collect\");\n        }",
          "message": "Function 'W_WALLET.Collect' (patch_1.sol#25-33) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Collect(uint _am) public {",
          "message": "Parameter '_am' of W_WALLET.Collect (patch_1.sol#25) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => Holder) public Acc;",
          "message": "Variable 'W_WALLET.Acc' (patch_1.sol#9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum = 1 ether;",
          "message": "Variable 'W_WALLET.MinSum' (patch_1.sol#11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Log LogFile;",
          "message": "Variable 'W_WALLET.LogFile' (patch_1.sol#13) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": 53,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        Message memory newMsg = Message(_adr, _data, _val, now);\n        History.push(newMsg);",
          "message": "Function 'Log.AddMessage' (patch_1.sol#50-53) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of Log.AddMessage (patch_1.sol#50) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of Log.AddMessage (patch_1.sol#50) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of Log.AddMessage (patch_1.sol#50) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": "Variable 'Log.History' (patch_1.sol#48) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}