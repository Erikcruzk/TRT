{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "address": 12,
            "contract": "Ownable",
            "exploit": {
                "initialState": {
                    "accounts": {
                        "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {
                            "balance": "0x2",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        },
                        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {
                            "balance": "0x0",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        }
                    }
                },
                "steps": [
                    {
                        "address": "",
                        "calldata": "",
                        "input": "0x608060405234801561000f575f80fd5b503360015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506105098061005d5f395ff3fe608060405234801561000f575f80fd5b506004361061004a575f3560e01c80638da5cb5b1461004e578063a6f9dae11461006c578063bd9b6d8614610088578063d4ee1d9014610092575b5f80fd5b6100566100b0565b6040516100639190610335565b60405180910390f35b6100866004803603810190610081919061037c565b6100d5565b005b6100906101a6565b005b61009a6102d3565b6040516100a79190610335565b60405180910390f35b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610164576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015b90610427565b60405180910390fd5b805f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610233576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022a906104b5565b60405180910390fd5b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505f805f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61031f826102f6565b9050919050565b61032f81610315565b82525050565b5f6020820190506103485f830184610326565b92915050565b5f80fd5b61035b81610315565b8114610365575f80fd5b50565b5f8135905061037681610352565b92915050565b5f602082840312156103915761039061034e565b5b5f61039e84828501610368565b91505092915050565b5f82825260208201905092915050565b7f4f6e6c7920636f6e7472616374206f776e65722063616e20706572666f726d205f8201527f7468697320616374696f6e000000000000000000000000000000000000000000602082015250565b5f610411602b836103a7565b915061041c826103b7565b604082019050919050565b5f6020820190508181035f83015261043e81610405565b9050919050565b7f4f6e6c79206e6577206f776e65722063616e20636f6e6669726d206f776e65725f8201527f7368697000000000000000000000000000000000000000000000000000000000602082015250565b5f61049f6024836103a7565b91506104aa82610445565b604082019050919050565b5f6020820190508181035f8301526104cc81610493565b905091905056fea26469706673582212209c93283d4b456b5ea7cf166c047bb0d0c42898f6ef7c92d1c9786a5c910d6f2c64736f6c63430008140033",
                        "name": "unknown",
                        "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe",
                        "value": "0x1"
                    }
                ]
            },
            "filename": "/Users/erikcruz/Documents/thesis_repos/transformative_smart_contract_repair/experiment_results/sbc_no_comment_tools3_patches20_tmp0.7_topp0.95_gpt-3.5-turbo/reentrancy/basic/0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839/candidate_patches/patch_14/patch_14.sol",
            "function": "constructor",
            "line": 7,
            "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110",
            "name": "Exception State (SWC 110)",
            "severity": "Medium"
        },
        {
            "address": 12,
            "contract": "Token",
            "exploit": {
                "initialState": {
                    "accounts": {
                        "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {
                            "balance": "0x2",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        },
                        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {
                            "balance": "0x0",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        }
                    }
                },
                "steps": [
                    {
                        "address": "",
                        "calldata": "",
                        "input": "0x608060405234801561000f575f80fd5b503360015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061089f8061005d5f395ff3fe608060405234801561000f575f80fd5b5060043610610055575f3560e01c80633ccdbb28146100595780638da5cb5b14610075578063a6f9dae114610093578063bd9b6d86146100af578063d4ee1d90146100b9575b5f80fd5b610073600480360381019061006e919061057a565b6100d7565b005b61007d6102a3565b60405161008a91906105d9565b60405180910390f35b6100ad60048036038101906100a891906105f2565b6102c8565b005b6100b7610399565b005b6100c16104c6565b6040516100ce91906105d9565b60405180910390f35b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610166576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015d9061069d565b60405180910390fd5b5f8373ffffffffffffffffffffffffffffffffffffffff1682846040516024016101919291906106ca565b6040516020818303038152906040527fa9059cbb000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161021b919061075d565b5f604051808303815f865af19150503d805f8114610254576040519150601f19603f3d011682016040523d82523d5f602084013e610259565b606091505b505090508061029d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610294906107bd565b60405180910390fd5b50505050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610357576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034e9061069d565b60405180910390fd5b805f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610426576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041d9061084b565b60405180910390fd5b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505f805f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610516826104ed565b9050919050565b6105268161050c565b8114610530575f80fd5b50565b5f813590506105418161051d565b92915050565b5f819050919050565b61055981610547565b8114610563575f80fd5b50565b5f8135905061057481610550565b92915050565b5f805f60608486031215610591576105906104e9565b5b5f61059e86828701610533565b93505060206105af86828701610566565b92505060406105c086828701610533565b9150509250925092565b6105d38161050c565b82525050565b5f6020820190506105ec5f8301846105ca565b92915050565b5f60208284031215610607576106066104e9565b5b5f61061484828501610533565b91505092915050565b5f82825260208201905092915050565b7f4f6e6c7920636f6e7472616374206f776e65722063616e20706572666f726d205f8201527f7468697320616374696f6e000000000000000000000000000000000000000000602082015250565b5f610687602b8361061d565b91506106928261062d565b604082019050919050565b5f6020820190508181035f8301526106b48161067b565b9050919050565b6106c481610547565b82525050565b5f6040820190506106dd5f8301856105ca565b6106ea60208301846106bb565b9392505050565b5f81519050919050565b5f81905092915050565b5f5b83811015610722578082015181840152602081019050610707565b5f8484015250505050565b5f610737826106f1565b61074181856106fb565b9350610751818560208601610705565b80840191505092915050565b5f610768828461072d565b915081905092915050565b7f546f6b656e207472616e73666572206661696c656400000000000000000000005f82015250565b5f6107a760158361061d565b91506107b282610773565b602082019050919050565b5f6020820190508181035f8301526107d48161079b565b9050919050565b7f4f6e6c79206e6577206f776e65722063616e20636f6e6669726d206f776e65725f8201527f7368697000000000000000000000000000000000000000000000000000000000602082015250565b5f61083560248361061d565b9150610840826107db565b604082019050919050565b5f6020820190508181035f83015261086281610829565b905091905056fea2646970667358221220c119e9409c17731092b765e60614d808c2ac2242f2e573641dea7182f214d38964736f6c63430008140033",
                        "name": "unknown",
                        "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe",
                        "value": "0x1"
                    }
                ]
            },
            "filename": "/Users/erikcruz/Documents/thesis_repos/transformative_smart_contract_repair/experiment_results/sbc_no_comment_tools3_patches20_tmp0.7_topp0.95_gpt-3.5-turbo/reentrancy/basic/0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839/candidate_patches/patch_14/patch_14.sol",
            "function": "constructor",
            "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.\nClassification: SWC-110",
            "name": "Exception State (SWC 110)",
            "severity": "Low"
        },
        {
            "address": 12,
            "contract": "TokenBank",
            "exploit": {
                "initialState": {
                    "accounts": {
                        "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {
                            "balance": "0x2",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        },
                        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {
                            "balance": "0x0",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        }
                    }
                },
                "steps": [
                    {
                        "address": "",
                        "calldata": "",
                        "input": "0x608060405234801561000f575f80fd5b503360015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503360015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550670de0b6b3a76400006002819055506112d7806100ac5f395ff3fe608060405260043610610094575f3560e01c8063afe751e411610058578063afe751e414610173578063bd9b6d861461019b578063d0e30db0146101b1578063d4ee1d90146101bb578063eec0ddd7146101e5576100a3565b806310e6378a146100a757806311bcd830146100cf5780633ccdbb28146100f95780638da5cb5b14610121578063a6f9dae11461014b576100a3565b366100a3576100a1610221565b005b5f80fd5b3480156100b2575f80fd5b506100cd60048036038101906100c89190610b66565b6102ba565b005b3480156100da575f80fd5b506100e3610548565b6040516100f09190610bb3565b60405180910390f35b348015610104575f80fd5b5061011f600480360381019061011a9190610c07565b61054e565b005b34801561012c575f80fd5b5061013561071a565b6040516101429190610c66565b60405180910390f35b348015610156575f80fd5b50610171600480360381019061016c9190610c7f565b61073f565b005b34801561017e575f80fd5b5061019960048036038101906101949190610caa565b610810565b005b3480156101a6575f80fd5b506101af610970565b005b6101b9610221565b005b3480156101c6575f80fd5b506101cf610a9d565b6040516101dc9190610c66565b60405180910390f35b3480156101f0575f80fd5b5061020b60048036038101906102069190610c7f565b610ac0565b6040516102189190610bb3565b60405180910390f35b6002543411610265576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025c90610d7a565b60405180910390fd5b3460035f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546102b19190610dc5565b92505081905550565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610349576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034090610e68565b60405180910390fd5b5f60035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054116103c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103bf90610ef6565b60405180910390fd5b60035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054811115610448576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043f90610f84565b60405180910390fd5b8060035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546104949190610fa2565b925050819055505f8273ffffffffffffffffffffffffffffffffffffffff16826040516104c090611002565b5f6040518083038185875af1925050503d805f81146104fa576040519150601f19603f3d011682016040523d82523d5f602084013e6104ff565b606091505b5050905080610543576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053a90611060565b60405180910390fd5b505050565b60025481565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d490610e68565b60405180910390fd5b5f8373ffffffffffffffffffffffffffffffffffffffff16828460405160240161060892919061107e565b6040516020818303038152906040527fa9059cbb000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516106929190611107565b5f604051808303815f865af19150503d805f81146106cb576040519150601f19603f3d011682016040523d82523d5f602084013e6106d0565b606091505b5050905080610714576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070b90611167565b60405180910390fd5b50505050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c590610e68565b60405180910390fd5b805f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461089f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089690610e68565b60405180910390fd5b5f60035f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20541161091e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610915906111f5565b60405180910390fd5b5f60035f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208190555061096b82828561054e565b505050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f490611283565b60405180910390fd5b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505f805f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6003602052805f5260405f205f915090505481565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610b0282610ad9565b9050919050565b610b1281610af8565b8114610b1c575f80fd5b50565b5f81359050610b2d81610b09565b92915050565b5f819050919050565b610b4581610b33565b8114610b4f575f80fd5b50565b5f81359050610b6081610b3c565b92915050565b5f8060408385031215610b7c57610b7b610ad5565b5b5f610b8985828601610b1f565b9250506020610b9a85828601610b52565b9150509250929050565b610bad81610b33565b82525050565b5f602082019050610bc65f830184610ba4565b92915050565b5f610bd682610ad9565b9050919050565b610be681610bcc565b8114610bf0575f80fd5b50565b5f81359050610c0181610bdd565b92915050565b5f805f60608486031215610c1e57610c1d610ad5565b5b5f610c2b86828701610bf3565b9350506020610c3c86828701610b52565b9250506040610c4d86828701610bf3565b9150509250925092565b610c6081610bcc565b82525050565b5f602082019050610c795f830184610c57565b92915050565b5f60208284031215610c9457610c93610ad5565b5b5f610ca184828501610bf3565b91505092915050565b5f805f60608486031215610cc157610cc0610ad5565b5b5f610cce86828701610bf3565b9350506020610cdf86828701610bf3565b9250506040610cf086828701610b52565b9150509250925092565b5f82825260208201905092915050565b7f4465706f73697420616d6f756e742073686f756c6420626520677265617465725f8201527f207468616e206d696e696d756d206465706f7369740000000000000000000000602082015250565b5f610d64603583610cfa565b9150610d6f82610d0a565b604082019050919050565b5f6020820190508181035f830152610d9181610d58565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610dcf82610b33565b9150610dda83610b33565b9250828201905080821115610df257610df1610d98565b5b92915050565b7f4f6e6c7920636f6e7472616374206f776e65722063616e20706572666f726d205f8201527f7468697320616374696f6e000000000000000000000000000000000000000000602082015250565b5f610e52602b83610cfa565b9150610e5d82610df8565b604082019050919050565b5f6020820190508181035f830152610e7f81610e46565b9050919050565b7f486f6c6465722073686f756c6420686176652062616c616e636520746f2077695f8201527f7468647261770000000000000000000000000000000000000000000000000000602082015250565b5f610ee0602683610cfa565b9150610eeb82610e86565b604082019050919050565b5f6020820190508181035f830152610f0d81610ed4565b9050919050565b7f576974686472617720616d6f756e742073686f756c64206265206c65737320745f8201527f68616e206f7220657175616c20746f20686f6c64657227732062616c616e6365602082015250565b5f610f6e604083610cfa565b9150610f7982610f14565b604082019050919050565b5f6020820190508181035f830152610f9b81610f62565b9050919050565b5f610fac82610b33565b9150610fb783610b33565b9250828203905081811115610fcf57610fce610d98565b5b92915050565b5f81905092915050565b50565b5f610fed5f83610fd5565b9150610ff882610fdf565b5f82019050919050565b5f61100c82610fe2565b9150819050919050565b7f455448207472616e73666572206661696c6564000000000000000000000000005f82015250565b5f61104a601383610cfa565b915061105582611016565b602082019050919050565b5f6020820190508181035f8301526110778161103e565b9050919050565b5f6040820190506110915f830185610c57565b61109e6020830184610ba4565b9392505050565b5f81519050919050565b5f5b838110156110cc5780820151818401526020810190506110b1565b5f8484015250505050565b5f6110e1826110a5565b6110eb8185610fd5565b93506110fb8185602086016110af565b80840191505092915050565b5f61111282846110d7565b915081905092915050565b7f546f6b656e207472616e73666572206661696c656400000000000000000000005f82015250565b5f611151601583610cfa565b915061115c8261111d565b602082019050919050565b5f6020820190508181035f83015261117e81611145565b9050919050565b7f486f6c6465722073686f756c6420686176652062616c616e636520746f2077695f8201527f74686472617720746f6b656e7300000000000000000000000000000000000000602082015250565b5f6111df602d83610cfa565b91506111ea82611185565b604082019050919050565b5f6020820190508181035f83015261120c816111d3565b9050919050565b7f4f6e6c79206e6577206f776e65722063616e20636f6e6669726d206f776e65725f8201527f7368697000000000000000000000000000000000000000000000000000000000602082015250565b5f61126d602483610cfa565b915061127882611213565b604082019050919050565b5f6020820190508181035f83015261129a81611261565b905091905056fea26469706673582212200d97fd90c32da3c116390c0ee9d97721c519a1b9c51959f5871c5f1b9da9f01964736f6c63430008140033",
                        "name": "unknown",
                        "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe",
                        "value": "0x1"
                    }
                ]
            },
            "filename": "/Users/erikcruz/Documents/thesis_repos/transformative_smart_contract_repair/experiment_results/sbc_no_comment_tools3_patches20_tmp0.7_topp0.95_gpt-3.5-turbo/reentrancy/basic/0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839/candidate_patches/patch_14/patch_14.sol",
            "function": "constructor",
            "line": 42,
            "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110",
            "name": "Exception State (SWC 110)",
            "severity": "Medium"
        }
    ],
    "infos": [],
    "parser": {
        "id": "mythril-0.23.15",
        "mode": "solidity",
        "version": "2023/01/20"
    }
}
