{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "address": 12,
            "contract": "Ownable",
            "exploit": {
                "initialState": {
                    "accounts": {
                        "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {
                            "balance": "0x2",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        },
                        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {
                            "balance": "0x0",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        }
                    }
                },
                "steps": [
                    {
                        "address": "",
                        "calldata": "",
                        "input": "0x608060405234801561000f575f80fd5b50335f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061050c8061005c5f395ff3fe608060405234801561000f575f80fd5b506004361061004a575f3560e01c80638da5cb5b1461004e578063a6f9dae11461006c578063bd9b6d8614610088578063d4ee1d9014610092575b5f80fd5b6100566100b0565b6040516100639190610338565b60405180910390f35b6100866004803603810190610081919061037f565b6100d3565b005b6100906101a3565b005b61009a6102d4565b6040516100a79190610338565b60405180910390f35b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610160576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101579061042a565b60405180910390fd5b8060015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610232576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610229906104b8565b60405180910390fd5b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff165f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505f60015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610322826102f9565b9050919050565b61033281610318565b82525050565b5f60208201905061034b5f830184610329565b92915050565b5f80fd5b61035e81610318565b8114610368575f80fd5b50565b5f8135905061037981610355565b92915050565b5f6020828403121561039457610393610351565b5b5f6103a18482850161036b565b91505092915050565b5f82825260208201905092915050565b7f4f6e6c7920746865206f776e65722063616e20657865637574652074686973205f8201527f66756e6374696f6e000000000000000000000000000000000000000000000000602082015250565b5f6104146028836103aa565b915061041f826103ba565b604082019050919050565b5f6020820190508181035f83015261044181610408565b9050919050565b7f4f6e6c7920746865206e6577206f776e65722063616e20636f6e6669726d206f5f8201527f776e657273686970000000000000000000000000000000000000000000000000602082015250565b5f6104a26028836103aa565b91506104ad82610448565b604082019050919050565b5f6020820190508181035f8301526104cf81610496565b905091905056fea26469706673582212204f4afa55195937e8753bf8f5049b4c71f2891a8dec1024815ae0154adcef656964736f6c63430008140033",
                        "name": "unknown",
                        "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe",
                        "value": "0x1"
                    }
                ]
            },
            "filename": "/Users/erikcruz/Documents/thesis_repos/transformative_smart_contract_repair/experiment_results/sbc_no_comment_tools3_patches20_tmp0.7_topp0.95_gpt-3.5-turbo/reentrancy/basic/0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839/candidate_patches/patch_15/patch_15.sol",
            "function": "constructor",
            "line": 7,
            "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110",
            "name": "Exception State (SWC 110)",
            "severity": "Medium"
        },
        {
            "address": 12,
            "contract": "Token",
            "exploit": {
                "initialState": {
                    "accounts": {
                        "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {
                            "balance": "0x2",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        },
                        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {
                            "balance": "0x0",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        }
                    }
                },
                "steps": [
                    {
                        "address": "",
                        "calldata": "",
                        "input": "0x608060405234801561000f575f80fd5b50335f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506109b18061005c5f395ff3fe608060405234801561000f575f80fd5b5060043610610055575f3560e01c80633ccdbb28146100595780638da5cb5b14610075578063a6f9dae114610093578063bd9b6d86146100af578063d4ee1d90146100b9575b5f80fd5b610073600480360381019061006e91906105de565b6100d7565b005b61007d610304565b60405161008a919061063d565b60405180910390f35b6100ad60048036038101906100a89190610656565b610327565b005b6100b76103f7565b005b6100c1610528565b6040516100ce919061063d565b60405180910390f35b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610164576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015b90610701565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036101d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101c990610769565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610240576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610237906107d1565b60405180910390fd5b5f8373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83856040518363ffffffff1660e01b815260040161027c9291906107fe565b6020604051808303815f875af1158015610298573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102bc919061085a565b9050806102fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f5906108cf565b60405180910390fd5b50505050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ab90610701565b60405180910390fd5b8060015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610486576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d9061095d565b60405180910390fd5b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff165f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505f60015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61057a82610551565b9050919050565b61058a81610570565b8114610594575f80fd5b50565b5f813590506105a581610581565b92915050565b5f819050919050565b6105bd816105ab565b81146105c7575f80fd5b50565b5f813590506105d8816105b4565b92915050565b5f805f606084860312156105f5576105f461054d565b5b5f61060286828701610597565b9350506020610613868287016105ca565b925050604061062486828701610597565b9150509250925092565b61063781610570565b82525050565b5f6020820190506106505f83018461062e565b92915050565b5f6020828403121561066b5761066a61054d565b5b5f61067884828501610597565b91505092915050565b5f82825260208201905092915050565b7f4f6e6c7920746865206f776e65722063616e20657865637574652074686973205f8201527f66756e6374696f6e000000000000000000000000000000000000000000000000602082015250565b5f6106eb602883610681565b91506106f682610691565b604082019050919050565b5f6020820190508181035f830152610718816106df565b9050919050565b7f496e76616c696420746f6b656e206164647265737300000000000000000000005f82015250565b5f610753601583610681565b915061075e8261071f565b602082019050919050565b5f6020820190508181035f83015261078081610747565b9050919050565b7f496e76616c696420726563697069656e742061646472657373000000000000005f82015250565b5f6107bb601983610681565b91506107c682610787565b602082019050919050565b5f6020820190508181035f8301526107e8816107af565b9050919050565b6107f8816105ab565b82525050565b5f6040820190506108115f83018561062e565b61081e60208301846107ef565b9392505050565b5f8115159050919050565b61083981610825565b8114610843575f80fd5b50565b5f8151905061085481610830565b92915050565b5f6020828403121561086f5761086e61054d565b5b5f61087c84828501610846565b91505092915050565b7f546f6b656e207472616e73666572206661696c656400000000000000000000005f82015250565b5f6108b9601583610681565b91506108c482610885565b602082019050919050565b5f6020820190508181035f8301526108e6816108ad565b9050919050565b7f4f6e6c7920746865206e6577206f776e65722063616e20636f6e6669726d206f5f8201527f776e657273686970000000000000000000000000000000000000000000000000602082015250565b5f610947602883610681565b9150610952826108ed565b604082019050919050565b5f6020820190508181035f8301526109748161093b565b905091905056fea26469706673582212200d475c81f900efb879891efb535047d1dc4b511c352c7451581d7eaf9682022d64736f6c63430008140033",
                        "name": "unknown",
                        "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe",
                        "value": "0x1"
                    }
                ]
            },
            "filename": "/Users/erikcruz/Documents/thesis_repos/transformative_smart_contract_repair/experiment_results/sbc_no_comment_tools3_patches20_tmp0.7_topp0.95_gpt-3.5-turbo/reentrancy/basic/0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839/candidate_patches/patch_15/patch_15.sol",
            "function": "constructor",
            "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.\nClassification: SWC-110",
            "name": "Exception State (SWC 110)",
            "severity": "Low"
        },
        {
            "address": 12,
            "contract": "TokenBank",
            "exploit": {
                "initialState": {
                    "accounts": {
                        "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {
                            "balance": "0x2",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        },
                        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {
                            "balance": "0x0",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        }
                    }
                },
                "steps": [
                    {
                        "address": "",
                        "calldata": "",
                        "input": "0x608060405234801561000f575f80fd5b50335f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550670de0b6b3a76400006002819055506112c58061006b5f395ff3fe608060405260043610610094575f3560e01c8063a6f9dae111610058578063a6f9dae11461017f578063afe751e4146101a7578063bd9b6d86146101cf578063d0e30db0146101e5578063d4ee1d90146101ef57610095565b806310e6378a1461009f57806318a5bbdc146100c75780633ccdbb281461010357806341b3d1851461012b5780638da5cb5b1461015557610095565b5b61009d610219565b005b3480156100aa575f80fd5b506100c560048036038101906100c09190610b91565b6102b2565b005b3480156100d2575f80fd5b506100ed60048036038101906100e89190610c0a565b6104cf565b6040516100fa9190610c44565b60405180910390f35b34801561010e575f80fd5b5061012960048036038101906101249190610c5d565b6104e4565b005b348015610136575f80fd5b5061013f610711565b60405161014c9190610c44565b60405180910390f35b348015610160575f80fd5b50610169610717565b6040516101769190610cbc565b60405180910390f35b34801561018a575f80fd5b506101a560048036038101906101a09190610c0a565b61073a565b005b3480156101b2575f80fd5b506101cd60048036038101906101c89190610cd5565b61080a565b005b3480156101da575f80fd5b506101e36109aa565b005b6101ed610219565b005b3480156101fa575f80fd5b50610203610adb565b6040516102109190610cbc565b60405180910390f35b600254341161025d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025490610d7f565b60405180910390fd5b3460035f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546102a99190610dca565b92505081905550565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461033f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033690610e6d565b60405180910390fd5b5f60035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054116103be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b590610efb565b60405180910390fd5b5f8111610400576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f790610f89565b60405180910390fd5b5f8273ffffffffffffffffffffffffffffffffffffffff166108fc8390811502906040515f60405180830381858888f19350505050905080610477576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046e90610ff1565b60405180910390fd5b8160035f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546104c3919061100f565b92505081905550505050565b6003602052805f5260405f205f915090505481565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610571576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056890610e6d565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036105df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d69061108c565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361064d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610644906110f4565b60405180910390fd5b5f8373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83856040518363ffffffff1660e01b8152600401610689929190611112565b6020604051808303815f875af11580156106a5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106c9919061116e565b90508061070b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610702906111e3565b60405180910390fd5b50505050565b60025481565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107be90610e6d565b60405180910390fd5b8060015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610897576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088e90610e6d565b60405180910390fd5b5f60035f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205411610916576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090d90610efb565b60405180910390fd5b5f8111610958576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094f90610f89565b60405180910390fd5b5f60035f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055506109a58282856104e4565b505050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3090611271565b60405180910390fd5b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff165f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505f60015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610b2d82610b04565b9050919050565b610b3d81610b23565b8114610b47575f80fd5b50565b5f81359050610b5881610b34565b92915050565b5f819050919050565b610b7081610b5e565b8114610b7a575f80fd5b50565b5f81359050610b8b81610b67565b92915050565b5f8060408385031215610ba757610ba6610b00565b5b5f610bb485828601610b4a565b9250506020610bc585828601610b7d565b9150509250929050565b5f610bd982610b04565b9050919050565b610be981610bcf565b8114610bf3575f80fd5b50565b5f81359050610c0481610be0565b92915050565b5f60208284031215610c1f57610c1e610b00565b5b5f610c2c84828501610bf6565b91505092915050565b610c3e81610b5e565b82525050565b5f602082019050610c575f830184610c35565b92915050565b5f805f60608486031215610c7457610c73610b00565b5b5f610c8186828701610bf6565b9350506020610c9286828701610b7d565b9250506040610ca386828701610bf6565b9150509250925092565b610cb681610bcf565b82525050565b5f602082019050610ccf5f830184610cad565b92915050565b5f805f60608486031215610cec57610ceb610b00565b5b5f610cf986828701610bf6565b9350506020610d0a86828701610bf6565b9250506040610d1b86828701610b7d565b9150509250925092565b5f82825260208201905092915050565b7f4465706f73697420616d6f756e742069732062656c6f77206d696e696d756d005f82015250565b5f610d69601f83610d25565b9150610d7482610d35565b602082019050919050565b5f6020820190508181035f830152610d9681610d5d565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610dd482610b5e565b9150610ddf83610b5e565b9250828201905080821115610df757610df6610d9d565b5b92915050565b7f4f6e6c7920746865206f776e65722063616e20657865637574652074686973205f8201527f66756e6374696f6e000000000000000000000000000000000000000000000000602082015250565b5f610e57602883610d25565b9150610e6282610dfd565b604082019050919050565b5f6020820190508181035f830152610e8481610e4b565b9050919050565b7f526563697069656e7420686173206e6f2062616c616e636520746f20776974685f8201527f6472617700000000000000000000000000000000000000000000000000000000602082015250565b5f610ee5602483610d25565b9150610ef082610e8b565b604082019050919050565b5f6020820190508181035f830152610f1281610ed9565b9050919050565b7f5769746864726177616c20616d6f756e742073686f756c6420626520677265615f8201527f746572207468616e207a65726f00000000000000000000000000000000000000602082015250565b5f610f73602d83610d25565b9150610f7e82610f19565b604082019050919050565b5f6020820190508181035f830152610fa081610f67565b9050919050565b7f5769746864726177616c206661696c65640000000000000000000000000000005f82015250565b5f610fdb601183610d25565b9150610fe682610fa7565b602082019050919050565b5f6020820190508181035f83015261100881610fcf565b9050919050565b5f61101982610b5e565b915061102483610b5e565b925082820390508181111561103c5761103b610d9d565b5b92915050565b7f496e76616c696420746f6b656e206164647265737300000000000000000000005f82015250565b5f611076601583610d25565b915061108182611042565b602082019050919050565b5f6020820190508181035f8301526110a38161106a565b9050919050565b7f496e76616c696420726563697069656e742061646472657373000000000000005f82015250565b5f6110de601983610d25565b91506110e9826110aa565b602082019050919050565b5f6020820190508181035f83015261110b816110d2565b9050919050565b5f6040820190506111255f830185610cad565b6111326020830184610c35565b9392505050565b5f8115159050919050565b61114d81611139565b8114611157575f80fd5b50565b5f8151905061116881611144565b92915050565b5f6020828403121561118357611182610b00565b5b5f6111908482850161115a565b91505092915050565b7f546f6b656e207472616e73666572206661696c656400000000000000000000005f82015250565b5f6111cd601583610d25565b91506111d882611199565b602082019050919050565b5f6020820190508181035f8301526111fa816111c1565b9050919050565b7f4f6e6c7920746865206e6577206f776e65722063616e20636f6e6669726d206f5f8201527f776e657273686970000000000000000000000000000000000000000000000000602082015250565b5f61125b602883610d25565b915061126682611201565b604082019050919050565b5f6020820190508181035f8301526112888161124f565b905091905056fea26469706673582212200218c28a134e7a4f71f48bb72146afc030d413804926cbca936968314b5a1df064736f6c63430008140033",
                        "name": "unknown",
                        "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe",
                        "value": "0x1"
                    }
                ]
            },
            "filename": "/Users/erikcruz/Documents/thesis_repos/transformative_smart_contract_repair/experiment_results/sbc_no_comment_tools3_patches20_tmp0.7_topp0.95_gpt-3.5-turbo/reentrancy/basic/0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839/candidate_patches/patch_15/patch_15.sol",
            "function": "constructor",
            "line": 49,
            "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110",
            "name": "Exception State (SWC 110)",
            "severity": "Medium"
        }
    ],
    "infos": [],
    "parser": {
        "id": "mythril-0.23.15",
        "mode": "solidity",
        "version": "2023/01/20"
    }
}
