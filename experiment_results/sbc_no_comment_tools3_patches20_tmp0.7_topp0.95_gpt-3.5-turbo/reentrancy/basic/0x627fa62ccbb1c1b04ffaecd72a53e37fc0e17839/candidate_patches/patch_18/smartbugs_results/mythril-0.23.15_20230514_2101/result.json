{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "address": 12,
            "contract": "Ownable",
            "exploit": {
                "initialState": {
                    "accounts": {
                        "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {
                            "balance": "0x2",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        },
                        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {
                            "balance": "0x0",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        }
                    }
                },
                "steps": [
                    {
                        "address": "",
                        "calldata": "",
                        "input": "0x608060405234801561000f575f80fd5b503360015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506105df8061005d5f395ff3fe608060405234801561000f575f80fd5b506004361061004a575f3560e01c80638da5cb5b1461004e578063a6f9dae11461006c578063bd9b6d8614610088578063d4ee1d9014610092575b5f80fd5b6100566100b0565b60405161006391906103a3565b60405180910390f35b610086600480360381019061008191906103ea565b6100d5565b005b610090610214565b005b61009a610341565b6040516100a791906103a3565b60405180910390f35b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610164576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015b90610495565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036101d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101c9906104fd565b60405180910390fd5b805f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102a1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102989061058b565b60405180910390fd5b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505f805f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61038d82610364565b9050919050565b61039d81610383565b82525050565b5f6020820190506103b65f830184610394565b92915050565b5f80fd5b6103c981610383565b81146103d3575f80fd5b50565b5f813590506103e4816103c0565b92915050565b5f602082840312156103ff576103fe6103bc565b5b5f61040c848285016103d6565b91505092915050565b5f82825260208201905092915050565b7f4f6e6c7920746865206f776e65722063616e2063616c6c20746869732066756e5f8201527f6374696f6e000000000000000000000000000000000000000000000000000000602082015250565b5f61047f602583610415565b915061048a82610425565b604082019050919050565b5f6020820190508181035f8301526104ac81610473565b9050919050565b7f496e76616c6964206164647265737300000000000000000000000000000000005f82015250565b5f6104e7600f83610415565b91506104f2826104b3565b602082019050919050565b5f6020820190508181035f830152610514816104db565b9050919050565b7f4f6e6c7920746865206e6577206f776e65722063616e20636f6e6669726d206f5f8201527f776e657273686970000000000000000000000000000000000000000000000000602082015250565b5f610575602883610415565b91506105808261051b565b604082019050919050565b5f6020820190508181035f8301526105a281610569565b905091905056fea2646970667358221220f004d3642677f39010204d3cddfa3e914072b534ed68a7f64a11619de80befd364736f6c63430008140033",
                        "name": "unknown",
                        "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe",
                        "value": "0x1"
                    }
                ]
            },
            "filename": "/Users/erikcruz/Documents/thesis_repos/transformative_smart_contract_repair/experiment_results/sbc_no_comment_tools3_patches20_tmp0.7_topp0.95_gpt-3.5-turbo/reentrancy/basic/0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839/candidate_patches/patch_18/patch_18.sol",
            "function": "constructor",
            "line": 7,
            "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110",
            "name": "Exception State (SWC 110)",
            "severity": "Medium"
        },
        {
            "address": 12,
            "contract": "Token",
            "exploit": {
                "initialState": {
                    "accounts": {
                        "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {
                            "balance": "0x2",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        },
                        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {
                            "balance": "0x0",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        }
                    }
                },
                "steps": [
                    {
                        "address": "",
                        "calldata": "",
                        "input": "0x608060405234801561000f575f80fd5b503360015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506109758061005d5f395ff3fe608060405234801561000f575f80fd5b5060043610610055575f3560e01c80633ccdbb28146100595780638da5cb5b14610075578063a6f9dae114610093578063bd9b6d86146100af578063d4ee1d90146100b9575b5f80fd5b610073600480360381019061006e91906105e8565b6100d7565b005b61007d6102a3565b60405161008a9190610647565b60405180910390f35b6100ad60048036038101906100a89190610660565b6102c8565b005b6100b7610407565b005b6100c1610534565b6040516100ce9190610647565b60405180910390f35b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610166576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015d9061070b565b60405180910390fd5b5f8373ffffffffffffffffffffffffffffffffffffffff168284604051602401610191929190610738565b6040516020818303038152906040527fa9059cbb000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161021b91906107cb565b5f604051808303815f865af19150503d805f8114610254576040519150601f19603f3d011682016040523d82523d5f602084013e610259565b606091505b505090508061029d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102949061082b565b60405180910390fd5b50505050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610357576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034e9061070b565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036103c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103bc90610893565b60405180910390fd5b805f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610494576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048b90610921565b60405180910390fd5b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505f805f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6105848261055b565b9050919050565b6105948161057a565b811461059e575f80fd5b50565b5f813590506105af8161058b565b92915050565b5f819050919050565b6105c7816105b5565b81146105d1575f80fd5b50565b5f813590506105e2816105be565b92915050565b5f805f606084860312156105ff576105fe610557565b5b5f61060c868287016105a1565b935050602061061d868287016105d4565b925050604061062e868287016105a1565b9150509250925092565b6106418161057a565b82525050565b5f60208201905061065a5f830184610638565b92915050565b5f6020828403121561067557610674610557565b5b5f610682848285016105a1565b91505092915050565b5f82825260208201905092915050565b7f4f6e6c7920746865206f776e65722063616e2063616c6c20746869732066756e5f8201527f6374696f6e000000000000000000000000000000000000000000000000000000602082015250565b5f6106f560258361068b565b91506107008261069b565b604082019050919050565b5f6020820190508181035f830152610722816106e9565b9050919050565b610732816105b5565b82525050565b5f60408201905061074b5f830185610638565b6107586020830184610729565b9392505050565b5f81519050919050565b5f81905092915050565b5f5b83811015610790578082015181840152602081019050610775565b5f8484015250505050565b5f6107a58261075f565b6107af8185610769565b93506107bf818560208601610773565b80840191505092915050565b5f6107d6828461079b565b915081905092915050565b7f546f6b656e207472616e73666572206661696c656400000000000000000000005f82015250565b5f61081560158361068b565b9150610820826107e1565b602082019050919050565b5f6020820190508181035f83015261084281610809565b9050919050565b7f496e76616c6964206164647265737300000000000000000000000000000000005f82015250565b5f61087d600f8361068b565b915061088882610849565b602082019050919050565b5f6020820190508181035f8301526108aa81610871565b9050919050565b7f4f6e6c7920746865206e6577206f776e65722063616e20636f6e6669726d206f5f8201527f776e657273686970000000000000000000000000000000000000000000000000602082015250565b5f61090b60288361068b565b9150610916826108b1565b604082019050919050565b5f6020820190508181035f830152610938816108ff565b905091905056fea26469706673582212201386f211ca654d440b045e7d26a7b7bf19c76dffc29494b0324ec32c7648014564736f6c63430008140033",
                        "name": "unknown",
                        "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe",
                        "value": "0x1"
                    }
                ]
            },
            "filename": "/Users/erikcruz/Documents/thesis_repos/transformative_smart_contract_repair/experiment_results/sbc_no_comment_tools3_patches20_tmp0.7_topp0.95_gpt-3.5-turbo/reentrancy/basic/0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839/candidate_patches/patch_18/patch_18.sol",
            "function": "constructor",
            "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.\nClassification: SWC-110",
            "name": "Exception State (SWC 110)",
            "severity": "Low"
        },
        {
            "address": 12,
            "contract": "TokenBank",
            "exploit": {
                "initialState": {
                    "accounts": {
                        "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {
                            "balance": "0x2",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        },
                        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {
                            "balance": "0x0",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        }
                    }
                },
                "steps": [
                    {
                        "address": "",
                        "calldata": "",
                        "input": "0x608060405234801561000f575f80fd5b503360015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503360015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550670de0b6b3a7640000600281905550611248806100ac5f395ff3fe608060405260043610610094575f3560e01c8063a6f9dae111610058578063a6f9dae114610187578063afe751e4146101af578063bd9b6d86146101d7578063d0e30db0146101ed578063d4ee1d90146101f7576100a3565b806310e6378a146100a757806318a5bbdc146100cf5780633ccdbb281461010b57806341b3d185146101335780638da5cb5b1461015d576100a3565b366100a3576100a1610221565b005b5f80fd5b3480156100b2575f80fd5b506100cd60048036038101906100c89190610b5e565b610281565b005b3480156100da575f80fd5b506100f560048036038101906100f09190610b9c565b6104d2565b6040516101029190610bd6565b60405180910390f35b348015610116575f80fd5b50610131600480360381019061012c9190610bef565b6104e7565b005b34801561013e575f80fd5b506101476106b3565b6040516101549190610bd6565b60405180910390f35b348015610168575f80fd5b506101716106b9565b60405161017e9190610c4e565b60405180910390f35b348015610192575f80fd5b506101ad60048036038101906101a89190610b9c565b6106de565b005b3480156101ba575f80fd5b506101d560048036038101906101d09190610c67565b61081d565b005b3480156101e2575f80fd5b506101eb61097d565b005b6101f5610221565b005b348015610202575f80fd5b5061020b610aaa565b6040516102189190610c4e565b60405180910390f35b60025434111561027f573460035f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546102779190610ce4565b925050819055505b565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610310576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030790610d97565b60405180910390fd5b5f60035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20541161038f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038690610e25565b60405180910390fd5b478111156103d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c990610e8d565b60405180910390fd5b8060035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825461041e9190610eab565b925050819055505f8273ffffffffffffffffffffffffffffffffffffffff168260405161044a90610f0b565b5f6040518083038185875af1925050503d805f8114610484576040519150601f19603f3d011682016040523d82523d5f602084013e610489565b606091505b50509050806104cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c490610f69565b60405180910390fd5b505050565b6003602052805f5260405f205f915090505481565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610576576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056d90610d97565b60405180910390fd5b5f8373ffffffffffffffffffffffffffffffffffffffff1682846040516024016105a1929190610f87565b6040516020818303038152906040527fa9059cbb000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161062b9190611010565b5f604051808303815f865af19150503d805f8114610664576040519150601f19603f3d011682016040523d82523d5f602084013e610669565b606091505b50509050806106ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a490611070565b60405180910390fd5b50505050565b60025481565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461076d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076490610d97565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036107db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d2906110d8565b60405180910390fd5b805f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a390610d97565b60405180910390fd5b5f60035f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20541161092b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092290611166565b60405180910390fd5b5f60035f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055506109788282856104e7565b505050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a01906111f4565b60405180910390fd5b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505f805f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610afa82610ad1565b9050919050565b610b0a81610af0565b8114610b14575f80fd5b50565b5f81359050610b2581610b01565b92915050565b5f819050919050565b610b3d81610b2b565b8114610b47575f80fd5b50565b5f81359050610b5881610b34565b92915050565b5f8060408385031215610b7457610b73610acd565b5b5f610b8185828601610b17565b9250506020610b9285828601610b4a565b9150509250929050565b5f60208284031215610bb157610bb0610acd565b5b5f610bbe84828501610b17565b91505092915050565b610bd081610b2b565b82525050565b5f602082019050610be95f830184610bc7565b92915050565b5f805f60608486031215610c0657610c05610acd565b5b5f610c1386828701610b17565b9350506020610c2486828701610b4a565b9250506040610c3586828701610b17565b9150509250925092565b610c4881610af0565b82525050565b5f602082019050610c615f830184610c3f565b92915050565b5f805f60608486031215610c7e57610c7d610acd565b5b5f610c8b86828701610b17565b9350506020610c9c86828701610b17565b9250506040610cad86828701610b4a565b9150509250925092565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610cee82610b2b565b9150610cf983610b2b565b9250828201905080821115610d1157610d10610cb7565b5b92915050565b5f82825260208201905092915050565b7f4f6e6c7920746865206f776e65722063616e2063616c6c20746869732066756e5f8201527f6374696f6e000000000000000000000000000000000000000000000000000000602082015250565b5f610d81602583610d17565b9150610d8c82610d27565b604082019050919050565b5f6020820190508181035f830152610dae81610d75565b9050919050565b7f486f6c64657220646f6573206e6f74206861766520616e7920657468657220745f8201527f6f20776974686472617700000000000000000000000000000000000000000000602082015250565b5f610e0f602a83610d17565b9150610e1a82610db5565b604082019050919050565b5f6020820190508181035f830152610e3c81610e03565b9050919050565b7f4e6f7420656e6f75676820657468657220696e20636f6e7472616374000000005f82015250565b5f610e77601c83610d17565b9150610e8282610e43565b602082019050919050565b5f6020820190508181035f830152610ea481610e6b565b9050919050565b5f610eb582610b2b565b9150610ec083610b2b565b9250828203905081811115610ed857610ed7610cb7565b5b92915050565b5f81905092915050565b50565b5f610ef65f83610ede565b9150610f0182610ee8565b5f82019050919050565b5f610f1582610eeb565b9150819050919050565b7f4574686572207472616e73666572206661696c656400000000000000000000005f82015250565b5f610f53601583610d17565b9150610f5e82610f1f565b602082019050919050565b5f6020820190508181035f830152610f8081610f47565b9050919050565b5f604082019050610f9a5f830185610c3f565b610fa76020830184610bc7565b9392505050565b5f81519050919050565b5f5b83811015610fd5578082015181840152602081019050610fba565b5f8484015250505050565b5f610fea82610fae565b610ff48185610ede565b9350611004818560208601610fb8565b80840191505092915050565b5f61101b8284610fe0565b915081905092915050565b7f546f6b656e207472616e73666572206661696c656400000000000000000000005f82015250565b5f61105a601583610d17565b915061106582611026565b602082019050919050565b5f6020820190508181035f8301526110878161104e565b9050919050565b7f496e76616c6964206164647265737300000000000000000000000000000000005f82015250565b5f6110c2600f83610d17565b91506110cd8261108e565b602082019050919050565b5f6020820190508181035f8301526110ef816110b6565b9050919050565b7f486f6c64657220646f6573206e6f74206861766520616e7920746f6b656e73205f8201527f746f207769746864726177000000000000000000000000000000000000000000602082015250565b5f611150602b83610d17565b915061115b826110f6565b604082019050919050565b5f6020820190508181035f83015261117d81611144565b9050919050565b7f4f6e6c7920746865206e6577206f776e65722063616e20636f6e6669726d206f5f8201527f776e657273686970000000000000000000000000000000000000000000000000602082015250565b5f6111de602883610d17565b91506111e982611184565b604082019050919050565b5f6020820190508181035f83015261120b816111d2565b905091905056fea2646970667358221220dfc2709ef5eee361711d9c2d0aeddc80cbe99d10bd5277d90bcd172d99852f2b64736f6c63430008140033",
                        "name": "unknown",
                        "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe",
                        "value": "0x1"
                    }
                ]
            },
            "filename": "/Users/erikcruz/Documents/thesis_repos/transformative_smart_contract_repair/experiment_results/sbc_no_comment_tools3_patches20_tmp0.7_topp0.95_gpt-3.5-turbo/reentrancy/basic/0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839/candidate_patches/patch_18/patch_18.sol",
            "function": "constructor",
            "line": 43,
            "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110",
            "name": "Exception State (SWC 110)",
            "severity": "Medium"
        }
    ],
    "infos": [],
    "parser": {
        "id": "mythril-0.23.15",
        "mode": "solidity",
        "version": "2023/01/20"
    }
}
