{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "address": 12,
            "contract": "Ownable",
            "exploit": {
                "initialState": {
                    "accounts": {
                        "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {
                            "balance": "0x2",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        },
                        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {
                            "balance": "0x0",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        }
                    }
                },
                "steps": [
                    {
                        "address": "",
                        "calldata": "",
                        "input": "0x608060405234801561000f575f80fd5b503360015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506105098061005d5f395ff3fe608060405234801561000f575f80fd5b506004361061004a575f3560e01c80638da5cb5b1461004e578063a6f9dae11461006c578063bd9b6d8614610088578063d4ee1d9014610092575b5f80fd5b6100566100b0565b6040516100639190610335565b60405180910390f35b6100866004803603810190610081919061037c565b6100d5565b005b6100906101a6565b005b61009a6102d3565b6040516100a79190610335565b60405180910390f35b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610164576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015b90610427565b60405180910390fd5b805f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610233576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022a906104b5565b60405180910390fd5b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505f805f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61031f826102f6565b9050919050565b61032f81610315565b82525050565b5f6020820190506103485f830184610326565b92915050565b5f80fd5b61035b81610315565b8114610365575f80fd5b50565b5f8135905061037681610352565b92915050565b5f602082840312156103915761039061034e565b5b5f61039e84828501610368565b91505092915050565b5f82825260208201905092915050565b7f4f6e6c792074686520636f6e7472616374206f776e65722063616e2063616c6c5f8201527f20746869732066756e6374696f6e2e0000000000000000000000000000000000602082015250565b5f610411602f836103a7565b915061041c826103b7565b604082019050919050565b5f6020820190508181035f83015261043e81610405565b9050919050565b7f4f6e6c7920746865206e6577206f776e65722063616e20636f6e6669726d206f5f8201527f776e6572736869702e0000000000000000000000000000000000000000000000602082015250565b5f61049f6029836103a7565b91506104aa82610445565b604082019050919050565b5f6020820190508181035f8301526104cc81610493565b905091905056fea264697066735822122045fad3eed2f7fa2e2364f2e65b5d97c10946759bfce07f23135f1d6d6c8ded4e64736f6c63430008140033",
                        "name": "unknown",
                        "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe",
                        "value": "0x1"
                    }
                ]
            },
            "filename": "/Users/erikcruz/Documents/thesis_repos/transformative_smart_contract_repair/experiment_results/sbc_no_comment_tools3_patches20_tmp0.7_topp0.95_gpt-3.5-turbo/reentrancy/basic/0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839/candidate_patches/patch_2/patch_2.sol",
            "function": "constructor",
            "line": 7,
            "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110",
            "name": "Exception State (SWC 110)",
            "severity": "Medium"
        },
        {
            "address": 12,
            "contract": "Token",
            "exploit": {
                "initialState": {
                    "accounts": {
                        "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {
                            "balance": "0x2",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        },
                        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {
                            "balance": "0x0",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        }
                    }
                },
                "steps": [
                    {
                        "address": "",
                        "calldata": "",
                        "input": "0x608060405234801561000f575f80fd5b503360015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506109058061005d5f395ff3fe608060405234801561000f575f80fd5b5060043610610055575f3560e01c80633ccdbb28146100595780638da5cb5b14610075578063a6f9dae114610093578063bd9b6d86146100af578063d4ee1d90146100b9575b5f80fd5b610073600480360381019061006e919061059a565b6100d7565b005b61007d6102c3565b60405161008a91906105f9565b60405180910390f35b6100ad60048036038101906100a89190610612565b6102e8565b005b6100b76103b9565b005b6100c16104e6565b6040516100ce91906105f9565b60405180910390f35b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610166576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015d906106bd565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036101d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101cb90610725565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610242576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102399061078d565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb82846040518363ffffffff1660e01b815260040161027d9291906107ba565b6020604051808303815f875af1158015610299573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102bd9190610816565b50505050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610377576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036e906106bd565b60405180910390fd5b805f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610446576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043d906108b1565b60405180910390fd5b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505f805f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6105368261050d565b9050919050565b6105468161052c565b8114610550575f80fd5b50565b5f813590506105618161053d565b92915050565b5f819050919050565b61057981610567565b8114610583575f80fd5b50565b5f8135905061059481610570565b92915050565b5f805f606084860312156105b1576105b0610509565b5b5f6105be86828701610553565b93505060206105cf86828701610586565b92505060406105e086828701610553565b9150509250925092565b6105f38161052c565b82525050565b5f60208201905061060c5f8301846105ea565b92915050565b5f6020828403121561062757610626610509565b5b5f61063484828501610553565b91505092915050565b5f82825260208201905092915050565b7f4f6e6c792074686520636f6e7472616374206f776e65722063616e2063616c6c5f8201527f20746869732066756e6374696f6e2e0000000000000000000000000000000000602082015250565b5f6106a7602f8361063d565b91506106b28261064d565b604082019050919050565b5f6020820190508181035f8301526106d48161069b565b9050919050565b7f496e76616c696420746f6b656e20616464726573732e000000000000000000005f82015250565b5f61070f60168361063d565b915061071a826106db565b602082019050919050565b5f6020820190508181035f83015261073c81610703565b9050919050565b7f496e76616c696420726563697069656e7420616464726573732e0000000000005f82015250565b5f610777601a8361063d565b915061078282610743565b602082019050919050565b5f6020820190508181035f8301526107a48161076b565b9050919050565b6107b481610567565b82525050565b5f6040820190506107cd5f8301856105ea565b6107da60208301846107ab565b9392505050565b5f8115159050919050565b6107f5816107e1565b81146107ff575f80fd5b50565b5f81519050610810816107ec565b92915050565b5f6020828403121561082b5761082a610509565b5b5f61083884828501610802565b91505092915050565b7f4f6e6c7920746865206e6577206f776e65722063616e20636f6e6669726d206f5f8201527f776e6572736869702e0000000000000000000000000000000000000000000000602082015250565b5f61089b60298361063d565b91506108a682610841565b604082019050919050565b5f6020820190508181035f8301526108c88161088f565b905091905056fea26469706673582212206828c77908c240337645403d3d3070719190d3304bc17a27ab724c67b34302ff64736f6c63430008140033",
                        "name": "unknown",
                        "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe",
                        "value": "0x1"
                    }
                ]
            },
            "filename": "/Users/erikcruz/Documents/thesis_repos/transformative_smart_contract_repair/experiment_results/sbc_no_comment_tools3_patches20_tmp0.7_topp0.95_gpt-3.5-turbo/reentrancy/basic/0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839/candidate_patches/patch_2/patch_2.sol",
            "function": "constructor",
            "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.\nClassification: SWC-110",
            "name": "Exception State (SWC 110)",
            "severity": "Low"
        },
        {
            "address": 12,
            "contract": "TokenBank",
            "exploit": {
                "initialState": {
                    "accounts": {
                        "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {
                            "balance": "0x2",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        },
                        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {
                            "balance": "0x0",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        }
                    }
                },
                "steps": [
                    {
                        "address": "",
                        "calldata": "",
                        "input": "0x608060405234801561000f575f80fd5b503360015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550670de0b6b3a76400006002819055506112918061006c5f395ff3fe608060405260043610610090575f3560e01c8063afe751e411610058578063afe751e414610160578063bd9b6d8614610188578063d0e30db01461019e578063d4ee1d90146101a8578063eec0ddd7146101d257610090565b806310e6378a1461009457806311bcd830146100bc5780633ccdbb28146100e65780638da5cb5b1461010e578063a6f9dae114610138575b5f80fd5b34801561009f575f80fd5b506100ba60048036038101906100b59190610b73565b61020e565b005b3480156100c7575f80fd5b506100d061049c565b6040516100dd9190610bc0565b60405180910390f35b3480156100f1575f80fd5b5061010c60048036038101906101079190610bd9565b6104a2565b005b348015610119575f80fd5b5061012261068e565b60405161012f9190610c38565b60405180910390f35b348015610143575f80fd5b5061015e60048036038101906101599190610c51565b6106b3565b005b34801561016b575f80fd5b5061018660048036038101906101819190610c7c565b610784565b005b348015610193575f80fd5b5061019c6108e4565b005b6101a6610a11565b005b3480156101b3575f80fd5b506101bc610aaa565b6040516101c99190610c38565b60405180910390f35b3480156101dd575f80fd5b506101f860048036038101906101f39190610c51565b610acd565b6040516102059190610bc0565b60405180910390f35b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461029d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029490610d4c565b60405180910390fd5b5f60035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20541161031c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031390610dda565b60405180910390fd5b60035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205481111561039c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039390610e8e565b60405180910390fd5b8060035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546103e89190610ed9565b925050819055505f8273ffffffffffffffffffffffffffffffffffffffff168260405161041490610f39565b5f6040518083038185875af1925050503d805f811461044e576040519150601f19603f3d011682016040523d82523d5f602084013e610453565b606091505b5050905080610497576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048e90610f97565b60405180910390fd5b505050565b60025481565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610531576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052890610d4c565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361059f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059690610fff565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361060d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060490611067565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb82846040518363ffffffff1660e01b8152600401610648929190611085565b6020604051808303815f875af1158015610664573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061068891906110e1565b50505050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610742576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073990610d4c565b60405180910390fd5b805f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610813576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080a90610d4c565b60405180910390fd5b5f60035f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205411610892576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088990610dda565b60405180910390fd5b5f60035f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055506108df8282856104a2565b505050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610971576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109689061117c565b60405180910390fd5b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505f805f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6002543411610a55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4c9061120a565b60405180910390fd5b3460035f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254610aa19190611228565b92505081905550565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6003602052805f5260405f205f915090505481565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610b0f82610ae6565b9050919050565b610b1f81610b05565b8114610b29575f80fd5b50565b5f81359050610b3a81610b16565b92915050565b5f819050919050565b610b5281610b40565b8114610b5c575f80fd5b50565b5f81359050610b6d81610b49565b92915050565b5f8060408385031215610b8957610b88610ae2565b5b5f610b9685828601610b2c565b9250506020610ba785828601610b5f565b9150509250929050565b610bba81610b40565b82525050565b5f602082019050610bd35f830184610bb1565b92915050565b5f805f60608486031215610bf057610bef610ae2565b5b5f610bfd86828701610b2c565b9350506020610c0e86828701610b5f565b9250506040610c1f86828701610b2c565b9150509250925092565b610c3281610b05565b82525050565b5f602082019050610c4b5f830184610c29565b92915050565b5f60208284031215610c6657610c65610ae2565b5b5f610c7384828501610b2c565b91505092915050565b5f805f60608486031215610c9357610c92610ae2565b5b5f610ca086828701610b2c565b9350506020610cb186828701610b2c565b9250506040610cc286828701610b5f565b9150509250925092565b5f82825260208201905092915050565b7f4f6e6c792074686520636f6e7472616374206f776e65722063616e2063616c6c5f8201527f20746869732066756e6374696f6e2e0000000000000000000000000000000000602082015250565b5f610d36602f83610ccc565b9150610d4182610cdc565b604082019050919050565b5f6020820190508181035f830152610d6381610d2a565b9050919050565b7f526563697069656e7420686173206e6f20746f6b656e7320746f2077697468645f8201527f7261772e00000000000000000000000000000000000000000000000000000000602082015250565b5f610dc4602483610ccc565b9150610dcf82610d6a565b604082019050919050565b5f6020820190508181035f830152610df181610db8565b9050919050565b7f5769746864726177616c20616d6f756e74206d757374206265206c65737320745f8201527f68616e206f7220657175616c20746f2074686520617661696c61626c6520626160208201527f6c616e63652e0000000000000000000000000000000000000000000000000000604082015250565b5f610e78604683610ccc565b9150610e8382610df8565b606082019050919050565b5f6020820190508181035f830152610ea581610e6c565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610ee382610b40565b9150610eee83610b40565b9250828203905081811115610f0657610f05610eac565b5b92915050565b5f81905092915050565b50565b5f610f245f83610f0c565b9150610f2f82610f16565b5f82019050919050565b5f610f4382610f19565b9150819050919050565b7f5769746864726177616c206661696c65642e00000000000000000000000000005f82015250565b5f610f81601283610ccc565b9150610f8c82610f4d565b602082019050919050565b5f6020820190508181035f830152610fae81610f75565b9050919050565b7f496e76616c696420746f6b656e20616464726573732e000000000000000000005f82015250565b5f610fe9601683610ccc565b9150610ff482610fb5565b602082019050919050565b5f6020820190508181035f83015261101681610fdd565b9050919050565b7f496e76616c696420726563697069656e7420616464726573732e0000000000005f82015250565b5f611051601a83610ccc565b915061105c8261101d565b602082019050919050565b5f6020820190508181035f83015261107e81611045565b9050919050565b5f6040820190506110985f830185610c29565b6110a56020830184610bb1565b9392505050565b5f8115159050919050565b6110c0816110ac565b81146110ca575f80fd5b50565b5f815190506110db816110b7565b92915050565b5f602082840312156110f6576110f5610ae2565b5b5f611103848285016110cd565b91505092915050565b7f4f6e6c7920746865206e6577206f776e65722063616e20636f6e6669726d206f5f8201527f776e6572736869702e0000000000000000000000000000000000000000000000602082015250565b5f611166602983610ccc565b91506111718261110c565b604082019050919050565b5f6020820190508181035f8301526111938161115a565b9050919050565b7f4465706f73697420616d6f756e74206d757374206265206772656174657220745f8201527f68616e20746865206d696e696d756d206465706f7369742e0000000000000000602082015250565b5f6111f4603883610ccc565b91506111ff8261119a565b604082019050919050565b5f6020820190508181035f830152611221816111e8565b9050919050565b5f61123282610b40565b915061123d83610b40565b925082820190508082111561125557611254610eac565b5b9291505056fea264697066735822122094056e972f47b5691aec646ad0a2bbf9d92f24a8e63ac62e25628b564c9b200664736f6c63430008140033",
                        "name": "unknown",
                        "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe",
                        "value": "0x1"
                    }
                ]
            },
            "filename": "/Users/erikcruz/Documents/thesis_repos/transformative_smart_contract_repair/experiment_results/sbc_no_comment_tools3_patches20_tmp0.7_topp0.95_gpt-3.5-turbo/reentrancy/basic/0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839/candidate_patches/patch_2/patch_2.sol",
            "function": "constructor",
            "line": 47,
            "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110",
            "name": "Exception State (SWC 110)",
            "severity": "Medium"
        }
    ],
    "infos": [],
    "parser": {
        "id": "mythril-0.23.15",
        "mode": "solidity",
        "version": "2023/01/20"
    }
}
