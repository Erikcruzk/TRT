{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_5"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 16,
          "vulnerability_code": "    function withdrawAll() public {\n        uint oCredit = credit[msg.sender];\n        if (oCredit > 0) {\n            balance -= oCredit;\n\n            bool callResult = msg.sender.call.value(oCredit)();\n            require(callResult);\n            credit[msg.sender] = 0;\n        }",
          "message": "Reentrancy in ReentrancyDAO.withdrawAll (reentrancy_dao.sol#7-16):\n\tExternal calls:\n\t- callResult = msg.sender.call.value(oCredit)() (reentrancy_dao.sol#12)\n\tState variables written after the call(s):\n\t- credit (reentrancy_dao.sol#14)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 16,
          "vulnerability_code": "    function withdrawAll() public {\n        uint oCredit = credit[msg.sender];\n        if (oCredit > 0) {\n            balance -= oCredit;\n\n            bool callResult = msg.sender.call.value(oCredit)();\n            require(callResult);\n            credit[msg.sender] = 0;\n        }",
          "message": "ReentrancyDAO.withdrawAll (reentrancy_dao.sol#7-16) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": 21,
          "vulnerability_code": "    function deposit() public payable {\n        credit[msg.sender] += msg.value;\n        balance += msg.value;",
          "message": "ReentrancyDAO.deposit (reentrancy_dao.sol#18-21) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in reentrancy_dao.sol:\n\t- pragma solidity^0.4.19 (reentrancy_dao.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 16,
          "vulnerability_code": "    function withdrawAll() public {\n        uint oCredit = credit[msg.sender];\n        if (oCredit > 0) {\n            balance -= oCredit;\n\n            bool callResult = msg.sender.call.value(oCredit)();\n            require(callResult);\n            credit[msg.sender] = 0;\n        }",
          "message": "Low level call in ReentrancyDAO.withdrawAll (reentrancy_dao.sol#7-16):\n\t-callResult = msg.sender.call.value(oCredit)() reentrancy_dao.sol#12\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Callstack Depth Attack Vulnerability",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "            bool callResult = msg.sender.call.value(oCredit)();",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "        credit[msg.sender] += msg.value;",
          "message": null
        },
        {
          "name": "Re-Entrancy Vulnerability",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "            bool callResult = msg.sender.call.value(oCredit)();",
          "message": null
        }
      ]
    },
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    }
  }
}