{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_3"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": 8,
          "vulnerability_code": "    function donate(address to) public payable {\n        credit[to] += msg.value;",
          "message": "SimpleDAO.donate (patch_19.sol#6-8) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": 14,
          "vulnerability_code": "    function withdraw(uint amount) public {\n        require(credit[msg.sender] >= amount); // added require statement to check if the sender has enough credit to withdraw\n        credit[msg.sender] -= amount;\n        bool res = msg.sender.send(amount); // changed call to send to prevent re-entrancy attacks",
          "message": "SimpleDAO.withdraw (patch_19.sol#10-14) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 18,
          "vulnerability_code": "    function queryCredit(address to) public view returns (uint) { // added view keyword to indicate that the function does not modify the state of the contract\n        return credit[to];",
          "message": "SimpleDAO.queryCredit (patch_19.sol#16-18) should be declared external\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Callstack Depth Attack Vulnerability",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool res = msg.sender.send(amount); // changed call to send to prevent re-entrancy attacks",
          "message": null
        }
      ]
    },
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "exception (z3.z3types.Z3Exception: b'Argument #x0000000100000000000000000000000000000000000000000000000000000000 at position 1 has sort (_ BitVec 256) it does does not match declaration (declare-fun bvudiv ((_ BitVec 248) (_ BitVec 248)) (_ BitVec 248))')"
      ],
      "vulnerability_findings": []
    }
  }
}