{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_9"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": 16,
          "vulnerability_code": "    function donate(address _to) public payable {\n        balances[_to] += msg.value;",
          "message": "Reentrance.donate (patch_12.sol#14-16) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": 20,
          "vulnerability_code": "    function balanceOf(address _who) public view returns (uint balance) {\n        return balances[_who];",
          "message": "Reentrance.balanceOf (patch_12.sol#18-20) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": 27,
          "vulnerability_code": "    function withdraw(uint _amount) public noReentrancy {\n        if (balances[msg.sender] >= _amount) {\n            balances[msg.sender] -= _amount;\n            require(msg.sender.call.value(_amount)());\n        }",
          "message": "Reentrance.withdraw (patch_12.sol#22-27) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() public payable {}",
          "message": "Reentrance.fallback (patch_12.sol#29) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;",
          "message": "Detected issues with version pragma in patch_12.sol:\n\t- pragma solidity^0.4.18 (patch_12.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": 27,
          "vulnerability_code": "    function withdraw(uint _amount) public noReentrancy {\n        if (balances[msg.sender] >= _amount) {\n            balances[msg.sender] -= _amount;\n            require(msg.sender.call.value(_amount)());\n        }",
          "message": "Low level call in Reentrance.withdraw (patch_12.sol#22-27):\n\t-require(bool)(msg.sender.call.value(_amount)()) patch_12.sol#25\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function donate(address _to) public payable {",
          "message": "Parameter '_to' of Reentrance.donate (patch_12.sol#14) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _who) public view returns (uint balance) {",
          "message": "Parameter '_who' of Reentrance.balanceOf (patch_12.sol#18) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(uint _amount) public noReentrancy {",
          "message": "Parameter '_amount' of Reentrance.withdraw (patch_12.sol#22) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}