{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_14"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": 30,
          "vulnerability_code": "    function collect(uint _am) public payable {\n        if (acc[msg.sender].balance >= minSum && acc[msg.sender].balance >= _am && now > acc[msg.sender].unlockTime) {\n            if (msg.sender.call.value(_am)()) {\n                acc[msg.sender].balance -= _am;\n                logFile.addMessage(msg.sender, _am, \"Collect\");\n            }\n        }",
          "message": "Reentrancy in MY_BANK.collect (patch_7.sol#23-30):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (patch_7.sol#25-28)\n\tState variables written after the call(s):\n\t- acc (patch_7.sol#26)\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Message memory lastMsg;",
          "message": "lastMsg in Log.addMessage (patch_7.sol#48) is a local variable never initialiazed\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public minSum = 1 ether;",
          "message": "MY_BANK.minSum should be constant (patch_7.sol#10)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": 30,
          "vulnerability_code": "    function collect(uint _am) public payable {\n        if (acc[msg.sender].balance >= minSum && acc[msg.sender].balance >= _am && now > acc[msg.sender].unlockTime) {\n            if (msg.sender.call.value(_am)()) {\n                acc[msg.sender].balance -= _am;\n                logFile.addMessage(msg.sender, _am, \"Collect\");\n            }\n        }",
          "message": "MY_BANK.collect (patch_7.sol#23-30) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": 34,
          "vulnerability_code": "    function() public payable {\n        put(0);",
          "message": "MY_BANK.fallback (patch_7.sol#32-34) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": 54,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {\n        Message memory lastMsg;\n        lastMsg.sender = _adr;\n        lastMsg.time = now;\n        lastMsg.val = _val;\n        lastMsg.data = _data;\n        history.push(lastMsg);",
          "message": "Log.addMessage (patch_7.sol#47-54) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": 30,
          "vulnerability_code": "    function collect(uint _am) public payable {\n        if (acc[msg.sender].balance >= minSum && acc[msg.sender].balance >= _am && now > acc[msg.sender].unlockTime) {\n            if (msg.sender.call.value(_am)()) {\n                acc[msg.sender].balance -= _am;\n                logFile.addMessage(msg.sender, _am, \"Collect\");\n            }\n        }",
          "message": "Low level call in MY_BANK.collect (patch_7.sol#23-30):\n\t-msg.sender.call.value(_am)() patch_7.sol#25-28\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 35,
          "vulnerability_code": "contract MY_BANK {\n    struct Holder {\n        uint unlockTime;\n        uint balance;\n    }\n\n    mapping(address => Holder) public acc;\n    uint public minSum = 1 ether;\n    Log logFile;\n\n    function MY_BANK(address log) public {\n        logFile = Log(log);\n    }\n\n    function put(uint _unlockTime) public payable {\n        acc[msg.sender].balance += msg.value;\n        acc[msg.sender].unlockTime = _unlockTime > now ? _unlockTime : now;\n        logFile.addMessage(msg.sender, msg.value, \"Put\");\n    }\n\n    function collect(uint _am) public payable {\n        if (acc[msg.sender].balance >= minSum && acc[msg.sender].balance >= _am && now > acc[msg.sender].unlockTime) {\n            if (msg.sender.call.value(_am)()) {\n                acc[msg.sender].balance -= _am;\n                logFile.addMessage(msg.sender, _am, \"Collect\");\n            }\n        }\n    }\n\n    function() public payable {\n        put(0);\n    }",
          "message": "Contract 'MY_BANK' (patch_7.sol#3-35) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": 15,
          "vulnerability_code": "    function MY_BANK(address log) public {\n        logFile = Log(log);",
          "message": "Function 'MY_BANK.MY_BANK' (patch_7.sol#13-15) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function put(uint _unlockTime) public payable {",
          "message": "Parameter '_unlockTime' of MY_BANK.put (patch_7.sol#17) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function collect(uint _am) public payable {",
          "message": "Parameter '_am' of MY_BANK.collect (patch_7.sol#23) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of Log.addMessage (patch_7.sol#47) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of Log.addMessage (patch_7.sol#47) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of Log.addMessage (patch_7.sol#47) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}