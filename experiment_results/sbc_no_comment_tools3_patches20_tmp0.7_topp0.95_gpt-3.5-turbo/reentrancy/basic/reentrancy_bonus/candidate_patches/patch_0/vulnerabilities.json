{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_4"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": 21,
          "vulnerability_code": "    function getFirstWithdrawalBonus() public {\n        require(!claimedBonus[msg.sender]);\n\n        rewardsForA[msg.sender] += 100;\n\n        claimedBonus[msg.sender] = true;\n        withdrawReward();",
          "message": "Reentrancy_bonus.getFirstWithdrawalBonus (patch_0.sol#14-21) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": 12,
          "vulnerability_code": "    function withdrawReward() public {\n        uint amountToWithdraw = rewardsForA[msg.sender];\n        rewardsForA[msg.sender] = 0;\n        require(msg.sender.call.value(amountToWithdraw)());",
          "message": "Low level call in Reentrancy_bonus.withdrawReward (patch_0.sol#8-12):\n\t-require(bool)(msg.sender.call.value(amountToWithdraw)()) patch_0.sol#11\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 22,
          "vulnerability_code": "contract Reentrancy_bonus {\n    mapping(address => uint) private userBalances;\n    mapping(address => bool) private claimedBonus;\n    mapping(address => uint) private rewardsForA;\n\n    function withdrawReward() public {\n        uint amountToWithdraw = rewardsForA[msg.sender];\n        rewardsForA[msg.sender] = 0;\n        require(msg.sender.call.value(amountToWithdraw)());\n    }\n\n    function getFirstWithdrawalBonus() public {\n        require(!claimedBonus[msg.sender]);\n\n        rewardsForA[msg.sender] += 100;\n\n        claimedBonus[msg.sender] = true;\n        withdrawReward();\n    }",
          "message": "Contract 'Reentrancy_bonus' (patch_0.sol#3-22) is not in CapWords\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint) private userBalances;",
          "message": "Reentrancy_bonus.userBalances (patch_0.sol#4) is never used in Reentrancy_bonus\n"
        }
      ]
    }
  }
}