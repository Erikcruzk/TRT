{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_23"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 19,
          "vulnerability_code": "    function SetMinSum(uint _val) public onlyUninitialized {\n        MinSum = _val;",
          "message": "DEP_BANK.SetMinSum (patch_3.sol#17-19) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 23,
          "vulnerability_code": "    function SetLogFile(address _log) public onlyUninitialized {\n        Log = LogFile(_log);",
          "message": "DEP_BANK.SetLogFile (patch_3.sol#21-23) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": 27,
          "vulnerability_code": "    function Initialized() public {\n        initialized = true;",
          "message": "DEP_BANK.Initialized (patch_3.sol#25-27) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": 42,
          "vulnerability_code": "    function Collect(uint _am) public {\n        require(initialized);\n        require(balances[msg.sender] >= MinSum);\n        require(balances[msg.sender] >= _am);\n        \n        balances[msg.sender] -= _am;\n        Log.AddMessage(msg.sender, _am, \"Collect\");\n        msg.sender.transfer(_am);",
          "message": "DEP_BANK.Collect (patch_3.sol#34-42) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": 46,
          "vulnerability_code": "    function() public payable {\n        Deposit();",
          "message": "DEP_BANK.fallback (patch_3.sol#44-46) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": 67,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        Message memory LastMsg = Message({\n            Sender: _adr,\n            Time: now,\n            Val: _val,\n            Data: _data\n        });\n        History.push(LastMsg);",
          "message": "LogFile.AddMessage (patch_3.sol#59-67) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_3.sol:\n\t- pragma solidity^0.4.19 (patch_3.sol#1): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 47,
          "vulnerability_code": "contract DEP_BANK {\n    mapping(address => uint256) public balances;\n\n    uint public MinSum;\n\n    LogFile Log;\n\n    bool initialized;\n\n    modifier onlyUninitialized() {\n        require(!initialized);\n        _;\n    }\n\n    function SetMinSum(uint _val) public onlyUninitialized {\n        MinSum = _val;\n    }\n\n    function SetLogFile(address _log) public onlyUninitialized {\n        Log = LogFile(_log);\n    }\n\n    function Initialized() public {\n        initialized = true;\n    }\n\n    function Deposit() public payable {\n        balances[msg.sender] += msg.value;\n        Log.AddMessage(msg.sender, msg.value, \"Put\");\n    }\n\n    function Collect(uint _am) public {\n        require(initialized);\n        require(balances[msg.sender] >= MinSum);\n        require(balances[msg.sender] >= _am);\n        \n        balances[msg.sender] -= _am;\n        Log.AddMessage(msg.sender, _am, \"Collect\");\n        msg.sender.transfer(_am);\n    }\n\n    function() public payable {\n        Deposit();\n    }",
          "message": "Contract 'DEP_BANK' (patch_3.sol#3-47) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 19,
          "vulnerability_code": "    function SetMinSum(uint _val) public onlyUninitialized {\n        MinSum = _val;",
          "message": "Function 'DEP_BANK.SetMinSum' (patch_3.sol#17-19) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function SetMinSum(uint _val) public onlyUninitialized {",
          "message": "Parameter '_val' of DEP_BANK.SetMinSum (patch_3.sol#17) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 23,
          "vulnerability_code": "    function SetLogFile(address _log) public onlyUninitialized {\n        Log = LogFile(_log);",
          "message": "Function 'DEP_BANK.SetLogFile' (patch_3.sol#21-23) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function SetLogFile(address _log) public onlyUninitialized {",
          "message": "Parameter '_log' of DEP_BANK.SetLogFile (patch_3.sol#21) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": 27,
          "vulnerability_code": "    function Initialized() public {\n        initialized = true;",
          "message": "Function 'DEP_BANK.Initialized' (patch_3.sol#25-27) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": 32,
          "vulnerability_code": "    function Deposit() public payable {\n        balances[msg.sender] += msg.value;\n        Log.AddMessage(msg.sender, msg.value, \"Put\");",
          "message": "Function 'DEP_BANK.Deposit' (patch_3.sol#29-32) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": 42,
          "vulnerability_code": "    function Collect(uint _am) public {\n        require(initialized);\n        require(balances[msg.sender] >= MinSum);\n        require(balances[msg.sender] >= _am);\n        \n        balances[msg.sender] -= _am;\n        Log.AddMessage(msg.sender, _am, \"Collect\");\n        msg.sender.transfer(_am);",
          "message": "Function 'DEP_BANK.Collect' (patch_3.sol#34-42) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Collect(uint _am) public {",
          "message": "Parameter '_am' of DEP_BANK.Collect (patch_3.sol#34) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum;",
          "message": "Variable 'DEP_BANK.MinSum' (patch_3.sol#6) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    LogFile Log;",
          "message": "Variable 'DEP_BANK.Log' (patch_3.sol#8) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": 67,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        Message memory LastMsg = Message({\n            Sender: _adr,\n            Time: now,\n            Val: _val,\n            Data: _data\n        });\n        History.push(LastMsg);",
          "message": "Function 'LogFile.AddMessage' (patch_3.sol#59-67) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of LogFile.AddMessage (patch_3.sol#59) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of LogFile.AddMessage (patch_3.sol#59) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of LogFile.AddMessage (patch_3.sol#59) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": "Variable 'LogFile.History' (patch_3.sol#57) is not in mixedCase\n"
        }
      ]
    },
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    }
  }
}