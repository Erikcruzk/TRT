/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.19;

contract BANK_SAFE {
    mapping(address => uint256) public balances;

    uint public MinSum;

    LogFile Log;

    bool intitalized;

    function SetMinSum(uint _val) public {
        if (intitalized) throw;
        MinSum = _val;
    }

    function SetLogFile(address _log) public {
        if (intitalized) throw;
        Log = LogFile(_log);
    }

    function Initialized() public {
        intitalized = true;
    }

    function Deposit() public payable {
        balances[msg.sender] += msg.value;
        Log.AddMessage(msg.sender, msg.value, "Put");
    }

    function Collect(uint _am) public payable {
        if (balances[msg.sender] >= MinSum && balances[msg.sender] >= _am) {
            if (msg.sender.call.value(_am)()) {
                balances[msg.sender] -= _am;
                Log.AddMessage(msg.sender, _am, "Collect");
            }
        }
    }

    function() public payable {
        Deposit();
    }
}

contract LogFile {
    struct Message {
        address Sender;
        string Data;
        uint Val;
        uint Time;
    }

    Message[] public History;

    Message LastMsg;

    function AddMessage(address _adr, uint _val, string _data) public {
        LastMsg.Sender = _adr;
        LastMsg.Time = now;
        LastMsg.Val = _val;
        LastMsg.Data = _data;
        History.push(LastMsg);
    }
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.

/// 1. Slither Analysis Results
/// 1.1. Vulnerability: reentrancy at Line 31-38:
    function Collect(uint _am) public payable {
        if (balances[msg.sender] >= MinSum && balances[msg.sender] >= _am) {
            if (msg.sender.call.value(_am)()) {
                balances[msg.sender] -= _am;
                Log.AddMessage(msg.sender, _am, "Collect");
            }
        }
///  Message:Reentrancy in BANK_SAFE.Collect (0x561eac93c92360949ab1f1403323e6db345cbf31.sol#31-38):
///   	External calls:
///   	- msg.sender.call.value(_am)() (0x561eac93c92360949ab1f1403323e6db345cbf31.sol#33-36)
///   	State variables written after the call(s):
///   	- balances (0x561eac93c92360949ab1f1403323e6db345cbf31.sol#34)


/// 2. Oyente Analysis Results
/// 2.1. Vulnerability: reentrancy at Line 33:
            if (msg.sender.call.value(_am)()) {



/// Repaired Solidity Smart Contract