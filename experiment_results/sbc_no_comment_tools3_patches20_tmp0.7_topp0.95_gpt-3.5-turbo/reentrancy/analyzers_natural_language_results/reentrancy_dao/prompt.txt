/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.19;

contract ReentrancyDAO {
    mapping(address => uint) credit;
    uint balance;

    function withdrawAll() public {
        uint oCredit = credit[msg.sender];
        if (oCredit > 0) {
            balance -= oCredit;

            bool callResult = msg.sender.call.value(oCredit)();
            require(callResult);
            credit[msg.sender] = 0;
        }
    }

    function deposit() public payable {
        credit[msg.sender] += msg.value;
        balance += msg.value;
    }
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.

/// 1. Slither Analysis Results
/// 1.1. Vulnerability: reentrancy at Line 7-16:
    function withdrawAll() public {
        uint oCredit = credit[msg.sender];
        if (oCredit > 0) {
            balance -= oCredit;

            bool callResult = msg.sender.call.value(oCredit)();
            require(callResult);
            credit[msg.sender] = 0;
        }
///  Message:Reentrancy in ReentrancyDAO.withdrawAll (reentrancy_dao.sol#7-16):
///   	External calls:
///   	- callResult = msg.sender.call.value(oCredit)() (reentrancy_dao.sol#12)
///   	State variables written after the call(s):
///   	- credit (reentrancy_dao.sol#14)



/// Repaired Solidity Smart Contract