{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_4"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 15,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!locked[msg.sender], \"Withdrawal already in progress\");\n        locked[msg.sender] = true;\n        uint amountToWithdraw = userBalances[msg.sender];\n        userBalances[msg.sender] = 0;\n        locked[msg.sender] = false;\n        (bool success, ) = msg.sender.call.value(amountToWithdraw)(\"\");\n        require(success, \"Transfer failed\");",
          "message": "Reentrancy_secure.withdrawBalance (patch_17.sol#7-15) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.0;",
          "message": "Detected issues with version pragma in patch_17.sol:\n\t- pragma solidity^0.6.0 (patch_17.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 15,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!locked[msg.sender], \"Withdrawal already in progress\");\n        locked[msg.sender] = true;\n        uint amountToWithdraw = userBalances[msg.sender];\n        userBalances[msg.sender] = 0;\n        locked[msg.sender] = false;\n        (bool success, ) = msg.sender.call.value(amountToWithdraw)(\"\");\n        require(success, \"Transfer failed\");",
          "message": "Low level call in Reentrancy_secure.withdrawBalance (patch_17.sol#7-15):\n\t-(success) = msg.sender.call.value(amountToWithdraw)() patch_17.sol#13\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 16,
          "vulnerability_code": "contract Reentrancy_secure {\n    mapping(address => uint) private userBalances;\n    mapping(address => bool) private locked;\n\n    function withdrawBalance() public {\n        require(!locked[msg.sender], \"Withdrawal already in progress\");\n        locked[msg.sender] = true;\n        uint amountToWithdraw = userBalances[msg.sender];\n        userBalances[msg.sender] = 0;\n        locked[msg.sender] = false;\n        (bool success, ) = msg.sender.call.value(amountToWithdraw)(\"\");\n        require(success, \"Transfer failed\");\n    }",
          "message": "Contract 'Reentrancy_secure' (patch_17.sol#3-16) is not in CapWords\n"
        }
      ]
    },
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    }
  }
}