{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_5"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 9,
          "vulnerability_code": "    function getBalance(address u) public constant returns (uint) {\n        return userBalance[u];",
          "message": "Reentrance.getBalance (patch_19.sol#7-9) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 13,
          "vulnerability_code": "    function addToBalance() public payable {\n        userBalance[msg.sender] += msg.value;",
          "message": "Reentrance.addToBalance (patch_19.sol#11-13) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 24,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!locked[msg.sender]); // check if the user is already withdrawing funds\n        locked[msg.sender] = true; // lock the user from calling this function again until the first call is complete\n        uint balanceToWithdraw = userBalance[msg.sender]; // save the balance to withdraw before resetting it to prevent reentrancy\n        userBalance[msg.sender] = 0;\n        locked[msg.sender] = false; // unlock the user to allow future withdrawals\n        if (!msg.sender.call.value(balanceToWithdraw)()) { // transfer the balance to the user\n            revert(); // revert the transaction if the transfer fails\n        }",
          "message": "Reentrance.withdrawBalance (patch_19.sol#15-24) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.15;",
          "message": "Detected issues with version pragma in patch_19.sol:\n\t- pragma solidity^0.4.15 (patch_19.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 24,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!locked[msg.sender]); // check if the user is already withdrawing funds\n        locked[msg.sender] = true; // lock the user from calling this function again until the first call is complete\n        uint balanceToWithdraw = userBalance[msg.sender]; // save the balance to withdraw before resetting it to prevent reentrancy\n        userBalance[msg.sender] = 0;\n        locked[msg.sender] = false; // unlock the user to allow future withdrawals\n        if (!msg.sender.call.value(balanceToWithdraw)()) { // transfer the balance to the user\n            revert(); // revert the transaction if the transfer fails\n        }",
          "message": "Low level call in Reentrance.withdrawBalance (patch_19.sol#15-24):\n\t-! msg.sender.call.value(balanceToWithdraw)() patch_19.sol#21-23\n"
        }
      ]
    }
  }
}