{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_21"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": 24,
          "vulnerability_code": "    function SetMinSum(uint _val) public onlyInitialized {\n        MinSum = _val;",
          "message": "MONEY_BOX.SetMinSum (patch_5.sol#22-24) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": 28,
          "vulnerability_code": "    function SetLogFile(address _log) public onlyInitialized {\n        LogFile = Log(_log);",
          "message": "MONEY_BOX.SetLogFile (patch_5.sol#26-28) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": 32,
          "vulnerability_code": "    function initialize() public {\n        initialized = true;",
          "message": "MONEY_BOX.initialize (patch_5.sol#30-32) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": 47,
          "vulnerability_code": "    function collect(uint _am) public onlyInitialized {\n        var acc = Acc[msg.sender];\n        require(acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime);\n        acc.balance -= _am;\n        require(msg.sender.call.value(_am)());\n        LogFile.addMessage(msg.sender, _am, \"Collect\");",
          "message": "MONEY_BOX.collect (patch_5.sol#41-47) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": 51,
          "vulnerability_code": "    function() public payable {\n        put(0);",
          "message": "MONEY_BOX.fallback (patch_5.sol#49-51) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": 72,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {\n        Message memory lastMsg = Message({\n            sender: _adr,\n            time: now,\n            val: _val,\n            data: _data\n        });\n        history.push(lastMsg);",
          "message": "Log.addMessage (patch_5.sol#64-72) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_5.sol:\n\t- pragma solidity^0.4.19 (patch_5.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": 47,
          "vulnerability_code": "    function collect(uint _am) public onlyInitialized {\n        var acc = Acc[msg.sender];\n        require(acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime);\n        acc.balance -= _am;\n        require(msg.sender.call.value(_am)());\n        LogFile.addMessage(msg.sender, _am, \"Collect\");",
          "message": "Low level call in MONEY_BOX.collect (patch_5.sol#41-47):\n\t-require(bool)(msg.sender.call.value(_am)()) patch_5.sol#45\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 52,
          "vulnerability_code": "contract MONEY_BOX {\n    struct Holder {\n        uint unlockTime;\n        uint balance;\n    }\n\n    mapping(address => Holder) public Acc;\n\n    uint public MinSum;\n\n    Log LogFile;\n\n    bool initialized;\n\n    modifier onlyInitialized() {\n        require(initialized);\n        _;\n    }\n\n    function SetMinSum(uint _val) public onlyInitialized {\n        MinSum = _val;\n    }\n\n    function SetLogFile(address _log) public onlyInitialized {\n        LogFile = Log(_log);\n    }\n\n    function initialize() public {\n        initialized = true;\n    }\n\n    function put(uint _lockTime) public payable {\n        var acc = Acc[msg.sender];\n        acc.balance += msg.value;\n        if (now + _lockTime > acc.unlockTime) acc.unlockTime = now + _lockTime;\n        LogFile.addMessage(msg.sender, msg.value, \"Put\");\n    }\n\n    function collect(uint _am) public onlyInitialized {\n        var acc = Acc[msg.sender];\n        require(acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime);\n        acc.balance -= _am;\n        require(msg.sender.call.value(_am)());\n        LogFile.addMessage(msg.sender, _am, \"Collect\");\n    }\n\n    function() public payable {\n        put(0);\n    }",
          "message": "Contract 'MONEY_BOX' (patch_5.sol#3-52) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": 24,
          "vulnerability_code": "    function SetMinSum(uint _val) public onlyInitialized {\n        MinSum = _val;",
          "message": "Function 'MONEY_BOX.SetMinSum' (patch_5.sol#22-24) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function SetMinSum(uint _val) public onlyInitialized {",
          "message": "Parameter '_val' of MONEY_BOX.SetMinSum (patch_5.sol#22) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": 28,
          "vulnerability_code": "    function SetLogFile(address _log) public onlyInitialized {\n        LogFile = Log(_log);",
          "message": "Function 'MONEY_BOX.SetLogFile' (patch_5.sol#26-28) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function SetLogFile(address _log) public onlyInitialized {",
          "message": "Parameter '_log' of MONEY_BOX.SetLogFile (patch_5.sol#26) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function put(uint _lockTime) public payable {",
          "message": "Parameter '_lockTime' of MONEY_BOX.put (patch_5.sol#34) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function collect(uint _am) public onlyInitialized {",
          "message": "Parameter '_am' of MONEY_BOX.collect (patch_5.sol#41) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => Holder) public Acc;",
          "message": "Variable 'MONEY_BOX.Acc' (patch_5.sol#9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum;",
          "message": "Variable 'MONEY_BOX.MinSum' (patch_5.sol#11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Log LogFile;",
          "message": "Variable 'MONEY_BOX.LogFile' (patch_5.sol#13) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of Log.addMessage (patch_5.sol#64) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of Log.addMessage (patch_5.sol#64) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of Log.addMessage (patch_5.sol#64) is not in mixedCase\n"
        }
      ]
    },
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    }
  }
}