{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_23"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 33,
          "vulnerability_code": "    function CashOut(uint _am) public payable {\n        require(!locked);\n        require(_am <= balances[msg.sender]);\n        balances[msg.sender] -= _am;\n        locked = true;\n        if (msg.sender.call.value(_am)()) {\n            TransferLog.AddMessage(msg.sender, _am, \"CashOut\");\n        }\n        locked = false;",
          "message": "Reentrancy in ETH_VAULT.CashOut (patch_7.sol#24-33):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (patch_7.sol#29-31)\n\t- TransferLog.AddMessage(msg.sender,_am,CashOut) (patch_7.sol#30)\n\tExternal calls sending eth:\n\t- msg.sender.call.value(_am)() (patch_7.sol#29-31)\n\tState variables written after the call(s):\n\t- locked (patch_7.sol#32)\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Message memory msg;",
          "message": "msg in Log.AddMessage (patch_7.sol#50) is a local variable never initialiazed\n"
        },
        {
          "name": "shadowing-builtin",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Message memory msg;",
          "message": "Log.AddMessage.msg (local variable @ patch_7.sol#50) shadows built-in symbol \"msg\"\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinDeposit = 1 ether;",
          "message": "ETH_VAULT.MinDeposit should be constant (patch_7.sol#8)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 22,
          "vulnerability_code": "    function Deposit() public payable {\n        require(!locked);\n        if (msg.value >= MinDeposit) {\n            balances[msg.sender] += msg.value;\n            TransferLog.AddMessage(msg.sender, msg.value, \"Deposit\");\n        }",
          "message": "ETH_VAULT.Deposit (patch_7.sol#16-22) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 33,
          "vulnerability_code": "    function CashOut(uint _am) public payable {\n        require(!locked);\n        require(_am <= balances[msg.sender]);\n        balances[msg.sender] -= _am;\n        locked = true;\n        if (msg.sender.call.value(_am)()) {\n            TransferLog.AddMessage(msg.sender, _am, \"CashOut\");\n        }\n        locked = false;",
          "message": "ETH_VAULT.CashOut (patch_7.sol#24-33) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() public payable {}",
          "message": "ETH_VAULT.fallback (patch_7.sol#35) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": 56,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        Message memory msg;\n        msg.Sender = _adr;\n        msg.Time = now;\n        msg.Val = _val;\n        msg.Data = _data;\n        History.push(msg);",
          "message": "Log.AddMessage (patch_7.sol#49-56) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_7.sol:\n\t- pragma solidity^0.4.19 (patch_7.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 33,
          "vulnerability_code": "    function CashOut(uint _am) public payable {\n        require(!locked);\n        require(_am <= balances[msg.sender]);\n        balances[msg.sender] -= _am;\n        locked = true;\n        if (msg.sender.call.value(_am)()) {\n            TransferLog.AddMessage(msg.sender, _am, \"CashOut\");\n        }\n        locked = false;",
          "message": "Low level call in ETH_VAULT.CashOut (patch_7.sol#24-33):\n\t-msg.sender.call.value(_am)() patch_7.sol#29-31\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 37,
          "vulnerability_code": "contract ETH_VAULT {\n    mapping(address => uint) public balances;\n\n    Log TransferLog;\n\n    uint public MinDeposit = 1 ether;\n    bool private locked;\n\n    function ETH_VAULT(address _log) public {\n        TransferLog = Log(_log);\n        locked = false;\n    }\n\n    function Deposit() public payable {\n        require(!locked);\n        if (msg.value >= MinDeposit) {\n            balances[msg.sender] += msg.value;\n            TransferLog.AddMessage(msg.sender, msg.value, \"Deposit\");\n        }\n    }\n\n    function CashOut(uint _am) public payable {\n        require(!locked);\n        require(_am <= balances[msg.sender]);\n        balances[msg.sender] -= _am;\n        locked = true;\n        if (msg.sender.call.value(_am)()) {\n            TransferLog.AddMessage(msg.sender, _am, \"CashOut\");\n        }\n        locked = false;\n    }\n\n    function() public payable {}\n",
          "message": "Contract 'ETH_VAULT' (patch_7.sol#3-37) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 14,
          "vulnerability_code": "    function ETH_VAULT(address _log) public {\n        TransferLog = Log(_log);\n        locked = false;",
          "message": "Function 'ETH_VAULT.ETH_VAULT' (patch_7.sol#11-14) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ETH_VAULT(address _log) public {",
          "message": "Parameter '_log' of ETH_VAULT.ETH_VAULT (patch_7.sol#11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 22,
          "vulnerability_code": "    function Deposit() public payable {\n        require(!locked);\n        if (msg.value >= MinDeposit) {\n            balances[msg.sender] += msg.value;\n            TransferLog.AddMessage(msg.sender, msg.value, \"Deposit\");\n        }",
          "message": "Function 'ETH_VAULT.Deposit' (patch_7.sol#16-22) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 33,
          "vulnerability_code": "    function CashOut(uint _am) public payable {\n        require(!locked);\n        require(_am <= balances[msg.sender]);\n        balances[msg.sender] -= _am;\n        locked = true;\n        if (msg.sender.call.value(_am)()) {\n            TransferLog.AddMessage(msg.sender, _am, \"CashOut\");\n        }\n        locked = false;",
          "message": "Function 'ETH_VAULT.CashOut' (patch_7.sol#24-33) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function CashOut(uint _am) public payable {",
          "message": "Parameter '_am' of ETH_VAULT.CashOut (patch_7.sol#24) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Log TransferLog;",
          "message": "Variable 'ETH_VAULT.TransferLog' (patch_7.sol#6) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinDeposit = 1 ether;",
          "message": "Variable 'ETH_VAULT.MinDeposit' (patch_7.sol#8) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": 56,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        Message memory msg;\n        msg.Sender = _adr;\n        msg.Time = now;\n        msg.Val = _val;\n        msg.Data = _data;\n        History.push(msg);",
          "message": "Function 'Log.AddMessage' (patch_7.sol#49-56) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of Log.AddMessage (patch_7.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of Log.AddMessage (patch_7.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of Log.AddMessage (patch_7.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": "Variable 'Log.History' (patch_7.sol#47) is not in mixedCase\n"
        }
      ]
    }
  }
}