  pragma solidity ^0.4.19;
  
  contract PENNY_BY_PENNY {
      struct Holder {
          uint unlockTime;
          uint balance;
      }
  
      mapping(address => Holder) public Acc;
  
      uint public MinSum;
  
      LogFile Log;
  
-     bool intitalized;
?              -
+     bool initialized;
?            +
  
-     function SetMinSum(uint _val) public {
?              ^
+     function setMinSum(uint _val) public {
?              ^
-         if (intitalized) throw;
+         require(!initialized);
          MinSum = _val;
      }
  
-     function SetLogFile(address _log) public {
?              ^
+     function setLogFile(address _log) public {
?              ^
-         if (intitalized) throw;
+         require(!initialized);
          Log = LogFile(_log);
      }
  
-     function Initialized() public {
?              ^         -
+     function initialize() public {
?              ^
-         intitalized = true;
?             -
+         initialized = true;
?           +
      }
  
-     function Put(uint _lockTime) public payable {
?              ^
+     function put(uint _lockTime) public payable {
?              ^
-         var acc = Acc[msg.sender];
?         ^ ^
+         Holder storage acc = Acc[msg.sender];
?         ^^^^^^^^^^^ ^^
          acc.balance += msg.value;
          if (now + _lockTime > acc.unlockTime) acc.unlockTime = now + _lockTime;
-         Log.AddMessage(msg.sender, msg.value, "Put");
?             ^
+         Log.addMessage(msg.sender, msg.value, "Put");
?             ^
      }
  
-     function Collect(uint _am) public payable {
?              ^                        --------
+     function collect(uint _am) public {
?              ^
-         var acc = Acc[msg.sender];
?         ^ ^
+         Holder storage acc = Acc[msg.sender];
?         ^^^^^^^^^^^ ^^
-         if (
-             acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime
?         ^^^^
+         require(acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime);
?         ^^^^^^^^                                                                   ++
-         ) {
-             if (msg.sender.call.value(_am)()) {
-                 acc.balance -= _am;
? --------
+         acc.balance -= _am;
+         require(msg.sender.send(_am));
-                 Log.AddMessage(msg.sender, _am, "Collect");
? --------            ^
+         Log.addMessage(msg.sender, _am, "Collect");
?             ^
-             }
-         }
      }
  
      function() public payable {
-         Put(0);
?         ^
+         put(0);
?         ^
      }
  }
  
  contract LogFile {
      struct Message {
-         address Sender;
?                 ^
+         address sender;
?                 ^
-         string Data;
?                ^
+         string data;
?                ^
-         uint Val;
?              ^
+         uint val;
?              ^
-         uint Time;
?              ^
+         uint time;
?              ^
      }
  
-     Message[] public History;
?                      ^
+     Message[] public history;
?                      ^
  
-     Message LastMsg;
- 
-     function AddMessage(address _adr, uint _val, string _data) public {
?              ^
+     function addMessage(address _adr, uint _val, string _data) public {
?              ^
+         Message memory lastMsg;
-         LastMsg.Sender = _adr;
?         ^       ^
+         lastMsg.sender = _adr;
?         ^       ^
-         LastMsg.Time = now;
?         ^       ^
+         lastMsg.time = now;
?         ^       ^
-         LastMsg.Val = _val;
?         ^       ^
+         lastMsg.val = _val;
?         ^       ^
-         LastMsg.Data = _data;
?         ^       ^
+         lastMsg.data = _data;
?         ^       ^
-         History.push(LastMsg);
?         ^            ^
+         history.push(lastMsg);
?         ^            ^
      }
- }
+ }