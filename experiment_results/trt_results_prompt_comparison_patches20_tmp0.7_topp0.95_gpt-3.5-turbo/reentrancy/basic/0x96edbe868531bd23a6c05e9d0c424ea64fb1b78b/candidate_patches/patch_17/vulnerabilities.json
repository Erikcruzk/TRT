{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_23"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": 46,
          "vulnerability_code": "    function collect(uint _am) public {\n        require(Acc[msg.sender].balance >= MinSum && Acc[msg.sender].balance >= _am && now > Acc[msg.sender].unlockTime);\n        if (msg.sender.call.value(_am)()) {\n            Acc[msg.sender].balance -= _am;\n            Log.addMessage(msg.sender, _am, \"Collect\");\n        }",
          "message": "Reentrancy in PENNY_BY_PENNY.collect (patch_17.sol#40-46):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (patch_17.sol#42-45)\n\tState variables written after the call(s):\n\t- Acc (patch_17.sol#43)\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Message memory newMsg;",
          "message": "newMsg in LogFile.addMessage (patch_17.sol#64) is a local variable never initialiazed\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 20,
          "vulnerability_code": "    function SetMinSum(uint _val) public {\n        require(!initialized);\n        MinSum = _val;",
          "message": "PENNY_BY_PENNY.SetMinSum (patch_17.sol#17-20) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": 25,
          "vulnerability_code": "    function SetLogFile(address _log) public {\n        require(!initialized);\n        Log = LogFile(_log);",
          "message": "PENNY_BY_PENNY.SetLogFile (patch_17.sol#22-25) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": 30,
          "vulnerability_code": "    function initialize() public {\n        require(!initialized);\n        initialized = true;",
          "message": "PENNY_BY_PENNY.initialize (patch_17.sol#27-30) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": 46,
          "vulnerability_code": "    function collect(uint _am) public {\n        require(Acc[msg.sender].balance >= MinSum && Acc[msg.sender].balance >= _am && now > Acc[msg.sender].unlockTime);\n        if (msg.sender.call.value(_am)()) {\n            Acc[msg.sender].balance -= _am;\n            Log.addMessage(msg.sender, _am, \"Collect\");\n        }",
          "message": "PENNY_BY_PENNY.collect (patch_17.sol#40-46) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": 50,
          "vulnerability_code": "    function() public payable {\n        put(0);",
          "message": "PENNY_BY_PENNY.fallback (patch_17.sol#48-50) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": 70,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {\n        Message memory newMsg;\n        newMsg.sender = _adr;\n        newMsg.time = now;\n        newMsg.val = _val;\n        newMsg.data = _data;\n        history.push(newMsg);",
          "message": "LogFile.addMessage (patch_17.sol#63-70) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_17.sol:\n\t- pragma solidity^0.4.19 (patch_17.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": 46,
          "vulnerability_code": "    function collect(uint _am) public {\n        require(Acc[msg.sender].balance >= MinSum && Acc[msg.sender].balance >= _am && now > Acc[msg.sender].unlockTime);\n        if (msg.sender.call.value(_am)()) {\n            Acc[msg.sender].balance -= _am;\n            Log.addMessage(msg.sender, _am, \"Collect\");\n        }",
          "message": "Low level call in PENNY_BY_PENNY.collect (patch_17.sol#40-46):\n\t-msg.sender.call.value(_am)() patch_17.sol#42-45\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 51,
          "vulnerability_code": "contract PENNY_BY_PENNY {\n    struct Holder {\n        uint unlockTime;\n        uint balance;\n    }\n\n    mapping(address => Holder) public Acc;\n\n    uint public MinSum;\n\n    LogFile Log;\n\n    bool initialized;\n\n    function SetMinSum(uint _val) public {\n        require(!initialized);\n        MinSum = _val;\n    }\n\n    function SetLogFile(address _log) public {\n        require(!initialized);\n        Log = LogFile(_log);\n    }\n\n    function initialize() public {\n        require(!initialized);\n        initialized = true;\n    }\n\n    function put(uint _lockTime) public payable {\n        Acc[msg.sender].balance += msg.value;\n        if (now + _lockTime > Acc[msg.sender].unlockTime) {\n            Acc[msg.sender].unlockTime = now + _lockTime;\n        }\n        Log.addMessage(msg.sender, msg.value, \"Put\");\n    }\n\n    function collect(uint _am) public {\n        require(Acc[msg.sender].balance >= MinSum && Acc[msg.sender].balance >= _am && now > Acc[msg.sender].unlockTime);\n        if (msg.sender.call.value(_am)()) {\n            Acc[msg.sender].balance -= _am;\n            Log.addMessage(msg.sender, _am, \"Collect\");\n        }\n    }\n\n    function() public payable {\n        put(0);\n    }",
          "message": "Contract 'PENNY_BY_PENNY' (patch_17.sol#3-51) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 20,
          "vulnerability_code": "    function SetMinSum(uint _val) public {\n        require(!initialized);\n        MinSum = _val;",
          "message": "Function 'PENNY_BY_PENNY.SetMinSum' (patch_17.sol#17-20) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function SetMinSum(uint _val) public {",
          "message": "Parameter '_val' of PENNY_BY_PENNY.SetMinSum (patch_17.sol#17) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": 25,
          "vulnerability_code": "    function SetLogFile(address _log) public {\n        require(!initialized);\n        Log = LogFile(_log);",
          "message": "Function 'PENNY_BY_PENNY.SetLogFile' (patch_17.sol#22-25) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function SetLogFile(address _log) public {",
          "message": "Parameter '_log' of PENNY_BY_PENNY.SetLogFile (patch_17.sol#22) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function put(uint _lockTime) public payable {",
          "message": "Parameter '_lockTime' of PENNY_BY_PENNY.put (patch_17.sol#32) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function collect(uint _am) public {",
          "message": "Parameter '_am' of PENNY_BY_PENNY.collect (patch_17.sol#40) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => Holder) public Acc;",
          "message": "Variable 'PENNY_BY_PENNY.Acc' (patch_17.sol#9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum;",
          "message": "Variable 'PENNY_BY_PENNY.MinSum' (patch_17.sol#11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    LogFile Log;",
          "message": "Variable 'PENNY_BY_PENNY.Log' (patch_17.sol#13) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of LogFile.addMessage (patch_17.sol#63) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of LogFile.addMessage (patch_17.sol#63) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of LogFile.addMessage (patch_17.sol#63) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public history;",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public history;",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => Holder) public Acc;",
          "message": null
        },
        {
          "name": "Re-Entrancy Vulnerability",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (msg.sender.call.value(_am)()) {",
          "message": null
        },
        {
          "name": "Timestamp Dependency",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(Acc[msg.sender].balance >= MinSum && Acc[msg.sender].balance >= _am && now > Acc[msg.sender].unlockTime);",
          "message": null
        }
      ]
    },
    "securify": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "DAO",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "MissingInputValidation",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "TODTransfer",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    }
  }
}