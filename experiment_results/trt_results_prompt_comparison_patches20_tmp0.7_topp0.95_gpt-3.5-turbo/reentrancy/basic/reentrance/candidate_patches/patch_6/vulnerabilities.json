{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_10"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 27,
          "vulnerability_code": "    function withdraw(uint _amount) public {\n        require(!locked);\n        locked = true;\n        if (balances[msg.sender] >= _amount) {\n            balances[msg.sender] -= _amount;\n            if (msg.sender.call.value(_amount)()) {\n                locked = false;\n            }\n        }\n        else {\n            locked = false;\n        }",
          "message": "Reentrancy in Reentrance.withdraw (patch_6.sol#15-27):\n\tExternal calls:\n\t- msg.sender.call.value(_amount)() (patch_6.sol#20-22)\n\tState variables written after the call(s):\n\t- locked (patch_6.sol#21)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 9,
          "vulnerability_code": "    function donate(address _to) public payable {\n        balances[_to] += msg.value;",
          "message": "Reentrance.donate (patch_6.sol#7-9) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 13,
          "vulnerability_code": "    function balanceOf(address _who) public view returns (uint balance) {\n        return balances[_who];",
          "message": "Reentrance.balanceOf (patch_6.sol#11-13) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 27,
          "vulnerability_code": "    function withdraw(uint _amount) public {\n        require(!locked);\n        locked = true;\n        if (balances[msg.sender] >= _amount) {\n            balances[msg.sender] -= _amount;\n            if (msg.sender.call.value(_amount)()) {\n                locked = false;\n            }\n        }\n        else {\n            locked = false;\n        }",
          "message": "Reentrance.withdraw (patch_6.sol#15-27) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() public payable {}",
          "message": "Reentrance.fallback (patch_6.sol#29) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;",
          "message": "Detected issues with version pragma in patch_6.sol:\n\t- pragma solidity^0.4.18 (patch_6.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 27,
          "vulnerability_code": "    function withdraw(uint _amount) public {\n        require(!locked);\n        locked = true;\n        if (balances[msg.sender] >= _amount) {\n            balances[msg.sender] -= _amount;\n            if (msg.sender.call.value(_amount)()) {\n                locked = false;\n            }\n        }\n        else {\n            locked = false;\n        }",
          "message": "Low level call in Reentrance.withdraw (patch_6.sol#15-27):\n\t-msg.sender.call.value(_amount)() patch_6.sol#20-22\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function donate(address _to) public payable {",
          "message": "Parameter '_to' of Reentrance.donate (patch_6.sol#7) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _who) public view returns (uint balance) {",
          "message": "Parameter '_who' of Reentrance.balanceOf (patch_6.sol#11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(uint _amount) public {",
          "message": "Parameter '_amount' of Reentrance.withdraw (patch_6.sol#15) is not in mixedCase\n"
        }
      ]
    },
    "securify": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "TODTransfer",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "DAO",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "MissingInputValidation",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balances[_to] += msg.value;",
          "message": null
        }
      ]
    }
  }
}