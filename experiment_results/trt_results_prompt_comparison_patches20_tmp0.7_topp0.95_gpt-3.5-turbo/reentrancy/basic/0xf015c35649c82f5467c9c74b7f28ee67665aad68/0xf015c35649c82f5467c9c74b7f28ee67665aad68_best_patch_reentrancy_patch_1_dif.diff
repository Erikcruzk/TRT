  pragma solidity ^0.4.25;
  
  contract MY_BANK {
-     function Put(uint _unlockTime) public payable {
-         var acc = Acc[msg.sender];
-         acc.balance += msg.value;
-         acc.unlockTime = _unlockTime > now ? _unlockTime : now;
-         LogFile.AddMessage(msg.sender, msg.value, "Put");
-     }
- 
-     function Collect(uint _am) public payable {
-         var acc = Acc[msg.sender];
-         if (
-             acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime
-         ) {
-             if (msg.sender.call.value(_am)()) {
-                 acc.balance -= _am;
-                 LogFile.AddMessage(msg.sender, _am, "Collect");
-             }
-         }
-     }
- 
-     function() public payable {
-         Put(0);
-     }
- 
      struct Holder {
          uint unlockTime;
          uint balance;
      }
  
      mapping(address => Holder) public Acc;
  
      Log LogFile;
  
      uint public MinSum = 1 ether;
  
-     function MY_BANK(address log) public {
?     ^ -  - ^^^^^^^^^
+     constructor(address log) public {
?     ^^^^^^    ^
          LogFile = Log(log);
+     }
+ 
+     function put(uint _unlockTime) public payable {
+         Holder storage acc = Acc[msg.sender];
+         acc.balance += msg.value;
+         acc.unlockTime = _unlockTime > now ? _unlockTime : now;
+         LogFile.addMessage(msg.sender, msg.value, "Put");
+     }
+ 
+     function collect(uint _am) public {
+         Holder storage acc = Acc[msg.sender];
+         require(
+             acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime
+         );
+         acc.balance -= _am;
+         require(msg.sender.call.value(_am)());
+         LogFile.addMessage(msg.sender, _am, "Collect");
+     }
+ 
+     function() public payable {
+         put(0);
      }
  }
  
  contract Log {
      struct Message {
-         address Sender;
?                 ^
+         address sender;
?                 ^
-         string Data;
?                ^
+         string data;
?                ^
-         uint Val;
?              ^
+         uint val;
?              ^
-         uint Time;
?              ^
+         uint time;
?              ^
      }
  
-     Message[] public History;
?                      ^
+     Message[] public history;
?                      ^
  
-     Message LastMsg;
- 
-     function AddMessage(address _adr, uint _val, string _data) public {
?              ^
+     function addMessage(address _adr, uint _val, string _data) public {
?              ^
+         Message memory lastMsg;
-         LastMsg.Sender = _adr;
?         ^       ^
+         lastMsg.sender = _adr;
?         ^       ^
-         LastMsg.Time = now;
?         ^       ^
+         lastMsg.time = now;
?         ^       ^
-         LastMsg.Val = _val;
?         ^       ^
+         lastMsg.val = _val;
?         ^       ^
-         LastMsg.Data = _data;
?         ^       ^
+         lastMsg.data = _data;
?         ^       ^
-         History.push(LastMsg);
?         ^            ^
+         history.push(lastMsg);
?         ^            ^
      }
- }
+ }