{
  "smartbugs_completed": true,
  "analyzer_results": {
    "securify": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "TODTransfer",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "DAO",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "MissingInputValidation",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "        userBalance[msg.sender] += msg.value;",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_7"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 26,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!locked);\n        uint amountToWithdraw = userBalance[msg.sender];\n        require(amountToWithdraw > 0);\n        userBalance[msg.sender] = 0;\n        locked = true;\n        if (!(msg.sender.call.value(amountToWithdraw)())) {\n            throw;\n        }\n        locked = false;",
          "message": "Reentrancy in Reentrance.withdrawBalance (patch_17.sol#16-26):\n\tExternal calls:\n\t- ! (msg.sender.call.value(amountToWithdraw)()) (patch_17.sol#22-24)\n\tState variables written after the call(s):\n\t- locked (patch_17.sol#25)\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "            throw;",
          "message": "Deprecated standard detected @ patch_17.sol#23:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 9,
          "vulnerability_code": "    function getBalance(address u) constant public returns (uint) {\n        return userBalance[u];",
          "message": "Reentrance.getBalance (patch_17.sol#7-9) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 14,
          "vulnerability_code": "    function addToBalance() public payable {\n        require(!locked);\n        userBalance[msg.sender] += msg.value;",
          "message": "Reentrance.addToBalance (patch_17.sol#11-14) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 26,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!locked);\n        uint amountToWithdraw = userBalance[msg.sender];\n        require(amountToWithdraw > 0);\n        userBalance[msg.sender] = 0;\n        locked = true;\n        if (!(msg.sender.call.value(amountToWithdraw)())) {\n            throw;\n        }\n        locked = false;",
          "message": "Reentrance.withdrawBalance (patch_17.sol#16-26) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.15;",
          "message": "Detected issues with version pragma in patch_17.sol:\n\t- pragma solidity^0.4.15 (patch_17.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 26,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!locked);\n        uint amountToWithdraw = userBalance[msg.sender];\n        require(amountToWithdraw > 0);\n        userBalance[msg.sender] = 0;\n        locked = true;\n        if (!(msg.sender.call.value(amountToWithdraw)())) {\n            throw;\n        }\n        locked = false;",
          "message": "Low level call in Reentrance.withdrawBalance (patch_17.sol#16-26):\n\t-! (msg.sender.call.value(amountToWithdraw)()) patch_17.sol#22-24\n"
        }
      ]
    }
  }
}