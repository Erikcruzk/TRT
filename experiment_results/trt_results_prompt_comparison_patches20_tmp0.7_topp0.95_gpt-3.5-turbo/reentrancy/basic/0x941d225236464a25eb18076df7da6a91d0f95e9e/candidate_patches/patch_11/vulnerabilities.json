{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Re-Entrancy Vulnerability",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (msg.sender.call.value(_am)()) {",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public history;",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public history;",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_19"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 31,
          "vulnerability_code": "    function cashOut(uint _am) public { // removed payable keyword from this function\n        if (_am <= balances[msg.sender] && block.number > lastBlock) {\n            if (msg.sender.call.value(_am)()) {\n                balances[msg.sender] -= _am;\n                TransferLog.addMessage(msg.sender, _am, \"CashOut\"); // changed function name to lowercase\n            }\n        }",
          "message": "Reentrancy in ETH_FUND.cashOut (patch_11.sol#24-31):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (patch_11.sol#26-29)\n\tState variables written after the call(s):\n\t- balances (patch_11.sol#27)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 22,
          "vulnerability_code": "    function deposit() public payable {\n        if (msg.value >= MinDeposit) { // changed to greater than or equal to\n            balances[msg.sender] += msg.value;\n            TransferLog.addMessage(msg.sender, msg.value, \"Deposit\"); // changed function name to lowercase\n            lastBlock = block.number;\n        }",
          "message": "Reentrancy in ETH_FUND.deposit (patch_11.sol#16-22):\n\tExternal calls:\n\t- TransferLog.addMessage(msg.sender,msg.value,Deposit) (patch_11.sol#19)\n\tState variables written after the call(s):\n\t- lastBlock (patch_11.sol#20)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 22,
          "vulnerability_code": "    function deposit() public payable {\n        if (msg.value >= MinDeposit) { // changed to greater than or equal to\n            balances[msg.sender] += msg.value;\n            TransferLog.addMessage(msg.sender, msg.value, \"Deposit\"); // changed function name to lowercase\n            lastBlock = block.number;\n        }",
          "message": "ETH_FUND.deposit (patch_11.sol#16-22) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 31,
          "vulnerability_code": "    function cashOut(uint _am) public { // removed payable keyword from this function\n        if (_am <= balances[msg.sender] && block.number > lastBlock) {\n            if (msg.sender.call.value(_am)()) {\n                balances[msg.sender] -= _am;\n                TransferLog.addMessage(msg.sender, _am, \"CashOut\"); // changed function name to lowercase\n            }\n        }",
          "message": "ETH_FUND.cashOut (patch_11.sol#24-31) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() public payable {}",
          "message": "ETH_FUND.fallback (patch_11.sol#33) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": 38,
          "vulnerability_code": "    function updateMinDeposit(uint _newMinDeposit) public {\n        MinDeposit = _newMinDeposit;",
          "message": "ETH_FUND.updateMinDeposit (patch_11.sol#36-38) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": 59,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public { // changed function name to lowercase\n        lastMsg.sender = _adr;\n        lastMsg.time = now;\n        lastMsg.val = _val;\n        lastMsg.data = _data;\n        history.push(lastMsg);",
          "message": "Log.addMessage (patch_11.sol#53-59) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_11.sol:\n\t- pragma solidity^0.4.19 (patch_11.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 31,
          "vulnerability_code": "    function cashOut(uint _am) public { // removed payable keyword from this function\n        if (_am <= balances[msg.sender] && block.number > lastBlock) {\n            if (msg.sender.call.value(_am)()) {\n                balances[msg.sender] -= _am;\n                TransferLog.addMessage(msg.sender, _am, \"CashOut\"); // changed function name to lowercase\n            }\n        }",
          "message": "Low level call in ETH_FUND.cashOut (patch_11.sol#24-31):\n\t-msg.sender.call.value(_am)() patch_11.sol#26-29\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 39,
          "vulnerability_code": "contract ETH_FUND {\n    mapping(address => uint) public balances;\n\n    uint public MinDeposit = 1 ether;\n\n    Log TransferLog;\n\n    uint lastBlock;\n\n    function ETH_FUND(address _log) public {\n        TransferLog = Log(_log);\n    }\n\n    function deposit() public payable {\n        if (msg.value >= MinDeposit) { // changed to greater than or equal to\n            balances[msg.sender] += msg.value;\n            TransferLog.addMessage(msg.sender, msg.value, \"Deposit\"); // changed function name to lowercase\n            lastBlock = block.number;\n        }\n    }\n\n    function cashOut(uint _am) public { // removed payable keyword from this function\n        if (_am <= balances[msg.sender] && block.number > lastBlock) {\n            if (msg.sender.call.value(_am)()) {\n                balances[msg.sender] -= _am;\n                TransferLog.addMessage(msg.sender, _am, \"CashOut\"); // changed function name to lowercase\n            }\n        }\n    }\n\n    function() public payable {}\n\n    // added function to update min deposit amount\n    function updateMinDeposit(uint _newMinDeposit) public {\n        MinDeposit = _newMinDeposit;\n    }",
          "message": "Contract 'ETH_FUND' (patch_11.sol#3-39) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": 14,
          "vulnerability_code": "    function ETH_FUND(address _log) public {\n        TransferLog = Log(_log);",
          "message": "Function 'ETH_FUND.ETH_FUND' (patch_11.sol#12-14) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ETH_FUND(address _log) public {",
          "message": "Parameter '_log' of ETH_FUND.ETH_FUND (patch_11.sol#12) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function cashOut(uint _am) public { // removed payable keyword from this function",
          "message": "Parameter '_am' of ETH_FUND.cashOut (patch_11.sol#24) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function updateMinDeposit(uint _newMinDeposit) public {",
          "message": "Parameter '_newMinDeposit' of ETH_FUND.updateMinDeposit (patch_11.sol#36) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinDeposit = 1 ether;",
          "message": "Variable 'ETH_FUND.MinDeposit' (patch_11.sol#6) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Log TransferLog;",
          "message": "Variable 'ETH_FUND.TransferLog' (patch_11.sol#8) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public { // changed function name to lowercase",
          "message": "Parameter '_adr' of Log.addMessage (patch_11.sol#53) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public { // changed function name to lowercase",
          "message": "Parameter '_val' of Log.addMessage (patch_11.sol#53) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public { // changed function name to lowercase",
          "message": "Parameter '_data' of Log.addMessage (patch_11.sol#53) is not in mixedCase\n"
        }
      ]
    },
    "securify": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "MissingInputValidation",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "DAO",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    }
  }
}