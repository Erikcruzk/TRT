{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public history;",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public history;",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => Holder) public acc;",
          "message": null
        },
        {
          "name": "Timestamp Dependency",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account.balance >= minSum && account.balance >= _am && now > account.unlockTime);",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_13"
      ],
      "vulnerability_findings": [
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Message memory lastMsg;",
          "message": "lastMsg in Log.addMessage (patch_13.sol#50) is a local variable never initialiazed\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public minSum = 2 ether;",
          "message": "U_BANK.minSum should be constant (patch_13.sol#13)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": 32,
          "vulnerability_code": "    function collect(uint _am) public {\n        Holder storage account = acc[msg.sender];\n        require(account.balance >= minSum && account.balance >= _am && now > account.unlockTime);\n        account.balance -= _am;\n        require(msg.sender.call.value(_am)());\n        logFile.addMessage(msg.sender, _am, \"Collect\");",
          "message": "U_BANK.collect (patch_13.sol#26-32) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": 36,
          "vulnerability_code": "    function() public payable {\n        put(0);",
          "message": "U_BANK.fallback (patch_13.sol#34-36) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": 56,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {\n        Message memory lastMsg;\n        lastMsg.sender = _adr;\n        lastMsg.time = now;\n        lastMsg.val = _val;\n        lastMsg.data = _data;\n        history.push(lastMsg);",
          "message": "Log.addMessage (patch_13.sol#49-56) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": 32,
          "vulnerability_code": "    function collect(uint _am) public {\n        Holder storage account = acc[msg.sender];\n        require(account.balance >= minSum && account.balance >= _am && now > account.unlockTime);\n        account.balance -= _am;\n        require(msg.sender.call.value(_am)());\n        logFile.addMessage(msg.sender, _am, \"Collect\");",
          "message": "Low level call in U_BANK.collect (patch_13.sol#26-32):\n\t-require(bool)(msg.sender.call.value(_am)()) patch_13.sol#30\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 37,
          "vulnerability_code": "contract U_BANK {\n    struct Holder {\n        uint unlockTime;\n        uint balance;\n    }\n\n    mapping(address => Holder) public acc;\n\n    Log logFile;\n\n    uint public minSum = 2 ether;\n\n    constructor(address _log) public {\n        logFile = Log(_log);\n    }\n\n    function put(uint _unlockTime) public payable {\n        Holder storage account = acc[msg.sender];\n        account.balance += msg.value;\n        account.unlockTime = _unlockTime > now ? _unlockTime : now;\n        logFile.addMessage(msg.sender, msg.value, \"Put\");\n    }\n\n    function collect(uint _am) public {\n        Holder storage account = acc[msg.sender];\n        require(account.balance >= minSum && account.balance >= _am && now > account.unlockTime);\n        account.balance -= _am;\n        require(msg.sender.call.value(_am)());\n        logFile.addMessage(msg.sender, _am, \"Collect\");\n    }\n\n    function() public payable {\n        put(0);\n    }",
          "message": "Contract 'U_BANK' (patch_13.sol#3-37) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _log) public {",
          "message": "Parameter '_log' of U_BANK. (patch_13.sol#15) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function put(uint _unlockTime) public payable {",
          "message": "Parameter '_unlockTime' of U_BANK.put (patch_13.sol#19) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function collect(uint _am) public {",
          "message": "Parameter '_am' of U_BANK.collect (patch_13.sol#26) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of Log.addMessage (patch_13.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of Log.addMessage (patch_13.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of Log.addMessage (patch_13.sol#49) is not in mixedCase\n"
        }
      ]
    },
    "securify": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "MissingInputValidation",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    }
  }
}