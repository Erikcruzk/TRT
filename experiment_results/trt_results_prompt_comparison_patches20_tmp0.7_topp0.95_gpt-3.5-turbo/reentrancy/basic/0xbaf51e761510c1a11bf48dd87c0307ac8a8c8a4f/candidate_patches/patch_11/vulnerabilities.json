{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_15"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 28,
          "vulnerability_code": "    function cashOut(uint _amount) public {\n        if (_amount <= balances[msg.sender]) {\n            if (msg.sender.call.value(_amount)()) {\n                balances[msg.sender] -= _amount;\n                transferLog.addMessage(msg.sender, _amount, \"CashOut\");\n            }\n        }",
          "message": "Reentrancy in ETH_VAULT.cashOut (patch_11.sol#21-28):\n\tExternal calls:\n\t- msg.sender.call.value(_amount)() (patch_11.sol#23-26)\n\tState variables written after the call(s):\n\t- balances (patch_11.sol#24)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public minDeposit = 1 ether;",
          "message": "ETH_VAULT.minDeposit should be constant (patch_11.sol#6)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": 19,
          "vulnerability_code": "    function deposit() public payable {\n        if (msg.value >= minDeposit) {\n            balances[msg.sender] += msg.value;\n            transferLog.addMessage(msg.sender, msg.value, \"Deposit\");\n        }",
          "message": "ETH_VAULT.deposit (patch_11.sol#14-19) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 28,
          "vulnerability_code": "    function cashOut(uint _amount) public {\n        if (_amount <= balances[msg.sender]) {\n            if (msg.sender.call.value(_amount)()) {\n                balances[msg.sender] -= _amount;\n                transferLog.addMessage(msg.sender, _amount, \"CashOut\");\n            }\n        }",
          "message": "ETH_VAULT.cashOut (patch_11.sol#21-28) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() public payable {}",
          "message": "ETH_VAULT.fallback (patch_11.sol#30) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": 52,
          "vulnerability_code": "    function addMessage(address _address, uint _value, string _data) public {\n        Message memory newMessage = Message({\n            sender: _address,\n            time: now,\n            val: _value,\n            data: _data\n        });\n        history.push(newMessage);",
          "message": "Log.addMessage (patch_11.sol#44-52) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_11.sol:\n\t- pragma solidity^0.4.19 (patch_11.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 28,
          "vulnerability_code": "    function cashOut(uint _amount) public {\n        if (_amount <= balances[msg.sender]) {\n            if (msg.sender.call.value(_amount)()) {\n                balances[msg.sender] -= _amount;\n                transferLog.addMessage(msg.sender, _amount, \"CashOut\");\n            }\n        }",
          "message": "Low level call in ETH_VAULT.cashOut (patch_11.sol#21-28):\n\t-msg.sender.call.value(_amount)() patch_11.sol#23-26\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 32,
          "vulnerability_code": "contract ETH_VAULT {\n    mapping(address => uint) public balances;\n\n    uint public minDeposit = 1 ether;\n\n    Log transferLog;\n\n    function ETH_VAULT(address _log) public {\n        transferLog = Log(_log);\n    }\n\n    function deposit() public payable {\n        if (msg.value >= minDeposit) {\n            balances[msg.sender] += msg.value;\n            transferLog.addMessage(msg.sender, msg.value, \"Deposit\");\n        }\n    }\n\n    function cashOut(uint _amount) public {\n        if (_amount <= balances[msg.sender]) {\n            if (msg.sender.call.value(_amount)()) {\n                balances[msg.sender] -= _amount;\n                transferLog.addMessage(msg.sender, _amount, \"CashOut\");\n            }\n        }\n    }\n\n    function() public payable {}\n",
          "message": "Contract 'ETH_VAULT' (patch_11.sol#3-32) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": 12,
          "vulnerability_code": "    function ETH_VAULT(address _log) public {\n        transferLog = Log(_log);",
          "message": "Function 'ETH_VAULT.ETH_VAULT' (patch_11.sol#10-12) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ETH_VAULT(address _log) public {",
          "message": "Parameter '_log' of ETH_VAULT.ETH_VAULT (patch_11.sol#10) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function cashOut(uint _amount) public {",
          "message": "Parameter '_amount' of ETH_VAULT.cashOut (patch_11.sol#21) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _address, uint _value, string _data) public {",
          "message": "Parameter '_address' of Log.addMessage (patch_11.sol#44) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _address, uint _value, string _data) public {",
          "message": "Parameter '_value' of Log.addMessage (patch_11.sol#44) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _address, uint _value, string _data) public {",
          "message": "Parameter '_data' of Log.addMessage (patch_11.sol#44) is not in mixedCase\n"
        }
      ]
    },
    "securify": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "DAO",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "MissingInputValidation",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Re-Entrancy Vulnerability",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (msg.sender.call.value(_amount)()) {",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public history;",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public history;",
          "message": null
        }
      ]
    }
  }
}