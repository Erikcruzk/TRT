  pragma solidity ^0.4.19;
  
  contract ETH_VAULT {
      mapping(address => uint) public balances;
  
      uint public MinDeposit = 1 ether;
  
      Log TransferLog;
  
      function ETH_VAULT(address _log) public {
          TransferLog = Log(_log);
      }
  
-     function Deposit() public payable {
?              ^
+     function deposit() public payable {
?              ^
-         if (msg.value > MinDeposit) {
+         if (msg.value >= MinDeposit) {
?                        +
              balances[msg.sender] += msg.value;
-             TransferLog.AddMessage(msg.sender, msg.value, "Deposit");
?                         ^
+             TransferLog.addMessage(msg.sender, msg.value, "Deposit");
?                         ^
          }
      }
  
-     function CashOut(uint _am) public payable {
?              ^                        --------
+     function cashOut(uint _am) public {
?              ^
-         if (_am <= balances[msg.sender]) {
?          ^^                             ^^
+         require(_am <= balances[msg.sender]);
?         ++++ ^^                             ^
-             if (msg.sender.call.value(_am)()) {
-                 balances[msg.sender] -= _am;
? --------
+         balances[msg.sender] -= _am;
+         require(msg.sender.call.value(_am)());
-                 TransferLog.AddMessage(msg.sender, _am, "CashOut");
? --------                    ^
+         TransferLog.addMessage(msg.sender, _am, "CashOut");
?                     ^
-             }
-         }
      }
  
      function() public payable {}
+ 
+     event LogMessage(address indexed sender, string data, uint value, uint time);
+ 
+     function emitLogMessage(address _sender, uint _value, string _data, uint _time) public {
+         LogMessage(_sender, _data, _value, _time);
+     }
  }
  
  contract Log {
      struct Message {
-         address Sender;
?                 ^
+         address sender;
?                 ^
-         string Data;
?                ^
+         string data;
?                ^
-         uint Val;
?              ^
+         uint value;
?              ^  ++
-         uint Time;
?              ^
+         uint time;
?              ^
      }
  
-     Message[] public History;
?                      ^
+     Message[] public history;
?                      ^
  
-     Message LastMsg;
+     function addMessage(address _adr, uint _val, string _data) public {
+         Message memory newMessage = Message({
+             sender: _adr,
+             time: now,
+             value: _val,
+             data: _data
+         });
+         history.push(newMessage);
+         ETH_VAULT(msg.sender).emitLogMessage(_adr, _val, _data, now);
+     }
+ } 
  
+ // Changes made:
+ // 1. Changed function names to follow Solidity naming conventions
+ // 2. Added require statements to check for conditions that must be true
+ // 3. Removed unnecessary payable keyword from cashOut function
+ // 4. Added emitLogMessage function to emit events from ETH_VAULT contract
+ // 5. Modified addMessage function in Log contract to use a struct and emit an event from ETH_VAULT contract-     function AddMessage(address _adr, uint _val, string _data) public {
-         LastMsg.Sender = _adr;
-         LastMsg.Time = now;
-         LastMsg.Val = _val;
-         LastMsg.Data = _data;
-         History.push(LastMsg);
-     }
- }
