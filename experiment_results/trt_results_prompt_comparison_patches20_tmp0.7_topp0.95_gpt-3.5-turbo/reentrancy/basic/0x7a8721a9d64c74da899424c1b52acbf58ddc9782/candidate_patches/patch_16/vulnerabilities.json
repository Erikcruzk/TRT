{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": null
        },
        {
          "name": "Re-Entrancy Vulnerability",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(msg.sender.call.value(_am)()); // added require statement for better security",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_17"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": 38,
          "vulnerability_code": "    function cashOut(uint _am) public {\n        if (_am <= balances[msg.sender]) {\n            require(msg.sender.call.value(_am)()); // added require statement for better security\n            balances[msg.sender] -= _am;\n            TransferLog.addMessage(msg.sender, _am, \"CashOut\"); // changed function name to lowercase\n        }",
          "message": "Reentrancy in PrivateDeposit.cashOut (patch_16.sol#32-38):\n\tExternal calls:\n\t- require(bool)(msg.sender.call.value(_am)()) (patch_16.sol#34)\n\tState variables written after the call(s):\n\t- balances (patch_16.sol#35)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinDeposit = 1 ether;",
          "message": "PrivateDeposit.MinDeposit should be constant (patch_16.sol#6)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 23,
          "vulnerability_code": "    function setLog(address _lib) public onlyOwner { // added public visibility modifier\n        TransferLog = Log(_lib);",
          "message": "PrivateDeposit.setLog (patch_16.sol#21-23) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": 30,
          "vulnerability_code": "    function deposit() public payable { // changed function name to lowercase\n        if (msg.value >= MinDeposit) {\n            balances[msg.sender] += msg.value;\n            TransferLog.addMessage(msg.sender, msg.value, \"Deposit\"); // changed function name to lowercase\n        }",
          "message": "PrivateDeposit.deposit (patch_16.sol#25-30) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": 38,
          "vulnerability_code": "    function cashOut(uint _am) public {\n        if (_am <= balances[msg.sender]) {\n            require(msg.sender.call.value(_am)()); // added require statement for better security\n            balances[msg.sender] -= _am;\n            TransferLog.addMessage(msg.sender, _am, \"CashOut\"); // changed function name to lowercase\n        }",
          "message": "PrivateDeposit.cashOut (patch_16.sol#32-38) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() public payable {}",
          "message": "PrivateDeposit.fallback (patch_16.sol#40) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": 62,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public { // changed function name to lowercase\n        lastMsg.Sender = _adr;\n        lastMsg.Time = now;\n        lastMsg.Val = _val;\n        lastMsg.Data = _data;\n        History.push(lastMsg); // changed variable name to lowercase",
          "message": "Log.addMessage (patch_16.sol#56-62) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_16.sol:\n\t- pragma solidity^0.4.19 (patch_16.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": 38,
          "vulnerability_code": "    function cashOut(uint _am) public {\n        if (_am <= balances[msg.sender]) {\n            require(msg.sender.call.value(_am)()); // added require statement for better security\n            balances[msg.sender] -= _am;\n            TransferLog.addMessage(msg.sender, _am, \"CashOut\"); // changed function name to lowercase\n        }",
          "message": "Low level call in PrivateDeposit.cashOut (patch_16.sol#32-38):\n\t-require(bool)(msg.sender.call.value(_am)()) patch_16.sol#34\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setLog(address _lib) public onlyOwner { // added public visibility modifier",
          "message": "Parameter '_lib' of PrivateDeposit.setLog (patch_16.sol#21) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function cashOut(uint _am) public {",
          "message": "Parameter '_am' of PrivateDeposit.cashOut (patch_16.sol#32) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinDeposit = 1 ether;",
          "message": "Variable 'PrivateDeposit.MinDeposit' (patch_16.sol#6) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Log TransferLog;",
          "message": "Variable 'PrivateDeposit.TransferLog' (patch_16.sol#9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public { // changed function name to lowercase",
          "message": "Parameter '_adr' of Log.addMessage (patch_16.sol#56) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public { // changed function name to lowercase",
          "message": "Parameter '_val' of Log.addMessage (patch_16.sol#56) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public { // changed function name to lowercase",
          "message": "Parameter '_data' of Log.addMessage (patch_16.sol#56) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": "Variable 'Log.History' (patch_16.sol#52) is not in mixedCase\n"
        }
      ]
    },
    "securify": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "MissingInputValidation",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "DAO",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    }
  }
}