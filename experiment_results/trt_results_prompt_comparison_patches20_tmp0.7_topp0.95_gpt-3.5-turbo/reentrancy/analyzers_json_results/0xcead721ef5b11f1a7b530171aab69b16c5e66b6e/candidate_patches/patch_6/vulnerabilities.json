{
  "smartbugs_completed": true,
  "analyzer_results": {
    "securify": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "MissingInputValidation",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => Holder) public Acc;",
          "message": null
        },
        {
          "name": "Timestamp Dependency",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime);",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_19"
      ],
      "vulnerability_findings": [
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Message memory LastMsg;",
          "message": "LastMsg in Log.AddMessage (patch_6.sol#48) is a local variable never initialiazed\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum = 1 ether;",
          "message": "WALLET.MinSum should be constant (patch_6.sol#6)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 30,
          "vulnerability_code": "    function Collect(uint _am) public {\n        Holder storage acc = Acc[msg.sender];\n        require(acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime);\n        acc.balance -= _am;\n        LogFile.AddMessage(msg.sender, _am, \"Collect\");\n        require(msg.sender.call.value(_am)());",
          "message": "WALLET.Collect (patch_6.sol#24-30) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": 34,
          "vulnerability_code": "    function() public payable {\n        Put(0);",
          "message": "WALLET.fallback (patch_6.sol#32-34) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": 54,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        Message memory LastMsg;\n        LastMsg.Sender = _adr;\n        LastMsg.Time = now;\n        LastMsg.Val = _val;\n        LastMsg.Data = _data;\n        History.push(LastMsg);",
          "message": "Log.AddMessage (patch_6.sol#47-54) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 30,
          "vulnerability_code": "    function Collect(uint _am) public {\n        Holder storage acc = Acc[msg.sender];\n        require(acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime);\n        acc.balance -= _am;\n        LogFile.AddMessage(msg.sender, _am, \"Collect\");\n        require(msg.sender.call.value(_am)());",
          "message": "Low level call in WALLET.Collect (patch_6.sol#24-30):\n\t-require(bool)(msg.sender.call.value(_am)()) patch_6.sol#29\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": 15,
          "vulnerability_code": "    function WALLET(address log) public {\n        LogFile = Log(log);",
          "message": "Function 'WALLET.WALLET' (patch_6.sol#13-15) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 22,
          "vulnerability_code": "    function Put(uint _unlockTime) public payable {\n        Holder storage acc = Acc[msg.sender];\n        acc.balance += msg.value;\n        acc.unlockTime = _unlockTime > now ? _unlockTime : now;\n        LogFile.AddMessage(msg.sender, msg.value, \"Put\");",
          "message": "Function 'WALLET.Put' (patch_6.sol#17-22) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Put(uint _unlockTime) public payable {",
          "message": "Parameter '_unlockTime' of WALLET.Put (patch_6.sol#17) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 30,
          "vulnerability_code": "    function Collect(uint _am) public {\n        Holder storage acc = Acc[msg.sender];\n        require(acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime);\n        acc.balance -= _am;\n        LogFile.AddMessage(msg.sender, _am, \"Collect\");\n        require(msg.sender.call.value(_am)());",
          "message": "Function 'WALLET.Collect' (patch_6.sol#24-30) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Collect(uint _am) public {",
          "message": "Parameter '_am' of WALLET.Collect (patch_6.sol#24) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => Holder) public Acc;",
          "message": "Variable 'WALLET.Acc' (patch_6.sol#4) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Log LogFile;",
          "message": "Variable 'WALLET.LogFile' (patch_6.sol#5) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum = 1 ether;",
          "message": "Variable 'WALLET.MinSum' (patch_6.sol#6) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": 54,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        Message memory LastMsg;\n        LastMsg.Sender = _adr;\n        LastMsg.Time = now;\n        LastMsg.Val = _val;\n        LastMsg.Data = _data;\n        History.push(LastMsg);",
          "message": "Function 'Log.AddMessage' (patch_6.sol#47-54) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of Log.AddMessage (patch_6.sol#47) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of Log.AddMessage (patch_6.sol#47) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of Log.AddMessage (patch_6.sol#47) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": "Variable 'Log.History' (patch_6.sol#45) is not in mixedCase\n"
        }
      ]
    }
  }
}