{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "        credit[to] += msg.value;",
          "message": null
        }
      ]
    },
    "securify": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "MissingInputValidation",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_7"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 19,
          "vulnerability_code": "    function donate(address to) payable {\n        require(!frozenAccount[msg.sender]); // Check if sender is not frozen\n        credit[to] += msg.value;\n        Deposit(msg.sender, msg.value);",
          "message": "SimpleDAO.donate (patch_12.sol#15-19) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 27,
          "vulnerability_code": "    function withdraw(uint amount) {\n        require(!frozenAccount[msg.sender]); // Check if sender is not frozen\n        require(credit[msg.sender] >= amount); // Check if sender has enough credit\n        credit[msg.sender] -= amount;\n        msg.sender.transfer(amount); // Use transfer instead of call\n        Withdraw(msg.sender, owner, amount);",
          "message": "SimpleDAO.withdraw (patch_12.sol#21-27) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": 31,
          "vulnerability_code": "    function queryCredit(address to) returns (uint) {\n        return credit[to];",
          "message": "SimpleDAO.queryCredit (patch_12.sol#29-31) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": 36,
          "vulnerability_code": "    function freezeAccount(address target) {\n        require(msg.sender == owner); // Only owner can freeze accounts\n        frozenAccount[target] = true;",
          "message": "SimpleDAO.freezeAccount (patch_12.sol#33-36) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": 41,
          "vulnerability_code": "    function unfreezeAccount(address target) {\n        require(msg.sender == owner); // Only owner can unfreeze accounts\n        frozenAccount[target] = false;",
          "message": "SimpleDAO.unfreezeAccount (patch_12.sol#38-41) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.2;",
          "message": "Detected issues with version pragma in patch_12.sol:\n\t- pragma solidity^0.4.2 (patch_12.sol#1): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 13,
          "vulnerability_code": "    function SimpleDAO() {\n        owner = msg.sender;",
          "message": "Function 'SimpleDAO.SimpleDAO' (patch_12.sol#11-13) is not in mixedCase\n"
        }
      ]
    }
  }
}