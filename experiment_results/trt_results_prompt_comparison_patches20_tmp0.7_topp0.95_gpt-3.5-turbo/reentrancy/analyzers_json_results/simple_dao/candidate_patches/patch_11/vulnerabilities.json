{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "        credit[to] += msg.value;",
          "message": null
        }
      ]
    },
    "securify": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "UnhandledException",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "MissingInputValidation",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_5"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 10,
          "vulnerability_code": "    function donate(address to) payable {\n        credit[to] += msg.value;\n        donated[to] = true;",
          "message": "SimpleDAO.donate (patch_11.sol#7-10) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": 17,
          "vulnerability_code": "    function withdraw(uint amount) {\n        if (credit[msg.sender] >= amount && donated[msg.sender]) {\n            credit[msg.sender] -= amount;\n            bool res = msg.sender.call.value(amount)();\n        }",
          "message": "SimpleDAO.withdraw (patch_11.sol#12-17) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": 21,
          "vulnerability_code": "    function queryCredit(address to) returns (uint) {\n        return credit[to];",
          "message": "SimpleDAO.queryCredit (patch_11.sol#19-21) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.2;",
          "message": "Detected issues with version pragma in patch_11.sol:\n\t- pragma solidity^0.4.2 (patch_11.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": 17,
          "vulnerability_code": "    function withdraw(uint amount) {\n        if (credit[msg.sender] >= amount && donated[msg.sender]) {\n            credit[msg.sender] -= amount;\n            bool res = msg.sender.call.value(amount)();\n        }",
          "message": "Low level call in SimpleDAO.withdraw (patch_11.sol#12-17):\n\t-res = msg.sender.call.value(amount)() patch_11.sol#15\n"
        }
      ]
    }
  }
}