{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public history;",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public history;",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => Holder) public acc;",
          "message": null
        },
        {
          "name": "Timestamp Dependency",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(now > holder.unlockTime, \"Unlock time has not passed yet\");",
          "message": null
        }
      ]
    },
    "securify": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "DAOConstantGas",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "MissingInputValidation",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_11"
      ],
      "vulnerability_findings": [
        {
          "name": "constable-states",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public minSum = 2 ether;",
          "message": "U_BANK.minSum should be constant (patch_12.sol#13)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": 38,
          "vulnerability_code": "    function collect(uint _amount) public {\n        Holder storage holder = acc[msg.sender];\n        require(holder.balance >= minSum, \"Balance should be greater than minimum sum\");\n        require(holder.balance >= _amount, \"Amount should be less than balance\");\n        require(now > holder.unlockTime, \"Unlock time has not passed yet\");\n\n        holder.balance -= _amount;\n        if (msg.sender.send(_amount)) {\n            logFile.addMessage(msg.sender, _amount, \"Collect\");\n        } else {\n            holder.balance += _amount;\n        }",
          "message": "U_BANK.collect (patch_12.sol#26-38) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": 42,
          "vulnerability_code": "    function() public payable {\n        put(0);",
          "message": "U_BANK.fallback (patch_12.sol#40-42) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": 58,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {\n        Message memory lastMsg = Message(_adr, _data, _val, now);\n        history.push(lastMsg);",
          "message": "Log.addMessage (patch_12.sol#55-58) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 43,
          "vulnerability_code": "contract U_BANK {\n    struct Holder {\n        uint unlockTime;\n        uint balance;\n    }\n\n    mapping(address => Holder) public acc;\n\n    Log logFile;\n\n    uint public minSum = 2 ether;\n\n    constructor(address _log) public {\n        logFile = Log(_log);\n    }\n\n    function put(uint _unlockTime) public payable {\n        Holder storage holder = acc[msg.sender];\n        holder.balance += msg.value;\n        holder.unlockTime = _unlockTime > now ? _unlockTime : now;\n        logFile.addMessage(msg.sender, msg.value, \"Put\");\n    }\n\n    function collect(uint _amount) public {\n        Holder storage holder = acc[msg.sender];\n        require(holder.balance >= minSum, \"Balance should be greater than minimum sum\");\n        require(holder.balance >= _amount, \"Amount should be less than balance\");\n        require(now > holder.unlockTime, \"Unlock time has not passed yet\");\n\n        holder.balance -= _amount;\n        if (msg.sender.send(_amount)) {\n            logFile.addMessage(msg.sender, _amount, \"Collect\");\n        } else {\n            holder.balance += _amount;\n        }\n    }\n\n    function() public payable {\n        put(0);\n    }",
          "message": "Contract 'U_BANK' (patch_12.sol#3-43) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _log) public {",
          "message": "Parameter '_log' of U_BANK. (patch_12.sol#15) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function put(uint _unlockTime) public payable {",
          "message": "Parameter '_unlockTime' of U_BANK.put (patch_12.sol#19) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function collect(uint _amount) public {",
          "message": "Parameter '_amount' of U_BANK.collect (patch_12.sol#26) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of Log.addMessage (patch_12.sol#55) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of Log.addMessage (patch_12.sol#55) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of Log.addMessage (patch_12.sol#55) is not in mixedCase\n"
        }
      ]
    }
  }
}