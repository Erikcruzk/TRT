  pragma solidity ^0.4.19;
  
  contract PrivateBank {
      mapping(address => uint) public balances;
  
      uint public MinDeposit = 1 ether;
  
      Log TransferLog;
  
      function PrivateBank(address _log) {
          TransferLog = Log(_log);
      }
  
      function Deposit() public payable {
          if (msg.value >= MinDeposit) {
              balances[msg.sender] += msg.value;
              TransferLog.AddMessage(msg.sender, msg.value, "Deposit");
          }
      }
  
-     function CashOut(uint _am) {
+     function CashOut(uint _am) public {
?                                +++++++
-         if (_am <= balances[msg.sender]) {
?          ^^                             ^^
+         require(_am <= balances[msg.sender]);
?         ++++ ^^                             ^
-             if (msg.sender.call.value(_am)()) {
-                 balances[msg.sender] -= _am;
? --------
+         balances[msg.sender] -= _am;
+         msg.sender.transfer(_am);
-                 TransferLog.AddMessage(msg.sender, _am, "CashOut");
? --------
+         TransferLog.AddMessage(msg.sender, _am, "CashOut");
-             }
-         }
      }
  
      function() public payable {}
+ 
  }
  
  contract Log {
      struct Message {
          address Sender;
          string Data;
          uint Val;
          uint Time;
      }
  
      Message[] public History;
  
-     Message LastMsg;
+     function AddMessage(address _adr, uint _val, string _data) public {
+         Message memory newMessage = Message({
+             Sender: _adr,
+             Time: now,
+             Val: _val,
+             Data: _data
+         });
+         History.push(newMessage);
+     }
+ } 
  
+ // Changes made:
+ // 1. Added 'public' to the 'CashOut' function
+ // 2. Used 'require' to check if the requested amount is available before transferring funds
+ // 3. Used 'transfer' instead of 'call.value' to prevent re-entrancy vulnerability
+ // 4. Changed the way new messages are added to the message history to avoid struct storage pointer aliasing vulnerability.-     function AddMessage(address _adr, uint _val, string _data) public {
-         LastMsg.Sender = _adr;
-         LastMsg.Time = now;
-         LastMsg.Val = _val;
-         LastMsg.Data = _data;
-         History.push(LastMsg);
-     }
- }
