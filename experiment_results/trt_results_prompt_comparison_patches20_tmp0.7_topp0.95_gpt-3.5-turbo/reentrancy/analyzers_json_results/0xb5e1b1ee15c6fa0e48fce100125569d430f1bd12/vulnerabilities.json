{
  "smartbugs_completed": true,
  "analyzer_results": {
    "securify": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "DAO",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "MissingInputValidation",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_22"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 28,
          "vulnerability_code": "    function CashOut(uint _am) public payable {\n        if (_am <= balances[msg.sender]) {\n            if (msg.sender.call.value(_am)()) {\n                balances[msg.sender] -= _am;\n                TransferLog.AddMessage(msg.sender, _am, \"CashOut\");\n            }\n        }",
          "message": "Reentrancy in Private_Bank.CashOut (0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol#21-28):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol#23-26)\n\tState variables written after the call(s):\n\t- balances (0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol#24)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinDeposit = 1 ether;",
          "message": "Private_Bank.MinDeposit should be constant (0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol#6)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": 19,
          "vulnerability_code": "    function Deposit() public payable {\n        if (msg.value > MinDeposit) {\n            balances[msg.sender] += msg.value;\n            TransferLog.AddMessage(msg.sender, msg.value, \"Deposit\");\n        }",
          "message": "Private_Bank.Deposit (0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol#14-19) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 28,
          "vulnerability_code": "    function CashOut(uint _am) public payable {\n        if (_am <= balances[msg.sender]) {\n            if (msg.sender.call.value(_am)()) {\n                balances[msg.sender] -= _am;\n                TransferLog.AddMessage(msg.sender, _am, \"CashOut\");\n            }\n        }",
          "message": "Private_Bank.CashOut (0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol#21-28) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() public payable {}",
          "message": "Private_Bank.fallback (0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol#30) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": 51,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        LastMsg.Sender = _adr;\n        LastMsg.Time = now;\n        LastMsg.Val = _val;\n        LastMsg.Data = _data;\n        History.push(LastMsg);",
          "message": "Log.AddMessage (0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol#45-51) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in 0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol:\n\t- pragma solidity^0.4.19 (0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 28,
          "vulnerability_code": "    function CashOut(uint _am) public payable {\n        if (_am <= balances[msg.sender]) {\n            if (msg.sender.call.value(_am)()) {\n                balances[msg.sender] -= _am;\n                TransferLog.AddMessage(msg.sender, _am, \"CashOut\");\n            }\n        }",
          "message": "Low level call in Private_Bank.CashOut (0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol#21-28):\n\t-msg.sender.call.value(_am)() 0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol#23-26\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 31,
          "vulnerability_code": "contract Private_Bank {\n    mapping(address => uint) public balances;\n\n    uint public MinDeposit = 1 ether;\n\n    Log TransferLog;\n\n    function Private_Bank(address _log) {\n        TransferLog = Log(_log);\n    }\n\n    function Deposit() public payable {\n        if (msg.value > MinDeposit) {\n            balances[msg.sender] += msg.value;\n            TransferLog.AddMessage(msg.sender, msg.value, \"Deposit\");\n        }\n    }\n\n    function CashOut(uint _am) public payable {\n        if (_am <= balances[msg.sender]) {\n            if (msg.sender.call.value(_am)()) {\n                balances[msg.sender] -= _am;\n                TransferLog.AddMessage(msg.sender, _am, \"CashOut\");\n            }\n        }\n    }\n\n    function() public payable {}",
          "message": "Contract 'Private_Bank' (0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol#3-31) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": 12,
          "vulnerability_code": "    function Private_Bank(address _log) {\n        TransferLog = Log(_log);",
          "message": "Function 'Private_Bank.Private_Bank' (0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol#10-12) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Private_Bank(address _log) {",
          "message": "Parameter '_log' of Private_Bank.Private_Bank (0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol#10) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": 19,
          "vulnerability_code": "    function Deposit() public payable {\n        if (msg.value > MinDeposit) {\n            balances[msg.sender] += msg.value;\n            TransferLog.AddMessage(msg.sender, msg.value, \"Deposit\");\n        }",
          "message": "Function 'Private_Bank.Deposit' (0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol#14-19) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 28,
          "vulnerability_code": "    function CashOut(uint _am) public payable {\n        if (_am <= balances[msg.sender]) {\n            if (msg.sender.call.value(_am)()) {\n                balances[msg.sender] -= _am;\n                TransferLog.AddMessage(msg.sender, _am, \"CashOut\");\n            }\n        }",
          "message": "Function 'Private_Bank.CashOut' (0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol#21-28) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function CashOut(uint _am) public payable {",
          "message": "Parameter '_am' of Private_Bank.CashOut (0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol#21) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinDeposit = 1 ether;",
          "message": "Variable 'Private_Bank.MinDeposit' (0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol#6) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Log TransferLog;",
          "message": "Variable 'Private_Bank.TransferLog' (0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol#8) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": 51,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        LastMsg.Sender = _adr;\n        LastMsg.Time = now;\n        LastMsg.Val = _val;\n        LastMsg.Data = _data;\n        History.push(LastMsg);",
          "message": "Function 'Log.AddMessage' (0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol#45-51) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of Log.AddMessage (0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol#45) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of Log.AddMessage (0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol#45) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of Log.AddMessage (0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol#45) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": "Variable 'Log.History' (0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol#41) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message LastMsg;",
          "message": "Variable 'Log.LastMsg' (0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol#43) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": null
        },
        {
          "name": "Re-Entrancy Vulnerability",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (msg.sender.call.value(_am)()) {",
          "message": null
        }
      ]
    }
  }
}