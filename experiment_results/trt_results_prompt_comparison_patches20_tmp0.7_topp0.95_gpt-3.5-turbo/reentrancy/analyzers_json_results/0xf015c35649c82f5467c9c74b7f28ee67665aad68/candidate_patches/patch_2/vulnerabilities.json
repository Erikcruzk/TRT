{
  "smartbugs_completed": true,
  "analyzer_results": {
    "securify": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "MissingInputValidation",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_11"
      ],
      "vulnerability_findings": [
        {
          "name": "constable-states",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public minSum = 1 ether;",
          "message": "MY_BANK.minSum should be constant (patch_2.sol#6)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": 25,
          "vulnerability_code": "    function withdraw(uint _amount) public {\n        require(_amount > 0 && balances[msg.sender] >= _amount && now > unlockTimes[msg.sender]);\n        balances[msg.sender] -= _amount;\n        msg.sender.transfer(_amount);\n        logFile.addMessage(msg.sender, _amount, \"Withdraw\");",
          "message": "MY_BANK.withdraw (patch_2.sol#20-25) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": 29,
          "vulnerability_code": "    function() public payable {\n        deposit(0);",
          "message": "MY_BANK.fallback (patch_2.sol#27-29) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": 45,
          "vulnerability_code": "    function addMessage(address _sender, uint _value, string _data) public {\n        Message memory message = Message(_sender, _data, _value, now);\n        history.push(message);",
          "message": "Log.addMessage (patch_2.sol#42-45) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 30,
          "vulnerability_code": "contract MY_BANK {\n    mapping(address => uint) public balances;\n    mapping(address => uint) public unlockTimes;\n    uint public minSum = 1 ether;\n    Log logFile;\n\n    function MY_BANK(address log) public {\n        logFile = Log(log);\n    }\n\n    function deposit(uint _unlockTime) public payable {\n        require(msg.value > 0);\n        balances[msg.sender] += msg.value;\n        unlockTimes[msg.sender] = _unlockTime > now ? _unlockTime : now;\n        logFile.addMessage(msg.sender, msg.value, \"Deposit\");\n    }\n\n    function withdraw(uint _amount) public {\n        require(_amount > 0 && balances[msg.sender] >= _amount && now > unlockTimes[msg.sender]);\n        balances[msg.sender] -= _amount;\n        msg.sender.transfer(_amount);\n        logFile.addMessage(msg.sender, _amount, \"Withdraw\");\n    }\n\n    function() public payable {\n        deposit(0);\n    }",
          "message": "Contract 'MY_BANK' (patch_2.sol#3-30) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": 11,
          "vulnerability_code": "    function MY_BANK(address log) public {\n        logFile = Log(log);",
          "message": "Function 'MY_BANK.MY_BANK' (patch_2.sol#9-11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deposit(uint _unlockTime) public payable {",
          "message": "Parameter '_unlockTime' of MY_BANK.deposit (patch_2.sol#13) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(uint _amount) public {",
          "message": "Parameter '_amount' of MY_BANK.withdraw (patch_2.sol#20) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _sender, uint _value, string _data) public {",
          "message": "Parameter '_sender' of Log.addMessage (patch_2.sol#42) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _sender, uint _value, string _data) public {",
          "message": "Parameter '_value' of Log.addMessage (patch_2.sol#42) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _sender, uint _value, string _data) public {",
          "message": "Parameter '_data' of Log.addMessage (patch_2.sol#42) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public history;",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public history;",
          "message": null
        },
        {
          "name": "Timestamp Dependency",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_amount > 0 && balances[msg.sender] >= _amount && now > unlockTimes[msg.sender]);",
          "message": null
        }
      ]
    }
  }
}