{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_10"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 26,
          "vulnerability_code": "    function withdraw(uint _amount) public {\n        require(!locked[msg.sender]); // Check if the caller is already withdrawing\n\n        if (balances[msg.sender] >= _amount) {\n            locked[msg.sender] = true; // Lock the caller to prevent reentrancy\n            if (msg.sender.call.value(_amount)()) {\n                _amount;\n            }\n            balances[msg.sender] -= _amount;\n            locked[msg.sender] = false; // Unlock the caller after successful withdrawal\n        }",
          "message": "Reentrancy in Reentrance.withdraw (patch_10.sol#15-26):\n\tExternal calls:\n\t- msg.sender.call.value(_amount)() (patch_10.sol#20-22)\n\tState variables written after the call(s):\n\t- balances (patch_10.sol#23)\n\t- locked (patch_10.sol#24)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 9,
          "vulnerability_code": "    function donate(address _to) public payable {\n        balances[_to] += msg.value;",
          "message": "Reentrance.donate (patch_10.sol#7-9) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 13,
          "vulnerability_code": "    function balanceOf(address _who) public view returns (uint balance) {\n        return balances[_who];",
          "message": "Reentrance.balanceOf (patch_10.sol#11-13) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 26,
          "vulnerability_code": "    function withdraw(uint _amount) public {\n        require(!locked[msg.sender]); // Check if the caller is already withdrawing\n\n        if (balances[msg.sender] >= _amount) {\n            locked[msg.sender] = true; // Lock the caller to prevent reentrancy\n            if (msg.sender.call.value(_amount)()) {\n                _amount;\n            }\n            balances[msg.sender] -= _amount;\n            locked[msg.sender] = false; // Unlock the caller after successful withdrawal\n        }",
          "message": "Reentrance.withdraw (patch_10.sol#15-26) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() public payable {}",
          "message": "Reentrance.fallback (patch_10.sol#28) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;",
          "message": "Detected issues with version pragma in patch_10.sol:\n\t- pragma solidity^0.4.18 (patch_10.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 26,
          "vulnerability_code": "    function withdraw(uint _amount) public {\n        require(!locked[msg.sender]); // Check if the caller is already withdrawing\n\n        if (balances[msg.sender] >= _amount) {\n            locked[msg.sender] = true; // Lock the caller to prevent reentrancy\n            if (msg.sender.call.value(_amount)()) {\n                _amount;\n            }\n            balances[msg.sender] -= _amount;\n            locked[msg.sender] = false; // Unlock the caller after successful withdrawal\n        }",
          "message": "Low level call in Reentrance.withdraw (patch_10.sol#15-26):\n\t-msg.sender.call.value(_amount)() patch_10.sol#20-22\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function donate(address _to) public payable {",
          "message": "Parameter '_to' of Reentrance.donate (patch_10.sol#7) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _who) public view returns (uint balance) {",
          "message": "Parameter '_who' of Reentrance.balanceOf (patch_10.sol#11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(uint _amount) public {",
          "message": "Parameter '_amount' of Reentrance.withdraw (patch_10.sol#15) is not in mixedCase\n"
        }
      ]
    },
    "securify": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "DAO",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "UnhandledException",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "MissingInputValidation",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Callstack Depth Attack Vulnerability",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (msg.sender.call.value(_amount)()) {",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balances[_to] += msg.value;",
          "message": null
        }
      ]
    }
  }
}