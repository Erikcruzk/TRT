  pragma solidity ^0.4.19;
  
  contract PERSONAL_BANK {
      mapping(address => uint256) public balances;
  
      uint public MinSum = 1 ether;
  
-     LogFile Log = LogFile(0x0486cF65A2F2F3A392CBEa398AFB7F5f0B72FF46);
+     LogFile Log;
  
-     bool intitalized;
?              -
+     bool initialized;
?            +
  
+     function PERSONAL_BANK(address _log) public {
+         Log = LogFile(_log);
+     }
+ 
-     function SetMinSum(uint _val) public {
?              ^
+     function setMinSum(uint _val) public {
?              ^
-         if (intitalized) revert();
+         require(!initialized);
          MinSum = _val;
      }
  
-     function SetLogFile(address _log) public {
-         if (intitalized) revert();
-         Log = LogFile(_log);
+     function deposit() public payable {
+         balances[msg.sender] += msg.value;
+         Log.addMessage(msg.sender, msg.value, "Put");
      }
  
-     function Initialized() public {
-         intitalized = true;
-     }
- 
-     function Deposit() public payable {
-         balances[msg.sender] += msg.value;
-         Log.AddMessage(msg.sender, msg.value, "Put");
-     }
- 
-     function Collect(uint _am) public payable {
?              ^                        --------
+     function collect(uint _am) public {
?              ^
-         if (balances[msg.sender] >= MinSum && balances[msg.sender] >= _am) {
?          ^^                                                               ^^
+         require(balances[msg.sender] >= MinSum && balances[msg.sender] >= _am);
?         ++++ ^^                                                               ^
-             if (msg.sender.call.value(_am)()) {
-                 balances[msg.sender] -= _am;
? --------
+         balances[msg.sender] -= _am;
+         require(msg.sender.call.value(_am)());
-                 Log.AddMessage(msg.sender, _am, "Collect");
? --------            ^
+         Log.addMessage(msg.sender, _am, "Collect");
?             ^
-             }
-         }
      }
  
      function() public payable {
-         Deposit();
?         ^
+         deposit();
?         ^
      }
  }
  
  contract LogFile {
      struct Message {
-         address Sender;
?                 ^
+         address sender;
?                 ^
-         string Data;
?                ^
+         string data;
?                ^
-         uint Val;
?              ^
+         uint val;
?              ^
-         uint Time;
?              ^
+         uint time;
?              ^
      }
  
-     Message[] public History;
?                      ^
+     Message[] public history;
?                      ^
  
-     Message LastMsg;
- 
-     function AddMessage(address _adr, uint _val, string _data) public {
?              ^
+     function addMessage(address _adr, uint _val, string _data) public {
?              ^
+         history.push(Message(_adr, _data, _val, now));
-         LastMsg.Sender = _adr;
-         LastMsg.Time = now;
-         LastMsg.Val = _val;
-         LastMsg.Data = _data;
-         History.push(LastMsg);
      }
- }
+ }