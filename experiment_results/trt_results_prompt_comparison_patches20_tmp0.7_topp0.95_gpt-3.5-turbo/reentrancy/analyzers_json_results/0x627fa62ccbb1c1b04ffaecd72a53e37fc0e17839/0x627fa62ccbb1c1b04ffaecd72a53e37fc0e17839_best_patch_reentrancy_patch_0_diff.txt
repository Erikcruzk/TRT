  pragma solidity ^0.4.19;
  
  contract Ownable {
-     address newOwner;
+     address public newOwner;
?            +++++++
-     address owner = msg.sender;
+     address public owner;
  
+     function Ownable() public {
+         owner = msg.sender;
+     }
+ 
-     function changeOwner(address addr) public onlyOwner {
?                                  ^^^
+     function changeOwner(address _newOwner) public onlyOwner {
?                                  ^^^^^^^^
-         newOwner = addr;
?                    ^^^
+         newOwner = _newOwner;
?                    ^^^^^^^^
      }
  
      function confirmOwner() public {
-         if (msg.sender == newOwner) {
?          ^^                        ^^
+         require(msg.sender == newOwner);
?         ++++ ^^                        ^
-             owner = newOwner;
? ----
+         owner = newOwner;
-         }
+         newOwner = address(0);
      }
  
      modifier onlyOwner() {
-         if (owner == msg.sender) _;
+         require(msg.sender == owner);
+         _;
      }
  }
  
  contract Token is Ownable {
+     function withdrawToken(address _token, uint256 _amount, address _to) public onlyOwner {
-     address owner = msg.sender;
- 
-     function WithdrawToken(
-         address token,
-         uint256 amount,
-         address to
-     ) public onlyOwner {
-         token.call(bytes4(sha3("transfer(address,uint256)")), to, amount);
?                           ^^ ^
+         require(_token.call(bytes4(keccak256("transfer(address,uint256)")), _to, _amount));
?         +++++++++                  ^^^^ ^^^^                                +    +       +
      }
  }
  
- contract TokenBank is Token {
?                       ^^^ -
+ contract TokenBank is Ownable {
?                       ^^^^^^
-     uint public MinDeposit;
?                 ^
+     uint public minDeposit;
?                 ^
-     mapping(address => uint) public Holders;
?                                     ^
+     mapping(address => uint) public holders;
?                                     ^
  
-     function initTokenBank() public {
?              ----
+     function TokenBank() public {
-         owner = msg.sender;
-         MinDeposit = 1 ether;
?         ^
+         minDeposit = 1 ether;
?         ^
      }
  
-     function() payable {
+     function() public payable {
?                +++++++
-         Deposit();
?         ^
+         deposit();
?         ^
      }
  
-     function Deposit() payable {
?              ^
+     function deposit() public payable {
?              ^         +++++++
-         if (msg.value > MinDeposit) {
?                         ^
+         if (msg.value > minDeposit) {
?                         ^
-             Holders[msg.sender] += msg.value;
?             ^
+             holders[msg.sender] += msg.value;
?             ^
          }
      }
  
+     function withdrawTokenToHolder(address _to, address _token, uint _amount) public onlyOwner {
-     function WitdrawTokenToHolder(
-         address _to,
-         address _token,
-         uint _amount
-     ) public onlyOwner {
-         if (Holders[_to] > 0) {
?          ^^ ^                ^^
+         require(holders[_to] > 0);
?         ++++ ^^ ^                ^
-             Holders[_to] = 0;
?         ^^^^^
+         holders[_to] = 0;
?         ^
+         Token token = Token(_token);
-             WithdrawToken(_token, _amount, _to);
?         ^^^^^
+         token.withdrawToken(_token, _amount, _to);
?         ^^^^^^^
-         }
      }
  
+     function withdrawToHolder(address _addr, uint _wei) public onlyOwner {
+         require(holders[_addr] > 0 && _wei <= holders[_addr]);
-     function WithdrawToHolder(
-         address _addr,
-         uint _wei
-     ) public payable onlyOwner {
-         if (Holders[_addr] > 0) {
-             if (_addr.call.value(_wei)()) {
-                 Holders[_addr] -= _wei;
?         ^^^^^^^^^
+         holders[_addr] -= _wei;
?         ^
+         _addr.transfer(_wei);
-             }
-         }
      }
- }
+ }