/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.19;

contract Ownable {
    address newOwner;
    address owner = msg.sender;

    function changeOwner(address addr) public onlyOwner {
        newOwner = addr;
    }

    function confirmOwner() public {
        if (msg.sender == newOwner) {
            owner = newOwner;
        }
    }

    modifier onlyOwner() {
        if (owner == msg.sender) _;
    }
}

contract Token is Ownable {
    address owner = msg.sender;

    function WithdrawToken(
        address token,
        uint256 amount,
        address to
    ) public onlyOwner {
        token.call(bytes4(sha3("transfer(address,uint256)")), to, amount);
    }
}

contract TokenBank is Token {
    uint public MinDeposit;
    mapping(address => uint) public Holders;

    function initTokenBank() public {
        owner = msg.sender;
        MinDeposit = 1 ether;
    }

    function() payable {
        Deposit();
    }

    function Deposit() payable {
        if (msg.value > MinDeposit) {
            Holders[msg.sender] += msg.value;
        }
    }

    function WitdrawTokenToHolder(
        address _to,
        address _token,
        uint _amount
    ) public onlyOwner {
        if (Holders[_to] > 0) {
            Holders[_to] = 0;
            WithdrawToken(_token, _amount, _to);
        }
    }

    function WithdrawToHolder(
        address _addr,
        uint _wei
    ) public payable onlyOwner {
        if (Holders[_addr] > 0) {
            if (_addr.call.value(_wei)()) {
                Holders[_addr] -= _wei;
            }
        }
    }
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.
{
  "securify": {
    "successfull_analysis": true,
    "errors": [],
    "vulnerability_findings": [
      {
        "name": "reentrancy",
        "vulnerability_from_line": null,
        "vulnerability_to_line": null,
        "vulnerability_code": null,
        "message": null
      }
    ]
  },
  "slither": {
    "successfull_analysis": true,
    "errors": [
      "EXIT_CODE_23"
    ],
    "vulnerability_findings": [
      {
        "name": "reentrancy",
        "vulnerability_from_line": 64,
        "vulnerability_to_line": 73,
        "vulnerability_code": "    function WithdrawToHolder(\n        address _addr,\n        uint _wei\n    ) public payable onlyOwner {\n        if (Holders[_addr] > 0) {\n            if (_addr.call.value(_wei)()) {\n                Holders[_addr] -= _wei;\n            }\n        }",
        "message": "Reentrancy in TokenBank.WithdrawToHolder (0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#64-73):\n\tExternal calls:\n\t- _addr.call.value(_wei)() (0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#69-71)\n\tState variables written after the call(s):\n\t- Holders (0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol#70)\n"
      }
    ]
  },
  "oyente": {
    "successfull_analysis": true,
    "errors": [],
    "vulnerability_findings": [
      {
        "name": "reentrancy",
        "vulnerability_from_line": 69,
        "vulnerability_to_line": null,
        "vulnerability_code": "            if (_addr.call.value(_wei)()) {",
        "message": null
      }
    ]
  }
}

/// Repaired Solidity Smart Contract