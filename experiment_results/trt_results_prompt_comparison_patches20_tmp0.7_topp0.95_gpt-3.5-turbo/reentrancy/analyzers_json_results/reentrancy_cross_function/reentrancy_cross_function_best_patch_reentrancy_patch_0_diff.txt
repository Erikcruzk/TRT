  pragma solidity ^0.4.0;
  
  contract Reentrancy_cross_function {
      mapping(address => uint) private userBalances;
+     mapping(address => bool) private locked;
  
      function transfer(address to, uint amount) {
+         require(!locked[msg.sender]);
-         if (userBalances[msg.sender] >= amount) {
?          ^^                                    ^^
+         require(userBalances[msg.sender] >= amount);
?         ++++ ^^                                    ^
+         locked[msg.sender] = true;
-             userBalances[to] += amount;
? ----
+         userBalances[to] += amount;
-             userBalances[msg.sender] -= amount;
? ----
+         userBalances[msg.sender] -= amount;
-         }
+         locked[msg.sender] = false;
      }
  
      function withdrawBalance() public {
+         require(!locked[msg.sender]);
+         locked[msg.sender] = true;
          uint amountToWithdraw = userBalances[msg.sender];
- 
-         (bool success, ) = msg.sender.call.value(amountToWithdraw)("");
-         require(success);
          userBalances[msg.sender] = 0;
+         locked[msg.sender] = false;
+         msg.sender.transfer(amountToWithdraw);
      }
- }
+ }