{
  "smartbugs_completed": true,
  "analyzer_results": {
    "securify": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "DAOConstantGas",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "        userBalances[to] += amount;",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_5"
      ],
      "vulnerability_findings": [
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 27,
          "vulnerability_code": "contract Reentrancy_cross_function {\n    mapping(address => uint) private userBalances;\n    mapping(address => bool) private locked;\n\n    function transfer(address to, uint amount) {\n        require(userBalances[msg.sender] >= amount);\n        require(!locked[msg.sender] && !locked[to]);\n        \n        locked[msg.sender] = true;\n        userBalances[to] += amount;\n        userBalances[msg.sender] -= amount;\n        locked[msg.sender] = false;\n    }\n\n    function withdrawBalance() public {\n        require(!locked[msg.sender]);\n        uint amountToWithdraw = userBalances[msg.sender];\n        require(amountToWithdraw > 0);\n\n        locked[msg.sender] = true;\n        userBalances[msg.sender] = 0;\n        msg.sender.transfer(amountToWithdraw);\n        locked[msg.sender] = false;\n    }",
          "message": "Reentrancy_cross_function (patch_7.sol#3-27) has incorrect ERC20 function interface(s):\n\t-transfer (patch_7.sol#7-15)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 15,
          "vulnerability_code": "    function transfer(address to, uint amount) {\n        require(userBalances[msg.sender] >= amount);\n        require(!locked[msg.sender] && !locked[to]);\n        \n        locked[msg.sender] = true;\n        userBalances[to] += amount;\n        userBalances[msg.sender] -= amount;\n        locked[msg.sender] = false;",
          "message": "Reentrancy_cross_function.transfer (patch_7.sol#7-15) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 26,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!locked[msg.sender]);\n        uint amountToWithdraw = userBalances[msg.sender];\n        require(amountToWithdraw > 0);\n\n        locked[msg.sender] = true;\n        userBalances[msg.sender] = 0;\n        msg.sender.transfer(amountToWithdraw);\n        locked[msg.sender] = false;",
          "message": "Reentrancy_cross_function.withdrawBalance (patch_7.sol#17-26) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;",
          "message": "Detected issues with version pragma in patch_7.sol:\n\t- pragma solidity^0.4.0 (patch_7.sol#1): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 27,
          "vulnerability_code": "contract Reentrancy_cross_function {\n    mapping(address => uint) private userBalances;\n    mapping(address => bool) private locked;\n\n    function transfer(address to, uint amount) {\n        require(userBalances[msg.sender] >= amount);\n        require(!locked[msg.sender] && !locked[to]);\n        \n        locked[msg.sender] = true;\n        userBalances[to] += amount;\n        userBalances[msg.sender] -= amount;\n        locked[msg.sender] = false;\n    }\n\n    function withdrawBalance() public {\n        require(!locked[msg.sender]);\n        uint amountToWithdraw = userBalances[msg.sender];\n        require(amountToWithdraw > 0);\n\n        locked[msg.sender] = true;\n        userBalances[msg.sender] = 0;\n        msg.sender.transfer(amountToWithdraw);\n        locked[msg.sender] = false;\n    }",
          "message": "Contract 'Reentrancy_cross_function' (patch_7.sol#3-27) is not in CapWords\n"
        }
      ]
    }
  }
}