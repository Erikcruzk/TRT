{
  "smartbugs_completed": true,
  "analyzer_results": {
    "securify": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "MissingInputValidation",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "DAO",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "        userBalances[to] += amount;",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_7"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": 20,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!locked[msg.sender]);\n        uint amountToWithdraw = userBalances[msg.sender];\n        userBalances[msg.sender] = 0;\n        locked[msg.sender] = true;\n        require(msg.sender.call.value(amountToWithdraw)());\n        locked[msg.sender] = false;",
          "message": "Reentrancy in Reentrancy_cross_function.withdrawBalance (patch_18.sol#13-20):\n\tExternal calls:\n\t- require(bool)(msg.sender.call.value(amountToWithdraw)()) (patch_18.sol#18)\n\tState variables written after the call(s):\n\t- locked (patch_18.sol#19)\n"
        },
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 21,
          "vulnerability_code": "contract Reentrancy_cross_function {\n    mapping(address => uint) private userBalances;\n    mapping(address => bool) private locked;\n\n    function transfer(address to, uint amount) public {\n        require(userBalances[msg.sender] >= amount);\n        userBalances[to] += amount;\n        userBalances[msg.sender] -= amount;\n    }\n\n    function withdrawBalance() public {\n        require(!locked[msg.sender]);\n        uint amountToWithdraw = userBalances[msg.sender];\n        userBalances[msg.sender] = 0;\n        locked[msg.sender] = true;\n        require(msg.sender.call.value(amountToWithdraw)());\n        locked[msg.sender] = false;\n    }",
          "message": "Reentrancy_cross_function (patch_18.sol#3-21) has incorrect ERC20 function interface(s):\n\t-transfer (patch_18.sol#7-11)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 11,
          "vulnerability_code": "    function transfer(address to, uint amount) public {\n        require(userBalances[msg.sender] >= amount);\n        userBalances[to] += amount;\n        userBalances[msg.sender] -= amount;",
          "message": "Reentrancy_cross_function.transfer (patch_18.sol#7-11) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": 20,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!locked[msg.sender]);\n        uint amountToWithdraw = userBalances[msg.sender];\n        userBalances[msg.sender] = 0;\n        locked[msg.sender] = true;\n        require(msg.sender.call.value(amountToWithdraw)());\n        locked[msg.sender] = false;",
          "message": "Reentrancy_cross_function.withdrawBalance (patch_18.sol#13-20) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;",
          "message": "Detected issues with version pragma in patch_18.sol:\n\t- pragma solidity^0.4.0 (patch_18.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": 20,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!locked[msg.sender]);\n        uint amountToWithdraw = userBalances[msg.sender];\n        userBalances[msg.sender] = 0;\n        locked[msg.sender] = true;\n        require(msg.sender.call.value(amountToWithdraw)());\n        locked[msg.sender] = false;",
          "message": "Low level call in Reentrancy_cross_function.withdrawBalance (patch_18.sol#13-20):\n\t-require(bool)(msg.sender.call.value(amountToWithdraw)()) patch_18.sol#18\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 21,
          "vulnerability_code": "contract Reentrancy_cross_function {\n    mapping(address => uint) private userBalances;\n    mapping(address => bool) private locked;\n\n    function transfer(address to, uint amount) public {\n        require(userBalances[msg.sender] >= amount);\n        userBalances[to] += amount;\n        userBalances[msg.sender] -= amount;\n    }\n\n    function withdrawBalance() public {\n        require(!locked[msg.sender]);\n        uint amountToWithdraw = userBalances[msg.sender];\n        userBalances[msg.sender] = 0;\n        locked[msg.sender] = true;\n        require(msg.sender.call.value(amountToWithdraw)());\n        locked[msg.sender] = false;\n    }",
          "message": "Contract 'Reentrancy_cross_function' (patch_18.sol#3-21) is not in CapWords\n"
        }
      ]
    }
  }
}