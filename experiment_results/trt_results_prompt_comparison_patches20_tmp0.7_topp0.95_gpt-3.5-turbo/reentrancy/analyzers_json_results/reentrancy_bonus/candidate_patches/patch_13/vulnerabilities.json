{
  "smartbugs_completed": true,
  "analyzer_results": {
    "securify": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_5"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 23,
          "vulnerability_code": "    function getFirstWithdrawalBonus(address recipient) public {\n        require(!claimedBonus[recipient], \"Bonus already claimed.\");\n\n        rewardsForA[recipient] += 100;\n\n        claimedBonus[recipient] = true;\n        withdrawReward(msg.sender);",
          "message": "Reentrancy_bonus.getFirstWithdrawalBonus (patch_13.sol#16-23) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;",
          "message": "Detected issues with version pragma in patch_13.sol:\n\t- pragma solidity^0.5.0 (patch_13.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": 14,
          "vulnerability_code": "    function withdrawReward(address payable recipient) public {\n        uint amountToWithdraw = rewardsForA[recipient];\n        rewardsForA[recipient] = 0;\n        require(amountToWithdraw > 0, \"No reward balance to withdraw.\");\n        (bool success, ) = recipient.call.value(amountToWithdraw)(\"\");\n        require(success, \"Reward withdrawal failed.\");",
          "message": "Low level call in Reentrancy_bonus.withdrawReward (patch_13.sol#8-14):\n\t-(success) = recipient.call.value(amountToWithdraw)() patch_13.sol#12\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 24,
          "vulnerability_code": "contract Reentrancy_bonus {\n    mapping(address => uint) private userBalances;\n    mapping(address => bool) private claimedBonus;\n    mapping(address => uint) private rewardsForA;\n\n    function withdrawReward(address payable recipient) public {\n        uint amountToWithdraw = rewardsForA[recipient];\n        rewardsForA[recipient] = 0;\n        require(amountToWithdraw > 0, \"No reward balance to withdraw.\");\n        (bool success, ) = recipient.call.value(amountToWithdraw)(\"\");\n        require(success, \"Reward withdrawal failed.\");\n    }\n\n    function getFirstWithdrawalBonus(address recipient) public {\n        require(!claimedBonus[recipient], \"Bonus already claimed.\");\n\n        rewardsForA[recipient] += 100;\n\n        claimedBonus[recipient] = true;\n        withdrawReward(msg.sender);\n    }",
          "message": "Contract 'Reentrancy_bonus' (patch_13.sol#3-24) is not in CapWords\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint) private userBalances;",
          "message": "Reentrancy_bonus.userBalances (patch_13.sol#4) is never used in Reentrancy_bonus\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    }
  }
}