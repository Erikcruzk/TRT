/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.19;

contract ETH_FUND {
    mapping(address => uint) public balances;

    uint public MinDeposit = 1 ether;

    Log TransferLog;

    uint lastBlock;

    function ETH_FUND(address _log) public {
        TransferLog = Log(_log);
    }

    function Deposit() public payable {
        if (msg.value > MinDeposit) {
            balances[msg.sender] += msg.value;
            TransferLog.AddMessage(msg.sender, msg.value, "Deposit");
            lastBlock = block.number;
        }
    }

    function CashOut(uint _am) public payable {
        if (_am <= balances[msg.sender] && block.number > lastBlock) {
            if (msg.sender.call.value(_am)()) {
                balances[msg.sender] -= _am;
                TransferLog.AddMessage(msg.sender, _am, "CashOut");
            }
        }
    }

    function() public payable {}
}

contract Log {
    struct Message {
        address Sender;
        string Data;
        uint Val;
        uint Time;
    }

    Message[] public History;

    Message LastMsg;

    function AddMessage(address _adr, uint _val, string _data) public {
        LastMsg.Sender = _adr;
        LastMsg.Time = now;
        LastMsg.Val = _val;
        LastMsg.Data = _data;
        History.push(LastMsg);
    }
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.
{
  "securify": {
    "successfull_analysis": true,
    "errors": [],
    "vulnerability_findings": [
      {
        "name": "reentrancy",
        "vulnerability_from_line": null,
        "vulnerability_to_line": null,
        "vulnerability_code": null,
        "message": null
      }
    ]
  },
  "slither": {
    "successfull_analysis": true,
    "errors": [
      "EXIT_CODE_23"
    ],
    "vulnerability_findings": [
      {
        "name": "reentrancy",
        "vulnerability_from_line": 24,
        "vulnerability_to_line": 31,
        "vulnerability_code": "    function CashOut(uint _am) public payable {\n        if (_am <= balances[msg.sender] && block.number > lastBlock) {\n            if (msg.sender.call.value(_am)()) {\n                balances[msg.sender] -= _am;\n                TransferLog.AddMessage(msg.sender, _am, \"CashOut\");\n            }\n        }",
        "message": "Reentrancy in ETH_FUND.CashOut (0x941d225236464a25eb18076df7da6a91d0f95e9e.sol#24-31):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (0x941d225236464a25eb18076df7da6a91d0f95e9e.sol#26-29)\n\tState variables written after the call(s):\n\t- balances (0x941d225236464a25eb18076df7da6a91d0f95e9e.sol#27)\n"
      },
      {
        "name": "reentrancy",
        "vulnerability_from_line": 16,
        "vulnerability_to_line": 22,
        "vulnerability_code": "    function Deposit() public payable {\n        if (msg.value > MinDeposit) {\n            balances[msg.sender] += msg.value;\n            TransferLog.AddMessage(msg.sender, msg.value, \"Deposit\");\n            lastBlock = block.number;\n        }",
        "message": "Reentrancy in ETH_FUND.Deposit (0x941d225236464a25eb18076df7da6a91d0f95e9e.sol#16-22):\n\tExternal calls:\n\t- TransferLog.AddMessage(msg.sender,msg.value,Deposit) (0x941d225236464a25eb18076df7da6a91d0f95e9e.sol#19)\n\tState variables written after the call(s):\n\t- lastBlock (0x941d225236464a25eb18076df7da6a91d0f95e9e.sol#20)\n"
      }
    ]
  },
  "oyente": {
    "successfull_analysis": true,
    "errors": [],
    "vulnerability_findings": [
      {
        "name": "reentrancy",
        "vulnerability_from_line": 26,
        "vulnerability_to_line": null,
        "vulnerability_code": "            if (msg.sender.call.value(_am)()) {",
        "message": null
      }
    ]
  }
}

/// Repaired Solidity Smart Contract