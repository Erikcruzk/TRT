{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_27"
      ],
      "vulnerability_findings": [
        {
          "name": "shadowing-builtin",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": 63,
          "vulnerability_code": "        Message memory msg = Message({\n            Sender: _adr,\n            Time: now,\n            Val: _val,\n            Data: _data",
          "message": "LogFile.AddMessage.msg (local variable @ patch_4.sol#58-63) shadows built-in symbol \"msg\"\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 19,
          "vulnerability_code": "    function SetMinSum(uint _val) public {\n        require(!intitalized);\n        MinSum = _val;",
          "message": "ACCURAL_DEPOSIT.SetMinSum (patch_4.sol#16-19) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 24,
          "vulnerability_code": "    function SetLogFile(address _log) public {\n        require(!intitalized);\n        Log = LogFile(_log);",
          "message": "ACCURAL_DEPOSIT.SetLogFile (patch_4.sol#21-24) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": 28,
          "vulnerability_code": "    function Initialized() public {\n        intitalized = true;",
          "message": "ACCURAL_DEPOSIT.Initialized (patch_4.sol#26-28) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": 40,
          "vulnerability_code": "    function Collect(uint _am) public {\n        require(balances[msg.sender] >= MinSum && balances[msg.sender] >= _am);\n        balances[msg.sender] -= _am;\n        Log.AddMessage(msg.sender, _am, \"Collect\");\n        require(msg.sender.call.value(_am)());",
          "message": "ACCURAL_DEPOSIT.Collect (patch_4.sol#35-40) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": 44,
          "vulnerability_code": "    function() public payable {\n        Deposit();",
          "message": "ACCURAL_DEPOSIT.fallback (patch_4.sol#42-44) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": 65,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        Message memory msg = Message({\n            Sender: _adr,\n            Time: now,\n            Val: _val,\n            Data: _data\n        });\n        History.push(msg);",
          "message": "LogFile.AddMessage (patch_4.sol#57-65) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_4.sol:\n\t- pragma solidity^0.4.19 (patch_4.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": 40,
          "vulnerability_code": "    function Collect(uint _am) public {\n        require(balances[msg.sender] >= MinSum && balances[msg.sender] >= _am);\n        balances[msg.sender] -= _am;\n        Log.AddMessage(msg.sender, _am, \"Collect\");\n        require(msg.sender.call.value(_am)());",
          "message": "Low level call in ACCURAL_DEPOSIT.Collect (patch_4.sol#35-40):\n\t-require(bool)(msg.sender.call.value(_am)()) patch_4.sol#39\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 45,
          "vulnerability_code": "contract ACCURAL_DEPOSIT {\n    mapping(address => uint256) public balances;\n\n    uint public MinSum = 1 ether;\n\n    LogFile Log;\n\n    bool intitalized;\n\n    function ACCURAL_DEPOSIT(address _log) public {\n        Log = LogFile(_log);\n    }\n\n    function SetMinSum(uint _val) public {\n        require(!intitalized);\n        MinSum = _val;\n    }\n\n    function SetLogFile(address _log) public {\n        require(!intitalized);\n        Log = LogFile(_log);\n    }\n\n    function Initialized() public {\n        intitalized = true;\n    }\n\n    function Deposit() public payable {\n        balances[msg.sender] += msg.value;\n        Log.AddMessage(msg.sender, msg.value, \"Put\");\n    }\n\n    function Collect(uint _am) public {\n        require(balances[msg.sender] >= MinSum && balances[msg.sender] >= _am);\n        balances[msg.sender] -= _am;\n        Log.AddMessage(msg.sender, _am, \"Collect\");\n        require(msg.sender.call.value(_am)());\n    }\n\n    function() public payable {\n        Deposit();\n    }",
          "message": "Contract 'ACCURAL_DEPOSIT' (patch_4.sol#3-45) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": 14,
          "vulnerability_code": "    function ACCURAL_DEPOSIT(address _log) public {\n        Log = LogFile(_log);",
          "message": "Function 'ACCURAL_DEPOSIT.ACCURAL_DEPOSIT' (patch_4.sol#12-14) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ACCURAL_DEPOSIT(address _log) public {",
          "message": "Parameter '_log' of ACCURAL_DEPOSIT.ACCURAL_DEPOSIT (patch_4.sol#12) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 19,
          "vulnerability_code": "    function SetMinSum(uint _val) public {\n        require(!intitalized);\n        MinSum = _val;",
          "message": "Function 'ACCURAL_DEPOSIT.SetMinSum' (patch_4.sol#16-19) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function SetMinSum(uint _val) public {",
          "message": "Parameter '_val' of ACCURAL_DEPOSIT.SetMinSum (patch_4.sol#16) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 24,
          "vulnerability_code": "    function SetLogFile(address _log) public {\n        require(!intitalized);\n        Log = LogFile(_log);",
          "message": "Function 'ACCURAL_DEPOSIT.SetLogFile' (patch_4.sol#21-24) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function SetLogFile(address _log) public {",
          "message": "Parameter '_log' of ACCURAL_DEPOSIT.SetLogFile (patch_4.sol#21) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": 28,
          "vulnerability_code": "    function Initialized() public {\n        intitalized = true;",
          "message": "Function 'ACCURAL_DEPOSIT.Initialized' (patch_4.sol#26-28) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": 33,
          "vulnerability_code": "    function Deposit() public payable {\n        balances[msg.sender] += msg.value;\n        Log.AddMessage(msg.sender, msg.value, \"Put\");",
          "message": "Function 'ACCURAL_DEPOSIT.Deposit' (patch_4.sol#30-33) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": 40,
          "vulnerability_code": "    function Collect(uint _am) public {\n        require(balances[msg.sender] >= MinSum && balances[msg.sender] >= _am);\n        balances[msg.sender] -= _am;\n        Log.AddMessage(msg.sender, _am, \"Collect\");\n        require(msg.sender.call.value(_am)());",
          "message": "Function 'ACCURAL_DEPOSIT.Collect' (patch_4.sol#35-40) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Collect(uint _am) public {",
          "message": "Parameter '_am' of ACCURAL_DEPOSIT.Collect (patch_4.sol#35) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum = 1 ether;",
          "message": "Variable 'ACCURAL_DEPOSIT.MinSum' (patch_4.sol#6) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    LogFile Log;",
          "message": "Variable 'ACCURAL_DEPOSIT.Log' (patch_4.sol#8) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": 65,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        Message memory msg = Message({\n            Sender: _adr,\n            Time: now,\n            Val: _val,\n            Data: _data\n        });\n        History.push(msg);",
          "message": "Function 'LogFile.AddMessage' (patch_4.sol#57-65) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of LogFile.AddMessage (patch_4.sol#57) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of LogFile.AddMessage (patch_4.sol#57) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of LogFile.AddMessage (patch_4.sol#57) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": "Variable 'LogFile.History' (patch_4.sol#55) is not in mixedCase\n"
        }
      ]
    },
    "securify": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "MissingInputValidation",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "TODTransfer",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": null
        }
      ]
    }
  }
}