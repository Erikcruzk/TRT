{
  "smartbugs_completed": true,
  "analyzer_results": {
    "securify": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_3"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": 10,
          "vulnerability_code": "    function withdrawBalance() public {\n        uint amountToWithdraw = userBalances[msg.sender];\n        userBalances[msg.sender] = 0;\n        require(msg.sender.call.value(amountToWithdraw)());",
          "message": "Reentrancy_secure.withdrawBalance (patch_6.sol#6-10) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": 10,
          "vulnerability_code": "    function withdrawBalance() public {\n        uint amountToWithdraw = userBalances[msg.sender];\n        userBalances[msg.sender] = 0;\n        require(msg.sender.call.value(amountToWithdraw)());",
          "message": "Low level call in Reentrancy_secure.withdrawBalance (patch_6.sol#6-10):\n\t-require(bool)(msg.sender.call.value(amountToWithdraw)()) patch_6.sol#9\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 11,
          "vulnerability_code": "contract Reentrancy_secure {\n    mapping(address => uint) private userBalances;\n\n    function withdrawBalance() public {\n        uint amountToWithdraw = userBalances[msg.sender];\n        userBalances[msg.sender] = 0;\n        require(msg.sender.call.value(amountToWithdraw)());\n    }",
          "message": "Contract 'Reentrancy_secure' (patch_6.sol#3-11) is not in CapWords\n"
        }
      ]
    }
  }
}