{
  "smartbugs_completed": true,
  "analyzer_results": {
    "securify": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "DAO",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "        userBalances[msg.sender] += msg.value;",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_6"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 14,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!locked[msg.sender]); // check if already locked\n        locked[msg.sender] = true; // lock the function\n        uint amountToWithdraw = userBalances[msg.sender];\n        userBalances[msg.sender] = 0; // update state before external call\n        require(msg.sender.call.value(amountToWithdraw)()); // use 'call' to prevent reentrancy\n        locked[msg.sender] = false; // unlock the function",
          "message": "Reentrancy in Reentrancy_secure.withdrawBalance (patch_8.sol#7-14):\n\tExternal calls:\n\t- require(bool)(msg.sender.call.value(amountToWithdraw)()) (patch_8.sol#12)\n\tState variables written after the call(s):\n\t- locked (patch_8.sol#13)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 14,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!locked[msg.sender]); // check if already locked\n        locked[msg.sender] = true; // lock the function\n        uint amountToWithdraw = userBalances[msg.sender];\n        userBalances[msg.sender] = 0; // update state before external call\n        require(msg.sender.call.value(amountToWithdraw)()); // use 'call' to prevent reentrancy\n        locked[msg.sender] = false; // unlock the function",
          "message": "Reentrancy_secure.withdrawBalance (patch_8.sol#7-14) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 18,
          "vulnerability_code": "    function deposit() public payable {\n        userBalances[msg.sender] += msg.value;",
          "message": "Reentrancy_secure.deposit (patch_8.sol#16-18) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": 22,
          "vulnerability_code": "    function getBalance() public view returns (uint) {\n        return userBalances[msg.sender];",
          "message": "Reentrancy_secure.getBalance (patch_8.sol#20-22) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 14,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!locked[msg.sender]); // check if already locked\n        locked[msg.sender] = true; // lock the function\n        uint amountToWithdraw = userBalances[msg.sender];\n        userBalances[msg.sender] = 0; // update state before external call\n        require(msg.sender.call.value(amountToWithdraw)()); // use 'call' to prevent reentrancy\n        locked[msg.sender] = false; // unlock the function",
          "message": "Low level call in Reentrancy_secure.withdrawBalance (patch_8.sol#7-14):\n\t-require(bool)(msg.sender.call.value(amountToWithdraw)()) patch_8.sol#12\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 23,
          "vulnerability_code": "contract Reentrancy_secure {\n    mapping(address => uint) private userBalances;\n    mapping(address => bool) private locked;\n\n    function withdrawBalance() public {\n        require(!locked[msg.sender]); // check if already locked\n        locked[msg.sender] = true; // lock the function\n        uint amountToWithdraw = userBalances[msg.sender];\n        userBalances[msg.sender] = 0; // update state before external call\n        require(msg.sender.call.value(amountToWithdraw)()); // use 'call' to prevent reentrancy\n        locked[msg.sender] = false; // unlock the function\n    }\n\n    function deposit() public payable {\n        userBalances[msg.sender] += msg.value;\n    }\n\n    function getBalance() public view returns (uint) {\n        return userBalances[msg.sender];\n    }",
          "message": "Contract 'Reentrancy_secure' (patch_8.sol#3-23) is not in CapWords\n"
        }
      ]
    }
  }
}