{
  "smartbugs_completed": true,
  "analyzer_results": {
    "securify": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "DAO",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_5"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 15,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!locked[msg.sender]); // Check if the sender is already in the withdraw process\n        uint amountToWithdraw = userBalances[msg.sender];\n        require(amountToWithdraw > 0); // Check if the user has balance to withdraw\n        locked[msg.sender] = true; // Lock the sender\n        userBalances[msg.sender] = 0; // Set the balance to 0 before sending the funds\n        require(msg.sender.call.value(amountToWithdraw)()); // Send the funds\n        locked[msg.sender] = false; // Unlock the sender",
          "message": "Reentrancy in Reentrancy_secure.withdrawBalance (patch_0.sol#7-15):\n\tExternal calls:\n\t- require(bool)(msg.sender.call.value(amountToWithdraw)()) (patch_0.sol#13)\n\tState variables written after the call(s):\n\t- locked (patch_0.sol#14)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 15,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!locked[msg.sender]); // Check if the sender is already in the withdraw process\n        uint amountToWithdraw = userBalances[msg.sender];\n        require(amountToWithdraw > 0); // Check if the user has balance to withdraw\n        locked[msg.sender] = true; // Lock the sender\n        userBalances[msg.sender] = 0; // Set the balance to 0 before sending the funds\n        require(msg.sender.call.value(amountToWithdraw)()); // Send the funds\n        locked[msg.sender] = false; // Unlock the sender",
          "message": "Reentrancy_secure.withdrawBalance (patch_0.sol#7-15) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;",
          "message": "Detected issues with version pragma in patch_0.sol:\n\t- pragma solidity^0.4.0 (patch_0.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 15,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!locked[msg.sender]); // Check if the sender is already in the withdraw process\n        uint amountToWithdraw = userBalances[msg.sender];\n        require(amountToWithdraw > 0); // Check if the user has balance to withdraw\n        locked[msg.sender] = true; // Lock the sender\n        userBalances[msg.sender] = 0; // Set the balance to 0 before sending the funds\n        require(msg.sender.call.value(amountToWithdraw)()); // Send the funds\n        locked[msg.sender] = false; // Unlock the sender",
          "message": "Low level call in Reentrancy_secure.withdrawBalance (patch_0.sol#7-15):\n\t-require(bool)(msg.sender.call.value(amountToWithdraw)()) patch_0.sol#13\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 16,
          "vulnerability_code": "contract Reentrancy_secure {\n    mapping(address => uint) private userBalances;\n    mapping(address => bool) private locked;\n\n    function withdrawBalance() public {\n        require(!locked[msg.sender]); // Check if the sender is already in the withdraw process\n        uint amountToWithdraw = userBalances[msg.sender];\n        require(amountToWithdraw > 0); // Check if the user has balance to withdraw\n        locked[msg.sender] = true; // Lock the sender\n        userBalances[msg.sender] = 0; // Set the balance to 0 before sending the funds\n        require(msg.sender.call.value(amountToWithdraw)()); // Send the funds\n        locked[msg.sender] = false; // Unlock the sender\n    }",
          "message": "Contract 'Reentrancy_secure' (patch_0.sol#3-16) is not in CapWords\n"
        }
      ]
    }
  }
}