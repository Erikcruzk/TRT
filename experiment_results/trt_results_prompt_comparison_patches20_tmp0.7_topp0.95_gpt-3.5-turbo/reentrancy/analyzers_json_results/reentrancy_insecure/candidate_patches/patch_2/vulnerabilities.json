{
  "smartbugs_completed": true,
  "analyzer_results": {
    "securify": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "DAO",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "        userBalances[msg.sender] += msg.value;",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_6"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 17,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!reentrancyLock[msg.sender]);\n        uint amountToWithdraw = userBalances[msg.sender];\n        require(amountToWithdraw > 0);\n\n        reentrancyLock[msg.sender] = true;\n        userBalances[msg.sender] = 0;\n\n        require(msg.sender.call.value(amountToWithdraw)(\"\"));\n        reentrancyLock[msg.sender] = false;",
          "message": "Reentrancy in Reentrancy_secure.withdrawBalance (patch_2.sol#7-17):\n\tExternal calls:\n\t- require(bool)(msg.sender.call.value(amountToWithdraw)()) (patch_2.sol#15)\n\tState variables written after the call(s):\n\t- reentrancyLock (patch_2.sol#16)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 17,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!reentrancyLock[msg.sender]);\n        uint amountToWithdraw = userBalances[msg.sender];\n        require(amountToWithdraw > 0);\n\n        reentrancyLock[msg.sender] = true;\n        userBalances[msg.sender] = 0;\n\n        require(msg.sender.call.value(amountToWithdraw)(\"\"));\n        reentrancyLock[msg.sender] = false;",
          "message": "Reentrancy_secure.withdrawBalance (patch_2.sol#7-17) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": 21,
          "vulnerability_code": "    function depositBalance() public payable {\n        userBalances[msg.sender] += msg.value;",
          "message": "Reentrancy_secure.depositBalance (patch_2.sol#19-21) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": 25,
          "vulnerability_code": "    function getBalance() public view returns (uint) {\n        return userBalances[msg.sender];",
          "message": "Reentrancy_secure.getBalance (patch_2.sol#23-25) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 17,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!reentrancyLock[msg.sender]);\n        uint amountToWithdraw = userBalances[msg.sender];\n        require(amountToWithdraw > 0);\n\n        reentrancyLock[msg.sender] = true;\n        userBalances[msg.sender] = 0;\n\n        require(msg.sender.call.value(amountToWithdraw)(\"\"));\n        reentrancyLock[msg.sender] = false;",
          "message": "Low level call in Reentrancy_secure.withdrawBalance (patch_2.sol#7-17):\n\t-require(bool)(msg.sender.call.value(amountToWithdraw)()) patch_2.sol#15\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 26,
          "vulnerability_code": "contract Reentrancy_secure {\n    mapping(address => uint) private userBalances;\n    mapping(address => bool) private reentrancyLock;\n\n    function withdrawBalance() public {\n        require(!reentrancyLock[msg.sender]);\n        uint amountToWithdraw = userBalances[msg.sender];\n        require(amountToWithdraw > 0);\n\n        reentrancyLock[msg.sender] = true;\n        userBalances[msg.sender] = 0;\n\n        require(msg.sender.call.value(amountToWithdraw)(\"\"));\n        reentrancyLock[msg.sender] = false;\n    }\n\n    function depositBalance() public payable {\n        userBalances[msg.sender] += msg.value;\n    }\n\n    function getBalance() public view returns (uint) {\n        return userBalances[msg.sender];\n    }",
          "message": "Contract 'Reentrancy_secure' (patch_2.sol#3-26) is not in CapWords\n"
        }
      ]
    }
  }
}