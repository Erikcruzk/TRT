{
  "smartbugs_completed": true,
  "analyzer_results": {
    "securify": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "DAO",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_5"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": 12,
          "vulnerability_code": "    function withdrawBalance() public {\n        uint amountToWithdraw = userBalances[msg.sender];\n\n        (bool success, ) = msg.sender.call.value(amountToWithdraw)(\"\");\n        require(success);\n        userBalances[msg.sender] = 0;",
          "message": "Reentrancy in Reentrancy_insecure.withdrawBalance (reentrancy_insecure.sol#6-12):\n\tExternal calls:\n\t- (success) = msg.sender.call.value(amountToWithdraw)() (reentrancy_insecure.sol#9)\n\tState variables written after the call(s):\n\t- userBalances (reentrancy_insecure.sol#11)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": 12,
          "vulnerability_code": "    function withdrawBalance() public {\n        uint amountToWithdraw = userBalances[msg.sender];\n\n        (bool success, ) = msg.sender.call.value(amountToWithdraw)(\"\");\n        require(success);\n        userBalances[msg.sender] = 0;",
          "message": "Reentrancy_insecure.withdrawBalance (reentrancy_insecure.sol#6-12) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;",
          "message": "Detected issues with version pragma in reentrancy_insecure.sol:\n\t- pragma solidity^0.4.0 (reentrancy_insecure.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": 12,
          "vulnerability_code": "    function withdrawBalance() public {\n        uint amountToWithdraw = userBalances[msg.sender];\n\n        (bool success, ) = msg.sender.call.value(amountToWithdraw)(\"\");\n        require(success);\n        userBalances[msg.sender] = 0;",
          "message": "Low level call in Reentrancy_insecure.withdrawBalance (reentrancy_insecure.sol#6-12):\n\t-(success) = msg.sender.call.value(amountToWithdraw)() reentrancy_insecure.sol#9\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 13,
          "vulnerability_code": "contract Reentrancy_insecure {\n    mapping(address => uint) private userBalances;\n\n    function withdrawBalance() public {\n        uint amountToWithdraw = userBalances[msg.sender];\n\n        (bool success, ) = msg.sender.call.value(amountToWithdraw)(\"\");\n        require(success);\n        userBalances[msg.sender] = 0;\n    }",
          "message": "Contract 'Reentrancy_insecure' (reentrancy_insecure.sol#3-13) is not in CapWords\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Callstack Depth Attack Vulnerability",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = msg.sender.call.value(amountToWithdraw)(\"\");",
          "message": null
        },
        {
          "name": "Re-Entrancy Vulnerability",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = msg.sender.call.value(amountToWithdraw)(\"\");",
          "message": null
        }
      ]
    }
  }
}