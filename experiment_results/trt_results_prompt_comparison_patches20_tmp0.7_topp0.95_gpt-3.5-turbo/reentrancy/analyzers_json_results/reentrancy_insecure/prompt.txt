/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.0;

contract Reentrancy_insecure {
    mapping(address => uint) private userBalances;

    function withdrawBalance() public {
        uint amountToWithdraw = userBalances[msg.sender];

        (bool success, ) = msg.sender.call.value(amountToWithdraw)("");
        require(success);
        userBalances[msg.sender] = 0;
    }
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.
{
  "securify": {
    "successfull_analysis": true,
    "errors": [],
    "vulnerability_findings": [
      {
        "name": "reentrancy",
        "vulnerability_from_line": null,
        "vulnerability_to_line": null,
        "vulnerability_code": null,
        "message": null
      }
    ]
  },
  "slither": {
    "successfull_analysis": true,
    "errors": [
      "EXIT_CODE_5"
    ],
    "vulnerability_findings": [
      {
        "name": "reentrancy",
        "vulnerability_from_line": 6,
        "vulnerability_to_line": 12,
        "vulnerability_code": "    function withdrawBalance() public {\n        uint amountToWithdraw = userBalances[msg.sender];\n\n        (bool success, ) = msg.sender.call.value(amountToWithdraw)(\"\");\n        require(success);\n        userBalances[msg.sender] = 0;",
        "message": "Reentrancy in Reentrancy_insecure.withdrawBalance (reentrancy_insecure.sol#6-12):\n\tExternal calls:\n\t- (success) = msg.sender.call.value(amountToWithdraw)() (reentrancy_insecure.sol#9)\n\tState variables written after the call(s):\n\t- userBalances (reentrancy_insecure.sol#11)\n"
      }
    ]
  },
  "oyente": {
    "successfull_analysis": true,
    "errors": [],
    "vulnerability_findings": [
      {
        "name": "reentrancy",
        "vulnerability_from_line": 9,
        "vulnerability_to_line": null,
        "vulnerability_code": "        (bool success, ) = msg.sender.call.value(amountToWithdraw)(\"\");",
        "message": null
      }
    ]
  }
}

/// Repaired Solidity Smart Contract