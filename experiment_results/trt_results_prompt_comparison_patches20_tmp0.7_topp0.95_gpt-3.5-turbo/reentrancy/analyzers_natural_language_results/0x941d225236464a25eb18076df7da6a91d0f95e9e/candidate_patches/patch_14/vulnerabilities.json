{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": null
        }
      ]
    },
    "securify": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "TODTransfer",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "DAO",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "MissingInputValidation",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_21"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": 31,
          "vulnerability_code": "    function Deposit() public payable noReentrancy {\n        if (msg.value > MinDeposit) {\n            balances[msg.sender] += msg.value;\n            TransferLog.AddMessage(msg.sender, msg.value, \"Deposit\");\n            lastBlock = block.number;\n        }",
          "message": "Reentrancy in ETH_FUND.Deposit (patch_14.sol#25-31):\n\tExternal calls:\n\t- TransferLog.AddMessage(msg.sender,msg.value,Deposit) (patch_14.sol#28)\n\tState variables written after the call(s):\n\t- lastBlock (patch_14.sol#29)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinDeposit = 1 ether;",
          "message": "ETH_FUND.MinDeposit should be constant (patch_14.sol#6)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": 31,
          "vulnerability_code": "    function Deposit() public payable noReentrancy {\n        if (msg.value > MinDeposit) {\n            balances[msg.sender] += msg.value;\n            TransferLog.AddMessage(msg.sender, msg.value, \"Deposit\");\n            lastBlock = block.number;\n        }",
          "message": "ETH_FUND.Deposit (patch_14.sol#25-31) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": 42,
          "vulnerability_code": "    function CashOut(uint _am) public payable noReentrancy {\n        if (_am <= balances[msg.sender] && block.number > lastBlock) {\n            balances[msg.sender] -= _am;\n            if (msg.sender.call.value(_am)()) {\n                TransferLog.AddMessage(msg.sender, _am, \"CashOut\");\n            } else {\n                balances[msg.sender] += _am;\n            }\n        }",
          "message": "ETH_FUND.CashOut (patch_14.sol#33-42) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() public payable {}",
          "message": "ETH_FUND.fallback (patch_14.sol#44) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": 66,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        Message memory lastMsg = Message({\n            Sender: _adr,\n            Val: _val,\n            Data: _data,\n            Time: now\n        });\n        History.push(lastMsg);",
          "message": "Log.AddMessage (patch_14.sol#58-66) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_14.sol:\n\t- pragma solidity^0.4.19 (patch_14.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": 42,
          "vulnerability_code": "    function CashOut(uint _am) public payable noReentrancy {\n        if (_am <= balances[msg.sender] && block.number > lastBlock) {\n            balances[msg.sender] -= _am;\n            if (msg.sender.call.value(_am)()) {\n                TransferLog.AddMessage(msg.sender, _am, \"CashOut\");\n            } else {\n                balances[msg.sender] += _am;\n            }\n        }",
          "message": "Low level call in ETH_FUND.CashOut (patch_14.sol#33-42):\n\t-msg.sender.call.value(_am)() patch_14.sol#36-40\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 46,
          "vulnerability_code": "contract ETH_FUND {\n    mapping(address => uint) public balances;\n\n    uint public MinDeposit = 1 ether;\n\n    Log TransferLog;\n\n    uint lastBlock;\n\n    bool locked;\n\n    modifier noReentrancy() {\n        require(!locked);\n        locked = true;\n        _;\n        locked = false;\n    }\n\n    function ETH_FUND(address _log) public {\n        TransferLog = Log(_log);\n    }\n\n    function Deposit() public payable noReentrancy {\n        if (msg.value > MinDeposit) {\n            balances[msg.sender] += msg.value;\n            TransferLog.AddMessage(msg.sender, msg.value, \"Deposit\");\n            lastBlock = block.number;\n        }\n    }\n\n    function CashOut(uint _am) public payable noReentrancy {\n        if (_am <= balances[msg.sender] && block.number > lastBlock) {\n            balances[msg.sender] -= _am;\n            if (msg.sender.call.value(_am)()) {\n                TransferLog.AddMessage(msg.sender, _am, \"CashOut\");\n            } else {\n                balances[msg.sender] += _am;\n            }\n        }\n    }\n\n    function() public payable {}\n",
          "message": "Contract 'ETH_FUND' (patch_14.sol#3-46) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 23,
          "vulnerability_code": "    function ETH_FUND(address _log) public {\n        TransferLog = Log(_log);",
          "message": "Function 'ETH_FUND.ETH_FUND' (patch_14.sol#21-23) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ETH_FUND(address _log) public {",
          "message": "Parameter '_log' of ETH_FUND.ETH_FUND (patch_14.sol#21) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": 31,
          "vulnerability_code": "    function Deposit() public payable noReentrancy {\n        if (msg.value > MinDeposit) {\n            balances[msg.sender] += msg.value;\n            TransferLog.AddMessage(msg.sender, msg.value, \"Deposit\");\n            lastBlock = block.number;\n        }",
          "message": "Function 'ETH_FUND.Deposit' (patch_14.sol#25-31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": 42,
          "vulnerability_code": "    function CashOut(uint _am) public payable noReentrancy {\n        if (_am <= balances[msg.sender] && block.number > lastBlock) {\n            balances[msg.sender] -= _am;\n            if (msg.sender.call.value(_am)()) {\n                TransferLog.AddMessage(msg.sender, _am, \"CashOut\");\n            } else {\n                balances[msg.sender] += _am;\n            }\n        }",
          "message": "Function 'ETH_FUND.CashOut' (patch_14.sol#33-42) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function CashOut(uint _am) public payable noReentrancy {",
          "message": "Parameter '_am' of ETH_FUND.CashOut (patch_14.sol#33) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinDeposit = 1 ether;",
          "message": "Variable 'ETH_FUND.MinDeposit' (patch_14.sol#6) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Log TransferLog;",
          "message": "Variable 'ETH_FUND.TransferLog' (patch_14.sol#8) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": 66,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        Message memory lastMsg = Message({\n            Sender: _adr,\n            Val: _val,\n            Data: _data,\n            Time: now\n        });\n        History.push(lastMsg);",
          "message": "Function 'Log.AddMessage' (patch_14.sol#58-66) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of Log.AddMessage (patch_14.sol#58) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of Log.AddMessage (patch_14.sol#58) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of Log.AddMessage (patch_14.sol#58) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": "Variable 'Log.History' (patch_14.sol#56) is not in mixedCase\n"
        }
      ]
    }
  }
}