{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_5"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 19,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!locked[msg.sender]); // Check if user is not already in a withdrawal process\n        uint amountToWithdraw = userBalances[msg.sender];\n        locked[msg.sender] = true; // Lock the user's account\n\n        require(amountToWithdraw > 0); // Check if the user has balance to withdraw\n\n        userBalances[msg.sender] = 0; // Update the user's balance to 0 before transferring\n        (bool success, ) = msg.sender.call.value(amountToWithdraw)(\"\");\n        require(success); // Check if transfer was successful\n\n        locked[msg.sender] = false; // Unlock the user's account",
          "message": "Reentrancy in Reentrancy_secure.withdrawBalance (patch_17.sol#7-19):\n\tExternal calls:\n\t- (success) = msg.sender.call.value(amountToWithdraw)() (patch_17.sol#15)\n\tState variables written after the call(s):\n\t- locked (patch_17.sol#18)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 19,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!locked[msg.sender]); // Check if user is not already in a withdrawal process\n        uint amountToWithdraw = userBalances[msg.sender];\n        locked[msg.sender] = true; // Lock the user's account\n\n        require(amountToWithdraw > 0); // Check if the user has balance to withdraw\n\n        userBalances[msg.sender] = 0; // Update the user's balance to 0 before transferring\n        (bool success, ) = msg.sender.call.value(amountToWithdraw)(\"\");\n        require(success); // Check if transfer was successful\n\n        locked[msg.sender] = false; // Unlock the user's account",
          "message": "Reentrancy_secure.withdrawBalance (patch_17.sol#7-19) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;",
          "message": "Detected issues with version pragma in patch_17.sol:\n\t- pragma solidity^0.4.0 (patch_17.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 19,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!locked[msg.sender]); // Check if user is not already in a withdrawal process\n        uint amountToWithdraw = userBalances[msg.sender];\n        locked[msg.sender] = true; // Lock the user's account\n\n        require(amountToWithdraw > 0); // Check if the user has balance to withdraw\n\n        userBalances[msg.sender] = 0; // Update the user's balance to 0 before transferring\n        (bool success, ) = msg.sender.call.value(amountToWithdraw)(\"\");\n        require(success); // Check if transfer was successful\n\n        locked[msg.sender] = false; // Unlock the user's account",
          "message": "Low level call in Reentrancy_secure.withdrawBalance (patch_17.sol#7-19):\n\t-(success) = msg.sender.call.value(amountToWithdraw)() patch_17.sol#15\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 20,
          "vulnerability_code": "contract Reentrancy_secure {\n    mapping(address => uint) private userBalances;\n    mapping(address => bool) private locked;\n\n    function withdrawBalance() public {\n        require(!locked[msg.sender]); // Check if user is not already in a withdrawal process\n        uint amountToWithdraw = userBalances[msg.sender];\n        locked[msg.sender] = true; // Lock the user's account\n\n        require(amountToWithdraw > 0); // Check if the user has balance to withdraw\n\n        userBalances[msg.sender] = 0; // Update the user's balance to 0 before transferring\n        (bool success, ) = msg.sender.call.value(amountToWithdraw)(\"\");\n        require(success); // Check if transfer was successful\n\n        locked[msg.sender] = false; // Unlock the user's account\n    }",
          "message": "Contract 'Reentrancy_secure' (patch_17.sol#3-20) is not in CapWords\n"
        }
      ]
    },
    "securify": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "DAO",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Callstack Depth Attack Vulnerability",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = msg.sender.call.value(amountToWithdraw)(\"\");",
          "message": null
        }
      ]
    }
  }
}