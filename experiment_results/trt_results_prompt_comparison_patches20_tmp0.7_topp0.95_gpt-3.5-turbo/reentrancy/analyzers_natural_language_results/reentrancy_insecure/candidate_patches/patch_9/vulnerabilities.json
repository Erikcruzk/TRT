{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_3"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 19,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!locked[msg.sender]); // Check if the user is already in the process of withdrawing\n        uint amountToWithdraw = userBalances[msg.sender];\n        require(amountToWithdraw > 0); // Check if the user has any balance to withdraw\n\n        locked[msg.sender] = true; // Lock the user to prevent reentrancy\n        userBalances[msg.sender] = 0; // Update the user balance before transfer\n\n        bool success = msg.sender.send(amountToWithdraw); // Use send() instead of call.value() to prevent reentrancy\n        require(success);\n\n        locked[msg.sender] = false; // Unlock the user after successful transfer",
          "message": "Reentrancy_secure.withdrawBalance (patch_9.sol#7-19) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;",
          "message": "Detected issues with version pragma in patch_9.sol:\n\t- pragma solidity^0.4.0 (patch_9.sol#1): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 20,
          "vulnerability_code": "contract Reentrancy_secure {\n    mapping(address => uint) private userBalances;\n    mapping(address => bool) private locked;\n\n    function withdrawBalance() public {\n        require(!locked[msg.sender]); // Check if the user is already in the process of withdrawing\n        uint amountToWithdraw = userBalances[msg.sender];\n        require(amountToWithdraw > 0); // Check if the user has any balance to withdraw\n\n        locked[msg.sender] = true; // Lock the user to prevent reentrancy\n        userBalances[msg.sender] = 0; // Update the user balance before transfer\n\n        bool success = msg.sender.send(amountToWithdraw); // Use send() instead of call.value() to prevent reentrancy\n        require(success);\n\n        locked[msg.sender] = false; // Unlock the user after successful transfer\n    }",
          "message": "Contract 'Reentrancy_secure' (patch_9.sol#3-20) is not in CapWords\n"
        }
      ]
    },
    "securify": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "DAOConstantGas",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Callstack Depth Attack Vulnerability",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool success = msg.sender.send(amountToWithdraw); // Use send() instead of call.value() to prevent reentrancy",
          "message": null
        }
      ]
    }
  }
}