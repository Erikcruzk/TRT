/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.0;

contract EtherBank {
    mapping(address => uint) userBalances;

    function getBalance(address user) constant returns (uint) {
        return userBalances[user];
    }

    function addToBalance() {
        userBalances[msg.sender] += msg.value;
    }

    function withdrawBalance() {
        uint amountToWithdraw = userBalances[msg.sender];

        if (!(msg.sender.call.value(amountToWithdraw)())) {
            throw;
        }
        userBalances[msg.sender] = 0;
    }
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.

/// 1. Slither Analysis Results
/// 1.1. Vulnerability: reentrancy at Line 14-21:
    function withdrawBalance() {
        uint amountToWithdraw = userBalances[msg.sender];

        if (!(msg.sender.call.value(amountToWithdraw)())) {
            throw;
        }
        userBalances[msg.sender] = 0;
///  Message:Reentrancy in EtherBank.withdrawBalance (etherbank.sol#14-21):
///   	External calls:
///   	- ! (msg.sender.call.value(amountToWithdraw)()) (etherbank.sol#17-19)
///   	State variables written after the call(s):
///   	- userBalances (etherbank.sol#20)


/// 2. Securify Analysis Results
/// 2.1. Vulnerability: reentrancy


/// 3. Oyente Analysis Results
/// 3.1. Vulnerability: reentrancy at Line 17:
        if (!(msg.sender.call.value(amountToWithdraw)())) {



/// Repaired Solidity Smart Contract