{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_17"
      ],
      "vulnerability_findings": [
        {
          "name": "constable-states",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum = 1 ether;",
          "message": "WALLET.MinSum should be constant (patch_8.sol#36)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": 21,
          "vulnerability_code": "    function Collect(uint _am) public {\n        require(_am > 0);\n        var acc = Acc[msg.sender];\n        require(acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime);\n        acc.balance -= _am;\n        if (msg.sender.call.value(_am)()) {\n            LogFile.AddMessage(msg.sender, _am, \"Collect\");\n        } else {\n            acc.balance += _am;\n            revert();\n        }",
          "message": "WALLET.Collect (patch_8.sol#10-21) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": 25,
          "vulnerability_code": "    function() public payable {\n        Put(0);",
          "message": "WALLET.fallback (patch_8.sol#23-25) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": 55,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        History.push(Message(_adr, _data, _val, now));",
          "message": "Log.AddMessage (patch_8.sol#53-55) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": 21,
          "vulnerability_code": "    function Collect(uint _am) public {\n        require(_am > 0);\n        var acc = Acc[msg.sender];\n        require(acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime);\n        acc.balance -= _am;\n        if (msg.sender.call.value(_am)()) {\n            LogFile.AddMessage(msg.sender, _am, \"Collect\");\n        } else {\n            acc.balance += _am;\n            revert();\n        }",
          "message": "Low level call in WALLET.Collect (patch_8.sol#10-21):\n\t-msg.sender.call.value(_am)() patch_8.sol#15-20\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": 8,
          "vulnerability_code": "    function Put(uint _unlockTime) public payable {\n        Acc[msg.sender].balance += msg.value;\n        Acc[msg.sender].unlockTime = _unlockTime > now ? _unlockTime : now;\n        LogFile.AddMessage(msg.sender, msg.value, \"Put\");",
          "message": "Function 'WALLET.Put' (patch_8.sol#4-8) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Put(uint _unlockTime) public payable {",
          "message": "Parameter '_unlockTime' of WALLET.Put (patch_8.sol#4) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": 21,
          "vulnerability_code": "    function Collect(uint _am) public {\n        require(_am > 0);\n        var acc = Acc[msg.sender];\n        require(acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime);\n        acc.balance -= _am;\n        if (msg.sender.call.value(_am)()) {\n            LogFile.AddMessage(msg.sender, _am, \"Collect\");\n        } else {\n            acc.balance += _am;\n            revert();\n        }",
          "message": "Function 'WALLET.Collect' (patch_8.sol#10-21) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Collect(uint _am) public {",
          "message": "Parameter '_am' of WALLET.Collect (patch_8.sol#10) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => Holder) public Acc;",
          "message": "Variable 'WALLET.Acc' (patch_8.sol#32) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Log LogFile;",
          "message": "Variable 'WALLET.LogFile' (patch_8.sol#34) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum = 1 ether;",
          "message": "Variable 'WALLET.MinSum' (patch_8.sol#36) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": 55,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        History.push(Message(_adr, _data, _val, now));",
          "message": "Function 'Log.AddMessage' (patch_8.sol#53-55) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of Log.AddMessage (patch_8.sol#53) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of Log.AddMessage (patch_8.sol#53) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of Log.AddMessage (patch_8.sol#53) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": "Variable 'Log.History' (patch_8.sol#51) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => Holder) public Acc;",
          "message": null
        },
        {
          "name": "Timestamp Dependency",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime);",
          "message": null
        }
      ]
    },
    "securify": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "MissingInputValidation",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "DAO",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    }
  }
}