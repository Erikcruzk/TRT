/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.19;

contract MONEY_BOX {
    struct Holder {
        uint unlockTime;
        uint balance;
    }

    mapping(address => Holder) public Acc;

    uint public MinSum;

    Log LogFile;

    bool intitalized;

    function SetMinSum(uint _val) public {
        if (intitalized) throw;
        MinSum = _val;
    }

    function SetLogFile(address _log) public {
        if (intitalized) throw;
        LogFile = Log(_log);
    }

    function Initialized() public {
        intitalized = true;
    }

    function Put(uint _lockTime) public payable {
        var acc = Acc[msg.sender];
        acc.balance += msg.value;
        if (now + _lockTime > acc.unlockTime) acc.unlockTime = now + _lockTime;
        LogFile.AddMessage(msg.sender, msg.value, "Put");
    }

    function Collect(uint _am) public payable {
        var acc = Acc[msg.sender];
        if (
            acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime
        ) {
            if (msg.sender.call.value(_am)()) {
                acc.balance -= _am;
                LogFile.AddMessage(msg.sender, _am, "Collect");
            }
        }
    }

    function() public payable {
        Put(0);
    }
}

contract Log {
    struct Message {
        address Sender;
        string Data;
        uint Val;
        uint Time;
    }

    Message[] public History;

    Message LastMsg;

    function AddMessage(address _adr, uint _val, string _data) public {
        LastMsg.Sender = _adr;
        LastMsg.Time = now;
        LastMsg.Val = _val;
        LastMsg.Data = _data;
        History.push(LastMsg);
    }
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.

/// 1. Slither Analysis Results
/// 1.1. Vulnerability: reentrancy at Line 38-48:
    function Collect(uint _am) public payable {
        var acc = Acc[msg.sender];
        if (
            acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime
        ) {
            if (msg.sender.call.value(_am)()) {
                acc.balance -= _am;
                LogFile.AddMessage(msg.sender, _am, "Collect");
            }
        }
///  Message:Reentrancy in MONEY_BOX.Collect (0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol#38-48):
///   	External calls:
///   	- msg.sender.call.value(_am)() (0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol#43-46)
///   	State variables written after the call(s):
///   	- Acc (0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol#44)


/// 2. Securify Analysis Results
/// 2.1. Vulnerability: reentrancy


/// 3. Oyente Analysis Results
/// 3.1. Vulnerability: reentrancy at Line 43:
            if (msg.sender.call.value(_am)()) {



/// Repaired Solidity Smart Contract