{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "        acc.isLocked = false;",
          "message": null
        },
        {
          "name": "Timestamp Dependency",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "            acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime && !acc.isLocked,",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_21"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": 39,
          "vulnerability_code": "    function Collect(uint _am) public {\n        Holder storage acc = Acc[msg.sender];\n        require(\n            acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime && !acc.isLocked,\n            \"Insufficient balance or locked account\"\n        );\n        acc.isLocked = true;\n        if (msg.sender.call.value(_am)()) {\n            acc.balance -= _am;\n            LogFile.AddMessage(msg.sender, _am, \"Collect\");\n        }\n        acc.isLocked = false;",
          "message": "Reentrancy in U_BANK.Collect (patch_16.sol#27-39):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (patch_16.sol#34-37)\n\tState variables written after the call(s):\n\t- Acc (patch_16.sol#35)\n"
        },
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": 39,
          "vulnerability_code": "    function Collect(uint _am) public {\n        Holder storage acc = Acc[msg.sender];\n        require(\n            acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime && !acc.isLocked,\n            \"Insufficient balance or locked account\"\n        );\n        acc.isLocked = true;\n        if (msg.sender.call.value(_am)()) {\n            acc.balance -= _am;\n            LogFile.AddMessage(msg.sender, _am, \"Collect\");\n        }\n        acc.isLocked = false;",
          "message": "Reentrancy in U_BANK.Collect (patch_16.sol#27-39):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (patch_16.sol#34-37)\n\t- LogFile.AddMessage(msg.sender,_am,Collect) (patch_16.sol#36)\n\tExternal calls sending eth:\n\t- msg.sender.call.value(_am)() (patch_16.sol#34-37)\n\tState variables written after the call(s):\n\t- Acc (patch_16.sol#38)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum = 2 ether;",
          "message": "U_BANK.MinSum should be constant (patch_16.sol#6)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": 39,
          "vulnerability_code": "    function Collect(uint _am) public {\n        Holder storage acc = Acc[msg.sender];\n        require(\n            acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime && !acc.isLocked,\n            \"Insufficient balance or locked account\"\n        );\n        acc.isLocked = true;\n        if (msg.sender.call.value(_am)()) {\n            acc.balance -= _am;\n            LogFile.AddMessage(msg.sender, _am, \"Collect\");\n        }\n        acc.isLocked = false;",
          "message": "U_BANK.Collect (patch_16.sol#27-39) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": 43,
          "vulnerability_code": "    function() public payable {\n        Put(0);",
          "message": "U_BANK.fallback (patch_16.sol#41-43) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": 63,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        LastMsg.Sender = _adr;\n        LastMsg.Time = now;\n        LastMsg.Val = _val;\n        LastMsg.Data = _data;\n        History.push(LastMsg);",
          "message": "Log.AddMessage (patch_16.sol#57-63) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": 39,
          "vulnerability_code": "    function Collect(uint _am) public {\n        Holder storage acc = Acc[msg.sender];\n        require(\n            acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime && !acc.isLocked,\n            \"Insufficient balance or locked account\"\n        );\n        acc.isLocked = true;\n        if (msg.sender.call.value(_am)()) {\n            acc.balance -= _am;\n            LogFile.AddMessage(msg.sender, _am, \"Collect\");\n        }\n        acc.isLocked = false;",
          "message": "Low level call in U_BANK.Collect (patch_16.sol#27-39):\n\t-msg.sender.call.value(_am)() patch_16.sol#34-37\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 44,
          "vulnerability_code": "contract U_BANK {\n    mapping(address => Holder) public Acc;\n\n    uint public MinSum = 2 ether;\n\n    Log LogFile;\n\n    struct Holder {\n        uint unlockTime;\n        uint balance;\n        bool isLocked;\n    }\n\n    constructor(address log) public {\n        LogFile = Log(log);\n    }\n\n    function Put(uint _unlockTime) public payable {\n        Holder storage acc = Acc[msg.sender];\n        acc.balance += msg.value;\n        acc.unlockTime = _unlockTime > now ? _unlockTime : now;\n        LogFile.AddMessage(msg.sender, msg.value, \"Put\");\n    }\n\n    function Collect(uint _am) public {\n        Holder storage acc = Acc[msg.sender];\n        require(\n            acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime && !acc.isLocked,\n            \"Insufficient balance or locked account\"\n        );\n        acc.isLocked = true;\n        if (msg.sender.call.value(_am)()) {\n            acc.balance -= _am;\n            LogFile.AddMessage(msg.sender, _am, \"Collect\");\n        }\n        acc.isLocked = false;\n    }\n\n    function() public payable {\n        Put(0);\n    }",
          "message": "Contract 'U_BANK' (patch_16.sol#3-44) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": 25,
          "vulnerability_code": "    function Put(uint _unlockTime) public payable {\n        Holder storage acc = Acc[msg.sender];\n        acc.balance += msg.value;\n        acc.unlockTime = _unlockTime > now ? _unlockTime : now;\n        LogFile.AddMessage(msg.sender, msg.value, \"Put\");",
          "message": "Function 'U_BANK.Put' (patch_16.sol#20-25) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Put(uint _unlockTime) public payable {",
          "message": "Parameter '_unlockTime' of U_BANK.Put (patch_16.sol#20) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": 39,
          "vulnerability_code": "    function Collect(uint _am) public {\n        Holder storage acc = Acc[msg.sender];\n        require(\n            acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime && !acc.isLocked,\n            \"Insufficient balance or locked account\"\n        );\n        acc.isLocked = true;\n        if (msg.sender.call.value(_am)()) {\n            acc.balance -= _am;\n            LogFile.AddMessage(msg.sender, _am, \"Collect\");\n        }\n        acc.isLocked = false;",
          "message": "Function 'U_BANK.Collect' (patch_16.sol#27-39) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Collect(uint _am) public {",
          "message": "Parameter '_am' of U_BANK.Collect (patch_16.sol#27) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => Holder) public Acc;",
          "message": "Variable 'U_BANK.Acc' (patch_16.sol#4) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum = 2 ether;",
          "message": "Variable 'U_BANK.MinSum' (patch_16.sol#6) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Log LogFile;",
          "message": "Variable 'U_BANK.LogFile' (patch_16.sol#8) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": 63,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        LastMsg.Sender = _adr;\n        LastMsg.Time = now;\n        LastMsg.Val = _val;\n        LastMsg.Data = _data;\n        History.push(LastMsg);",
          "message": "Function 'Log.AddMessage' (patch_16.sol#57-63) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of Log.AddMessage (patch_16.sol#57) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of Log.AddMessage (patch_16.sol#57) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of Log.AddMessage (patch_16.sol#57) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": "Variable 'Log.History' (patch_16.sol#54) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message LastMsg;",
          "message": "Variable 'Log.LastMsg' (patch_16.sol#55) is not in mixedCase\n"
        }
      ]
    },
    "securify": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "MissingInputValidation",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "DAO",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    }
  }
}