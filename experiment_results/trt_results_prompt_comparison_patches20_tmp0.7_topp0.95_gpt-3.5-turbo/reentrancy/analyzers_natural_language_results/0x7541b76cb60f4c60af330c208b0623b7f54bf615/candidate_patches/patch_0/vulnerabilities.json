{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_6"
      ],
      "vulnerability_findings": [
        {
          "name": "constable-states",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public minSum = 2 ether;",
          "message": "U_BANK.minSum should be constant (patch_0.sol#10)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": 23,
          "vulnerability_code": "    function withdraw(uint _am) public {\n        require(balances[msg.sender] >= minSum && balances[msg.sender] >= _am && now > unlockTimes[msg.sender], \"Insufficient balance or unlock time not reached\");\n        balances[msg.sender] -= _am;\n        msg.sender.transfer(_am);\n        emit LogWithdrawal(msg.sender, _am);",
          "message": "U_BANK.withdraw (patch_0.sol#18-23) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": 27,
          "vulnerability_code": "    function() public payable {\n        deposit(0);",
          "message": "U_BANK.fallback (patch_0.sol#25-27) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 28,
          "vulnerability_code": "contract U_BANK {\n    mapping(address => uint) public balances;\n    mapping(address => uint) public unlockTimes;\n\n    event LogDeposit(address indexed sender, uint amount);\n    event LogWithdrawal(address indexed sender, uint amount);\n\n    uint public minSum = 2 ether;\n\n    function deposit(uint _unlockTime) public payable {\n        balances[msg.sender] += msg.value;\n        unlockTimes[msg.sender] = _unlockTime > now ? _unlockTime : now;\n        emit LogDeposit(msg.sender, msg.value);\n    }\n\n    function withdraw(uint _am) public {\n        require(balances[msg.sender] >= minSum && balances[msg.sender] >= _am && now > unlockTimes[msg.sender], \"Insufficient balance or unlock time not reached\");\n        balances[msg.sender] -= _am;\n        msg.sender.transfer(_am);\n        emit LogWithdrawal(msg.sender, _am);\n    }\n\n    function() public payable {\n        deposit(0);\n    }",
          "message": "Contract 'U_BANK' (patch_0.sol#3-28) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deposit(uint _unlockTime) public payable {",
          "message": "Parameter '_unlockTime' of U_BANK.deposit (patch_0.sol#12) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(uint _am) public {",
          "message": "Parameter '_am' of U_BANK.withdraw (patch_0.sol#18) is not in mixedCase\n"
        }
      ]
    },
    "securify": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "MissingInputValidation",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balances[msg.sender] += msg.value;",
          "message": null
        },
        {
          "name": "Timestamp Dependency",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(balances[msg.sender] >= minSum && balances[msg.sender] >= _am && now > unlockTimes[msg.sender], \"Insufficient balance or unlock time not reached\");",
          "message": null
        }
      ]
    }
  }
}