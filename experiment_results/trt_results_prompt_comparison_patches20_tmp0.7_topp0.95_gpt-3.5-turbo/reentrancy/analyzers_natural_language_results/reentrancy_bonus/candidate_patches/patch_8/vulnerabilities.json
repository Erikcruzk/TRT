{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_6"
      ],
      "vulnerability_findings": [
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": 12,
          "vulnerability_code": "    function withdrawReward(address recipient) public {\n        uint amountToWithdraw = rewardsForA[recipient];\n        rewardsForA[recipient] = 0;\n        require(recipient.call.value(amountToWithdraw)(),\"Transfer failed\");",
          "message": "Reentrancy_bonus.withdrawReward (patch_8.sol#8-12) sends eth to arbitrary user\n\tDangerous calls:\n\t- require(bool,string)(recipient.call.value(amountToWithdraw)(),Transfer failed) (patch_8.sol#11)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": 19,
          "vulnerability_code": "    function getFirstWithdrawalBonus(address recipient) public {\n        require(!claimedBonus[recipient]);\n        claimedBonus[recipient] = true;\n        rewardsForA[recipient] += 100;\n        withdrawReward(recipient);",
          "message": "Reentrancy_bonus.getFirstWithdrawalBonus (patch_8.sol#14-19) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;",
          "message": "Detected issues with version pragma in patch_8.sol:\n\t- pragma solidity^0.4.0 (patch_8.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": 12,
          "vulnerability_code": "    function withdrawReward(address recipient) public {\n        uint amountToWithdraw = rewardsForA[recipient];\n        rewardsForA[recipient] = 0;\n        require(recipient.call.value(amountToWithdraw)(),\"Transfer failed\");",
          "message": "Low level call in Reentrancy_bonus.withdrawReward (patch_8.sol#8-12):\n\t-require(bool,string)(recipient.call.value(amountToWithdraw)(),Transfer failed) patch_8.sol#11\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 20,
          "vulnerability_code": "contract Reentrancy_bonus {\n    mapping(address => uint) private userBalances;\n    mapping(address => bool) private claimedBonus;\n    mapping(address => uint) private rewardsForA;\n\n    function withdrawReward(address recipient) public {\n        uint amountToWithdraw = rewardsForA[recipient];\n        rewardsForA[recipient] = 0;\n        require(recipient.call.value(amountToWithdraw)(),\"Transfer failed\");\n    }\n\n    function getFirstWithdrawalBonus(address recipient) public {\n        require(!claimedBonus[recipient]);\n        claimedBonus[recipient] = true;\n        rewardsForA[recipient] += 100;\n        withdrawReward(recipient);\n    }",
          "message": "Contract 'Reentrancy_bonus' (patch_8.sol#3-20) is not in CapWords\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint) private userBalances;",
          "message": "Reentrancy_bonus.userBalances (patch_8.sol#4) is never used in Reentrancy_bonus\n"
        }
      ]
    },
    "securify": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "MissingInputValidation",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}