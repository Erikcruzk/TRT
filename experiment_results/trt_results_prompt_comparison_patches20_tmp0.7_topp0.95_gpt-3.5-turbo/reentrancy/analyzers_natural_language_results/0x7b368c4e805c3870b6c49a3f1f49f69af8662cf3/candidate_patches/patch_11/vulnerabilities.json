{
  "smartbugs_completed": true,
  "analyzer_results": {
    "securify": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "MissingInputValidation",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public history;",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public history;",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balances[msg.sender] += msg.value;",
          "message": null
        },
        {
          "name": "Timestamp Dependency",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(now > unlockTimes[msg.sender]);",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_10"
      ],
      "vulnerability_findings": [
        {
          "name": "constable-states",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public minSum = 1 ether;",
          "message": "W_WALLET.minSum should be constant (patch_11.sol#10)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": 26,
          "vulnerability_code": "    function withdraw(uint _amount) public {\n        require(balances[msg.sender] >= minSum);\n        require(balances[msg.sender] >= _amount);\n        require(now > unlockTimes[msg.sender]);\n\n        balances[msg.sender] -= _amount;\n        msg.sender.transfer(_amount);\n        emit LogWithdrawal(msg.sender, _amount);",
          "message": "W_WALLET.withdraw (patch_11.sol#18-26) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": 30,
          "vulnerability_code": "    function() public payable {\n        deposit(0);",
          "message": "W_WALLET.fallback (patch_11.sol#28-30) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": 52,
          "vulnerability_code": "    function addMessage(address _sender, uint _value, string _data) public {\n        Message memory newMessage = Message({\n            sender: _sender,\n            data: _data,\n            value: _value,\n            time: now\n        });\n\n        history.push(newMessage);",
          "message": "Log.addMessage (patch_11.sol#43-52) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 31,
          "vulnerability_code": "contract W_WALLET {\n    mapping(address => uint) public balances;\n    mapping(address => uint) public unlockTimes;\n\n    event LogDeposit(address indexed sender, uint amount);\n    event LogWithdrawal(address indexed sender, uint amount);\n\n    uint public minSum = 1 ether;\n\n    function deposit(uint _unlockTime) public payable {\n        balances[msg.sender] += msg.value;\n        unlockTimes[msg.sender] = _unlockTime > now ? _unlockTime : now;\n        emit LogDeposit(msg.sender, msg.value);\n    }\n\n    function withdraw(uint _amount) public {\n        require(balances[msg.sender] >= minSum);\n        require(balances[msg.sender] >= _amount);\n        require(now > unlockTimes[msg.sender]);\n\n        balances[msg.sender] -= _amount;\n        msg.sender.transfer(_amount);\n        emit LogWithdrawal(msg.sender, _amount);\n    }\n\n    function() public payable {\n        deposit(0);\n    }",
          "message": "Contract 'W_WALLET' (patch_11.sol#3-31) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deposit(uint _unlockTime) public payable {",
          "message": "Parameter '_unlockTime' of W_WALLET.deposit (patch_11.sol#12) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(uint _amount) public {",
          "message": "Parameter '_amount' of W_WALLET.withdraw (patch_11.sol#18) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _sender, uint _value, string _data) public {",
          "message": "Parameter '_sender' of Log.addMessage (patch_11.sol#43) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _sender, uint _value, string _data) public {",
          "message": "Parameter '_value' of Log.addMessage (patch_11.sol#43) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _sender, uint _value, string _data) public {",
          "message": "Parameter '_data' of Log.addMessage (patch_11.sol#43) is not in mixedCase\n"
        }
      ]
    }
  }
}