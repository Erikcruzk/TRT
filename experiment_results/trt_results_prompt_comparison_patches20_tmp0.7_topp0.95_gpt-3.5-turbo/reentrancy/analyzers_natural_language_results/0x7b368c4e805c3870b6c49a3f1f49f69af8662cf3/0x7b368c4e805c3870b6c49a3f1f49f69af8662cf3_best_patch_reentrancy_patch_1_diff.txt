  pragma solidity ^0.4.25;
  
  contract W_WALLET {
      function Put(uint _unlockTime) public payable {
-         var acc = Acc[msg.sender];
?         ^ ^
+         Holder storage acc = Acc[msg.sender];
?         ^^^^^^^^^^^ ^^
          acc.balance += msg.value;
          acc.unlockTime = _unlockTime > now ? _unlockTime : now;
          LogFile.AddMessage(msg.sender, msg.value, "Put");
      }
  
-     function Collect(uint _am) public payable {
?                                       --------
+     function Collect(uint _am) public {
-         var acc = Acc[msg.sender];
?         ^ ^
+         Holder storage acc = Acc[msg.sender];
?         ^^^^^^^^^^^ ^^
-         if (
+         require(
-             acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime
+             acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime,
?                                                                                +
+             "Insufficient balance or locked funds"
-         ) {
?          ^^
+         );
?          ^
-             if (msg.sender.call.value(_am)()) {
-                 acc.balance -= _am;
? --------
+         acc.balance -= _am;
+         msg.sender.transfer(_am);
-                 LogFile.AddMessage(msg.sender, _am, "Collect");
? --------
+         LogFile.AddMessage(msg.sender, _am, "Collect");
-             }
-         }
      }
  
      function() public payable {
          Put(0);
      }
  
      struct Holder {
          uint unlockTime;
          uint balance;
      }
  
      mapping(address => Holder) public Acc;
  
      Log LogFile;
  
      uint public MinSum = 1 ether;
  
-     function W_WALLET(address log) public {
?     ^ -  - ^^^^^^^^^^
+     constructor(address log) public {
?     ^^^^^^    ^
          LogFile = Log(log);
      }
  }
  
  contract Log {
      struct Message {
          address Sender;
          string Data;
          uint Val;
          uint Time;
      }
  
      Message[] public History;
  
-     Message LastMsg;
- 
      function AddMessage(address _adr, uint _val, string _data) public {
+         Message memory LastMsg = Message(_adr, _data, _val, now);
-         LastMsg.Sender = _adr;
-         LastMsg.Time = now;
-         LastMsg.Val = _val;
-         LastMsg.Data = _data;
          History.push(LastMsg);
      }
- }
+ }