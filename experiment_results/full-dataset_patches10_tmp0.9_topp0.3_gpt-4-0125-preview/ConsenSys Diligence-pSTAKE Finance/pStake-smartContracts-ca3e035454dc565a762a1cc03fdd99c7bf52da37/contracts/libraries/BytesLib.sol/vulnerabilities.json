{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 249,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\trequire(_length + 31 >= _length, \"slice_overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 250,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\trequire(_bytes.length >= _start + _length, \"slice_outOfBounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 328,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\trequire(_bytes.length >= _start + 20, \"toAddress_outOfBounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 351,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\trequire(_bytes.length >= _start + 1, \"toUint8_outOfBounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 371,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\trequire(_bytes.length >= _start + 2, \"toUint16_outOfBounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 391,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\trequire(_bytes.length >= _start + 4, \"toUint32_outOfBounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 411,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\trequire(_bytes.length >= _start + 8, \"toUint64_outOfBounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 431,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\trequire(_bytes.length >= _start + 12, \"toUint96_outOfBounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 451,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\trequire(_bytes.length >= _start + 16, \"toUint128_outOfBounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 471,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\trequire(_bytes.length >= _start + 32, \"toUint256_outOfBounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 491,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\trequire(_bytes.length >= _start + 32, \"toBytes32_outOfBounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        }
      ]
    },
    "slither": {
      "successfull_analysis": false,
      "errors": [
        "EXIT_CODE_255",
        "error parsing results: file could not be opened successfully"
      ],
      "vulnerability_findings": []
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.7.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction concat(bytes memory _preBytes, bytes memory _postBytes)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 244,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction slice(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 323,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction toAddress(bytes memory _bytes, uint256 _start)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 346,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction toUint8(bytes memory _bytes, uint256 _start)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 366,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction toUint16(bytes memory _bytes, uint256 _start)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 386,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction toUint32(bytes memory _bytes, uint256 _start)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 406,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction toUint64(bytes memory _bytes, uint256 _start)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 426,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction toUint96(bytes memory _bytes, uint256 _start)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 446,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction toUint128(bytes memory _bytes, uint256 _start)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 466,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction toUint256(bytes memory _bytes, uint256 _start)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 486,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction toBytes32(bytes memory _bytes, uint256 _start)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 506,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction equal(bytes memory _preBytes, bytes memory _postBytes)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 558,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction equalStorage(bytes storage _preBytes, bytes memory _postBytes)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tassembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 100,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tassembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 254,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tassembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 331,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tassembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 354,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tassembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 374,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tassembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 394,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tassembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 414,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tassembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 434,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tassembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 454,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tassembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 474,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tassembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 494,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tassembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 513,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tassembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 565,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tassembly {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "Solc experienced a fatal error"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}