function distributeFeeProportionally(uint256 _fee, bytes32 _direction) internal {
    IRewardableValidators validators = rewardableValidatorContract();
    address F_ADDR = 0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF;
    uint256 numOfValidators = validators.validatorCount();
    require(numOfValidators > 0, "No validators available.");

    uint256 feePerValidator = _fee.div(numOfValidators);
    uint256 distributedFee = 0;

    address nextValidator = validators.getNextValidator(F_ADDR);
    require(nextValidator != F_ADDR && nextValidator != address(0), "Invalid validator address.");

    uint256 i = 0;
    while (nextValidator != F_ADDR && i < numOfValidators) {
        uint256 feeToDistribute = feePerValidator;
        if (i == numOfValidators - 1) {
            // Distribute any remaining fee to the last validator to account for rounding errors
            feeToDistribute = _fee.sub(distributedFee);
        }

        address rewardAddress = validators.getValidatorRewardAddress(nextValidator);
        require(rewardAddress != address(0), "Invalid reward address.");
        onFeeDistribution(rewardAddress, feeToDistribute, _direction);

        distributedFee = distributedFee.add(feeToDistribute);
        nextValidator = validators.getNextValidator(nextValidator);
        i = i + 1;
    }
}