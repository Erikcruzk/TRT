{
  "smartbugs_completed": "No vulnerabilities found",
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract RewardableBridge is Ownable, FeeTypes {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_33"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": 105,
          "vulnerability_code": "    function _getFee(bytes32 _feeType) internal view returns(uint256) {\n\n        uint256 fee;\n\n        address feeManager = feeManagerContract();\n\n        string memory method = _feeType == HOME_FEE ? \"getHomeFee()\" : \"getForeignFee()\";\n\n        bytes memory callData = abi.encodeWithSignature(method);\n\n\n\n        assembly {\n\n            let result := callcode(gas, feeManager, 0x0, add(callData, 0x20), mload(callData), 0, 32)\n\n            fee := mload(0)\n\n\n\n            switch result\n\n            case 0 { revert(0, 0) }\n\n        }\n\n        return fee;\n",
          "message": "RewardableBridge._getFee (RewardableForeignBridgeNativeToErc.sol#91-105) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": 119,
          "vulnerability_code": "    function getFeeManagerMode() public view returns(bytes4) {\n\n        bytes4 mode;\n\n        bytes memory callData = abi.encodeWithSignature(\"getFeeManagerMode()\");\n\n        address feeManager = feeManagerContract();\n\n        assembly {\n\n            let result := callcode(gas, feeManager, 0x0, add(callData, 0x20), mload(callData), 0, 4)\n\n            mode := mload(0)\n\n\n\n            switch result\n\n            case 0 { revert(0, 0) }\n\n        }\n\n        return mode;\n",
          "message": "RewardableBridge.getFeeManagerMode (RewardableForeignBridgeNativeToErc.sol#107-119) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": 140,
          "vulnerability_code": "    function isContract(address _addr) internal view returns (bool)\n\n    {\n\n        uint length;\n\n        assembly { length := extcodesize(_addr) }\n\n        return length > 0;\n",
          "message": "RewardableBridge.isContract (RewardableForeignBridgeNativeToErc.sol#135-140) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": 153,
          "vulnerability_code": "    function calculateFee(uint256 _value, bool _recover, address _impl, bytes32 _feeType) internal view returns(uint256) {\n\n        uint256 fee;\n\n        bytes memory callData = abi.encodeWithSignature(\"calculateFee(uint256,bool,bytes32)\", _value, _recover, _feeType);\n\n        assembly {\n\n            let result := callcode(gas, _impl, 0x0, add(callData, 0x20), mload(callData), 0, 32)\n\n            fee := mload(0)\n\n\n\n            switch result\n\n            case 0 { revert(0, 0) }\n\n        }\n\n        return fee;\n",
          "message": "RewardableBridge.calculateFee (RewardableForeignBridgeNativeToErc.sol#142-153) is declared view but contains assembly code\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": 105,
          "vulnerability_code": "    function _getFee(bytes32 _feeType) internal view returns(uint256) {\n\n        uint256 fee;\n\n        address feeManager = feeManagerContract();\n\n        string memory method = _feeType == HOME_FEE ? \"getHomeFee()\" : \"getForeignFee()\";\n\n        bytes memory callData = abi.encodeWithSignature(method);\n\n\n\n        assembly {\n\n            let result := callcode(gas, feeManager, 0x0, add(callData, 0x20), mload(callData), 0, 32)\n\n            fee := mload(0)\n\n\n\n            switch result\n\n            case 0 { revert(0, 0) }\n\n        }\n\n        return fee;\n",
          "message": "RewardableBridge._getFee uses assembly (RewardableForeignBridgeNativeToErc.sol#91-105)\n\t- RewardableForeignBridgeNativeToErc.sol#97-104\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": 119,
          "vulnerability_code": "    function getFeeManagerMode() public view returns(bytes4) {\n\n        bytes4 mode;\n\n        bytes memory callData = abi.encodeWithSignature(\"getFeeManagerMode()\");\n\n        address feeManager = feeManagerContract();\n\n        assembly {\n\n            let result := callcode(gas, feeManager, 0x0, add(callData, 0x20), mload(callData), 0, 4)\n\n            mode := mload(0)\n\n\n\n            switch result\n\n            case 0 { revert(0, 0) }\n\n        }\n\n        return mode;\n",
          "message": "RewardableBridge.getFeeManagerMode uses assembly (RewardableForeignBridgeNativeToErc.sol#107-119)\n\t- RewardableForeignBridgeNativeToErc.sol#111-118\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": 140,
          "vulnerability_code": "    function isContract(address _addr) internal view returns (bool)\n\n    {\n\n        uint length;\n\n        assembly { length := extcodesize(_addr) }\n\n        return length > 0;\n",
          "message": "RewardableBridge.isContract uses assembly (RewardableForeignBridgeNativeToErc.sol#135-140)\n\t- RewardableForeignBridgeNativeToErc.sol#138-139\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": 153,
          "vulnerability_code": "    function calculateFee(uint256 _value, bool _recover, address _impl, bytes32 _feeType) internal view returns(uint256) {\n\n        uint256 fee;\n\n        bytes memory callData = abi.encodeWithSignature(\"calculateFee(uint256,bool,bytes32)\", _value, _recover, _feeType);\n\n        assembly {\n\n            let result := callcode(gas, _impl, 0x0, add(callData, 0x20), mload(callData), 0, 32)\n\n            fee := mload(0)\n\n\n\n            switch result\n\n            case 0 { revert(0, 0) }\n\n        }\n\n        return fee;\n",
          "message": "RewardableBridge.calculateFee uses assembly (RewardableForeignBridgeNativeToErc.sol#142-153)\n\t- RewardableForeignBridgeNativeToErc.sol#145-152\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": 60,
          "vulnerability_code": "    function transferOwnership(address newOwner) public onlyOwner {\n\n        require(newOwner != address(0));\n\n        setOwner(newOwner);\n",
          "message": "Ownable.transferOwnership (RewardableForeignBridgeNativeToErc.sol#57-60) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": 119,
          "vulnerability_code": "    function getFeeManagerMode() public view returns(bytes4) {\n\n        bytes4 mode;\n\n        bytes memory callData = abi.encodeWithSignature(\"getFeeManagerMode()\");\n\n        address feeManager = feeManagerContract();\n\n        assembly {\n\n            let result := callcode(gas, feeManager, 0x0, add(callData, 0x20), mload(callData), 0, 4)\n\n            mode := mload(0)\n\n\n\n            switch result\n\n            case 0 { revert(0, 0) }\n\n        }\n\n        return mode;\n",
          "message": "RewardableBridge.getFeeManagerMode (RewardableForeignBridgeNativeToErc.sol#107-119) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": 128,
          "vulnerability_code": "    function setFeeManagerContract(address _feeManager) public onlyOwner {\n\n        require(_feeManager == address(0) || isContract(_feeManager));\n\n        addressStorage[keccak256(abi.encodePacked(\"feeManagerContract\"))] = _feeManager;\n",
          "message": "RewardableBridge.setFeeManagerContract (RewardableForeignBridgeNativeToErc.sol#125-128) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 176,
          "vulnerability_to_line": 178,
          "vulnerability_code": "    function getHomeFee() public view returns(uint256) {\n\n        return _getFee(HOME_FEE);\n",
          "message": "RewardableForeignBridgeNativeToErc.getHomeFee (RewardableForeignBridgeNativeToErc.sol#176-178) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 130,
          "vulnerability_to_line": 133,
          "vulnerability_code": "    function _setFee(address _feeManager, uint256 _fee, bytes32 _feeType) internal {\n\n        string memory method = _feeType == HOME_FEE ? \"setHomeFee(uint256)\" : \"setForeignFee(uint256)\";\n\n        require(_feeManager.delegatecall(abi.encodeWithSignature(method, _fee)));\n",
          "message": "Low level call in RewardableBridge._setFee (RewardableForeignBridgeNativeToErc.sol#130-133):\n\t-require(bool)(_feeManager.delegatecall(abi.encodeWithSignature(method,_fee))) RewardableForeignBridgeNativeToErc.sol#132\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": 158,
          "vulnerability_code": "    function distributeFeeFromSignatures(uint256 _fee, address _feeManager, bytes32 _txHash) internal {\n\n        require(_feeManager.delegatecall(abi.encodeWithSignature(\"distributeFeeFromSignatures(uint256)\", _fee)));\n\n        emit FeeDistributedFromSignatures(_fee, _txHash);\n",
          "message": "Low level call in RewardableBridge.distributeFeeFromSignatures (RewardableForeignBridgeNativeToErc.sol#155-158):\n\t-require(bool)(_feeManager.delegatecall(abi.encodeWithSignature(distributeFeeFromSignatures(uint256),_fee))) RewardableForeignBridgeNativeToErc.sol#156\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": 163,
          "vulnerability_code": "    function distributeFeeFromAffirmation(uint256 _fee, address _feeManager, bytes32 _txHash) internal {\n\n        require(_feeManager.delegatecall(abi.encodeWithSignature(\"distributeFeeFromAffirmation(uint256)\", _fee)));\n\n        emit FeeDistributedFromAffirmation(_fee, _txHash);\n",
          "message": "Low level call in RewardableBridge.distributeFeeFromAffirmation (RewardableForeignBridgeNativeToErc.sol#160-163):\n\t-require(bool)(_feeManager.delegatecall(abi.encodeWithSignature(distributeFeeFromAffirmation(uint256),_fee))) RewardableForeignBridgeNativeToErc.sol#161\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": 105,
          "vulnerability_code": "    function _getFee(bytes32 _feeType) internal view returns(uint256) {\n\n        uint256 fee;\n\n        address feeManager = feeManagerContract();\n\n        string memory method = _feeType == HOME_FEE ? \"getHomeFee()\" : \"getForeignFee()\";\n\n        bytes memory callData = abi.encodeWithSignature(method);\n\n\n\n        assembly {\n\n            let result := callcode(gas, feeManager, 0x0, add(callData, 0x20), mload(callData), 0, 32)\n\n            fee := mload(0)\n\n\n\n            switch result\n\n            case 0 { revert(0, 0) }\n\n        }\n\n        return fee;\n",
          "message": "Function 'RewardableBridge._getFee' (RewardableForeignBridgeNativeToErc.sol#91-105) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _getFee(bytes32 _feeType) internal view returns(uint256) {\n",
          "message": "Parameter '_feeType' of RewardableBridge._getFee (RewardableForeignBridgeNativeToErc.sol#91) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setFeeManagerContract(address _feeManager) public onlyOwner {\n",
          "message": "Parameter '_feeManager' of RewardableBridge.setFeeManagerContract (RewardableForeignBridgeNativeToErc.sol#125) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 130,
          "vulnerability_to_line": 133,
          "vulnerability_code": "    function _setFee(address _feeManager, uint256 _fee, bytes32 _feeType) internal {\n\n        string memory method = _feeType == HOME_FEE ? \"setHomeFee(uint256)\" : \"setForeignFee(uint256)\";\n\n        require(_feeManager.delegatecall(abi.encodeWithSignature(method, _fee)));\n",
          "message": "Function 'RewardableBridge._setFee' (RewardableForeignBridgeNativeToErc.sol#130-133) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 130,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setFee(address _feeManager, uint256 _fee, bytes32 _feeType) internal {\n",
          "message": "Parameter '_feeManager' of RewardableBridge._setFee (RewardableForeignBridgeNativeToErc.sol#130) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 130,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setFee(address _feeManager, uint256 _fee, bytes32 _feeType) internal {\n",
          "message": "Parameter '_fee' of RewardableBridge._setFee (RewardableForeignBridgeNativeToErc.sol#130) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 130,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setFee(address _feeManager, uint256 _fee, bytes32 _feeType) internal {\n",
          "message": "Parameter '_feeType' of RewardableBridge._setFee (RewardableForeignBridgeNativeToErc.sol#130) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function calculateFee(uint256 _value, bool _recover, address _impl, bytes32 _feeType) internal view returns(uint256) {\n",
          "message": "Parameter '_value' of RewardableBridge.calculateFee (RewardableForeignBridgeNativeToErc.sol#142) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function calculateFee(uint256 _value, bool _recover, address _impl, bytes32 _feeType) internal view returns(uint256) {\n",
          "message": "Parameter '_recover' of RewardableBridge.calculateFee (RewardableForeignBridgeNativeToErc.sol#142) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function calculateFee(uint256 _value, bool _recover, address _impl, bytes32 _feeType) internal view returns(uint256) {\n",
          "message": "Parameter '_feeType' of RewardableBridge.calculateFee (RewardableForeignBridgeNativeToErc.sol#142) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function distributeFeeFromSignatures(uint256 _fee, address _feeManager, bytes32 _txHash) internal {\n",
          "message": "Parameter '_fee' of RewardableBridge.distributeFeeFromSignatures (RewardableForeignBridgeNativeToErc.sol#155) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function distributeFeeFromSignatures(uint256 _fee, address _feeManager, bytes32 _txHash) internal {\n",
          "message": "Parameter '_feeManager' of RewardableBridge.distributeFeeFromSignatures (RewardableForeignBridgeNativeToErc.sol#155) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function distributeFeeFromSignatures(uint256 _fee, address _feeManager, bytes32 _txHash) internal {\n",
          "message": "Parameter '_txHash' of RewardableBridge.distributeFeeFromSignatures (RewardableForeignBridgeNativeToErc.sol#155) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function distributeFeeFromAffirmation(uint256 _fee, address _feeManager, bytes32 _txHash) internal {\n",
          "message": "Parameter '_fee' of RewardableBridge.distributeFeeFromAffirmation (RewardableForeignBridgeNativeToErc.sol#160) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function distributeFeeFromAffirmation(uint256 _fee, address _feeManager, bytes32 _txHash) internal {\n",
          "message": "Parameter '_feeManager' of RewardableBridge.distributeFeeFromAffirmation (RewardableForeignBridgeNativeToErc.sol#160) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function distributeFeeFromAffirmation(uint256 _fee, address _feeManager, bytes32 _txHash) internal {\n",
          "message": "Parameter '_txHash' of RewardableBridge.distributeFeeFromAffirmation (RewardableForeignBridgeNativeToErc.sol#160) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setHomeFee(uint256 _fee) external onlyOwner {\n",
          "message": "Parameter '_fee' of RewardableForeignBridgeNativeToErc.setHomeFee (RewardableForeignBridgeNativeToErc.sol#172) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes32 => uint256) internal uintStorage;\n",
          "message": "EternalStorage.uintStorage (RewardableForeignBridgeNativeToErc.sol#12) is never used in RewardableForeignBridgeNativeToErc\nEternalStorage.stringStorage (RewardableForeignBridgeNativeToErc.sol#13) is never used in RewardableForeignBridgeNativeToErc\nEternalStorage.bytesStorage (RewardableForeignBridgeNativeToErc.sol#15) is never used in RewardableForeignBridgeNativeToErc\nEternalStorage.boolStorage (RewardableForeignBridgeNativeToErc.sol#16) is never used in RewardableForeignBridgeNativeToErc\nEternalStorage.intStorage (RewardableForeignBridgeNativeToErc.sol#17) is never used in RewardableForeignBridgeNativeToErc\nFeeTypes.FOREIGN_FEE (RewardableForeignBridgeNativeToErc.sol#78) is never used in RewardableForeignBridgeNativeToErc\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setFeeManagerContract(address _feeManager) public onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setHomeFee(uint256 _fee) external onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _getFee(bytes32 _feeType) internal view returns(uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getFeeManagerMode() public view returns(bytes4) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isContract(address _addr) internal view returns (bool)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function calculateFee(uint256 _value, bool _recover, address _impl, bytes32 _feeType) internal view returns(uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 145,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function owner() public view returns (address) {\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return addressStorage[keccak256(abi.encodePacked(\"owner\"))];\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 127,
          "vulnerability_to_line": null,
          "vulnerability_code": "        addressStorage[keccak256(abi.encodePacked(\"feeManagerContract\"))] = _feeManager;\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return addressStorage[keccak256(abi.encodePacked(\"owner\"))];\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 122,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return addressStorage[keccak256(abi.encodePacked(\"feeManagerContract\"))];\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return addressStorage[keccak256(abi.encodePacked(\"owner\"))];\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}