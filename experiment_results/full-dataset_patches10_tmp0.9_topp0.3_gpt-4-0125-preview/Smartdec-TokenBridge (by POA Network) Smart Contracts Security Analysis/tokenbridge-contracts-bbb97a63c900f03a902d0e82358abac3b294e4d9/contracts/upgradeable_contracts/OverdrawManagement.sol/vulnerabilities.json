{
  "smartbugs_completed": "No vulnerabilities found",
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(recipient != address(0) && value > 0);\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_10"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function proxyOwner() public view returns (address);\n",
          "message": "IOwnedUpgradeabilityProxy.proxyOwner (OverdrawManagement.sol#78) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 126,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function fixedAssets(bytes32 _txHash) public view returns(bool) {\n",
          "message": "Parameter '_txHash' of OverdrawManagement.fixedAssets (OverdrawManagement.sol#126) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 130,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setOutOfLimitAmount(uint256 _value) internal {\n",
          "message": "Parameter '_value' of OverdrawManagement.setOutOfLimitAmount (OverdrawManagement.sol#130) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function txAboveLimits(bytes32 _txHash) internal view returns(address recipient, uint256 value) {\n",
          "message": "Parameter '_txHash' of OverdrawManagement.txAboveLimits (OverdrawManagement.sol#134) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 139,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTxAboveLimits(address _recipient, uint256 _value, bytes32 _txHash) internal {\n",
          "message": "Parameter '_recipient' of OverdrawManagement.setTxAboveLimits (OverdrawManagement.sol#139) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 139,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTxAboveLimits(address _recipient, uint256 _value, bytes32 _txHash) internal {\n",
          "message": "Parameter '_value' of OverdrawManagement.setTxAboveLimits (OverdrawManagement.sol#139) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 139,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTxAboveLimits(address _recipient, uint256 _value, bytes32 _txHash) internal {\n",
          "message": "Parameter '_txHash' of OverdrawManagement.setTxAboveLimits (OverdrawManagement.sol#139) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 144,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setFixedAssets(bytes32 _txHash, bool _status) internal {\n",
          "message": "Parameter '_txHash' of OverdrawManagement.setFixedAssets (OverdrawManagement.sol#144) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 144,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setFixedAssets(bytes32 _txHash, bool _status) internal {\n",
          "message": "Parameter '_status' of OverdrawManagement.setFixedAssets (OverdrawManagement.sol#144) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes32 => string) internal stringStorage;\n",
          "message": "EternalStorage.stringStorage (OverdrawManagement.sol#13) is never used in OverdrawManagement\nEternalStorage.bytesStorage (OverdrawManagement.sol#15) is never used in OverdrawManagement\nEternalStorage.intStorage (OverdrawManagement.sol#17) is never used in OverdrawManagement\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function txAboveLimits(bytes32 _txHash) internal view returns(address recipient, uint256 value) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function proxyOwner() public view returns (address);\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 126,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function fixedAssets(bytes32 _txHash) public view returns(bool) {\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 127,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return boolStorage[keccak256(abi.encodePacked(\"fixedAssets\", _txHash))];\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return IOwnedUpgradeabilityProxy(this).proxyOwner();\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}