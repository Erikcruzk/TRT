pragma solidity 0.4.24;


interface IBridgeValidators {
    function isValidator(address _validator) public view returns(bool);
    function requiredSignatures() public view returns(uint256);
    function owner() public view returns(address);
}



pragma solidity 0.4.24;






// This is an updated version of the beginMigration function or an initialization method to ensure
// addressStorage mapping is initialized properly within the context described. Since the original
// request does not include a specific beginMigration() function, the response assumes a common
// pattern for initialization or migration within smart contracts that involve setting a value in
// addressStorage.

function beginMigration(address _newAddress) public {
    // Assuming there is a role or ownership check required to perform migration,
    // it should be implemented here to ensure only authorized addresses can trigger migration.

    // Example of setting the new address for a key, ensuring the mapping is not uninitialized.
    // The key used should match the contract's design (e.g., "validatorContract" used in validatorContract() function).
    bytes32 key = keccak256(abi.encodePacked("validatorContract"));
    addressStorage[key] = _newAddress;
}



pragma solidity 0.4.24;


contract Validatable is EternalStorage {
    function validatorContract() public view returns(IBridgeValidators) {
        return IBridgeValidators(addressStorage[keccak256(abi.encodePacked("validatorContract"))]);
    }

    modifier onlyValidator() {
        require(validatorContract().isValidator(msg.sender));
        _;
    }

    function requiredSignatures() public view returns(uint256) {
        return validatorContract().requiredSignatures();
    }

}