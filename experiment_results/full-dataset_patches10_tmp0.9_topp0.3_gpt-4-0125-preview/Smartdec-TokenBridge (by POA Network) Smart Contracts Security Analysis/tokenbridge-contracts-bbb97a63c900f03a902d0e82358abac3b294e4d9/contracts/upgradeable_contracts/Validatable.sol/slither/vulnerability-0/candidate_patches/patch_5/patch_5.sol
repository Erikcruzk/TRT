pragma solidity 0.4.24;


interface IBridgeValidators {
    function isValidator(address _validator) public view returns(bool);
    function requiredSignatures() public view returns(uint256);
    function owner() public view returns(address);
}



pragma solidity 0.4.24;






// This is not applicable as the provided code does not include a `beginMigration` function or any other explicit function with vulnerabilities related to the uninitialized-state issue indicated. The reported issue is regarding the pattern of state variable initialization and usage across the contract, not a specific function's vulnerability.



pragma solidity 0.4.24;


contract Validatable is EternalStorage {
    function validatorContract() public view returns(IBridgeValidators) {
        return IBridgeValidators(addressStorage[keccak256(abi.encodePacked("validatorContract"))]);
    }

    modifier onlyValidator() {
        require(validatorContract().isValidator(msg.sender));
        _;
    }

    function requiredSignatures() public view returns(uint256) {
        return validatorContract().requiredSignatures();
    }

}