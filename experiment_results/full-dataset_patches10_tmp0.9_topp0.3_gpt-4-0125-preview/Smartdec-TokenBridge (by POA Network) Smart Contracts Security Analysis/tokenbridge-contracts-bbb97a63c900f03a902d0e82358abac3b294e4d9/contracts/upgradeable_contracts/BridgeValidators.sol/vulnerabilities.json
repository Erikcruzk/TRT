{
  "smartbugs_completed": "No vulnerabilities found",
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract BaseBridgeValidators is EternalStorage, Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 268,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < _initialValidators.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 274,
          "vulnerability_to_line": null,
          "vulnerability_code": "                if (_initialValidators.length == 1) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 277,
          "vulnerability_to_line": null,
          "vulnerability_code": "            } else if (i == _initialValidators.length - 1) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 268,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < _initialValidators.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 175,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_validator != address(0) && _validator != F_ADDR);\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 269,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_initialValidators[i] != address(0) && _initialValidators[i] != F_ADDR);\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 164,
          "vulnerability_to_line": null,
          "vulnerability_code": "            counter++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 268,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < _initialValidators.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_24"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": 60,
          "vulnerability_code": "    function transferOwnership(address newOwner) public onlyOwner {\n\n        require(newOwner != address(0));\n\n        setOwner(newOwner);\n",
          "message": "Ownable.transferOwnership (BridgeValidators.sol#57-60) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 147,
          "vulnerability_to_line": 153,
          "vulnerability_code": "    function getBridgeValidatorsInterfacesVersion()\n\n    public\n\n    pure\n\n    returns (uint64 major, uint64 minor, uint64 patch)\n\n    {\n\n        return (2, 2, 0);\n",
          "message": "BaseBridgeValidators.getBridgeValidatorsInterfacesVersion (BridgeValidators.sol#147-153) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": 172,
          "vulnerability_code": "    function validatorList() public view returns (address[]) {\n\n        address [] memory list = new address[](validatorCount());\n\n        uint256 counter = 0;\n\n        address nextValidator = getNextValidator(F_ADDR);\n\n        require(nextValidator != address(0));\n\n\n\n        while (nextValidator != F_ADDR) {\n\n            list[counter] = nextValidator;\n\n            nextValidator = getNextValidator(nextValidator);\n\n            counter++;\n\n\n\n            if (nextValidator == address(0) ) {\n\n                revert();\n\n            }\n\n        }\n\n\n\n        return list;\n",
          "message": "BaseBridgeValidators.validatorList (BridgeValidators.sol#155-172) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 223,
          "vulnerability_to_line": 225,
          "vulnerability_code": "    function deployedAtBlock() public view returns (uint256) {\n\n        return uintStorage[keccak256(\"deployedAtBlock\")];\n",
          "message": "BaseBridgeValidators.deployedAtBlock (BridgeValidators.sol#223-225) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 254,
          "vulnerability_to_line": 294,
          "vulnerability_code": "    function initialize(\n\n        uint256 _requiredSignatures,\n\n        address[] _initialValidators,\n\n        address _owner\n\n    )\n\n        public\n\n        returns (bool)\n\n    {\n\n        require(!isInitialized());\n\n        require(_owner != address(0));\n\n        setOwner(_owner);\n\n        require(_requiredSignatures != 0);\n\n        require(_initialValidators.length >= _requiredSignatures);\n\n\n\n        for (uint256 i = 0; i < _initialValidators.length; i++) {\n\n            require(_initialValidators[i] != address(0) && _initialValidators[i] != F_ADDR);\n\n            require(!isValidator(_initialValidators[i]));\n\n\n\n            if (i == 0) {\n\n                setNextValidator(F_ADDR, _initialValidators[i]);\n\n                if (_initialValidators.length == 1) {\n\n                    setNextValidator(_initialValidators[i], F_ADDR);\n\n                }\n\n            } else if (i == _initialValidators.length - 1) {\n\n                setNextValidator(_initialValidators[i - 1], _initialValidators[i]);\n\n                setNextValidator(_initialValidators[i], F_ADDR);\n\n            } else {\n\n                setNextValidator(_initialValidators[i - 1], _initialValidators[i]);\n\n            }\n\n\n\n            setValidatorCount(validatorCount().add(1));\n\n            emit ValidatorAdded(_initialValidators[i]);\n\n        }\n\n\n\n        uintStorage[keccak256(abi.encodePacked(\"requiredSignatures\"))] = _requiredSignatures;\n\n        uintStorage[keccak256(\"deployedAtBlock\")] = block.number;\n\n        setInitialize(true);\n\n        emit RequiredSignaturesChanged(_requiredSignatures);\n\n\n\n        return isInitialized();\n",
          "message": "BridgeValidators.initialize (BridgeValidators.sol#254-294) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 137,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setRequiredSignatures(uint256 _requiredSignatures)\n",
          "message": "Parameter '_requiredSignatures' of BaseBridgeValidators.setRequiredSignatures (BridgeValidators.sol#137) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 174,
          "vulnerability_to_line": 183,
          "vulnerability_code": "    function _addValidator(address _validator) internal {\n\n        require(_validator != address(0) && _validator != F_ADDR);\n\n        require(!isValidator(_validator));\n\n\n\n        address firstValidator = getNextValidator(F_ADDR);\n\n        require(firstValidator != address(0));\n\n        setNextValidator(_validator, firstValidator);\n\n        setNextValidator(F_ADDR, _validator);\n\n        setValidatorCount(validatorCount().add(1));\n",
          "message": "Function 'BaseBridgeValidators._addValidator' (BridgeValidators.sol#174-183) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 174,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _addValidator(address _validator) internal {\n",
          "message": "Parameter '_validator' of BaseBridgeValidators._addValidator (BridgeValidators.sol#174) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 185,
          "vulnerability_to_line": 205,
          "vulnerability_code": "    function _removeValidator(address _validator) internal {\n\n        require(validatorCount() > requiredSignatures());\n\n        require(isValidator(_validator));\n\n        address validatorsNext = getNextValidator(_validator);\n\n        address index = F_ADDR;\n\n        address next = getNextValidator(index);\n\n        require(next != address(0));\n\n\n\n        while (next != _validator) {\n\n            index = next;\n\n            next = getNextValidator(index);\n\n\n\n            if (next == F_ADDR || next == address(0) ) {\n\n                revert();\n\n            }\n\n        }\n\n\n\n        setNextValidator(index, validatorsNext);\n\n        deleteItemFromAddressStorage(\"validatorsList\", _validator);\n\n        setValidatorCount(validatorCount().sub(1));\n",
          "message": "Function 'BaseBridgeValidators._removeValidator' (BridgeValidators.sol#185-205) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 185,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _removeValidator(address _validator) internal {\n",
          "message": "Parameter '_validator' of BaseBridgeValidators._removeValidator (BridgeValidators.sol#185) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isValidator(address _validator) public view returns (bool) {\n",
          "message": "Parameter '_validator' of BaseBridgeValidators.isValidator (BridgeValidators.sol#215) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 227,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getNextValidator(address _address) public view returns (address) {\n",
          "message": "Parameter '_address' of BaseBridgeValidators.getNextValidator (BridgeValidators.sol#227) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 231,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deleteItemFromAddressStorage(string _mapName, address _address) internal {\n",
          "message": "Parameter '_mapName' of BaseBridgeValidators.deleteItemFromAddressStorage (BridgeValidators.sol#231) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 231,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deleteItemFromAddressStorage(string _mapName, address _address) internal {\n",
          "message": "Parameter '_address' of BaseBridgeValidators.deleteItemFromAddressStorage (BridgeValidators.sol#231) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 235,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setValidatorCount(uint256 _validatorCount) internal {\n",
          "message": "Parameter '_validatorCount' of BaseBridgeValidators.setValidatorCount (BridgeValidators.sol#235) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 239,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setNextValidator(address _prevValidator, address _validator) internal {\n",
          "message": "Parameter '_prevValidator' of BaseBridgeValidators.setNextValidator (BridgeValidators.sol#239) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 239,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setNextValidator(address _prevValidator, address _validator) internal {\n",
          "message": "Parameter '_validator' of BaseBridgeValidators.setNextValidator (BridgeValidators.sol#239) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 243,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setInitialize(bool _status) internal {\n",
          "message": "Parameter '_status' of BaseBridgeValidators.setInitialize (BridgeValidators.sol#243) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 255,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _requiredSignatures,\n",
          "message": "Parameter '_requiredSignatures' of BridgeValidators.initialize (BridgeValidators.sol#255) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 256,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] _initialValidators,\n",
          "message": "Parameter '_initialValidators' of BridgeValidators.initialize (BridgeValidators.sol#256) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 257,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _owner\n",
          "message": "Parameter '_owner' of BridgeValidators.initialize (BridgeValidators.sol#257) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 296,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addValidator(address _validator) external onlyOwner {\n",
          "message": "Parameter '_validator' of BridgeValidators.addValidator (BridgeValidators.sol#296) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 301,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function removeValidator(address _validator) external onlyOwner {\n",
          "message": "Parameter '_validator' of BridgeValidators.removeValidator (BridgeValidators.sol#301) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes32 => string) internal stringStorage;\n",
          "message": "EternalStorage.stringStorage (BridgeValidators.sol#13) is never used in BridgeValidators\nEternalStorage.bytesStorage (BridgeValidators.sol#15) is never used in BridgeValidators\nEternalStorage.intStorage (BridgeValidators.sol#17) is never used in BridgeValidators\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 131,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address public constant F_ADDR = 0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 268,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < _initialValidators.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 161,
          "vulnerability_to_line": null,
          "vulnerability_code": "        while (nextValidator != F_ADDR) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 268,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < _initialValidators.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 161,
          "vulnerability_to_line": null,
          "vulnerability_code": "        while (nextValidator != F_ADDR) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 193,
          "vulnerability_to_line": null,
          "vulnerability_code": "        while (next != _validator) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 137,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setRequiredSignatures(uint256 _requiredSignatures)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 166,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (nextValidator == address(0) ) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 197,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (next == F_ADDR || next == address(0) ) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function validatorList() public view returns (address[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 231,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deleteItemFromAddressStorage(string _mapName, address _address) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 256,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] _initialValidators,\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function validatorCount() public view returns (uint256) {\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 212,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return uintStorage[keccak256(abi.encodePacked(\"validatorCount\"))];\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function validatorCount() public view returns (uint256) {\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 212,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return uintStorage[keccak256(abi.encodePacked(\"validatorCount\"))];\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function owner() public view returns (address) {\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return addressStorage[keccak256(abi.encodePacked(\"owner\"))];\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function validatorList() public view returns (address[]) {\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 156,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address [] memory list = new address[](validatorCount());\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return addressStorage[keccak256(abi.encodePacked(\"validatorsList\", _address))];\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function validatorList() public view returns (address[]) {\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 156,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address [] memory list = new address[](validatorCount());\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return addressStorage[keccak256(abi.encodePacked(\"validatorsList\", _address))];\n",
          "message": null
        }
      ]
    }
  }
}