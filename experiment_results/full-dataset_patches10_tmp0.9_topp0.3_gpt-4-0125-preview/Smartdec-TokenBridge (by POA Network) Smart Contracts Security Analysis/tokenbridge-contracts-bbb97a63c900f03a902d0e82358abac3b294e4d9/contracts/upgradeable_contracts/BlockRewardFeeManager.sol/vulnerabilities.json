{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_23"
      ],
      "vulnerability_findings": [
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes32 => address) internal addressStorage;\n",
          "message": "EternalStorage.addressStorage (BlockRewardFeeManager.sol#14) is never initialized. It is used in:\n\t- _blockRewardContract (BlockRewardFeeManager.sol#177-179)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isValidator(address _validator) public view returns(bool);\n",
          "message": "IRewardableValidators.isValidator (BlockRewardFeeManager.sol#78) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 79,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function requiredSignatures() public view returns(uint256);\n",
          "message": "IRewardableValidators.requiredSignatures (BlockRewardFeeManager.sol#79) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function owner() public view returns(address);\n",
          "message": "IRewardableValidators.owner (BlockRewardFeeManager.sol#80) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function validatorList() public view returns (address[]);\n",
          "message": "IRewardableValidators.validatorList (BlockRewardFeeManager.sol#81) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getValidatorRewardAddress(address _validator) public view returns(address);\n",
          "message": "IRewardableValidators.getValidatorRewardAddress (BlockRewardFeeManager.sol#82) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function validatorCount() public view returns (uint256);\n",
          "message": "IRewardableValidators.validatorCount (BlockRewardFeeManager.sol#83) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getNextValidator(address _address) public view returns (address);\n",
          "message": "IRewardableValidators.getNextValidator (BlockRewardFeeManager.sol#84) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": 117,
          "vulnerability_code": "    function calculateFee(uint256 _value, bool _recover, bytes32 _feeType) public view returns(uint256) {\n\n        uint256 fee = _feeType == HOME_FEE ? getHomeFee() : getForeignFee();\n\n        uint256 eth = 1 ether;\n\n        if (!_recover) {\n\n            return _value.mul(fee).div(eth);\n\n        }\n\n        return _value.mul(fee).div(eth.sub(fee));\n",
          "message": "BaseFeeManager.calculateFee (BlockRewardFeeManager.sol#110-117) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getFeeManagerMode() public pure returns(bytes4);\n",
          "message": "BaseFeeManager.getFeeManagerMode (BlockRewardFeeManager.sol#141) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": 145,
          "vulnerability_code": "    function random(uint256 _count) public view returns(uint256) {\n\n        return uint256(blockhash(block.number.sub(1))) % _count;\n",
          "message": "BaseFeeManager.random (BlockRewardFeeManager.sol#143-145) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mintedTotally() public view returns (uint256);\n",
          "message": "IBlockReward.mintedTotally (BlockRewardFeeManager.sol#155) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 156,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mintedTotallyByBridge(address _bridge) public view returns(uint256);\n",
          "message": "IBlockReward.mintedTotallyByBridge (BlockRewardFeeManager.sol#156) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function calculateFee(uint256 _value, bool _recover, bytes32 _feeType) public view returns(uint256) {\n",
          "message": "Parameter '_value' of BaseFeeManager.calculateFee (BlockRewardFeeManager.sol#110) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function calculateFee(uint256 _value, bool _recover, bytes32 _feeType) public view returns(uint256) {\n",
          "message": "Parameter '_recover' of BaseFeeManager.calculateFee (BlockRewardFeeManager.sol#110) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function calculateFee(uint256 _value, bool _recover, bytes32 _feeType) public view returns(uint256) {\n",
          "message": "Parameter '_feeType' of BaseFeeManager.calculateFee (BlockRewardFeeManager.sol#110) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 119,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setHomeFee(uint256 _fee) external {\n",
          "message": "Parameter '_fee' of BaseFeeManager.setHomeFee (BlockRewardFeeManager.sol#119) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setForeignFee(uint256 _fee) external {\n",
          "message": "Parameter '_fee' of BaseFeeManager.setForeignFee (BlockRewardFeeManager.sol#128) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function random(uint256 _count) public view returns(uint256) {\n",
          "message": "Parameter '_count' of BaseFeeManager.random (BlockRewardFeeManager.sol#143) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 169,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function distributeFeeFromAffirmation(uint256 _fee) external {\n",
          "message": "Parameter '_fee' of BlockRewardFeeManager.distributeFeeFromAffirmation (BlockRewardFeeManager.sol#169) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function distributeFeeFromSignatures(uint256 _fee) external {\n",
          "message": "Parameter '_fee' of BlockRewardFeeManager.distributeFeeFromSignatures (BlockRewardFeeManager.sol#173) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 177,
          "vulnerability_to_line": 179,
          "vulnerability_code": "    function _blockRewardContract() internal view returns(IBlockReward) {\n\n        return IBlockReward(addressStorage[keccak256(abi.encodePacked(\"blockRewardContract\"))]);\n",
          "message": "Function 'BlockRewardFeeManager._blockRewardContract' (BlockRewardFeeManager.sol#177-179) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes32 => string) internal stringStorage;\n",
          "message": "EternalStorage.stringStorage (BlockRewardFeeManager.sol#13) is never used in BlockRewardFeeManager\nEternalStorage.bytesStorage (BlockRewardFeeManager.sol#15) is never used in BlockRewardFeeManager\nEternalStorage.boolStorage (BlockRewardFeeManager.sol#16) is never used in BlockRewardFeeManager\nEternalStorage.intStorage (BlockRewardFeeManager.sol#17) is never used in BlockRewardFeeManager\nFeeTypes.FOREIGN_FEE (BlockRewardFeeManager.sol#94) is never used in BlockRewardFeeManager\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function validatorList() public view returns (address[]);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isValidator(address _validator) public view returns(bool);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 79,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function requiredSignatures() public view returns(uint256);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function owner() public view returns(address);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function validatorList() public view returns (address[]);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getValidatorRewardAddress(address _validator) public view returns(address);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function validatorCount() public view returns (uint256);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getNextValidator(address _address) public view returns (address);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mintedTotally() public view returns (uint256);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 156,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mintedTotallyByBridge(address _bridge) public view returns(uint256);\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}