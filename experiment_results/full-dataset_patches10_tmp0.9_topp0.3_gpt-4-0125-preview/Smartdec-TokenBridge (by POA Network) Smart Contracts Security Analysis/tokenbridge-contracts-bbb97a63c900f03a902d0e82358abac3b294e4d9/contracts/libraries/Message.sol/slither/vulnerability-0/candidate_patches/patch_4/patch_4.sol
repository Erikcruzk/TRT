pragma solidity 0.4.24;


interface IBridgeValidators {
    function isValidator(address _validator) public view returns(bool);
    function requiredSignatures() public view returns(uint256);
    function owner() public view returns(address);
}



pragma solidity 0.4.24;

function hasEnoughValidSignatures(
    bytes _message,
    uint8[] _vs,
    bytes32[] _rs,
    bytes32[] _ss,
    IBridgeValidators _validatorContract) internal view {
    require(isMessageValid(_message));
    uint256 requiredSignatures = _validatorContract.requiredSignatures();
    require(_vs.length >= requiredSignatures);
    bytes32 hash = hashMessage(_message);
    address[] memory encounteredAddresses = new address[](requiredSignatures);

    for (uint256 i = 0; i < requiredSignatures; ) {
        address recoveredAddress = ecrecover(hash, _vs[i], _rs[i], _ss[i]);
        require(_validatorContract.isValidator(recoveredAddress));
        for (uint256 j = 0; j < i; j++) {
            require(encounteredAddresses[j] != recoveredAddress);
        }
        encounteredAddresses[i] = recoveredAddress;
        i++;
    }
}