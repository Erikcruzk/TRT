{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_8"
      ],
      "vulnerability_findings": [
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 t;\n",
          "message": "DummyERC20C.t (DummyERC20C.sol#7) is never initialized. It is used in:\n\t- totalSupply (DummyERC20C.sol#30-32)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n",
          "message": "DummyERC20C.add.a (local variable @ DummyERC20C.sol#19) shadows:\n\t- DummyERC20C.a (state variable @ DummyERC20C.sol#9)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n",
          "message": "DummyERC20C.add.b (local variable @ DummyERC20C.sol#19) shadows:\n\t- DummyERC20C.b (state variable @ DummyERC20C.sol#8)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n",
          "message": "DummyERC20C.sub.a (local variable @ DummyERC20C.sol#25) shadows:\n\t- DummyERC20C.a (state variable @ DummyERC20C.sol#9)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n",
          "message": "DummyERC20C.sub.b (local variable @ DummyERC20C.sol#25) shadows:\n\t- DummyERC20C.b (state variable @ DummyERC20C.sol#8)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 public decimals;\n",
          "message": "DummyERC20C.decimals should be constant (DummyERC20C.sol#13)\nDummyERC20C.name should be constant (DummyERC20C.sol#11)\nDummyERC20C.symbol should be constant (DummyERC20C.sol#12)\nDummyERC20C.t should be constant (DummyERC20C.sol#7)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 17,
          "vulnerability_code": "  function myAddress() public returns (address) {\n\n    return address(this);\n",
          "message": "DummyERC20C.myAddress (DummyERC20C.sol#15-17) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.8;\n",
          "message": "Detected issues with version pragma in DummyERC20C.sol:\n\t- pragma solidity^0.6.8 (DummyERC20C.sol#4): it allows old versions\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address spender, uint256 amount) external returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.8;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 t;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping(address => uint256) b;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping(address => mapping(address => uint256)) a;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}