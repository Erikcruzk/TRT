{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(balanceOf[msg.sender] >= _wad, \"WETH9: insufficient sender balance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(balanceOf[_src] >= _wad, \"WETH9: insufficient source balance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(allowance[_src][msg.sender] >= _wad, \"WETH9: invalid allowance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (_src != msg.sender && allowance[_src][msg.sender] != uint256(-1)) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(allowance[_src][msg.sender] >= _wad, \"WETH9: invalid allowance\");\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": null,
          "vulnerability_code": "            allowance[_src][msg.sender] -= _wad;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 119,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(balanceOf[msg.sender] >= _wad, \"WETH9: insufficient sender balance\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(balanceOf[_src] >= _wad, \"WETH9: insufficient source balance\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_14"
      ],
      "vulnerability_findings": [
        {
          "name": "constable-states",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 public decimals = 18;\n",
          "message": "WETH9.decimals should be constant (WETH9.sol#28)\nWETH9.name should be constant (WETH9.sol#26)\nWETH9.symbol should be constant (WETH9.sol#27)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": 70,
          "vulnerability_code": "    function withdraw(uint256 _wad) public {\n\n        require(balanceOf[msg.sender] >= _wad, \"WETH9: insufficient sender balance\");\n\n        balanceOf[msg.sender] -= _wad;\n\n        msg.sender.transfer(_wad);\n\n        emit Withdrawal(msg.sender, _wad);\n",
          "message": "WETH9.withdraw (WETH9.sol#65-70) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": 78,
          "vulnerability_code": "    function totalSupply() public view returns (uint256) {\n\n        return address(this).balance;\n",
          "message": "WETH9.totalSupply (WETH9.sol#76-78) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": 90,
          "vulnerability_code": "    function approve(address _guy, uint256 _wad) public returns (bool) {\n\n        allowance[msg.sender][_guy] = _wad;\n\n        emit Approval(msg.sender, _guy, _wad);\n\n        return true;\n",
          "message": "WETH9.approve (WETH9.sol#86-90) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": 100,
          "vulnerability_code": "    function transfer(address _dst, uint256 _wad) public returns (bool) {\n\n        return transferFrom(msg.sender, _dst, _wad);\n",
          "message": "WETH9.transfer (WETH9.sol#98-100) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.6.10;\n",
          "message": "Detected issues with version pragma in WETH9.sol:\n\t- pragma solidity0.6.10 (WETH9.sol#18): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(uint256 _wad) public {\n",
          "message": "Parameter '_wad' of WETH9.withdraw (WETH9.sol#65) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _guy, uint256 _wad) public returns (bool) {\n",
          "message": "Parameter '_guy' of WETH9.approve (WETH9.sol#86) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _guy, uint256 _wad) public returns (bool) {\n",
          "message": "Parameter '_wad' of WETH9.approve (WETH9.sol#86) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _dst, uint256 _wad) public returns (bool) {\n",
          "message": "Parameter '_dst' of WETH9.transfer (WETH9.sol#98) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _dst, uint256 _wad) public returns (bool) {\n",
          "message": "Parameter '_wad' of WETH9.transfer (WETH9.sol#98) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _src,\n",
          "message": "Parameter '_src' of WETH9.transferFrom (WETH9.sol#110) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _dst,\n",
          "message": "Parameter '_dst' of WETH9.transferFrom (WETH9.sol#111) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _wad\n",
          "message": "Parameter '_wad' of WETH9.transferFrom (WETH9.sol#112) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "    receive() external payable {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "        deposit();\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}