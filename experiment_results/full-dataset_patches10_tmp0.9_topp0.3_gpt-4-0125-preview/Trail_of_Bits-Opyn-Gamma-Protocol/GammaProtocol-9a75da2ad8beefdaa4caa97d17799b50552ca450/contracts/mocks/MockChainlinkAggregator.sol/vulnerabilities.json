{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(roundTimestamp[_roundId] != 0, \"No data present\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_8"
      ],
      "vulnerability_findings": [
        {
          "name": "constable-states",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public decimals = 8;\n",
          "message": "MockChainlinkAggregator.decimals should be constant (MockChainlinkAggregator.sol#12)\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.6.10;\n",
          "message": "Detected issues with version pragma in MockChainlinkAggregator.sol:\n\t- pragma solidity0.6.10 (MockChainlinkAggregator.sol#6): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getRoundData(uint80 _roundId)\n",
          "message": "Parameter '_roundId' of MockChainlinkAggregator.getRoundData (MockChainlinkAggregator.sol#21) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setRoundTimestamp(uint256 _roundId, uint256 _timestamp) external {\n",
          "message": "Parameter '_roundId' of MockChainlinkAggregator.setRoundTimestamp (MockChainlinkAggregator.sol#52) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setRoundTimestamp(uint256 _roundId, uint256 _timestamp) external {\n",
          "message": "Parameter '_timestamp' of MockChainlinkAggregator.setRoundTimestamp (MockChainlinkAggregator.sol#52) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setRoundAnswer(uint256 _roundId, int256 _answer) external {\n",
          "message": "Parameter '_roundId' of MockChainlinkAggregator.setRoundAnswer (MockChainlinkAggregator.sol#57) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setRoundAnswer(uint256 _roundId, int256 _answer) external {\n",
          "message": "Parameter '_answer' of MockChainlinkAggregator.setRoundAnswer (MockChainlinkAggregator.sol#57) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setLatestAnswer(int256 _answer) external {\n",
          "message": "Parameter '_answer' of MockChainlinkAggregator.setLatestAnswer (MockChainlinkAggregator.sol#61) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns (\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}