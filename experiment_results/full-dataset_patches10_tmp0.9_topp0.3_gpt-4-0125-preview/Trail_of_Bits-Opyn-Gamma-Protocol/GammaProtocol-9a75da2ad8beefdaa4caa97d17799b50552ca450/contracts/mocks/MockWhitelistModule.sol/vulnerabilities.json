{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!whitelistedCollateral[_collateral], \"Whitelist: Collateral already whitelisted\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!whitelistedCollateral[_collateral], \"Whitelist: Collateral already whitelisted\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_17"
      ],
      "vulnerability_findings": [
        {
          "name": "solc-version",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.6.10;\n",
          "message": "Detected issues with version pragma in MockWhitelistModule.sol:\n\t- pragma solidity0.6.10 (MockWhitelistModule.sol#4): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _underlying,\n",
          "message": "Parameter '_underlying' of MockWhitelistModule.whitelistProduct (MockWhitelistModule.sol#13) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _strike,\n",
          "message": "Parameter '_strike' of MockWhitelistModule.whitelistProduct (MockWhitelistModule.sol#14) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _collateral,\n",
          "message": "Parameter '_collateral' of MockWhitelistModule.whitelistProduct (MockWhitelistModule.sol#15) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool _isPut\n",
          "message": "Parameter '_isPut' of MockWhitelistModule.whitelistProduct (MockWhitelistModule.sol#16) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _underlying,\n",
          "message": "Parameter '_underlying' of MockWhitelistModule.isWhitelistedProduct (MockWhitelistModule.sol#24) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _strike,\n",
          "message": "Parameter '_strike' of MockWhitelistModule.isWhitelistedProduct (MockWhitelistModule.sol#25) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _collateral,\n",
          "message": "Parameter '_collateral' of MockWhitelistModule.isWhitelistedProduct (MockWhitelistModule.sol#26) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool _isPut\n",
          "message": "Parameter '_isPut' of MockWhitelistModule.isWhitelistedProduct (MockWhitelistModule.sol#27) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function whitelistOtoken(address _otoken) external {\n",
          "message": "Parameter '_otoken' of MockWhitelistModule.whitelistOtoken (MockWhitelistModule.sol#33) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isWhitelistedOtoken(address _otoken) external view returns (bool) {\n",
          "message": "Parameter '_otoken' of MockWhitelistModule.isWhitelistedOtoken (MockWhitelistModule.sol#37) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isWhitelistedCollateral(address _collateral) external view returns (bool) {\n",
          "message": "Parameter '_collateral' of MockWhitelistModule.isWhitelistedCollateral (MockWhitelistModule.sol#41) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function whitelistCollateral(address _collateral) external {\n",
          "message": "Parameter '_collateral' of MockWhitelistModule.whitelistCollateral (MockWhitelistModule.sol#45) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isWhitelistedCallee(address _callee) external view returns (bool) {\n",
          "message": "Parameter '_callee' of MockWhitelistModule.isWhitelistedCallee (MockWhitelistModule.sol#51) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function whitelistCallee(address _callee) external {\n",
          "message": "Parameter '_callee' of MockWhitelistModule.whitelistCallee (MockWhitelistModule.sol#55) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function blacklistCallee(address _callee) external {\n",
          "message": "Parameter '_callee' of MockWhitelistModule.blacklistCallee (MockWhitelistModule.sol#59) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => bool) public _isWhitelistedOtoken;\n",
          "message": "Variable 'MockWhitelistModule._isWhitelistedOtoken' (MockWhitelistModule.sol#7) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes32 => bool) private _isWhitelistedProduct;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => bool) private whitelistedCollateral;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => bool) private whitelistedCallee;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}