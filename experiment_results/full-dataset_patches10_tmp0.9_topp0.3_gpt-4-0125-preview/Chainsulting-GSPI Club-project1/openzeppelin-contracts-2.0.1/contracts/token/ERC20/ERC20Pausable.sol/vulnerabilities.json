{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 377,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor() internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 378,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _addPauser(msg.sender);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 379,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 423,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor() internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 424,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _paused = false;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 425,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_17"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 130,
          "vulnerability_to_line": 132,
          "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return _totalSupply;\n",
          "message": "ERC20.totalSupply (ERC20Pausable.sol#130-132) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function totalSupply() external view returns (uint256);\n",
          "message": "IERC20.totalSupply (ERC20Pausable.sol#10) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 139,
          "vulnerability_to_line": 141,
          "vulnerability_code": "  function balanceOf(address owner) public view returns (uint256) {\n\n    return _balances[owner];\n",
          "message": "ERC20.balanceOf (ERC20Pausable.sol#139-141) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address who) external view returns (uint256);\n",
          "message": "IERC20.balanceOf (ERC20Pausable.sol#12) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": 158,
          "vulnerability_code": "  function allowance(\n\n    address owner,\n\n    address spender\n\n   )\n\n    public\n\n    view\n\n    returns (uint256)\n\n  {\n\n    return _allowed[owner][spender];\n",
          "message": "ERC20.allowance (ERC20Pausable.sol#149-158) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": 15,
          "vulnerability_code": "  function allowance(address owner, address spender)\n",
          "message": "IERC20.allowance (ERC20Pausable.sol#14-15) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 390,
          "vulnerability_to_line": 392,
          "vulnerability_code": "  function addPauser(address account) public onlyPauser {\n\n    _addPauser(account);\n",
          "message": "PauserRole.addPauser (ERC20Pausable.sol#390-392) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 394,
          "vulnerability_to_line": 396,
          "vulnerability_code": "  function renouncePauser() public {\n\n    _removePauser(msg.sender);\n",
          "message": "PauserRole.renouncePauser (ERC20Pausable.sol#394-396) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 430,
          "vulnerability_to_line": 432,
          "vulnerability_code": "  function paused() public view returns(bool) {\n\n    return _paused;\n",
          "message": "Pausable.paused (ERC20Pausable.sol#430-432) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 453,
          "vulnerability_to_line": 456,
          "vulnerability_code": "  function pause() public onlyPauser whenNotPaused {\n\n    _paused = true;\n\n    emit Paused(msg.sender);\n",
          "message": "Pausable.pause (ERC20Pausable.sol#453-456) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 461,
          "vulnerability_to_line": 464,
          "vulnerability_code": "  function unpause() public onlyPauser whenPaused {\n\n    _paused = false;\n\n    emit Unpaused(msg.sender);\n",
          "message": "Pausable.unpause (ERC20Pausable.sol#461-464) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 262,
          "vulnerability_to_line": 269,
          "vulnerability_code": "  function _transfer(address from, address to, uint256 value) internal {\n\n    require(value <= _balances[from]);\n\n    require(to != address(0));\n\n\n\n    _balances[from] = _balances[from].sub(value);\n\n    _balances[to] = _balances[to].add(value);\n\n    emit Transfer(from, to, value);\n",
          "message": "Function 'ERC20._transfer' (ERC20Pausable.sol#262-269) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": 283,
          "vulnerability_code": "  function _mint(address account, uint256 value) internal {\n\n    require(account != 0);\n\n    _totalSupply = _totalSupply.add(value);\n\n    _balances[account] = _balances[account].add(value);\n\n    emit Transfer(address(0), account, value);\n",
          "message": "Function 'ERC20._mint' (ERC20Pausable.sol#278-283) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 291,
          "vulnerability_to_line": 298,
          "vulnerability_code": "  function _burn(address account, uint256 value) internal {\n\n    require(account != 0);\n\n    require(value <= _balances[account]);\n\n\n\n    _totalSupply = _totalSupply.sub(value);\n\n    _balances[account] = _balances[account].sub(value);\n\n    emit Transfer(account, address(0), value);\n",
          "message": "Function 'ERC20._burn' (ERC20Pausable.sol#291-298) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 307,
          "vulnerability_to_line": 315,
          "vulnerability_code": "  function _burnFrom(address account, uint256 value) internal {\n\n    require(value <= _allowed[account][msg.sender]);\n\n\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n\n    // this function needs to emit an event with the updated approval.\n\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n\n      value);\n\n    _burn(account, value);\n",
          "message": "Function 'ERC20._burnFrom' (ERC20Pausable.sol#307-315) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 398,
          "vulnerability_to_line": 401,
          "vulnerability_code": "  function _addPauser(address account) internal {\n\n    pausers.add(account);\n\n    emit PauserAdded(account);\n",
          "message": "Function 'PauserRole._addPauser' (ERC20Pausable.sol#398-401) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 403,
          "vulnerability_to_line": 406,
          "vulnerability_code": "  function _removePauser(address account) internal {\n\n    pausers.remove(account);\n\n    emit PauserRemoved(account);\n",
          "message": "Function 'PauserRole._removePauser' (ERC20Pausable.sol#403-406) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 179,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 501,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 367,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 411,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 469,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 121,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping (address => uint256) private _balances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping (address => mapping (address => uint256)) private _allowed;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 private _totalSupply;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 375,
          "vulnerability_to_line": null,
          "vulnerability_code": "  Roles.Role private pausers;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 421,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bool private _paused;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 119,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}