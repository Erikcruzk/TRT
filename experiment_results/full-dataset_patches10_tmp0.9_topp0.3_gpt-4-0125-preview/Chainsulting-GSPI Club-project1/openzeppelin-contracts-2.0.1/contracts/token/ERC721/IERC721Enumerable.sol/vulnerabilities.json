{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_13"
      ],
      "vulnerability_findings": [
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": 71,
          "vulnerability_code": "contract IERC721 is IERC165 {\n\n\n\n  event Transfer(\n\n    address indexed from,\n\n    address indexed to,\n\n    uint256 indexed tokenId\n\n  );\n\n  event Approval(\n\n    address indexed owner,\n\n    address indexed approved,\n\n    uint256 indexed tokenId\n\n  );\n\n  event ApprovalForAll(\n\n    address indexed owner,\n\n    address indexed operator,\n\n    bool approved\n\n  );\n\n\n\n  function balanceOf(address owner) public view returns (uint256 balance);\n\n  function ownerOf(uint256 tokenId) public view returns (address owner);\n\n\n\n  function approve(address to, uint256 tokenId) public;\n\n  function getApproved(uint256 tokenId)\n\n    public view returns (address operator);\n\n\n\n  function setApprovalForAll(address operator, bool _approved) public;\n\n  function isApprovedForAll(address owner, address operator)\n\n    public view returns (bool);\n\n\n\n  function transferFrom(address from, address to, uint256 tokenId) public;\n\n  function safeTransferFrom(address from, address to, uint256 tokenId)\n\n    public;\n\n\n\n  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes data\n\n  )\n\n    public;\n",
          "message": "IERC721 (IERC721Enumerable.sol#31-71) has incorrect ERC20 function interface(s):\n\t-approve (IERC721Enumerable.sol#52)\n\t-transferFrom (IERC721Enumerable.sol#60)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address owner) public view returns (uint256 balance);\n",
          "message": "IERC721.balanceOf (IERC721Enumerable.sol#49) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function ownerOf(uint256 tokenId) public view returns (address owner);\n",
          "message": "IERC721.ownerOf (IERC721Enumerable.sol#50) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address to, uint256 tokenId) public;\n",
          "message": "IERC721.approve (IERC721Enumerable.sol#52) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": 54,
          "vulnerability_code": "  function getApproved(uint256 tokenId)\n",
          "message": "IERC721.getApproved (IERC721Enumerable.sol#53-54) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setApprovalForAll(address operator, bool _approved) public;\n",
          "message": "IERC721.setApprovalForAll (IERC721Enumerable.sol#56) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": 58,
          "vulnerability_code": "  function isApprovedForAll(address owner, address operator)\n",
          "message": "IERC721.isApprovedForAll (IERC721Enumerable.sol#57-58) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address from, address to, uint256 tokenId) public;\n",
          "message": "IERC721.transferFrom (IERC721Enumerable.sol#60) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": 62,
          "vulnerability_code": "  function safeTransferFrom(address from, address to, uint256 tokenId)\n",
          "message": "IERC721.safeTransferFrom (IERC721Enumerable.sol#61-62) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": 70,
          "vulnerability_code": "  function safeTransferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 tokenId,\n\n    bytes data\n\n  )\n",
          "message": "IERC721.safeTransferFrom (IERC721Enumerable.sol#64-70) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
          "message": "IERC721Enumerable.totalSupply (IERC721Enumerable.sol#82) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": 89,
          "vulnerability_code": "  function tokenOfOwnerByIndex(\n\n    address owner,\n\n    uint256 index\n\n  )\n\n    public\n\n    view\n",
          "message": "IERC721Enumerable.tokenOfOwnerByIndex (IERC721Enumerable.sol#83-89) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function tokenByIndex(uint256 index) public view returns (uint256);\n",
          "message": "IERC721Enumerable.tokenByIndex (IERC721Enumerable.sol#91) should be declared external\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes data\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "execution failed"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "input files do not contain any valid contracts"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}