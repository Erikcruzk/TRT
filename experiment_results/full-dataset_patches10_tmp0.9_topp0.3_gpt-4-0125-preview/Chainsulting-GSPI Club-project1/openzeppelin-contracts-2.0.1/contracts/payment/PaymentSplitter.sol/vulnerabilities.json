{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < payees.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < payees.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < payees.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_9"
      ],
      "vulnerability_findings": [
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": 167,
          "vulnerability_code": "  function release(address account) public {\n\n    require(_shares[account] > 0);\n\n\n\n    uint256 totalReceived = address(this).balance.add(_totalReleased);\n\n    uint256 payment = totalReceived.mul(\n\n      _shares[account]).div(\n\n        _totalShares).sub(\n\n          _released[account]\n\n    );\n\n\n\n    require(payment != 0);\n\n\n\n    _released[account] = _released[account].add(payment);\n\n    _totalReleased = _totalReleased.add(payment);\n\n\n\n    account.transfer(payment);\n\n    emit PaymentReleased(account, payment);\n",
          "message": "PaymentSplitter.release (PaymentSplitter.sol#150-167) sends eth to arbitrary user\n\tDangerous calls:\n\t- account.transfer(payment) (PaymentSplitter.sol#165)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(address[] payees, uint256[] shares) public payable {\n",
          "message": "PaymentSplitter.constructor.shares (local variable @ PaymentSplitter.sol#95) shadows:\n\t- PaymentSplitter.shares (function @ PaymentSplitter.sol#128-130)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": 116,
          "vulnerability_code": "  function totalShares() public view returns(uint256) {\n\n    return _totalShares;\n",
          "message": "PaymentSplitter.totalShares (PaymentSplitter.sol#114-116) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 121,
          "vulnerability_to_line": 123,
          "vulnerability_code": "  function totalReleased() public view returns(uint256) {\n\n    return _totalReleased;\n",
          "message": "PaymentSplitter.totalReleased (PaymentSplitter.sol#121-123) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": 130,
          "vulnerability_code": "  function shares(address account) public view returns(uint256) {\n\n    return _shares[account];\n",
          "message": "PaymentSplitter.shares (PaymentSplitter.sol#128-130) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": 137,
          "vulnerability_code": "  function released(address account) public view returns(uint256) {\n\n    return _released[account];\n",
          "message": "PaymentSplitter.released (PaymentSplitter.sol#135-137) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": 144,
          "vulnerability_code": "  function payee(uint256 index) public view returns(address) {\n\n    return _payees[index];\n",
          "message": "PaymentSplitter.payee (PaymentSplitter.sol#142-144) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": 167,
          "vulnerability_code": "  function release(address account) public {\n\n    require(_shares[account] > 0);\n\n\n\n    uint256 totalReceived = address(this).balance.add(_totalReleased);\n\n    uint256 payment = totalReceived.mul(\n\n      _shares[account]).div(\n\n        _totalShares).sub(\n\n          _released[account]\n\n    );\n\n\n\n    require(payment != 0);\n\n\n\n    _released[account] = _released[account].add(payment);\n\n    _totalReleased = _totalReleased.add(payment);\n\n\n\n    account.transfer(payment);\n\n    emit PaymentReleased(account, payment);\n",
          "message": "PaymentSplitter.release (PaymentSplitter.sol#150-167) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 174,
          "vulnerability_to_line": 183,
          "vulnerability_code": "  function _addPayee(address account, uint256 shares_) private {\n\n    require(account != address(0));\n\n    require(shares_ > 0);\n\n    require(_shares[account] == 0);\n\n\n\n    _payees.push(account);\n\n    _shares[account] = shares_;\n\n    _totalShares = _totalShares.add(shares_);\n\n    emit PayeeAdded(account, shares_);\n",
          "message": "Function 'PaymentSplitter._addPayee' (PaymentSplitter.sol#174-183) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < payees.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < payees.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 private _totalShares;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 private _totalReleased;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping(address => uint256) private _shares;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 89,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping(address => uint256) private _released;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address[] private _payees;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 79,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(address[] payees, uint256[] shares) public payable {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(address[] payees, uint256[] shares) public payable {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}