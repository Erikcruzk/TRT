{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "inefficient-state-variable-increment",
          "vulnerability_from_line": 540,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _guardCounter += 1;\n",
          "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 377,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor() internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 378,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _addMinter(msg.sender);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 379,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 526,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor() internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 527,
          "vulnerability_to_line": null,
          "vulnerability_code": "    // The counter starts at one to prevent changing it from zero to a non-zero\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 528,
          "vulnerability_to_line": null,
          "vulnerability_code": "    // value, which is a more expensive operation.\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 529,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _guardCounter = 1;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 530,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 608,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 609,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(rate > 0);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 610,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(wallet != address(0));\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 611,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(token != address(0));\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 612,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 613,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _rate = rate;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 614,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _wallet = wallet;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 615,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _token = token;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 616,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 818,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 819,
          "vulnerability_to_line": null,
          "vulnerability_code": "    // solium-disable-next-line security/no-block-members\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 820,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(openingTime >= block.timestamp);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 821,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(closingTime > openingTime);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 822,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 823,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _openingTime = openingTime;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 824,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _closingTime = closingTime;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 825,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 893,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor() internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 894,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _finalized = false;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 895,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 945,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor() internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 946,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _primary = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 947,
          "vulnerability_to_line": null,
          "vulnerability_code": "    emit PrimaryTransferred(_primary);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 948,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1082,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(address beneficiary) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1083,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(beneficiary != address(0));\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1084,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _beneficiary = beneficiary;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1085,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _state = State.Active;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1086,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1183,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(uint256 goal) internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1184,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(goal > 0);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1185,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _escrow = new RefundEscrow(wallet());\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1186,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _goal = goal;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1187,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1245,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor (\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1246,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 openingTime,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1247,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 closingTime,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1248,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 rate,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1249,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address wallet,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1250,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ERC20Mintable token,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1251,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 goal\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1252,
          "vulnerability_to_line": null,
          "vulnerability_code": "  )\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1253,
          "vulnerability_to_line": null,
          "vulnerability_code": "    public\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1254,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Crowdsale(rate, wallet, token)\n",
          "message": "Consider making costructor payable to save gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_66"
      ],
      "vulnerability_findings": [
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 1133,
          "vulnerability_to_line": 1138,
          "vulnerability_code": "  function beneficiaryWithdraw() public {\n\n    require(_state == State.Closed);\n\n    _beneficiary.transfer(address(this).balance);\n\n  }\n\n\n",
          "message": "RefundEscrow.beneficiaryWithdraw (RefundableCrowdsaleImpl.sol#1133-1138) sends eth to arbitrary user\n\tDangerous calls:\n\t- _beneficiary.transfer(address(this).balance) (RefundableCrowdsaleImpl.sol#1135-1136)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 608,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
          "message": "Crowdsale.constructor.rate (local variable @ RefundableCrowdsaleImpl.sol#608) shadows:\n\t- Crowdsale.rate (function @ RefundableCrowdsaleImpl.sol#649-652)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 608,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
          "message": "Crowdsale.constructor.wallet (local variable @ RefundableCrowdsaleImpl.sol#608) shadows:\n\t- Crowdsale.wallet (function @ RefundableCrowdsaleImpl.sol#642-645)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 608,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(uint256 rate, address wallet, IERC20 token) internal {\n",
          "message": "Crowdsale.constructor.token (local variable @ RefundableCrowdsaleImpl.sol#608) shadows:\n\t- Crowdsale.token (function @ RefundableCrowdsaleImpl.sol#635-638)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 818,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n",
          "message": "TimedCrowdsale.constructor.openingTime (local variable @ RefundableCrowdsaleImpl.sol#818) shadows:\n\t- TimedCrowdsale.openingTime (function @ RefundableCrowdsaleImpl.sol#830-833)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 818,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n",
          "message": "TimedCrowdsale.constructor.closingTime (local variable @ RefundableCrowdsaleImpl.sol#818) shadows:\n\t- TimedCrowdsale.closingTime (function @ RefundableCrowdsaleImpl.sol#837-840)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 1082,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(address beneficiary) public {\n",
          "message": "RefundEscrow.constructor.beneficiary (local variable @ RefundableCrowdsaleImpl.sol#1082) shadows:\n\t- RefundEscrow.beneficiary (function @ RefundableCrowdsaleImpl.sol#1098-1102)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 1183,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(uint256 goal) internal {\n",
          "message": "RefundableCrowdsale.constructor.goal (local variable @ RefundableCrowdsaleImpl.sol#1183) shadows:\n\t- RefundableCrowdsale.goal (function @ RefundableCrowdsaleImpl.sol#1192-1196)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 1246,
          "vulnerability_to_line": 1247,
          "vulnerability_code": "    uint256 openingTime,\n",
          "message": "RefundableCrowdsaleImpl.constructor.openingTime (local variable @ RefundableCrowdsaleImpl.sol#1246-1247) shadows:\n\t- TimedCrowdsale.openingTime (function @ RefundableCrowdsaleImpl.sol#830-833)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 1247,
          "vulnerability_to_line": 1248,
          "vulnerability_code": "    uint256 closingTime,\n",
          "message": "RefundableCrowdsaleImpl.constructor.closingTime (local variable @ RefundableCrowdsaleImpl.sol#1247-1248) shadows:\n\t- TimedCrowdsale.closingTime (function @ RefundableCrowdsaleImpl.sol#837-840)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 1248,
          "vulnerability_to_line": 1249,
          "vulnerability_code": "    uint256 rate,\n",
          "message": "RefundableCrowdsaleImpl.constructor.rate (local variable @ RefundableCrowdsaleImpl.sol#1248-1249) shadows:\n\t- Crowdsale.rate (function @ RefundableCrowdsaleImpl.sol#649-652)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 1249,
          "vulnerability_to_line": 1250,
          "vulnerability_code": "    address wallet,\n",
          "message": "RefundableCrowdsaleImpl.constructor.wallet (local variable @ RefundableCrowdsaleImpl.sol#1249-1250) shadows:\n\t- Crowdsale.wallet (function @ RefundableCrowdsaleImpl.sol#642-645)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 1250,
          "vulnerability_to_line": 1251,
          "vulnerability_code": "    ERC20Mintable token,\n",
          "message": "RefundableCrowdsaleImpl.constructor.token (local variable @ RefundableCrowdsaleImpl.sol#1250-1251) shadows:\n\t- Crowdsale.token (function @ RefundableCrowdsaleImpl.sol#635-638)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 1251,
          "vulnerability_to_line": 1252,
          "vulnerability_code": "    uint256 goal\n",
          "message": "RefundableCrowdsaleImpl.constructor.goal (local variable @ RefundableCrowdsaleImpl.sol#1251-1252) shadows:\n\t- RefundableCrowdsale.goal (function @ RefundableCrowdsaleImpl.sol#1192-1196)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 818,
          "vulnerability_to_line": 826,
          "vulnerability_code": "  constructor(uint256 openingTime, uint256 closingTime) internal {\n\n    // solium-disable-next-line security/no-block-members\n\n    require(openingTime >= block.timestamp);\n\n    require(closingTime > openingTime);\n\n\n\n    _openingTime = openingTime;\n\n    _closingTime = closingTime;\n\n  }\n",
          "message": "TimedCrowdsale.constructor (RefundableCrowdsaleImpl.sol#818-826) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(openingTime >= block.timestamp) (RefundableCrowdsaleImpl.sol#820)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 844,
          "vulnerability_to_line": 848,
          "vulnerability_code": "  function isOpen() public view returns (bool) {\n\n    // solium-disable-next-line security/no-block-members\n\n    return block.timestamp >= _openingTime && block.timestamp <= _closingTime;\n\n  }\n",
          "message": "TimedCrowdsale.isOpen (RefundableCrowdsaleImpl.sol#844-848) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp >= _openingTime && block.timestamp <= _closingTime (RefundableCrowdsaleImpl.sol#846)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 853,
          "vulnerability_to_line": 857,
          "vulnerability_code": "  function hasClosed() public view returns (bool) {\n\n    // solium-disable-next-line security/no-block-members\n\n    return block.timestamp > _closingTime;\n\n  }\n",
          "message": "TimedCrowdsale.hasClosed (RefundableCrowdsaleImpl.sol#853-857) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp > _closingTime (RefundableCrowdsaleImpl.sol#855)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 130,
          "vulnerability_to_line": 132,
          "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return _totalSupply;\n",
          "message": "ERC20.totalSupply (RefundableCrowdsaleImpl.sol#130-132) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function totalSupply() external view returns (uint256);\n",
          "message": "IERC20.totalSupply (RefundableCrowdsaleImpl.sol#10) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 139,
          "vulnerability_to_line": 141,
          "vulnerability_code": "  function balanceOf(address owner) public view returns (uint256) {\n\n    return _balances[owner];\n",
          "message": "ERC20.balanceOf (RefundableCrowdsaleImpl.sol#139-141) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address who) external view returns (uint256);\n",
          "message": "IERC20.balanceOf (RefundableCrowdsaleImpl.sol#12) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": 158,
          "vulnerability_code": "  function allowance(\n\n    address owner,\n\n    address spender\n\n   )\n\n    public\n\n    view\n\n    returns (uint256)\n\n  {\n\n    return _allowed[owner][spender];\n",
          "message": "ERC20.allowance (RefundableCrowdsaleImpl.sol#149-158) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": 15,
          "vulnerability_code": "  function allowance(address owner, address spender)\n",
          "message": "IERC20.allowance (RefundableCrowdsaleImpl.sol#14-15) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 165,
          "vulnerability_to_line": 168,
          "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool) {\n\n    _transfer(msg.sender, to, value);\n\n    return true;\n",
          "message": "ERC20.transfer (RefundableCrowdsaleImpl.sol#165-168) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address to, uint256 value) external returns (bool);\n",
          "message": "IERC20.transfer (RefundableCrowdsaleImpl.sol#17) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 179,
          "vulnerability_to_line": 185,
          "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool) {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = value;\n\n    emit Approval(msg.sender, spender, value);\n\n    return true;\n",
          "message": "ERC20.approve (RefundableCrowdsaleImpl.sol#179-185) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": 20,
          "vulnerability_code": "  function approve(address spender, uint256 value)\n",
          "message": "IERC20.approve (RefundableCrowdsaleImpl.sol#19-20) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 193,
          "vulnerability_to_line": 206,
          "vulnerability_code": "  function transferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 value\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(value <= _allowed[from][msg.sender]);\n\n\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n\n    _transfer(from, to, value);\n\n    return true;\n",
          "message": "ERC20.transferFrom (RefundableCrowdsaleImpl.sol#193-206) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": 23,
          "vulnerability_code": "  function transferFrom(address from, address to, uint256 value)\n",
          "message": "IERC20.transferFrom (RefundableCrowdsaleImpl.sol#22-23) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": 230,
          "vulnerability_code": "  function increaseAllowance(\n\n    address spender,\n\n    uint256 addedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = (\n\n      _allowed[msg.sender][spender].add(addedValue));\n\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n    return true;\n",
          "message": "ERC20.increaseAllowance (RefundableCrowdsaleImpl.sol#217-230) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 241,
          "vulnerability_to_line": 254,
          "vulnerability_code": "  function decreaseAllowance(\n\n    address spender,\n\n    uint256 subtractedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = (\n\n      _allowed[msg.sender][spender].sub(subtractedValue));\n\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n    return true;\n",
          "message": "ERC20.decreaseAllowance (RefundableCrowdsaleImpl.sol#241-254) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 390,
          "vulnerability_to_line": 392,
          "vulnerability_code": "  function addMinter(address account) public onlyMinter {\n\n    _addMinter(account);\n",
          "message": "MinterRole.addMinter (RefundableCrowdsaleImpl.sol#390-392) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 394,
          "vulnerability_to_line": 396,
          "vulnerability_code": "  function renounceMinter() public {\n\n    _removeMinter(msg.sender);\n",
          "message": "MinterRole.renounceMinter (RefundableCrowdsaleImpl.sol#394-396) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 425,
          "vulnerability_to_line": 435,
          "vulnerability_code": "  function mint(\n\n    address to,\n\n    uint256 value\n\n  )\n\n    public\n\n    onlyMinter\n\n    returns (bool)\n\n  {\n\n    _mint(to, value);\n\n    return true;\n",
          "message": "ERC20Mintable.mint (RefundableCrowdsaleImpl.sol#425-435) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 635,
          "vulnerability_to_line": 638,
          "vulnerability_code": "  function token() public view returns(IERC20) {\n\n    return _token;\n\n  }\n",
          "message": "Crowdsale.token (RefundableCrowdsaleImpl.sol#635-638) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 649,
          "vulnerability_to_line": 652,
          "vulnerability_code": "  function rate() public view returns(uint256) {\n\n    return _rate;\n\n  }\n",
          "message": "Crowdsale.rate (RefundableCrowdsaleImpl.sol#649-652) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 830,
          "vulnerability_to_line": 833,
          "vulnerability_code": "  function openingTime() public view returns(uint256) {\n\n    return _openingTime;\n\n  }\n",
          "message": "TimedCrowdsale.openingTime (RefundableCrowdsaleImpl.sol#830-833) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 837,
          "vulnerability_to_line": 840,
          "vulnerability_code": "  function closingTime() public view returns(uint256) {\n\n    return _closingTime;\n\n  }\n",
          "message": "TimedCrowdsale.closingTime (RefundableCrowdsaleImpl.sol#837-840) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 908,
          "vulnerability_to_line": 917,
          "vulnerability_code": "  function finalize() public {\n\n    require(!_finalized);\n\n    require(hasClosed());\n\n\n\n    _finalized = true;\n\n\n\n    _finalization();\n\n    emit CrowdsaleFinalized();\n\n  }\n",
          "message": "FinalizableCrowdsale.finalize (RefundableCrowdsaleImpl.sol#908-917) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 961,
          "vulnerability_to_line": 964,
          "vulnerability_code": "  function primary() public view returns (address) {\n\n    return _primary;\n\n  }\n",
          "message": "Secondary.primary (RefundableCrowdsaleImpl.sol#961-964) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 969,
          "vulnerability_to_line": 974,
          "vulnerability_code": "  function transferPrimary(address recipient) public onlyPrimary {\n\n    require(recipient != address(0));\n\n    _primary = recipient;\n\n    emit PrimaryTransferred(_primary);\n\n  }\n",
          "message": "Secondary.transferPrimary (RefundableCrowdsaleImpl.sol#969-974) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1001,
          "vulnerability_to_line": 1004,
          "vulnerability_code": "  function depositsOf(address payee) public view returns (uint256) {\n\n    return _deposits[payee];\n\n  }\n",
          "message": "Escrow.depositsOf (RefundableCrowdsaleImpl.sol#1001-1004) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1091,
          "vulnerability_to_line": 1095,
          "vulnerability_code": "  function state() public view returns (State) {\n\n    return _state;\n\n  }\n\n\n",
          "message": "RefundEscrow.state (RefundableCrowdsaleImpl.sol#1091-1095) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1098,
          "vulnerability_to_line": 1102,
          "vulnerability_code": "  function beneficiary() public view returns (address) {\n\n    return _beneficiary;\n\n  }\n\n\n",
          "message": "RefundEscrow.beneficiary (RefundableCrowdsaleImpl.sol#1098-1102) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1115,
          "vulnerability_to_line": 1121,
          "vulnerability_code": "  function close() public onlyPrimary {\n\n    require(_state == State.Active);\n\n    _state = State.Closed;\n\n    emit RefundsClosed();\n\n  }\n\n\n",
          "message": "RefundEscrow.close (RefundableCrowdsaleImpl.sol#1115-1121) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1124,
          "vulnerability_to_line": 1130,
          "vulnerability_code": "  function enableRefunds() public onlyPrimary {\n\n    require(_state == State.Active);\n\n    _state = State.Refunding;\n\n    emit RefundsEnabled();\n\n  }\n\n\n",
          "message": "RefundEscrow.enableRefunds (RefundableCrowdsaleImpl.sol#1124-1130) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1133,
          "vulnerability_to_line": 1138,
          "vulnerability_code": "  function beneficiaryWithdraw() public {\n\n    require(_state == State.Closed);\n\n    _beneficiary.transfer(address(this).balance);\n\n  }\n\n\n",
          "message": "RefundEscrow.beneficiaryWithdraw (RefundableCrowdsaleImpl.sol#1133-1138) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1192,
          "vulnerability_to_line": 1196,
          "vulnerability_code": "  function goal() public view returns(uint256) {\n\n    return _goal;\n\n  }\n\n\n",
          "message": "RefundableCrowdsale.goal (RefundableCrowdsaleImpl.sol#1192-1196) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1200,
          "vulnerability_to_line": 1207,
          "vulnerability_code": "  function claimRefund(address beneficiary) public {\n\n    require(finalized());\n\n    require(!goalReached());\n\n\n\n    _escrow.withdraw(beneficiary);\n\n  }\n\n\n",
          "message": "RefundableCrowdsale.claimRefund (RefundableCrowdsaleImpl.sol#1200-1207) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 262,
          "vulnerability_to_line": 269,
          "vulnerability_code": "  function _transfer(address from, address to, uint256 value) internal {\n\n    require(value <= _balances[from]);\n\n    require(to != address(0));\n\n\n\n    _balances[from] = _balances[from].sub(value);\n\n    _balances[to] = _balances[to].add(value);\n\n    emit Transfer(from, to, value);\n",
          "message": "Function 'ERC20._transfer' (RefundableCrowdsaleImpl.sol#262-269) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": 283,
          "vulnerability_code": "  function _mint(address account, uint256 value) internal {\n\n    require(account != 0);\n\n    _totalSupply = _totalSupply.add(value);\n\n    _balances[account] = _balances[account].add(value);\n\n    emit Transfer(address(0), account, value);\n",
          "message": "Function 'ERC20._mint' (RefundableCrowdsaleImpl.sol#278-283) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 291,
          "vulnerability_to_line": 298,
          "vulnerability_code": "  function _burn(address account, uint256 value) internal {\n\n    require(account != 0);\n\n    require(value <= _balances[account]);\n\n\n\n    _totalSupply = _totalSupply.sub(value);\n\n    _balances[account] = _balances[account].sub(value);\n\n    emit Transfer(account, address(0), value);\n",
          "message": "Function 'ERC20._burn' (RefundableCrowdsaleImpl.sol#291-298) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 307,
          "vulnerability_to_line": 315,
          "vulnerability_code": "  function _burnFrom(address account, uint256 value) internal {\n\n    require(value <= _allowed[account][msg.sender]);\n\n\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n\n    // this function needs to emit an event with the updated approval.\n\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n\n      value);\n\n    _burn(account, value);\n",
          "message": "Function 'ERC20._burnFrom' (RefundableCrowdsaleImpl.sol#307-315) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 398,
          "vulnerability_to_line": 401,
          "vulnerability_code": "  function _addMinter(address account) internal {\n\n    minters.add(account);\n\n    emit MinterAdded(account);\n",
          "message": "Function 'MinterRole._addMinter' (RefundableCrowdsaleImpl.sol#398-401) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 403,
          "vulnerability_to_line": 406,
          "vulnerability_code": "  function _removeMinter(address account) internal {\n\n    minters.remove(account);\n\n    emit MinterRemoved(account);\n",
          "message": "Function 'MinterRole._removeMinter' (RefundableCrowdsaleImpl.sol#403-406) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 703,
          "vulnerability_to_line": 713,
          "vulnerability_code": "  function _preValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    require(beneficiary != address(0));\n\n    require(weiAmount != 0);\n\n  }\n",
          "message": "Function 'Crowdsale._preValidatePurchase' (RefundableCrowdsaleImpl.sol#703-713) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 719,
          "vulnerability_to_line": 728,
          "vulnerability_code": "  function _postValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    view\n\n  {\n\n    // optional override\n\n  }\n",
          "message": "Function 'Crowdsale._postValidatePurchase' (RefundableCrowdsaleImpl.sol#719-728) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 734,
          "vulnerability_to_line": 742,
          "vulnerability_code": "  function _deliverTokens(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _token.safeTransfer(beneficiary, tokenAmount);\n\n  }\n",
          "message": "Function 'Crowdsale._deliverTokens' (RefundableCrowdsaleImpl.sol#734-742) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 748,
          "vulnerability_to_line": 756,
          "vulnerability_code": "  function _processPurchase(\n\n    address beneficiary,\n\n    uint256 tokenAmount\n\n  )\n\n    internal\n\n  {\n\n    _deliverTokens(beneficiary, tokenAmount);\n\n  }\n",
          "message": "Function 'Crowdsale._processPurchase' (RefundableCrowdsaleImpl.sol#748-756) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 762,
          "vulnerability_to_line": 770,
          "vulnerability_code": "  function _updatePurchasingState(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n  {\n\n    // optional override\n\n  }\n",
          "message": "Function 'Crowdsale._updatePurchasingState' (RefundableCrowdsaleImpl.sol#762-770) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 776,
          "vulnerability_to_line": 781,
          "vulnerability_code": "  function _getTokenAmount(uint256 weiAmount)\n\n    internal view returns (uint256)\n\n  {\n\n    return weiAmount.mul(_rate);\n\n  }\n",
          "message": "Function 'Crowdsale._getTokenAmount' (RefundableCrowdsaleImpl.sol#776-781) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 785,
          "vulnerability_to_line": 788,
          "vulnerability_code": "  function _forwardFunds() internal {\n\n    _wallet.transfer(msg.value);\n\n  }\n",
          "message": "Function 'Crowdsale._forwardFunds' (RefundableCrowdsaleImpl.sol#785-788) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 863,
          "vulnerability_to_line": 873,
          "vulnerability_code": "  function _preValidatePurchase(\n\n    address beneficiary,\n\n    uint256 weiAmount\n\n  )\n\n    internal\n\n    onlyWhileOpen\n\n    view\n\n  {\n\n    super._preValidatePurchase(beneficiary, weiAmount);\n\n  }\n",
          "message": "Function 'TimedCrowdsale._preValidatePurchase' (RefundableCrowdsaleImpl.sol#863-873) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 923,
          "vulnerability_to_line": 925,
          "vulnerability_code": "  function _finalization() internal {\n\n  }\n",
          "message": "Function 'FinalizableCrowdsale._finalization' (RefundableCrowdsaleImpl.sol#923-925) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1232,
          "vulnerability_to_line": 1236,
          "vulnerability_code": "  function _forwardFunds() internal {\n\n    _escrow.deposit.value(msg.value)(msg.sender);\n\n  }\n\n\n",
          "message": "Function 'RefundableCrowdsale._forwardFunds' (RefundableCrowdsaleImpl.sol#1232-1236) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1218,
          "vulnerability_to_line": 1229,
          "vulnerability_code": "  function _finalization() internal {\n\n    if (goalReached()) {\n\n      _escrow.close();\n\n      _escrow.beneficiaryWithdraw();\n\n    } else {\n\n      _escrow.enableRefunds();\n\n    }\n\n\n\n    super._finalization();\n\n  }\n\n\n",
          "message": "Function 'RefundableCrowdsale._finalization' (RefundableCrowdsaleImpl.sol#1218-1229) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 179,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 367,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 411,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 440,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 513,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 550,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 792,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 878,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 929,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 978,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1033,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1056,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1148,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1240,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 121,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping (address => uint256) private _balances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping (address => mapping (address => uint256)) private _allowed;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 private _totalSupply;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 375,
          "vulnerability_to_line": null,
          "vulnerability_code": "  Roles.Role private minters;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 524,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 private _guardCounter;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 572,
          "vulnerability_to_line": null,
          "vulnerability_code": "  IERC20 private _token;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 575,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address private _wallet;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 581,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 private _rate;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 584,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 private _weiRaised;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 802,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 private _openingTime;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 803,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 private _closingTime;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 889,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bool private _finalized;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 936,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address private _primary;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 999,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping(address => uint256) private _deposits;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 1075,
          "vulnerability_to_line": null,
          "vulnerability_code": "  State private _state;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 1076,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address private _beneficiary;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 1174,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 private _goal;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 1177,
          "vulnerability_to_line": null,
          "vulnerability_code": "  RefundEscrow private _escrow;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 119,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 451,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 568,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 800,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 887,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 994,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 1171,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Transaction-Ordering Dependence (TOD)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Concurrency bug",
          "vulnerability_from_line": 1025,
          "vulnerability_to_line": null,
          "vulnerability_code": "    payee.transfer(payment);\n",
          "message": null
        },
        {
          "name": "Concurrency bug",
          "vulnerability_from_line": 1135,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _beneficiary.transfer(address(this).balance);\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 540,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _guardCounter += 1;\n",
          "message": null
        }
      ]
    }
  }
}