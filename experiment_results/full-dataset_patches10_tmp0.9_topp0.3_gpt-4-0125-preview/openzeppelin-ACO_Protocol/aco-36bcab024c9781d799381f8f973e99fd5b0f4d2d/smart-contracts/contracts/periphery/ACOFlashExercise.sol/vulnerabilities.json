{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 736,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, bytes memory returndata) = token.call(abi.encodeWithSelector(_approveSelector, spender, amount));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 747,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, bytes memory returndata) = token.call(abi.encodeWithSelector(_transferSelector, recipient, amount));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 312,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i; i < path.length - 1; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 323,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = path.length - 1; i > 0; i--) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 492,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _uniswapFactory, address _weth) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 493,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uniswapFactory = _uniswapFactory;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 494,
          "vulnerability_to_line": null,
          "vulnerability_code": "        weth = _weth;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 495,
          "vulnerability_to_line": null,
          "vulnerability_code": "        \n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 496,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _approveSelector = bytes4(keccak256(bytes(\"approve(address,uint256)\")));\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 497,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _transferSelector = bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 498,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 312,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i; i < path.length - 1; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 177,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 258,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 260,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 283,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 284,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 290,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 291,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 300,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 301,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 309,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 598,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(accounts.length > 0, \"ACOFlashExercise::flashExerciseAccounts: Accounts are required\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 615,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(sender == address(this), \"ACOFlashExercise::uniswapV2Call: Invalid sender\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 621,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == IUniswapV2Factory(uniswapFactory).getPair(token0, token1), \"ACOFlashExercise::uniswapV2Call: Invalid transaction sender\"); \n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 622,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(amount0Out == 0 || amount1Out == 0, \"ACOFlashExercise::uniswapV2Call: Invalid out amounts\"); \n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 641,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(expectedAmount == (amount1Out + amount0Out), \"ACOFlashExercise::uniswapV2Call: Invalid expected amount\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 644,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(amountRequired <= collateralAmount, \"ACOFlashExercise::uniswapV2Call: Insufficient collateral amount\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 647,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(remainingAmount >= minimumCollateral, \"ACOFlashExercise::uniswapV2Call: Minimum amount not satisfied\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 691,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(pair != address(0), \"ACOFlashExercise::_flashExercise: Invalid Uniswap pair\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 737,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success && (returndata.length == 0 || abi.decode(returndata, (bool))), \"ACOTokenExercise::_callApproveERC20\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 748,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success && (returndata.length == 0 || abi.decode(returndata, (bool))), \"ACOTokenExercise::_callTransferERC20\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 284,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 291,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 301,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 737,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success && (returndata.length == 0 || abi.decode(returndata, (bool))), \"ACOTokenExercise::_callApproveERC20\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 748,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success && (returndata.length == 0 || abi.decode(returndata, (bool))), \"ACOTokenExercise::_callTransferERC20\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 535,
          "vulnerability_to_line": null,
          "vulnerability_code": "                if (exerciseAddress == token0 && expectedAmount < reserve0) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 536,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    reserveIn = reserve1;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 537,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    reserveOut = reserve0;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 538,
          "vulnerability_to_line": null,
          "vulnerability_code": "                } else if (exerciseAddress == token1 && expectedAmount < reserve1) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 539,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    reserveIn = reserve0;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 540,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    reserveOut = reserve1;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 541,
          "vulnerability_to_line": null,
          "vulnerability_code": "                }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 538,
          "vulnerability_to_line": null,
          "vulnerability_code": "                } else if (exerciseAddress == token1 && expectedAmount < reserve1) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 539,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    reserveIn = reserve0;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 540,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    reserveOut = reserve1;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 541,
          "vulnerability_to_line": null,
          "vulnerability_code": "                }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 543,
          "vulnerability_to_line": null,
          "vulnerability_code": "                if (reserveIn > 0 && reserveOut > 0) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 544,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    uint256 amountRequired = UniswapV2Library.getAmountIn(expectedAmount, reserveIn, reserveOut);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 545,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    return (amountRequired, expectedAmount);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 546,
          "vulnerability_to_line": null,
          "vulnerability_code": "                }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 323,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = path.length - 1; i > 0; i--) {\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 312,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i; i < path.length - 1; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 177,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 258,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 283,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 284,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 290,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 291,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 300,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 301,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 598,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(accounts.length > 0, \"ACOFlashExercise::flashExerciseAccounts: Accounts are required\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 615,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(sender == address(this), \"ACOFlashExercise::uniswapV2Call: Invalid sender\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 621,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == IUniswapV2Factory(uniswapFactory).getPair(token0, token1), \"ACOFlashExercise::uniswapV2Call: Invalid transaction sender\"); \n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 622,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(amount0Out == 0 || amount1Out == 0, \"ACOFlashExercise::uniswapV2Call: Invalid out amounts\"); \n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 641,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(expectedAmount == (amount1Out + amount0Out), \"ACOFlashExercise::uniswapV2Call: Invalid expected amount\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 644,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(amountRequired <= collateralAmount, \"ACOFlashExercise::uniswapV2Call: Insufficient collateral amount\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 647,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(remainingAmount >= minimumCollateral, \"ACOFlashExercise::uniswapV2Call: Minimum amount not satisfied\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 691,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(pair != address(0), \"ACOFlashExercise::_flashExercise: Invalid Uniswap pair\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 737,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success && (returndata.length == 0 || abi.decode(returndata, (bool))), \"ACOTokenExercise::_callApproveERC20\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 748,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success && (returndata.length == 0 || abi.decode(returndata, (bool))), \"ACOTokenExercise::_callTransferERC20\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "uniswap-callback-not-protected",
          "vulnerability_from_line": 609,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function uniswapV2Call(\n",
          "message": "Uniswap callback is not protected"
        },
        {
          "name": "uniswap-callback-not-protected",
          "vulnerability_from_line": 610,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address sender, \n",
          "message": "Uniswap callback is not protected"
        },
        {
          "name": "uniswap-callback-not-protected",
          "vulnerability_from_line": 611,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 amount0Out, \n",
          "message": "Uniswap callback is not protected"
        },
        {
          "name": "uniswap-callback-not-protected",
          "vulnerability_from_line": 612,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 amount1Out, \n",
          "message": "Uniswap callback is not protected"
        },
        {
          "name": "uniswap-callback-not-protected",
          "vulnerability_from_line": 613,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata data\n",
          "message": "Uniswap callback is not protected"
        },
        {
          "name": "uniswap-callback-not-protected",
          "vulnerability_from_line": 614,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) external override {\n",
          "message": "Uniswap callback is not protected"
        },
        {
          "name": "uniswap-callback-not-protected",
          "vulnerability_from_line": 615,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(sender == address(this), \"ACOFlashExercise::uniswapV2Call: Invalid sender\");\n",
          "message": "Uniswap callback is not protected"
        },
        {
          "name": "uniswap-callback-not-protected",
          "vulnerability_from_line": 616,
          "vulnerability_to_line": null,
          "vulnerability_code": "        \n",
          "message": "Uniswap callback is not protected"
        },
        {
          "name": "uniswap-callback-not-protected",
          "vulnerability_from_line": 617,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 amountRequired;\n",
          "message": "Uniswap callback is not protected"
        },
        {
          "name": "uniswap-callback-not-protected",
          "vulnerability_from_line": 618,
          "vulnerability_to_line": null,
          "vulnerability_code": "        {\n",
          "message": "Uniswap callback is not protected"
        }
      ]
    },
    "slither": {
      "successfull_analysis": false,
      "errors": [
        "EXIT_CODE_255",
        "error parsing results: file could not be opened successfully"
      ],
      "vulnerability_findings": []
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 312,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i; i < path.length - 1; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.6;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.6;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.6;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.6;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.6;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 250,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.6;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.6;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 412,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.6;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 459,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.6;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 254,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function burn(address to) external returns (uint amount0, uint amount1);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 257,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 275,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 438,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getExerciseData(uint256 tokenAmount) external view returns(address, uint256);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 439,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getCollateralOnExercise(uint256 tokenAmount) external view returns(uint256, uint256);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 475,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address immutable public uniswapFactory;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 475,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address immutable public uniswapFactory;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 480,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address immutable public weth;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 480,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address immutable public weth;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 485,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 immutable internal _approveSelector;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 485,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 immutable internal _approveSelector;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 490,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 immutable internal _transferSelector;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 490,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 immutable internal _transferSelector;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 492,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _uniswapFactory, address _weth) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 492,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _uniswapFactory, address _weth) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 493,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uniswapFactory = _uniswapFactory;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 494,
          "vulnerability_to_line": null,
          "vulnerability_code": "        weth = _weth;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 496,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _approveSelector = bytes4(keccak256(bytes(\"approve(address,uint256)\")));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 496,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _approveSelector = bytes4(keccak256(bytes(\"approve(address,uint256)\")));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 496,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _approveSelector = bytes4(keccak256(bytes(\"approve(address,uint256)\")));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 496,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _approveSelector = bytes4(keccak256(bytes(\"approve(address,uint256)\")));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 497,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _transferSelector = bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 497,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _transferSelector = bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 497,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _transferSelector = bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 497,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _transferSelector = bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}