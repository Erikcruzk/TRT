{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 307,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(sender != address(0), \"ERC20::_transferAction: Invalid sender\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 308,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(recipient != address(0), \"ERC20::_transferAction: Invalid recipient\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 317,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(owner != address(0), \"ERC20::_approveAction: Invalid owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 318,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(spender != address(0), \"ERC20::_approveAction: Invalid spender\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 326,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(0), \"ERC20::_mintAction: Invalid account\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 335,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(0), \"ERC20::_burnAction: Invalid account\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 307,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(sender != address(0), \"ERC20::_transferAction: Invalid sender\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 308,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(recipient != address(0), \"ERC20::_transferAction: Invalid recipient\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 317,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(owner != address(0), \"ERC20::_approveAction: Invalid owner\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 318,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(spender != address(0), \"ERC20::_approveAction: Invalid spender\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 326,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(0), \"ERC20::_mintAction: Invalid account\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 335,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(0), \"ERC20::_burnAction: Invalid account\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_25"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 168,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function totalSupply() external view returns (uint256);\n",
          "message": "IERC20.totalSupply (ERC20.sol#168) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 255,
          "vulnerability_to_line": 257,
          "vulnerability_code": "    function totalSupply() public view override returns(uint256) {\n\n        return _totalSupply;\n",
          "message": "ERC20.totalSupply (ERC20.sol#255-257) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address account) external view returns (uint256);\n",
          "message": "IERC20.balanceOf (ERC20.sol#173) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 259,
          "vulnerability_to_line": 261,
          "vulnerability_code": "    function balanceOf(address account) public view override returns(uint256) {\n\n        return _balances[account];\n",
          "message": "ERC20.balanceOf (ERC20.sol#259-261) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 267,
          "vulnerability_to_line": 270,
          "vulnerability_code": "    function transfer(address recipient, uint256 amount) public override returns(bool) {\n\n        _transfer(msg.sender, recipient, amount);\n\n        return true;\n",
          "message": "ERC20.transfer (ERC20.sol#267-270) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 182,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address recipient, uint256 amount) external returns (bool);\n",
          "message": "IERC20.transfer (ERC20.sol#182) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 263,
          "vulnerability_to_line": 265,
          "vulnerability_code": "    function allowance(address owner, address spender) public view override returns(uint256) {\n\n        return _allowances[owner][spender];\n",
          "message": "ERC20.allowance (ERC20.sol#263-265) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 191,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address owner, address spender) external view returns (uint256);\n",
          "message": "IERC20.allowance (ERC20.sol#191) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": 281,
          "vulnerability_code": "    function approve(address spender, uint256 amount) public override returns(bool) {\n\n        _approve(msg.sender, spender, amount);\n\n        return true;\n",
          "message": "ERC20.approve (ERC20.sol#278-281) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 207,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address spender, uint256 amount) external returns (bool);\n",
          "message": "IERC20.approve (ERC20.sol#207) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 218,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n",
          "message": "IERC20.transferFrom (ERC20.sol#218) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 272,
          "vulnerability_to_line": 276,
          "vulnerability_code": "    function transferFrom(address sender, address recipient, uint256 amount) public override returns(bool) {\n\n        _approveAction(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n\n        _transfer(sender, recipient, amount);\n\n        return true;\n",
          "message": "ERC20.transferFrom (ERC20.sol#272-276) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 251,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function name() public view virtual returns(string memory);\n",
          "message": "ERC20.name (ERC20.sol#251) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function symbol() public view virtual returns(string memory);\n",
          "message": "ERC20.symbol (ERC20.sol#252) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 253,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decimals() public view virtual returns(uint8);\n",
          "message": "ERC20.decimals (ERC20.sol#253) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 283,
          "vulnerability_to_line": 286,
          "vulnerability_code": "    function increaseAllowance(address spender, uint256 amount) public returns(bool) {\n\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(amount));\n\n        return true;\n",
          "message": "ERC20.increaseAllowance (ERC20.sol#283-286) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 288,
          "vulnerability_to_line": 291,
          "vulnerability_code": "    function decreaseAllowance(address spender, uint256 amount) public returns(bool) {\n\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(amount));\n\n        return true;\n",
          "message": "ERC20.decreaseAllowance (ERC20.sol#288-291) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.6;\n",
          "message": "Detected issues with version pragma in ERC20.sol:\n\t- pragma solidity^0.6.6 (ERC20.sol#3): it allows old versions\n\t- pragma solidity^0.6.6 (ERC20.sol#157): it allows old versions\n\t- pragma solidity^0.6.6 (ERC20.sol#237): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 293,
          "vulnerability_to_line": 295,
          "vulnerability_code": "    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n\n        _transferAction(sender, recipient, amount);\n",
          "message": "Function 'ERC20._transfer' (ERC20.sol#293-295) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 297,
          "vulnerability_to_line": 299,
          "vulnerability_code": "    function _approve(address owner, address spender, uint256 amount) internal virtual {\n\n        _approveAction(owner, spender, amount);\n",
          "message": "Function 'ERC20._approve' (ERC20.sol#297-299) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 301,
          "vulnerability_to_line": 304,
          "vulnerability_code": "    function _burnFrom(address account, uint256 amount) internal {\n\n        _approveAction(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n\n        _burnAction(account, amount);\n",
          "message": "Function 'ERC20._burnFrom' (ERC20.sol#301-304) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 306,
          "vulnerability_to_line": 314,
          "vulnerability_code": "    function _transferAction(address sender, address recipient, uint256 amount) internal {\n\n        require(sender != address(0), \"ERC20::_transferAction: Invalid sender\");\n\n        require(recipient != address(0), \"ERC20::_transferAction: Invalid recipient\");\n\n\n\n        _balances[sender] = _balances[sender].sub(amount);\n\n        _balances[recipient] = _balances[recipient].add(amount);\n\n        \n\n        emit Transfer(sender, recipient, amount);\n",
          "message": "Function 'ERC20._transferAction' (ERC20.sol#306-314) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 316,
          "vulnerability_to_line": 323,
          "vulnerability_code": "    function _approveAction(address owner, address spender, uint256 amount) internal {\n\n        require(owner != address(0), \"ERC20::_approveAction: Invalid owner\");\n\n        require(spender != address(0), \"ERC20::_approveAction: Invalid spender\");\n\n\n\n        _allowances[owner][spender] = amount;\n\n        \n\n        emit Approval(owner, spender, amount);\n",
          "message": "Function 'ERC20._approveAction' (ERC20.sol#316-323) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 325,
          "vulnerability_to_line": 332,
          "vulnerability_code": "    function _mintAction(address account, uint256 amount) internal {\n\n        require(account != address(0), \"ERC20::_mintAction: Invalid account\");\n\n\n\n        _totalSupply = _totalSupply.add(amount);\n\n        _balances[account] = _balances[account].add(amount);\n\n        \n\n        emit Transfer(address(0), account, amount);\n",
          "message": "Function 'ERC20._mintAction' (ERC20.sol#325-332) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 334,
          "vulnerability_to_line": 341,
          "vulnerability_code": "    function _burnAction(address account, uint256 amount) internal {\n\n        require(account != address(0), \"ERC20::_burnAction: Invalid account\");\n\n\n\n        _balances[account] = _balances[account].sub(amount);\n\n        _totalSupply = _totalSupply.sub(amount);\n\n        \n\n        emit Transfer(account, address(0), amount);\n",
          "message": "Function 'ERC20._burnAction' (ERC20.sol#334-341) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address spender, uint256 amount) public override returns(bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.6;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.6;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 237,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.6;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 247,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _totalSupply;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 248,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => uint256) private _balances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 249,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => mapping (address => uint256)) private _allowances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 245,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}