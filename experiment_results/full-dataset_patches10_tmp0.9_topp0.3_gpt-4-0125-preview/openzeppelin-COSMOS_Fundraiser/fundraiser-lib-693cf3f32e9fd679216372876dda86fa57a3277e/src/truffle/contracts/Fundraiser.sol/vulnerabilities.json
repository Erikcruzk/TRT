{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "inefficient-state-variable-increment",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "        totalEther += msg.value;\n",
          "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
        },
        {
          "name": "inefficient-state-variable-increment",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "\ttotalAtom += atoms;\n",
          "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool public isHalted = false;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public totalEther = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public totalAtom = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_35"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": 111,
          "vulnerability_code": "    function donate(address _donor, address _returnAddress, bytes32 checksum) payable only_during_period is_not_dust {\n\n\t// checksum is the sha3 of the xor of the bytes32 versions of the cosmos address and the return address\n\n\tif (!(sha3(bytes32(_donor)^bytes32(_returnAddress)) == checksum)) throw;\n\n\n\n\t// forward the funds to the treasurer\n\n        // SWC-Reentrancy: L92\n\n        if (!treasury.call.value(msg.value)()) throw;\n\n\n\n\t// calculate the number of atoms at the current rate\n\n\tvar atoms = msg.value * atomRate;\n\n\n\n\t// update the donor details\n\n        record[_donor] += atoms;\n\n        returnAddresses[_donor] = _returnAddress; // XXX: overwrites\n\n\n\n\t// update the totals\n\n        totalEther += msg.value;\n\n\ttotalAtom += atoms;\n\n\n\n        Received(_donor, msg.value, atomRate);\n",
          "message": "Reentrancy in Fundraiser.donate (Fundraiser.sol#91-111):\n\tExternal calls:\n\t- ! treasury.call.value(msg.value)() (Fundraiser.sol#97)\n\tState variables written after the call(s):\n\t- record (Fundraiser.sol#103)\n\t- returnAddresses (Fundraiser.sol#104)\n\t- totalAtom (Fundraiser.sol#108)\n\t- totalEther (Fundraiser.sol#107)\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tthrow;\n",
          "message": "Deprecated standard detected @ Fundraiser.sol#86:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tif (!(sha3(bytes32(_donor)^bytes32(_returnAddress)) == checksum)) throw;\n",
          "message": "Deprecated standard detected @ Fundraiser.sol#93:\n\t- Usage of \"sha3()\" should be replaced with \"keccak256()\"\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tif (!(sha3(bytes32(_donor)^bytes32(_returnAddress)) == checksum)) throw;\n",
          "message": "Deprecated standard detected @ Fundraiser.sol#93:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (!treasury.call.value(msg.value)()) throw;\n",
          "message": "Deprecated standard detected @ Fundraiser.sol#97:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 133,
          "vulnerability_to_line": null,
          "vulnerability_code": "        suicide(treasury);\n",
          "message": "Deprecated standard detected @ Fundraiser.sol#133:\n\t- Usage of \"suicide()\" should be replaced with \"selfdestruct()\"\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "    modifier only_admin { if (msg.sender != admin) throw; _; }\n",
          "message": "Deprecated standard detected @ Fundraiser.sol#65:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "    modifier only_before_period { if (block.number >= beginBlock) throw; _; }\n",
          "message": "Deprecated standard detected @ Fundraiser.sol#67:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "    modifier only_during_period { if (block.number < beginBlock || block.number >= endBlock || isHalted) throw; _; }\n",
          "message": "Deprecated standard detected @ Fundraiser.sol#69:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": null,
          "vulnerability_code": "    modifier only_during_halted_period { if (block.number < beginBlock || block.number >= endBlock || !isHalted) throw; _; }\n",
          "message": "Deprecated standard detected @ Fundraiser.sol#71:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    modifier only_after_period { if (block.number < endBlock) throw; _; }\n",
          "message": "Deprecated standard detected @ Fundraiser.sol#73:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": null,
          "vulnerability_code": "    modifier is_not_dust { if (msg.value < dust) throw; _; }\n",
          "message": "Deprecated standard detected @ Fundraiser.sol#75:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": 87,
          "vulnerability_code": "    function() {\n\n\tthrow;\n",
          "message": "Fundraiser.fallback (Fundraiser.sol#85-87) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": 111,
          "vulnerability_code": "    function donate(address _donor, address _returnAddress, bytes32 checksum) payable only_during_period is_not_dust {\n\n\t// checksum is the sha3 of the xor of the bytes32 versions of the cosmos address and the return address\n\n\tif (!(sha3(bytes32(_donor)^bytes32(_returnAddress)) == checksum)) throw;\n\n\n\n\t// forward the funds to the treasurer\n\n        // SWC-Reentrancy: L92\n\n        if (!treasury.call.value(msg.value)()) throw;\n\n\n\n\t// calculate the number of atoms at the current rate\n\n\tvar atoms = msg.value * atomRate;\n\n\n\n\t// update the donor details\n\n        record[_donor] += atoms;\n\n        returnAddresses[_donor] = _returnAddress; // XXX: overwrites\n\n\n\n\t// update the totals\n\n        totalEther += msg.value;\n\n\ttotalAtom += atoms;\n\n\n\n        Received(_donor, msg.value, atomRate);\n",
          "message": "Fundraiser.donate (Fundraiser.sol#91-111) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": 117,
          "vulnerability_code": "    function adjustRate(uint newRate) only_admin only_during_period {\n\n\tatomRate = newRate;\n",
          "message": "Fundraiser.adjustRate (Fundraiser.sol#115-117) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 120,
          "vulnerability_to_line": 123,
          "vulnerability_code": "    function halt() only_admin only_during_period {\n\n        isHalted = true;\n\n        Halted();\n",
          "message": "Fundraiser.halt (Fundraiser.sol#120-123) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 126,
          "vulnerability_to_line": 129,
          "vulnerability_code": "    function unhalt() only_admin only_during_halted_period {\n\n        isHalted = false;\n\n        Unhalted();\n",
          "message": "Fundraiser.unhalt (Fundraiser.sol#126-129) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 132,
          "vulnerability_to_line": 134,
          "vulnerability_code": "    function kill() only_admin only_after_period {\n\n        suicide(treasury);\n",
          "message": "Fundraiser.kill (Fundraiser.sol#132-134) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.7;\n",
          "message": "Detected issues with version pragma in Fundraiser.sol:\n\t- pragma solidity^0.4.7 (Fundraiser.sol#11): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": 111,
          "vulnerability_code": "    function donate(address _donor, address _returnAddress, bytes32 checksum) payable only_during_period is_not_dust {\n\n\t// checksum is the sha3 of the xor of the bytes32 versions of the cosmos address and the return address\n\n\tif (!(sha3(bytes32(_donor)^bytes32(_returnAddress)) == checksum)) throw;\n\n\n\n\t// forward the funds to the treasurer\n\n        // SWC-Reentrancy: L92\n\n        if (!treasury.call.value(msg.value)()) throw;\n\n\n\n\t// calculate the number of atoms at the current rate\n\n\tvar atoms = msg.value * atomRate;\n\n\n\n\t// update the donor details\n\n        record[_donor] += atoms;\n\n        returnAddresses[_donor] = _returnAddress; // XXX: overwrites\n\n\n\n\t// update the totals\n\n        totalEther += msg.value;\n\n\ttotalAtom += atoms;\n\n\n\n        Received(_donor, msg.value, atomRate);\n",
          "message": "Low level call in Fundraiser.donate (Fundraiser.sol#91-111):\n\t-! treasury.call.value(msg.value)() Fundraiser.sol#97\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": 62,
          "vulnerability_code": "    function Fundraiser(address _admin, address _treasury, uint _beginBlock, uint _endBlock, uint _atomRate) {\n\n        admin = _admin;\n\n        treasury = _treasury;\n\n        beginBlock = _beginBlock;\n\n        endBlock = _endBlock;\n\n\tatomRate = _atomRate;\n",
          "message": "Function 'Fundraiser.Fundraiser' (Fundraiser.sol#56-62) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Fundraiser(address _admin, address _treasury, uint _beginBlock, uint _endBlock, uint _atomRate) {\n",
          "message": "Parameter '_admin' of Fundraiser.Fundraiser (Fundraiser.sol#56) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Fundraiser(address _admin, address _treasury, uint _beginBlock, uint _endBlock, uint _atomRate) {\n",
          "message": "Parameter '_treasury' of Fundraiser.Fundraiser (Fundraiser.sol#56) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Fundraiser(address _admin, address _treasury, uint _beginBlock, uint _endBlock, uint _atomRate) {\n",
          "message": "Parameter '_beginBlock' of Fundraiser.Fundraiser (Fundraiser.sol#56) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Fundraiser(address _admin, address _treasury, uint _beginBlock, uint _endBlock, uint _atomRate) {\n",
          "message": "Parameter '_endBlock' of Fundraiser.Fundraiser (Fundraiser.sol#56) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Fundraiser(address _admin, address _treasury, uint _beginBlock, uint _endBlock, uint _atomRate) {\n",
          "message": "Parameter '_atomRate' of Fundraiser.Fundraiser (Fundraiser.sol#56) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function donate(address _donor, address _returnAddress, bytes32 checksum) payable only_during_period is_not_dust {\n",
          "message": "Parameter '_donor' of Fundraiser.donate (Fundraiser.sol#91) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function donate(address _donor, address _returnAddress, bytes32 checksum) payable only_during_period is_not_dust {\n",
          "message": "Parameter '_returnAddress' of Fundraiser.donate (Fundraiser.sol#91) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public constant dust = 1 finney; // XXX: change for production\n",
          "message": "Constant 'Fundraiser.dust' (Fundraiser.sol#19) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "    modifier only_admin { if (msg.sender != admin) throw; _; }\n",
          "message": "Modifier 'Fundraiser.only_admin' (Fundraiser.sol#65) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "    modifier only_before_period { if (block.number >= beginBlock) throw; _; }\n",
          "message": "Modifier 'Fundraiser.only_before_period' (Fundraiser.sol#67) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "    modifier only_during_period { if (block.number < beginBlock || block.number >= endBlock || isHalted) throw; _; }\n",
          "message": "Modifier 'Fundraiser.only_during_period' (Fundraiser.sol#69) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": null,
          "vulnerability_code": "    modifier only_during_halted_period { if (block.number < beginBlock || block.number >= endBlock || !isHalted) throw; _; }\n",
          "message": "Modifier 'Fundraiser.only_during_halted_period' (Fundraiser.sol#71) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    modifier only_after_period { if (block.number < endBlock) throw; _; }\n",
          "message": "Modifier 'Fundraiser.only_after_period' (Fundraiser.sol#73) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": null,
          "vulnerability_code": "    modifier is_not_dust { if (msg.value < dust) throw; _; }\n",
          "message": "Modifier 'Fundraiser.is_not_dust' (Fundraiser.sol#75) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_CALL_WITHOUT_DATA",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (!treasury.call.value(msg.value)()) throw;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 133,
          "vulnerability_to_line": null,
          "vulnerability_code": "        suicide(treasury);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tif (!(sha3(bytes32(_donor)^bytes32(_returnAddress)) == checksum)) throw;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "    modifier only_admin { if (msg.sender != admin) throw; _; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "    modifier only_before_period { if (block.number >= beginBlock) throw; _; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "    modifier only_during_period { if (block.number < beginBlock || block.number >= endBlock || isHalted) throw; _; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": null,
          "vulnerability_code": "    modifier only_during_halted_period { if (block.number < beginBlock || block.number >= endBlock || !isHalted) throw; _; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    modifier only_after_period { if (block.number < endBlock) throw; _; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": null,
          "vulnerability_code": "    modifier is_not_dust { if (msg.value < dust) throw; _; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tthrow;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tif (!(sha3(bytes32(_donor)^bytes32(_returnAddress)) == checksum)) throw;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (!treasury.call.value(msg.value)()) throw;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.7;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REDUNDANT_FALLBACK_REJECT",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "    modifier only_admin { if (msg.sender != admin) throw; _; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "    modifier only_before_period { if (block.number >= beginBlock) throw; _; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "    modifier only_during_period { if (block.number < beginBlock || block.number >= endBlock || isHalted) throw; _; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": null,
          "vulnerability_code": "    modifier only_during_halted_period { if (block.number < beginBlock || block.number >= endBlock || !isHalted) throw; _; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    modifier only_after_period { if (block.number < endBlock) throw; _; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": null,
          "vulnerability_code": "    modifier is_not_dust { if (msg.value < dust) throw; _; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tif (!(sha3(bytes32(_donor)^bytes32(_returnAddress)) == checksum)) throw;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (!treasury.call.value(msg.value)()) throw;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (!treasury.call.value(msg.value)()) throw;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Fundraiser(address _admin, address _treasury, uint _beginBlock, uint _endBlock, uint _atomRate) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function donate(address _donor, address _returnAddress, bytes32 checksum) payable only_during_period is_not_dust {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function adjustRate(uint newRate) only_admin only_during_period {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 120,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function halt() only_admin only_during_period {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 126,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function unhalt() only_admin only_during_halted_period {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 132,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function kill() only_admin only_after_period {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Transaction-Ordering Dependence (TOD)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Dependence on predictable environment variable (SWC 120)",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    modifier only_after_period { if (block.number < endBlock) throw; _; }\n",
          "message": "A control flow decision is made based on The block.number environment variable.\nThe block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-120"
        },
        {
          "name": "Unprotected Selfdestruct (SWC 106)",
          "vulnerability_from_line": 133,
          "vulnerability_to_line": null,
          "vulnerability_code": "        suicide(treasury);\n",
          "message": "Any sender can cause the contract to self-destruct.\nAny sender can trigger execution of the SELFDESTRUCT instruction to destroy this contract account and withdraw its balance to an arbitrary address. Review the transaction trace generated for this issue and make sure that appropriate security controls are in place to prevent unrestricted access.\nClassification: SWC-106"
        },
        {
          "name": "Dependence on predictable environment variable (SWC 120)",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "    modifier only_during_period { if (block.number < beginBlock || block.number >= endBlock || isHalted) throw; _; }\n",
          "message": "A control flow decision is made based on The block.number environment variable.\nThe block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-120"
        },
        {
          "name": "Dependence on predictable environment variable (SWC 120)",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "    modifier only_during_period { if (block.number < beginBlock || block.number >= endBlock || isHalted) throw; _; }\n",
          "message": "A control flow decision is made based on The block.number environment variable.\nThe block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-120"
        },
        {
          "name": "Dependence on predictable environment variable (SWC 120)",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "    modifier only_during_period { if (block.number < beginBlock || block.number >= endBlock || isHalted) throw; _; }\n",
          "message": "A control flow decision is made based on The block.number environment variable.\nThe block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-120"
        },
        {
          "name": "Dependence on predictable environment variable (SWC 120)",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "    modifier only_during_period { if (block.number < beginBlock || block.number >= endBlock || isHalted) throw; _; }\n",
          "message": "A control flow decision is made based on The block.number environment variable.\nThe block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-120"
        },
        {
          "name": "Dependence on predictable environment variable (SWC 120)",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "    modifier only_during_period { if (block.number < beginBlock || block.number >= endBlock || isHalted) throw; _; }\n",
          "message": "A control flow decision is made based on The block.number environment variable.\nThe block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-120"
        },
        {
          "name": "Dependence on predictable environment variable (SWC 120)",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "    modifier only_during_period { if (block.number < beginBlock || block.number >= endBlock || isHalted) throw; _; }\n",
          "message": "A control flow decision is made based on The block.number environment variable.\nThe block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-120"
        },
        {
          "name": "Dependence on predictable environment variable (SWC 120)",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": null,
          "vulnerability_code": "    modifier only_during_halted_period { if (block.number < beginBlock || block.number >= endBlock || !isHalted) throw; _; }\n",
          "message": "A control flow decision is made based on The block.number environment variable.\nThe block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-120"
        },
        {
          "name": "Dependence on predictable environment variable (SWC 120)",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": null,
          "vulnerability_code": "    modifier only_during_halted_period { if (block.number < beginBlock || block.number >= endBlock || !isHalted) throw; _; }\n",
          "message": "A control flow decision is made based on The block.number environment variable.\nThe block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-120"
        },
        {
          "name": "Dependence on predictable environment variable (SWC 120)",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": null,
          "vulnerability_code": "    modifier only_during_halted_period { if (block.number < beginBlock || block.number >= endBlock || !isHalted) throw; _; }\n",
          "message": "A control flow decision is made based on The block.number environment variable.\nThe block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-120"
        },
        {
          "name": "Dependence on predictable environment variable (SWC 120)",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "    modifier only_during_period { if (block.number < beginBlock || block.number >= endBlock || isHalted) throw; _; }\n",
          "message": "A control flow decision is made based on The block.number environment variable.\nThe block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-120"
        },
        {
          "name": "Dependence on predictable environment variable (SWC 120)",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "    modifier only_during_period { if (block.number < beginBlock || block.number >= endBlock || isHalted) throw; _; }\n",
          "message": "A control flow decision is made based on The block.number environment variable.\nThe block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-120"
        },
        {
          "name": "Dependence on predictable environment variable (SWC 120)",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "    modifier only_during_period { if (block.number < beginBlock || block.number >= endBlock || isHalted) throw; _; }\n",
          "message": "A control flow decision is made based on The block.number environment variable.\nThe block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-120"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (!treasury.call.value(msg.value)()) throw;\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 100,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tvar atoms = msg.value * atomRate;\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 100,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tvar atoms = msg.value * atomRate;\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "        record[_donor] += atoms;\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "        record[_donor] += atoms;\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returnAddresses[_donor] = _returnAddress; // XXX: overwrites\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returnAddresses[_donor] = _returnAddress; // XXX: overwrites\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "        totalEther += msg.value;\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "        totalEther += msg.value;\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "\ttotalAtom += atoms;\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "\ttotalAtom += atoms;\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Received(_donor, msg.value, atomRate);\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Concurrency bug",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (!treasury.call.value(msg.value)()) throw;\n",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (!treasury.call.value(msg.value)()) throw;\n",
          "message": null
        }
      ]
    }
  }
}