{
  "smartbugs_completed": "No vulnerabilities found",
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 575,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public { }\n",
          "message": "Consider making costructor payable to save gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_14"
      ],
      "vulnerability_findings": [
        {
          "name": "pragma",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.6.11;\n",
          "message": "Different versions of Solidity is used in FraxBond_Curves_RC_Discharge.sol:\n\t- Version used: ['0.6.11', 'ABIEncoderV2']\n\t- FraxBond_Curves_RC_Discharge.sol#4 declares pragma solidity0.6.11\n\t- FraxBond_Curves_RC_Discharge.sol#5 declares pragma experimentalABIEncoderV2\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": 40,
          "vulnerability_code": "    function get_total_points(uint8 curve_choice) public returns (uint256) {\n\n        if (curve_choice == 0) return RC_3ROOT_CURVE.length;\n\n        else if (curve_choice == 1) return RC_4ROOT_CURVE.length;\n\n        else if (curve_choice == 2) return RC_5ROOT_CURVE.length;\n\n        else if (curve_choice == 3) return RC_EULER_CURVE.length;\n\n        else if (curve_choice == 4) return RC_PI_CURVE.length;\n",
          "message": "FraxBond_Curves_RC_Discharge.get_total_points (FraxBond_Curves_RC_Discharge.sol#34-40) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": 48,
          "vulnerability_code": "    function get_curve_point(uint8 curve_choice, uint8 index) public returns (uint256) {\n\n        if (curve_choice == 0) return RC_3ROOT_CURVE[index];\n\n        else if (curve_choice == 1) return RC_4ROOT_CURVE[index];\n\n        else if (curve_choice == 2) return RC_5ROOT_CURVE[index];\n\n        else if (curve_choice == 3) return RC_EULER_CURVE[index];\n\n        else if (curve_choice == 4) return RC_PI_CURVE[index];\n",
          "message": "FraxBond_Curves_RC_Discharge.get_curve_point (FraxBond_Curves_RC_Discharge.sol#42-48) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.6.11;\n",
          "message": "Detected issues with version pragma in FraxBond_Curves_RC_Discharge.sol:\n\t- pragma solidity0.6.11 (FraxBond_Curves_RC_Discharge.sol#4): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": 577,
          "vulnerability_code": "contract FraxBond_Curves_RC_Discharge {\n\n    // The RC Charging Formula is a nice curve\n\n    // http://hyperphysics.phy-astr.gsu.edu/hbase/electric/capchg.html#c2\n\n\n\n    // 400000 + (1000000 - 400000) *(1 - (1 / (2.71828^(x/20)))) from x = 0 to 100\n\n    // We use an external library with pre-computed values for below\n\n    // PRICE_PRECISION *(1 - (1 / (2.71828^(x/20)))) from x = 0 to 100\n\n    // plot 1000000 * (1 - (1 / (2.71828^(x/20)))) from x = 0 to 100\n\n    // plot 1000000 * (1 - (1 / (1.7320^(x/20)))) from x = 0 to 100\n\n    // Each epoch can be broken down into 100 discrete points\n\n\n\n    function get_total_points(uint8 curve_choice) public returns (uint256) {\n\n        if (curve_choice == 0) return RC_3ROOT_CURVE.length;\n\n        else if (curve_choice == 1) return RC_4ROOT_CURVE.length;\n\n        else if (curve_choice == 2) return RC_5ROOT_CURVE.length;\n\n        else if (curve_choice == 3) return RC_EULER_CURVE.length;\n\n        else if (curve_choice == 4) return RC_PI_CURVE.length;\n\n    }\n\n    \n\n    function get_curve_point(uint8 curve_choice, uint8 index) public returns (uint256) {\n\n        if (curve_choice == 0) return RC_3ROOT_CURVE[index];\n\n        else if (curve_choice == 1) return RC_4ROOT_CURVE[index];\n\n        else if (curve_choice == 2) return RC_5ROOT_CURVE[index];\n\n        else if (curve_choice == 3) return RC_EULER_CURVE[index];\n\n        else if (curve_choice == 4) return RC_PI_CURVE[index];\n\n    } \n\n\n\n    // Square root of 3 curve\n\n    // 1000000 * (1 - (1 / (1.73205807^(x / 20)))) from x = 0 to 100\n\n    uint32[100] public RC_3ROOT_CURVE = [\n\n        27091,\n\n        53449,\n\n        79093,\n\n        104042,\n\n        128315,\n\n        151930,\n\n        174906,\n\n        197259,\n\n        219007,\n\n        240165,\n\n        260751,\n\n        280778,\n\n        300263,\n\n        319220,\n\n        337664,\n\n        355608,\n\n        373065,\n\n        390050,\n\n        406575,\n\n        422652,\n\n        438293,\n\n        453511,\n\n        468316,\n\n        482720,\n\n        496734,\n\n        510369,\n\n        523634,\n\n        536539,\n\n        549095,\n\n        561311,\n\n        573196,\n\n        584759,\n\n        596008,\n\n        606953,\n\n        617601,\n\n        627961,\n\n        638040,\n\n        647847,\n\n        657387,\n\n        666669,\n\n        675699,\n\n        684485,\n\n        693033,\n\n        701349,\n\n        709440,\n\n        717312,\n\n        724971,\n\n        732422,\n\n        739671,\n\n        746724,\n\n        753585,\n\n        760261,\n\n        766756,\n\n        773075,\n\n        779223,\n\n        785204,\n\n        791023,\n\n        796685,\n\n        802193,\n\n        807552,\n\n        812766,\n\n        817838,\n\n        822773,\n\n        827575,\n\n        832246,\n\n        836791,\n\n        841212,\n\n        845514,\n\n        849699,\n\n        853771,\n\n        857733,\n\n        861587,\n\n        865337,\n\n        868985,\n\n        872535,\n\n        875988,\n\n        879347,\n\n        882616,\n\n        885796,\n\n        888890,\n\n        891900,\n\n        894829,\n\n        897678,\n\n        900450,\n\n        903147,\n\n        905771,\n\n        908324,\n\n        910808,\n\n        913224,\n\n        915575,\n\n        917862,\n\n        920087,\n\n        922252,\n\n        924359,\n\n        926408,\n\n        928402,\n\n        930341,\n\n        932228,\n\n        934065,\n\n        935851\n\n    ];\n\n\n\n    // Square root of 4 curve\n\n    // 1000000 * (1 - (1 / (2^(x / 20)))) from x = 0 to 100\n\n    uint32[100] public RC_4ROOT_CURVE = [\n\n        34063,\n\n        66967,\n\n        98749,\n\n        129449,\n\n        159103,\n\n        187747,\n\n        215415,\n\n        242141,\n\n        267957,\n\n        292893,\n\n        316979,\n\n        340246,\n\n        362719,\n\n        384427,\n\n        405396,\n\n        425650,\n\n        445215,\n\n        464113,\n\n        482367,\n\n        500000,\n\n        517031,\n\n        533483,\n\n        549374,\n\n        564724,\n\n        579551,\n\n        593873,\n\n        607707,\n\n        621070,\n\n        633978,\n\n        646446,\n\n        658489,\n\n        670123,\n\n        681359,\n\n        692213,\n\n        702698,\n\n        712825,\n\n        722607,\n\n        732056,\n\n        741183,\n\n        750000,\n\n        758515,\n\n        766741,\n\n        774687,\n\n        782362,\n\n        789775,\n\n        796936,\n\n        803853,\n\n        810535,\n\n        816989,\n\n        823223,\n\n        829244,\n\n        835061,\n\n        840679,\n\n        846106,\n\n        851349,\n\n        856412,\n\n        861303,\n\n        866028,\n\n        870591,\n\n        875000,\n\n        879257,\n\n        883370,\n\n        887343,\n\n        891181,\n\n        894887,\n\n        898468,\n\n        901926,\n\n        905267,\n\n        908494,\n\n        911611,\n\n        914622,\n\n        917530,\n\n        920339,\n\n        923053,\n\n        925674,\n\n        928206,\n\n        930651,\n\n        933014,\n\n        935295,\n\n        937500,\n\n        939628,\n\n        941685,\n\n        943671,\n\n        945590,\n\n        947443,\n\n        949234,\n\n        950963,\n\n        952633,\n\n        954247,\n\n        955805,\n\n        957311,\n\n        958765,\n\n        960169,\n\n        961526,\n\n        962837,\n\n        964103,\n\n        965325,\n\n        966507,\n\n        967647,\n\n        968750\n\n    ];\n\n\n\n    // Square root of 5 curve\n\n    // 1000000 * (1 - (1 / (2.2360679775^(x / 20)))) from x = 0 to 100\n\n    uint32[100] public RC_5ROOT_CURVE = [\n\n        39437,\n\n        77319,\n\n        113707,\n\n        148660,\n\n        182234,\n\n        214484,\n\n        245463,\n\n        275220,\n\n        303803,\n\n        331259,\n\n        357632,\n\n        382966,\n\n        407300,\n\n        430674,\n\n        453127,\n\n        474694,\n\n        495411,\n\n        515310,\n\n        534425,\n\n        552786,\n\n        570423,\n\n        587364,\n\n        603637,\n\n        619269,\n\n        634284,\n\n        648706,\n\n        662561,\n\n        675868,\n\n        688651,\n\n        700930,\n\n        712724,\n\n        724054,\n\n        734936,\n\n        745389,\n\n        755431,\n\n        765076,\n\n        774340,\n\n        783240,\n\n        791788,\n\n        799999,\n\n        807887,\n\n        815463,\n\n        822741,\n\n        829732,\n\n        836446,\n\n        842896,\n\n        849092,\n\n        855044,\n\n        860760,\n\n        866251,\n\n        871526,\n\n        876593,\n\n        881460,\n\n        886134,\n\n        890625,\n\n        894938,\n\n        899082,\n\n        903062,\n\n        906885,\n\n        910557,\n\n        914084,\n\n        917472,\n\n        920727,\n\n        923853,\n\n        926856,\n\n        929741,\n\n        932512,\n\n        935173,\n\n        937730,\n\n        940186,\n\n        942544,\n\n        944810,\n\n        946987,\n\n        949077,\n\n        951086,\n\n        953015,\n\n        954868,\n\n        956648,\n\n        958357,\n\n        959999,\n\n        961577,\n\n        963092,\n\n        964548,\n\n        965946,\n\n        967289,\n\n        968579,\n\n        969818,\n\n        971008,\n\n        972152,\n\n        973250,\n\n        974305,\n\n        975318,\n\n        976292,\n\n        977226,\n\n        978125,\n\n        978987,\n\n        979816,\n\n        980612,\n\n        981377,\n\n        982111\n\n    ];\n\n\n\n    // Euler's constant\n\n    // 1000000 * (1 - (1 / (2.7182818^(x / 20)))) from x = 0 to 100\n\n    uint32[100] public RC_EULER_CURVE = [\n\n        48770,\n\n        95162,\n\n        139292,\n\n        181269,\n\n        221199,\n\n        259181,\n\n        295311,\n\n        329679,\n\n        362371,\n\n        393469,\n\n        423050,\n\n        451188,\n\n        477954,\n\n        503414,\n\n        527633,\n\n        550671,\n\n        572585,\n\n        593430,\n\n        613258,\n\n        632120,\n\n        650062,\n\n        667128,\n\n        683363,\n\n        698805,\n\n        713495,\n\n        727468,\n\n        740759,\n\n        753403,\n\n        765429,\n\n        776869,\n\n        787752,\n\n        798103,\n\n        807950,\n\n        817316,\n\n        826226,\n\n        834701,\n\n        842762,\n\n        850431,\n\n        857725,\n\n        864664,\n\n        871265,\n\n        877543,\n\n        883515,\n\n        889196,\n\n        894600,\n\n        899741,\n\n        904630,\n\n        909282,\n\n        913706,\n\n        917915,\n\n        921918,\n\n        925726,\n\n        929348,\n\n        932794,\n\n        936072,\n\n        939189,\n\n        942155,\n\n        944976,\n\n        947660,\n\n        950212,\n\n        952641,\n\n        954950,\n\n        957147,\n\n        959237,\n\n        961225,\n\n        963116,\n\n        964915,\n\n        966626,\n\n        968254,\n\n        969802,\n\n        971275,\n\n        972676,\n\n        974008,\n\n        975276,\n\n        976482,\n\n        977629,\n\n        978720,\n\n        979758,\n\n        980745,\n\n        981684,\n\n        982577,\n\n        983427,\n\n        984235,\n\n        985004,\n\n        985735,\n\n        986431,\n\n        987093,\n\n        987722,\n\n        988321,\n\n        988891,\n\n        989432,\n\n        989948,\n\n        990438,\n\n        990904,\n\n        991348,\n\n        991770,\n\n        992171,\n\n        992553,\n\n        992916,\n\n        993262  \n\n    ];\n\n\n\n    // Pi\n\n    // 1000000 * (1 - (1 / (3.14159265358^(x / 20)))) from x = 0 to 100\n\n    uint32[100] public RC_PI_CURVE = [\n\n        55629,\n\n        108163,\n\n        157776,\n\n        204628,\n\n        248874,\n\n        290659,\n\n        330119,\n\n        367384,\n\n        402576,\n\n        435810,\n\n        467195,\n\n        496835,\n\n        524826,\n\n        551259,\n\n        576222,\n\n        599797,\n\n        622060,\n\n        643084,\n\n        662939,\n\n        681690,\n\n        699397,\n\n        716119,\n\n        731911,\n\n        746825,\n\n        760909,\n\n        774209,\n\n        786770,\n\n        798632,\n\n        809834,\n\n        820412,\n\n        830403,\n\n        839837,\n\n        848747,\n\n        857161,\n\n        865107,\n\n        872611,\n\n        879698,\n\n        886390,\n\n        892710,\n\n        898678,\n\n        904315,\n\n        909638,\n\n        914664,\n\n        919412,\n\n        923895,\n\n        928128,\n\n        932126,\n\n        935902,\n\n        939468,\n\n        942835,\n\n        946015,\n\n        949018,\n\n        951854,\n\n        954533,\n\n        957062,\n\n        959450,\n\n        961706,\n\n        963836,\n\n        965848,\n\n        967748,\n\n        969542,\n\n        971236,\n\n        972836,\n\n        974348,\n\n        975775,\n\n        977122,\n\n        978395,\n\n        979597,\n\n        980732,\n\n        981804,\n\n        982816,\n\n        983772,\n\n        984674,\n\n        985527,\n\n        986332,\n\n        987092,\n\n        987810,\n\n        988488,\n\n        989129,\n\n        989734,\n\n        990305,\n\n        990844,\n\n        991353,\n\n        991834,\n\n        992288,\n\n        992717,\n\n        993123,\n\n        993505,\n\n        993866,\n\n        994208,\n\n        994530,\n\n        994834,\n\n        995121,\n\n        995393,\n\n        995649,\n\n        995891,\n\n        996120,\n\n        996335,\n\n        996539,\n\n        996732\n\n    ];\n\n\n\n    constructor() public { }\n\n\n",
          "message": "Contract 'FraxBond_Curves_RC_Discharge' (FraxBond_Curves_RC_Discharge.sol#23-577) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": 40,
          "vulnerability_code": "    function get_total_points(uint8 curve_choice) public returns (uint256) {\n\n        if (curve_choice == 0) return RC_3ROOT_CURVE.length;\n\n        else if (curve_choice == 1) return RC_4ROOT_CURVE.length;\n\n        else if (curve_choice == 2) return RC_5ROOT_CURVE.length;\n\n        else if (curve_choice == 3) return RC_EULER_CURVE.length;\n\n        else if (curve_choice == 4) return RC_PI_CURVE.length;\n",
          "message": "Function 'FraxBond_Curves_RC_Discharge.get_total_points' (FraxBond_Curves_RC_Discharge.sol#34-40) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function get_total_points(uint8 curve_choice) public returns (uint256) {\n",
          "message": "Parameter 'curve_choice' of FraxBond_Curves_RC_Discharge.get_total_points (FraxBond_Curves_RC_Discharge.sol#34) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": 48,
          "vulnerability_code": "    function get_curve_point(uint8 curve_choice, uint8 index) public returns (uint256) {\n\n        if (curve_choice == 0) return RC_3ROOT_CURVE[index];\n\n        else if (curve_choice == 1) return RC_4ROOT_CURVE[index];\n\n        else if (curve_choice == 2) return RC_5ROOT_CURVE[index];\n\n        else if (curve_choice == 3) return RC_EULER_CURVE[index];\n\n        else if (curve_choice == 4) return RC_PI_CURVE[index];\n",
          "message": "Function 'FraxBond_Curves_RC_Discharge.get_curve_point' (FraxBond_Curves_RC_Discharge.sol#42-48) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function get_curve_point(uint8 curve_choice, uint8 index) public returns (uint256) {\n",
          "message": "Parameter 'curve_choice' of FraxBond_Curves_RC_Discharge.get_curve_point (FraxBond_Curves_RC_Discharge.sol#42) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": 153,
          "vulnerability_code": "    uint32[100] public RC_3ROOT_CURVE = [\n\n        27091,\n\n        53449,\n\n        79093,\n\n        104042,\n\n        128315,\n\n        151930,\n\n        174906,\n\n        197259,\n\n        219007,\n\n        240165,\n\n        260751,\n\n        280778,\n\n        300263,\n\n        319220,\n\n        337664,\n\n        355608,\n\n        373065,\n\n        390050,\n\n        406575,\n\n        422652,\n\n        438293,\n\n        453511,\n\n        468316,\n\n        482720,\n\n        496734,\n\n        510369,\n\n        523634,\n\n        536539,\n\n        549095,\n\n        561311,\n\n        573196,\n\n        584759,\n\n        596008,\n\n        606953,\n\n        617601,\n\n        627961,\n\n        638040,\n\n        647847,\n\n        657387,\n\n        666669,\n\n        675699,\n\n        684485,\n\n        693033,\n\n        701349,\n\n        709440,\n\n        717312,\n\n        724971,\n\n        732422,\n\n        739671,\n\n        746724,\n\n        753585,\n\n        760261,\n\n        766756,\n\n        773075,\n\n        779223,\n\n        785204,\n\n        791023,\n\n        796685,\n\n        802193,\n\n        807552,\n\n        812766,\n\n        817838,\n\n        822773,\n\n        827575,\n\n        832246,\n\n        836791,\n\n        841212,\n\n        845514,\n\n        849699,\n\n        853771,\n\n        857733,\n\n        861587,\n\n        865337,\n\n        868985,\n\n        872535,\n\n        875988,\n\n        879347,\n\n        882616,\n\n        885796,\n\n        888890,\n\n        891900,\n\n        894829,\n\n        897678,\n\n        900450,\n\n        903147,\n\n        905771,\n\n        908324,\n\n        910808,\n\n        913224,\n\n        915575,\n\n        917862,\n\n        920087,\n\n        922252,\n\n        924359,\n\n        926408,\n\n        928402,\n\n        930341,\n\n        932228,\n\n        934065,\n\n        935851\n",
          "message": "Variable 'FraxBond_Curves_RC_Discharge.RC_3ROOT_CURVE' (FraxBond_Curves_RC_Discharge.sol#52-153) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": 258,
          "vulnerability_code": "    uint32[100] public RC_4ROOT_CURVE = [\n\n        34063,\n\n        66967,\n\n        98749,\n\n        129449,\n\n        159103,\n\n        187747,\n\n        215415,\n\n        242141,\n\n        267957,\n\n        292893,\n\n        316979,\n\n        340246,\n\n        362719,\n\n        384427,\n\n        405396,\n\n        425650,\n\n        445215,\n\n        464113,\n\n        482367,\n\n        500000,\n\n        517031,\n\n        533483,\n\n        549374,\n\n        564724,\n\n        579551,\n\n        593873,\n\n        607707,\n\n        621070,\n\n        633978,\n\n        646446,\n\n        658489,\n\n        670123,\n\n        681359,\n\n        692213,\n\n        702698,\n\n        712825,\n\n        722607,\n\n        732056,\n\n        741183,\n\n        750000,\n\n        758515,\n\n        766741,\n\n        774687,\n\n        782362,\n\n        789775,\n\n        796936,\n\n        803853,\n\n        810535,\n\n        816989,\n\n        823223,\n\n        829244,\n\n        835061,\n\n        840679,\n\n        846106,\n\n        851349,\n\n        856412,\n\n        861303,\n\n        866028,\n\n        870591,\n\n        875000,\n\n        879257,\n\n        883370,\n\n        887343,\n\n        891181,\n\n        894887,\n\n        898468,\n\n        901926,\n\n        905267,\n\n        908494,\n\n        911611,\n\n        914622,\n\n        917530,\n\n        920339,\n\n        923053,\n\n        925674,\n\n        928206,\n\n        930651,\n\n        933014,\n\n        935295,\n\n        937500,\n\n        939628,\n\n        941685,\n\n        943671,\n\n        945590,\n\n        947443,\n\n        949234,\n\n        950963,\n\n        952633,\n\n        954247,\n\n        955805,\n\n        957311,\n\n        958765,\n\n        960169,\n\n        961526,\n\n        962837,\n\n        964103,\n\n        965325,\n\n        966507,\n\n        967647,\n\n        968750\n",
          "message": "Variable 'FraxBond_Curves_RC_Discharge.RC_4ROOT_CURVE' (FraxBond_Curves_RC_Discharge.sol#157-258) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 262,
          "vulnerability_to_line": 363,
          "vulnerability_code": "    uint32[100] public RC_5ROOT_CURVE = [\n\n        39437,\n\n        77319,\n\n        113707,\n\n        148660,\n\n        182234,\n\n        214484,\n\n        245463,\n\n        275220,\n\n        303803,\n\n        331259,\n\n        357632,\n\n        382966,\n\n        407300,\n\n        430674,\n\n        453127,\n\n        474694,\n\n        495411,\n\n        515310,\n\n        534425,\n\n        552786,\n\n        570423,\n\n        587364,\n\n        603637,\n\n        619269,\n\n        634284,\n\n        648706,\n\n        662561,\n\n        675868,\n\n        688651,\n\n        700930,\n\n        712724,\n\n        724054,\n\n        734936,\n\n        745389,\n\n        755431,\n\n        765076,\n\n        774340,\n\n        783240,\n\n        791788,\n\n        799999,\n\n        807887,\n\n        815463,\n\n        822741,\n\n        829732,\n\n        836446,\n\n        842896,\n\n        849092,\n\n        855044,\n\n        860760,\n\n        866251,\n\n        871526,\n\n        876593,\n\n        881460,\n\n        886134,\n\n        890625,\n\n        894938,\n\n        899082,\n\n        903062,\n\n        906885,\n\n        910557,\n\n        914084,\n\n        917472,\n\n        920727,\n\n        923853,\n\n        926856,\n\n        929741,\n\n        932512,\n\n        935173,\n\n        937730,\n\n        940186,\n\n        942544,\n\n        944810,\n\n        946987,\n\n        949077,\n\n        951086,\n\n        953015,\n\n        954868,\n\n        956648,\n\n        958357,\n\n        959999,\n\n        961577,\n\n        963092,\n\n        964548,\n\n        965946,\n\n        967289,\n\n        968579,\n\n        969818,\n\n        971008,\n\n        972152,\n\n        973250,\n\n        974305,\n\n        975318,\n\n        976292,\n\n        977226,\n\n        978125,\n\n        978987,\n\n        979816,\n\n        980612,\n\n        981377,\n\n        982111\n",
          "message": "Variable 'FraxBond_Curves_RC_Discharge.RC_5ROOT_CURVE' (FraxBond_Curves_RC_Discharge.sol#262-363) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 367,
          "vulnerability_to_line": 468,
          "vulnerability_code": "    uint32[100] public RC_EULER_CURVE = [\n\n        48770,\n\n        95162,\n\n        139292,\n\n        181269,\n\n        221199,\n\n        259181,\n\n        295311,\n\n        329679,\n\n        362371,\n\n        393469,\n\n        423050,\n\n        451188,\n\n        477954,\n\n        503414,\n\n        527633,\n\n        550671,\n\n        572585,\n\n        593430,\n\n        613258,\n\n        632120,\n\n        650062,\n\n        667128,\n\n        683363,\n\n        698805,\n\n        713495,\n\n        727468,\n\n        740759,\n\n        753403,\n\n        765429,\n\n        776869,\n\n        787752,\n\n        798103,\n\n        807950,\n\n        817316,\n\n        826226,\n\n        834701,\n\n        842762,\n\n        850431,\n\n        857725,\n\n        864664,\n\n        871265,\n\n        877543,\n\n        883515,\n\n        889196,\n\n        894600,\n\n        899741,\n\n        904630,\n\n        909282,\n\n        913706,\n\n        917915,\n\n        921918,\n\n        925726,\n\n        929348,\n\n        932794,\n\n        936072,\n\n        939189,\n\n        942155,\n\n        944976,\n\n        947660,\n\n        950212,\n\n        952641,\n\n        954950,\n\n        957147,\n\n        959237,\n\n        961225,\n\n        963116,\n\n        964915,\n\n        966626,\n\n        968254,\n\n        969802,\n\n        971275,\n\n        972676,\n\n        974008,\n\n        975276,\n\n        976482,\n\n        977629,\n\n        978720,\n\n        979758,\n\n        980745,\n\n        981684,\n\n        982577,\n\n        983427,\n\n        984235,\n\n        985004,\n\n        985735,\n\n        986431,\n\n        987093,\n\n        987722,\n\n        988321,\n\n        988891,\n\n        989432,\n\n        989948,\n\n        990438,\n\n        990904,\n\n        991348,\n\n        991770,\n\n        992171,\n\n        992553,\n\n        992916,\n\n        993262  \n",
          "message": "Variable 'FraxBond_Curves_RC_Discharge.RC_EULER_CURVE' (FraxBond_Curves_RC_Discharge.sol#367-468) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 472,
          "vulnerability_to_line": 573,
          "vulnerability_code": "    uint32[100] public RC_PI_CURVE = [\n\n        55629,\n\n        108163,\n\n        157776,\n\n        204628,\n\n        248874,\n\n        290659,\n\n        330119,\n\n        367384,\n\n        402576,\n\n        435810,\n\n        467195,\n\n        496835,\n\n        524826,\n\n        551259,\n\n        576222,\n\n        599797,\n\n        622060,\n\n        643084,\n\n        662939,\n\n        681690,\n\n        699397,\n\n        716119,\n\n        731911,\n\n        746825,\n\n        760909,\n\n        774209,\n\n        786770,\n\n        798632,\n\n        809834,\n\n        820412,\n\n        830403,\n\n        839837,\n\n        848747,\n\n        857161,\n\n        865107,\n\n        872611,\n\n        879698,\n\n        886390,\n\n        892710,\n\n        898678,\n\n        904315,\n\n        909638,\n\n        914664,\n\n        919412,\n\n        923895,\n\n        928128,\n\n        932126,\n\n        935902,\n\n        939468,\n\n        942835,\n\n        946015,\n\n        949018,\n\n        951854,\n\n        954533,\n\n        957062,\n\n        959450,\n\n        961706,\n\n        963836,\n\n        965848,\n\n        967748,\n\n        969542,\n\n        971236,\n\n        972836,\n\n        974348,\n\n        975775,\n\n        977122,\n\n        978395,\n\n        979597,\n\n        980732,\n\n        981804,\n\n        982816,\n\n        983772,\n\n        984674,\n\n        985527,\n\n        986332,\n\n        987092,\n\n        987810,\n\n        988488,\n\n        989129,\n\n        989734,\n\n        990305,\n\n        990844,\n\n        991353,\n\n        991834,\n\n        992288,\n\n        992717,\n\n        993123,\n\n        993505,\n\n        993866,\n\n        994208,\n\n        994530,\n\n        994834,\n\n        995121,\n\n        995393,\n\n        995649,\n\n        995891,\n\n        996120,\n\n        996335,\n\n        996539,\n\n        996732\n",
          "message": "Variable 'FraxBond_Curves_RC_Discharge.RC_PI_CURVE' (FraxBond_Curves_RC_Discharge.sol#472-573) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_KILL_OOM"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}