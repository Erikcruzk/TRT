{
  "smartbugs_completed": "No vulnerabilities found",
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_6"
      ],
      "vulnerability_findings": [
        {
          "name": "solc-version",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.6.11;\n",
          "message": "Detected issues with version pragma in IFraxBond_Curve.sol:\n\t- pragma solidity0.6.11 (IFraxBond_Curve.sol#4): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": 9,
          "vulnerability_code": "interface IFraxBond_Curve {\n\n    function get_total_points(uint8 curve_choice) external view returns (uint32);\n\n    function get_curve_point(uint8 curve_choice, uint8 index) external view returns (uint32);\n",
          "message": "Contract 'IFraxBond_Curve' (IFraxBond_Curve.sol#6-9) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function get_total_points(uint8 curve_choice) external view returns (uint32);\n",
          "message": "Function 'IFraxBond_Curve.get_total_points' (IFraxBond_Curve.sol#7) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function get_total_points(uint8 curve_choice) external view returns (uint32);\n",
          "message": "Parameter 'curve_choice' of IFraxBond_Curve.get_total_points (IFraxBond_Curve.sol#7) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function get_curve_point(uint8 curve_choice, uint8 index) external view returns (uint32);\n",
          "message": "Function 'IFraxBond_Curve.get_curve_point' (IFraxBond_Curve.sol#8) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function get_curve_point(uint8 curve_choice, uint8 index) external view returns (uint32);\n",
          "message": "Parameter 'curve_choice' of IFraxBond_Curve.get_curve_point (IFraxBond_Curve.sol#8) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "execution failed"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "input files do not contain any valid contracts"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}