pragma solidity ^0.8.0;











abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        this; 
        return msg.data;
    }
}





pragma solidity ^0.8.0;










interface IERC165 {
    







    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}





pragma solidity ^0.8.0;




interface IERC721 is IERC165 {
    


    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    


    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    


    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    


    function balanceOf(address owner) external view returns (uint256 balance);

    






    function ownerOf(uint256 tokenId) external view returns (address owner);

    













    function safeTransferFrom(address from, address to, uint256 tokenId) external;

    













    function transferFrom(address from, address to, uint256 tokenId) external;

    












    function approve(address to, uint256 tokenId) external;

    






    function getApproved(uint256 tokenId) external view returns (address operator);

    









    function setApprovalForAll(address operator, bool _approved) external;

    




    function isApprovedForAll(address owner, address operator) external view returns (bool);

    












    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;
}





pragma solidity ^0.8.0;





interface IERC721Metadata is IERC721 {

    


    function name() external view returns (string memory);

    


    function symbol() external view returns (string memory);

    


    function tokenURI(uint256 tokenId) external view returns (string memory);
}





pragma solidity ^0.8.0;





interface IERC721Enumerable is IERC721 {

    


    function totalSupply() external view returns (uint256);

    



    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);

    



    function tokenByIndex(uint256 index) external view returns (uint256);
}





pragma solidity ^0.8.0;






interface IERC721Receiver {
    








    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);
}





pragma solidity ^0.8.0;







abstract contract ERC165 is IERC165 {
    


    mapping(bytes4 => bool) private _supportedInterfaces;

    constructor () {
        
        
        _registerInterface(type(IERC165).interfaceId);
    }

    




    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return _supportedInterfaces[interfaceId];
    }

    










    function _registerInterface(bytes4 interfaceId) internal virtual {
        require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
        _supportedInterfaces[interfaceId] = true;
    }
}





pragma solidity ^0.8.0;




library Address {
    
















    function isContract(address account) internal view returns (bool) {
        
        
        

        uint256 size;
        
        assembly { size := extcodesize(account) }
        return size > 0;
    }

    















    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    

















    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

    





    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    










    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    





    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        
        (bool success, bytes memory returndata) = target.call{ value: value }(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    





    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    





    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        
        (bool success, bytes memory returndata) = target.staticcall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    





    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    





    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
        if (success) {
            return returndata;
        } else {
            
            if (returndata.length > 0) {
                

                
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}





pragma solidity ^0.8.0;

























library EnumerableSet {
    
    
    
    
    
    
    
    

    struct Set {
        
        bytes32[] _values;

        
        
        mapping (bytes32 => uint256) _indexes;
    }

    





    function _add(Set storage set, bytes32 value) private returns (bool) {
        if (!_contains(set, value)) {
            set._values.push(value);
            
            
            set._indexes[value] = set._values.length;
            return true;
        } else {
            return false;
        }
    }

    





    function _remove(Set storage set, bytes32 value) private returns (bool) {
        
        uint256 valueIndex = set._indexes[value];

        if (valueIndex != 0) { 
            
            
            

            uint256 toDeleteIndex = valueIndex - 1;
            uint256 lastIndex = set._values.length - 1;

            
            

            bytes32 lastvalue = set._values[lastIndex];

            
            set._values[toDeleteIndex] = lastvalue;
            
            set._indexes[lastvalue] = toDeleteIndex + 1; 

            
            set._values.pop();

            
            delete set._indexes[value];

            return true;
        } else {
            return false;
        }
    }

    


    function _contains(Set storage set, bytes32 value) private view returns (bool) {
        return set._indexes[value] != 0;
    }

    


    function _length(Set storage set) private view returns (uint256) {
        return set._values.length;
    }

   









    function _at(Set storage set, uint256 index) private view returns (bytes32) {
        require(set._values.length > index, "EnumerableSet: index out of bounds");
        return set._values[index];
    }

    

    struct Bytes32Set {
        Set _inner;
    }

    





    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _add(set._inner, value);
    }

    





    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _remove(set._inner, value);
    }

    


    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
        return _contains(set._inner, value);
    }

    


    function length(Bytes32Set storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

   









    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
        return _at(set._inner, index);
    }

    

    struct AddressSet {
        Set _inner;
    }

    





    function add(AddressSet storage set, address value) internal returns (bool) {
        return _add(set._inner, bytes32(uint256(uint160(value))));
    }

    





    function remove(AddressSet storage set, address value) internal returns (bool) {
        return _remove(set._inner, bytes32(uint256(uint160(value))));
    }

    


    function contains(AddressSet storage set, address value) internal view returns (bool) {
        return _contains(set._inner, bytes32(uint256(uint160(value))));
    }

    


    function length(AddressSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

   









    function at(AddressSet storage set, uint256 index) internal view returns (address) {
        return address(uint160(uint256(_at(set._inner, index))));
    }


    

    struct UintSet {
        Set _inner;
    }

    





    function add(UintSet storage set, uint256 value) internal returns (bool) {
        return _add(set._inner, bytes32(value));
    }

    





    function remove(UintSet storage set, uint256 value) internal returns (bool) {
        return _remove(set._inner, bytes32(value));
    }

    


    function contains(UintSet storage set, uint256 value) internal view returns (bool) {
        return _contains(set._inner, bytes32(value));
    }

    


    function length(UintSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

   









    function at(UintSet storage set, uint256 index) internal view returns (uint256) {
        return uint256(_at(set._inner, index));
    }
}





pragma solidity ^0.8.0;

























library EnumerableMap {
    
    
    
    
    
    
    
    

    struct MapEntry {
        bytes32 _key;
        bytes32 _value;
    }

    struct Map {
        
        MapEntry[] _entries;

        
        
        mapping (bytes32 => uint256) _indexes;
    }

    






    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {
        
        uint256 keyIndex = map._indexes[key];

        if (keyIndex == 0) { 
            map._entries.push(MapEntry({ _key: key, _value: value }));
            
            
            map._indexes[key] = map._entries.length;
            return true;
        } else {
            map._entries[keyIndex - 1]._value = value;
            return false;
        }
    }

    




    function _remove(Map storage map, bytes32 key) private returns (bool) {
        
        uint256 keyIndex = map._indexes[key];

        if (keyIndex != 0) { 
            
            
            

            uint256 toDeleteIndex = keyIndex - 1;
            uint256 lastIndex = map._entries.length - 1;

            
            

            MapEntry storage lastEntry = map._entries[lastIndex];

            
            map._entries[toDeleteIndex] = lastEntry;
            
            map._indexes[lastEntry._key] = toDeleteIndex + 1; 

            
            map._entries.pop();

            
            delete map._indexes[key];

            return true;
        } else {
            return false;
        }
    }

    


    function _contains(Map storage map, bytes32 key) private view returns (bool) {
        return map._indexes[key] != 0;
    }

    


    function _length(Map storage map) private view returns (uint256) {
        return map._entries.length;
    }

   









    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {
        require(map._entries.length > index, "EnumerableMap: index out of bounds");

        MapEntry storage entry = map._entries[index];
        return (entry._key, entry._value);
    }

    



    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {
        uint256 keyIndex = map._indexes[key];
        if (keyIndex == 0) return (false, 0); 
        return (true, map._entries[keyIndex - 1]._value); 
    }

    






    function _get(Map storage map, bytes32 key) private view returns (bytes32) {
        uint256 keyIndex = map._indexes[key];
        require(keyIndex != 0, "EnumerableMap: nonexistent key"); 
        return map._entries[keyIndex - 1]._value; 
    }

    





    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {
        uint256 keyIndex = map._indexes[key];
        require(keyIndex != 0, errorMessage); 
        return map._entries[keyIndex - 1]._value; 
    }

    

    struct UintToAddressMap {
        Map _inner;
    }

    






    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {
        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));
    }

    




    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {
        return _remove(map._inner, bytes32(key));
    }

    


    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {
        return _contains(map._inner, bytes32(key));
    }

    


    function length(UintToAddressMap storage map) internal view returns (uint256) {
        return _length(map._inner);
    }

   








    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {
        (bytes32 key, bytes32 value) = _at(map._inner, index);
        return (uint256(key), address(uint160(uint256(value))));
    }

    





    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {
        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));
        return (success, address(uint160(uint256(value))));
    }

    






    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {
        return address(uint160(uint256(_get(map._inner, bytes32(key)))));
    }

    





    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {
        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));
    }
}





pragma solidity ^0.8.0;




library Strings {
    bytes16 private constant alphabet = "0123456789abcdef";

    


    function toString(uint256 value) internal pure returns (string memory) {
        
        

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    


    function toHexString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0x00";
        }
        uint256 temp = value;
        uint256 length = 0;
        while (temp != 0) {
            length++;
            temp >>= 8;
        }
        return toHexString(value, length);
    }

    


    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = alphabet[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }

}





pragma solidity ^0.8.0;














contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {
    using Address for address;
    using EnumerableSet for EnumerableSet.UintSet;
    using EnumerableMap for EnumerableMap.UintToAddressMap;
    using Strings for uint256;

    
    mapping (address => EnumerableSet.UintSet) private _holderTokens;

    
    EnumerableMap.UintToAddressMap private _tokenOwners;

    
    mapping (uint256 => address) private _tokenApprovals;

    
    mapping (address => mapping (address => bool)) private _operatorApprovals;

    
    string private _name;

    
    string private _symbol;

    
    mapping (uint256 => string) private _tokenURIs;

    
    string private _baseURI;

    


    constructor (string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;

        
        _registerInterface(type(IERC721).interfaceId);
        _registerInterface(type(IERC721Metadata).interfaceId);
        _registerInterface(type(IERC721Enumerable).interfaceId);
    }

    


    function balanceOf(address owner) public view virtual override returns (uint256) {
        require(owner != address(0), "ERC721: balance query for the zero address");
        return _holderTokens[owner].length();
    }

    


    function ownerOf(uint256 tokenId) public view virtual override returns (address) {
        return _tokenOwners.get(tokenId, "ERC721: owner query for nonexistent token");
    }

    


    function name() public view virtual override returns (string memory) {
        return _name;
    }

    


    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    


    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");

        string memory _tokenURI = _tokenURIs[tokenId];
        string memory base = baseURI();

        
        if (bytes(base).length == 0) {
            return _tokenURI;
        }
        
        if (bytes(_tokenURI).length > 0) {
            return string(abi.encodePacked(base, _tokenURI));
        }
        
        return string(abi.encodePacked(base, tokenId.toString()));
    }

    




    function baseURI() public view virtual returns (string memory) {
        return _baseURI;
    }

    


    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
        return _holderTokens[owner].at(index);
    }

    


    function totalSupply() public view virtual override returns (uint256) {
        
        return _tokenOwners.length();
    }

    


    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
        (uint256 tokenId, ) = _tokenOwners.at(index);
        return tokenId;
    }

    


    function approve(address to, uint256 tokenId) public virtual override {
        address owner = ERC721.ownerOf(tokenId);
        require(to != owner, "ERC721: approval to current owner");

        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),
            "ERC721: approve caller is not owner nor approved for all"
        );

        _approve(to, tokenId);
    }

    


    function getApproved(uint256 tokenId) public view virtual override returns (address) {
        require(_exists(tokenId), "ERC721: approved query for nonexistent token");

        return _tokenApprovals[tokenId];
    }

    


    function setApprovalForAll(address operator, bool approved) public virtual override {
        require(operator != _msgSender(), "ERC721: approve to caller");

        _operatorApprovals[_msgSender()][operator] = approved;
        emit ApprovalForAll(_msgSender(), operator, approved);
    }

    


    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
        return _operatorApprovals[owner][operator];
    }

    


    function transferFrom(address from, address to, uint256 tokenId) public virtual override {
        
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");

        _transfer(from, to, tokenId);
    }

    


    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {
        safeTransferFrom(from, to, tokenId, "");
    }

    


    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
        _safeTransfer(from, to, tokenId, _data);
    }

    

















    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {
        _transfer(from, to, tokenId);
        require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
    }

    







    function _exists(uint256 tokenId) internal view virtual returns (bool) {
        return _tokenOwners.contains(tokenId);
    }

    






    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
        require(_exists(tokenId), "ERC721: operator query for nonexistent token");
        address owner = ERC721.ownerOf(tokenId);
        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));
    }

    









    function _safeMint(address to, uint256 tokenId) internal virtual {
        _safeMint(to, tokenId, "");
    }

    



function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {
    _mint(to, tokenId);
    
    if (to.isContract()) {
        require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
    }
}

    











    function _mint(address to, uint256 tokenId) internal virtual {
        require(to != address(0), "ERC721: mint to the zero address");
        require(!_exists(tokenId), "ERC721: token already minted");

        _beforeTokenTransfer(address(0), to, tokenId);

        _holderTokens[to].add(tokenId);

        _tokenOwners.set(tokenId, to);

        emit Transfer(address(0), to, tokenId);
    }

    









    function _burn(uint256 tokenId) internal virtual {
        address owner = ERC721.ownerOf(tokenId); 

        _beforeTokenTransfer(owner, address(0), tokenId);

        
        _approve(address(0), tokenId);

        
        if (bytes(_tokenURIs[tokenId]).length != 0) {
            delete _tokenURIs[tokenId];
        }

        _holderTokens[owner].remove(tokenId);

        _tokenOwners.remove(tokenId);

        emit Transfer(owner, address(0), tokenId);
    }

    










    function _transfer(address from, address to, uint256 tokenId) internal virtual {
        require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own"); 
        require(to != address(0), "ERC721: transfer to the zero address");

        _beforeTokenTransfer(from, to, tokenId);

        
        _approve(address(0), tokenId);

        _holderTokens[from].remove(tokenId);
        _holderTokens[to].add(tokenId);

        _tokenOwners.set(tokenId, to);

        emit Transfer(from, to, tokenId);
    }

    






    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {
        require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");
        _tokenURIs[tokenId] = _tokenURI;
    }

    




    function _setBaseURI(string memory baseURI_) internal virtual {
        _baseURI = baseURI_;
    }

    









    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)
        private returns (bool)
    {
        if (to.isContract()) {
            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
                return retval == IERC721Receiver(to).onERC721Received.selector;
            } catch (bytes memory reason) {
                if (reason.length == 0) {
                    revert("ERC721: transfer to non ERC721Receiver implementer");
                } else {
                    
                    assembly {
                        revert(add(32, reason), mload(reason))
                    }
                }
            }
        } else {
            return true;
        }
    }

    function _approve(address to, uint256 tokenId) private {
        _tokenApprovals[tokenId] = to;
        emit Approval(ERC721.ownerOf(tokenId), to, tokenId); 
    }

    














    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }
}





pragma solidity ^0.8.0;






































abstract contract AccessControl is Context {
    using EnumerableSet for EnumerableSet.AddressSet;
    using Address for address;

    struct RoleData {
        EnumerableSet.AddressSet members;
        bytes32 adminRole;
    }

    mapping (bytes32 => RoleData) private _roles;

    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00; 

    







    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);

    





    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);

    






    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);

    


    function hasRole(bytes32 role, address account) public view returns (bool) {
        return _roles[role].members.contains(account);
    }

    



    function getRoleMemberCount(bytes32 role) public view returns (uint256) {
        return _roles[role].members.length();
    }

    











    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {
        return _roles[role].members.at(index);
    }

    





    function getRoleAdmin(bytes32 role) public view returns (bytes32) {
        return _roles[role].adminRole;
    }

    









    function grantRole(bytes32 role, address account) public virtual {
        require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");

        _grantRole(role, account);
    }

    








    function revokeRole(bytes32 role, address account) public virtual {
        require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");

        _revokeRole(role, account);
    }

    













    function renounceRole(bytes32 role, address account) public virtual {
        require(account == _msgSender(), "AccessControl: can only renounce roles for self");

        _revokeRole(role, account);
    }

    















    function _setupRole(bytes32 role, address account) internal virtual {
        _grantRole(role, account);
    }

    




    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);
        _roles[role].adminRole = adminRole;
    }

    function _grantRole(bytes32 role, address account) private {
        if (_roles[role].members.add(account)) {
            emit RoleGranted(role, account, _msgSender());
        }
    }

    function _revokeRole(bytes32 role, address account) private {
        if (_roles[role].members.remove(account)) {
            emit RoleRevoked(role, account, _msgSender());
        }
    }
}




pragma solidity ^0.8.0;














library SafeMath {
    








    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    








    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    










    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    








    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        
        
        
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    










    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    












    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        
        require(b > 0, errorMessage);
        uint256 c = a / b;
        

        return c;
    }

    










    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    












    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}




pragma solidity ^0.8.0;

interface IFraxPartial {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    function owner_address() external returns (address);
    function creator_address() external returns (address);
    function timelock_address() external returns (address);
    function controller_address() external returns (address);
    function fxs_address() external returns (address);
    function frax_eth_oracle_address() external returns (address);
    function fxs_eth_oracle_address() external returns (address);
    function weth_address() external returns (address);
    function eth_usd_consumer_address() external returns (address);

    function genesis_supply() external returns (uint256);
    function frax_pools_array() external returns (address[] memory);

    function frax_pools(address a) external returns (bool);
    function global_collateral_ratio() external returns (uint256);
    function redemption_fee() external returns (uint256);
    function minting_fee() external returns (uint256);
    function frax_step() external returns (uint256);
    function refresh_cooldown() external returns (uint256);
    function price_target() external returns (uint256);
    function price_band() external returns (uint256);

    function DEFAULT_ADMIN_ADDRESS() external returns (address);
    function COLLATERAL_RATIO_PAUSER() external returns (bytes32);
    function collateral_ratio_paused() external returns (bool);
    function last_call_time() external returns (uint256);

    function pool_mint(address m_address, uint256 m_amount) external;

    function burn(uint256 amount) external;
    function pool_burn_from(address b_address, uint256 b_amount) external;

    
    function frax_price() external returns (uint256);
    function fxs_price()  external returns (uint256);
    function eth_usd_price() external returns (uint256);
    function frax_info() external returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256);
    function globalCollateralValue() external returns (uint256);

    
    function refreshCollateralRatio() external;
}




pragma solidity ^0.8.0;
pragma experimental ABIEncoderV2;




















library FraxBond_NFT_Library {
    using SafeMath for uint256;

    function uint2str(uint256 _i) public pure returns (string memory str) {
        if (_i == 0) return "0";
        uint256 j = _i;
        uint256 length;
        while (j != 0) {
            length++;
            j /= 10;
        }
        bytes memory bstr = new bytes(length);
        uint256 k = length;
        j = _i;
        while (j != 0) {
            bstr[--k] = bytes1(uint8(48 + j % 10));
            j /= 10;
        }
        str = string(bstr);
    }

    function compare(string memory s1, string memory s2) public pure returns (bool) {
        return keccak256(abi.encodePacked(s1)) == keccak256(abi.encodePacked(s2));
    }
    
    function concatenate(string memory s1, string memory s2) public pure returns (string memory) {
        return string(abi.encodePacked(s1, s2));
    }

    function concatenate3(string memory s1, string memory s2, string memory s3) public pure returns (string memory) {
        return string(abi.encodePacked(s1, s2, s3));
    }

    function fxb_namer(string memory series, uint256 face_value_e18, uint256 maturity_months) public pure returns (string memory) {
        
        return string(abi.encodePacked("Frax Finance Bond Series ", series, " ", uint2str(face_value_e18.div(1e18)), " ", uint2str(maturity_months), " Month"));
    }

    function fxb_symboler(string memory series, uint256 face_value_e18, uint256 maturity_months) public pure returns (string memory) {
        
        return string(abi.encodePacked("FXB", series, uint2str(face_value_e18.div(1e18)), "M", uint2str(maturity_months)));
    }
}




pragma solidity ^0.8.0;
























contract FraxBond_NFT is ERC721, AccessControl {
    using SafeMath for uint256;

    

    IFraxPartial private FRAX = IFraxPartial(0x853d955aCEf822Db058eb8505911ED77F175b99e);

    address public controller_address; 
    address public timelock_address; 

    address public DEFAULT_ADMIN_ADDRESS;
    bytes32 public constant MINT_PAUSER = keccak256("MINT_PAUSER");
    bytes32 public constant REDEEM_PAUSER = keccak256("REDEEM_PAUSER");
    bool public mintPaused = false;
    bool public redeemPaused = false;

    string public series; 
    uint256 public immutable face_value; 
    uint256 public immutable maturity_months; 
    uint256 public immutable maturity_secs; 
    uint256 public immutable min_early_redeem_secs; 
    uint256 public immutable max_early_redemption_penalty_pct; 
    uint256 public immutable discount; 
    uint256 public immutable purchase_price; 
    uint256 public mint_limit = 3; 
    uint256 public redeemed_bonds_count = 0;

    
    mapping(uint256 => BondData) public bondData;

    
    mapping(uint256 => bool) public redeemedBonds;

    struct BondViewDetails {
        address owner;
        string name;
        string symbol;
        string series;
        uint256 serial_number;
        uint256 face_value;
        uint256 maturity_months;
        uint256 min_early_redeem_secs;
        uint256 max_early_redemption_penalty_pct;
        uint256 discount;
        uint256 purchase_price;
        uint256 issue_timestamp;
        uint256 maturity_timestamp;
        uint256 redeemed_timestamp;
    }

    struct BondData {
        uint256 issue_timestamp;
        uint256 maturity_timestamp;
        uint256 redeemed_timestamp;
    }

    

    modifier onlyByControllerOrGovernance() {
        require(msg.sender == controller_address || msg.sender == timelock_address, "You are not the controller or the governance timelock");
        _;
    }

    modifier notMintPaused() {
        require(mintPaused == false, "Minting is paused");
        _;
    }

    modifier notRedeemPaused() {
        require(redeemPaused == false, "Redeeming is paused");
        _;
    }

    

    constructor(
        address _controller_address,
        address _timelock_address,
        string memory _series,
        uint256 _face_value,
        uint256 _maturity_months,
        uint256 _discount,
        uint256 _min_early_redeem_secs,
        uint256 _max_early_redemption_penalty_pct
    ) ERC721(FraxBond_NFT_Library.fxb_namer(_series, _face_value, _maturity_months), FraxBond_NFT_Library.fxb_symboler(_series, _face_value, _maturity_months)) public {
        controller_address = _controller_address;
        timelock_address = _timelock_address;

        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
        DEFAULT_ADMIN_ADDRESS = _msgSender();
        grantRole(MINT_PAUSER, controller_address);
        grantRole(MINT_PAUSER, timelock_address);
        grantRole(REDEEM_PAUSER, controller_address);
        grantRole(REDEEM_PAUSER, timelock_address);

        series = _series;
        face_value = _face_value;
        maturity_months = _maturity_months;
        maturity_secs = _maturity_months.mul(2592000); 
        discount = _discount; 
        min_early_redeem_secs = _min_early_redeem_secs;
        max_early_redemption_penalty_pct = _max_early_redemption_penalty_pct;
        purchase_price = _face_value.sub(_discount); 

        super._setBaseURI(FraxBond_NFT_Library.concatenate3("https://api.frax.finance/nft/frax-bonds/", FraxBond_NFT_Library.fxb_symboler(_series, _face_value, _maturity_months), "/"));
    }
    

    function bondDetails(uint256 serial_number) external view returns (BondViewDetails memory bond_details) {
        BondData memory thisBond = bondData[serial_number];

        bond_details = BondViewDetails({
            owner: ownerOf(serial_number),
            name: name(),
            symbol: symbol(),
            series: series,
            serial_number: serial_number,
            face_value: face_value,
            maturity_months: maturity_months,
            min_early_redeem_secs: min_early_redeem_secs,
            max_early_redemption_penalty_pct: max_early_redemption_penalty_pct,
            discount: discount,
            purchase_price: purchase_price,
            issue_timestamp: thisBond.issue_timestamp,
            maturity_timestamp: thisBond.maturity_timestamp,
            redeemed_timestamp: thisBond.redeemed_timestamp
        });
    }

    function calcPenaltyMultiplier(uint256 time_elapsed) public view returns (uint256 penalty_multiplier) {
        if (time_elapsed >= maturity_secs) penalty_multiplier = 0;
        else if (maturity_secs == min_early_redeem_secs) penalty_multiplier = 0;
        else {
            uint256 numerator = time_elapsed - min_early_redeem_secs;
            uint256 denominator = maturity_secs - min_early_redeem_secs;
            penalty_multiplier = uint256(1e6).sub(numerator.mul(1e6).div(denominator));
        }
    }

    function calcAPY() public view returns (uint256 apy) {
        
        apy = discount.mul(1e6).mul(12).div(maturity_months).div(face_value);
    }

    

    
    
    function issueBond(bool allow_unsafe_mint) external notMintPaused returns (uint256 serial_number) {
        serial_number = totalSupply();
        require(serial_number < mint_limit, "Mint limit reached");
        require(!_exists(serial_number), "Bond already exists");

        
        FRAX.transferFrom(msg.sender, address(this), purchase_price);

        
        FRAX.burn(purchase_price);

        
        bondData[serial_number] = BondData({
            issue_timestamp: block.timestamp,
            maturity_timestamp: (block.timestamp).add(maturity_secs),
            redeemed_timestamp: 0
        });

        
        if (allow_unsafe_mint){
            
            super._mint(msg.sender, serial_number);
        }
        else {
            
            
            super._safeMint(msg.sender, serial_number);
        }

        emit BondIssued(msg.sender, symbol(), serial_number);
    }

    function redeemBond(uint256 serial_number) external notRedeemPaused returns (uint256 maturity_value, uint256 return_value) {
        
        require(msg.sender == ownerOf(serial_number), "You are not the bond owner");

        
        BondData storage thisBond = bondData[serial_number];
        require(thisBond.redeemed_timestamp == 0, "Bond has already been redeemed");

        
        uint256 time_elapsed = (block.timestamp).sub(thisBond.issue_timestamp);
        require(time_elapsed >= min_early_redeem_secs, "You are trying to redeem too early");

        
        thisBond.redeemed_timestamp = block.timestamp;

        
        
        if (time_elapsed > maturity_secs) time_elapsed = maturity_secs; 
        maturity_value = face_value.sub(purchase_price).mul(time_elapsed).div(maturity_secs);

        
        uint256 penalty_multiplier = calcPenaltyMultiplier(time_elapsed);

        
        maturity_value = maturity_value.sub(maturity_value.mul(penalty_multiplier).mul(max_early_redemption_penalty_pct).div(1e12));

        
        return_value = purchase_price.add(maturity_value);

        
        FRAX.pool_mint(msg.sender, return_value);

        
        redeemed_bonds_count++;
        
        emit BondRedeemed(msg.sender, symbol(), serial_number);
    }

    function burn(uint256 serial_number) external {
        
        revert("Bonds can never be burned");
    }

    


    

    function toggleMinting() external {
        require(hasRole(MINT_PAUSER, msg.sender));
        mintPaused = !mintPaused;
    }

    function toggleRedeeming() external {
        require(hasRole(REDEEM_PAUSER, msg.sender));
        redeemPaused = !redeemPaused;
    }

    function setTimelock(address _new_timelock) external onlyByControllerOrGovernance {
        timelock_address = _new_timelock;
    }

    function setController(address _controller_address) external onlyByControllerOrGovernance {
        controller_address = _controller_address;
    }

    function setMintLimit(uint256 _new_mint_limit) external onlyByControllerOrGovernance {
        mint_limit = _new_mint_limit;
    }

    

    
    event BondIssued(address indexed user, string bond_name, uint256 serial_number);

    
    event BondRedeemed(address indexed user, string bond_name, uint256 serial_number);
}