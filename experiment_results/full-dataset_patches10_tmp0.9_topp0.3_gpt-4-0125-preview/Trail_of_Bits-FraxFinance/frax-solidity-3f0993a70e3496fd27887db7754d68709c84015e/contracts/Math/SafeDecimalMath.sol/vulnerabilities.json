{
  "smartbugs_completed": "No vulnerabilities found",
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_4"
      ],
      "vulnerability_findings": [
        {
          "name": "solc-version",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.6.11;\n",
          "message": "Detected issues with version pragma in SafeDecimalMath.sol:\n\t- pragma solidity0.6.11 (SafeDecimalMath.sol#4): it allows old versions\n\t- pragma solidity0.6.11 (SafeDecimalMath.sol#163): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 222,
          "vulnerability_to_line": 235,
          "vulnerability_code": "    function _multiplyDecimalRound(\n\n        uint x,\n\n        uint y,\n\n        uint precisionUnit\n\n    ) private pure returns (uint) {\n\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\n\n        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\n\n\n\n        if (quotientTimesTen % 10 >= 5) {\n\n            quotientTimesTen += 10;\n\n        }\n\n\n\n        return quotientTimesTen / 10;\n",
          "message": "Function 'SafeDecimalMath._multiplyDecimalRound' (SafeDecimalMath.sol#222-235) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 291,
          "vulnerability_to_line": 303,
          "vulnerability_code": "    function _divideDecimalRound(\n\n        uint x,\n\n        uint y,\n\n        uint precisionUnit\n\n    ) private pure returns (uint) {\n\n        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\n\n\n\n        if (resultTimesTen % 10 >= 5) {\n\n            resultTimesTen += 10;\n\n        }\n\n\n\n        return resultTimesTen / 10;\n",
          "message": "Function 'SafeDecimalMath._divideDecimalRound' (SafeDecimalMath.sol#291-303) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 public constant highPrecisionDecimals = 27;\n",
          "message": "Constant 'SafeDecimalMath.highPrecisionDecimals' (SafeDecimalMath.sol#173) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 180,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 169,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}