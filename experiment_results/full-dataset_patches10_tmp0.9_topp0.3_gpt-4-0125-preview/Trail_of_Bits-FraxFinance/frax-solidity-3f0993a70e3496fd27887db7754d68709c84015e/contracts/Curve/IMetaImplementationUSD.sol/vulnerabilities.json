{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_58"
      ],
      "vulnerability_findings": [
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 54,
          "vulnerability_code": "interface IMetaImplementationUSD {\n\n\n\n\t// Deployment\n\n\tfunction __init__() external;\n\n\tfunction initialize(string memory _name, string memory _symbol, address _coin, uint _decimals, uint _A, uint _fee, address _admin) external;\n\n\n\n\t// ERC20 Standard\n\n\tfunction decimals() external view returns (uint);\n\n\tfunction transfer(address _to, uint _value) external returns (uint256);\n\n\tfunction transferFrom(address _from, address _to, uint _value) external returns (bool);\n\n\tfunction approve(address _spender, uint _value) external returns (bool);\n\n\tfunction balanceOf(address _owner) external view returns (uint256);\n\n\tfunction totalSupply() external view returns (uint256);\n\n\n\n\n\n\t// StableSwap Functionality\n\n\tfunction get_previous_balances() external view returns (uint[2] memory);\n\n\tfunction get_twap_balances(uint[2] memory _first_balances, uint[2] memory _last_balances, uint _time_elapsed) external view returns (uint[2] memory);\n\n\tfunction get_price_cumulative_last() external view returns (uint[2] memory);\n\n\tfunction admin_fee() external view returns (uint);\n\n\tfunction A() external view returns (uint);\n\n\tfunction A_precise() external view returns (uint);\n\n\tfunction get_virtual_price() external view returns (uint);\n\n\tfunction calc_token_amount(uint[2] memory _amounts, bool _is_deposit) external view returns (uint);\n\n\tfunction calc_token_amount(uint[2] memory _amounts, bool _is_deposit, bool _previous) external view returns (uint);\n\n\tfunction add_liquidity(uint[2] memory _amounts, uint _min_mint_amount) external returns (uint);\n\n\tfunction add_liquidity(uint[2] memory _amounts, uint _min_mint_amount, address _receiver) external returns (uint);\n\n\tfunction get_dy(int128 i, int128 j, uint256 dx) external view returns (uint256);\n\n\tfunction get_dy(int128 i, int128 j, uint256 dx, uint256[2] memory _balances) external view returns (uint256);\n\n\tfunction get_dy_underlying(int128 i, int128 j, uint256 dx) external view returns (uint256);\n\n\tfunction get_dy_underlying(int128 i, int128 j, uint256 dx, uint256[2] memory _balances) external view returns (uint256);\n\n\tfunction exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external returns (uint256);\n\n\tfunction exchange(int128 i, int128 j, uint256 dx, uint256 min_dy, address _receiver) external returns (uint256);\n\n\tfunction exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy) external returns (uint256);\n\n\tfunction exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy, address _receiver) external returns (uint256);\n\n\tfunction remove_liquidity(uint256 _burn_amount, uint256[2] memory _min_amounts) external returns (uint256[2] memory);\n\n\tfunction remove_liquidity(uint256 _burn_amount, uint256[2] memory _min_amounts, address _receiver) external returns (uint256[2] memory);\n\n\tfunction remove_liquidity_imbalance(uint256[2] memory _amounts, uint256 _max_burn_amount) external returns (uint256);\n\n\tfunction remove_liquidity_imbalance(uint256[2] memory _amounts, uint256 _max_burn_amount, address _receiver) external returns (uint256);\n\n\tfunction calc_withdraw_one_coin(uint256 _burn_amount, int128 i) external view returns (uint256);\n\n\tfunction calc_withdraw_one_coin(uint256 _burn_amount, int128 i, bool _previous) external view returns (uint256);\n\n\tfunction remove_liquidity_one_coin(uint256 _burn_amount, int128 i, uint256 _min_received) external returns (uint256);\n\n\tfunction remove_liquidity_one_coin(uint256 _burn_amount, int128 i, uint256 _min_received, address _receiver) external returns (uint256);\n\n\tfunction ramp_A(uint256 _future_A, uint256 _future_time) external;\n\n\tfunction stop_ramp_A() external;\n\n\tfunction admin_balances(uint256 i) external view returns (uint256);\n\n\tfunction withdraw_admin_fees() external;\n",
          "message": "IMetaImplementationUSD (IMetaImplementationUSD.sol#7-54) has incorrect ERC20 function interface(s):\n\t-transfer (IMetaImplementationUSD.sol#15)\n"
        },
        {
          "name": "pragma",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.6.11;\n",
          "message": "Different versions of Solidity is used in IMetaImplementationUSD.sol:\n\t- Version used: ['0.6.11', 'ABIEncoderV2']\n\t- IMetaImplementationUSD.sol#4 declares pragma solidity0.6.11\n\t- IMetaImplementationUSD.sol#5 declares pragma experimentalABIEncoderV2\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.6.11;\n",
          "message": "Detected issues with version pragma in IMetaImplementationUSD.sol:\n\t- pragma solidity0.6.11 (IMetaImplementationUSD.sol#4): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction __init__() external;\n",
          "message": "Function 'IMetaImplementationUSD.__init__' (IMetaImplementationUSD.sol#10) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction get_previous_balances() external view returns (uint[2] memory);\n",
          "message": "Function 'IMetaImplementationUSD.get_previous_balances' (IMetaImplementationUSD.sol#23) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction get_twap_balances(uint[2] memory _first_balances, uint[2] memory _last_balances, uint _time_elapsed) external view returns (uint[2] memory);\n",
          "message": "Function 'IMetaImplementationUSD.get_twap_balances' (IMetaImplementationUSD.sol#24) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction get_twap_balances(uint[2] memory _first_balances, uint[2] memory _last_balances, uint _time_elapsed) external view returns (uint[2] memory);\n",
          "message": "Parameter '_first_balances' of IMetaImplementationUSD.get_twap_balances (IMetaImplementationUSD.sol#24) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction get_twap_balances(uint[2] memory _first_balances, uint[2] memory _last_balances, uint _time_elapsed) external view returns (uint[2] memory);\n",
          "message": "Parameter '_last_balances' of IMetaImplementationUSD.get_twap_balances (IMetaImplementationUSD.sol#24) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction get_twap_balances(uint[2] memory _first_balances, uint[2] memory _last_balances, uint _time_elapsed) external view returns (uint[2] memory);\n",
          "message": "Parameter '_time_elapsed' of IMetaImplementationUSD.get_twap_balances (IMetaImplementationUSD.sol#24) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction get_price_cumulative_last() external view returns (uint[2] memory);\n",
          "message": "Function 'IMetaImplementationUSD.get_price_cumulative_last' (IMetaImplementationUSD.sol#25) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction admin_fee() external view returns (uint);\n",
          "message": "Function 'IMetaImplementationUSD.admin_fee' (IMetaImplementationUSD.sol#26) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction A() external view returns (uint);\n",
          "message": "Function 'IMetaImplementationUSD.A' (IMetaImplementationUSD.sol#27) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction A_precise() external view returns (uint);\n",
          "message": "Function 'IMetaImplementationUSD.A_precise' (IMetaImplementationUSD.sol#28) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction get_virtual_price() external view returns (uint);\n",
          "message": "Function 'IMetaImplementationUSD.get_virtual_price' (IMetaImplementationUSD.sol#29) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction calc_token_amount(uint[2] memory _amounts, bool _is_deposit) external view returns (uint);\n",
          "message": "Function 'IMetaImplementationUSD.calc_token_amount' (IMetaImplementationUSD.sol#30) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction calc_token_amount(uint[2] memory _amounts, bool _is_deposit) external view returns (uint);\n",
          "message": "Parameter '_is_deposit' of IMetaImplementationUSD.calc_token_amount (IMetaImplementationUSD.sol#30) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction calc_token_amount(uint[2] memory _amounts, bool _is_deposit, bool _previous) external view returns (uint);\n",
          "message": "Function 'IMetaImplementationUSD.calc_token_amount' (IMetaImplementationUSD.sol#31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction calc_token_amount(uint[2] memory _amounts, bool _is_deposit, bool _previous) external view returns (uint);\n",
          "message": "Parameter '_is_deposit' of IMetaImplementationUSD.calc_token_amount (IMetaImplementationUSD.sol#31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction add_liquidity(uint[2] memory _amounts, uint _min_mint_amount) external returns (uint);\n",
          "message": "Function 'IMetaImplementationUSD.add_liquidity' (IMetaImplementationUSD.sol#32) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction add_liquidity(uint[2] memory _amounts, uint _min_mint_amount) external returns (uint);\n",
          "message": "Parameter '_min_mint_amount' of IMetaImplementationUSD.add_liquidity (IMetaImplementationUSD.sol#32) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction add_liquidity(uint[2] memory _amounts, uint _min_mint_amount, address _receiver) external returns (uint);\n",
          "message": "Function 'IMetaImplementationUSD.add_liquidity' (IMetaImplementationUSD.sol#33) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction add_liquidity(uint[2] memory _amounts, uint _min_mint_amount, address _receiver) external returns (uint);\n",
          "message": "Parameter '_min_mint_amount' of IMetaImplementationUSD.add_liquidity (IMetaImplementationUSD.sol#33) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction get_dy(int128 i, int128 j, uint256 dx) external view returns (uint256);\n",
          "message": "Function 'IMetaImplementationUSD.get_dy' (IMetaImplementationUSD.sol#34) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction get_dy(int128 i, int128 j, uint256 dx, uint256[2] memory _balances) external view returns (uint256);\n",
          "message": "Function 'IMetaImplementationUSD.get_dy' (IMetaImplementationUSD.sol#35) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction get_dy_underlying(int128 i, int128 j, uint256 dx) external view returns (uint256);\n",
          "message": "Function 'IMetaImplementationUSD.get_dy_underlying' (IMetaImplementationUSD.sol#36) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction get_dy_underlying(int128 i, int128 j, uint256 dx, uint256[2] memory _balances) external view returns (uint256);\n",
          "message": "Function 'IMetaImplementationUSD.get_dy_underlying' (IMetaImplementationUSD.sol#37) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external returns (uint256);\n",
          "message": "Parameter 'min_dy' of IMetaImplementationUSD.exchange (IMetaImplementationUSD.sol#38) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction exchange(int128 i, int128 j, uint256 dx, uint256 min_dy, address _receiver) external returns (uint256);\n",
          "message": "Parameter 'min_dy' of IMetaImplementationUSD.exchange (IMetaImplementationUSD.sol#39) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy) external returns (uint256);\n",
          "message": "Function 'IMetaImplementationUSD.exchange_underlying' (IMetaImplementationUSD.sol#40) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy) external returns (uint256);\n",
          "message": "Parameter 'min_dy' of IMetaImplementationUSD.exchange_underlying (IMetaImplementationUSD.sol#40) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy, address _receiver) external returns (uint256);\n",
          "message": "Function 'IMetaImplementationUSD.exchange_underlying' (IMetaImplementationUSD.sol#41) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy, address _receiver) external returns (uint256);\n",
          "message": "Parameter 'min_dy' of IMetaImplementationUSD.exchange_underlying (IMetaImplementationUSD.sol#41) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction remove_liquidity(uint256 _burn_amount, uint256[2] memory _min_amounts) external returns (uint256[2] memory);\n",
          "message": "Function 'IMetaImplementationUSD.remove_liquidity' (IMetaImplementationUSD.sol#42) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction remove_liquidity(uint256 _burn_amount, uint256[2] memory _min_amounts) external returns (uint256[2] memory);\n",
          "message": "Parameter '_burn_amount' of IMetaImplementationUSD.remove_liquidity (IMetaImplementationUSD.sol#42) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction remove_liquidity(uint256 _burn_amount, uint256[2] memory _min_amounts) external returns (uint256[2] memory);\n",
          "message": "Parameter '_min_amounts' of IMetaImplementationUSD.remove_liquidity (IMetaImplementationUSD.sol#42) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction remove_liquidity(uint256 _burn_amount, uint256[2] memory _min_amounts, address _receiver) external returns (uint256[2] memory);\n",
          "message": "Function 'IMetaImplementationUSD.remove_liquidity' (IMetaImplementationUSD.sol#43) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction remove_liquidity(uint256 _burn_amount, uint256[2] memory _min_amounts, address _receiver) external returns (uint256[2] memory);\n",
          "message": "Parameter '_burn_amount' of IMetaImplementationUSD.remove_liquidity (IMetaImplementationUSD.sol#43) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction remove_liquidity(uint256 _burn_amount, uint256[2] memory _min_amounts, address _receiver) external returns (uint256[2] memory);\n",
          "message": "Parameter '_min_amounts' of IMetaImplementationUSD.remove_liquidity (IMetaImplementationUSD.sol#43) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction remove_liquidity_imbalance(uint256[2] memory _amounts, uint256 _max_burn_amount) external returns (uint256);\n",
          "message": "Function 'IMetaImplementationUSD.remove_liquidity_imbalance' (IMetaImplementationUSD.sol#44) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction remove_liquidity_imbalance(uint256[2] memory _amounts, uint256 _max_burn_amount) external returns (uint256);\n",
          "message": "Parameter '_max_burn_amount' of IMetaImplementationUSD.remove_liquidity_imbalance (IMetaImplementationUSD.sol#44) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction remove_liquidity_imbalance(uint256[2] memory _amounts, uint256 _max_burn_amount, address _receiver) external returns (uint256);\n",
          "message": "Function 'IMetaImplementationUSD.remove_liquidity_imbalance' (IMetaImplementationUSD.sol#45) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction remove_liquidity_imbalance(uint256[2] memory _amounts, uint256 _max_burn_amount, address _receiver) external returns (uint256);\n",
          "message": "Parameter '_max_burn_amount' of IMetaImplementationUSD.remove_liquidity_imbalance (IMetaImplementationUSD.sol#45) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction calc_withdraw_one_coin(uint256 _burn_amount, int128 i) external view returns (uint256);\n",
          "message": "Function 'IMetaImplementationUSD.calc_withdraw_one_coin' (IMetaImplementationUSD.sol#46) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction calc_withdraw_one_coin(uint256 _burn_amount, int128 i) external view returns (uint256);\n",
          "message": "Parameter '_burn_amount' of IMetaImplementationUSD.calc_withdraw_one_coin (IMetaImplementationUSD.sol#46) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction calc_withdraw_one_coin(uint256 _burn_amount, int128 i, bool _previous) external view returns (uint256);\n",
          "message": "Function 'IMetaImplementationUSD.calc_withdraw_one_coin' (IMetaImplementationUSD.sol#47) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction calc_withdraw_one_coin(uint256 _burn_amount, int128 i, bool _previous) external view returns (uint256);\n",
          "message": "Parameter '_burn_amount' of IMetaImplementationUSD.calc_withdraw_one_coin (IMetaImplementationUSD.sol#47) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction remove_liquidity_one_coin(uint256 _burn_amount, int128 i, uint256 _min_received) external returns (uint256);\n",
          "message": "Function 'IMetaImplementationUSD.remove_liquidity_one_coin' (IMetaImplementationUSD.sol#48) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction remove_liquidity_one_coin(uint256 _burn_amount, int128 i, uint256 _min_received) external returns (uint256);\n",
          "message": "Parameter '_burn_amount' of IMetaImplementationUSD.remove_liquidity_one_coin (IMetaImplementationUSD.sol#48) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction remove_liquidity_one_coin(uint256 _burn_amount, int128 i, uint256 _min_received) external returns (uint256);\n",
          "message": "Parameter '_min_received' of IMetaImplementationUSD.remove_liquidity_one_coin (IMetaImplementationUSD.sol#48) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction remove_liquidity_one_coin(uint256 _burn_amount, int128 i, uint256 _min_received, address _receiver) external returns (uint256);\n",
          "message": "Function 'IMetaImplementationUSD.remove_liquidity_one_coin' (IMetaImplementationUSD.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction remove_liquidity_one_coin(uint256 _burn_amount, int128 i, uint256 _min_received, address _receiver) external returns (uint256);\n",
          "message": "Parameter '_burn_amount' of IMetaImplementationUSD.remove_liquidity_one_coin (IMetaImplementationUSD.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction remove_liquidity_one_coin(uint256 _burn_amount, int128 i, uint256 _min_received, address _receiver) external returns (uint256);\n",
          "message": "Parameter '_min_received' of IMetaImplementationUSD.remove_liquidity_one_coin (IMetaImplementationUSD.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction ramp_A(uint256 _future_A, uint256 _future_time) external;\n",
          "message": "Function 'IMetaImplementationUSD.ramp_A' (IMetaImplementationUSD.sol#50) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction ramp_A(uint256 _future_A, uint256 _future_time) external;\n",
          "message": "Parameter '_future_A' of IMetaImplementationUSD.ramp_A (IMetaImplementationUSD.sol#50) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction ramp_A(uint256 _future_A, uint256 _future_time) external;\n",
          "message": "Parameter '_future_time' of IMetaImplementationUSD.ramp_A (IMetaImplementationUSD.sol#50) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction stop_ramp_A() external;\n",
          "message": "Function 'IMetaImplementationUSD.stop_ramp_A' (IMetaImplementationUSD.sol#51) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction admin_balances(uint256 i) external view returns (uint256);\n",
          "message": "Function 'IMetaImplementationUSD.admin_balances' (IMetaImplementationUSD.sol#52) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction withdraw_admin_fees() external;\n",
          "message": "Function 'IMetaImplementationUSD.withdraw_admin_fees' (IMetaImplementationUSD.sol#53) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "execution failed"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "input files do not contain any valid contracts"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}