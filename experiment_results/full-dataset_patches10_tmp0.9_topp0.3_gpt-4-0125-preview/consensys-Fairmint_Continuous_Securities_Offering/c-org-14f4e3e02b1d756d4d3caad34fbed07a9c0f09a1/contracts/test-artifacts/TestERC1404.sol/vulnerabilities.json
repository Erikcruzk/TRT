{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_11"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 20,
          "vulnerability_code": "  function detectTransferRestriction(\n\n    address _from,\n\n    address _to,\n\n    uint256 //_value\n\n  ) public\n\n    returns(uint8)\n\n  {\n\n    if(alwaysApproved[_from] || alwaysApproved[_to]) return 0;\n\n    return restriction;\n",
          "message": "TestERC1404.detectTransferRestriction (TestERC1404.sol#11-20) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": 36,
          "vulnerability_code": "  function messageForTransferRestriction(\n\n    uint8 _restrictionCode\n\n  ) public pure\n\n    returns(string memory)\n\n  {\n\n    if(_restrictionCode == 0)\n\n    {\n\n      return \"SUCCESS\";\n\n    }\n\n    else if(_restrictionCode == 1)\n\n    {\n\n      return \"DENIED\";\n\n    }\n\n    return \"UNKNOWN_ERROR\";\n",
          "message": "TestERC1404.messageForTransferRestriction (TestERC1404.sol#22-36) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": 43,
          "vulnerability_code": "  function updateRestriction(\n\n    uint8 _restriction\n\n  ) public\n\n  {\n\n    restriction = _restriction;\n",
          "message": "TestERC1404.updateRestriction (TestERC1404.sol#38-43) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": 50,
          "vulnerability_code": "  function approve(\n\n    address _alwaysApprovedAccount\n\n  ) public\n\n  {\n\n    alwaysApproved[_alwaysApprovedAccount] = true;\n",
          "message": "TestERC1404.approve (TestERC1404.sol#45-50) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": "Detected issues with version pragma in TestERC1404.sol:\n\t- pragma solidity^0.5.0 (TestERC1404.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _from,\n",
          "message": "Parameter '_from' of TestERC1404.detectTransferRestriction (TestERC1404.sol#12) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _to,\n",
          "message": "Parameter '_to' of TestERC1404.detectTransferRestriction (TestERC1404.sol#13) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 //_value\n",
          "message": "Parameter '' of TestERC1404.detectTransferRestriction (TestERC1404.sol#14) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 _restrictionCode\n",
          "message": "Parameter '_restrictionCode' of TestERC1404.messageForTransferRestriction (TestERC1404.sol#23) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 _restriction\n",
          "message": "Parameter '_restriction' of TestERC1404.updateRestriction (TestERC1404.sol#39) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _alwaysApprovedAccount\n",
          "message": "Parameter '_alwaysApprovedAccount' of TestERC1404.approve (TestERC1404.sol#46) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}