{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 656,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract BELT is ERC20, Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 282,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(string memory name_, string memory symbol_) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 283,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _name = name_;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 284,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _symbol = symbol_;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 285,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _decimals = 18;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 286,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 665,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(string memory name_, string memory symbol_, uint initialSupply_, address initialSupplyClaimer_, uint startBlockMining_) ERC20(name_, symbol_) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 666,
          "vulnerability_to_line": null,
          "vulnerability_code": "        initialSupply = initialSupply_;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 667,
          "vulnerability_to_line": null,
          "vulnerability_code": "        initialSupplyRemaining = initialSupply;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 668,
          "vulnerability_to_line": null,
          "vulnerability_code": "        initialSupplyClaimer = initialSupplyClaimer_;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 669,
          "vulnerability_to_line": null,
          "vulnerability_code": "        startBlockMining = startBlockMining_;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 670,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 506,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(0), \"ERC20: mint to the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 527,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(0), \"ERC20: burn from the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 557,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(owner != address(0), \"ERC20: approve from the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 558,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(spender != address(0), \"ERC20: approve to the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 625,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 646,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 647,
          "vulnerability_to_line": null,
          "vulnerability_code": "            newOwner != address(0),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 648,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Ownable: new owner is the zero address\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 649,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 673,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender==initialSupplyClaimer, \"msg.sener has no authority\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 674,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(initialSupplyRemaining >= _amount, \"_amount exceed an allowance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 527,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(0), \"ERC20: burn from the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 557,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(owner != address(0), \"ERC20: approve from the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 558,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(spender != address(0), \"ERC20: approve to the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 646,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 647,
          "vulnerability_to_line": null,
          "vulnerability_code": "            newOwner != address(0),\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 648,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Ownable: new owner is the zero address\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 649,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_35"
      ],
      "vulnerability_findings": [
        {
          "name": "constable-states",
          "vulnerability_from_line": 662,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public BELTPerBlock = 1178000000000000000;\n",
          "message": "BELT.BELTPerBlock should be constant (Belt.sol#662)\nBELT.burnAddress should be constant (Belt.sol#663)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 323,
          "vulnerability_to_line": 325,
          "vulnerability_code": "    function totalSupply() public view override returns (uint256) {\n\n        return _totalSupply;\n",
          "message": "ERC20.totalSupply (Belt.sol#323-325) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 180,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function totalSupply() external view returns (uint256);\n",
          "message": "IERC20.totalSupply (Belt.sol#180) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": 196,
          "vulnerability_code": "    function transfer(address recipient, uint256 amount)\n\n    external\n",
          "message": "IERC20.transfer (Belt.sol#194-196) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 342,
          "vulnerability_to_line": 350,
          "vulnerability_code": "    function transfer(address recipient, uint256 amount)\n\n    public\n\n    virtual\n\n    override\n\n    returns (bool)\n\n    {\n\n        _transfer(_msgSender(), recipient, amount);\n\n        return true;\n",
          "message": "ERC20.transfer (Belt.sol#342-350) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 355,
          "vulnerability_to_line": 363,
          "vulnerability_code": "    function allowance(address owner, address spender)\n\n    public\n\n    view\n\n    virtual\n\n    override\n\n    returns (uint256)\n\n    {\n\n        return _allowances[owner][spender];\n",
          "message": "ERC20.allowance (Belt.sol#355-363) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": 208,
          "vulnerability_code": "    function allowance(address owner, address spender)\n\n    external\n\n    view\n",
          "message": "IERC20.allowance (Belt.sol#205-208) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 372,
          "vulnerability_to_line": 380,
          "vulnerability_code": "    function approve(address spender, uint256 amount)\n\n    public\n\n    virtual\n\n    override\n\n    returns (bool)\n\n    {\n\n        _approve(_msgSender(), spender, amount);\n\n        return true;\n",
          "message": "ERC20.approve (Belt.sol#372-380) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address spender, uint256 amount) external returns (bool);\n",
          "message": "IERC20.approve (Belt.sol#224) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 235,
          "vulnerability_to_line": 239,
          "vulnerability_code": "    function transferFrom(\n\n        address sender,\n\n        address recipient,\n\n        uint256 amount\n",
          "message": "IERC20.transferFrom (Belt.sol#235-239) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 395,
          "vulnerability_to_line": 410,
          "vulnerability_code": "    function transferFrom(\n\n        address sender,\n\n        address recipient,\n\n        uint256 amount\n\n    ) public virtual override returns (bool) {\n\n        _transfer(sender, recipient, amount);\n\n        _approve(\n\n            sender,\n\n            _msgSender(),\n\n            _allowances[sender][_msgSender()].sub(\n\n                amount,\n\n                \"ERC20: transfer amount exceeds allowance\"\n\n            )\n\n        );\n\n        return true;\n",
          "message": "ERC20.transferFrom (Belt.sol#395-410) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 291,
          "vulnerability_to_line": 293,
          "vulnerability_code": "    function name() public view returns (string memory) {\n\n        return _name;\n",
          "message": "ERC20.name (Belt.sol#291-293) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 299,
          "vulnerability_to_line": 301,
          "vulnerability_code": "    function symbol() public view returns (string memory) {\n\n        return _symbol;\n",
          "message": "ERC20.symbol (Belt.sol#299-301) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 316,
          "vulnerability_to_line": 318,
          "vulnerability_code": "    function decimals() public view returns (uint8) {\n\n        return _decimals;\n",
          "message": "ERC20.decimals (Belt.sol#316-318) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 424,
          "vulnerability_to_line": 435,
          "vulnerability_code": "    function increaseAllowance(address spender, uint256 addedValue)\n\n    public\n\n    virtual\n\n    returns (bool)\n\n    {\n\n        _approve(\n\n            _msgSender(),\n\n            spender,\n\n            _allowances[_msgSender()][spender].add(addedValue)\n\n        );\n\n        return true;\n",
          "message": "ERC20.increaseAllowance (Belt.sol#424-435) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 451,
          "vulnerability_to_line": 465,
          "vulnerability_code": "    function decreaseAllowance(address spender, uint256 subtractedValue)\n\n    public\n\n    virtual\n\n    returns (bool)\n\n    {\n\n        _approve(\n\n            _msgSender(),\n\n            spender,\n\n            _allowances[_msgSender()][spender].sub(\n\n                subtractedValue,\n\n                \"ERC20: decreased allowance below zero\"\n\n            )\n\n        );\n\n        return true;\n",
          "message": "ERC20.decreaseAllowance (Belt.sol#451-465) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 617,
          "vulnerability_to_line": 619,
          "vulnerability_code": "    function owner() public view returns (address) {\n\n        return _owner;\n",
          "message": "Ownable.owner (Belt.sol#617-619) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 636,
          "vulnerability_to_line": 639,
          "vulnerability_code": "    function renounceOwnership() public virtual onlyOwner {\n\n        emit OwnershipTransferred(_owner, address(0));\n\n        _owner = address(0);\n",
          "message": "Ownable.renounceOwnership (Belt.sol#636-639) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 645,
          "vulnerability_to_line": 652,
          "vulnerability_code": "    function transferOwnership(address newOwner) public virtual onlyOwner {\n\n        require(\n\n            newOwner != address(0),\n\n            \"Ownable: new owner is the zero address\"\n\n        );\n\n        emit OwnershipTransferred(_owner, newOwner);\n\n        _owner = newOwner;\n",
          "message": "Ownable.transferOwnership (Belt.sol#645-652) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 672,
          "vulnerability_to_line": 678,
          "vulnerability_code": "    function claimInitialSupply(uint _amount) public {\n\n        require(msg.sender==initialSupplyClaimer, \"msg.sener has no authority\");\n\n        require(initialSupplyRemaining >= _amount, \"_amount exceed an allowance\");\n\n\n\n        initialSupplyRemaining = initialSupplyRemaining - _amount;\n\n        _mint(initialSupplyClaimer, _amount);\n",
          "message": "BELT.claimInitialSupply (Belt.sol#672-678) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 680,
          "vulnerability_to_line": 692,
          "vulnerability_code": "    function getCirculatingSupply() public view returns (uint) {\n\n        uint circulatingSupply = initialSupply - initialSupplyRemaining;\n\n\n\n        if(block.number > startBlockMining){\n\n            circulatingSupply = circulatingSupply + (block.number - startBlockMining) * BELTPerBlock;\n\n        }\n\n\n\n        if(circulatingSupply >= balanceOf(burnAddress)){\n\n            circulatingSupply = circulatingSupply - balanceOf(burnAddress);\n\n        }\n\n\n\n        return circulatingSupply;\n",
          "message": "BELT.getCirculatingSupply (Belt.sol#680-692) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 694,
          "vulnerability_to_line": 696,
          "vulnerability_code": "    function mint(address _to, uint256 _amount) public onlyOwner {\n\n        _mint(_to, _amount);\n",
          "message": "BELT.mint (Belt.sol#694-696) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.12;\n",
          "message": "Detected issues with version pragma in Belt.sol:\n\t- pragma solidity^0.6.12 (Belt.sol#7): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 13,
          "vulnerability_code": "    function _msgSender() internal view virtual returns (address payable) {\n\n        return msg.sender;\n",
          "message": "Function 'Context._msgSender' (Belt.sol#11-13) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 18,
          "vulnerability_code": "    function _msgData() internal view virtual returns (bytes memory) {\n\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n\n        return msg.data;\n",
          "message": "Function 'Context._msgData' (Belt.sol#15-18) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 481,
          "vulnerability_to_line": 494,
          "vulnerability_code": "    function _transfer(\n\n        address sender,\n\n        address recipient,\n\n        uint256 amount\n\n    ) internal virtual {\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n\n\n        _balances[sender] = _balances[sender].sub(\n\n            amount,\n\n            \"ERC20: transfer amount exceeds balance\"\n\n        );\n\n        _balances[recipient] = _balances[recipient].add(amount);\n\n        emit Transfer(sender, recipient, amount);\n",
          "message": "Function 'ERC20._transfer' (Belt.sol#481-494) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 505,
          "vulnerability_to_line": 513,
          "vulnerability_code": "    function _mint(address account, uint256 amount) internal virtual {\n\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n\n\n        _totalSupply = _totalSupply.add(amount);\n\n        _balances[account] = _balances[account].add(amount);\n\n        emit Transfer(address(0), account, amount);\n",
          "message": "Function 'ERC20._mint' (Belt.sol#505-513) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 526,
          "vulnerability_to_line": 537,
          "vulnerability_code": "    function _burn(address account, uint256 amount) internal virtual {\n\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n\n\n        _balances[account] = _balances[account].sub(\n\n            amount,\n\n            \"ERC20: burn amount exceeds balance\"\n\n        );\n\n        _totalSupply = _totalSupply.sub(amount);\n\n        emit Transfer(account, address(0), amount);\n",
          "message": "Function 'ERC20._burn' (Belt.sol#526-537) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 552,
          "vulnerability_to_line": 562,
          "vulnerability_code": "    function _approve(\n\n        address owner,\n\n        address spender,\n\n        uint256 amount\n\n    ) internal virtual {\n\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n\n\n        _allowances[owner][spender] = amount;\n\n        emit Approval(owner, spender, amount);\n",
          "message": "Function 'ERC20._approve' (Belt.sol#552-562) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 571,
          "vulnerability_to_line": 573,
          "vulnerability_code": "    function _setupDecimals(uint8 decimals_) internal {\n\n        _decimals = decimals_;\n",
          "message": "Function 'ERC20._setupDecimals' (Belt.sol#571-573) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 589,
          "vulnerability_to_line": 593,
          "vulnerability_code": "    function _beforeTokenTransfer(\n\n        address from,\n\n        address to,\n\n        uint256 amount\n",
          "message": "Function 'ERC20._beforeTokenTransfer' (Belt.sol#589-593) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 672,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function claimInitialSupply(uint _amount) public {\n",
          "message": "Parameter '_amount' of BELT.claimInitialSupply (Belt.sol#672) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 694,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mint(address _to, uint256 _amount) public onlyOwner {\n",
          "message": "Parameter '_to' of BELT.mint (Belt.sol#694) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 694,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mint(address _to, uint256 _amount) public onlyOwner {\n",
          "message": "Parameter '_amount' of BELT.mint (Belt.sol#694) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 662,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public BELTPerBlock = 1178000000000000000;\n",
          "message": "Variable 'BELT.BELTPerBlock' (Belt.sol#662) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 663,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address public burnAddress = 0x000000000000000000000000000000000000dEaD;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 508,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _beforeTokenTransfer(address(0), account, amount);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 529,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _beforeTokenTransfer(account, address(0), amount);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 638,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _owner = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 372,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address spender, uint256 amount)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.12;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 263,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint256) private _balances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 265,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => mapping(address => uint256)) private _allowances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 267,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _totalSupply;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 269,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private _name;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 270,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private _symbol;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 271,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 private _decimals;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 598,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address private _owner;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 261,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}