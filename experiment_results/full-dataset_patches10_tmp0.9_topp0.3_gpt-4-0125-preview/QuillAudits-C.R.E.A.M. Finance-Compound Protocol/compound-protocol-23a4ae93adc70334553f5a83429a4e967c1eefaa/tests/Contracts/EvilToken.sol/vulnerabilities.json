{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "inefficient-state-variable-increment",
          "vulnerability_from_line": 448,
          "vulnerability_to_line": null,
          "vulnerability_code": "        totalSupply_ += value;\n",
          "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 229,
          "vulnerability_to_line": null,
          "vulnerability_code": "        totalSupply = _initialAmount;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 230,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balanceOf[msg.sender] = _initialAmount;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 231,
          "vulnerability_to_line": null,
          "vulnerability_code": "        name = _tokenName;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "        symbol = _tokenSymbol;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 233,
          "vulnerability_to_line": null,
          "vulnerability_code": "        decimals = _decimalUnits;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 234,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 273,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 274,
          "vulnerability_to_line": null,
          "vulnerability_code": "        totalSupply = _initialAmount;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 275,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balanceOf[msg.sender] = _initialAmount;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 276,
          "vulnerability_to_line": null,
          "vulnerability_code": "        name = _tokenName;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 277,
          "vulnerability_to_line": null,
          "vulnerability_code": "        symbol = _tokenSymbol;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": null,
          "vulnerability_code": "        decimals = _decimalUnits;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 279,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 308,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 309,
          "vulnerability_to_line": null,
          "vulnerability_code": "        StandardToken(_initialAmount, _tokenName, _decimalUnits, _tokenSymbol) {}\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 352,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol, address _comptroller) public\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 353,
          "vulnerability_to_line": null,
          "vulnerability_code": "        ERC20Harness(_initialAmount, _tokenName, _decimalUnits, _tokenSymbol) {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 354,
          "vulnerability_to_line": null,
          "vulnerability_code": "        comptroller = _comptroller;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 355,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 368,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 369,
          "vulnerability_to_line": null,
          "vulnerability_code": "        StandardToken(_initialAmount, _tokenName, _decimalUnits, _tokenSymbol) {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 370,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 385,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 386,
          "vulnerability_to_line": null,
          "vulnerability_code": "        NonStandardToken(_initialAmount, _tokenName, _decimalUnits, _tokenSymbol) {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 387,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 417,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol, bytes memory _reEntryCallData, string memory _reEntryFun) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 418,
          "vulnerability_to_line": null,
          "vulnerability_code": "        totalSupply_ = _initialAmount;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 419,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balanceOf_[msg.sender] = _initialAmount;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 420,
          "vulnerability_to_line": null,
          "vulnerability_code": "        name = _tokenName;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 421,
          "vulnerability_to_line": null,
          "vulnerability_code": "        symbol = _tokenSymbol;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 422,
          "vulnerability_to_line": null,
          "vulnerability_code": "        decimals = _decimalUnits;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 423,
          "vulnerability_to_line": null,
          "vulnerability_code": "        reEntryCallData = _reEntryCallData;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 424,
          "vulnerability_to_line": null,
          "vulnerability_code": "        reEntryFun = _reEntryFun;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 425,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 507,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 508,
          "vulnerability_to_line": null,
          "vulnerability_code": "        FaucetToken(_initialAmount, _tokenName, _decimalUnits, _tokenSymbol) {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 509,
          "vulnerability_to_line": null,
          "vulnerability_code": "        fail = true;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 510,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_43"
      ],
      "vulnerability_findings": [
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 208,
          "vulnerability_to_line": 211,
          "vulnerability_code": "contract ERC20NS is ERC20Base {\n\n    function transfer(address to, uint256 value) external;\n\n    function transferFrom(address from, address to, uint256 value) external;\n",
          "message": "ERC20NS (EvilToken.sol#208-211) has incorrect ERC20 function interface(s):\n\t-transfer (EvilToken.sol#209)\n\t-transferFrom (EvilToken.sol#210)\n"
        },
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 263,
          "vulnerability_to_line": 299,
          "vulnerability_code": "contract NonStandardToken is ERC20NS {\n\n    using SafeMath for uint256;\n\n\n\n    string public name;\n\n    uint8 public decimals;\n\n    string public symbol;\n\n    uint256 public totalSupply;\n\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    mapping(address => uint256) public balanceOf;\n\n\n\n    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n\n        totalSupply = _initialAmount;\n\n        balanceOf[msg.sender] = _initialAmount;\n\n        name = _tokenName;\n\n        symbol = _tokenSymbol;\n\n        decimals = _decimalUnits;\n\n    }\n\n\n\n    function transfer(address dst, uint256 amount) external {\n\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(amount, \"Insufficient balance\");\n\n        balanceOf[dst] = balanceOf[dst].add(amount, \"Balance overflow\");\n\n        emit Transfer(msg.sender, dst, amount);\n\n    }\n\n\n\n    function transferFrom(address src, address dst, uint256 amount) external {\n\n        allowance[src][msg.sender] = allowance[src][msg.sender].sub(amount, \"Insufficient allowance\");\n\n        balanceOf[src] = balanceOf[src].sub(amount, \"Insufficient balance\");\n\n        balanceOf[dst] = balanceOf[dst].add(amount, \"Balance overflow\");\n\n        emit Transfer(src, dst, amount);\n\n    }\n\n\n\n    function approve(address _spender, uint256 amount) external returns (bool) {\n\n        allowance[msg.sender][_spender] = amount;\n\n        emit Approval(msg.sender, _spender, amount);\n\n        return true;\n\n    }\n",
          "message": "NonStandardToken (EvilToken.sol#263-299) has incorrect ERC20 function interface(s):\n\t-transfer (EvilToken.sol#281-285)\n\t-transferFrom (EvilToken.sol#287-292)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 311,
          "vulnerability_to_line": 313,
          "vulnerability_code": "    function harnessSetFailTransferFromAddress(address src, bool _fail) public {\n\n        failTransferFromAddresses[src] = _fail;\n",
          "message": "ERC20Harness.harnessSetFailTransferFromAddress (EvilToken.sol#311-313) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 315,
          "vulnerability_to_line": 317,
          "vulnerability_code": "    function harnessSetFailTransferToAddress(address dst, bool _fail) public {\n\n        failTransferToAddresses[dst] = _fail;\n",
          "message": "ERC20Harness.harnessSetFailTransferToAddress (EvilToken.sol#315-317) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 319,
          "vulnerability_to_line": 321,
          "vulnerability_code": "    function harnessSetBalance(address _account, uint _amount) public {\n\n        balanceOf[_account] = _amount;\n",
          "message": "ERC20Harness.harnessSetBalance (EvilToken.sol#319-321) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 372,
          "vulnerability_to_line": 376,
          "vulnerability_code": "    function allocateTo(address _owner, uint256 value) public {\n\n        balanceOf[_owner] += value;\n\n        totalSupply += value;\n\n        emit Transfer(address(this), _owner, value);\n",
          "message": "FaucetToken.allocateTo (EvilToken.sol#372-376) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 389,
          "vulnerability_to_line": 393,
          "vulnerability_code": "    function allocateTo(address _owner, uint256 value) public {\n\n        balanceOf[_owner] += value;\n\n        totalSupply += value;\n\n        emit Transfer(address(this), _owner, value);\n",
          "message": "FaucetNonStandardToken.allocateTo (EvilToken.sol#389-393) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 446,
          "vulnerability_to_line": 450,
          "vulnerability_code": "    function allocateTo(address _owner, uint256 value) public {\n\n        balanceOf_[_owner] += value;\n\n        totalSupply_ += value;\n\n        emit Transfer(address(this), _owner, value);\n",
          "message": "FaucetTokenReEntrantHarness.allocateTo (EvilToken.sol#446-450) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 452,
          "vulnerability_to_line": 454,
          "vulnerability_code": "    function totalSupply() public reEnter(\"totalSupply\") returns (uint256) {\n\n        return totalSupply_;\n",
          "message": "FaucetTokenReEntrantHarness.totalSupply (EvilToken.sol#452-454) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 456,
          "vulnerability_to_line": 458,
          "vulnerability_code": "    function allowance(address owner, address spender) public reEnter(\"allowance\") returns (uint256 remaining) {\n\n        return allowance_[owner][spender];\n",
          "message": "FaucetTokenReEntrantHarness.allowance (EvilToken.sol#456-458) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 460,
          "vulnerability_to_line": 463,
          "vulnerability_code": "    function approve(address spender, uint256 amount) public reEnter(\"approve\") returns (bool success) {\n\n        _approve(msg.sender, spender, amount);\n\n        return true;\n",
          "message": "FaucetTokenReEntrantHarness.approve (EvilToken.sol#460-463) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 465,
          "vulnerability_to_line": 467,
          "vulnerability_code": "    function balanceOf(address owner) public reEnter(\"balanceOf\") returns (uint256 balance) {\n\n        return balanceOf_[owner];\n",
          "message": "FaucetTokenReEntrantHarness.balanceOf (EvilToken.sol#465-467) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 469,
          "vulnerability_to_line": 472,
          "vulnerability_code": "    function transfer(address dst, uint256 amount) public reEnter(\"transfer\") returns (bool success) {\n\n        _transfer(msg.sender, dst, amount);\n\n        return true;\n",
          "message": "FaucetTokenReEntrantHarness.transfer (EvilToken.sol#469-472) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 474,
          "vulnerability_to_line": 478,
          "vulnerability_code": "    function transferFrom(address src, address dst, uint256 amount) public reEnter(\"transferFrom\") returns (bool success) {\n\n        _transfer(src, dst, amount);\n\n        _approve(src, msg.sender, allowance_[src][msg.sender].sub(amount));\n\n        return true;\n",
          "message": "FaucetTokenReEntrantHarness.transferFrom (EvilToken.sol#474-478) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": "Detected issues with version pragma in EvilToken.sol:\n\t- pragma solidity^0.5.16 (EvilToken.sol#3): it allows old versions\n\t- pragma solidity^0.5.16 (EvilToken.sol#192): it allows old versions\n\t- pragma solidity^0.5.16 (EvilToken.sol#360): it allows old versions\n\t- pragma solidity^0.5.16 (EvilToken.sol#497): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 251,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 amount) external returns (bool) {\n",
          "message": "Parameter '_spender' of StandardToken.approve (EvilToken.sol#251) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Parameter '_initialAmount' of StandardToken. (EvilToken.sol#228) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Parameter '_tokenName' of StandardToken. (EvilToken.sol#228) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Parameter '_decimalUnits' of StandardToken. (EvilToken.sol#228) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Parameter '_tokenSymbol' of StandardToken. (EvilToken.sol#228) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 amount) external returns (bool) {\n",
          "message": "Parameter '_spender' of NonStandardToken.approve (EvilToken.sol#294) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 273,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Parameter '_initialAmount' of NonStandardToken. (EvilToken.sol#273) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 273,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Parameter '_tokenName' of NonStandardToken. (EvilToken.sol#273) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 273,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Parameter '_decimalUnits' of NonStandardToken. (EvilToken.sol#273) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 273,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Parameter '_tokenSymbol' of NonStandardToken. (EvilToken.sol#273) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 311,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function harnessSetFailTransferFromAddress(address src, bool _fail) public {\n",
          "message": "Parameter '_fail' of ERC20Harness.harnessSetFailTransferFromAddress (EvilToken.sol#311) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 315,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function harnessSetFailTransferToAddress(address dst, bool _fail) public {\n",
          "message": "Parameter '_fail' of ERC20Harness.harnessSetFailTransferToAddress (EvilToken.sol#315) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 319,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function harnessSetBalance(address _account, uint _amount) public {\n",
          "message": "Parameter '_account' of ERC20Harness.harnessSetBalance (EvilToken.sol#319) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 319,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function harnessSetBalance(address _account, uint _amount) public {\n",
          "message": "Parameter '_amount' of ERC20Harness.harnessSetBalance (EvilToken.sol#319) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 352,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol, address _comptroller) public\n",
          "message": "Parameter '_comptroller' of CTokenHarness. (EvilToken.sol#352) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 348,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool public constant isCToken = true;\n",
          "message": "Constant 'CTokenHarness.isCToken' (EvilToken.sol#348) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 372,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allocateTo(address _owner, uint256 value) public {\n",
          "message": "Parameter '_owner' of FaucetToken.allocateTo (EvilToken.sol#372) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 389,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allocateTo(address _owner, uint256 value) public {\n",
          "message": "Parameter '_owner' of FaucetNonStandardToken.allocateTo (EvilToken.sol#389) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 417,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol, bytes memory _reEntryCallData, string memory _reEntryFun) public {\n",
          "message": "Parameter '_initialAmount' of FaucetTokenReEntrantHarness. (EvilToken.sol#417) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 417,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol, bytes memory _reEntryCallData, string memory _reEntryFun) public {\n",
          "message": "Parameter '_tokenName' of FaucetTokenReEntrantHarness. (EvilToken.sol#417) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 417,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol, bytes memory _reEntryCallData, string memory _reEntryFun) public {\n",
          "message": "Parameter '_decimalUnits' of FaucetTokenReEntrantHarness. (EvilToken.sol#417) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 417,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol, bytes memory _reEntryCallData, string memory _reEntryFun) public {\n",
          "message": "Parameter '_tokenSymbol' of FaucetTokenReEntrantHarness. (EvilToken.sol#417) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 417,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol, bytes memory _reEntryCallData, string memory _reEntryFun) public {\n",
          "message": "Parameter '_reEntryCallData' of FaucetTokenReEntrantHarness. (EvilToken.sol#417) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 417,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol, bytes memory _reEntryCallData, string memory _reEntryFun) public {\n",
          "message": "Parameter '_reEntryFun' of FaucetTokenReEntrantHarness. (EvilToken.sol#417) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 446,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allocateTo(address _owner, uint256 value) public {\n",
          "message": "Parameter '_owner' of FaucetTokenReEntrantHarness.allocateTo (EvilToken.sol#446) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 480,
          "vulnerability_to_line": 485,
          "vulnerability_code": "    function _approve(address owner, address spender, uint256 amount) internal {\n\n        require(spender != address(0));\n\n        require(owner != address(0));\n\n        allowance_[owner][spender] = amount;\n\n        emit Approval(owner, spender, amount);\n",
          "message": "Function 'FaucetTokenReEntrantHarness._approve' (EvilToken.sol#480-485) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 487,
          "vulnerability_to_line": 492,
          "vulnerability_code": "    function _transfer(address src, address dst, uint256 amount) internal {\n\n        require(dst != address(0));\n\n        balanceOf_[src] = balanceOf_[src].sub(amount);\n\n        balanceOf_[dst] = balanceOf_[dst].add(amount);\n\n        emit Transfer(src, dst, amount);\n",
          "message": "Function 'FaucetTokenReEntrantHarness._transfer' (EvilToken.sol#487-492) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 512,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setFail(bool _fail) external {\n",
          "message": "Parameter '_fail' of EvilToken.setFail (EvilToken.sol#512) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 251,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 amount) external returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 amount) external returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 460,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address spender, uint256 amount) public reEnter(\"approve\") returns (bool success) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 192,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 360,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 497,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 219,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 264,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 402,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 432,
          "vulnerability_to_line": null,
          "vulnerability_code": "            assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 410,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 totalSupply_;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 411,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => mapping (address => uint256)) allowance_;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 412,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => uint256) balanceOf_;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}