{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 229,
          "vulnerability_to_line": null,
          "vulnerability_code": "        totalSupply = _initialAmount;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 230,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balanceOf[msg.sender] = _initialAmount;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 231,
          "vulnerability_to_line": null,
          "vulnerability_code": "        name = _tokenName;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "        symbol = _tokenSymbol;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 233,
          "vulnerability_to_line": null,
          "vulnerability_code": "        decimals = _decimalUnits;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 234,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 273,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 274,
          "vulnerability_to_line": null,
          "vulnerability_code": "        totalSupply = _initialAmount;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 275,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balanceOf[msg.sender] = _initialAmount;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 276,
          "vulnerability_to_line": null,
          "vulnerability_code": "        name = _tokenName;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 277,
          "vulnerability_to_line": null,
          "vulnerability_code": "        symbol = _tokenSymbol;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": null,
          "vulnerability_code": "        decimals = _decimalUnits;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 279,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 308,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 309,
          "vulnerability_to_line": null,
          "vulnerability_code": "        StandardToken(_initialAmount, _tokenName, _decimalUnits, _tokenSymbol) {}\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 352,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol, address _comptroller) public\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 353,
          "vulnerability_to_line": null,
          "vulnerability_code": "        ERC20Harness(_initialAmount, _tokenName, _decimalUnits, _tokenSymbol) {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 354,
          "vulnerability_to_line": null,
          "vulnerability_code": "        comptroller = _comptroller;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 355,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 368,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(ERC20 _sushi) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 369,
          "vulnerability_to_line": null,
          "vulnerability_code": "        sushi = _sushi;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 370,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_39"
      ],
      "vulnerability_findings": [
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 208,
          "vulnerability_to_line": 211,
          "vulnerability_code": "contract ERC20NS is ERC20Base {\n\n    function transfer(address to, uint256 value) external;\n\n    function transferFrom(address from, address to, uint256 value) external;\n",
          "message": "ERC20NS (MockSushiBar.sol#208-211) has incorrect ERC20 function interface(s):\n\t-transfer (MockSushiBar.sol#209)\n\t-transferFrom (MockSushiBar.sol#210)\n"
        },
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 263,
          "vulnerability_to_line": 299,
          "vulnerability_code": "contract NonStandardToken is ERC20NS {\n\n    using SafeMath for uint256;\n\n\n\n    string public name;\n\n    uint8 public decimals;\n\n    string public symbol;\n\n    uint256 public totalSupply;\n\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    mapping(address => uint256) public balanceOf;\n\n\n\n    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n\n        totalSupply = _initialAmount;\n\n        balanceOf[msg.sender] = _initialAmount;\n\n        name = _tokenName;\n\n        symbol = _tokenSymbol;\n\n        decimals = _decimalUnits;\n\n    }\n\n\n\n    function transfer(address dst, uint256 amount) external {\n\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(amount, \"Insufficient balance\");\n\n        balanceOf[dst] = balanceOf[dst].add(amount, \"Balance overflow\");\n\n        emit Transfer(msg.sender, dst, amount);\n\n    }\n\n\n\n    function transferFrom(address src, address dst, uint256 amount) external {\n\n        allowance[src][msg.sender] = allowance[src][msg.sender].sub(amount, \"Insufficient allowance\");\n\n        balanceOf[src] = balanceOf[src].sub(amount, \"Insufficient balance\");\n\n        balanceOf[dst] = balanceOf[dst].add(amount, \"Balance overflow\");\n\n        emit Transfer(src, dst, amount);\n\n    }\n\n\n\n    function approve(address _spender, uint256 amount) external returns (bool) {\n\n        allowance[msg.sender][_spender] = amount;\n\n        emit Approval(msg.sender, _spender, amount);\n\n        return true;\n\n    }\n",
          "message": "NonStandardToken (MockSushiBar.sol#263-299) has incorrect ERC20 function interface(s):\n\t-transfer (MockSushiBar.sol#281-285)\n\t-transferFrom (MockSushiBar.sol#287-292)\n"
        },
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 385,
          "vulnerability_to_line": 395,
          "vulnerability_code": "    function enter(uint256 _amount) public {\n\n        uint256 totalSushi = sushi.balanceOf(address(this));\n\n        uint256 totalShares = totalSupply;\n\n        if (totalShares == 0 || totalSushi == 0) {\n\n            _mint(msg.sender, _amount);\n\n        } else {\n\n            uint256 what = _amount.mul(totalShares).div(totalSushi);\n\n            _mint(msg.sender, what);\n\n        }\n\n        sushi.transferFrom(msg.sender, address(this), _amount);\n",
          "message": "SushiBar.enter (MockSushiBar.sol#385-395) uses a dangerous strict equality:\n\t- totalShares == 0 || totalSushi == 0\n\t- totalShares == 0 || totalSushi == 0\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 398,
          "vulnerability_to_line": 403,
          "vulnerability_code": "    function leave(uint256 _share) public {\n\n        uint256 totalShares = totalSupply;\n\n        uint256 what = _share.mul(sushi.balanceOf(address(this))).div(totalShares);\n\n        _burn(msg.sender, _share);\n\n        sushi.transfer(msg.sender, what);\n",
          "message": "Reentrancy in SushiBar.leave (MockSushiBar.sol#398-403):\n\tExternal calls:\n\t- what = _share.mul(sushi.balanceOf(address(this))).div(totalShares) (MockSushiBar.sol#400)\n\tState variables written after the call(s):\n\t- totalSupply (MockSushiBar.sol#401)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 385,
          "vulnerability_to_line": 395,
          "vulnerability_code": "    function enter(uint256 _amount) public {\n\n        uint256 totalSushi = sushi.balanceOf(address(this));\n\n        uint256 totalShares = totalSupply;\n\n        if (totalShares == 0 || totalSushi == 0) {\n\n            _mint(msg.sender, _amount);\n\n        } else {\n\n            uint256 what = _amount.mul(totalShares).div(totalSushi);\n\n            _mint(msg.sender, what);\n\n        }\n\n        sushi.transferFrom(msg.sender, address(this), _amount);\n",
          "message": "SushiBar.enter (MockSushiBar.sol#385-395) does not use the value returned by external calls:\n\t-sushi.transferFrom(msg.sender,address(this),_amount) (MockSushiBar.sol#394)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 398,
          "vulnerability_to_line": 403,
          "vulnerability_code": "    function leave(uint256 _share) public {\n\n        uint256 totalShares = totalSupply;\n\n        uint256 what = _share.mul(sushi.balanceOf(address(this))).div(totalShares);\n\n        _burn(msg.sender, _share);\n\n        sushi.transfer(msg.sender, what);\n",
          "message": "SushiBar.leave (MockSushiBar.sol#398-403) does not use the value returned by external calls:\n\t-sushi.transfer(msg.sender,what) (MockSushiBar.sol#402)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 385,
          "vulnerability_to_line": 395,
          "vulnerability_code": "    function enter(uint256 _amount) public {\n\n        uint256 totalSushi = sushi.balanceOf(address(this));\n\n        uint256 totalShares = totalSupply;\n\n        if (totalShares == 0 || totalSushi == 0) {\n\n            _mint(msg.sender, _amount);\n\n        } else {\n\n            uint256 what = _amount.mul(totalShares).div(totalSushi);\n\n            _mint(msg.sender, what);\n\n        }\n\n        sushi.transferFrom(msg.sender, address(this), _amount);\n",
          "message": "Reentrancy in SushiBar.enter (MockSushiBar.sol#385-395):\n\tExternal calls:\n\t- totalSushi = sushi.balanceOf(address(this)) (MockSushiBar.sol#386)\n\tState variables written after the call(s):\n\t- balanceOf (MockSushiBar.sol#389)\n\t- balanceOf (MockSushiBar.sol#392)\n\t- totalSupply (MockSushiBar.sol#389)\n\t- totalSupply (MockSushiBar.sol#392)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 398,
          "vulnerability_to_line": 403,
          "vulnerability_code": "    function leave(uint256 _share) public {\n\n        uint256 totalShares = totalSupply;\n\n        uint256 what = _share.mul(sushi.balanceOf(address(this))).div(totalShares);\n\n        _burn(msg.sender, _share);\n\n        sushi.transfer(msg.sender, what);\n",
          "message": "Reentrancy in SushiBar.leave (MockSushiBar.sol#398-403):\n\tExternal calls:\n\t- what = _share.mul(sushi.balanceOf(address(this))).div(totalShares) (MockSushiBar.sol#400)\n\tState variables written after the call(s):\n\t- balanceOf (MockSushiBar.sol#401)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 311,
          "vulnerability_to_line": 313,
          "vulnerability_code": "    function harnessSetFailTransferFromAddress(address src, bool _fail) public {\n\n        failTransferFromAddresses[src] = _fail;\n",
          "message": "ERC20Harness.harnessSetFailTransferFromAddress (MockSushiBar.sol#311-313) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 315,
          "vulnerability_to_line": 317,
          "vulnerability_code": "    function harnessSetFailTransferToAddress(address dst, bool _fail) public {\n\n        failTransferToAddresses[dst] = _fail;\n",
          "message": "ERC20Harness.harnessSetFailTransferToAddress (MockSushiBar.sol#315-317) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 319,
          "vulnerability_to_line": 321,
          "vulnerability_code": "    function harnessSetBalance(address _account, uint _amount) public {\n\n        balanceOf[_account] = _amount;\n",
          "message": "ERC20Harness.harnessSetBalance (MockSushiBar.sol#319-321) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 385,
          "vulnerability_to_line": 395,
          "vulnerability_code": "    function enter(uint256 _amount) public {\n\n        uint256 totalSushi = sushi.balanceOf(address(this));\n\n        uint256 totalShares = totalSupply;\n\n        if (totalShares == 0 || totalSushi == 0) {\n\n            _mint(msg.sender, _amount);\n\n        } else {\n\n            uint256 what = _amount.mul(totalShares).div(totalSushi);\n\n            _mint(msg.sender, what);\n\n        }\n\n        sushi.transferFrom(msg.sender, address(this), _amount);\n",
          "message": "SushiBar.enter (MockSushiBar.sol#385-395) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 398,
          "vulnerability_to_line": 403,
          "vulnerability_code": "    function leave(uint256 _share) public {\n\n        uint256 totalShares = totalSupply;\n\n        uint256 what = _share.mul(sushi.balanceOf(address(this))).div(totalShares);\n\n        _burn(msg.sender, _share);\n\n        sushi.transfer(msg.sender, what);\n",
          "message": "SushiBar.leave (MockSushiBar.sol#398-403) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": "Detected issues with version pragma in MockSushiBar.sol:\n\t- pragma solidity^0.5.16 (MockSushiBar.sol#3): it allows old versions\n\t- pragma solidity^0.5.16 (MockSushiBar.sol#192): it allows old versions\n\t- pragma solidity^0.5.16 (MockSushiBar.sol#360): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 251,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 amount) external returns (bool) {\n",
          "message": "Parameter '_spender' of StandardToken.approve (MockSushiBar.sol#251) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Parameter '_initialAmount' of StandardToken. (MockSushiBar.sol#228) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Parameter '_tokenName' of StandardToken. (MockSushiBar.sol#228) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Parameter '_decimalUnits' of StandardToken. (MockSushiBar.sol#228) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Parameter '_tokenSymbol' of StandardToken. (MockSushiBar.sol#228) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 amount) external returns (bool) {\n",
          "message": "Parameter '_spender' of NonStandardToken.approve (MockSushiBar.sol#294) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 273,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Parameter '_initialAmount' of NonStandardToken. (MockSushiBar.sol#273) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 273,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Parameter '_tokenName' of NonStandardToken. (MockSushiBar.sol#273) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 273,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Parameter '_decimalUnits' of NonStandardToken. (MockSushiBar.sol#273) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 273,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Parameter '_tokenSymbol' of NonStandardToken. (MockSushiBar.sol#273) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 311,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function harnessSetFailTransferFromAddress(address src, bool _fail) public {\n",
          "message": "Parameter '_fail' of ERC20Harness.harnessSetFailTransferFromAddress (MockSushiBar.sol#311) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 315,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function harnessSetFailTransferToAddress(address dst, bool _fail) public {\n",
          "message": "Parameter '_fail' of ERC20Harness.harnessSetFailTransferToAddress (MockSushiBar.sol#315) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 319,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function harnessSetBalance(address _account, uint _amount) public {\n",
          "message": "Parameter '_account' of ERC20Harness.harnessSetBalance (MockSushiBar.sol#319) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 319,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function harnessSetBalance(address _account, uint _amount) public {\n",
          "message": "Parameter '_amount' of ERC20Harness.harnessSetBalance (MockSushiBar.sol#319) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 352,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol, address _comptroller) public\n",
          "message": "Parameter '_comptroller' of CTokenHarness. (MockSushiBar.sol#352) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 348,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool public constant isCToken = true;\n",
          "message": "Constant 'CTokenHarness.isCToken' (MockSushiBar.sol#348) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 368,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(ERC20 _sushi) public {\n",
          "message": "Parameter '_sushi' of SushiBar. (MockSushiBar.sol#368) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 372,
          "vulnerability_to_line": 376,
          "vulnerability_code": "    function _mint(address _to, uint256 _amount) internal returns (bool) {\n\n        totalSupply = totalSupply.add(_amount);\n\n        balanceOf[_to] = balanceOf[_to].add(_amount);\n\n        return true;\n",
          "message": "Function 'SushiBar._mint' (MockSushiBar.sol#372-376) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 372,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _mint(address _to, uint256 _amount) internal returns (bool) {\n",
          "message": "Parameter '_to' of SushiBar._mint (MockSushiBar.sol#372) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 372,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _mint(address _to, uint256 _amount) internal returns (bool) {\n",
          "message": "Parameter '_amount' of SushiBar._mint (MockSushiBar.sol#372) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 378,
          "vulnerability_to_line": 382,
          "vulnerability_code": "    function _burn(address _to, uint256 _amount) internal returns (bool) {\n\n        totalSupply = totalSupply.sub(_amount);\n\n        balanceOf[_to] = balanceOf[_to].sub(_amount);\n\n        return true;\n",
          "message": "Function 'SushiBar._burn' (MockSushiBar.sol#378-382) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 378,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _burn(address _to, uint256 _amount) internal returns (bool) {\n",
          "message": "Parameter '_to' of SushiBar._burn (MockSushiBar.sol#378) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 378,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _burn(address _to, uint256 _amount) internal returns (bool) {\n",
          "message": "Parameter '_amount' of SushiBar._burn (MockSushiBar.sol#378) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 385,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function enter(uint256 _amount) public {\n",
          "message": "Parameter '_amount' of SushiBar.enter (MockSushiBar.sol#385) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 398,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function leave(uint256 _share) public {\n",
          "message": "Parameter '_share' of SushiBar.leave (MockSushiBar.sol#398) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 251,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 amount) external returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 amount) external returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 192,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 360,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 219,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 264,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 365,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}