{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1012,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _baseBytes.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1040,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _b.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1155,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < _current.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1167,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < _current.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1358,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < tickers.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1365,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < tickers.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1412,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < activeUsers.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1414,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (j = 0; j < tickers.length; j++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1423,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < activeUsers.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1425,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (j = 0; j < tickers.length; j++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1457,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < tokens.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1464,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < tokens.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1478,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (j = 0; j < permissionManagers.length; j++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1012,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _baseBytes.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1040,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _b.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1075,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < len; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_index < array.length, \"Index should less than length of the array\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_index < array.length, \"Index should less than length of the array\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_index < array.length, \"Index should less than length of the array\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_index < array.length, \"Index should less than length of the array\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1014,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (b1 >= 0x61 && b1 <= 0x7A) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1015,
          "vulnerability_to_line": null,
          "vulnerability_code": "                b1 = bytes1(uint8(b1) - 32);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1016,
          "vulnerability_to_line": null,
          "vulnerability_code": "            }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1012,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _baseBytes.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1040,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _b.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1054,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (j = 0; j < 32; j++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1058,
          "vulnerability_to_line": null,
          "vulnerability_code": "                charCount++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1062,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (j = 0; j < charCount; j++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1075,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < len; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1155,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < _current.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1167,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < _current.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1358,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < tickers.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1360,
          "vulnerability_to_line": null,
          "vulnerability_code": "                count++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1365,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < tickers.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1368,
          "vulnerability_to_line": null,
          "vulnerability_code": "                count++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1412,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < activeUsers.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1414,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (j = 0; j < tickers.length; j++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1416,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    count++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1423,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < activeUsers.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1425,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (j = 0; j < tickers.length; j++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1429,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    count++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1457,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < tokens.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1459,
          "vulnerability_to_line": null,
          "vulnerability_code": "                count++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1464,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < tokens.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1467,
          "vulnerability_to_line": null,
          "vulnerability_code": "                count++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1478,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (j = 0; j < permissionManagers.length; j++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_index < array.length, \"Index should less than length of the array\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_index < array.length, \"Index should less than length of the array\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_index < array.length, \"Index should less than length of the array\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_index < array.length, \"Index should less than length of the array\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_122"
      ],
      "vulnerability_findings": [
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 251,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address owner) external view returns(uint256);\n",
          "message": "ISecurityToken.balanceOf.owner (local variable @ STRGetter.sol#251) shadows:\n\t- ISecurityToken.owner (function @ STRGetter.sol#974)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address owner, address spender) external view returns(uint256);\n",
          "message": "ISecurityToken.allowance.owner (local variable @ STRGetter.sol#252) shadows:\n\t- ISecurityToken.owner (function @ STRGetter.sol#974)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 1479,
          "vulnerability_to_line": null,
          "vulnerability_code": "            (,,, isArchived,,) = ISecurityToken(_token).getModule(permissionManagers[j]);\n",
          "message": "STRGetter._delegateInToken has external calls inside a loop:\n\t- (None,None,None,isArchived,None,None) = ISecurityToken(_token).getModule(permissionManagers[j]) (STRGetter.sol#1479)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 1481,
          "vulnerability_to_line": 1483,
          "vulnerability_code": "                if (IPermissionManager(permissionManagers[j]).checkDelegate(_delegate)) {\n\n                    return true;\n",
          "message": "STRGetter._delegateInToken has external calls inside a loop:\n\t- IPermissionManager(permissionManagers[j]).checkDelegate(_delegate) (STRGetter.sol#1481-1483)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 174,
          "vulnerability_to_line": 176,
          "vulnerability_code": "    function getArrayUint(bytes32 _key) public view returns(uint[] memory) {\n\n        return uintArrayStorage[_key];\n",
          "message": "EternalStorage.getArrayUint (STRGetter.sol#174-176) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": 230,
          "vulnerability_code": "    function getBytes32Value(bytes32 _variable) public view returns(bytes32) {\n\n        return bytes32Storage[_variable];\n",
          "message": "EternalStorage.getBytes32Value (STRGetter.sol#228-230) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": 234,
          "vulnerability_code": "    function getBytesValue(bytes32 _variable) public view returns(bytes memory) {\n\n        return bytesStorage[_variable];\n",
          "message": "EternalStorage.getBytesValue (STRGetter.sol#232-234) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1549,
          "vulnerability_to_line": 1551,
          "vulnerability_code": "    function getSTFactoryAddress() public view returns(address) {\n\n        return getAddressValue(Encoder.getKey(\"protocolVersionST\", getUintValue(Encoder.getKey(\"latestVersion\"))));\n",
          "message": "STRGetter.getSTFactoryAddress (STRGetter.sol#1549-1551) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1557,
          "vulnerability_to_line": 1559,
          "vulnerability_code": "    function getSTFactoryAddressOfVersion(uint256 _protocolVersion) public view returns(address) {\n\n        return getAddressValue(Encoder.getKey(\"protocolVersionST\", _protocolVersion));\n",
          "message": "STRGetter.getSTFactoryAddressOfVersion (STRGetter.sol#1557-1559) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1564,
          "vulnerability_to_line": 1566,
          "vulnerability_code": "    function getLatestProtocolVersion() public view returns(uint8[] memory) {\n\n        return VersionUtils.unpack(uint24(getUintValue(Encoder.getKey(\"latestVersion\"))));\n",
          "message": "STRGetter.getLatestProtocolVersion (STRGetter.sol#1564-1566) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1572,
          "vulnerability_to_line": 1574,
          "vulnerability_code": "    function getIsFeeInPoly() public view returns(bool) {\n\n        return getBoolValue(IS_FEE_IN_POLY);\n",
          "message": "STRGetter.getIsFeeInPoly (STRGetter.sol#1572-1574) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1580,
          "vulnerability_to_line": 1582,
          "vulnerability_code": "    function getExpiryLimit() public view returns(uint256) {\n\n        return getUintValue(EXPIRYLIMIT);\n",
          "message": "STRGetter.getExpiryLimit (STRGetter.sol#1580-1582) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.5.8;\n",
          "message": "Detected issues with version pragma in STRGetter.sol:\n\t- pragma solidity0.5.8 (STRGetter.sol#3): it allows old versions\n\t- pragma solidity0.5.8 (STRGetter.sol#240): it allows old versions\n\t- pragma solidity0.5.8 (STRGetter.sol#1000): it allows old versions\n\t- pragma solidity0.5.8 (STRGetter.sol#1084): it allows old versions\n\t- pragma solidity0.5.8 (STRGetter.sol#1115): it allows old versions\n\t- pragma solidity0.5.8 (STRGetter.sol#1143): it allows old versions\n\t- pragma solidity0.5.8 (STRGetter.sol#1223): it allows old versions\n\t- pragma solidity0.5.8 (STRGetter.sol#1333): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function set(bytes32 _key, uint256 _value) internal {\n",
          "message": "Parameter '_key' of EternalStorage.set (STRGetter.sol#41) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function set(bytes32 _key, uint256 _value) internal {\n",
          "message": "Parameter '_value' of EternalStorage.set (STRGetter.sol#41) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function set(bytes32 _key, address _value) internal {\n",
          "message": "Parameter '_key' of EternalStorage.set (STRGetter.sol#45) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function set(bytes32 _key, address _value) internal {\n",
          "message": "Parameter '_value' of EternalStorage.set (STRGetter.sol#45) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function set(bytes32 _key, bool _value) internal {\n",
          "message": "Parameter '_key' of EternalStorage.set (STRGetter.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function set(bytes32 _key, bool _value) internal {\n",
          "message": "Parameter '_value' of EternalStorage.set (STRGetter.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function set(bytes32 _key, bytes32 _value) internal {\n",
          "message": "Parameter '_key' of EternalStorage.set (STRGetter.sol#53) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function set(bytes32 _key, bytes32 _value) internal {\n",
          "message": "Parameter '_value' of EternalStorage.set (STRGetter.sol#53) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function set(bytes32 _key, string memory _value) internal {\n",
          "message": "Parameter '_key' of EternalStorage.set (STRGetter.sol#57) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function set(bytes32 _key, string memory _value) internal {\n",
          "message": "Parameter '_value' of EternalStorage.set (STRGetter.sol#57) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function set(bytes32 _key, bytes memory _value) internal {\n",
          "message": "Parameter '_key' of EternalStorage.set (STRGetter.sol#61) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function set(bytes32 _key, bytes memory _value) internal {\n",
          "message": "Parameter '_value' of EternalStorage.set (STRGetter.sol#61) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deleteArrayAddress(bytes32 _key, uint256 _index) internal {\n",
          "message": "Parameter '_key' of EternalStorage.deleteArrayAddress (STRGetter.sol#75) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deleteArrayAddress(bytes32 _key, uint256 _index) internal {\n",
          "message": "Parameter '_index' of EternalStorage.deleteArrayAddress (STRGetter.sol#75) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deleteArrayBytes32(bytes32 _key, uint256 _index) internal {\n",
          "message": "Parameter '_key' of EternalStorage.deleteArrayBytes32 (STRGetter.sol#83) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deleteArrayBytes32(bytes32 _key, uint256 _index) internal {\n",
          "message": "Parameter '_index' of EternalStorage.deleteArrayBytes32 (STRGetter.sol#83) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deleteArrayUint(bytes32 _key, uint256 _index) internal {\n",
          "message": "Parameter '_key' of EternalStorage.deleteArrayUint (STRGetter.sol#91) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deleteArrayUint(bytes32 _key, uint256 _index) internal {\n",
          "message": "Parameter '_index' of EternalStorage.deleteArrayUint (STRGetter.sol#91) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deleteArrayString(bytes32 _key, uint256 _index) internal {\n",
          "message": "Parameter '_key' of EternalStorage.deleteArrayString (STRGetter.sol#99) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deleteArrayString(bytes32 _key, uint256 _index) internal {\n",
          "message": "Parameter '_index' of EternalStorage.deleteArrayString (STRGetter.sol#99) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function pushArray(bytes32 _key, address _value) internal {\n",
          "message": "Parameter '_key' of EternalStorage.pushArray (STRGetter.sol#117) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function pushArray(bytes32 _key, address _value) internal {\n",
          "message": "Parameter '_value' of EternalStorage.pushArray (STRGetter.sol#117) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 121,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function pushArray(bytes32 _key, bytes32 _value) internal {\n",
          "message": "Parameter '_key' of EternalStorage.pushArray (STRGetter.sol#121) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 121,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function pushArray(bytes32 _key, bytes32 _value) internal {\n",
          "message": "Parameter '_value' of EternalStorage.pushArray (STRGetter.sol#121) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function pushArray(bytes32 _key, string memory _value) internal {\n",
          "message": "Parameter '_key' of EternalStorage.pushArray (STRGetter.sol#125) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function pushArray(bytes32 _key, string memory _value) internal {\n",
          "message": "Parameter '_value' of EternalStorage.pushArray (STRGetter.sol#125) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function pushArray(bytes32 _key, uint256 _value) internal {\n",
          "message": "Parameter '_key' of EternalStorage.pushArray (STRGetter.sol#129) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function pushArray(bytes32 _key, uint256 _value) internal {\n",
          "message": "Parameter '_value' of EternalStorage.pushArray (STRGetter.sol#129) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setArray(bytes32 _key, address[] memory _value) internal {\n",
          "message": "Parameter '_key' of EternalStorage.setArray (STRGetter.sol#141) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setArray(bytes32 _key, address[] memory _value) internal {\n",
          "message": "Parameter '_value' of EternalStorage.setArray (STRGetter.sol#141) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 145,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setArray(bytes32 _key, uint256[] memory _value) internal {\n",
          "message": "Parameter '_key' of EternalStorage.setArray (STRGetter.sol#145) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 145,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setArray(bytes32 _key, uint256[] memory _value) internal {\n",
          "message": "Parameter '_value' of EternalStorage.setArray (STRGetter.sol#145) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setArray(bytes32 _key, bytes32[] memory _value) internal {\n",
          "message": "Parameter '_key' of EternalStorage.setArray (STRGetter.sol#149) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setArray(bytes32 _key, bytes32[] memory _value) internal {\n",
          "message": "Parameter '_value' of EternalStorage.setArray (STRGetter.sol#149) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 153,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setArray(bytes32 _key, string[] memory _value) internal {\n",
          "message": "Parameter '_key' of EternalStorage.setArray (STRGetter.sol#153) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 153,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setArray(bytes32 _key, string[] memory _value) internal {\n",
          "message": "Parameter '_value' of EternalStorage.setArray (STRGetter.sol#153) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 166,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getArrayAddress(bytes32 _key) public view returns(address[] memory) {\n",
          "message": "Parameter '_key' of EternalStorage.getArrayAddress (STRGetter.sol#166) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 170,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getArrayBytes32(bytes32 _key) public view returns(bytes32[] memory) {\n",
          "message": "Parameter '_key' of EternalStorage.getArrayBytes32 (STRGetter.sol#170) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 174,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getArrayUint(bytes32 _key) public view returns(uint[] memory) {\n",
          "message": "Parameter '_key' of EternalStorage.getArrayUint (STRGetter.sol#174) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 186,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, address _value) internal {\n",
          "message": "Parameter '_key' of EternalStorage.setArrayIndexValue (STRGetter.sol#186) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 186,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, address _value) internal {\n",
          "message": "Parameter '_index' of EternalStorage.setArrayIndexValue (STRGetter.sol#186) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 186,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, address _value) internal {\n",
          "message": "Parameter '_value' of EternalStorage.setArrayIndexValue (STRGetter.sol#186) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, uint256 _value) internal {\n",
          "message": "Parameter '_key' of EternalStorage.setArrayIndexValue (STRGetter.sol#190) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, uint256 _value) internal {\n",
          "message": "Parameter '_index' of EternalStorage.setArrayIndexValue (STRGetter.sol#190) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, uint256 _value) internal {\n",
          "message": "Parameter '_value' of EternalStorage.setArrayIndexValue (STRGetter.sol#190) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, bytes32 _value) internal {\n",
          "message": "Parameter '_key' of EternalStorage.setArrayIndexValue (STRGetter.sol#194) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, bytes32 _value) internal {\n",
          "message": "Parameter '_index' of EternalStorage.setArrayIndexValue (STRGetter.sol#194) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, bytes32 _value) internal {\n",
          "message": "Parameter '_value' of EternalStorage.setArrayIndexValue (STRGetter.sol#194) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, string memory _value) internal {\n",
          "message": "Parameter '_key' of EternalStorage.setArrayIndexValue (STRGetter.sol#198) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, string memory _value) internal {\n",
          "message": "Parameter '_index' of EternalStorage.setArrayIndexValue (STRGetter.sol#198) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, string memory _value) internal {\n",
          "message": "Parameter '_value' of EternalStorage.setArrayIndexValue (STRGetter.sol#198) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 212,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getUintValue(bytes32 _variable) public view returns(uint256) {\n",
          "message": "Parameter '_variable' of EternalStorage.getUintValue (STRGetter.sol#212) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBoolValue(bytes32 _variable) public view returns(bool) {\n",
          "message": "Parameter '_variable' of EternalStorage.getBoolValue (STRGetter.sol#216) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getStringValue(bytes32 _variable) public view returns(string memory) {\n",
          "message": "Parameter '_variable' of EternalStorage.getStringValue (STRGetter.sol#220) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAddressValue(bytes32 _variable) public view returns(address) {\n",
          "message": "Parameter '_variable' of EternalStorage.getAddressValue (STRGetter.sol#224) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBytes32Value(bytes32 _variable) public view returns(bytes32) {\n",
          "message": "Parameter '_variable' of EternalStorage.getBytes32Value (STRGetter.sol#228) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBytesValue(bytes32 _variable) public view returns(bytes memory) {\n",
          "message": "Parameter '_variable' of EternalStorage.getBytesValue (STRGetter.sol#232) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1010,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function upper(string memory _base) internal pure returns(string memory) {\n",
          "message": "Parameter '_base' of Util.upper (STRGetter.sol#1010) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1027,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function stringToBytes32(string memory _source) internal pure returns(bytes32) {\n",
          "message": "Parameter '_source' of Util.stringToBytes32 (STRGetter.sol#1027) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1037,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function bytesToBytes32(bytes memory _b, uint _offset) internal pure returns(bytes32) {\n",
          "message": "Parameter '_b' of Util.bytesToBytes32 (STRGetter.sol#1037) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1037,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function bytesToBytes32(bytes memory _b, uint _offset) internal pure returns(bytes32) {\n",
          "message": "Parameter '_offset' of Util.bytesToBytes32 (STRGetter.sol#1037) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1050,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function bytes32ToString(bytes32 _source) internal pure returns(string memory) {\n",
          "message": "Parameter '_source' of Util.bytes32ToString (STRGetter.sol#1050) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1073,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getSig(bytes memory _data) internal pure returns(bytes4 sig) {\n",
          "message": "Parameter '_data' of Util.getSig (STRGetter.sol#1073) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1087,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKey(string memory _key) internal pure returns(bytes32) {\n",
          "message": "Parameter '_key' of Encoder.getKey (STRGetter.sol#1087) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1091,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKey(string memory _key1, address _key2) internal pure returns(bytes32) {\n",
          "message": "Parameter '_key1' of Encoder.getKey (STRGetter.sol#1091) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1091,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKey(string memory _key1, address _key2) internal pure returns(bytes32) {\n",
          "message": "Parameter '_key2' of Encoder.getKey (STRGetter.sol#1091) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1095,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKey(string memory _key1, string memory _key2) internal pure returns(bytes32) {\n",
          "message": "Parameter '_key1' of Encoder.getKey (STRGetter.sol#1095) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1095,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKey(string memory _key1, string memory _key2) internal pure returns(bytes32) {\n",
          "message": "Parameter '_key2' of Encoder.getKey (STRGetter.sol#1095) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1099,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKey(string memory _key1, uint256 _key2) internal pure returns(bytes32) {\n",
          "message": "Parameter '_key1' of Encoder.getKey (STRGetter.sol#1099) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1099,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKey(string memory _key1, uint256 _key2) internal pure returns(bytes32) {\n",
          "message": "Parameter '_key2' of Encoder.getKey (STRGetter.sol#1099) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1103,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKey(string memory _key1, bytes32 _key2) internal pure returns(bytes32) {\n",
          "message": "Parameter '_key1' of Encoder.getKey (STRGetter.sol#1103) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1103,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKey(string memory _key1, bytes32 _key2) internal pure returns(bytes32) {\n",
          "message": "Parameter '_key2' of Encoder.getKey (STRGetter.sol#1103) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1107,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKey(string memory _key1, bool _key2) internal pure returns(bytes32) {\n",
          "message": "Parameter '_key1' of Encoder.getKey (STRGetter.sol#1107) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1107,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKey(string memory _key1, bool _key2) internal pure returns(bytes32) {\n",
          "message": "Parameter '_key2' of Encoder.getKey (STRGetter.sol#1107) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1151,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function lessThanOrEqual(uint8[] memory _current, uint8[] memory _new) internal pure returns(bool) {\n",
          "message": "Parameter '_current' of VersionUtils.lessThanOrEqual (STRGetter.sol#1151) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1151,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function lessThanOrEqual(uint8[] memory _current, uint8[] memory _new) internal pure returns(bool) {\n",
          "message": "Parameter '_new' of VersionUtils.lessThanOrEqual (STRGetter.sol#1151) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1163,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function greaterThanOrEqual(uint8[] memory _current, uint8[] memory _new) internal pure returns(bool) {\n",
          "message": "Parameter '_current' of VersionUtils.greaterThanOrEqual (STRGetter.sol#1163) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1163,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function greaterThanOrEqual(uint8[] memory _current, uint8[] memory _new) internal pure returns(bool) {\n",
          "message": "Parameter '_new' of VersionUtils.greaterThanOrEqual (STRGetter.sol#1163) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1181,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function pack(uint8 _major, uint8 _minor, uint8 _patch) internal pure returns(uint24) {\n",
          "message": "Parameter '_major' of VersionUtils.pack (STRGetter.sol#1181) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1181,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function pack(uint8 _major, uint8 _minor, uint8 _patch) internal pure returns(uint24) {\n",
          "message": "Parameter '_minor' of VersionUtils.pack (STRGetter.sol#1181) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1181,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function pack(uint8 _major, uint8 _minor, uint8 _patch) internal pure returns(uint24) {\n",
          "message": "Parameter '_patch' of VersionUtils.pack (STRGetter.sol#1181) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1189,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function unpack(uint24 _packedVersion) internal pure returns(uint8[] memory) {\n",
          "message": "Parameter '_packedVersion' of VersionUtils.unpack (STRGetter.sol#1189) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1201,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function packKYC(uint64 _a, uint64 _b, uint64 _c, uint8 _d) internal pure returns(uint256) {\n",
          "message": "Parameter '_a' of VersionUtils.packKYC (STRGetter.sol#1201) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1201,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function packKYC(uint64 _a, uint64 _b, uint64 _c, uint8 _d) internal pure returns(uint256) {\n",
          "message": "Parameter '_b' of VersionUtils.packKYC (STRGetter.sol#1201) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1201,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function packKYC(uint64 _a, uint64 _b, uint64 _c, uint8 _d) internal pure returns(uint256) {\n",
          "message": "Parameter '_c' of VersionUtils.packKYC (STRGetter.sol#1201) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1201,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function packKYC(uint64 _a, uint64 _b, uint64 _c, uint8 _d) internal pure returns(uint256) {\n",
          "message": "Parameter '_d' of VersionUtils.packKYC (STRGetter.sol#1201) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1213,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function unpackKYC(uint256 _packedVersion) internal pure returns(uint64 canSendAfter, uint64 canReceiveAfter, uint64 expiryTime, uint8 added) {\n",
          "message": "Parameter '_packedVersion' of VersionUtils.unpackKYC (STRGetter.sol#1213) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1353,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTickersByOwner(address _owner) external view returns(bytes32[] memory) {\n",
          "message": "Parameter '_owner' of STRGetter.getTickersByOwner (STRGetter.sol#1353) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1374,
          "vulnerability_to_line": 1381,
          "vulnerability_code": "    function _ownerInTicker(bytes32 _ticker) internal view returns (bool) {\n\n        string memory ticker = Util.bytes32ToString(_ticker);\n\n        /*solium-disable-next-line security/no-block-members*/\n\n        if (getUintValue(Encoder.getKey(\"registeredTickers_expiryDate\", ticker)) >= now || getBoolValue(Encoder.getKey(\"registeredTickers_status\", ticker))) {\n\n            return true;\n\n        }\n\n        return false;\n",
          "message": "Function 'STRGetter._ownerInTicker' (STRGetter.sol#1374-1381) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1374,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _ownerInTicker(bytes32 _ticker) internal view returns (bool) {\n",
          "message": "Parameter '_ticker' of STRGetter._ownerInTicker (STRGetter.sol#1374) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1388,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTokensByOwner(address _owner) external view returns(address[] memory) {\n",
          "message": "Parameter '_owner' of STRGetter.getTokensByOwner (STRGetter.sol#1388) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1404,
          "vulnerability_to_line": 1434,
          "vulnerability_code": "    function _getTokens(bool _allTokens, address _owner) internal view returns(address[] memory) {\n\n        // Loop over all active users, then all associated tickers of those users\n\n        // This ensures we find tokens, even if their owner has been modified\n\n        address[] memory activeUsers = getArrayAddress(Encoder.getKey(\"activeUsers\"));\n\n        bytes32[] memory tickers;\n\n        uint256 count = 0;\n\n        uint256 i = 0;\n\n        uint256 j = 0;\n\n        for (i = 0; i < activeUsers.length; i++) {\n\n            tickers = getArrayBytes32(Encoder.getKey(\"userToTickers\", activeUsers[i]));\n\n            for (j = 0; j < tickers.length; j++) {\n\n                if (address(0) != _ownerInToken(tickers[j], _allTokens, _owner)) {\n\n                    count++;\n\n                }\n\n            }\n\n        }\n\n        address[] memory result = new address[](count);\n\n        count = 0;\n\n        address token;\n\n        for (i = 0; i < activeUsers.length; i++) {\n\n            tickers = getArrayBytes32(Encoder.getKey(\"userToTickers\", activeUsers[i]));\n\n            for (j = 0; j < tickers.length; j++) {\n\n                token = _ownerInToken(tickers[j], _allTokens, _owner);\n\n                if (address(0) != token) {\n\n                    result[count] = token;\n\n                    count++;\n\n                }\n\n            }\n\n        }\n\n        return result;\n",
          "message": "Function 'STRGetter._getTokens' (STRGetter.sol#1404-1434) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1404,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _getTokens(bool _allTokens, address _owner) internal view returns(address[] memory) {\n",
          "message": "Parameter '_allTokens' of STRGetter._getTokens (STRGetter.sol#1404) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1404,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _getTokens(bool _allTokens, address _owner) internal view returns(address[] memory) {\n",
          "message": "Parameter '_owner' of STRGetter._getTokens (STRGetter.sol#1404) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1436,
          "vulnerability_to_line": 1444,
          "vulnerability_code": "    function _ownerInToken(bytes32 _ticker, bool _allTokens, address _owner) internal view returns(address) {\n\n        address token = getAddressValue(Encoder.getKey(\"tickerToSecurityToken\", Util.bytes32ToString(_ticker)));\n\n        if (token != address(0)) {\n\n            if (_allTokens || IOwnable(token).owner() == _owner) {\n\n                return token;\n\n            }\n\n        }\n\n        return address(0);\n",
          "message": "Function 'STRGetter._ownerInToken' (STRGetter.sol#1436-1444) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1436,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _ownerInToken(bytes32 _ticker, bool _allTokens, address _owner) internal view returns(address) {\n",
          "message": "Parameter '_ticker' of STRGetter._ownerInToken (STRGetter.sol#1436) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1436,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _ownerInToken(bytes32 _ticker, bool _allTokens, address _owner) internal view returns(address) {\n",
          "message": "Parameter '_allTokens' of STRGetter._ownerInToken (STRGetter.sol#1436) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1436,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _ownerInToken(bytes32 _ticker, bool _allTokens, address _owner) internal view returns(address) {\n",
          "message": "Parameter '_owner' of STRGetter._ownerInToken (STRGetter.sol#1436) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1451,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTokensByDelegate(address _delegate) external view returns(address[] memory) {\n",
          "message": "Parameter '_delegate' of STRGetter.getTokensByDelegate (STRGetter.sol#1451) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1473,
          "vulnerability_to_line": 1487,
          "vulnerability_code": "    function _delegateInToken(address _token, address _delegate) internal view returns(bool) {\n\n        uint256 j = 0;\n\n        address[] memory permissionManagers;\n\n        bool isArchived;\n\n        permissionManagers = ISecurityToken(_token).getModulesByType(1);\n\n        for (j = 0; j < permissionManagers.length; j++) {\n\n            (,,, isArchived,,) = ISecurityToken(_token).getModule(permissionManagers[j]);\n\n            if (!isArchived) {\n\n                if (IPermissionManager(permissionManagers[j]).checkDelegate(_delegate)) {\n\n                    return true;\n\n                }\n\n            }\n\n        }\n\n        return false;\n",
          "message": "Function 'STRGetter._delegateInToken' (STRGetter.sol#1473-1487) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1473,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _delegateInToken(address _token, address _delegate) internal view returns(bool) {\n",
          "message": "Parameter '_token' of STRGetter._delegateInToken (STRGetter.sol#1473) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1473,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _delegateInToken(address _token, address _delegate) internal view returns(bool) {\n",
          "message": "Parameter '_delegate' of STRGetter._delegateInToken (STRGetter.sol#1473) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1498,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTickerDetails(string calldata _ticker) external view returns (address, uint256, uint256, string memory, bool) {\n",
          "message": "Parameter '_ticker' of STRGetter.getTickerDetails (STRGetter.sol#1498) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1524,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getSecurityTokenAddress(string calldata _ticker) external view returns (address) {\n",
          "message": "Parameter '_ticker' of STRGetter.getSecurityTokenAddress (STRGetter.sol#1524) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1537,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getSecurityTokenData(address _securityToken) external view returns (string memory, address, string memory, uint256) {\n",
          "message": "Parameter '_securityToken' of STRGetter.getSecurityTokenData (STRGetter.sol#1537) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1557,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getSTFactoryAddressOfVersion(uint256 _protocolVersion) public view returns(address) {\n",
          "message": "Parameter '_protocolVersion' of STRGetter.getSTFactoryAddressOfVersion (STRGetter.sol#1557) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1589,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTickerStatus(string memory _ticker) public view returns(bool) {\n",
          "message": "Parameter '_ticker' of STRGetter.getTickerStatus (STRGetter.sol#1589) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1598,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTickerOwner(string memory _ticker) public view returns(address) {\n",
          "message": "Parameter '_ticker' of STRGetter.getTickerOwner (STRGetter.sol#1598) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes32 => int256) internal intStorage;\n",
          "message": "EternalStorage.intStorage (STRGetter.sol#12) is never used in STRGetter\nSTRGetter.STLAUNCHFEE (STRGetter.sol#1344) is never used in STRGetter\nSTRGetter.TICKERREGFEE (STRGetter.sol#1345) is never used in STRGetter\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 1014,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (b1 >= 0x61 && b1 <= 0x7A) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 1014,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (b1 >= 0x61 && b1 <= 0x7A) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 1041,
          "vulnerability_to_line": null,
          "vulnerability_code": "            result |= bytes32(_b[_offset + i] & 0xFF) >> (i * 8);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 1076,
          "vulnerability_to_line": null,
          "vulnerability_code": "          sig |= bytes4(_data[i] & 0xFF) >> (i * 8);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 1397,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return _getTokens(true, address(0));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 1443,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 1515,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return (address(0), uint256(0), uint256(0), \"\", false);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 79,
          "vulnerability_to_line": null,
          "vulnerability_code": "        array.length = array.length - 1;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "        array.length = array.length - 1;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "        array.length = array.length - 1;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "        array.length = array.length - 1;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 1012,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _baseBytes.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 1040,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _b.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 1155,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < _current.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 1167,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < _current.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 1358,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < tickers.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 1365,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < tickers.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 1412,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < activeUsers.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 1414,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (j = 0; j < tickers.length; j++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 1423,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < activeUsers.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 1425,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (j = 0; j < tickers.length; j++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 1457,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 1464,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 1478,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (j = 0; j < permissionManagers.length; j++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1012,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _baseBytes.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1040,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _b.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1155,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < _current.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1167,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < _current.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1358,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < tickers.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1365,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < tickers.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1412,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < activeUsers.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1414,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (j = 0; j < tickers.length; j++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1423,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < activeUsers.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1425,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (j = 0; j < tickers.length; j++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1457,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1464,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1478,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (j = 0; j < permissionManagers.length; j++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 271,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function canTransfer(address _to, uint256 _value, bytes calldata _data) external view returns (byte statusCode, bytes32 reasonCode);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 390,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns (byte statusCode, bytes32 reasonCode, bytes32 partition);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 403,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function canTransferFrom(address _from, address _to, uint256 _value, bytes calldata _data) external view returns (byte statusCode, bytes32 reasonCode);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 428,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getDocument(bytes32 _name) external view returns (string memory documentUri, bytes32 documentHash, uint256 documentTime);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 547,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getModule(address _module) external view returns (bytes32 moduleName, address moduleAddress, address factoryAddress, bool isArchived, uint8[] memory moduleTypes, bytes32 moduleLabel);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1213,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function unpackKYC(uint256 _packedVersion) internal pure returns(uint64 canSendAfter, uint64 canReceiveAfter, uint64 expiryTime, uint8 added) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1312,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAllModulesAndPermsFromTypes(address _delegate, uint8[] calldata _types) external view returns(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1498,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTickerDetails(string calldata _ticker) external view returns (address, uint256, uint256, string memory, bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1537,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getSecurityTokenData(address _securityToken) external view returns (string memory, address, string memory, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 412,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setDocument(bytes32 _name, string calldata _uri, bytes32 _documentHash) external;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 518,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function operatorRedeemByPartition(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 735,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addModuleWithLabel(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 757,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 796,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function controllerTransfer(address _from, address _to, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 810,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function controllerRedeem(address _tokenHolder, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 944,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function operatorTransferByPartition(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1276,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function changePermissionMulti(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 412,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setDocument(bytes32 _name, string calldata _uri, bytes32 _documentHash) external;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 412,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setDocument(bytes32 _name, string calldata _uri, bytes32 _documentHash) external;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 522,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata _data,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 523,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata _operatorData\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 737,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata _data,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 738,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _maxCost,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 739,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _budget,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 740,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32 _label,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 741,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool _archived\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 757,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 757,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 757,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 757,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 796,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function controllerTransfer(address _from, address _to, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 796,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function controllerTransfer(address _from, address _to, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 810,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function controllerRedeem(address _tokenHolder, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 810,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function controllerRedeem(address _tokenHolder, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 949,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata _data,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 950,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata _operatorData\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 953,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns (bytes32 partition);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1278,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] calldata _modules,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1279,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32[] calldata _perms,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1279,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32[] calldata _perms,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1280,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool[] calldata _valids\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1344,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32 constant STLAUNCHFEE = 0xd677304bb45536bb7fdfa6b9e47a3c58fe413f9e8f01474b0a4b9c6e0275baf2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1345,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32 constant TICKERREGFEE = 0x2fcc69711628630fb5a42566c68bd1092bc4aa26826736293969fddcd11cb2d2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1346,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32 constant EXPIRYLIMIT = 0x604268e9a73dfd777dcecb8a614493dd65c638bad2f5e7d709d378bd2fb0baee;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1347,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32 constant IS_FEE_IN_POLY = 0x7152e5426955da44af11ecd67fec5e2a3ba747be974678842afa9394b9a075b6; //keccak256(\"IS_FEE_IN_POLY\")\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "UNKNOWN INSTRUCTION: SHR"
      ],
      "vulnerability_findings": []
    }
  }
}