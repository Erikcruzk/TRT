{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_index < array.length, \"Index should less than length of the array\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_index < array.length, \"Index should less than length of the array\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_index < array.length, \"Index should less than length of the array\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_index < array.length, \"Index should less than length of the array\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_index < array.length, \"Index should less than length of the array\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_index < array.length, \"Index should less than length of the array\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_index < array.length, \"Index should less than length of the array\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_index < array.length, \"Index should less than length of the array\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_68"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 166,
          "vulnerability_to_line": 168,
          "vulnerability_code": "    function getArrayAddress(bytes32 _key) public view returns(address[] memory) {\n\n        return addressArrayStorage[_key];\n",
          "message": "EternalStorage.getArrayAddress (EternalStorage.sol#166-168) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 170,
          "vulnerability_to_line": 172,
          "vulnerability_code": "    function getArrayBytes32(bytes32 _key) public view returns(bytes32[] memory) {\n\n        return bytes32ArrayStorage[_key];\n",
          "message": "EternalStorage.getArrayBytes32 (EternalStorage.sol#170-172) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 174,
          "vulnerability_to_line": 176,
          "vulnerability_code": "    function getArrayUint(bytes32 _key) public view returns(uint[] memory) {\n\n        return uintArrayStorage[_key];\n",
          "message": "EternalStorage.getArrayUint (EternalStorage.sol#174-176) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 212,
          "vulnerability_to_line": 214,
          "vulnerability_code": "    function getUintValue(bytes32 _variable) public view returns(uint256) {\n\n        return uintStorage[_variable];\n",
          "message": "EternalStorage.getUintValue (EternalStorage.sol#212-214) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": 218,
          "vulnerability_code": "    function getBoolValue(bytes32 _variable) public view returns(bool) {\n\n        return boolStorage[_variable];\n",
          "message": "EternalStorage.getBoolValue (EternalStorage.sol#216-218) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": 222,
          "vulnerability_code": "    function getStringValue(bytes32 _variable) public view returns(string memory) {\n\n        return stringStorage[_variable];\n",
          "message": "EternalStorage.getStringValue (EternalStorage.sol#220-222) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": 226,
          "vulnerability_code": "    function getAddressValue(bytes32 _variable) public view returns(address) {\n\n        return addressStorage[_variable];\n",
          "message": "EternalStorage.getAddressValue (EternalStorage.sol#224-226) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": 230,
          "vulnerability_code": "    function getBytes32Value(bytes32 _variable) public view returns(bytes32) {\n\n        return bytes32Storage[_variable];\n",
          "message": "EternalStorage.getBytes32Value (EternalStorage.sol#228-230) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": 234,
          "vulnerability_code": "    function getBytesValue(bytes32 _variable) public view returns(bytes memory) {\n\n        return bytesStorage[_variable];\n",
          "message": "EternalStorage.getBytesValue (EternalStorage.sol#232-234) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.5.8;\n",
          "message": "Detected issues with version pragma in EternalStorage.sol:\n\t- pragma solidity0.5.8 (EternalStorage.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function set(bytes32 _key, uint256 _value) internal {\n",
          "message": "Parameter '_key' of EternalStorage.set (EternalStorage.sol#41) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function set(bytes32 _key, uint256 _value) internal {\n",
          "message": "Parameter '_value' of EternalStorage.set (EternalStorage.sol#41) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function set(bytes32 _key, address _value) internal {\n",
          "message": "Parameter '_key' of EternalStorage.set (EternalStorage.sol#45) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function set(bytes32 _key, address _value) internal {\n",
          "message": "Parameter '_value' of EternalStorage.set (EternalStorage.sol#45) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function set(bytes32 _key, bool _value) internal {\n",
          "message": "Parameter '_key' of EternalStorage.set (EternalStorage.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function set(bytes32 _key, bool _value) internal {\n",
          "message": "Parameter '_value' of EternalStorage.set (EternalStorage.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function set(bytes32 _key, bytes32 _value) internal {\n",
          "message": "Parameter '_key' of EternalStorage.set (EternalStorage.sol#53) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function set(bytes32 _key, bytes32 _value) internal {\n",
          "message": "Parameter '_value' of EternalStorage.set (EternalStorage.sol#53) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function set(bytes32 _key, string memory _value) internal {\n",
          "message": "Parameter '_key' of EternalStorage.set (EternalStorage.sol#57) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function set(bytes32 _key, string memory _value) internal {\n",
          "message": "Parameter '_value' of EternalStorage.set (EternalStorage.sol#57) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function set(bytes32 _key, bytes memory _value) internal {\n",
          "message": "Parameter '_key' of EternalStorage.set (EternalStorage.sol#61) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function set(bytes32 _key, bytes memory _value) internal {\n",
          "message": "Parameter '_value' of EternalStorage.set (EternalStorage.sol#61) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deleteArrayAddress(bytes32 _key, uint256 _index) internal {\n",
          "message": "Parameter '_key' of EternalStorage.deleteArrayAddress (EternalStorage.sol#75) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deleteArrayAddress(bytes32 _key, uint256 _index) internal {\n",
          "message": "Parameter '_index' of EternalStorage.deleteArrayAddress (EternalStorage.sol#75) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deleteArrayBytes32(bytes32 _key, uint256 _index) internal {\n",
          "message": "Parameter '_key' of EternalStorage.deleteArrayBytes32 (EternalStorage.sol#83) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deleteArrayBytes32(bytes32 _key, uint256 _index) internal {\n",
          "message": "Parameter '_index' of EternalStorage.deleteArrayBytes32 (EternalStorage.sol#83) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deleteArrayUint(bytes32 _key, uint256 _index) internal {\n",
          "message": "Parameter '_key' of EternalStorage.deleteArrayUint (EternalStorage.sol#91) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deleteArrayUint(bytes32 _key, uint256 _index) internal {\n",
          "message": "Parameter '_index' of EternalStorage.deleteArrayUint (EternalStorage.sol#91) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deleteArrayString(bytes32 _key, uint256 _index) internal {\n",
          "message": "Parameter '_key' of EternalStorage.deleteArrayString (EternalStorage.sol#99) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deleteArrayString(bytes32 _key, uint256 _index) internal {\n",
          "message": "Parameter '_index' of EternalStorage.deleteArrayString (EternalStorage.sol#99) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function pushArray(bytes32 _key, address _value) internal {\n",
          "message": "Parameter '_key' of EternalStorage.pushArray (EternalStorage.sol#117) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function pushArray(bytes32 _key, address _value) internal {\n",
          "message": "Parameter '_value' of EternalStorage.pushArray (EternalStorage.sol#117) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 121,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function pushArray(bytes32 _key, bytes32 _value) internal {\n",
          "message": "Parameter '_key' of EternalStorage.pushArray (EternalStorage.sol#121) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 121,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function pushArray(bytes32 _key, bytes32 _value) internal {\n",
          "message": "Parameter '_value' of EternalStorage.pushArray (EternalStorage.sol#121) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function pushArray(bytes32 _key, string memory _value) internal {\n",
          "message": "Parameter '_key' of EternalStorage.pushArray (EternalStorage.sol#125) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function pushArray(bytes32 _key, string memory _value) internal {\n",
          "message": "Parameter '_value' of EternalStorage.pushArray (EternalStorage.sol#125) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function pushArray(bytes32 _key, uint256 _value) internal {\n",
          "message": "Parameter '_key' of EternalStorage.pushArray (EternalStorage.sol#129) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function pushArray(bytes32 _key, uint256 _value) internal {\n",
          "message": "Parameter '_value' of EternalStorage.pushArray (EternalStorage.sol#129) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setArray(bytes32 _key, address[] memory _value) internal {\n",
          "message": "Parameter '_key' of EternalStorage.setArray (EternalStorage.sol#141) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setArray(bytes32 _key, address[] memory _value) internal {\n",
          "message": "Parameter '_value' of EternalStorage.setArray (EternalStorage.sol#141) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 145,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setArray(bytes32 _key, uint256[] memory _value) internal {\n",
          "message": "Parameter '_key' of EternalStorage.setArray (EternalStorage.sol#145) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 145,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setArray(bytes32 _key, uint256[] memory _value) internal {\n",
          "message": "Parameter '_value' of EternalStorage.setArray (EternalStorage.sol#145) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setArray(bytes32 _key, bytes32[] memory _value) internal {\n",
          "message": "Parameter '_key' of EternalStorage.setArray (EternalStorage.sol#149) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setArray(bytes32 _key, bytes32[] memory _value) internal {\n",
          "message": "Parameter '_value' of EternalStorage.setArray (EternalStorage.sol#149) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 153,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setArray(bytes32 _key, string[] memory _value) internal {\n",
          "message": "Parameter '_key' of EternalStorage.setArray (EternalStorage.sol#153) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 153,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setArray(bytes32 _key, string[] memory _value) internal {\n",
          "message": "Parameter '_value' of EternalStorage.setArray (EternalStorage.sol#153) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 166,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getArrayAddress(bytes32 _key) public view returns(address[] memory) {\n",
          "message": "Parameter '_key' of EternalStorage.getArrayAddress (EternalStorage.sol#166) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 170,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getArrayBytes32(bytes32 _key) public view returns(bytes32[] memory) {\n",
          "message": "Parameter '_key' of EternalStorage.getArrayBytes32 (EternalStorage.sol#170) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 174,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getArrayUint(bytes32 _key) public view returns(uint[] memory) {\n",
          "message": "Parameter '_key' of EternalStorage.getArrayUint (EternalStorage.sol#174) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 186,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, address _value) internal {\n",
          "message": "Parameter '_key' of EternalStorage.setArrayIndexValue (EternalStorage.sol#186) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 186,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, address _value) internal {\n",
          "message": "Parameter '_index' of EternalStorage.setArrayIndexValue (EternalStorage.sol#186) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 186,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, address _value) internal {\n",
          "message": "Parameter '_value' of EternalStorage.setArrayIndexValue (EternalStorage.sol#186) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, uint256 _value) internal {\n",
          "message": "Parameter '_key' of EternalStorage.setArrayIndexValue (EternalStorage.sol#190) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, uint256 _value) internal {\n",
          "message": "Parameter '_index' of EternalStorage.setArrayIndexValue (EternalStorage.sol#190) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, uint256 _value) internal {\n",
          "message": "Parameter '_value' of EternalStorage.setArrayIndexValue (EternalStorage.sol#190) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, bytes32 _value) internal {\n",
          "message": "Parameter '_key' of EternalStorage.setArrayIndexValue (EternalStorage.sol#194) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, bytes32 _value) internal {\n",
          "message": "Parameter '_index' of EternalStorage.setArrayIndexValue (EternalStorage.sol#194) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, bytes32 _value) internal {\n",
          "message": "Parameter '_value' of EternalStorage.setArrayIndexValue (EternalStorage.sol#194) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, string memory _value) internal {\n",
          "message": "Parameter '_key' of EternalStorage.setArrayIndexValue (EternalStorage.sol#198) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, string memory _value) internal {\n",
          "message": "Parameter '_index' of EternalStorage.setArrayIndexValue (EternalStorage.sol#198) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, string memory _value) internal {\n",
          "message": "Parameter '_value' of EternalStorage.setArrayIndexValue (EternalStorage.sol#198) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 212,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getUintValue(bytes32 _variable) public view returns(uint256) {\n",
          "message": "Parameter '_variable' of EternalStorage.getUintValue (EternalStorage.sol#212) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBoolValue(bytes32 _variable) public view returns(bool) {\n",
          "message": "Parameter '_variable' of EternalStorage.getBoolValue (EternalStorage.sol#216) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getStringValue(bytes32 _variable) public view returns(string memory) {\n",
          "message": "Parameter '_variable' of EternalStorage.getStringValue (EternalStorage.sol#220) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAddressValue(bytes32 _variable) public view returns(address) {\n",
          "message": "Parameter '_variable' of EternalStorage.getAddressValue (EternalStorage.sol#224) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBytes32Value(bytes32 _variable) public view returns(bytes32) {\n",
          "message": "Parameter '_variable' of EternalStorage.getBytes32Value (EternalStorage.sol#228) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBytesValue(bytes32 _variable) public view returns(bytes memory) {\n",
          "message": "Parameter '_variable' of EternalStorage.getBytesValue (EternalStorage.sol#232) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes32 => int256) internal intStorage;\n",
          "message": "EternalStorage.intStorage (EternalStorage.sol#12) is never used in EternalStorage\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 79,
          "vulnerability_to_line": null,
          "vulnerability_code": "        array.length = array.length - 1;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "        array.length = array.length - 1;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "        array.length = array.length - 1;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "        array.length = array.length - 1;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "UNKNOWN INSTRUCTION: SHR"
      ],
      "vulnerability_findings": []
    }
  }
}