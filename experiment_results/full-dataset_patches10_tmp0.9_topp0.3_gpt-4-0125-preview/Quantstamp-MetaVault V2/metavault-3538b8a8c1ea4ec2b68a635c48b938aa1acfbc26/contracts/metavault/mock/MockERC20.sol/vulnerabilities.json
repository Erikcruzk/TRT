{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string memory name,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string memory symbol,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint8 decimals\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _name = name;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _symbol = symbol;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _decimals = decimals;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _owner = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == _owner, \"ERR_NOT_OWNER\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_balance[src] >= amt, \"!bal\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_balance[msg.sender] >= amt, \"!bal\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 126,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == src || amt <= _allowance[src][msg.sender], \"!spender\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (msg.sender != src && _allowance[src][msg.sender] != uint256(- 1)) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _allowance[src][msg.sender] = sub(_allowance[src][msg.sender], amt);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 130,
          "vulnerability_to_line": null,
          "vulnerability_code": "            emit Approval(msg.sender, dst, _allowance[src][msg.sender]);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 131,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_19"
      ],
      "vulnerability_findings": [
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string memory name,\n",
          "message": "MockERC20.constructor.name (local variable @ MockERC20.sol#37) shadows:\n\t- MockERC20.name (function @ MockERC20.sol#47-49)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string memory symbol,\n",
          "message": "MockERC20.constructor.symbol (local variable @ MockERC20.sol#38) shadows:\n\t- MockERC20.symbol (function @ MockERC20.sol#51-53)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint8 decimals\n",
          "message": "MockERC20.constructor.decimals (local variable @ MockERC20.sol#39) shadows:\n\t- MockERC20.decimals (function @ MockERC20.sol#55-57)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": 49,
          "vulnerability_code": "    function name() public view returns (string memory) {\n\n        return _name;\n",
          "message": "MockERC20.name (MockERC20.sol#47-49) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": 53,
          "vulnerability_code": "    function symbol() public view returns (string memory) {\n\n        return _symbol;\n",
          "message": "MockERC20.symbol (MockERC20.sol#51-53) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": 57,
          "vulnerability_code": "    function decimals() public view returns (uint8) {\n\n        return _decimals;\n",
          "message": "MockERC20.decimals (MockERC20.sol#55-57) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": 92,
          "vulnerability_code": "    function balanceOf(address whom) public view returns (uint) {\n\n        return _balance[whom];\n",
          "message": "MockERC20.balanceOf (MockERC20.sol#90-92) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": 97,
          "vulnerability_code": "    function faucet(uint256 amt) public returns (bool) {\n\n        _mint(msg.sender, amt);\n\n        return true;\n",
          "message": "MockERC20.faucet (MockERC20.sol#94-97) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": 101,
          "vulnerability_code": "    function totalSupply() public view returns (uint) {\n\n        return _totalSupply;\n",
          "message": "MockERC20.totalSupply (MockERC20.sol#99-101) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 109,
          "vulnerability_to_line": 112,
          "vulnerability_code": "    function mint(address dst, uint256 amt) public _onlyOwner_ returns (bool) {\n\n        _mint(dst, amt);\n\n        return true;\n",
          "message": "MockERC20.mint (MockERC20.sol#109-112) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": 118,
          "vulnerability_code": "    function burn(uint amt) public returns (bool) {\n\n        require(_balance[msg.sender] >= amt, \"!bal\");\n\n        _burn(msg.sender, amt);\n\n        return true;\n",
          "message": "MockERC20.burn (MockERC20.sol#114-118) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.6.12;\n",
          "message": "Detected issues with version pragma in MockERC20.sol:\n\t- pragma solidity0.6.12 (MockERC20.sol#5): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": 64,
          "vulnerability_code": "    function _move(address src, address dst, uint amt) internal {\n\n        require(_balance[src] >= amt, \"!bal\");\n\n        _balance[src] = sub(_balance[src], amt);\n\n        _balance[dst] = add(_balance[dst], amt);\n\n        emit Transfer(src, dst, amt);\n",
          "message": "Function 'MockERC20._move' (MockERC20.sol#59-64) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": 68,
          "vulnerability_code": "    function _push(address to, uint amt) internal {\n\n        _move(address(this), to, amt);\n",
          "message": "Function 'MockERC20._push' (MockERC20.sol#66-68) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": 72,
          "vulnerability_code": "    function _pull(address from, uint amt) internal {\n\n        _move(from, address(this), amt);\n",
          "message": "Function 'MockERC20._pull' (MockERC20.sol#70-72) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": 78,
          "vulnerability_code": "    function _mint(address dst, uint amt) internal {\n\n        _balance[dst] = add(_balance[dst], amt);\n\n        _totalSupply = add(_totalSupply, amt);\n\n        emit Transfer(address(0), dst, amt);\n",
          "message": "Function 'MockERC20._mint' (MockERC20.sol#74-78) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": 84,
          "vulnerability_code": "    function _burn(address dst, uint amt) internal {\n\n        _balance[dst] = sub(_balance[dst], amt);\n\n        _totalSupply = sub(_totalSupply, amt);\n\n        emit Transfer(dst, address(0), amt);\n",
          "message": "Function 'MockERC20._burn' (MockERC20.sol#80-84) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint internal _totalSupply;\n",
          "message": "Variable 'MockERC20._totalSupply' (MockERC20.sol#14) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": 22,
          "vulnerability_code": "    modifier _onlyOwner_() {\n\n        require(msg.sender == _owner, \"ERR_NOT_OWNER\");\n\n        _;\n",
          "message": "Modifier 'MockERC20._onlyOwner_' (MockERC20.sol#19-22) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address dst, uint amt) external returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private _name;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private _symbol;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 private _decimals;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address private _owner;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint)                   private _balance;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => mapping(address => uint)) private _allowance;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}