{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "inefficient-state-variable-increment",
          "vulnerability_from_line": 501,
          "vulnerability_to_line": null,
          "vulnerability_code": "        blockNumber += blocks;\n",
          "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 404,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public totalAllocPoint = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 229,
          "vulnerability_to_line": null,
          "vulnerability_code": "        totalSupply = _initialAmount;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 230,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balanceOf[msg.sender] = _initialAmount;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 231,
          "vulnerability_to_line": null,
          "vulnerability_code": "        name = _tokenName;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "        symbol = _tokenSymbol;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 233,
          "vulnerability_to_line": null,
          "vulnerability_code": "        decimals = _decimalUnits;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 234,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 273,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 274,
          "vulnerability_to_line": null,
          "vulnerability_code": "        totalSupply = _initialAmount;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 275,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balanceOf[msg.sender] = _initialAmount;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 276,
          "vulnerability_to_line": null,
          "vulnerability_code": "        name = _tokenName;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 277,
          "vulnerability_to_line": null,
          "vulnerability_code": "        symbol = _tokenSymbol;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": null,
          "vulnerability_code": "        decimals = _decimalUnits;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 279,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 308,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 309,
          "vulnerability_to_line": null,
          "vulnerability_code": "        StandardToken(_initialAmount, _tokenName, _decimalUnits, _tokenSymbol) {}\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 350,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol, address _comptroller) public\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 351,
          "vulnerability_to_line": null,
          "vulnerability_code": "        ERC20Harness(_initialAmount, _tokenName, _decimalUnits, _tokenSymbol) {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 352,
          "vulnerability_to_line": null,
          "vulnerability_code": "        comptroller = _comptroller;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 353,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 408,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 409,
          "vulnerability_to_line": null,
          "vulnerability_code": "        SushiToken _sushi\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 410,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 411,
          "vulnerability_to_line": null,
          "vulnerability_code": "        sushi = _sushi;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 412,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 475,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(user.amount >= _amount, \"withdraw: not good\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 433,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (blockNumber > pool.lastRewardBlock && lpSupply != 0) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 434,
          "vulnerability_to_line": null,
          "vulnerability_code": "            uint256 sushiReward = sushiPerBlock.mul(pool.allocPoint).div(totalAllocPoint);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 435,
          "vulnerability_to_line": null,
          "vulnerability_code": "            accSushiPerShare = accSushiPerShare.add(sushiReward.mul(1e12).div(lpSupply));\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 436,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_54"
      ],
      "vulnerability_findings": [
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 208,
          "vulnerability_to_line": 211,
          "vulnerability_code": "contract ERC20NS is ERC20Base {\n\n    function transfer(address to, uint256 value) external;\n\n    function transferFrom(address from, address to, uint256 value) external;\n",
          "message": "ERC20NS (MockMasterChef.sol#208-211) has incorrect ERC20 function interface(s):\n\t-transfer (MockMasterChef.sol#209)\n\t-transferFrom (MockMasterChef.sol#210)\n"
        },
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 263,
          "vulnerability_to_line": 299,
          "vulnerability_code": "contract NonStandardToken is ERC20NS {\n\n    using SafeMath for uint256;\n\n\n\n    string public name;\n\n    uint8 public decimals;\n\n    string public symbol;\n\n    uint256 public totalSupply;\n\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    mapping(address => uint256) public balanceOf;\n\n\n\n    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n\n        totalSupply = _initialAmount;\n\n        balanceOf[msg.sender] = _initialAmount;\n\n        name = _tokenName;\n\n        symbol = _tokenSymbol;\n\n        decimals = _decimalUnits;\n\n    }\n\n\n\n    function transfer(address dst, uint256 amount) external {\n\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(amount, \"Insufficient balance\");\n\n        balanceOf[dst] = balanceOf[dst].add(amount, \"Balance overflow\");\n\n        emit Transfer(msg.sender, dst, amount);\n\n    }\n\n\n\n    function transferFrom(address src, address dst, uint256 amount) external {\n\n        allowance[src][msg.sender] = allowance[src][msg.sender].sub(amount, \"Insufficient allowance\");\n\n        balanceOf[src] = balanceOf[src].sub(amount, \"Insufficient balance\");\n\n        balanceOf[dst] = balanceOf[dst].add(amount, \"Balance overflow\");\n\n        emit Transfer(src, dst, amount);\n\n    }\n\n\n\n    function approve(address _spender, uint256 amount) external returns (bool) {\n\n        allowance[msg.sender][_spender] = amount;\n\n        emit Approval(msg.sender, _spender, amount);\n\n        return true;\n\n    }\n",
          "message": "NonStandardToken (MockMasterChef.sol#263-299) has incorrect ERC20 function interface(s):\n\t-transfer (MockMasterChef.sol#281-285)\n\t-transferFrom (MockMasterChef.sol#287-292)\n"
        },
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 441,
          "vulnerability_to_line": 455,
          "vulnerability_code": "    function updatePool(uint256 _pid) public {\n\n        PoolInfo storage pool = poolInfo[_pid];\n\n        if (blockNumber <= pool.lastRewardBlock) {\n\n            return;\n\n        }\n\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n\n        if (lpSupply == 0) {\n\n            pool.lastRewardBlock = blockNumber;\n\n            return;\n\n        }\n\n        uint256 sushiReward = sushiPerBlock.mul(pool.allocPoint).div(totalAllocPoint);\n\n        sushi.mint(address(this), sushiReward);\n\n        pool.accSushiPerShare = pool.accSushiPerShare.add(sushiReward.mul(1e12).div(lpSupply));\n\n        pool.lastRewardBlock = blockNumber;\n",
          "message": "MasterChef.updatePool (MockMasterChef.sol#441-455) uses a dangerous strict equality:\n\t- lpSupply == 0\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 458,
          "vulnerability_to_line": 469,
          "vulnerability_code": "    function deposit(uint256 _pid, uint256 _amount) public {\n\n        PoolInfo storage pool = poolInfo[_pid];\n\n        UserInfo storage user = userInfo[_pid][msg.sender];\n\n        updatePool(_pid);\n\n        if (user.amount > 0) {\n\n            uint256 pending = user.amount.mul(pool.accSushiPerShare).div(1e12).sub(user.rewardDebt);\n\n            safeSushiTransfer(msg.sender, pending);\n\n        }\n\n        pool.lpToken.transferFrom(address(msg.sender), address(this), _amount);\n\n        user.amount = user.amount.add(_amount);\n\n        user.rewardDebt = user.amount.mul(pool.accSushiPerShare).div(1e12);\n",
          "message": "Reentrancy in MasterChef.deposit (MockMasterChef.sol#458-469):\n\tExternal calls:\n\t- updatePool(_pid) (MockMasterChef.sol#461)\n\t- safeSushiTransfer(msg.sender,pending) (MockMasterChef.sol#464)\n\t- pool.lpToken.transferFrom(address(msg.sender),address(this),_amount) (MockMasterChef.sol#466)\n\tState variables written after the call(s):\n\t- userInfo (MockMasterChef.sol#467)\n\t- userInfo (MockMasterChef.sol#468)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 441,
          "vulnerability_to_line": 455,
          "vulnerability_code": "    function updatePool(uint256 _pid) public {\n\n        PoolInfo storage pool = poolInfo[_pid];\n\n        if (blockNumber <= pool.lastRewardBlock) {\n\n            return;\n\n        }\n\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n\n        if (lpSupply == 0) {\n\n            pool.lastRewardBlock = blockNumber;\n\n            return;\n\n        }\n\n        uint256 sushiReward = sushiPerBlock.mul(pool.allocPoint).div(totalAllocPoint);\n\n        sushi.mint(address(this), sushiReward);\n\n        pool.accSushiPerShare = pool.accSushiPerShare.add(sushiReward.mul(1e12).div(lpSupply));\n\n        pool.lastRewardBlock = blockNumber;\n",
          "message": "Reentrancy in MasterChef.updatePool (MockMasterChef.sol#441-455):\n\tExternal calls:\n\t- lpSupply = pool.lpToken.balanceOf(address(this)) (MockMasterChef.sol#446)\n\tState variables written after the call(s):\n\t- poolInfo (MockMasterChef.sol#448)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 441,
          "vulnerability_to_line": 455,
          "vulnerability_code": "    function updatePool(uint256 _pid) public {\n\n        PoolInfo storage pool = poolInfo[_pid];\n\n        if (blockNumber <= pool.lastRewardBlock) {\n\n            return;\n\n        }\n\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n\n        if (lpSupply == 0) {\n\n            pool.lastRewardBlock = blockNumber;\n\n            return;\n\n        }\n\n        uint256 sushiReward = sushiPerBlock.mul(pool.allocPoint).div(totalAllocPoint);\n\n        sushi.mint(address(this), sushiReward);\n\n        pool.accSushiPerShare = pool.accSushiPerShare.add(sushiReward.mul(1e12).div(lpSupply));\n\n        pool.lastRewardBlock = blockNumber;\n",
          "message": "Reentrancy in MasterChef.updatePool (MockMasterChef.sol#441-455):\n\tExternal calls:\n\t- lpSupply = pool.lpToken.balanceOf(address(this)) (MockMasterChef.sol#446)\n\t- sushi.mint(address(this),sushiReward) (MockMasterChef.sol#452)\n\tState variables written after the call(s):\n\t- poolInfo (MockMasterChef.sol#453)\n\t- poolInfo (MockMasterChef.sol#454)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 472,
          "vulnerability_to_line": 482,
          "vulnerability_code": "    function withdraw(uint256 _pid, uint256 _amount) public {\n\n        PoolInfo storage pool = poolInfo[_pid];\n\n        UserInfo storage user = userInfo[_pid][msg.sender];\n\n        require(user.amount >= _amount, \"withdraw: not good\");\n\n        updatePool(_pid);\n\n        uint256 pending = user.amount.mul(pool.accSushiPerShare).div(1e12).sub(user.rewardDebt);\n\n        safeSushiTransfer(msg.sender, pending);\n\n        user.amount = user.amount.sub(_amount);\n\n        user.rewardDebt = user.amount.mul(pool.accSushiPerShare).div(1e12);\n\n        pool.lpToken.transfer(address(msg.sender), _amount);\n",
          "message": "Reentrancy in MasterChef.withdraw (MockMasterChef.sol#472-482):\n\tExternal calls:\n\t- updatePool(_pid) (MockMasterChef.sol#476)\n\t- safeSushiTransfer(msg.sender,pending) (MockMasterChef.sol#478)\n\tState variables written after the call(s):\n\t- userInfo (MockMasterChef.sol#479)\n\t- userInfo (MockMasterChef.sol#480)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 441,
          "vulnerability_to_line": 455,
          "vulnerability_code": "    function updatePool(uint256 _pid) public {\n\n        PoolInfo storage pool = poolInfo[_pid];\n\n        if (blockNumber <= pool.lastRewardBlock) {\n\n            return;\n\n        }\n\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n\n        if (lpSupply == 0) {\n\n            pool.lastRewardBlock = blockNumber;\n\n            return;\n\n        }\n\n        uint256 sushiReward = sushiPerBlock.mul(pool.allocPoint).div(totalAllocPoint);\n\n        sushi.mint(address(this), sushiReward);\n\n        pool.accSushiPerShare = pool.accSushiPerShare.add(sushiReward.mul(1e12).div(lpSupply));\n\n        pool.lastRewardBlock = blockNumber;\n",
          "message": "MasterChef.updatePool (MockMasterChef.sol#441-455) does not use the value returned by external calls:\n\t-sushi.mint(address(this),sushiReward) (MockMasterChef.sol#452)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 458,
          "vulnerability_to_line": 469,
          "vulnerability_code": "    function deposit(uint256 _pid, uint256 _amount) public {\n\n        PoolInfo storage pool = poolInfo[_pid];\n\n        UserInfo storage user = userInfo[_pid][msg.sender];\n\n        updatePool(_pid);\n\n        if (user.amount > 0) {\n\n            uint256 pending = user.amount.mul(pool.accSushiPerShare).div(1e12).sub(user.rewardDebt);\n\n            safeSushiTransfer(msg.sender, pending);\n\n        }\n\n        pool.lpToken.transferFrom(address(msg.sender), address(this), _amount);\n\n        user.amount = user.amount.add(_amount);\n\n        user.rewardDebt = user.amount.mul(pool.accSushiPerShare).div(1e12);\n",
          "message": "MasterChef.deposit (MockMasterChef.sol#458-469) does not use the value returned by external calls:\n\t-pool.lpToken.transferFrom(address(msg.sender),address(this),_amount) (MockMasterChef.sol#466)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 472,
          "vulnerability_to_line": 482,
          "vulnerability_code": "    function withdraw(uint256 _pid, uint256 _amount) public {\n\n        PoolInfo storage pool = poolInfo[_pid];\n\n        UserInfo storage user = userInfo[_pid][msg.sender];\n\n        require(user.amount >= _amount, \"withdraw: not good\");\n\n        updatePool(_pid);\n\n        uint256 pending = user.amount.mul(pool.accSushiPerShare).div(1e12).sub(user.rewardDebt);\n\n        safeSushiTransfer(msg.sender, pending);\n\n        user.amount = user.amount.sub(_amount);\n\n        user.rewardDebt = user.amount.mul(pool.accSushiPerShare).div(1e12);\n\n        pool.lpToken.transfer(address(msg.sender), _amount);\n",
          "message": "MasterChef.withdraw (MockMasterChef.sol#472-482) does not use the value returned by external calls:\n\t-pool.lpToken.transfer(address(msg.sender),_amount) (MockMasterChef.sol#481)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 485,
          "vulnerability_to_line": 492,
          "vulnerability_code": "    function safeSushiTransfer(address _to, uint256 _amount) internal {\n\n        uint256 sushiBal = sushi.balanceOf(address(this));\n\n        if (_amount > sushiBal) {\n\n            sushi.transfer(_to, sushiBal);\n\n        } else {\n\n            sushi.transfer(_to, _amount);\n\n        }\n",
          "message": "MasterChef.safeSushiTransfer (MockMasterChef.sol#485-492) does not use the value returned by external calls:\n\t-sushi.transfer(_to,sushiBal) (MockMasterChef.sol#488)\n\t-sushi.transfer(_to,_amount) (MockMasterChef.sol#490)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 311,
          "vulnerability_to_line": 313,
          "vulnerability_code": "    function harnessSetFailTransferFromAddress(address src, bool _fail) public {\n\n        failTransferFromAddresses[src] = _fail;\n",
          "message": "ERC20Harness.harnessSetFailTransferFromAddress (MockMasterChef.sol#311-313) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 315,
          "vulnerability_to_line": 317,
          "vulnerability_code": "    function harnessSetFailTransferToAddress(address dst, bool _fail) public {\n\n        failTransferToAddresses[dst] = _fail;\n",
          "message": "ERC20Harness.harnessSetFailTransferToAddress (MockMasterChef.sol#315-317) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 319,
          "vulnerability_to_line": 321,
          "vulnerability_code": "    function harnessSetBalance(address _account, uint _amount) public {\n\n        balanceOf[_account] = _amount;\n",
          "message": "ERC20Harness.harnessSetBalance (MockMasterChef.sol#319-321) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 361,
          "vulnerability_to_line": 365,
          "vulnerability_code": "    function mint(address _to, uint256 _amount) public returns (bool) {\n\n        totalSupply = totalSupply.add(_amount);\n\n        balanceOf[_to] = balanceOf[_to].add(_amount);\n\n        return true;\n",
          "message": "SushiToken.mint (MockMasterChef.sol#361-365) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 416,
          "vulnerability_to_line": 425,
          "vulnerability_code": "    function add(uint256 _allocPoint, ERC20 _lpToken) public {\n\n        uint256 lastRewardBlock = blockNumber;\n\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n\n        poolInfo.push(PoolInfo({\n\n            lpToken: _lpToken,\n\n            allocPoint: _allocPoint,\n\n            lastRewardBlock: lastRewardBlock,\n\n            accSushiPerShare: 0\n\n        }));\n",
          "message": "MasterChef.add (MockMasterChef.sol#416-425) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 458,
          "vulnerability_to_line": 469,
          "vulnerability_code": "    function deposit(uint256 _pid, uint256 _amount) public {\n\n        PoolInfo storage pool = poolInfo[_pid];\n\n        UserInfo storage user = userInfo[_pid][msg.sender];\n\n        updatePool(_pid);\n\n        if (user.amount > 0) {\n\n            uint256 pending = user.amount.mul(pool.accSushiPerShare).div(1e12).sub(user.rewardDebt);\n\n            safeSushiTransfer(msg.sender, pending);\n\n        }\n\n        pool.lpToken.transferFrom(address(msg.sender), address(this), _amount);\n\n        user.amount = user.amount.add(_amount);\n\n        user.rewardDebt = user.amount.mul(pool.accSushiPerShare).div(1e12);\n",
          "message": "MasterChef.deposit (MockMasterChef.sol#458-469) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 472,
          "vulnerability_to_line": 482,
          "vulnerability_code": "    function withdraw(uint256 _pid, uint256 _amount) public {\n\n        PoolInfo storage pool = poolInfo[_pid];\n\n        UserInfo storage user = userInfo[_pid][msg.sender];\n\n        require(user.amount >= _amount, \"withdraw: not good\");\n\n        updatePool(_pid);\n\n        uint256 pending = user.amount.mul(pool.accSushiPerShare).div(1e12).sub(user.rewardDebt);\n\n        safeSushiTransfer(msg.sender, pending);\n\n        user.amount = user.amount.sub(_amount);\n\n        user.rewardDebt = user.amount.mul(pool.accSushiPerShare).div(1e12);\n\n        pool.lpToken.transfer(address(msg.sender), _amount);\n",
          "message": "MasterChef.withdraw (MockMasterChef.sol#472-482) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 495,
          "vulnerability_to_line": 497,
          "vulnerability_code": "    function harnessSetUserAmount(uint256 _pid, address _user, uint256 _amount) public {\n\n        userInfo[_pid][_user].amount = _amount;\n",
          "message": "MasterChef.harnessSetUserAmount (MockMasterChef.sol#495-497) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 500,
          "vulnerability_to_line": 502,
          "vulnerability_code": "    function harnessFastForward(uint blocks) public {\n\n        blockNumber += blocks;\n",
          "message": "MasterChef.harnessFastForward (MockMasterChef.sol#500-502) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": "Detected issues with version pragma in MockMasterChef.sol:\n\t- pragma solidity^0.5.16 (MockMasterChef.sol#3): it allows old versions\n\t- pragma solidity^0.5.16 (MockMasterChef.sol#192): it allows old versions\n\t- pragma solidity^0.5.16 (MockMasterChef.sol#358): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 251,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 amount) external returns (bool) {\n",
          "message": "Parameter '_spender' of StandardToken.approve (MockMasterChef.sol#251) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Parameter '_initialAmount' of StandardToken. (MockMasterChef.sol#228) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Parameter '_tokenName' of StandardToken. (MockMasterChef.sol#228) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Parameter '_decimalUnits' of StandardToken. (MockMasterChef.sol#228) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Parameter '_tokenSymbol' of StandardToken. (MockMasterChef.sol#228) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 amount) external returns (bool) {\n",
          "message": "Parameter '_spender' of NonStandardToken.approve (MockMasterChef.sol#294) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 273,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Parameter '_initialAmount' of NonStandardToken. (MockMasterChef.sol#273) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 273,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Parameter '_tokenName' of NonStandardToken. (MockMasterChef.sol#273) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 273,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Parameter '_decimalUnits' of NonStandardToken. (MockMasterChef.sol#273) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 273,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Parameter '_tokenSymbol' of NonStandardToken. (MockMasterChef.sol#273) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 311,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function harnessSetFailTransferFromAddress(address src, bool _fail) public {\n",
          "message": "Parameter '_fail' of ERC20Harness.harnessSetFailTransferFromAddress (MockMasterChef.sol#311) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 315,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function harnessSetFailTransferToAddress(address dst, bool _fail) public {\n",
          "message": "Parameter '_fail' of ERC20Harness.harnessSetFailTransferToAddress (MockMasterChef.sol#315) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 319,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function harnessSetBalance(address _account, uint _amount) public {\n",
          "message": "Parameter '_account' of ERC20Harness.harnessSetBalance (MockMasterChef.sol#319) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 319,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function harnessSetBalance(address _account, uint _amount) public {\n",
          "message": "Parameter '_amount' of ERC20Harness.harnessSetBalance (MockMasterChef.sol#319) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 350,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol, address _comptroller) public\n",
          "message": "Parameter '_comptroller' of CTokenHarness. (MockMasterChef.sol#350) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 361,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mint(address _to, uint256 _amount) public returns (bool) {\n",
          "message": "Parameter '_to' of SushiToken.mint (MockMasterChef.sol#361) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 361,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mint(address _to, uint256 _amount) public returns (bool) {\n",
          "message": "Parameter '_amount' of SushiToken.mint (MockMasterChef.sol#361) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 409,
          "vulnerability_to_line": null,
          "vulnerability_code": "        SushiToken _sushi\n",
          "message": "Parameter '_sushi' of MasterChef. (MockMasterChef.sol#409) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 416,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function add(uint256 _allocPoint, ERC20 _lpToken) public {\n",
          "message": "Parameter '_allocPoint' of MasterChef.add (MockMasterChef.sol#416) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 416,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function add(uint256 _allocPoint, ERC20 _lpToken) public {\n",
          "message": "Parameter '_lpToken' of MasterChef.add (MockMasterChef.sol#416) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 428,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function pendingSushi(uint256 _pid, address _user) external view returns (uint256) {\n",
          "message": "Parameter '_pid' of MasterChef.pendingSushi (MockMasterChef.sol#428) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 428,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function pendingSushi(uint256 _pid, address _user) external view returns (uint256) {\n",
          "message": "Parameter '_user' of MasterChef.pendingSushi (MockMasterChef.sol#428) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 441,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function updatePool(uint256 _pid) public {\n",
          "message": "Parameter '_pid' of MasterChef.updatePool (MockMasterChef.sol#441) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 458,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deposit(uint256 _pid, uint256 _amount) public {\n",
          "message": "Parameter '_pid' of MasterChef.deposit (MockMasterChef.sol#458) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 458,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deposit(uint256 _pid, uint256 _amount) public {\n",
          "message": "Parameter '_amount' of MasterChef.deposit (MockMasterChef.sol#458) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 472,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(uint256 _pid, uint256 _amount) public {\n",
          "message": "Parameter '_pid' of MasterChef.withdraw (MockMasterChef.sol#472) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 472,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(uint256 _pid, uint256 _amount) public {\n",
          "message": "Parameter '_amount' of MasterChef.withdraw (MockMasterChef.sol#472) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 485,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function safeSushiTransfer(address _to, uint256 _amount) internal {\n",
          "message": "Parameter '_to' of MasterChef.safeSushiTransfer (MockMasterChef.sol#485) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 485,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function safeSushiTransfer(address _to, uint256 _amount) internal {\n",
          "message": "Parameter '_amount' of MasterChef.safeSushiTransfer (MockMasterChef.sol#485) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 495,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function harnessSetUserAmount(uint256 _pid, address _user, uint256 _amount) public {\n",
          "message": "Parameter '_pid' of MasterChef.harnessSetUserAmount (MockMasterChef.sol#495) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 495,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function harnessSetUserAmount(uint256 _pid, address _user, uint256 _amount) public {\n",
          "message": "Parameter '_user' of MasterChef.harnessSetUserAmount (MockMasterChef.sol#495) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 495,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function harnessSetUserAmount(uint256 _pid, address _user, uint256 _amount) public {\n",
          "message": "Parameter '_amount' of MasterChef.harnessSetUserAmount (MockMasterChef.sol#495) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 400,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public constant sushiPerBlock = 1e18;\n",
          "message": "Constant 'MasterChef.sushiPerBlock' (MockMasterChef.sol#400) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 251,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 amount) external returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 amount) external returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 192,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 358,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 219,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 264,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 371,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 406,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 blockNumber = 10000;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}