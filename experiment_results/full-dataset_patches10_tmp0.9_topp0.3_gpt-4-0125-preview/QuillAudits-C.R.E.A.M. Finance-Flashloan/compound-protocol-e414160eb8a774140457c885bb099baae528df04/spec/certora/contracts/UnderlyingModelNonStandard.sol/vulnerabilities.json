{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_6"
      ],
      "vulnerability_findings": [
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _totalSupply;\n",
          "message": "UnderlyingModelNonStandard._totalSupply (UnderlyingModelNonStandard.sol#87) is never initialized. It is used in:\n\t- totalSupply (UnderlyingModelNonStandard.sol#91-93)\n"
        },
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": 72,
          "vulnerability_code": "interface EIP20NonStandardInterface {\n\n\n\n    /**\n\n     * @notice Get the total number of tokens in circulation\n\n     * @return The supply of tokens\n\n     */\n\n    function totalSupply() external view returns (uint256);\n\n\n\n    /**\n\n     * @notice Gets the balance of the specified address\n\n     * @param owner The address from which the balance will be retrieved\n\n     * @return The balance\n\n     */\n\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n\n\n    ///\n\n    /// !!!!!!!!!!!!!!\n\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\n\n    /// !!!!!!!!!!!!!!\n\n    ///\n\n\n\n    /**\n\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n\n      * @param dst The address of the destination account\n\n      * @param amount The number of tokens to transfer\n\n      */\n\n    function transfer(address dst, uint256 amount) external;\n\n\n\n    ///\n\n    /// !!!!!!!!!!!!!!\n\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\n\n    /// !!!!!!!!!!!!!!\n\n    ///\n\n\n\n    /**\n\n      * @notice Transfer `amount` tokens from `src` to `dst`\n\n      * @param src The address of the source account\n\n      * @param dst The address of the destination account\n\n      * @param amount The number of tokens to transfer\n\n      */\n\n    function transferFrom(address src, address dst, uint256 amount) external;\n\n\n\n    /**\n\n      * @notice Approve `spender` to transfer up to `amount` from `src`\n\n      * @dev This will overwrite the approval amount for `spender`\n\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n\n      * @param spender The address of the account which may transfer tokens\n\n      * @param amount The number of tokens that are approved\n\n      * @return Whether or not the approval succeeded\n\n      */\n\n    function approve(address spender, uint256 amount) external returns (bool success);\n\n\n\n    /**\n\n      * @notice Get the current allowance from `owner` for `spender`\n\n      * @param owner The address of the account which owns the tokens to be spent\n\n      * @param spender The address of the account which may transfer tokens\n\n      * @return The number of tokens allowed to be spent\n\n      */\n\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n",
          "message": "EIP20NonStandardInterface (UnderlyingModelNonStandard.sol#10-72) has incorrect ERC20 function interface(s):\n\t-transfer (UnderlyingModelNonStandard.sol#36)\n\t-transferFrom (UnderlyingModelNonStandard.sol#50)\n"
        },
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": 129,
          "vulnerability_code": "contract UnderlyingModelNonStandard is EIP20NonStandardInterface, SimulationInterface {\n\n    uint256 _totalSupply;\n\n    mapping (address => uint256) balances;\n\n    mapping (address => mapping (address => uint256)) allowances;\n\n\n\n    function totalSupply() external view returns (uint256) {\n\n        return _totalSupply;\n\n    }\n\n\n\n    function balanceOf(address owner) external view returns (uint256 balance) {\n\n        balance = balances[owner];\n\n    }\n\n\n\n    function transfer(address dst, uint256 amount) external {\n\n        address src = msg.sender;\n\n        require(balances[src] >= amount);\n\n        require(balances[dst] + amount >= balances[dst]);\n\n\n\n        balances[src] -= amount;\n\n        balances[dst] += amount;\n\n    }\n\n\n\n    function transferFrom(address src, address dst, uint256 amount) external {\n\n        require(allowances[src][msg.sender] >= amount);\n\n        require(balances[src] >= amount);\n\n        require(balances[dst] + amount >= balances[dst]);\n\n\n\n        allowances[src][msg.sender] -= amount;\n\n        balances[src] -= amount;\n\n        balances[dst] += amount;\n\n    }\n\n\n\n    function approve(address spender, uint256 amount) external returns (bool success) {\n\n        allowances[msg.sender][spender] = amount;\n\n    }\n\n\n\n    function allowance(address owner, address spender) external view returns (uint256 remaining) {\n\n        remaining = allowances[owner][spender];\n\n    }\n\n\n\n    function dummy() external {\n\n        return;\n\n    }\n",
          "message": "UnderlyingModelNonStandard (UnderlyingModelNonStandard.sol#86-129) has incorrect ERC20 function interface(s):\n\t-transfer (UnderlyingModelNonStandard.sol#99-106)\n\t-transferFrom (UnderlyingModelNonStandard.sol#108-116)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _totalSupply;\n",
          "message": "UnderlyingModelNonStandard._totalSupply should be constant (UnderlyingModelNonStandard.sol#87)\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": "Detected issues with version pragma in UnderlyingModelNonStandard.sol:\n\t- pragma solidity^0.5.16 (UnderlyingModelNonStandard.sol#3): it allows old versions\n\t- pragma solidity^0.5.16 (UnderlyingModelNonStandard.sol#76): it allows old versions\n\t- pragma solidity^0.5.16 (UnderlyingModelNonStandard.sol#84): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _totalSupply;\n",
          "message": "Variable 'UnderlyingModelNonStandard._totalSupply' (UnderlyingModelNonStandard.sol#87) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address spender, uint256 amount) external returns (bool success) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _totalSupply;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => uint256) balances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 89,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => mapping (address => uint256)) allowances;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}