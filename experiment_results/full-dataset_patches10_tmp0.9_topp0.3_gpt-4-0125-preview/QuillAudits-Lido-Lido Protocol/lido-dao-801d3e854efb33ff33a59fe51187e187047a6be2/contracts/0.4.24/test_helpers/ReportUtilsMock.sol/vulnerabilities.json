{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_5"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": 66,
          "vulnerability_code": "    function encode(uint64 beaconBalance, uint32 beaconValidators) public pure returns (uint256) {\n\n        return ReportUtils.encode(beaconBalance, beaconValidators);\n",
          "message": "ReportUtilsMock.encode (ReportUtilsMock.sol#64-66) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": 70,
          "vulnerability_code": "    function decode(uint256 value) public pure returns (uint64 beaconBalance, uint32 beaconValidators) {\n\n        return value.decode();\n",
          "message": "ReportUtilsMock.decode (ReportUtilsMock.sol#68-70) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": 80,
          "vulnerability_code": "    function decodeWithCount(uint256 value)\n\n        public pure\n\n        returns (\n\n            uint64 beaconBalance,\n\n            uint32 beaconValidators,\n\n            uint16 count)\n\n    {\n\n        return value.decodeWithCount();\n",
          "message": "ReportUtilsMock.decodeWithCount (ReportUtilsMock.sol#72-80) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": 84,
          "vulnerability_code": "    function isDifferent(uint256 value, uint256 that) public pure returns(bool) {\n\n        return value.isDifferent(that);\n",
          "message": "ReportUtilsMock.isDifferent (ReportUtilsMock.sol#82-84) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": 88,
          "vulnerability_code": "    function getCount(uint256 value) public pure returns(uint16) {\n\n        return value.getCount();\n",
          "message": "ReportUtilsMock.getCount (ReportUtilsMock.sol#86-88) should be declared external\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 constant internal COUNT_OUTMASK = 0xFFFFFFFFFFFFFFFFFFFFFFFF0000;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(uint256 value) internal pure returns (uint64 beaconBalance, uint32 beaconValidators) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns (\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decodeWithCount(uint256 value)\n",
          "message": null
        }
      ]
    }
  }
}