{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_5"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 26,
          "vulnerability_code": "    function getTotalShares() public view returns (uint256) {\n\n        return 42;\n",
          "message": "LidoMockForOracle.getTotalShares (LidoMockForOracle.sol#24-26) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": 30,
          "vulnerability_code": "    function pretendTotalPooledEtherGweiForTest(uint256 _val) public {\n\n        totalPooledEther = _val * 1e9; // gwei to wei\n",
          "message": "LidoMockForOracle.pretendTotalPooledEtherGweiForTest (LidoMockForOracle.sol#28-30) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function handleOracleReport(uint256 /*_beaconValidators*/, uint256 _beaconBalance) external {\n",
          "message": "Parameter '' of LidoMockForOracle.handleOracleReport (LidoMockForOracle.sol#20) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function handleOracleReport(uint256 /*_beaconValidators*/, uint256 _beaconBalance) external {\n",
          "message": "Parameter '_beaconBalance' of LidoMockForOracle.handleOracleReport (LidoMockForOracle.sol#20) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function pretendTotalPooledEtherGweiForTest(uint256 _val) public {\n",
          "message": "Parameter '_val' of LidoMockForOracle.pretendTotalPooledEtherGweiForTest (LidoMockForOracle.sol#28) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private totalPooledEther;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "        totalPooledEther = _val * 1e9; // gwei to wei\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "        totalPooledEther = _val * 1e9; // gwei to wei\n",
          "message": null
        }
      ]
    }
  }
}