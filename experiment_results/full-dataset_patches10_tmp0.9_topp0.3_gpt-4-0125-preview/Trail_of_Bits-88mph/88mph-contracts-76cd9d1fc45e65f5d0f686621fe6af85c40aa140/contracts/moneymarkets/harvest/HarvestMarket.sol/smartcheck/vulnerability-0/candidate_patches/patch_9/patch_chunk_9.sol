function safeApprove(
    IERC20 token,
    address spender,
    uint256 value
) internal {
    // bytes4(keccak256(bytes('allowance(address,address)')));
    bytes4 private constant _ALLOWANCE_SELECTOR = 0xdd62ed3e;

    bytes memory data = abi.encodeWithSelector(_ALLOWANCE_SELECTOR, address(this), spender);
    bytes memory returndata = address(token).functionStaticCall(data, "SafeERC20: low-level call failed");
    uint256 currentAllowance = abi.decode(returndata, (uint256));

    if (currentAllowance != 0) {
        // first reset the allowance to zero
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));
    }
    
    // and then set the new allowance
    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
}