{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 175,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint public totalUpgraded = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_15"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 208,
          "vulnerability_to_line": 224,
          "vulnerability_code": "  function upgrade(uint value) public {\n\n    UpgradeState state = getUpgradeState();\n\n    // Ensure it's not called in a bad state\n\n    require(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading);\n\n\n\n    // Validate input value.\n\n    require(value != 0);\n\n\n\n    // Upgrade agent reissues the tokens\n\n    upgradeAgent.upgradeFrom(msg.sender, value);\n\n    \n\n    // Take tokens out from circulation\n\n    burnTokens(msg.sender, value);\n\n    totalUpgraded = totalUpgraded.add(value);\n\n\n\n    Upgrade(msg.sender, upgradeAgent, value);\n",
          "message": "Reentrancy in UpgradeableToken.upgrade (UpgradeableToken.sol#208-224):\n\tExternal calls:\n\t- upgradeAgent.upgradeFrom(msg.sender,value) (UpgradeableToken.sol#217)\n\tState variables written after the call(s):\n\t- totalUpgraded (UpgradeableToken.sol#221)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint public originalSupply;\n",
          "message": "UpgradeAgent.originalSupply should be constant (UpgradeableToken.sol#67)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address who) public constant returns (uint256);\n",
          "message": "EIP20Token.balanceOf (UpgradeableToken.sol#12) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool success);\n",
          "message": "EIP20Token.transfer (UpgradeableToken.sol#13) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address from, address to, uint256 value) public returns (bool success);\n",
          "message": "EIP20Token.transferFrom (UpgradeableToken.sol#14) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool success);\n",
          "message": "EIP20Token.approve (UpgradeableToken.sol#15) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address owner, address spender) public constant returns (uint256 remaining);\n",
          "message": "EIP20Token.allowance (UpgradeableToken.sol#16) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": 72,
          "vulnerability_code": "  function isUpgradeAgent() public constant returns (bool) {\n\n    return true;\n",
          "message": "UpgradeAgent.isUpgradeAgent (UpgradeableToken.sol#70-72) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function upgradeFrom(address from, uint value) public;\n",
          "message": "UpgradeAgent.upgradeFrom (UpgradeableToken.sol#90) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 208,
          "vulnerability_to_line": 224,
          "vulnerability_code": "  function upgrade(uint value) public {\n\n    UpgradeState state = getUpgradeState();\n\n    // Ensure it's not called in a bad state\n\n    require(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading);\n\n\n\n    // Validate input value.\n\n    require(value != 0);\n\n\n\n    // Upgrade agent reissues the tokens\n\n    upgradeAgent.upgradeFrom(msg.sender, value);\n\n    \n\n    // Take tokens out from circulation\n\n    burnTokens(msg.sender, value);\n\n    totalUpgraded = totalUpgraded.add(value);\n\n\n\n    Upgrade(msg.sender, upgradeAgent, value);\n",
          "message": "UpgradeableToken.upgrade (UpgradeableToken.sol#208-224) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 262,
          "vulnerability_to_line": 264,
          "vulnerability_code": "  function changeUpgradeMaster(address new_master) onlyMaster public {\n\n    setUpgradeMaster(new_master);\n",
          "message": "UpgradeableToken.changeUpgradeMaster (UpgradeableToken.sol#262-264) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.15;\n",
          "message": "Detected issues with version pragma in UpgradeableToken.sol:\n\t- pragma solidity^0.4.15 (UpgradeableToken.sol#3): it allows old versions\n\t- pragma solidity^0.4.15 (UpgradeableToken.sol#33): it allows old versions\n\t- pragma solidity^0.4.15 (UpgradeableToken.sol#46): it allows old versions\n\t- pragma solidity^0.4.15 (UpgradeableToken.sol#96): it allows old versions\n\t- pragma solidity^0.4.15 (UpgradeableToken.sol#150): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": 203,
          "vulnerability_code": "  function UpgradeableToken(address master) internal {\n\n    setUpgradeMaster(master);\n",
          "message": "Function 'UpgradeableToken.UpgradeableToken' (UpgradeableToken.sol#201-203) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 262,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function changeUpgradeMaster(address new_master) onlyMaster public {\n",
          "message": "Parameter 'new_master' of UpgradeableToken.changeUpgradeMaster (UpgradeableToken.sol#262) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 269,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setUpgradeMaster(address new_master) private {\n",
          "message": "Parameter 'new_master' of UpgradeableToken.setUpgradeMaster (UpgradeableToken.sol#269) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": null,
          "vulnerability_code": "    else if (address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function totalSupply() public constant returns (uint256);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address who) public constant returns (uint256);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address owner, address spender) public constant returns (uint256 remaining);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isUpgradeAgent() public constant returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mul(uint a, uint b) internal constant returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function div(uint a, uint b) internal constant returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 120,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sub(uint a, uint b) internal constant returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add(uint a, uint b) internal constant returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 131,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 139,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function max256(uint a, uint b) internal constant returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function min256(uint a, uint b) internal constant returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 250,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getUpgradeState() public constant returns(UpgradeState) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 277,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function canUpgrade() public constant returns(bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.15;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.15;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.15;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.15;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.15;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 166,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}