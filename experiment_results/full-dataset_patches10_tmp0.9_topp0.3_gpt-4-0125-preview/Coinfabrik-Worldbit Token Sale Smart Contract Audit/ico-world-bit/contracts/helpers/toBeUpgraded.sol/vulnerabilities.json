{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 175,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint public totalUpgraded = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_28"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 208,
          "vulnerability_to_line": 224,
          "vulnerability_code": "  function upgrade(uint value) public {\n\n    UpgradeState state = getUpgradeState();\n\n    // Ensure it's not called in a bad state\n\n    require(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading);\n\n\n\n    // Validate input value.\n\n    require(value != 0);\n\n\n\n    // Upgrade agent reissues the tokens\n\n    upgradeAgent.upgradeFrom(msg.sender, value);\n\n    \n\n    // Take tokens out from circulation\n\n    burnTokens(msg.sender, value);\n\n    totalUpgraded = totalUpgraded.add(value);\n\n\n\n    Upgrade(msg.sender, upgradeAgent, value);\n",
          "message": "Reentrancy in UpgradeableToken.upgrade (toBeUpgraded.sol#208-224):\n\tExternal calls:\n\t- upgradeAgent.upgradeFrom(msg.sender,value) (toBeUpgraded.sol#217)\n\tState variables written after the call(s):\n\t- totalUpgraded (toBeUpgraded.sol#221)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 368,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint allowance = allowed[from][msg.sender];\n",
          "message": "StandardToken.transferFrom.allowance (local variable @ toBeUpgraded.sol#368) shadows:\n\t- StandardToken.allowance (function @ toBeUpgraded.sol#405-407)\n\t- EIP20Token.allowance (function @ toBeUpgraded.sol#16)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint public originalSupply;\n",
          "message": "UpgradeAgent.originalSupply should be constant (toBeUpgraded.sol#67)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 357,
          "vulnerability_to_line": 359,
          "vulnerability_code": "  function balanceOf(address account) public constant returns (uint balance) {\n\n    return balances[account];\n",
          "message": "StandardToken.balanceOf (toBeUpgraded.sol#357-359) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address who) public constant returns (uint256);\n",
          "message": "EIP20Token.balanceOf (toBeUpgraded.sol#12) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool success);\n",
          "message": "EIP20Token.transfer (toBeUpgraded.sol#13) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 345,
          "vulnerability_to_line": 350,
          "vulnerability_code": "  function transfer(address to, uint value) public returns (bool success) {\n\n    balances[msg.sender] = balances[msg.sender].sub(value);\n\n    balances[to] = balances[to].add(value);\n\n    Transfer(msg.sender, to, value);\n\n    return true;\n",
          "message": "StandardToken.transfer (toBeUpgraded.sol#345-350) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 488,
          "vulnerability_to_line": 490,
          "vulnerability_code": "  function transfer(address, uint) public returns (bool) {\n\n    return true;\n",
          "message": "toBeUpgraded.transfer (toBeUpgraded.sol#488-490) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address from, address to, uint256 value) public returns (bool success);\n",
          "message": "EIP20Token.transferFrom (toBeUpgraded.sol#14) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 367,
          "vulnerability_to_line": 379,
          "vulnerability_code": "  function transferFrom(address from, address to, uint value) public returns (bool success) {\n\n    uint allowance = allowed[from][msg.sender];\n\n\n\n    // Check is not needed because sub(allowance, value) will already throw if this condition is not met\n\n    // require(value <= allowance);\n\n    // SafeMath uses assert instead of require though, beware when using an analysis tool\n\n\n\n    balances[from] = balances[from].sub(value);\n\n    balances[to] = balances[to].add(value);\n\n    allowed[from][msg.sender] = allowance.sub(value);\n\n    Transfer(from, to, value);\n\n    return true;\n",
          "message": "StandardToken.transferFrom (toBeUpgraded.sol#367-379) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 386,
          "vulnerability_to_line": 397,
          "vulnerability_code": "  function approve(address spender, uint value) public returns (bool success) {\n\n\n\n    // To change the approve amount you first have to reduce the addresses'\n\n    //  allowance to zero by calling `approve(spender, 0)` if it is not\n\n    //  already 0 to mitigate the race condition described here:\n\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n    require (value == 0 || allowed[msg.sender][spender] == 0);\n\n\n\n    allowed[msg.sender][spender] = value;\n\n    Approval(msg.sender, spender, value);\n\n    return true;\n",
          "message": "StandardToken.approve (toBeUpgraded.sol#386-397) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool success);\n",
          "message": "EIP20Token.approve (toBeUpgraded.sol#15) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address owner, address spender) public constant returns (uint256 remaining);\n",
          "message": "EIP20Token.allowance (toBeUpgraded.sol#16) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 405,
          "vulnerability_to_line": 407,
          "vulnerability_code": "  function allowance(address account, address spender) public constant returns (uint remaining) {\n\n    return allowed[account][spender];\n",
          "message": "StandardToken.allowance (toBeUpgraded.sol#405-407) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": 72,
          "vulnerability_code": "  function isUpgradeAgent() public constant returns (bool) {\n\n    return true;\n",
          "message": "UpgradeAgent.isUpgradeAgent (toBeUpgraded.sol#70-72) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function upgradeFrom(address from, uint value) public;\n",
          "message": "UpgradeAgent.upgradeFrom (toBeUpgraded.sol#90) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 208,
          "vulnerability_to_line": 224,
          "vulnerability_code": "  function upgrade(uint value) public {\n\n    UpgradeState state = getUpgradeState();\n\n    // Ensure it's not called in a bad state\n\n    require(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading);\n\n\n\n    // Validate input value.\n\n    require(value != 0);\n\n\n\n    // Upgrade agent reissues the tokens\n\n    upgradeAgent.upgradeFrom(msg.sender, value);\n\n    \n\n    // Take tokens out from circulation\n\n    burnTokens(msg.sender, value);\n\n    totalUpgraded = totalUpgraded.add(value);\n\n\n\n    Upgrade(msg.sender, upgradeAgent, value);\n",
          "message": "UpgradeableToken.upgrade (toBeUpgraded.sol#208-224) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 262,
          "vulnerability_to_line": 264,
          "vulnerability_code": "  function changeUpgradeMaster(address new_master) onlyMaster public {\n\n    setUpgradeMaster(new_master);\n",
          "message": "UpgradeableToken.changeUpgradeMaster (toBeUpgraded.sol#262-264) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 415,
          "vulnerability_to_line": 420,
          "vulnerability_code": "  function addApproval(address spender, uint addedValue) public returns (bool success) {\n\n      uint oldValue = allowed[msg.sender][spender];\n\n      allowed[msg.sender][spender] = oldValue.add(addedValue);\n\n      Approval(msg.sender, spender, allowed[msg.sender][spender]);\n\n      return true;\n",
          "message": "StandardToken.addApproval (toBeUpgraded.sol#415-420) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 427,
          "vulnerability_to_line": 438,
          "vulnerability_code": "  function subApproval(address spender, uint subtractedValue) public returns (bool success) {\n\n\n\n      uint oldVal = allowed[msg.sender][spender];\n\n\n\n      if (subtractedValue > oldVal) {\n\n          allowed[msg.sender][spender] = 0;\n\n      } else {\n\n          allowed[msg.sender][spender] = oldVal.sub(subtractedValue);\n\n      }\n\n      Approval(msg.sender, spender, allowed[msg.sender][spender]);\n\n      return true;\n",
          "message": "StandardToken.subApproval (toBeUpgraded.sol#427-438) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.15;\n",
          "message": "Detected issues with version pragma in toBeUpgraded.sol:\n\t- pragma solidity^0.4.15 (toBeUpgraded.sol#3): it allows old versions\n\t- pragma solidity^0.4.15 (toBeUpgraded.sol#33): it allows old versions\n\t- pragma solidity^0.4.15 (toBeUpgraded.sol#46): it allows old versions\n\t- pragma solidity^0.4.15 (toBeUpgraded.sol#96): it allows old versions\n\t- pragma solidity^0.4.15 (toBeUpgraded.sol#150): it allows old versions\n\t- pragma solidity^0.4.15 (toBeUpgraded.sol#290): it allows old versions\n\t- pragma solidity^0.4.15 (toBeUpgraded.sol#314): it allows old versions\n\t- pragma solidity^0.4.15 (toBeUpgraded.sol#468): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": 203,
          "vulnerability_code": "  function UpgradeableToken(address master) internal {\n\n    setUpgradeMaster(master);\n",
          "message": "Function 'UpgradeableToken.UpgradeableToken' (toBeUpgraded.sol#201-203) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 262,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function changeUpgradeMaster(address new_master) onlyMaster public {\n",
          "message": "Parameter 'new_master' of UpgradeableToken.changeUpgradeMaster (toBeUpgraded.sol#262) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 269,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setUpgradeMaster(address new_master) private {\n",
          "message": "Parameter 'new_master' of UpgradeableToken.setUpgradeMaster (toBeUpgraded.sol#269) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 331,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint private total_supply;\n",
          "message": "Variable 'StandardToken.total_supply' (toBeUpgraded.sol#331) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 472,
          "vulnerability_to_line": 499,
          "vulnerability_code": "contract toBeUpgraded is UpgradeableToken, StandardToken {\n\n    \n\n  bool public canUp;\n\n\n\n  //constructor\n\n  function toBeUpgraded(uint value) public\n\n  UpgradeableToken(msg.sender) {\n\n    mintInternal(msg.sender, value);\n\n    setCanUp(true);\n\n  }\n\n\n\n  function setCanUp(bool value) public {\n\n    canUp = value;\n\n  }\n\n\n\n  //Blocked to avoid change of tokens amount except from upgrading\n\n  function transfer(address, uint) public returns (bool) {\n\n    return true;\n\n  }\n\n\n\n\n\n  /**\n\n   * Overriden for testing different values\n\n   */\n\n  function canUpgrade() public constant returns(bool) {\n\n     return canUp;\n\n  }\n",
          "message": "Contract 'toBeUpgraded' (toBeUpgraded.sol#472-499) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 488,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address, uint) public returns (bool) {\n",
          "message": "Parameter '' of toBeUpgraded.transfer (toBeUpgraded.sol#488) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 488,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address, uint) public returns (bool) {\n",
          "message": "Parameter '_scope_0' of toBeUpgraded.transfer (toBeUpgraded.sol#488) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": null,
          "vulnerability_code": "    else if (address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function totalSupply() public constant returns (uint256);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address who) public constant returns (uint256);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address owner, address spender) public constant returns (uint256 remaining);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isUpgradeAgent() public constant returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mul(uint a, uint b) internal constant returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function div(uint a, uint b) internal constant returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 120,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sub(uint a, uint b) internal constant returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add(uint a, uint b) internal constant returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 131,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 139,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function max256(uint a, uint b) internal constant returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function min256(uint a, uint b) internal constant returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 250,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getUpgradeState() public constant returns(UpgradeState) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 277,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function canUpgrade() public constant returns(bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 336,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function totalSupply() public constant returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 357,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address account) public constant returns (uint balance) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 405,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address account, address spender) public constant returns (uint remaining) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 496,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function canUpgrade() public constant returns(bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 386,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address spender, uint value) public returns (bool success) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_TRANSFER_SHOULD_THROW",
          "vulnerability_from_line": 488,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address, uint) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.15;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.15;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.15;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.15;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.15;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 290,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.15;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 314,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.15;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 468,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.15;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 331,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint private total_supply;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping(address => uint) private balances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 333,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping(address => mapping (address => uint)) private allowed;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 166,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 329,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 126,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint c = a + b;\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 126,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint c = a + b;\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}