{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_19"
      ],
      "vulnerability_findings": [
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 178,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint allowance = allowed[from][msg.sender];\n",
          "message": "StandardToken.transferFrom.allowance (local variable @ StandardTokenMock.sol#178) shadows:\n\t- StandardToken.allowance (function @ StandardTokenMock.sol#215-217)\n\t- EIP20Token.allowance (function @ StandardTokenMock.sol#16)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function totalSupply() public constant returns (uint256);\n",
          "message": "EIP20Token.totalSupply (StandardTokenMock.sol#11) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 146,
          "vulnerability_to_line": 148,
          "vulnerability_code": "  function totalSupply() public constant returns (uint) {\n\n    return total_supply;\n",
          "message": "StandardToken.totalSupply (StandardTokenMock.sol#146-148) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address who) public constant returns (uint256);\n",
          "message": "EIP20Token.balanceOf (StandardTokenMock.sol#12) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 167,
          "vulnerability_to_line": 169,
          "vulnerability_code": "  function balanceOf(address account) public constant returns (uint balance) {\n\n    return balances[account];\n",
          "message": "StandardToken.balanceOf (StandardTokenMock.sol#167-169) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool success);\n",
          "message": "EIP20Token.transfer (StandardTokenMock.sol#13) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": 160,
          "vulnerability_code": "  function transfer(address to, uint value) public returns (bool success) {\n\n    balances[msg.sender] = balances[msg.sender].sub(value);\n\n    balances[to] = balances[to].add(value);\n\n    Transfer(msg.sender, to, value);\n\n    return true;\n",
          "message": "StandardToken.transfer (StandardTokenMock.sol#155-160) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 177,
          "vulnerability_to_line": 189,
          "vulnerability_code": "  function transferFrom(address from, address to, uint value) public returns (bool success) {\n\n    uint allowance = allowed[from][msg.sender];\n\n\n\n    // Check is not needed because sub(allowance, value) will already throw if this condition is not met\n\n    // require(value <= allowance);\n\n    // SafeMath uses assert instead of require though, beware when using an analysis tool\n\n\n\n    balances[from] = balances[from].sub(value);\n\n    balances[to] = balances[to].add(value);\n\n    allowed[from][msg.sender] = allowance.sub(value);\n\n    Transfer(from, to, value);\n\n    return true;\n",
          "message": "StandardToken.transferFrom (StandardTokenMock.sol#177-189) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address from, address to, uint256 value) public returns (bool success);\n",
          "message": "EIP20Token.transferFrom (StandardTokenMock.sol#14) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 196,
          "vulnerability_to_line": 207,
          "vulnerability_code": "  function approve(address spender, uint value) public returns (bool success) {\n\n\n\n    // To change the approve amount you first have to reduce the addresses'\n\n    //  allowance to zero by calling `approve(spender, 0)` if it is not\n\n    //  already 0 to mitigate the race condition described here:\n\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n    require (value == 0 || allowed[msg.sender][spender] == 0);\n\n\n\n    allowed[msg.sender][spender] = value;\n\n    Approval(msg.sender, spender, value);\n\n    return true;\n",
          "message": "StandardToken.approve (StandardTokenMock.sol#196-207) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool success);\n",
          "message": "EIP20Token.approve (StandardTokenMock.sol#15) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": 217,
          "vulnerability_code": "  function allowance(address account, address spender) public constant returns (uint remaining) {\n\n    return allowed[account][spender];\n",
          "message": "StandardToken.allowance (StandardTokenMock.sol#215-217) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address owner, address spender) public constant returns (uint256 remaining);\n",
          "message": "EIP20Token.allowance (StandardTokenMock.sol#16) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 225,
          "vulnerability_to_line": 230,
          "vulnerability_code": "  function addApproval(address spender, uint addedValue) public returns (bool success) {\n\n      uint oldValue = allowed[msg.sender][spender];\n\n      allowed[msg.sender][spender] = oldValue.add(addedValue);\n\n      Approval(msg.sender, spender, allowed[msg.sender][spender]);\n\n      return true;\n",
          "message": "StandardToken.addApproval (StandardTokenMock.sol#225-230) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 237,
          "vulnerability_to_line": 248,
          "vulnerability_code": "  function subApproval(address spender, uint subtractedValue) public returns (bool success) {\n\n\n\n      uint oldVal = allowed[msg.sender][spender];\n\n\n\n      if (subtractedValue > oldVal) {\n\n          allowed[msg.sender][spender] = 0;\n\n      } else {\n\n          allowed[msg.sender][spender] = oldVal.sub(subtractedValue);\n\n      }\n\n      Approval(msg.sender, spender, allowed[msg.sender][spender]);\n\n      return true;\n",
          "message": "StandardToken.subApproval (StandardTokenMock.sol#237-248) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 282,
          "vulnerability_to_line": 284,
          "vulnerability_code": "  function mint(address receiver, uint amount) public {\n\n    mintInternal(receiver, amount);\n",
          "message": "StandardTokenMock.mint (StandardTokenMock.sol#282-284) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 289,
          "vulnerability_to_line": 291,
          "vulnerability_code": "  function burnTokensMock(address account, uint value) public {\n\n    super.burnTokens(account, value);\n",
          "message": "StandardTokenMock.burnTokensMock (StandardTokenMock.sol#289-291) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.15;\n",
          "message": "Detected issues with version pragma in StandardTokenMock.sol:\n\t- pragma solidity^0.4.15 (StandardTokenMock.sol#3): it allows old versions\n\t- pragma solidity^0.4.15 (StandardTokenMock.sol#33): it allows old versions\n\t- pragma solidity^0.4.15 (StandardTokenMock.sol#87): it allows old versions\n\t- pragma solidity^0.4.15 (StandardTokenMock.sol#100): it allows old versions\n\t- pragma solidity^0.4.15 (StandardTokenMock.sol#124): it allows old versions\n\t- pragma solidity^0.4.15 (StandardTokenMock.sol#278): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint private total_supply;\n",
          "message": "Variable 'StandardToken.total_supply' (StandardTokenMock.sol#141) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function totalSupply() public constant returns (uint256);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address who) public constant returns (uint256);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address owner, address spender) public constant returns (uint256 remaining);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mul(uint a, uint b) internal constant returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function div(uint a, uint b) internal constant returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sub(uint a, uint b) internal constant returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add(uint a, uint b) internal constant returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function max256(uint a, uint b) internal constant returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function min256(uint a, uint b) internal constant returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 146,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function totalSupply() public constant returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 167,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address account) public constant returns (uint balance) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address account, address spender) public constant returns (uint remaining) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 196,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address spender, uint value) public returns (bool success) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.15;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.15;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.15;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 100,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.15;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 124,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.15;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.15;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint private total_supply;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping(address => uint) private balances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping(address => mapping (address => uint)) private allowed;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 139,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint c = a + b;\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint c = a + b;\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}