{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_52"
      ],
      "vulnerability_findings": [
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": 179,
          "vulnerability_code": "interface EIP20NonStandardInterface {\n\n\n\n    /**\n\n     * @notice Get the total number of tokens in circulation\n\n     * @return The supply of tokens\n\n     */\n\n    function totalSupply() external view returns (uint256);\n\n\n\n    /**\n\n     * @notice Gets the balance of the specified address\n\n     * @param owner The address from which the balance will be retrieved\n\n     * @return The balance\n\n     */\n\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n\n\n    ///\n\n    /// !!!!!!!!!!!!!!\n\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\n\n    /// !!!!!!!!!!!!!!\n\n    ///\n\n\n\n    /**\n\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n\n      * @param dst The address of the destination account\n\n      * @param amount The number of tokens to transfer\n\n      */\n\n    function transfer(address dst, uint256 amount) external;\n\n\n\n    ///\n\n    /// !!!!!!!!!!!!!!\n\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\n\n    /// !!!!!!!!!!!!!!\n\n    ///\n\n\n\n    /**\n\n      * @notice Transfer `amount` tokens from `src` to `dst`\n\n      * @param src The address of the source account\n\n      * @param dst The address of the destination account\n\n      * @param amount The number of tokens to transfer\n\n      */\n\n    function transferFrom(address src, address dst, uint256 amount) external;\n\n\n\n    /**\n\n      * @notice Approve `spender` to transfer up to `amount` from `src`\n\n      * @dev This will overwrite the approval amount for `spender`\n\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n\n      * @param spender The address of the account which may transfer tokens\n\n      * @param amount The number of tokens that are approved\n\n      * @return Whether or not the approval succeeded\n\n      */\n\n    function approve(address spender, uint256 amount) external returns (bool success);\n\n\n\n    /**\n\n      * @notice Get the current allowance from `owner` for `spender`\n\n      * @param owner The address of the account which owns the tokens to be spent\n\n      * @param spender The address of the account which may transfer tokens\n\n      * @return The number of tokens allowed to be spent\n\n      */\n\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n",
          "message": "EIP20NonStandardInterface (RTokenInterfaces.sol#117-179) has incorrect ERC20 function interface(s):\n\t-transfer (RTokenInterfaces.sol#143)\n\t-transferFrom (RTokenInterfaces.sol#157)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 454,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address public implementation;\n",
          "message": "RDelegationStorage.implementation should be constant (RTokenInterfaces.sol#454)\nRErc20Storage.underlying should be constant (RTokenInterfaces.sol#428)\nRTokenStorage._notEntered should be constant (RTokenInterfaces.sol#191)\nRTokenStorage.accrualBlockNumber should be constant (RTokenInterfaces.sol#252)\nRTokenStorage.admin should be constant (RTokenInterfaces.sol#222)\nRTokenStorage.borrowIndex should be constant (RTokenInterfaces.sol#257)\nRTokenStorage.decimals should be constant (RTokenInterfaces.sol#206)\nRTokenStorage.initialExchangeRateMantissa should be constant (RTokenInterfaces.sol#242)\nRTokenStorage.name should be constant (RTokenInterfaces.sol#196)\nRTokenStorage.pendingAdmin should be constant (RTokenInterfaces.sol#227)\nRTokenStorage.reserveFactorMantissa should be constant (RTokenInterfaces.sol#247)\nRTokenStorage.symbol should be constant (RTokenInterfaces.sol#201)\nRTokenStorage.totalBorrows should be constant (RTokenInterfaces.sol#262)\nRTokenStorage.totalReserves should be constant (RTokenInterfaces.sol#267)\nRTokenStorage.totalSupply should be constant (RTokenInterfaces.sol#272)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 406,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function borrowBalanceStored(address account) public view returns (uint);\n",
          "message": "RTokenInterface.borrowBalanceStored (RTokenInterfaces.sol#406) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function exchangeRateCurrent() public returns (uint);\n",
          "message": "RTokenInterface.exchangeRateCurrent (RTokenInterfaces.sol#407) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 408,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function exchangeRateStored() public view returns (uint);\n",
          "message": "RTokenInterface.exchangeRateStored (RTokenInterfaces.sol#408) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 410,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function accrueInterest() public returns (uint);\n",
          "message": "RTokenInterface.accrueInterest (RTokenInterfaces.sol#410) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 418,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setIronController(IronControllerInterface newIronController) public returns (uint);\n",
          "message": "RTokenInterface._setIronController (RTokenInterfaces.sol#418) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 421,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint);\n",
          "message": "RTokenInterface._setInterestRateModel (RTokenInterfaces.sol#421) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 469,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) public;\n",
          "message": "rDelegatorInterface._setImplementation (RTokenInterfaces.sol#469) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 478,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _becomeImplementation(bytes memory data) public;\n",
          "message": "RDelegateInterface._becomeImplementation (RTokenInterfaces.sol#478) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 483,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _resignImplementation() public;\n",
          "message": "RDelegateInterface._resignImplementation (RTokenInterfaces.sol#483) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": "Detected issues with version pragma in RTokenInterfaces.sol:\n\t- pragma solidity^0.5.16 (RTokenInterfaces.sol#3): it allows old versions\n\t- pragma solidity^0.5.16 (RTokenInterfaces.sol#36): it allows old versions\n\t- pragma solidity^0.5.16 (RTokenInterfaces.sol#110): it allows old versions\n\t- pragma solidity^0.5.16 (RTokenInterfaces.sol#183): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool public constant isInterestRateModel = true;\n",
          "message": "Constant 'InterestRateModel.isInterestRateModel' (RTokenInterfaces.sol#11) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function enterMarkets(address[] calldata RTokens) external returns (uint[] memory);\n",
          "message": "Parameter 'RTokens' of IronControllerInterface.enterMarkets (RTokenInterfaces.sol#44) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function exitMarket(address RToken) external returns (uint);\n",
          "message": "Parameter 'RToken' of IronControllerInterface.exitMarket (RTokenInterfaces.sol#45) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mintAllowed(address RToken, address minter, uint mintAmount) external returns (uint);\n",
          "message": "Parameter 'RToken' of IronControllerInterface.mintAllowed (RTokenInterfaces.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mintVerify(address RToken, address minter, uint mintAmount, uint mintTokens) external;\n",
          "message": "Parameter 'RToken' of IronControllerInterface.mintVerify (RTokenInterfaces.sol#50) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function redeemAllowed(address RToken, address redeemer, uint redeemTokens) external returns (uint);\n",
          "message": "Parameter 'RToken' of IronControllerInterface.redeemAllowed (RTokenInterfaces.sol#52) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function redeemVerify(address RToken, address redeemer, uint redeemAmount, uint redeemTokens) external;\n",
          "message": "Parameter 'RToken' of IronControllerInterface.redeemVerify (RTokenInterfaces.sol#53) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function borrowAllowed(address RToken, address borrower, uint borrowAmount) external returns (uint);\n",
          "message": "Parameter 'RToken' of IronControllerInterface.borrowAllowed (RTokenInterfaces.sol#55) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function borrowVerify(address RToken, address borrower, uint borrowAmount) external;\n",
          "message": "Parameter 'RToken' of IronControllerInterface.borrowVerify (RTokenInterfaces.sol#56) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address RToken,\n",
          "message": "Parameter 'RToken' of IronControllerInterface.repayBorrowAllowed (RTokenInterfaces.sol#59) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address RToken,\n",
          "message": "Parameter 'RToken' of IronControllerInterface.repayBorrowVerify (RTokenInterfaces.sol#64) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address RTokenBorrowed,\n",
          "message": "Parameter 'RTokenBorrowed' of IronControllerInterface.liquidateBorrowAllowed (RTokenInterfaces.sol#71) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address RTokenCollateral,\n",
          "message": "Parameter 'RTokenCollateral' of IronControllerInterface.liquidateBorrowAllowed (RTokenInterfaces.sol#72) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address RTokenBorrowed,\n",
          "message": "Parameter 'RTokenBorrowed' of IronControllerInterface.liquidateBorrowVerify (RTokenInterfaces.sol#77) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address RTokenCollateral,\n",
          "message": "Parameter 'RTokenCollateral' of IronControllerInterface.liquidateBorrowVerify (RTokenInterfaces.sol#78) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address RTokenCollateral,\n",
          "message": "Parameter 'RTokenCollateral' of IronControllerInterface.seizeAllowed (RTokenInterfaces.sol#85) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address RTokenBorrowed,\n",
          "message": "Parameter 'RTokenBorrowed' of IronControllerInterface.seizeAllowed (RTokenInterfaces.sol#86) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address RTokenCollateral,\n",
          "message": "Parameter 'RTokenCollateral' of IronControllerInterface.seizeVerify (RTokenInterfaces.sol#91) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 92,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address RTokenBorrowed,\n",
          "message": "Parameter 'RTokenBorrowed' of IronControllerInterface.seizeVerify (RTokenInterfaces.sol#92) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferAllowed(address RToken, address src, address dst, uint transfeRTokens) external returns (uint);\n",
          "message": "Parameter 'RToken' of IronControllerInterface.transferAllowed (RTokenInterfaces.sol#97) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferVerify(address RToken, address src, address dst, uint transfeRTokens) external;\n",
          "message": "Parameter 'RToken' of IronControllerInterface.transferVerify (RTokenInterfaces.sol#98) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address RTokenBorrowed,\n",
          "message": "Parameter 'RTokenBorrowed' of IronControllerInterface.liquidateCalculateSeizeTokens (RTokenInterfaces.sol#103) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address RTokenCollateral,\n",
          "message": "Parameter 'RTokenCollateral' of IronControllerInterface.liquidateCalculateSeizeTokens (RTokenInterfaces.sol#104) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool public constant isIronController = true;\n",
          "message": "Constant 'IronControllerInterface.isIronController' (RTokenInterfaces.sol#40) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 191,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool internal _notEntered;\n",
          "message": "Variable 'RTokenStorage._notEntered' (RTokenInterfaces.sol#191) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 212,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint internal constant borrowRateMaxMantissa = 0.0005e16;\n",
          "message": "Constant 'RTokenStorage.borrowRateMaxMantissa' (RTokenInterfaces.sol#212) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint internal constant reserveFactorMaxMantissa = 1e18;\n",
          "message": "Constant 'RTokenStorage.reserveFactorMaxMantissa' (RTokenInterfaces.sol#217) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 416,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\n",
          "message": "Function 'RTokenInterface._setPendingAdmin' (RTokenInterfaces.sol#416) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 417,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _acceptAdmin() external returns (uint);\n",
          "message": "Function 'RTokenInterface._acceptAdmin' (RTokenInterfaces.sol#417) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 418,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setIronController(IronControllerInterface newIronController) public returns (uint);\n",
          "message": "Function 'RTokenInterface._setIronController' (RTokenInterfaces.sol#418) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 419,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint);\n",
          "message": "Function 'RTokenInterface._setReserveFactor' (RTokenInterfaces.sol#419) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 420,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _reduceReserves(uint reduceAmount) external returns (uint);\n",
          "message": "Function 'RTokenInterface._reduceReserves' (RTokenInterfaces.sol#420) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 421,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint);\n",
          "message": "Function 'RTokenInterface._setInterestRateModel' (RTokenInterfaces.sol#421) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 304,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool public constant isRToken = true;\n",
          "message": "Constant 'RTokenInterface.isRToken' (RTokenInterfaces.sol#304) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 441,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function liquidateBorrow(address borrower, uint repayAmount, RTokenInterface RTokenCollateral) external returns (uint);\n",
          "message": "Parameter 'RTokenCollateral' of RErc20Interface.liquidateBorrow (RTokenInterfaces.sol#441) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 447,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _addReserves(uint addAmount) external returns (uint);\n",
          "message": "Function 'RErc20Interface._addReserves' (RTokenInterfaces.sol#447) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 457,
          "vulnerability_to_line": 470,
          "vulnerability_code": "contract rDelegatorInterface is RDelegationStorage {\n\n    /**\n\n     * @notice Emitted when implementation is changed\n\n     */\n\n    event NewImplementation(address oldImplementation, address newImplementation);\n\n\n\n    /**\n\n     * @notice Called by the admin to update the implementation of the delegator\n\n     * @param implementation_ The address of the new implementation for delegation\n\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\n\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\n\n     */\n\n    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) public;\n",
          "message": "Contract 'rDelegatorInterface' (RTokenInterfaces.sol#457-470) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 469,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) public;\n",
          "message": "Function 'rDelegatorInterface._setImplementation' (RTokenInterfaces.sol#469) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 478,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _becomeImplementation(bytes memory data) public;\n",
          "message": "Function 'RDelegateInterface._becomeImplementation' (RTokenInterfaces.sol#478) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 483,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _resignImplementation() public;\n",
          "message": "Function 'RDelegateInterface._resignImplementation' (RTokenInterfaces.sol#483) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 300,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract RTokenInterface is RTokenStorage {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint repayAmount) external view returns (uint, uint);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 401,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 416,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 416,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}