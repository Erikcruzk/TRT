
This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.

slither Analysis Results
Vulnerability: locked-ether found in the following piece of code:

    function ()

        external

        payable

    {

        // solium-disable-next-line security/no-inline-assembly

        assembly {

            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)

            calldatacopy(0, 0, calldatasize())

            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)

            returndatacopy(0, 0, returndatasize())

            if eq(success, 0) { revert(0, returndatasize()) }

            return(0, returndatasize())

        }


The contract is among the source code below:



pragma solidity ^0.5.0;




contract Proxy {

    
    
    address internal masterCopy;

    
    
    constructor(address _masterCopy)
        public
    {
        require(_masterCopy != address(0), "Invalid master copy address provided");
        masterCopy = _masterCopy;
    }

    
    function ()
        external
        payable
    {
        
        assembly {
            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)
            calldatacopy(0, 0, calldatasize())
            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)
            returndatacopy(0, 0, returndatasize())
            if eq(success, 0) { revert(0, returndatasize()) }
            return(0, returndatasize())
        }
    }
}

DO NOT return natural language for explanations, only the Solidity code of the vulnerable function (if it is a function otherwise whole contract). 
"""