{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 272,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (string memory name, string memory symbol, uint8 decimals) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 273,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _name = name;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 274,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _symbol = symbol;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 275,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _decimals = decimals;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 276,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 357,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tconstructor(address _owner)\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 358,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tpublic\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 359,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tERC20Detailed(\"ClaimsToken\", \"CST\", 18)\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 360,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t{\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 361,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t_mint(_owner, 10000 * (10 ** uint256(18)));\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 362,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 363,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\treceivedFunds = 0;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 364,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t}\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 491,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tconstructor(address _owner, IERC20 _fundsToken)\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 492,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tpublic\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 493,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tClaimsToken(_owner)\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 494,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t{\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 495,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\trequire(address(_fundsToken) != address(0));\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 496,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 497,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tfundsToken = _fundsToken;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 498,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t}\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 487,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\trequire(msg.sender == address(fundsToken), \"UNAUTHORIZED_SENDER\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 507,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\trequire(msg.value == 0, \"\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 511,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\trequire(fundsToken.transfer(msg.sender, withdrawableFunds), \"TRANSFER_FAILED\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_37"
      ],
      "vulnerability_findings": [
        {
          "name": "locked-ether",
          "vulnerability_from_line": 503,
          "vulnerability_to_line": 512,
          "vulnerability_code": "\tfunction withdrawFunds()\n\n\t\texternal\n\n\t\tpayable\n\n\t{\n\n\t\trequire(msg.value == 0, \"\");\n\n\n\n\t\tuint256 withdrawableFunds = _prepareWithdraw();\n\n\n\n\t\trequire(fundsToken.transfer(msg.sender, withdrawableFunds), \"TRANSFER_FAILED\");\n",
          "message": "Contract locking ether found in ClaimsToken.sol:\n\tContract ClaimsTokenERC20Extension has payable functions:\n\t - withdrawFunds (ClaimsToken.sol#503-512)\n\tBut does not have a function to withdraw the ether\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 272,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (string memory name, string memory symbol, uint8 decimals) public {\n",
          "message": "ERC20Detailed.constructor.name (local variable @ ClaimsToken.sol#272) shadows:\n\t- ERC20Detailed.name (function @ ClaimsToken.sol#281-283)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 272,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (string memory name, string memory symbol, uint8 decimals) public {\n",
          "message": "ERC20Detailed.constructor.symbol (local variable @ ClaimsToken.sol#272) shadows:\n\t- ERC20Detailed.symbol (function @ ClaimsToken.sol#289-291)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 272,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (string memory name, string memory symbol, uint8 decimals) public {\n",
          "message": "ERC20Detailed.constructor.decimals (local variable @ ClaimsToken.sol#272) shadows:\n\t- ERC20Detailed.decimals (function @ ClaimsToken.sol#305-307)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 133,
          "vulnerability_to_line": 136,
          "vulnerability_code": "    function approve(address spender, uint256 value) public returns (bool) {\n\n        _approve(msg.sender, spender, value);\n\n        return true;\n",
          "message": "ERC20.approve (ClaimsToken.sol#133-136) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address spender, uint256 value) external returns (bool);\n",
          "message": "IERC20.approve (ClaimsToken.sol#47) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address owner, address spender) external view returns (uint256);\n",
          "message": "IERC20.allowance (ClaimsToken.sol#55) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": 112,
          "vulnerability_code": "    function allowance(address owner, address spender) public view returns (uint256) {\n\n        return _allowed[owner][spender];\n",
          "message": "ERC20.allowance (ClaimsToken.sol#110-112) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 162,
          "vulnerability_to_line": 165,
          "vulnerability_code": "    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n\n        return true;\n",
          "message": "ERC20.increaseAllowance (ClaimsToken.sol#162-165) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 177,
          "vulnerability_to_line": 180,
          "vulnerability_code": "    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n\n        return true;\n",
          "message": "ERC20.decreaseAllowance (ClaimsToken.sol#177-180) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 281,
          "vulnerability_to_line": 283,
          "vulnerability_code": "    function name() public view returns (string memory) {\n\n        return _name;\n",
          "message": "ERC20Detailed.name (ClaimsToken.sol#281-283) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 289,
          "vulnerability_to_line": 291,
          "vulnerability_code": "    function symbol() public view returns (string memory) {\n\n        return _symbol;\n",
          "message": "ERC20Detailed.symbol (ClaimsToken.sol#289-291) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 305,
          "vulnerability_to_line": 307,
          "vulnerability_code": "    function decimals() public view returns (uint8) {\n\n        return _decimals;\n",
          "message": "ERC20Detailed.decimals (ClaimsToken.sol#305-307) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 520,
          "vulnerability_to_line": 528,
          "vulnerability_code": "\tfunction tokenFallback(address _sender, uint256 _value, bytes memory)\n\n\t\tpublic\n\n\t\tonlyFundsToken()\n\n\t{\n\n\t\tif (_value > 0) {\n\n\t\t\t_registerFunds(_value);\n\n\t\t\temit FundsReceived(_sender, _value);\n\n\t\t}\n",
          "message": "ClaimsTokenERC20Extension.tokenFallback (ClaimsToken.sol#520-528) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 188,
          "vulnerability_to_line": 194,
          "vulnerability_code": "    function _transfer(address from, address to, uint256 value) internal {\n\n        require(to != address(0));\n\n\n\n        _balances[from] = _balances[from].sub(value);\n\n        _balances[to] = _balances[to].add(value);\n\n        emit Transfer(from, to, value);\n",
          "message": "Function 'ERC20._transfer' (ClaimsToken.sol#188-194) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 203,
          "vulnerability_to_line": 209,
          "vulnerability_code": "    function _mint(address account, uint256 value) internal {\n\n        require(account != address(0));\n\n\n\n        _totalSupply = _totalSupply.add(value);\n\n        _balances[account] = _balances[account].add(value);\n\n        emit Transfer(address(0), account, value);\n",
          "message": "Function 'ERC20._mint' (ClaimsToken.sol#203-209) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": 223,
          "vulnerability_code": "    function _burn(address account, uint256 value) internal {\n\n        require(account != address(0));\n\n\n\n        _totalSupply = _totalSupply.sub(value);\n\n        _balances[account] = _balances[account].sub(value);\n\n        emit Transfer(account, address(0), value);\n",
          "message": "Function 'ERC20._burn' (ClaimsToken.sol#217-223) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 231,
          "vulnerability_to_line": 237,
          "vulnerability_code": "    function _approve(address owner, address spender, uint256 value) internal {\n\n        require(spender != address(0));\n\n        require(owner != address(0));\n\n\n\n        _allowed[owner][spender] = value;\n\n        emit Approval(owner, spender, value);\n",
          "message": "Function 'ERC20._approve' (ClaimsToken.sol#231-237) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 247,
          "vulnerability_to_line": 250,
          "vulnerability_code": "    function _burnFrom(address account, uint256 value) internal {\n\n        _burn(account, value);\n\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n",
          "message": "Function 'ERC20._burnFrom' (ClaimsToken.sol#247-250) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 419,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction availableFunds(address _forAddress)\n",
          "message": "Parameter '_forAddress' of ClaimsToken.availableFunds (ClaimsToken.sol#419) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 373,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction transfer(address _to, uint256 _value)\n",
          "message": "Parameter '_to' of ClaimsToken.transfer (ClaimsToken.sol#373) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 373,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction transfer(address _to, uint256 _value)\n",
          "message": "Parameter '_value' of ClaimsToken.transfer (ClaimsToken.sol#373) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 392,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction transferFrom(address _from, address _to, uint256 _value)\n",
          "message": "Parameter '_from' of ClaimsToken.transferFrom (ClaimsToken.sol#392) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 392,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction transferFrom(address _from, address _to, uint256 _value)\n",
          "message": "Parameter '_to' of ClaimsToken.transferFrom (ClaimsToken.sol#392) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 392,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction transferFrom(address _from, address _to, uint256 _value)\n",
          "message": "Parameter '_value' of ClaimsToken.transferFrom (ClaimsToken.sol#392) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 357,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tconstructor(address _owner)\n",
          "message": "Parameter '_owner' of ClaimsToken. (ClaimsToken.sol#357) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 432,
          "vulnerability_to_line": 436,
          "vulnerability_code": "\tfunction _registerFunds(uint256 _value)\n\n\t\tinternal\n\n\t{\n\n\t\treceivedFunds = receivedFunds.add(_value);\n",
          "message": "Function 'ClaimsToken._registerFunds' (ClaimsToken.sol#432-436) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 432,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction _registerFunds(uint256 _value)\n",
          "message": "Parameter '_value' of ClaimsToken._registerFunds (ClaimsToken.sol#432) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 442,
          "vulnerability_to_line": 449,
          "vulnerability_code": "\tfunction _calcUnprocessedFunds(address _forAddress)\n\n\t\tinternal\n\n\t\tview\n\n\t\treturns (uint256)\n\n\t{\n\n\t\tuint256 newReceivedFunds = receivedFunds.sub(processedFunds[_forAddress]);\n\n\t\treturn balanceOf(_forAddress).mul(newReceivedFunds).div(totalSupply());\n",
          "message": "Function 'ClaimsToken._calcUnprocessedFunds' (ClaimsToken.sol#442-449) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 442,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction _calcUnprocessedFunds(address _forAddress)\n",
          "message": "Parameter '_forAddress' of ClaimsToken._calcUnprocessedFunds (ClaimsToken.sol#442) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 455,
          "vulnerability_to_line": 460,
          "vulnerability_code": "\tfunction _claimFunds(address _forAddress) internal {\n\n\t\tuint256 unprocessedFunds = _calcUnprocessedFunds(_forAddress);\n\n\n\n\t\tprocessedFunds[_forAddress] = receivedFunds;\n\n\t\tclaimedFunds[_forAddress] = claimedFunds[_forAddress].add(unprocessedFunds);\n",
          "message": "Function 'ClaimsToken._claimFunds' (ClaimsToken.sol#455-460) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 455,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction _claimFunds(address _forAddress) internal {\n",
          "message": "Parameter '_forAddress' of ClaimsToken._claimFunds (ClaimsToken.sol#455) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 468,
          "vulnerability_to_line": 478,
          "vulnerability_code": "\tfunction _prepareWithdraw()\n\n\t\tinternal\n\n\t\treturns (uint256)\n\n\t{\n\n\t\tuint256 withdrawableFunds = availableFunds(msg.sender);\n\n\n\n\t\tprocessedFunds[msg.sender] = receivedFunds;\n\n\t\tclaimedFunds[msg.sender] = 0;\n\n\n\n\t\treturn withdrawableFunds;\n",
          "message": "Function 'ClaimsToken._prepareWithdraw' (ClaimsToken.sol#468-478) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 491,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tconstructor(address _owner, IERC20 _fundsToken)\n",
          "message": "Parameter '_fundsToken' of ClaimsTokenERC20Extension. (ClaimsToken.sol#491) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 520,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction tokenFallback(address _sender, uint256 _value, bytes memory)\n",
          "message": "Parameter '_sender' of ClaimsTokenERC20Extension.tokenFallback (ClaimsToken.sol#520) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 520,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction tokenFallback(address _sender, uint256 _value, bytes memory)\n",
          "message": "Parameter '_value' of ClaimsTokenERC20Extension.tokenFallback (ClaimsToken.sol#520) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 520,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction tokenFallback(address _sender, uint256 _value, bytes memory)\n",
          "message": "Parameter '' of ClaimsTokenERC20Extension.tokenFallback (ClaimsToken.sol#520) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 133,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address spender, uint256 value) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_MSGVALUE_EQUALS_ZERO",
          "vulnerability_from_line": 507,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\trequire(msg.value == 0, \"\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 255,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => uint256) private _balances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => mapping (address => uint256)) private _allowed;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _totalSupply;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 263,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private _name;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 264,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private _symbol;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 265,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 private _decimals;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 347,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tusing SafeMath for uint256;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}