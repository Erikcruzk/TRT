{
  "smartbugs_completed": "No vulnerabilities found",
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(STANDARD_ERROR_SELECTOR, bytes(message));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(UINT256_BINOP_ERROR_SELECTOR, errorCode, a, b);\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(UINT256_DOWNCAST_ERROR_SELECTOR, errorCode, a);\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 176,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 177,
          "vulnerability_to_line": null,
          "vulnerability_code": "            ROUNDING_ERROR_SELECTOR,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 178,
          "vulnerability_to_line": null,
          "vulnerability_code": "            numerator,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 179,
          "vulnerability_to_line": null,
          "vulnerability_code": "            denominator,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 180,
          "vulnerability_to_line": null,
          "vulnerability_code": "            target\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 181,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_15"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": 42,
          "vulnerability_code": "    function rrevert(bytes memory errorData) internal pure {\n\n        assembly {\n\n            revert(add(errorData, 0x20), mload(errorData))\n\n        }\n",
          "message": "LibRichErrors.rrevert (TestLibMath.sol#38-42) is declared view but contains assembly code\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": 42,
          "vulnerability_code": "    function rrevert(bytes memory errorData) internal pure {\n\n        assembly {\n\n            revert(add(errorData, 0x20), mload(errorData))\n\n        }\n",
          "message": "LibRichErrors.rrevert uses assembly (TestLibMath.sol#38-42)\n\t- TestLibMath.sol#39-41\n"
        },
        {
          "name": "pragma",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": "Different versions of Solidity is used in TestLibMath.sol:\n\t- Version used: ['ABIEncoderV2', '^0.5.9']\n\t- TestLibMath.sol#21 declares pragma solidity^0.5.9\n\t- TestLibMath.sol#47 declares pragma solidity^0.5.9\n\t- TestLibMath.sol#80 declares pragma solidity^0.5.9\n\t- TestLibMath.sol#145 declares pragma solidity^0.5.9\n\t- TestLibMath.sol#205 declares pragma solidity^0.5.9\n\t- TestLibMath.sol#433 declares pragma solidity^0.5.9\n\t- TestLibMath.sol#434 declares pragma experimentalABIEncoderV2\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 444,
          "vulnerability_to_line": 454,
          "vulnerability_code": "    function safeGetPartialAmountFloor(\n\n        uint256 numerator,\n\n        uint256 denominator,\n\n        uint256 target\n\n    )\n\n        public\n\n        pure\n\n        returns (uint256 partialAmount)\n\n    {\n\n        return LibMath.safeGetPartialAmountFloor(numerator, denominator, target);\n",
          "message": "TestLibMath.safeGetPartialAmountFloor (TestLibMath.sol#444-454) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 462,
          "vulnerability_to_line": 472,
          "vulnerability_code": "    function safeGetPartialAmountCeil(\n\n        uint256 numerator,\n\n        uint256 denominator,\n\n        uint256 target\n\n    )\n\n        public\n\n        pure\n\n        returns (uint256 partialAmount)\n\n    {\n\n        return LibMath.safeGetPartialAmountCeil(numerator, denominator, target);\n",
          "message": "TestLibMath.safeGetPartialAmountCeil (TestLibMath.sol#462-472) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 479,
          "vulnerability_to_line": 489,
          "vulnerability_code": "    function getPartialAmountFloor(\n\n        uint256 numerator,\n\n        uint256 denominator,\n\n        uint256 target\n\n    )\n\n        public\n\n        pure\n\n        returns (uint256 partialAmount)\n\n    {\n\n        return LibMath.getPartialAmountFloor(numerator, denominator, target);\n",
          "message": "TestLibMath.getPartialAmountFloor (TestLibMath.sol#479-489) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 496,
          "vulnerability_to_line": 506,
          "vulnerability_code": "    function getPartialAmountCeil(\n\n        uint256 numerator,\n\n        uint256 denominator,\n\n        uint256 target\n\n    )\n\n        public\n\n        pure\n\n        returns (uint256 partialAmount)\n\n    {\n\n        return LibMath.getPartialAmountCeil(numerator, denominator, target);\n",
          "message": "TestLibMath.getPartialAmountCeil (TestLibMath.sol#496-506) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 513,
          "vulnerability_to_line": 523,
          "vulnerability_code": "    function isRoundingErrorFloor(\n\n        uint256 numerator,\n\n        uint256 denominator,\n\n        uint256 target\n\n    )\n\n        public\n\n        pure\n\n        returns (bool isError)\n\n    {\n\n        return LibMath.isRoundingErrorFloor(numerator, denominator, target);\n",
          "message": "TestLibMath.isRoundingErrorFloor (TestLibMath.sol#513-523) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 530,
          "vulnerability_to_line": 540,
          "vulnerability_code": "    function isRoundingErrorCeil(\n\n        uint256 numerator,\n\n        uint256 denominator,\n\n        uint256 target\n\n    )\n\n        public\n\n        pure\n\n        returns (bool isError)\n\n    {\n\n        return LibMath.isRoundingErrorCeil(numerator, denominator, target);\n",
          "message": "TestLibMath.isRoundingErrorCeil (TestLibMath.sol#530-540) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": "Detected issues with version pragma in TestLibMath.sol:\n\t- pragma solidity^0.5.9 (TestLibMath.sol#21): it allows old versions\n\t- pragma solidity^0.5.9 (TestLibMath.sol#47): it allows old versions\n\t- pragma solidity^0.5.9 (TestLibMath.sol#80): it allows old versions\n\t- pragma solidity^0.5.9 (TestLibMath.sol#145): it allows old versions\n\t- pragma solidity^0.5.9 (TestLibMath.sol#205): it allows old versions\n\t- pragma solidity^0.5.9 (TestLibMath.sol#433): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": 34,
          "vulnerability_code": "    function StandardError(string memory message) internal pure returns (bytes memory) {\n\n        return abi.encodeWithSelector(STANDARD_ERROR_SELECTOR, bytes(message));\n",
          "message": "Function 'LibRichErrors.StandardError' (TestLibMath.sol#32-34) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": 71,
          "vulnerability_code": "    function Uint256BinOpError(BinOpErrorCodes errorCode, uint256 a, uint256 b) internal pure returns (bytes memory) {\n\n        return abi.encodeWithSelector(UINT256_BINOP_ERROR_SELECTOR, errorCode, a, b);\n",
          "message": "Function 'LibSafeMathRichErrors.Uint256BinOpError' (TestLibMath.sol#69-71) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": 75,
          "vulnerability_code": "    function Uint256DowncastError(DowncastErrorCodes errorCode, uint256 a) internal pure returns (bytes memory) {\n\n        return abi.encodeWithSelector(UINT256_DOWNCAST_ERROR_SELECTOR, errorCode, a);\n",
          "message": "Function 'LibSafeMathRichErrors.Uint256DowncastError' (TestLibMath.sol#73-75) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 159,
          "vulnerability_to_line": 165,
          "vulnerability_code": "    function DivisionByZeroError()\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        return DIVISION_BY_ZERO_ERROR;\n",
          "message": "Function 'LibMathRichErrors.DivisionByZeroError' (TestLibMath.sol#159-165) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 167,
          "vulnerability_to_line": 182,
          "vulnerability_code": "    function RoundingError(\n\n        uint256 numerator,\n\n        uint256 denominator,\n\n        uint256 target\n\n    )\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        return abi.encodeWithSelector(\n\n            ROUNDING_ERROR_SELECTOR,\n\n            numerator,\n\n            denominator,\n\n            target\n\n        );\n",
          "message": "Function 'LibMathRichErrors.RoundingError' (TestLibMath.sol#167-182) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR = 0xe946c1bb;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR = 0xc996af7b;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 156,
          "vulnerability_to_line": null,
          "vulnerability_code": "        0x339f3de2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 145,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 433,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function rrevert(bytes memory errorData) internal pure {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}