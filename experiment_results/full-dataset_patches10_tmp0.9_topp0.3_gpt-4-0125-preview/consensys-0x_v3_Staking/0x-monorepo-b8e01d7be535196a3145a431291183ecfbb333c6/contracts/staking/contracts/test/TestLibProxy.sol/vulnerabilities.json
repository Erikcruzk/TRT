{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(STANDARD_ERROR_SELECTOR, bytes(message));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 304,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 305,
          "vulnerability_to_line": null,
          "vulnerability_code": "            ONLY_CALLABLE_BY_EXCHANGE_ERROR_SELECTOR,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 306,
          "vulnerability_to_line": null,
          "vulnerability_code": "            senderAddress\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 307,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 318,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 319,
          "vulnerability_to_line": null,
          "vulnerability_code": "            EXCHANGE_MANAGER_ERROR_SELECTOR,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": null,
          "vulnerability_code": "            errorCodes,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 321,
          "vulnerability_to_line": null,
          "vulnerability_code": "            exchangeAddress\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 322,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 333,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 334,
          "vulnerability_to_line": null,
          "vulnerability_code": "            INSUFFICIENT_BALANCE_ERROR_SELECTOR,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 335,
          "vulnerability_to_line": null,
          "vulnerability_code": "            amount,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 336,
          "vulnerability_to_line": null,
          "vulnerability_code": "            balance\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 337,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 348,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 349,
          "vulnerability_to_line": null,
          "vulnerability_code": "            ONLY_CALLABLE_BY_POOL_OPERATOR_OR_MAKER_ERROR_SELECTOR,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 350,
          "vulnerability_to_line": null,
          "vulnerability_code": "            senderAddress,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 351,
          "vulnerability_to_line": null,
          "vulnerability_code": "            poolId\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 352,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 364,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 365,
          "vulnerability_to_line": null,
          "vulnerability_code": "            MAKER_POOL_ASSIGNMENT_ERROR_SELECTOR,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 366,
          "vulnerability_to_line": null,
          "vulnerability_code": "            errorCodes,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 367,
          "vulnerability_to_line": null,
          "vulnerability_code": "            makerAddress,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 368,
          "vulnerability_to_line": null,
          "vulnerability_code": "            poolId\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 369,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 380,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 381,
          "vulnerability_to_line": null,
          "vulnerability_code": "            BLOCK_TIMESTAMP_TOO_LOW_ERROR_SELECTOR,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 382,
          "vulnerability_to_line": null,
          "vulnerability_code": "            epochEndTime,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 383,
          "vulnerability_to_line": null,
          "vulnerability_code": "            currentBlockTimestamp\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 384,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 394,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 395,
          "vulnerability_to_line": null,
          "vulnerability_code": "            ONLY_CALLABLE_BY_STAKING_CONTRACT_ERROR_SELECTOR,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 396,
          "vulnerability_to_line": null,
          "vulnerability_code": "            senderAddress\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 397,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 425,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 426,
          "vulnerability_to_line": null,
          "vulnerability_code": "            OPERATOR_SHARE_ERROR_SELECTOR,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 427,
          "vulnerability_to_line": null,
          "vulnerability_code": "            errorCodes,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 428,
          "vulnerability_to_line": null,
          "vulnerability_code": "            poolId,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 429,
          "vulnerability_to_line": null,
          "vulnerability_code": "            operatorShare\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 430,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 441,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 442,
          "vulnerability_to_line": null,
          "vulnerability_code": "            POOL_EXISTENCE_ERROR_SELECTOR,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 443,
          "vulnerability_to_line": null,
          "vulnerability_code": "            poolId,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 444,
          "vulnerability_to_line": null,
          "vulnerability_code": "            alreadyExists\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 445,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 457,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 458,
          "vulnerability_to_line": null,
          "vulnerability_code": "            INVALID_PROTOCOL_FEE_PAYMENT_ERROR_SELECTOR,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 459,
          "vulnerability_to_line": null,
          "vulnerability_code": "            errorCodes,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 460,
          "vulnerability_to_line": null,
          "vulnerability_code": "            expectedProtocolFeePaid,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 461,
          "vulnerability_to_line": null,
          "vulnerability_code": "            actualProtocolFeePaid\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 462,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 470,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 471,
          "vulnerability_to_line": null,
          "vulnerability_code": "            INVALID_STAKE_STATUS_ERROR_SELECTOR,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 472,
          "vulnerability_to_line": null,
          "vulnerability_code": "            status\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 473,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 481,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 482,
          "vulnerability_to_line": null,
          "vulnerability_code": "            INITIALIZATION_ERROR_SELECTOR,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 483,
          "vulnerability_to_line": null,
          "vulnerability_code": "            uint8(code)\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 484,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 492,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 493,
          "vulnerability_to_line": null,
          "vulnerability_code": "            INVALID_PARAM_VALUE_ERROR_SELECTOR,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 494,
          "vulnerability_to_line": null,
          "vulnerability_code": "            uint8(code)\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 495,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 514,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 515,
          "vulnerability_to_line": null,
          "vulnerability_code": "            PREVIOUS_EPOCH_NOT_FINALIZED_ERROR_SELECTOR,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 516,
          "vulnerability_to_line": null,
          "vulnerability_code": "            unfinalizedEpoch,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 517,
          "vulnerability_to_line": null,
          "vulnerability_code": "            unfinalizedPoolsRemaining\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 518,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_25"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": 42,
          "vulnerability_code": "    function rrevert(bytes memory errorData) internal pure {\n\n        assembly {\n\n            revert(add(errorData, 0x20), mload(errorData))\n\n        }\n",
          "message": "LibRichErrors.rrevert (TestLibProxy.sol#38-42) is declared view but contains assembly code\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": 42,
          "vulnerability_code": "    function rrevert(bytes memory errorData) internal pure {\n\n        assembly {\n\n            revert(add(errorData, 0x20), mload(errorData))\n\n        }\n",
          "message": "LibRichErrors.rrevert uses assembly (TestLibProxy.sol#38-42)\n\t- TestLibProxy.sol#39-41\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 558,
          "vulnerability_to_line": 631,
          "vulnerability_code": "    function proxyCall(\n\n        address destination,\n\n        RevertRule revertRule,\n\n        bytes4 customEgressSelector,\n\n        bool ignoreIngressSelector\n\n    )\n\n        internal\n\n    {\n\n        if (destination == address(0)) {\n\n            LibRichErrors.rrevert(\n\n                LibStakingRichErrors.ProxyDestinationCannotBeNilError()\n\n            );\n\n        }\n\n\n\n        assembly {\n\n            // store selector of destination function\n\n            let freeMemPtr := 0\n\n            if gt(customEgressSelector, 0) {\n\n                mstore(0x0, customEgressSelector)\n\n                freeMemPtr := add(freeMemPtr, 4)\n\n            }\n\n\n\n            // adjust the calldata offset, if we should ignore the selector\n\n            let calldataOffset := 0\n\n            if gt(ignoreIngressSelector, 0) {\n\n                calldataOffset := 4\n\n            }\n\n\n\n            // copy calldata to memory\n\n            calldatacopy(\n\n                freeMemPtr,\n\n                calldataOffset,\n\n                calldatasize()\n\n            )\n\n            freeMemPtr := add(\n\n                freeMemPtr,\n\n                sub(calldatasize(), calldataOffset)\n\n            )\n\n\n\n            // delegate call into staking contract\n\n            let success := delegatecall(\n\n                gas,                        // forward all gas\n\n                destination,                // calling staking contract\n\n                0x0,                        // start of input (calldata)\n\n                freeMemPtr,                 // length of input (calldata)\n\n                0x0,                        // write output over input\n\n                0                           // length of output is unknown\n\n            )\n\n\n\n            // copy return data to memory and *return*\n\n            returndatacopy(\n\n                0x0,\n\n                0x0,\n\n                returndatasize()\n\n            )\n\n\n\n            switch revertRule\n\n            case 1 {    // ALWAYS_REVERT\n\n                revert(0, returndatasize())\n\n            }\n\n            case 2 {    // NEVER_REVERT\n\n                return(0, returndatasize())\n\n            }\n\n            // solhint-disable no-empty-blocks\n\n            default {} // REVERT_ON_ERROR (handled below)\n\n\n\n            // rethrow any exceptions\n\n            if iszero(success) {\n\n                revert(0, returndatasize())\n\n            }\n\n            // return call results\n\n            return(0, returndatasize())\n\n        }\n",
          "message": "LibProxy.proxyCall uses assembly (TestLibProxy.sol#558-631)\n\t- TestLibProxy.sol#572-630\n"
        },
        {
          "name": "pragma",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": "Different versions of Solidity is used in TestLibProxy.sol:\n\t- Version used: ['ABIEncoderV2', '^0.5.9']\n\t- TestLibProxy.sol#21 declares pragma solidity^0.5.9\n\t- TestLibProxy.sol#65 declares pragma solidity^0.5.9\n\t- TestLibProxy.sol#188 declares pragma solidity^0.5.9\n\t- TestLibProxy.sol#542 declares pragma solidity^0.5.9\n\t- TestLibProxy.sol#663 declares pragma solidity^0.5.9\n\t- TestLibProxy.sol#664 declares pragma experimentalABIEncoderV2\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 699,
          "vulnerability_to_line": 705,
          "vulnerability_code": "    function publicProxyCall(ProxyCallArguments memory args, bytes memory data)\n\n        public\n\n        returns (bool success, bytes memory returnData)\n\n    {\n\n        proxyCallArgs = args;\n\n        (success, returnData) = address(this).call(data);\n",
          "message": "TestLibProxy.publicProxyCall (TestLibProxy.sol#699-705) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": "Detected issues with version pragma in TestLibProxy.sol:\n\t- pragma solidity^0.5.9 (TestLibProxy.sol#21): it allows old versions\n\t- pragma solidity^0.5.9 (TestLibProxy.sol#65): it allows old versions\n\t- pragma solidity^0.5.9 (TestLibProxy.sol#188): it allows old versions\n\t- pragma solidity^0.5.9 (TestLibProxy.sol#542): it allows old versions\n\t- pragma solidity^0.5.9 (TestLibProxy.sol#663): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 699,
          "vulnerability_to_line": 705,
          "vulnerability_code": "    function publicProxyCall(ProxyCallArguments memory args, bytes memory data)\n\n        public\n\n        returns (bool success, bytes memory returnData)\n\n    {\n\n        proxyCallArgs = args;\n\n        (success, returnData) = address(this).call(data);\n",
          "message": "Low level call in TestLibProxy.publicProxyCall (TestLibProxy.sol#699-705):\n\t-(success,returnData) = address(this).call(data) TestLibProxy.sol#704\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": 34,
          "vulnerability_code": "    function StandardError(string memory message) internal pure returns (bytes memory) {\n\n        return abi.encodeWithSelector(STANDARD_ERROR_SELECTOR, bytes(message));\n",
          "message": "Function 'LibRichErrors.StandardError' (TestLibProxy.sol#32-34) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 297,
          "vulnerability_to_line": 308,
          "vulnerability_code": "    function OnlyCallableByExchangeError(\n\n        address senderAddress\n\n    )\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        return abi.encodeWithSelector(\n\n            ONLY_CALLABLE_BY_EXCHANGE_ERROR_SELECTOR,\n\n            senderAddress\n\n        );\n",
          "message": "Function 'LibStakingRichErrors.OnlyCallableByExchangeError' (TestLibProxy.sol#297-308) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 310,
          "vulnerability_to_line": 323,
          "vulnerability_code": "    function ExchangeManagerError(\n\n        ExchangeManagerErrorCodes errorCodes,\n\n        address exchangeAddress\n\n    )\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        return abi.encodeWithSelector(\n\n            EXCHANGE_MANAGER_ERROR_SELECTOR,\n\n            errorCodes,\n\n            exchangeAddress\n\n        );\n",
          "message": "Function 'LibStakingRichErrors.ExchangeManagerError' (TestLibProxy.sol#310-323) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 325,
          "vulnerability_to_line": 338,
          "vulnerability_code": "    function InsufficientBalanceError(\n\n        uint256 amount,\n\n        uint256 balance\n\n    )\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        return abi.encodeWithSelector(\n\n            INSUFFICIENT_BALANCE_ERROR_SELECTOR,\n\n            amount,\n\n            balance\n\n        );\n",
          "message": "Function 'LibStakingRichErrors.InsufficientBalanceError' (TestLibProxy.sol#325-338) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 340,
          "vulnerability_to_line": 353,
          "vulnerability_code": "    function OnlyCallableByPoolOperatorOrMakerError(\n\n        address senderAddress,\n\n        bytes32 poolId\n\n    )\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        return abi.encodeWithSelector(\n\n            ONLY_CALLABLE_BY_POOL_OPERATOR_OR_MAKER_ERROR_SELECTOR,\n\n            senderAddress,\n\n            poolId\n\n        );\n",
          "message": "Function 'LibStakingRichErrors.OnlyCallableByPoolOperatorOrMakerError' (TestLibProxy.sol#340-353) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 355,
          "vulnerability_to_line": 370,
          "vulnerability_code": "    function MakerPoolAssignmentError(\n\n        MakerPoolAssignmentErrorCodes errorCodes,\n\n        address makerAddress,\n\n        bytes32 poolId\n\n    )\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        return abi.encodeWithSelector(\n\n            MAKER_POOL_ASSIGNMENT_ERROR_SELECTOR,\n\n            errorCodes,\n\n            makerAddress,\n\n            poolId\n\n        );\n",
          "message": "Function 'LibStakingRichErrors.MakerPoolAssignmentError' (TestLibProxy.sol#355-370) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 372,
          "vulnerability_to_line": 385,
          "vulnerability_code": "    function BlockTimestampTooLowError(\n\n        uint256 epochEndTime,\n\n        uint256 currentBlockTimestamp\n\n    )\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        return abi.encodeWithSelector(\n\n            BLOCK_TIMESTAMP_TOO_LOW_ERROR_SELECTOR,\n\n            epochEndTime,\n\n            currentBlockTimestamp\n\n        );\n",
          "message": "Function 'LibStakingRichErrors.BlockTimestampTooLowError' (TestLibProxy.sol#372-385) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 387,
          "vulnerability_to_line": 398,
          "vulnerability_code": "    function OnlyCallableByStakingContractError(\n\n        address senderAddress\n\n    )\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        return abi.encodeWithSelector(\n\n            ONLY_CALLABLE_BY_STAKING_CONTRACT_ERROR_SELECTOR,\n\n            senderAddress\n\n        );\n",
          "message": "Function 'LibStakingRichErrors.OnlyCallableByStakingContractError' (TestLibProxy.sol#387-398) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 400,
          "vulnerability_to_line": 406,
          "vulnerability_code": "    function OnlyCallableIfInCatastrophicFailureError()\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        return ONLY_CALLABLE_IF_IN_CATASTROPHIC_FAILURE_ERROR;\n",
          "message": "Function 'LibStakingRichErrors.OnlyCallableIfInCatastrophicFailureError' (TestLibProxy.sol#400-406) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 408,
          "vulnerability_to_line": 414,
          "vulnerability_code": "    function OnlyCallableIfNotInCatastrophicFailureError()\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        return ONLY_CALLABLE_IF_NOT_IN_CATASTROPHIC_FAILURE_ERROR;\n",
          "message": "Function 'LibStakingRichErrors.OnlyCallableIfNotInCatastrophicFailureError' (TestLibProxy.sol#408-414) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 416,
          "vulnerability_to_line": 431,
          "vulnerability_code": "    function OperatorShareError(\n\n        OperatorShareErrorCodes errorCodes,\n\n        bytes32 poolId,\n\n        uint32 operatorShare\n\n    )\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        return abi.encodeWithSelector(\n\n            OPERATOR_SHARE_ERROR_SELECTOR,\n\n            errorCodes,\n\n            poolId,\n\n            operatorShare\n\n        );\n",
          "message": "Function 'LibStakingRichErrors.OperatorShareError' (TestLibProxy.sol#416-431) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 433,
          "vulnerability_to_line": 446,
          "vulnerability_code": "    function PoolExistenceError(\n\n        bytes32 poolId,\n\n        bool alreadyExists\n\n    )\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        return abi.encodeWithSelector(\n\n            POOL_EXISTENCE_ERROR_SELECTOR,\n\n            poolId,\n\n            alreadyExists\n\n        );\n",
          "message": "Function 'LibStakingRichErrors.PoolExistenceError' (TestLibProxy.sol#433-446) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 448,
          "vulnerability_to_line": 463,
          "vulnerability_code": "    function InvalidProtocolFeePaymentError(\n\n        ProtocolFeePaymentErrorCodes errorCodes,\n\n        uint256 expectedProtocolFeePaid,\n\n        uint256 actualProtocolFeePaid\n\n    )\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        return abi.encodeWithSelector(\n\n            INVALID_PROTOCOL_FEE_PAYMENT_ERROR_SELECTOR,\n\n            errorCodes,\n\n            expectedProtocolFeePaid,\n\n            actualProtocolFeePaid\n\n        );\n",
          "message": "Function 'LibStakingRichErrors.InvalidProtocolFeePaymentError' (TestLibProxy.sol#448-463) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 465,
          "vulnerability_to_line": 474,
          "vulnerability_code": "    function InvalidStakeStatusError(IStructs.StakeStatus status)\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        return abi.encodeWithSelector(\n\n            INVALID_STAKE_STATUS_ERROR_SELECTOR,\n\n            status\n\n        );\n",
          "message": "Function 'LibStakingRichErrors.InvalidStakeStatusError' (TestLibProxy.sol#465-474) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 476,
          "vulnerability_to_line": 485,
          "vulnerability_code": "    function InitializationError(InitializationErrorCodes code)\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        return abi.encodeWithSelector(\n\n            INITIALIZATION_ERROR_SELECTOR,\n\n            uint8(code)\n\n        );\n",
          "message": "Function 'LibStakingRichErrors.InitializationError' (TestLibProxy.sol#476-485) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 487,
          "vulnerability_to_line": 496,
          "vulnerability_code": "    function InvalidParamValueError(InvalidParamValueErrorCodes code)\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        return abi.encodeWithSelector(\n\n            INVALID_PARAM_VALUE_ERROR_SELECTOR,\n\n            uint8(code)\n\n        );\n",
          "message": "Function 'LibStakingRichErrors.InvalidParamValueError' (TestLibProxy.sol#487-496) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 498,
          "vulnerability_to_line": 504,
          "vulnerability_code": "    function ProxyDestinationCannotBeNilError()\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        return PROXY_DESTINATION_CANNOT_BE_NIL_ERROR;\n",
          "message": "Function 'LibStakingRichErrors.ProxyDestinationCannotBeNilError' (TestLibProxy.sol#498-504) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 506,
          "vulnerability_to_line": 519,
          "vulnerability_code": "    function PreviousEpochNotFinalizedError(\n\n        uint256 unfinalizedEpoch,\n\n        uint256 unfinalizedPoolsRemaining\n\n    )\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        return abi.encodeWithSelector(\n\n            PREVIOUS_EPOCH_NOT_FINALIZED_ERROR_SELECTOR,\n\n            unfinalizedEpoch,\n\n            unfinalizedPoolsRemaining\n\n        );\n",
          "message": "Function 'LibStakingRichErrors.PreviousEpochNotFinalizedError' (TestLibProxy.sol#506-519) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 230,
          "vulnerability_to_line": null,
          "vulnerability_code": "        0xb56d2df0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 234,
          "vulnerability_to_line": null,
          "vulnerability_code": "        0xb9588e43;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 238,
          "vulnerability_to_line": null,
          "vulnerability_code": "        0x84c8b7c9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 242,
          "vulnerability_to_line": null,
          "vulnerability_code": "        0x7677eb13;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 246,
          "vulnerability_to_line": null,
          "vulnerability_code": "        0x69945e3f;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 250,
          "vulnerability_to_line": null,
          "vulnerability_code": "        0xa6bcde47;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 254,
          "vulnerability_to_line": null,
          "vulnerability_code": "        0xca1d07a2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 266,
          "vulnerability_to_line": null,
          "vulnerability_code": "        0x22df9597;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 270,
          "vulnerability_to_line": null,
          "vulnerability_code": "        0x9ae94f01;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 274,
          "vulnerability_to_line": null,
          "vulnerability_code": "        0x7cf20260;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 282,
          "vulnerability_to_line": null,
          "vulnerability_code": "        0x0b02d773;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 286,
          "vulnerability_to_line": null,
          "vulnerability_code": "        0xfc45bd11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 290,
          "vulnerability_to_line": null,
          "vulnerability_code": "        0xefd6cb33;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": "        0x614b800a;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 188,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 542,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 663,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function rrevert(bytes memory errorData) internal pure {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 701,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns (bool success, bytes memory returnData)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 704,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (success, returnData) = address(this).call(data);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 572,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "Traceback (most recent call last):\n  File \"/usr/local/lib/python3"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}