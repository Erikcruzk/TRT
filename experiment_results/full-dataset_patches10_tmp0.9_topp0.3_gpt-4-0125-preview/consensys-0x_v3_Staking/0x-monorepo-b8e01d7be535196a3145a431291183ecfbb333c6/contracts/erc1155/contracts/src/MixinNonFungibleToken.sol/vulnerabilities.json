{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_9"
      ],
      "vulnerability_findings": [
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (uint256 => address) internal nfOwners;\n",
          "message": "MixinNonFungibleToken.nfOwners (MixinNonFungibleToken.sol#36) is never initialized. It is used in:\n\t- ownerOf (MixinNonFungibleToken.sol#71-73)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": 41,
          "vulnerability_code": "    function isNonFungible(uint256 id) public pure returns(bool) {\n\n        return id & TYPE_NF_BIT == TYPE_NF_BIT;\n",
          "message": "MixinNonFungibleToken.isNonFungible (MixinNonFungibleToken.sol#39-41) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": 46,
          "vulnerability_code": "    function isFungible(uint256 id) public pure returns(bool) {\n\n        return id & TYPE_NF_BIT == 0;\n",
          "message": "MixinNonFungibleToken.isFungible (MixinNonFungibleToken.sol#44-46) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": 51,
          "vulnerability_code": "    function getNonFungibleIndex(uint256 id) public pure returns(uint256) {\n\n        return id & NF_INDEX_MASK;\n",
          "message": "MixinNonFungibleToken.getNonFungibleIndex (MixinNonFungibleToken.sol#49-51) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": 56,
          "vulnerability_code": "    function getNonFungibleBaseType(uint256 id) public pure returns(uint256) {\n\n        return id & TYPE_MASK;\n",
          "message": "MixinNonFungibleToken.getNonFungibleBaseType (MixinNonFungibleToken.sol#54-56) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": 62,
          "vulnerability_code": "    function isNonFungibleBaseType(uint256 id) public pure returns(bool) {\n\n        // A base type has the NF bit but does not have an index.\n\n        return (id & TYPE_NF_BIT == TYPE_NF_BIT) && (id & NF_INDEX_MASK == 0);\n",
          "message": "MixinNonFungibleToken.isNonFungibleBaseType (MixinNonFungibleToken.sol#59-62) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": 68,
          "vulnerability_code": "    function isNonFungibleItem(uint256 id) public pure returns(bool) {\n\n        // A base type has the NF bit but does has an index.\n\n        return (id & TYPE_NF_BIT == TYPE_NF_BIT) && (id & NF_INDEX_MASK != 0);\n",
          "message": "MixinNonFungibleToken.isNonFungibleItem (MixinNonFungibleToken.sol#65-68) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": 73,
          "vulnerability_code": "    function ownerOf(uint256 id) public view returns (address) {\n\n        return nfOwners[id];\n",
          "message": "MixinNonFungibleToken.ownerOf (MixinNonFungibleToken.sol#71-73) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": "Detected issues with version pragma in MixinNonFungibleToken.sol:\n\t- pragma solidity^0.5.9 (MixinNonFungibleToken.sol#21): it allows old versions\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}