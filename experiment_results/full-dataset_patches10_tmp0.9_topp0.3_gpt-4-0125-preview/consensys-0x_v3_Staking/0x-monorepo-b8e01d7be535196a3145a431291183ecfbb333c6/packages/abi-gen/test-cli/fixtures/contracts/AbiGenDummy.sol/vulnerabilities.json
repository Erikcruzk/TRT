{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "inefficient-state-variable-increment",
          "vulnerability_from_line": 165,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function nonPureMethod() public returns(uint) { return someState += 1; }\n",
          "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
        },
        {
          "name": "inefficient-state-variable-increment",
          "vulnerability_from_line": 166,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function nonPureMethodThatReturnsNothing() public { someState += 1; }\n",
          "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "        revert(\"SIMPLE_REVERT\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(0 > 1, \"SIMPLE_REQUIRE\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_37"
      ],
      "vulnerability_findings": [
        {
          "name": "pragma",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma experimental ABIEncoderV2;\n",
          "message": "Different versions of Solidity is used in AbiGenDummy.sol:\n\t- Version used: ['ABIEncoderV2', '^0.5.5']\n\t- AbiGenDummy.sol#21 declares pragma experimentalABIEncoderV2\n\t- AbiGenDummy.sol#23 declares pragma solidity^0.5.5\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": 39,
          "vulnerability_code": "    function simplePureFunction ()\n\n        public\n\n        pure\n\n        returns (uint256 result)\n\n    {\n\n        return 1;\n",
          "message": "AbiGenDummy.simplePureFunction (AbiGenDummy.sol#33-39) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": 47,
          "vulnerability_code": "    function simplePureFunctionWithInput (uint256 x)\n\n        public\n\n        pure\n\n        returns (uint256 sum)\n\n    {\n\n        return 1 + x;\n",
          "message": "AbiGenDummy.simplePureFunctionWithInput (AbiGenDummy.sol#41-47) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": 55,
          "vulnerability_code": "    function pureFunctionWithConstant ()\n\n        public\n\n        pure\n\n        returns (uint256 someConstant)\n\n    {\n\n        return SOME_CONSTANT;\n",
          "message": "AbiGenDummy.pureFunctionWithConstant (AbiGenDummy.sol#49-55) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": 62,
          "vulnerability_code": "    function simpleRevert ()\n\n        public\n\n        pure\n\n    {\n\n        revert(\"SIMPLE_REVERT\");\n",
          "message": "AbiGenDummy.simpleRevert (AbiGenDummy.sol#57-62) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": 69,
          "vulnerability_code": "    function revertWithConstant ()\n\n        public\n\n        pure\n\n    {\n\n        revert(REVERT_REASON);\n",
          "message": "AbiGenDummy.revertWithConstant (AbiGenDummy.sol#64-69) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": 76,
          "vulnerability_code": "    function simpleRequire ()\n\n        public\n\n        pure\n\n    {\n\n        require(0 > 1, \"SIMPLE_REQUIRE\");\n",
          "message": "AbiGenDummy.simpleRequire (AbiGenDummy.sol#71-76) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": 83,
          "vulnerability_code": "    function requireWithConstant ()\n\n        public\n\n        pure\n\n    {\n\n        require(0 > 1, REQUIRE_REASON);\n",
          "message": "AbiGenDummy.requireWithConstant (AbiGenDummy.sol#78-83) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 92,
          "vulnerability_to_line": 100,
          "vulnerability_code": "    function ecrecoverFn(bytes32 hash, uint8 v, bytes32 r, bytes32 s)\n\n        public\n\n        pure\n\n        returns (address signerAddress)\n\n    {\n\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\n\n        bytes32 prefixedHash = keccak256(abi.encodePacked(prefix, hash));\n\n        return ecrecover(prefixedHash, v, r, s);\n",
          "message": "AbiGenDummy.ecrecoverFn (AbiGenDummy.sol#92-100) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": 110,
          "vulnerability_code": "    function withAddressInput(address x, uint256 a, uint256 b, address y, uint256 c)\n\n        public\n\n        pure\n\n        returns (address z)\n\n    {\n\n        return x;\n",
          "message": "AbiGenDummy.withAddressInput (AbiGenDummy.sol#104-110) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function acceptsBytes(bytes memory a) public pure {}\n",
          "message": "AbiGenDummy.acceptsBytes (AbiGenDummy.sol#112) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function acceptsAnArrayOfBytes(bytes[] memory a) public pure {}\n",
          "message": "AbiGenDummy.acceptsAnArrayOfBytes (AbiGenDummy.sol#116) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function structInput(Struct memory s) public pure {}\n",
          "message": "AbiGenDummy.structInput (AbiGenDummy.sol#125) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": 140,
          "vulnerability_code": "    function structOutput() public pure returns(Struct memory s) {\n\n        bytes[] memory byteArray = new bytes[](2);\n\n        byteArray[0] = \"0x123\";\n\n        byteArray[1] = \"0x321\";\n\n\n\n        return Struct({\n\n            someBytes: \"0x123\",\n\n            anInteger: 5,\n\n            aDynamicArrayOfBytes: byteArray,\n\n            aString: \"abc\"\n\n        });\n",
          "message": "AbiGenDummy.structOutput (AbiGenDummy.sol#129-140) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function methodReturningArrayOfStructs() public pure returns(Struct[] memory) {}\n",
          "message": "AbiGenDummy.methodReturningArrayOfStructs (AbiGenDummy.sol#142) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function nestedStructInput(NestedStruct memory n) public pure {}\n",
          "message": "AbiGenDummy.nestedStructInput (AbiGenDummy.sol#149) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function nestedStructOutput() public pure returns(NestedStruct memory) {}\n",
          "message": "AbiGenDummy.nestedStructOutput (AbiGenDummy.sol#150) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": 162,
          "vulnerability_code": "    function methodUsingNestedStructWithInnerStructNotUsedElsewhere()\n\n        public pure returns(NestedStructWithInnerStructNotUsedElsewhere  memory)\n",
          "message": "AbiGenDummy.methodUsingNestedStructWithInnerStructNotUsedElsewhere (AbiGenDummy.sol#160-162) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 165,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function nonPureMethod() public returns(uint) { return someState += 1; }\n",
          "message": "AbiGenDummy.nonPureMethod (AbiGenDummy.sol#165) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 166,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function nonPureMethodThatReturnsNothing() public { someState += 1; }\n",
          "message": "AbiGenDummy.nonPureMethodThatReturnsNothing (AbiGenDummy.sol#166) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 168,
          "vulnerability_to_line": 172,
          "vulnerability_code": "    function methodReturningMultipleValues()\n\n        public pure returns (uint256, string memory)\n\n    {\n\n        return (1, \"hello\");\n",
          "message": "AbiGenDummy.methodReturningMultipleValues (AbiGenDummy.sol#168-172) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 174,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function overloadedMethod(int a) public pure {}\n",
          "message": "AbiGenDummy.overloadedMethod (AbiGenDummy.sol#174) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 175,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function overloadedMethod(string memory a) public pure {}\n",
          "message": "AbiGenDummy.overloadedMethod (AbiGenDummy.sol#175) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 180,
          "vulnerability_to_line": 182,
          "vulnerability_code": "    function withdraw(uint wad) public {\n\n        emit Withdrawal(msg.sender, wad);\n",
          "message": "AbiGenDummy.withdraw (AbiGenDummy.sol#180-182) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 186,
          "vulnerability_to_line": 191,
          "vulnerability_code": "    function emitSimpleEvent() public {\n\n        emit SimpleEvent(\n\n            hex'12345678',\n\n            \"lorem\"\n\n        );\n",
          "message": "AbiGenDummy.emitSimpleEvent (AbiGenDummy.sol#186-191) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 210,
          "vulnerability_to_line": 216,
          "vulnerability_code": "    function noInputNoOutput()\n\n        public\n\n        pure\n\n    {\n\n        // NOP\n\n        require(true == true);\n",
          "message": "AbiGenDummy.noInputNoOutput (AbiGenDummy.sol#210-216) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 219,
          "vulnerability_to_line": 225,
          "vulnerability_code": "    function noInputSimpleOutput()\n\n        public\n\n        pure\n\n        returns (uint256)\n\n    {\n\n        return 1991;\n",
          "message": "AbiGenDummy.noInputSimpleOutput (AbiGenDummy.sol#219-225) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": 234,
          "vulnerability_code": "    function simpleInputNoOutput(uint256)\n\n        public\n\n        pure\n\n    {\n\n        // NOP\n\n        require(true == true);\n",
          "message": "AbiGenDummy.simpleInputNoOutput (AbiGenDummy.sol#228-234) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 237,
          "vulnerability_to_line": 243,
          "vulnerability_code": "    function simpleInputSimpleOutput(uint256)\n\n        public\n\n        pure\n\n        returns (uint256)\n\n    {\n\n        return 1991;\n",
          "message": "AbiGenDummy.simpleInputSimpleOutput (AbiGenDummy.sol#237-243) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 246,
          "vulnerability_to_line": 257,
          "vulnerability_code": "    function complexInputComplexOutput(ComplexInput memory complexInput)\n\n        public\n\n        pure\n\n        returns (ComplexOutput memory)\n\n    {\n\n        return ComplexOutput({\n\n            input: complexInput,\n\n            lorem: hex'12345678',\n\n            ipsum: hex'87654321',\n\n            dolor: \"amet\"\n\n        });\n",
          "message": "AbiGenDummy.complexInputComplexOutput (AbiGenDummy.sol#246-257) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 260,
          "vulnerability_to_line": 278,
          "vulnerability_code": "    function multiInputMultiOutput(\n\n        uint256,\n\n        bytes memory,\n\n        string memory\n\n    )\n\n        public\n\n        pure\n\n        returns (\n\n            bytes memory,\n\n            bytes memory,\n\n            string memory\n\n        )\n\n    {\n\n        return (\n\n            hex'12345678',\n\n            hex'87654321',\n\n            \"amet\"\n\n        );\n",
          "message": "AbiGenDummy.multiInputMultiOutput (AbiGenDummy.sol#260-278) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.5;\n",
          "message": "Detected issues with version pragma in AbiGenDummy.sol:\n\t- pragma solidity^0.5.5 (AbiGenDummy.sol#23): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function simpleInputNoOutput(uint256)\n",
          "message": "Parameter '' of AbiGenDummy.simpleInputNoOutput (AbiGenDummy.sol#228) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 237,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function simpleInputSimpleOutput(uint256)\n",
          "message": "Parameter '' of AbiGenDummy.simpleInputSimpleOutput (AbiGenDummy.sol#237) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 261,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256,\n",
          "message": "Parameter '' of AbiGenDummy.multiInputMultiOutput (AbiGenDummy.sol#261) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 262,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory,\n",
          "message": "Parameter '_scope_0' of AbiGenDummy.multiInputMultiOutput (AbiGenDummy.sol#262) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 263,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string memory\n",
          "message": "Parameter '_scope_1' of AbiGenDummy.multiInputMultiOutput (AbiGenDummy.sol#263) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function methodReturningArrayOfStructs() public pure returns(Struct[] memory) {}\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function nestedStructOutput() public pure returns(NestedStruct memory) {}\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function methodUsingNestedStructWithInnerStructNotUsedElsewhere()\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.5;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 169,
          "vulnerability_to_line": null,
          "vulnerability_code": "        public pure returns (uint256, string memory)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 267,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 164,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint someState;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return 1 + x;\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}