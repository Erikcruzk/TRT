{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _setGovernor(msg.sender);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit GovernorshipTransferred(address(0), _governor());\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isGovernor(), \"Caller is not the Governor\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 109,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "            msg.sender == _pendingGovernor(),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Only the pending Governor can complete the claim\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 121,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_newGovernor != address(0), \"New Governor is address(0)\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 109,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "            msg.sender == _pendingGovernor(),\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Only the pending Governor can complete the claim\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_17"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": 52,
          "vulnerability_code": "    function _governor() internal view returns (address governorOut) {\n\n        bytes32 position = governorPosition;\n\n        assembly {\n\n            governorOut := sload(position)\n\n        }\n",
          "message": "Governable._governor (Governable.sol#47-52) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": 63,
          "vulnerability_code": "    function _pendingGovernor()\n\n        internal\n\n        view\n\n        returns (address pendingGovernor)\n\n    {\n\n        bytes32 position = pendingGovernorPosition;\n\n        assembly {\n\n            pendingGovernor := sload(position)\n\n        }\n",
          "message": "Governable._pendingGovernor (Governable.sol#54-63) is declared view but contains assembly code\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": 52,
          "vulnerability_code": "    function _governor() internal view returns (address governorOut) {\n\n        bytes32 position = governorPosition;\n\n        assembly {\n\n            governorOut := sload(position)\n\n        }\n",
          "message": "Governable._governor uses assembly (Governable.sol#47-52)\n\t- Governable.sol#49-51\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": 63,
          "vulnerability_code": "    function _pendingGovernor()\n\n        internal\n\n        view\n\n        returns (address pendingGovernor)\n\n    {\n\n        bytes32 position = pendingGovernorPosition;\n\n        assembly {\n\n            pendingGovernor := sload(position)\n\n        }\n",
          "message": "Governable._pendingGovernor uses assembly (Governable.sol#54-63)\n\t- Governable.sol#60-62\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": 85,
          "vulnerability_code": "    function _setGovernor(address newGovernor) internal {\n\n        bytes32 position = governorPosition;\n\n        assembly {\n\n            sstore(position, newGovernor)\n\n        }\n",
          "message": "Governable._setGovernor uses assembly (Governable.sol#80-85)\n\t- Governable.sol#82-84\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": 92,
          "vulnerability_code": "    function _setPendingGovernor(address newGovernor) internal {\n\n        bytes32 position = pendingGovernorPosition;\n\n        assembly {\n\n            sstore(position, newGovernor)\n\n        }\n",
          "message": "Governable._setPendingGovernor uses assembly (Governable.sol#87-92)\n\t- Governable.sol#89-91\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": 45,
          "vulnerability_code": "    function governor() public view returns (address) {\n\n        return _governor();\n",
          "message": "Governable.governor (Governable.sol#43-45) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.5.11;\n",
          "message": "Detected issues with version pragma in Governable.sol:\n\t- pragma solidity0.5.11 (Governable.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": 52,
          "vulnerability_code": "    function _governor() internal view returns (address governorOut) {\n\n        bytes32 position = governorPosition;\n\n        assembly {\n\n            governorOut := sload(position)\n\n        }\n",
          "message": "Function 'Governable._governor' (Governable.sol#47-52) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": 63,
          "vulnerability_code": "    function _pendingGovernor()\n\n        internal\n\n        view\n\n        returns (address pendingGovernor)\n\n    {\n\n        bytes32 position = pendingGovernorPosition;\n\n        assembly {\n\n            pendingGovernor := sload(position)\n\n        }\n",
          "message": "Function 'Governable._pendingGovernor' (Governable.sol#54-63) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": 85,
          "vulnerability_code": "    function _setGovernor(address newGovernor) internal {\n\n        bytes32 position = governorPosition;\n\n        assembly {\n\n            sstore(position, newGovernor)\n\n        }\n",
          "message": "Function 'Governable._setGovernor' (Governable.sol#80-85) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": 92,
          "vulnerability_code": "    function _setPendingGovernor(address newGovernor) internal {\n\n        bytes32 position = pendingGovernorPosition;\n\n        assembly {\n\n            sstore(position, newGovernor)\n\n        }\n",
          "message": "Function 'Governable._setPendingGovernor' (Governable.sol#87-92) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferGovernance(address _newGovernor) external onlyGovernor {\n",
          "message": "Parameter '_newGovernor' of Governable.transferGovernance (Governable.sol#99) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 120,
          "vulnerability_to_line": 124,
          "vulnerability_code": "    function _changeGovernor(address _newGovernor) internal {\n\n        require(_newGovernor != address(0), \"New Governor is address(0)\");\n\n        emit GovernorshipTransferred(_governor(), _newGovernor);\n\n        _setGovernor(_newGovernor);\n",
          "message": "Function 'Governable._changeGovernor' (Governable.sol#120-124) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 120,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _changeGovernor(address _newGovernor) internal {\n",
          "message": "Parameter '_newGovernor' of Governable._changeGovernor (Governable.sol#120) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": 15,
          "vulnerability_code": "    bytes32\n",
          "message": "Constant 'Governable.governorPosition' (Governable.sol#14-15) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": 19,
          "vulnerability_code": "    bytes32\n",
          "message": "Constant 'Governable.pendingGovernorPosition' (Governable.sol#18-19) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _governor() internal view returns (address governorOut) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _pendingGovernor()\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "        private constant governorPosition = 0x7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "        private constant pendingGovernorPosition = 0x44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _governor() internal view returns (address governorOut) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _pendingGovernor()\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 89,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "execution failed"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "input files do not contain any valid contracts"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}