{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 163,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < proposal.targets.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < proposal.targets.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 100,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address timelock_, address guardian_) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "        timelock = ITimelock(timelock_);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "        guardian = guardian_;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 221,
          "vulnerability_to_line": null,
          "vulnerability_code": "            timelock.executeTransaction.value(proposal.values[i])(\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 163,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < proposal.targets.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < proposal.targets.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "            targets.length == values.length &&\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "                targets.length == signatures.length &&\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "                targets.length == calldatas.length,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Governor::propose: proposal function information arity mismatch\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 119,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(targets.length != 0, \"Governor::propose: must provide actions\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 120,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 121,
          "vulnerability_to_line": null,
          "vulnerability_code": "            targets.length <= MAX_OPERATIONS,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 122,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Governor::propose: too many actions\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 152,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 153,
          "vulnerability_to_line": null,
          "vulnerability_code": "            msg.sender == guardian,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 154,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Governor::queue: sender must be gov guardian\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 156,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "            state(proposalId) == ProposalState.Pending,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Governor::queue: proposal can only be queued if it is pending\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 159,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 177,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 178,
          "vulnerability_to_line": null,
          "vulnerability_code": "            proposalCount >= proposalId && proposalId > 0,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 179,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Governor::state: invalid proposal id\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 180,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 203,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 204,
          "vulnerability_to_line": null,
          "vulnerability_code": "            !timelock.queuedTransactions(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "                keccak256(abi.encode(target, value, signature, data, eta))\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 206,
          "vulnerability_to_line": null,
          "vulnerability_code": "            ),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 207,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Governor::_queueOrRevert: proposal action already queued at eta\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 208,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 214,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": null,
          "vulnerability_code": "            state(proposalId) == ProposalState.Queued,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Governor::execute: proposal can only be executed if it is queued\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 247,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 248,
          "vulnerability_to_line": null,
          "vulnerability_code": "            msg.sender == guardian,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 249,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Governor::__acceptAdmin: sender must be gov guardian\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 250,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 259,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 260,
          "vulnerability_to_line": null,
          "vulnerability_code": "            msg.sender == guardian,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 261,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Governor::__queueSetTimelockPendingAdmin: sender must be gov guardian\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 262,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 277,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": null,
          "vulnerability_code": "            msg.sender == guardian,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 279,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Governor::__executeSetTimelockPendingAdmin: sender must be gov guardian\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 280,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 292,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, \"addition overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 297,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b <= a, \"subtraction underflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "            targets.length == values.length &&\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "                targets.length == signatures.length &&\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "                targets.length == calldatas.length,\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Governor::propose: proposal function information arity mismatch\"\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 177,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 178,
          "vulnerability_to_line": null,
          "vulnerability_code": "            proposalCount >= proposalId && proposalId > 0,\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 179,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Governor::state: invalid proposal id\"\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 180,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": null,
          "vulnerability_code": "        proposalCount++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 163,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < proposal.targets.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < proposal.targets.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "            targets.length == values.length &&\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "                targets.length == signatures.length &&\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "                targets.length == calldatas.length,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Governor::propose: proposal function information arity mismatch\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 119,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(targets.length != 0, \"Governor::propose: must provide actions\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 120,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 121,
          "vulnerability_to_line": null,
          "vulnerability_code": "            targets.length <= MAX_OPERATIONS,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 122,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Governor::propose: too many actions\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 152,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 153,
          "vulnerability_to_line": null,
          "vulnerability_code": "            msg.sender == guardian,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 154,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Governor::queue: sender must be gov guardian\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 156,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "            state(proposalId) == ProposalState.Pending,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Governor::queue: proposal can only be queued if it is pending\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 159,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 177,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 178,
          "vulnerability_to_line": null,
          "vulnerability_code": "            proposalCount >= proposalId && proposalId > 0,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 179,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Governor::state: invalid proposal id\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 180,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 203,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 204,
          "vulnerability_to_line": null,
          "vulnerability_code": "            !timelock.queuedTransactions(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "                keccak256(abi.encode(target, value, signature, data, eta))\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 206,
          "vulnerability_to_line": null,
          "vulnerability_code": "            ),\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 207,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Governor::_queueOrRevert: proposal action already queued at eta\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 208,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 214,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": null,
          "vulnerability_code": "            state(proposalId) == ProposalState.Queued,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Governor::execute: proposal can only be executed if it is queued\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 247,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 248,
          "vulnerability_to_line": null,
          "vulnerability_code": "            msg.sender == guardian,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 249,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Governor::__acceptAdmin: sender must be gov guardian\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 250,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 259,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 260,
          "vulnerability_to_line": null,
          "vulnerability_code": "            msg.sender == guardian,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 261,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Governor::__queueSetTimelockPendingAdmin: sender must be gov guardian\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 262,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 277,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": null,
          "vulnerability_code": "            msg.sender == guardian,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 279,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Governor::__executeSetTimelockPendingAdmin: sender must be gov guardian\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 280,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_26"
      ],
      "vulnerability_findings": [
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 213,
          "vulnerability_to_line": 230,
          "vulnerability_code": "    function execute(uint256 proposalId) public payable {\n\n        require(\n\n            state(proposalId) == ProposalState.Queued,\n\n            \"Governor::execute: proposal can only be executed if it is queued\"\n\n        );\n\n        Proposal storage proposal = proposals[proposalId];\n\n        proposal.executed = true;\n\n        for (uint256 i = 0; i < proposal.targets.length; i++) {\n\n            timelock.executeTransaction.value(proposal.values[i])(\n\n                proposal.targets[i],\n\n                proposal.values[i],\n\n                proposal.signatures[i],\n\n                proposal.calldatas[i],\n\n                proposal.eta\n\n            );\n\n        }\n\n        emit ProposalExecuted(proposalId);\n",
          "message": "Governor.execute (Governor.sol#213-230) sends eth to arbitrary user\n\tDangerous calls:\n\t- timelock.executeTransaction.value(proposal.values[i])(proposal.targets[i],proposal.values[i],proposal.signatures[i],proposal.calldatas[i],proposal.eta) (Governor.sol#221-227)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 213,
          "vulnerability_to_line": 230,
          "vulnerability_code": "    function execute(uint256 proposalId) public payable {\n\n        require(\n\n            state(proposalId) == ProposalState.Queued,\n\n            \"Governor::execute: proposal can only be executed if it is queued\"\n\n        );\n\n        Proposal storage proposal = proposals[proposalId];\n\n        proposal.executed = true;\n\n        for (uint256 i = 0; i < proposal.targets.length; i++) {\n\n            timelock.executeTransaction.value(proposal.values[i])(\n\n                proposal.targets[i],\n\n                proposal.values[i],\n\n                proposal.signatures[i],\n\n                proposal.calldatas[i],\n\n                proposal.eta\n\n            );\n\n        }\n\n        emit ProposalExecuted(proposalId);\n",
          "message": "Reentrancy in Governor.execute (Governor.sol#213-230):\n\tExternal calls:\n\t- require(bool,string)(state(proposalId) == ProposalState.Queued,Governor::execute: proposal can only be executed if it is queued) (Governor.sol#214-217)\n\tState variables written after the call(s):\n\t- proposals (Governor.sol#219)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": 174,
          "vulnerability_code": "    function queue(uint256 proposalId) public {\n\n        require(\n\n            msg.sender == guardian,\n\n            \"Governor::queue: sender must be gov guardian\"\n\n        );\n\n        require(\n\n            state(proposalId) == ProposalState.Pending,\n\n            \"Governor::queue: proposal can only be queued if it is pending\"\n\n        );\n\n        Proposal storage proposal = proposals[proposalId];\n\n        proposal.eta = add256(block.timestamp, timelock.delay());\n\n\n\n        for (uint256 i = 0; i < proposal.targets.length; i++) {\n\n            _queueOrRevert(\n\n                proposal.targets[i],\n\n                proposal.values[i],\n\n                proposal.signatures[i],\n\n                proposal.calldatas[i],\n\n                proposal.eta\n\n            );\n\n        }\n\n\n\n        emit ProposalQueued(proposal.id, proposal.eta);\n",
          "message": "Reentrancy in Governor.queue (Governor.sol#151-174):\n\tExternal calls:\n\t- require(bool,string)(state(proposalId) == ProposalState.Pending,Governor::queue: proposal can only be queued if it is pending) (Governor.sol#156-159)\n\t- proposal.eta = add256(block.timestamp,timelock.delay()) (Governor.sol#161)\n\tState variables written after the call(s):\n\t- proposals (Governor.sol#161)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 196,
          "vulnerability_to_line": 210,
          "vulnerability_code": "    function _queueOrRevert(\n\n        address target,\n\n        uint256 value,\n\n        string memory signature,\n\n        bytes memory data,\n\n        uint256 eta\n\n    ) internal {\n\n        require(\n\n            !timelock.queuedTransactions(\n\n                keccak256(abi.encode(target, value, signature, data, eta))\n\n            ),\n\n            \"Governor::_queueOrRevert: proposal action already queued at eta\"\n\n        );\n\n        timelock.queueTransaction(target, value, signature, data, eta);\n",
          "message": "Governor._queueOrRevert (Governor.sol#196-210) does not use the value returned by external calls:\n\t-timelock.queueTransaction(target,value,signature,data,eta) (Governor.sol#209)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 213,
          "vulnerability_to_line": 230,
          "vulnerability_code": "    function execute(uint256 proposalId) public payable {\n\n        require(\n\n            state(proposalId) == ProposalState.Queued,\n\n            \"Governor::execute: proposal can only be executed if it is queued\"\n\n        );\n\n        Proposal storage proposal = proposals[proposalId];\n\n        proposal.executed = true;\n\n        for (uint256 i = 0; i < proposal.targets.length; i++) {\n\n            timelock.executeTransaction.value(proposal.values[i])(\n\n                proposal.targets[i],\n\n                proposal.values[i],\n\n                proposal.signatures[i],\n\n                proposal.calldatas[i],\n\n                proposal.eta\n\n            );\n\n        }\n\n        emit ProposalExecuted(proposalId);\n",
          "message": "Governor.execute (Governor.sol#213-230) does not use the value returned by external calls:\n\t-timelock.executeTransaction.value(proposal.values[i])(proposal.targets[i],proposal.values[i],proposal.signatures[i],proposal.calldatas[i],proposal.eta) (Governor.sol#221-227)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 255,
          "vulnerability_to_line": 270,
          "vulnerability_code": "    function __queueSetTimelockPendingAdmin(\n\n        address newPendingAdmin,\n\n        uint256 eta\n\n    ) public {\n\n        require(\n\n            msg.sender == guardian,\n\n            \"Governor::__queueSetTimelockPendingAdmin: sender must be gov guardian\"\n\n        );\n\n        timelock.queueTransaction(\n\n            address(timelock),\n\n            0,\n\n            \"setPendingAdmin(address)\",\n\n            abi.encode(newPendingAdmin),\n\n            eta\n\n        );\n",
          "message": "Governor.__queueSetTimelockPendingAdmin (Governor.sol#255-270) does not use the value returned by external calls:\n\t-timelock.queueTransaction(address(timelock),0,setPendingAdmin(address),abi.encode(newPendingAdmin),eta) (Governor.sol#263-269)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 273,
          "vulnerability_to_line": 288,
          "vulnerability_code": "    function __executeSetTimelockPendingAdmin(\n\n        address newPendingAdmin,\n\n        uint256 eta\n\n    ) public {\n\n        require(\n\n            msg.sender == guardian,\n\n            \"Governor::__executeSetTimelockPendingAdmin: sender must be gov guardian\"\n\n        );\n\n        timelock.executeTransaction(\n\n            address(timelock),\n\n            0,\n\n            \"setPendingAdmin(address)\",\n\n            abi.encode(newPendingAdmin),\n\n            eta\n\n        );\n",
          "message": "Governor.__executeSetTimelockPendingAdmin (Governor.sol#273-288) does not use the value returned by external calls:\n\t-timelock.executeTransaction(address(timelock),0,setPendingAdmin(address),abi.encode(newPendingAdmin),eta) (Governor.sol#281-287)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 221,
          "vulnerability_to_line": 227,
          "vulnerability_code": "            timelock.executeTransaction.value(proposal.values[i])(\n\n                proposal.targets[i],\n\n                proposal.values[i],\n\n                proposal.signatures[i],\n\n                proposal.calldatas[i],\n\n                proposal.eta\n",
          "message": "Governor.execute has external calls inside a loop:\n\t- timelock.executeTransaction.value(proposal.values[i])(proposal.targets[i],proposal.values[i],proposal.signatures[i],proposal.calldatas[i],proposal.eta) (Governor.sol#221-227)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": 174,
          "vulnerability_code": "    function queue(uint256 proposalId) public {\n\n        require(\n\n            msg.sender == guardian,\n\n            \"Governor::queue: sender must be gov guardian\"\n\n        );\n\n        require(\n\n            state(proposalId) == ProposalState.Pending,\n\n            \"Governor::queue: proposal can only be queued if it is pending\"\n\n        );\n\n        Proposal storage proposal = proposals[proposalId];\n\n        proposal.eta = add256(block.timestamp, timelock.delay());\n\n\n\n        for (uint256 i = 0; i < proposal.targets.length; i++) {\n\n            _queueOrRevert(\n\n                proposal.targets[i],\n\n                proposal.values[i],\n\n                proposal.signatures[i],\n\n                proposal.calldatas[i],\n\n                proposal.eta\n\n            );\n\n        }\n\n\n\n        emit ProposalQueued(proposal.id, proposal.eta);\n",
          "message": "Governor.queue (Governor.sol#151-174) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- i < proposal.targets.length (Governor.sol#163-171)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 176,
          "vulnerability_to_line": 193,
          "vulnerability_code": "    function state(uint256 proposalId) public view returns (ProposalState) {\n\n        require(\n\n            proposalCount >= proposalId && proposalId > 0,\n\n            \"Governor::state: invalid proposal id\"\n\n        );\n\n        Proposal storage proposal = proposals[proposalId];\n\n        if (proposal.executed) {\n\n            return ProposalState.Executed;\n\n        } else if (proposal.eta == 0) {\n\n            return ProposalState.Pending;\n\n        } else if (\n\n            block.timestamp >= add256(proposal.eta, timelock.GRACE_PERIOD())\n\n        ) {\n\n            return ProposalState.Expired;\n\n        } else {\n\n            return ProposalState.Queued;\n\n        }\n",
          "message": "Governor.state (Governor.sol#176-193) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp >= add256(proposal.eta,timelock.GRACE_PERIOD()) (Governor.sol#186-192)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 196,
          "vulnerability_to_line": 210,
          "vulnerability_code": "    function _queueOrRevert(\n\n        address target,\n\n        uint256 value,\n\n        string memory signature,\n\n        bytes memory data,\n\n        uint256 eta\n\n    ) internal {\n\n        require(\n\n            !timelock.queuedTransactions(\n\n                keccak256(abi.encode(target, value, signature, data, eta))\n\n            ),\n\n            \"Governor::_queueOrRevert: proposal action already queued at eta\"\n\n        );\n\n        timelock.queueTransaction(target, value, signature, data, eta);\n",
          "message": "Governor._queueOrRevert (Governor.sol#196-210) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(! timelock.queuedTransactions(keccak256(bytes)(abi.encode(target,value,signature,data,eta))),Governor::_queueOrRevert: proposal action already queued at eta) (Governor.sol#203-208)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 290,
          "vulnerability_to_line": 294,
          "vulnerability_code": "    function add256(uint256 a, uint256 b) internal pure returns (uint256) {\n\n        uint256 c = a + b;\n\n        require(c >= a, \"addition overflow\");\n\n        return c;\n",
          "message": "Governor.add256 (Governor.sol#290-294) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(c >= a,addition overflow) (Governor.sol#292)\n"
        },
        {
          "name": "pragma",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.5.11;\n",
          "message": "Different versions of Solidity is used in Governor.sol:\n\t- Version used: ['0.5.11', 'ABIEncoderV2', '^0.5.11']\n\t- Governor.sol#3 declares pragma solidity0.5.11\n\t- Governor.sol#41 declares pragma solidity^0.5.11\n\t- Governor.sol#42 declares pragma experimentalABIEncoderV2\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": 149,
          "vulnerability_code": "    function propose(\n\n        address[] memory targets,\n\n        uint256[] memory values,\n\n        string[] memory signatures,\n\n        bytes[] memory calldatas,\n\n        string memory description\n\n    ) public returns (uint256) {\n\n        // allow anyone to propose for now, since only guardian can queue the transaction it should be harmless, you just need to pay the gas\n\n        require(\n\n            targets.length == values.length &&\n\n                targets.length == signatures.length &&\n\n                targets.length == calldatas.length,\n\n            \"Governor::propose: proposal function information arity mismatch\"\n\n        );\n\n        require(targets.length != 0, \"Governor::propose: must provide actions\");\n\n        require(\n\n            targets.length <= MAX_OPERATIONS,\n\n            \"Governor::propose: too many actions\"\n\n        );\n\n\n\n        proposalCount++;\n\n        Proposal memory newProposal = Proposal({\n\n            id: proposalCount,\n\n            proposer: msg.sender,\n\n            eta: 0,\n\n            targets: targets,\n\n            values: values,\n\n            signatures: signatures,\n\n            calldatas: calldatas,\n\n            executed: false\n\n        });\n\n\n\n        proposals[newProposal.id] = newProposal;\n\n\n\n        emit ProposalCreated(\n\n            newProposal.id,\n\n            msg.sender,\n\n            targets,\n\n            values,\n\n            signatures,\n\n            calldatas,\n\n            description\n\n        );\n\n        return newProposal.id;\n",
          "message": "Governor.propose (Governor.sol#105-149) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": 174,
          "vulnerability_code": "    function queue(uint256 proposalId) public {\n\n        require(\n\n            msg.sender == guardian,\n\n            \"Governor::queue: sender must be gov guardian\"\n\n        );\n\n        require(\n\n            state(proposalId) == ProposalState.Pending,\n\n            \"Governor::queue: proposal can only be queued if it is pending\"\n\n        );\n\n        Proposal storage proposal = proposals[proposalId];\n\n        proposal.eta = add256(block.timestamp, timelock.delay());\n\n\n\n        for (uint256 i = 0; i < proposal.targets.length; i++) {\n\n            _queueOrRevert(\n\n                proposal.targets[i],\n\n                proposal.values[i],\n\n                proposal.signatures[i],\n\n                proposal.calldatas[i],\n\n                proposal.eta\n\n            );\n\n        }\n\n\n\n        emit ProposalQueued(proposal.id, proposal.eta);\n",
          "message": "Governor.queue (Governor.sol#151-174) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 213,
          "vulnerability_to_line": 230,
          "vulnerability_code": "    function execute(uint256 proposalId) public payable {\n\n        require(\n\n            state(proposalId) == ProposalState.Queued,\n\n            \"Governor::execute: proposal can only be executed if it is queued\"\n\n        );\n\n        Proposal storage proposal = proposals[proposalId];\n\n        proposal.executed = true;\n\n        for (uint256 i = 0; i < proposal.targets.length; i++) {\n\n            timelock.executeTransaction.value(proposal.values[i])(\n\n                proposal.targets[i],\n\n                proposal.values[i],\n\n                proposal.signatures[i],\n\n                proposal.calldatas[i],\n\n                proposal.eta\n\n            );\n\n        }\n\n        emit ProposalExecuted(proposalId);\n",
          "message": "Governor.execute (Governor.sol#213-230) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": 244,
          "vulnerability_code": "    function getActions(uint256 proposalId)\n\n        public\n\n        view\n\n        returns (\n\n            address[] memory targets,\n\n            uint256[] memory values,\n\n            string[] memory signatures,\n\n            bytes[] memory calldatas\n\n        )\n\n    {\n\n        Proposal storage p = proposals[proposalId];\n\n        return (p.targets, p.values, p.signatures, p.calldatas);\n",
          "message": "Governor.getActions (Governor.sol#232-244) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 246,
          "vulnerability_to_line": 252,
          "vulnerability_code": "    function __acceptAdmin() public {\n\n        require(\n\n            msg.sender == guardian,\n\n            \"Governor::__acceptAdmin: sender must be gov guardian\"\n\n        );\n\n        timelock.acceptAdmin();\n",
          "message": "Governor.__acceptAdmin (Governor.sol#246-252) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 255,
          "vulnerability_to_line": 270,
          "vulnerability_code": "    function __queueSetTimelockPendingAdmin(\n\n        address newPendingAdmin,\n\n        uint256 eta\n\n    ) public {\n\n        require(\n\n            msg.sender == guardian,\n\n            \"Governor::__queueSetTimelockPendingAdmin: sender must be gov guardian\"\n\n        );\n\n        timelock.queueTransaction(\n\n            address(timelock),\n\n            0,\n\n            \"setPendingAdmin(address)\",\n\n            abi.encode(newPendingAdmin),\n\n            eta\n\n        );\n",
          "message": "Governor.__queueSetTimelockPendingAdmin (Governor.sol#255-270) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 273,
          "vulnerability_to_line": 288,
          "vulnerability_code": "    function __executeSetTimelockPendingAdmin(\n\n        address newPendingAdmin,\n\n        uint256 eta\n\n    ) public {\n\n        require(\n\n            msg.sender == guardian,\n\n            \"Governor::__executeSetTimelockPendingAdmin: sender must be gov guardian\"\n\n        );\n\n        timelock.executeTransaction(\n\n            address(timelock),\n\n            0,\n\n            \"setPendingAdmin(address)\",\n\n            abi.encode(newPendingAdmin),\n\n            eta\n\n        );\n",
          "message": "Governor.__executeSetTimelockPendingAdmin (Governor.sol#273-288) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.5.11;\n",
          "message": "Detected issues with version pragma in Governor.sol:\n\t- pragma solidity0.5.11 (Governor.sol#3): it allows old versions\n\t- pragma solidity^0.5.11 (Governor.sol#41): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function GRACE_PERIOD() external view returns (uint256);\n",
          "message": "Function 'ITimelock.GRACE_PERIOD' (Governor.sol#8) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 196,
          "vulnerability_to_line": 210,
          "vulnerability_code": "    function _queueOrRevert(\n\n        address target,\n\n        uint256 value,\n\n        string memory signature,\n\n        bytes memory data,\n\n        uint256 eta\n\n    ) internal {\n\n        require(\n\n            !timelock.queuedTransactions(\n\n                keccak256(abi.encode(target, value, signature, data, eta))\n\n            ),\n\n            \"Governor::_queueOrRevert: proposal action already queued at eta\"\n\n        );\n\n        timelock.queueTransaction(target, value, signature, data, eta);\n",
          "message": "Function 'Governor._queueOrRevert' (Governor.sol#196-210) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 246,
          "vulnerability_to_line": 252,
          "vulnerability_code": "    function __acceptAdmin() public {\n\n        require(\n\n            msg.sender == guardian,\n\n            \"Governor::__acceptAdmin: sender must be gov guardian\"\n\n        );\n\n        timelock.acceptAdmin();\n",
          "message": "Function 'Governor.__acceptAdmin' (Governor.sol#246-252) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 255,
          "vulnerability_to_line": 270,
          "vulnerability_code": "    function __queueSetTimelockPendingAdmin(\n\n        address newPendingAdmin,\n\n        uint256 eta\n\n    ) public {\n\n        require(\n\n            msg.sender == guardian,\n\n            \"Governor::__queueSetTimelockPendingAdmin: sender must be gov guardian\"\n\n        );\n\n        timelock.queueTransaction(\n\n            address(timelock),\n\n            0,\n\n            \"setPendingAdmin(address)\",\n\n            abi.encode(newPendingAdmin),\n\n            eta\n\n        );\n",
          "message": "Function 'Governor.__queueSetTimelockPendingAdmin' (Governor.sol#255-270) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 273,
          "vulnerability_to_line": 288,
          "vulnerability_code": "    function __executeSetTimelockPendingAdmin(\n\n        address newPendingAdmin,\n\n        uint256 eta\n\n    ) public {\n\n        require(\n\n            msg.sender == guardian,\n\n            \"Governor::__executeSetTimelockPendingAdmin: sender must be gov guardian\"\n\n        );\n\n        timelock.executeTransaction(\n\n            address(timelock),\n\n            0,\n\n            \"setPendingAdmin(address)\",\n\n            abi.encode(newPendingAdmin),\n\n            eta\n\n        );\n",
          "message": "Function 'Governor.__executeSetTimelockPendingAdmin' (Governor.sol#273-288) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 163,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < proposal.targets.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < proposal.targets.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 163,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < proposal.targets.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < proposal.targets.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 235,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function queueTransaction(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function cancelTransaction(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function executeTransaction(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string calldata signature,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata data,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata data,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 eta\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) external returns (bytes32);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string calldata signature,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata data,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata data,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 eta\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string calldata signature,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata data,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata data,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 eta\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) external payable returns (bytes memory);\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "UNKNOWN INSTRUCTION: SHR"
      ],
      "vulnerability_findings": []
    }
  }
}