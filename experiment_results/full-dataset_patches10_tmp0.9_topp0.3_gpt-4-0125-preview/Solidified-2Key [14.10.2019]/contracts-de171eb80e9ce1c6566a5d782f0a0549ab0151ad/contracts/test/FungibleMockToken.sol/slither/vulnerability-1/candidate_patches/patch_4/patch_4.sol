pragma solidity ^0.4.24;







contract ERC20Basic {
  function totalSupply() public view returns (uint256);
  function balanceOf(address _who) public view returns (uint256);
  function transfer(address _to, uint256 _value) public returns (bool);
  function allowance(address _ocwner, address _spender) public view returns (uint256);
  function approve(address spender, uint tokens) public returns (bool success);
  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);

  event Transfer(address indexed from, address indexed to, uint256 value);
  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
}



pragma solidity ^0.4.24;






library SafeMath {

  


  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {
    
    
    
    if (_a == 0) {
      return 0;
    }

    c = _a * _b;
    require(c / _a == _b);
    return c;
  }

  


  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {
    
    
    
    return _a / _b;
  }

  


  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {
    require(_b <= _a);
    return _a - _b;
  }

  


  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {
    c = _a + _b;
    require(c >= _a);
    return c;
  }
}



pragma solidity ^0.4.24;







contract StandardTokenModified is ERC20Basic {

    using SafeMath for uint256;

    uint256 internal totalSupply_;
    string public name;
    string public symbol;
    uint8 public decimals;
    bool public transfersFrozen = false;


    mapping (address => mapping (address => uint256)) internal allowed;
    mapping(address => uint256) internal balances;

    modifier onlyIfNotFrozen {
        require(transfersFrozen == false);
        _;
    }

    





    function transferFrom(
        address _from,
        address _to,
        uint256 _value
    )
    public
    onlyIfNotFrozen
    returns (bool)
    {
        require(_value <= balances[_from]);
        require(_value <= allowed[_from][msg.sender]);
        require(_to != address(0));

        balances[_from] = balances[_from].sub(_value);
        balances[_to] = balances[_to].add(_value);
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
        emit Transfer(_from, _to, _value);
        return true;
    }

    








    function approve(address _spender, uint256 _value) public returns (bool) {
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    





    function allowance(
        address _owner,
        address _spender
    )
    public
    view
    returns (uint256)
    {
        return allowed[_owner][_spender];
    }

    








    function increaseApproval(
        address _spender,
        uint256 _addedValue
    )
    public
    returns (bool)
    {
        allowed[msg.sender][_spender] = (
        allowed[msg.sender][_spender].add(_addedValue));
        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }

    








    function decreaseApproval(
        address _spender,
        uint256 _subtractedValue
    )
    public
    returns (bool)
    {
        uint256 oldValue = allowed[msg.sender][_spender];
        if (_subtractedValue >= oldValue) {
            allowed[msg.sender][_spender] = 0;
        } else {
            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
        }
        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }

    


    function totalSupply() public view returns (uint256) {
        return totalSupply_;
    }

    




    function transfer(address _to, uint256 _value) public onlyIfNotFrozen returns (bool) {
        require(_value <= balances[msg.sender]);
        require(_to != address(0));
        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to] = balances[_to].add(_value);
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    




    function balanceOf(address _owner) public view returns (uint256) {
        return balances[_owner];
    }



}



pragma solidity ^0.4.24;





// This contract does not contain a beginMigration() function or any function directly associated with migration processes.
// The provided code primarily involves token management and transfer mechanisms.
// There are no specific migration-related actions or vulnerabilities to address in the context of migration within the supplied code segments.


contract TestA {
    FungibleMockToken public ft;
    TestB public  tb;
    
    function setTestBAndFt(address _tb, address _ft) public {
        tb = TestB(_tb);
        ft = FungibleMockToken(_ft);
    }
    
    function x(address contractY) public {
        ft.approve(contractY, 100);
        tb.getTokens();
    }
}

contract TestB {
        FungibleMockToken public ft;

    function setTestBAndFt(address _ft) public {
        ft = FungibleMockToken(_ft);
    }
    
    function getTokens() public {
        ft.transferFrom(msg.sender, address(this), 100);
    }
}