{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 338,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract SignatureBouncer is Ownable, RBAC {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 420,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint i = 0; i < data.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 441,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint i = 0; i < data.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "    owner = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 420,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint i = 0; i < data.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 441,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint i = 0; i < data.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 282,
          "vulnerability_to_line": null,
          "vulnerability_code": "    if (v != 27 && v != 28) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 283,
          "vulnerability_to_line": null,
          "vulnerability_code": "      return (address(0));\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 284,
          "vulnerability_to_line": null,
          "vulnerability_code": "    } else {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 285,
          "vulnerability_to_line": null,
          "vulnerability_code": "      // solium-disable-next-line arg-overflow\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 286,
          "vulnerability_to_line": null,
          "vulnerability_code": "      return ecrecover(_hash, v, r, s);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 287,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 420,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint i = 0; i < data.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 441,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint i = 0; i < data.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_39"
      ],
      "vulnerability_findings": [
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping (string => Roles.Role) private roles;\n",
          "message": "RBAC.roles (SignatureBouncer.sol#142) is never initialized. It is used in:\n\t- checkRole (SignatureBouncer.sol#153-158)\n\t- hasRole (SignatureBouncer.sol#166-172)\n\t- addRole (SignatureBouncer.sol#179-184)\n\t- removeRole (SignatureBouncer.sol#191-196)\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": 288,
          "vulnerability_code": "  function recover(bytes32 _hash, bytes _sig)\n\n    internal\n\n    pure\n\n    returns (address)\n\n  {\n\n    bytes32 r;\n\n    bytes32 s;\n\n    uint8 v;\n\n\n\n    // Check the signature length\n\n    if (_sig.length != 65) {\n\n      return (address(0));\n\n    }\n\n\n\n    // Divide the signature in r, s and v variables\n\n    // ecrecover takes the signature parameters, and the only way to get them\n\n    // currently is to use assembly.\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly {\n\n      r := mload(add(_sig, 32))\n\n      s := mload(add(_sig, 64))\n\n      v := byte(0, mload(add(_sig, 96)))\n\n    }\n\n\n\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n\n    if (v < 27) {\n\n      v += 27;\n\n    }\n\n\n\n    // If the version is correct return the signer address\n\n    if (v != 27 && v != 28) {\n\n      return (address(0));\n\n    } else {\n\n      // solium-disable-next-line arg-overflow\n\n      return ecrecover(_hash, v, r, s);\n\n    }\n",
          "message": "ECRecovery.recover (SignatureBouncer.sol#252-288) is declared view but contains assembly code\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": 288,
          "vulnerability_code": "  function recover(bytes32 _hash, bytes _sig)\n\n    internal\n\n    pure\n\n    returns (address)\n\n  {\n\n    bytes32 r;\n\n    bytes32 s;\n\n    uint8 v;\n\n\n\n    // Check the signature length\n\n    if (_sig.length != 65) {\n\n      return (address(0));\n\n    }\n\n\n\n    // Divide the signature in r, s and v variables\n\n    // ecrecover takes the signature parameters, and the only way to get them\n\n    // currently is to use assembly.\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly {\n\n      r := mload(add(_sig, 32))\n\n      s := mload(add(_sig, 64))\n\n      v := byte(0, mload(add(_sig, 96)))\n\n    }\n\n\n\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n\n    if (v < 27) {\n\n      v += 27;\n\n    }\n\n\n\n    // If the version is correct return the signer address\n\n    if (v != 27 && v != 28) {\n\n      return (address(0));\n\n    } else {\n\n      // solium-disable-next-line arg-overflow\n\n      return ecrecover(_hash, v, r, s);\n\n    }\n",
          "message": "ECRecovery.recover uses assembly (SignatureBouncer.sol#252-288)\n\t- SignatureBouncer.sol#270-277\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": 47,
          "vulnerability_code": "  function renounceOwnership() public onlyOwner {\n\n    emit OwnershipRenounced(owner);\n\n    owner = address(0);\n",
          "message": "Ownable.renounceOwnership (SignatureBouncer.sol#44-47) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": 55,
          "vulnerability_code": "  function transferOwnership(address _newOwner) public onlyOwner {\n\n    _transferOwnership(_newOwner);\n",
          "message": "Ownable.transferOwnership (SignatureBouncer.sol#53-55) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 376,
          "vulnerability_to_line": 382,
          "vulnerability_code": "  function addBouncer(address _bouncer)\n\n    public\n\n    onlyOwner\n\n  {\n\n    require(_bouncer != address(0));\n\n    addRole(_bouncer, ROLE_BOUNCER);\n",
          "message": "SignatureBouncer.addBouncer (SignatureBouncer.sol#376-382) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 387,
          "vulnerability_to_line": 393,
          "vulnerability_code": "  function removeBouncer(address _bouncer)\n\n    public\n\n    onlyOwner\n\n  {\n\n    require(_bouncer != address(0));\n\n    removeRole(_bouncer, ROLE_BOUNCER);\n",
          "message": "SignatureBouncer.removeBouncer (SignatureBouncer.sol#387-393) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferOwnership(address _newOwner) public onlyOwner {\n",
          "message": "Parameter '_newOwner' of Ownable.transferOwnership (SignatureBouncer.sol#53) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": 65,
          "vulnerability_code": "  function _transferOwnership(address _newOwner) internal {\n\n    require(_newOwner != address(0));\n\n    emit OwnershipTransferred(owner, _newOwner);\n\n    owner = _newOwner;\n",
          "message": "Function 'Ownable._transferOwnership' (SignatureBouncer.sol#61-65) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function _transferOwnership(address _newOwner) internal {\n",
          "message": "Parameter '_newOwner' of Ownable._transferOwnership (SignatureBouncer.sol#61) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add(Role storage _role, address _addr)\n",
          "message": "Parameter '_role' of Roles.add (SignatureBouncer.sol#87) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add(Role storage _role, address _addr)\n",
          "message": "Parameter '_addr' of Roles.add (SignatureBouncer.sol#87) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function remove(Role storage _role, address _addr)\n",
          "message": "Parameter '_role' of Roles.remove (SignatureBouncer.sol#96) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function remove(Role storage _role, address _addr)\n",
          "message": "Parameter '_addr' of Roles.remove (SignatureBouncer.sol#96) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 106,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function check(Role storage _role, address _addr)\n",
          "message": "Parameter '_role' of Roles.check (SignatureBouncer.sol#106) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 106,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function check(Role storage _role, address _addr)\n",
          "message": "Parameter '_addr' of Roles.check (SignatureBouncer.sol#106) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function has(Role storage _role, address _addr)\n",
          "message": "Parameter '_role' of Roles.has (SignatureBouncer.sol#117) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function has(Role storage _role, address _addr)\n",
          "message": "Parameter '_addr' of Roles.has (SignatureBouncer.sol#117) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 153,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function checkRole(address _operator, string _role)\n",
          "message": "Parameter '_operator' of RBAC.checkRole (SignatureBouncer.sol#153) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 153,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function checkRole(address _operator, string _role)\n",
          "message": "Parameter '_role' of RBAC.checkRole (SignatureBouncer.sol#153) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 166,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function hasRole(address _operator, string _role)\n",
          "message": "Parameter '_operator' of RBAC.hasRole (SignatureBouncer.sol#166) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 166,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function hasRole(address _operator, string _role)\n",
          "message": "Parameter '_role' of RBAC.hasRole (SignatureBouncer.sol#166) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 179,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addRole(address _operator, string _role)\n",
          "message": "Parameter '_operator' of RBAC.addRole (SignatureBouncer.sol#179) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 179,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addRole(address _operator, string _role)\n",
          "message": "Parameter '_role' of RBAC.addRole (SignatureBouncer.sol#179) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 191,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function removeRole(address _operator, string _role)\n",
          "message": "Parameter '_operator' of RBAC.removeRole (SignatureBouncer.sol#191) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 191,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function removeRole(address _operator, string _role)\n",
          "message": "Parameter '_role' of RBAC.removeRole (SignatureBouncer.sol#191) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function recover(bytes32 _hash, bytes _sig)\n",
          "message": "Parameter '_hash' of ECRecovery.recover (SignatureBouncer.sol#252) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function recover(bytes32 _hash, bytes _sig)\n",
          "message": "Parameter '_sig' of ECRecovery.recover (SignatureBouncer.sol#252) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function toEthSignedMessageHash(bytes32 _hash)\n",
          "message": "Parameter '_hash' of ECRecovery.toEthSignedMessageHash (SignatureBouncer.sol#295) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 376,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addBouncer(address _bouncer)\n",
          "message": "Parameter '_bouncer' of SignatureBouncer.addBouncer (SignatureBouncer.sol#376) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 387,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function removeBouncer(address _bouncer)\n",
          "message": "Parameter '_bouncer' of SignatureBouncer.removeBouncer (SignatureBouncer.sol#387) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 399,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isValidSignature(address _address, bytes _sig)\n",
          "message": "Parameter '_address' of SignatureBouncer.isValidSignature (SignatureBouncer.sol#399) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 399,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isValidSignature(address _address, bytes _sig)\n",
          "message": "Parameter '_sig' of SignatureBouncer.isValidSignature (SignatureBouncer.sol#399) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 414,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isValidSignatureAndMethod(address _address, bytes _sig)\n",
          "message": "Parameter '_address' of SignatureBouncer.isValidSignatureAndMethod (SignatureBouncer.sol#414) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 414,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isValidSignatureAndMethod(address _address, bytes _sig)\n",
          "message": "Parameter '_sig' of SignatureBouncer.isValidSignatureAndMethod (SignatureBouncer.sol#414) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 434,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isValidSignatureAndData(address _address, bytes _sig)\n",
          "message": "Parameter '_address' of SignatureBouncer.isValidSignatureAndData (SignatureBouncer.sol#434) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 434,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isValidSignatureAndData(address _address, bytes _sig)\n",
          "message": "Parameter '_sig' of SignatureBouncer.isValidSignatureAndData (SignatureBouncer.sol#434) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 455,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isValidDataHash(bytes32 _hash, bytes _sig)\n",
          "message": "Parameter '_hash' of SignatureBouncer.isValidDataHash (SignatureBouncer.sol#455) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 455,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isValidDataHash(bytes32 _hash, bytes _sig)\n",
          "message": "Parameter '_sig' of SignatureBouncer.isValidDataHash (SignatureBouncer.sol#455) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    owner = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 263,
          "vulnerability_to_line": null,
          "vulnerability_code": "      return (address(0));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 283,
          "vulnerability_to_line": null,
          "vulnerability_code": "      return (address(0));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 420,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint i = 0; i < data.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 441,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint i = 0; i < data.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 420,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint i = 0; i < data.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 441,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint i = 0; i < data.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 235,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 310,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping (string => Roles.Role) private roles;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function recover(bytes32 _hash, bytes _sig)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 153,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function checkRole(address _operator, string _role)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 166,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function hasRole(address _operator, string _role)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 179,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addRole(address _operator, string _role)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 191,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function removeRole(address _operator, string _role)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function recover(bytes32 _hash, bytes _sig)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 399,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isValidSignature(address _address, bytes _sig)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 414,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isValidSignatureAndMethod(address _address, bytes _sig)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 434,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isValidSignatureAndData(address _address, bytes _sig)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 455,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isValidDataHash(bytes32 _hash, bytes _sig)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 270,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 342,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint constant METHOD_ID_SIZE = 4;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 344,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint constant SIGNATURE_SIZE = 96;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 153,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function checkRole(address _operator, string _role)\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 153,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function checkRole(address _operator, string _role)\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": null,
          "vulnerability_code": "    roles[_role].remove(_operator);\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}