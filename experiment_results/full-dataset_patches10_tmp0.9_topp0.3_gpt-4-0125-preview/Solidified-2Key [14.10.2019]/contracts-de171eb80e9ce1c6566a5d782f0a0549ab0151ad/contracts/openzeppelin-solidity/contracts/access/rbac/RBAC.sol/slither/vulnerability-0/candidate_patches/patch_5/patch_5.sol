pragma solidity ^0.4.24;








library Roles {
  struct Role {
    mapping (address => bool) bearer;
  }

  


  function add(Role storage _role, address _addr)
    internal
  {
    _role.bearer[_addr] = true;
  }

  


  function remove(Role storage _role, address _addr)
    internal
  {
    _role.bearer[_addr] = false;
  }

  



  function check(Role storage _role, address _addr)
    internal
    view
  {
    require(has(_role, _addr));
  }

  



  function has(Role storage _role, address _addr)
    internal
    view
    returns (bool)
  {
    return _role.bearer[_addr];
  }
}



pragma solidity ^0.4.24;










// This contract does not contain a specific function named beginMigration(). 
// However, the uninitialized-state vulnerability mentioned cannot be directly fixed with a specific function amendment 
// as it refers to the state variable initialization strategy. Solidity automatically initializes 
// mapping types to their default values, meaning every possible key exists and is mapped to a value 
// that represents the default value for the value type. There's no uninitialized state vulnerability 
// in the provided context that can be fixed by altering a specific function. 
// Please review the provided details or specify the correct function or issue to be addressed.