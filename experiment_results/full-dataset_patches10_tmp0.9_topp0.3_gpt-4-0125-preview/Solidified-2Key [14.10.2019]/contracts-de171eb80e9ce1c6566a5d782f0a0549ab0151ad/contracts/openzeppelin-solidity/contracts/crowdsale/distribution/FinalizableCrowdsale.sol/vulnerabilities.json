{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 479,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract FinalizableCrowdsale is Ownable, TimedCrowdsale {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 482,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bool public isFinalized = false;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "    owner = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 257,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 258,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_rate > 0);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 259,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_wallet != address(0));\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 260,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_token != address(0));\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 261,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 262,
          "vulnerability_to_line": null,
          "vulnerability_code": "    rate = _rate;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 263,
          "vulnerability_to_line": null,
          "vulnerability_code": "    wallet = _wallet;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 264,
          "vulnerability_to_line": null,
          "vulnerability_code": "    token = _token;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 265,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 433,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(uint256 _openingTime, uint256 _closingTime) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 434,
          "vulnerability_to_line": null,
          "vulnerability_code": "    // solium-disable-next-line security/no-block-members\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 435,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_openingTime >= block.timestamp);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 436,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_closingTime >= _openingTime);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 437,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 438,
          "vulnerability_to_line": null,
          "vulnerability_code": "    openingTime = _openingTime;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 439,
          "vulnerability_to_line": null,
          "vulnerability_code": "    closingTime = _closingTime;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 440,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 424,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_55"
      ],
      "vulnerability_findings": [
        {
          "name": "timestamp",
          "vulnerability_from_line": 433,
          "vulnerability_to_line": 440,
          "vulnerability_code": "  constructor(uint256 _openingTime, uint256 _closingTime) public {\n\n    // solium-disable-next-line security/no-block-members\n\n    require(_openingTime >= block.timestamp);\n\n    require(_closingTime >= _openingTime);\n\n\n\n    openingTime = _openingTime;\n\n    closingTime = _closingTime;\n",
          "message": "TimedCrowdsale.constructor (FinalizableCrowdsale.sol#433-440) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(_openingTime >= block.timestamp) (FinalizableCrowdsale.sol#435)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 446,
          "vulnerability_to_line": 449,
          "vulnerability_code": "  function hasClosed() public view returns (bool) {\n\n    // solium-disable-next-line security/no-block-members\n\n    return block.timestamp > closingTime;\n",
          "message": "TimedCrowdsale.hasClosed (FinalizableCrowdsale.sol#446-449) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp > closingTime (FinalizableCrowdsale.sol#448)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": 102,
          "vulnerability_code": "  function renounceOwnership() public onlyOwner {\n\n    emit OwnershipRenounced(owner);\n\n    owner = address(0);\n",
          "message": "Ownable.renounceOwnership (FinalizableCrowdsale.sol#99-102) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": 110,
          "vulnerability_code": "  function transferOwnership(address _newOwner) public onlyOwner {\n\n    _transferOwnership(_newOwner);\n",
          "message": "Ownable.transferOwnership (FinalizableCrowdsale.sol#108-110) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
          "message": "ERC20Basic.totalSupply (FinalizableCrowdsale.sol#134) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address _who) public view returns (uint256);\n",
          "message": "ERC20Basic.balanceOf (FinalizableCrowdsale.sol#135) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool);\n",
          "message": "ERC20Basic.transfer (FinalizableCrowdsale.sol#136) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 137,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address _ocwner, address _spender) public view returns (uint256);\n",
          "message": "ERC20Basic.allowance (FinalizableCrowdsale.sol#137) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address spender, uint tokens) public returns (bool success);\n",
          "message": "ERC20Basic.approve (FinalizableCrowdsale.sol#138) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 139,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n",
          "message": "ERC20Basic.transferFrom (FinalizableCrowdsale.sol#139) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 490,
          "vulnerability_to_line": 498,
          "vulnerability_code": "  function finalize() public onlyOwner {\n\n    require(!isFinalized);\n\n    require(hasClosed());\n\n\n\n    finalization();\n\n    emit Finalized();\n\n\n\n    isFinalized = true;\n",
          "message": "FinalizableCrowdsale.finalize (FinalizableCrowdsale.sol#490-498) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_a' of SafeMath.mul (FinalizableCrowdsale.sol#15) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_b' of SafeMath.mul (FinalizableCrowdsale.sol#15) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_a' of SafeMath.div (FinalizableCrowdsale.sol#31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_b' of SafeMath.div (FinalizableCrowdsale.sol#31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_a' of SafeMath.sub (FinalizableCrowdsale.sol#41) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_b' of SafeMath.sub (FinalizableCrowdsale.sol#41) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_a' of SafeMath.add (FinalizableCrowdsale.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_b' of SafeMath.add (FinalizableCrowdsale.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferOwnership(address _newOwner) public onlyOwner {\n",
          "message": "Parameter '_newOwner' of Ownable.transferOwnership (FinalizableCrowdsale.sol#108) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": 120,
          "vulnerability_code": "  function _transferOwnership(address _newOwner) internal {\n\n    require(_newOwner != address(0));\n\n    emit OwnershipTransferred(owner, _newOwner);\n\n    owner = _newOwner;\n",
          "message": "Function 'Ownable._transferOwnership' (FinalizableCrowdsale.sol#116-120) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function _transferOwnership(address _newOwner) internal {\n",
          "message": "Parameter '_newOwner' of Ownable._transferOwnership (FinalizableCrowdsale.sol#116) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 170,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ERC20Basic _token,\n",
          "message": "Parameter '_token' of SafeERC20.safeTransfer (FinalizableCrowdsale.sol#170) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 171,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _to,\n",
          "message": "Parameter '_to' of SafeERC20.safeTransfer (FinalizableCrowdsale.sol#171) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of SafeERC20.safeTransfer (FinalizableCrowdsale.sol#172) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 180,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ERC20 _token,\n",
          "message": "Parameter '_token' of SafeERC20.safeTransferFrom (FinalizableCrowdsale.sol#180) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 181,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _from,\n",
          "message": "Parameter '_from' of SafeERC20.safeTransferFrom (FinalizableCrowdsale.sol#181) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 182,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _to,\n",
          "message": "Parameter '_to' of SafeERC20.safeTransferFrom (FinalizableCrowdsale.sol#182) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of SafeERC20.safeTransferFrom (FinalizableCrowdsale.sol#183) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 191,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ERC20 _token,\n",
          "message": "Parameter '_token' of SafeERC20.safeApprove (FinalizableCrowdsale.sol#191) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 192,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _spender,\n",
          "message": "Parameter '_spender' of SafeERC20.safeApprove (FinalizableCrowdsale.sol#192) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 193,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of SafeERC20.safeApprove (FinalizableCrowdsale.sol#193) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 257,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n",
          "message": "Parameter '_rate' of Crowdsale. (FinalizableCrowdsale.sol#257) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 257,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n",
          "message": "Parameter '_wallet' of Crowdsale. (FinalizableCrowdsale.sol#257) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 257,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n",
          "message": "Parameter '_token' of Crowdsale. (FinalizableCrowdsale.sol#257) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 282,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function buyTokens(address _beneficiary) public payable {\n",
          "message": "Parameter '_beneficiary' of Crowdsale.buyTokens (FinalizableCrowdsale.sol#282) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 319,
          "vulnerability_to_line": 327,
          "vulnerability_code": "  function _preValidatePurchase(\n\n    address _beneficiary,\n\n    uint256 _weiAmount\n\n  )\n\n  internal\n\n  {\n\n    require(_beneficiary != address(0));\n\n    require(_weiAmount != 0);\n",
          "message": "Function 'Crowdsale._preValidatePurchase' (FinalizableCrowdsale.sol#319-327) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _beneficiary,\n",
          "message": "Parameter '_beneficiary' of Crowdsale._preValidatePurchase (FinalizableCrowdsale.sol#320) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 321,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _weiAmount\n",
          "message": "Parameter '_weiAmount' of Crowdsale._preValidatePurchase (FinalizableCrowdsale.sol#321) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 334,
          "vulnerability_to_line": 341,
          "vulnerability_code": "  function _postValidatePurchase(\n\n    address _beneficiary,\n\n    uint256 _weiAmount\n\n  )\n\n  internal\n\n  {\n\n    // optional override\n",
          "message": "Function 'Crowdsale._postValidatePurchase' (FinalizableCrowdsale.sol#334-341) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 348,
          "vulnerability_to_line": 355,
          "vulnerability_code": "  function _deliverTokens(\n\n    address _beneficiary,\n\n    uint256 _tokenAmount\n\n  )\n\n  internal\n\n  {\n\n    token.safeTransfer(_beneficiary, _tokenAmount);\n",
          "message": "Function 'Crowdsale._deliverTokens' (FinalizableCrowdsale.sol#348-355) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 349,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _beneficiary,\n",
          "message": "Parameter '_beneficiary' of Crowdsale._deliverTokens (FinalizableCrowdsale.sol#349) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 350,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _tokenAmount\n",
          "message": "Parameter '_tokenAmount' of Crowdsale._deliverTokens (FinalizableCrowdsale.sol#350) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 362,
          "vulnerability_to_line": 369,
          "vulnerability_code": "  function _processPurchase(\n\n    address _beneficiary,\n\n    uint256 _tokenAmount\n\n  )\n\n  internal\n\n  {\n\n    _deliverTokens(_beneficiary, _tokenAmount);\n",
          "message": "Function 'Crowdsale._processPurchase' (FinalizableCrowdsale.sol#362-369) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 363,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _beneficiary,\n",
          "message": "Parameter '_beneficiary' of Crowdsale._processPurchase (FinalizableCrowdsale.sol#363) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 364,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _tokenAmount\n",
          "message": "Parameter '_tokenAmount' of Crowdsale._processPurchase (FinalizableCrowdsale.sol#364) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 376,
          "vulnerability_to_line": 383,
          "vulnerability_code": "  function _updatePurchasingState(\n\n    address _beneficiary,\n\n    uint256 _weiAmount\n\n  )\n\n  internal\n\n  {\n\n    // optional override\n",
          "message": "Function 'Crowdsale._updatePurchasingState' (FinalizableCrowdsale.sol#376-383) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 390,
          "vulnerability_to_line": 394,
          "vulnerability_code": "  function _getTokenAmount(uint256 _weiAmount)\n\n  internal view returns (uint256)\n\n  {\n\n    return _weiAmount.mul(rate);\n",
          "message": "Function 'Crowdsale._getTokenAmount' (FinalizableCrowdsale.sol#390-394) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 390,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function _getTokenAmount(uint256 _weiAmount)\n",
          "message": "Parameter '_weiAmount' of Crowdsale._getTokenAmount (FinalizableCrowdsale.sol#390) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 399,
          "vulnerability_to_line": 401,
          "vulnerability_code": "  function _forwardFunds() internal {\n\n    wallet.transfer(msg.value);\n",
          "message": "Function 'Crowdsale._forwardFunds' (FinalizableCrowdsale.sol#399-401) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 456,
          "vulnerability_to_line": 464,
          "vulnerability_code": "  function _preValidatePurchase(\n\n    address _beneficiary,\n\n    uint256 _weiAmount\n\n  )\n\n    internal\n\n    onlyWhileOpen\n\n  {\n\n    super._preValidatePurchase(_beneficiary, _weiAmount);\n",
          "message": "Function 'TimedCrowdsale._preValidatePurchase' (FinalizableCrowdsale.sol#456-464) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 457,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _beneficiary,\n",
          "message": "Parameter '_beneficiary' of TimedCrowdsale._preValidatePurchase (FinalizableCrowdsale.sol#457) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 458,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _weiAmount\n",
          "message": "Parameter '_weiAmount' of TimedCrowdsale._preValidatePurchase (FinalizableCrowdsale.sol#458) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 433,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(uint256 _openingTime, uint256 _closingTime) public {\n",
          "message": "Parameter '_openingTime' of TimedCrowdsale. (FinalizableCrowdsale.sol#433) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 433,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(uint256 _openingTime, uint256 _closingTime) public {\n",
          "message": "Parameter '_closingTime' of TimedCrowdsale. (FinalizableCrowdsale.sol#433) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "    owner = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 147,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 159,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 203,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 406,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 470,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 414,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 480,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}