{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 579,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Whitelist is Ownable, RBAC {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 624,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _operators.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 652,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _operators.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 191,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_rate > 0);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 192,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_wallet != address(0));\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 193,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_token != address(0));\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 195,
          "vulnerability_to_line": null,
          "vulnerability_code": "    rate = _rate;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 196,
          "vulnerability_to_line": null,
          "vulnerability_code": "    wallet = _wallet;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 197,
          "vulnerability_to_line": null,
          "vulnerability_code": "    token = _token;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 362,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 363,
          "vulnerability_to_line": null,
          "vulnerability_code": "    owner = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 364,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 624,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _operators.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 652,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _operators.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 624,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _operators.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 652,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _operators.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_75"
      ],
      "vulnerability_findings": [
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 478,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping (string => Roles.Role) private roles;\n",
          "message": "RBAC.roles (WhitelistedCrowdsale.sol#478) is never initialized. It is used in:\n\t- checkRole (WhitelistedCrowdsale.sol#489-494)\n\t- hasRole (WhitelistedCrowdsale.sol#502-508)\n\t- addRole (WhitelistedCrowdsale.sol#515-520)\n\t- removeRole (WhitelistedCrowdsale.sol#527-532)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
          "message": "ERC20Basic.totalSupply (WhitelistedCrowdsale.sol#12) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address _who) public view returns (uint256);\n",
          "message": "ERC20Basic.balanceOf (WhitelistedCrowdsale.sol#13) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool);\n",
          "message": "ERC20Basic.transfer (WhitelistedCrowdsale.sol#14) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address _ocwner, address _spender) public view returns (uint256);\n",
          "message": "ERC20Basic.allowance (WhitelistedCrowdsale.sol#15) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address spender, uint tokens) public returns (bool success);\n",
          "message": "ERC20Basic.approve (WhitelistedCrowdsale.sol#16) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n",
          "message": "ERC20Basic.transferFrom (WhitelistedCrowdsale.sol#17) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 380,
          "vulnerability_to_line": 383,
          "vulnerability_code": "  function renounceOwnership() public onlyOwner {\n\n    emit OwnershipRenounced(owner);\n\n    owner = address(0);\n",
          "message": "Ownable.renounceOwnership (WhitelistedCrowdsale.sol#380-383) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 389,
          "vulnerability_to_line": 391,
          "vulnerability_code": "  function transferOwnership(address _newOwner) public onlyOwner {\n\n    _transferOwnership(_newOwner);\n",
          "message": "Ownable.transferOwnership (WhitelistedCrowdsale.sol#389-391) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 606,
          "vulnerability_to_line": 612,
          "vulnerability_code": "  function whitelist(address _operator)\n\n    public\n\n    view\n\n    returns (bool)\n\n  {\n\n    return hasRole(_operator, ROLE_WHITELISTED);\n",
          "message": "Whitelist.whitelist (WhitelistedCrowdsale.sol#606-612) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 620,
          "vulnerability_to_line": 627,
          "vulnerability_code": "  function addAddressesToWhitelist(address[] _operators)\n\n    public\n\n    onlyOwner\n\n  {\n\n    for (uint256 i = 0; i < _operators.length; i++) {\n\n      addAddressToWhitelist(_operators[i]);\n\n    }\n",
          "message": "Whitelist.addAddressesToWhitelist (WhitelistedCrowdsale.sol#620-627) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 648,
          "vulnerability_to_line": 655,
          "vulnerability_code": "  function removeAddressesFromWhitelist(address[] _operators)\n\n    public\n\n    onlyOwner\n\n  {\n\n    for (uint256 i = 0; i < _operators.length; i++) {\n\n      removeAddressFromWhitelist(_operators[i]);\n\n    }\n",
          "message": "Whitelist.removeAddressesFromWhitelist (WhitelistedCrowdsale.sol#648-655) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_a' of SafeMath.mul (WhitelistedCrowdsale.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_b' of SafeMath.mul (WhitelistedCrowdsale.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_a' of SafeMath.div (WhitelistedCrowdsale.sol#65) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_b' of SafeMath.div (WhitelistedCrowdsale.sol#65) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_a' of SafeMath.sub (WhitelistedCrowdsale.sol#75) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_b' of SafeMath.sub (WhitelistedCrowdsale.sol#75) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_a' of SafeMath.add (WhitelistedCrowdsale.sol#83) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_b' of SafeMath.add (WhitelistedCrowdsale.sol#83) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ERC20Basic _token,\n",
          "message": "Parameter '_token' of SafeERC20.safeTransfer (WhitelistedCrowdsale.sol#103) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _to,\n",
          "message": "Parameter '_to' of SafeERC20.safeTransfer (WhitelistedCrowdsale.sol#104) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of SafeERC20.safeTransfer (WhitelistedCrowdsale.sol#105) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ERC20 _token,\n",
          "message": "Parameter '_token' of SafeERC20.safeTransferFrom (WhitelistedCrowdsale.sol#113) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _from,\n",
          "message": "Parameter '_from' of SafeERC20.safeTransferFrom (WhitelistedCrowdsale.sol#114) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _to,\n",
          "message": "Parameter '_to' of SafeERC20.safeTransferFrom (WhitelistedCrowdsale.sol#115) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of SafeERC20.safeTransferFrom (WhitelistedCrowdsale.sol#116) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 124,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ERC20 _token,\n",
          "message": "Parameter '_token' of SafeERC20.safeApprove (WhitelistedCrowdsale.sol#124) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _spender,\n",
          "message": "Parameter '_spender' of SafeERC20.safeApprove (WhitelistedCrowdsale.sol#125) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 126,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of SafeERC20.safeApprove (WhitelistedCrowdsale.sol#126) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n",
          "message": "Parameter '_rate' of Crowdsale. (WhitelistedCrowdsale.sol#190) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n",
          "message": "Parameter '_wallet' of Crowdsale. (WhitelistedCrowdsale.sol#190) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n",
          "message": "Parameter '_token' of Crowdsale. (WhitelistedCrowdsale.sol#190) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function buyTokens(address _beneficiary) public payable {\n",
          "message": "Parameter '_beneficiary' of Crowdsale.buyTokens (WhitelistedCrowdsale.sol#215) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": 260,
          "vulnerability_code": "  function _preValidatePurchase(\n\n    address _beneficiary,\n\n    uint256 _weiAmount\n\n  )\n\n  internal\n\n  {\n\n    require(_beneficiary != address(0));\n\n    require(_weiAmount != 0);\n",
          "message": "Function 'Crowdsale._preValidatePurchase' (WhitelistedCrowdsale.sol#252-260) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 253,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _beneficiary,\n",
          "message": "Parameter '_beneficiary' of Crowdsale._preValidatePurchase (WhitelistedCrowdsale.sol#253) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 254,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _weiAmount\n",
          "message": "Parameter '_weiAmount' of Crowdsale._preValidatePurchase (WhitelistedCrowdsale.sol#254) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 267,
          "vulnerability_to_line": 274,
          "vulnerability_code": "  function _postValidatePurchase(\n\n    address _beneficiary,\n\n    uint256 _weiAmount\n\n  )\n\n  internal\n\n  {\n\n    // optional override\n",
          "message": "Function 'Crowdsale._postValidatePurchase' (WhitelistedCrowdsale.sol#267-274) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 281,
          "vulnerability_to_line": 288,
          "vulnerability_code": "  function _deliverTokens(\n\n    address _beneficiary,\n\n    uint256 _tokenAmount\n\n  )\n\n  internal\n\n  {\n\n    token.safeTransfer(_beneficiary, _tokenAmount);\n",
          "message": "Function 'Crowdsale._deliverTokens' (WhitelistedCrowdsale.sol#281-288) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 282,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _beneficiary,\n",
          "message": "Parameter '_beneficiary' of Crowdsale._deliverTokens (WhitelistedCrowdsale.sol#282) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 283,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _tokenAmount\n",
          "message": "Parameter '_tokenAmount' of Crowdsale._deliverTokens (WhitelistedCrowdsale.sol#283) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": 302,
          "vulnerability_code": "  function _processPurchase(\n\n    address _beneficiary,\n\n    uint256 _tokenAmount\n\n  )\n\n  internal\n\n  {\n\n    _deliverTokens(_beneficiary, _tokenAmount);\n",
          "message": "Function 'Crowdsale._processPurchase' (WhitelistedCrowdsale.sol#295-302) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 296,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _beneficiary,\n",
          "message": "Parameter '_beneficiary' of Crowdsale._processPurchase (WhitelistedCrowdsale.sol#296) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 297,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _tokenAmount\n",
          "message": "Parameter '_tokenAmount' of Crowdsale._processPurchase (WhitelistedCrowdsale.sol#297) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 309,
          "vulnerability_to_line": 316,
          "vulnerability_code": "  function _updatePurchasingState(\n\n    address _beneficiary,\n\n    uint256 _weiAmount\n\n  )\n\n  internal\n\n  {\n\n    // optional override\n",
          "message": "Function 'Crowdsale._updatePurchasingState' (WhitelistedCrowdsale.sol#309-316) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 323,
          "vulnerability_to_line": 327,
          "vulnerability_code": "  function _getTokenAmount(uint256 _weiAmount)\n\n  internal view returns (uint256)\n\n  {\n\n    return _weiAmount.mul(rate);\n",
          "message": "Function 'Crowdsale._getTokenAmount' (WhitelistedCrowdsale.sol#323-327) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 323,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function _getTokenAmount(uint256 _weiAmount)\n",
          "message": "Parameter '_weiAmount' of Crowdsale._getTokenAmount (WhitelistedCrowdsale.sol#323) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": 334,
          "vulnerability_code": "  function _forwardFunds() internal {\n\n    wallet.transfer(msg.value);\n",
          "message": "Function 'Crowdsale._forwardFunds' (WhitelistedCrowdsale.sol#332-334) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 389,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferOwnership(address _newOwner) public onlyOwner {\n",
          "message": "Parameter '_newOwner' of Ownable.transferOwnership (WhitelistedCrowdsale.sol#389) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 397,
          "vulnerability_to_line": 401,
          "vulnerability_code": "  function _transferOwnership(address _newOwner) internal {\n\n    require(_newOwner != address(0));\n\n    emit OwnershipTransferred(owner, _newOwner);\n\n    owner = _newOwner;\n",
          "message": "Function 'Ownable._transferOwnership' (WhitelistedCrowdsale.sol#397-401) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 397,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function _transferOwnership(address _newOwner) internal {\n",
          "message": "Parameter '_newOwner' of Ownable._transferOwnership (WhitelistedCrowdsale.sol#397) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 423,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add(Role storage _role, address _addr)\n",
          "message": "Parameter '_role' of Roles.add (WhitelistedCrowdsale.sol#423) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 423,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add(Role storage _role, address _addr)\n",
          "message": "Parameter '_addr' of Roles.add (WhitelistedCrowdsale.sol#423) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 432,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function remove(Role storage _role, address _addr)\n",
          "message": "Parameter '_role' of Roles.remove (WhitelistedCrowdsale.sol#432) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 432,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function remove(Role storage _role, address _addr)\n",
          "message": "Parameter '_addr' of Roles.remove (WhitelistedCrowdsale.sol#432) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 442,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function check(Role storage _role, address _addr)\n",
          "message": "Parameter '_role' of Roles.check (WhitelistedCrowdsale.sol#442) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 442,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function check(Role storage _role, address _addr)\n",
          "message": "Parameter '_addr' of Roles.check (WhitelistedCrowdsale.sol#442) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 453,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function has(Role storage _role, address _addr)\n",
          "message": "Parameter '_role' of Roles.has (WhitelistedCrowdsale.sol#453) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 453,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function has(Role storage _role, address _addr)\n",
          "message": "Parameter '_addr' of Roles.has (WhitelistedCrowdsale.sol#453) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 489,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function checkRole(address _operator, string _role)\n",
          "message": "Parameter '_operator' of RBAC.checkRole (WhitelistedCrowdsale.sol#489) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 489,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function checkRole(address _operator, string _role)\n",
          "message": "Parameter '_role' of RBAC.checkRole (WhitelistedCrowdsale.sol#489) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 502,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function hasRole(address _operator, string _role)\n",
          "message": "Parameter '_operator' of RBAC.hasRole (WhitelistedCrowdsale.sol#502) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 502,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function hasRole(address _operator, string _role)\n",
          "message": "Parameter '_role' of RBAC.hasRole (WhitelistedCrowdsale.sol#502) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 515,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addRole(address _operator, string _role)\n",
          "message": "Parameter '_operator' of RBAC.addRole (WhitelistedCrowdsale.sol#515) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 515,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addRole(address _operator, string _role)\n",
          "message": "Parameter '_role' of RBAC.addRole (WhitelistedCrowdsale.sol#515) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 527,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function removeRole(address _operator, string _role)\n",
          "message": "Parameter '_operator' of RBAC.removeRole (WhitelistedCrowdsale.sol#527) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 527,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function removeRole(address _operator, string _role)\n",
          "message": "Parameter '_role' of RBAC.removeRole (WhitelistedCrowdsale.sol#527) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 596,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addAddressToWhitelist(address _operator)\n",
          "message": "Parameter '_operator' of Whitelist.addAddressToWhitelist (WhitelistedCrowdsale.sol#596) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 606,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function whitelist(address _operator)\n",
          "message": "Parameter '_operator' of Whitelist.whitelist (WhitelistedCrowdsale.sol#606) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 620,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addAddressesToWhitelist(address[] _operators)\n",
          "message": "Parameter '_operators' of Whitelist.addAddressesToWhitelist (WhitelistedCrowdsale.sol#620) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 635,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function removeAddressFromWhitelist(address _operator)\n",
          "message": "Parameter '_operator' of Whitelist.removeAddressFromWhitelist (WhitelistedCrowdsale.sol#635) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 648,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function removeAddressesFromWhitelist(address[] _operators)\n",
          "message": "Parameter '_operators' of Whitelist.removeAddressesFromWhitelist (WhitelistedCrowdsale.sol#648) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 674,
          "vulnerability_to_line": 682,
          "vulnerability_code": "  function _preValidatePurchase(\n\n    address _beneficiary,\n\n    uint256 _weiAmount\n\n  )\n\n    internal\n\n    onlyIfWhitelisted(_beneficiary)\n\n  {\n\n    super._preValidatePurchase(_beneficiary, _weiAmount);\n",
          "message": "Function 'WhitelistedCrowdsale._preValidatePurchase' (WhitelistedCrowdsale.sol#674-682) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 675,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _beneficiary,\n",
          "message": "Parameter '_beneficiary' of WhitelistedCrowdsale._preValidatePurchase (WhitelistedCrowdsale.sol#675) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 676,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _weiAmount\n",
          "message": "Parameter '_weiAmount' of WhitelistedCrowdsale._preValidatePurchase (WhitelistedCrowdsale.sol#676) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 382,
          "vulnerability_to_line": null,
          "vulnerability_code": "    owner = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 624,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _operators.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 652,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _operators.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 624,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _operators.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 652,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _operators.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 92,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 339,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 406,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 464,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 571,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 661,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 478,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping (string => Roles.Role) private roles;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 153,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 489,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function checkRole(address _operator, string _role)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 502,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function hasRole(address _operator, string _role)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 515,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addRole(address _operator, string _role)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 527,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function removeRole(address _operator, string _role)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 620,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addAddressesToWhitelist(address[] _operators)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 648,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function removeAddressesFromWhitelist(address[] _operators)\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 489,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function checkRole(address _operator, string _role)\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 489,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function checkRole(address _operator, string _role)\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 530,
          "vulnerability_to_line": null,
          "vulnerability_code": "    roles[_role].remove(_operator);\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}