
This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.

slither Analysis Results
Vulnerability: uninitialized-state found in the following piece of code:

    mapping (address => mapping (address => uint256)) internal allowed;


The contract is among the source code below:



pragma solidity ^0.4.24;







contract ERC20 {
    function totalSupply() public view returns (uint256);
    function balanceOf(address _who) public view returns (uint256);
    function transfer(address _to, uint256 _value) public returns (bool);
    function allowance(address _ocwner, address _spender) public view returns (uint256);
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
}



pragma solidity ^0.4.24;






library SafeMath {

  


  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {
    
    
    
    if (_a == 0) {
      return 0;
    }

    c = _a * _b;
    require(c / _a == _b);
    return c;
  }

  


  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {
    
    
    
    return _a / _b;
  }

  


  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {
    require(_b <= _a);
    return _a - _b;
  }

  


  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {
    c = _a + _b;
    require(c >= _a);
    return c;
  }
}



pragma solidity ^0.4.24;







contract InvoiceTokenERC20 is ERC20 {

    using SafeMath for uint256;

    uint256 internal totalSupply_ = 10000000000000000000000000000;
    string public name;
    string public symbol;
    uint8 public decimals = 18;

    address public owner;


    mapping (address => mapping (address => uint256)) internal allowed;
    mapping(address => uint256) internal balances;


    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }


    constructor(string _name, string _symbol, address _tokensOwner) public {
        owner = _tokensOwner;
        name = _name;
        symbol = _symbol;
        balances[_tokensOwner] = totalSupply_;
    }

    





    function transferFrom(
        address _from,
        address _to,
        uint256 _value
    )
    public
    returns (bool)
    {
        revert();
    }

    



    function approve(address _spender, uint256 _value) public returns (bool) {
        revert();
    }

    





    function allowance(
        address _owner,
        address _spender
    )
    public
    view
    returns (uint256)
    {
        return allowed[_owner][_spender];
    }

    


    function totalSupply() public view returns (uint256) {
        return totalSupply_;
    }

    




    function transfer(address _to, uint256 _value) public onlyOwner returns (bool) {
        require(_value <= balances[msg.sender]);
        require(_to != address(0));
        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to] = balances[_to].add(_value);
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    




    function balanceOf(address _owner) public view returns (uint256) {
        return balances[_owner];
    }

}

DO NOT return natural language for explanations, only the Solidity code of the vulnerable function (if it is a function otherwise whole contract). 
"""