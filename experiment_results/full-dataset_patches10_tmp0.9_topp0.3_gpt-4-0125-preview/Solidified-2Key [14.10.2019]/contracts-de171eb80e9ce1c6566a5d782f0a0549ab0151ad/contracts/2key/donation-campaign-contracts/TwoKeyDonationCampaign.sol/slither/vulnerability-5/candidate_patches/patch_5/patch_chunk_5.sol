function distributeArcsBasedOnSignature(
    bytes sig,
    address _converter
)
private
{
    address[] memory influencers;
    address[] memory keys;
    uint8[] memory weights;
    address old_address;
    (influencers, keys, weights, old_address) = super.getInfluencersKeysAndWeightsFromSignature(sig, _converter);
    uint i;
    address new_address;
    uint numberOfInfluencers = influencers.length;
    for (i = 0; i < numberOfInfluencers; i++) {
        new_address = twoKeyEventSource.plasmaOf(influencers[i]);
        address sender = old_address; // Store old_address in local variable to prevent reentrancy
        if (received_from[new_address] == 0) {
            transferFrom(sender, new_address, 1);
        } else {
            require(received_from[new_address] == sender,'only tree ARCs allowed');
        }
        old_address = new_address;

        
        
        
        
        
        if (i < keys.length) {
            setPublicLinkKeyOf(new_address, keys[i]);
        }

        
        
        
        if (i < weights.length) {
            setCutOf(new_address, uint256(weights[i]));
        }
    }
}