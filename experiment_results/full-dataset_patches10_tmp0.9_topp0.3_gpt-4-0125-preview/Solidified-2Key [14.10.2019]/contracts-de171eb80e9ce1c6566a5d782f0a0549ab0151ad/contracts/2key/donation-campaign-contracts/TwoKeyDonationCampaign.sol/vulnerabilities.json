{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 848,
          "vulnerability_to_line": null,
          "vulnerability_code": "        while (idx + 65 <= sig.length) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 852,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (idx + msg_len <= sig.length) {  // its  a < and not a <= because we dont want this to be the final iteration for the converter\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 903,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i = 0; i < influencers.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 904,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (i < weights.length) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1681,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (i < keys.length) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1687,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (i < weights.length) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 903,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i = 0; i < influencers.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1361,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for(uint i=0; i<numberOfInfluencers;i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1382,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=1; i<numberOfElements; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1839,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < numberOfInfluencers; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 775,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require (sig.length >= 65+idx, 'bad signature length');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 802,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(v==27 || v==28,'bad sig v');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 854,
          "vulnerability_to_line": null,
          "vulnerability_code": "                require(weights[count_influencers] > 0,'weight not defined (1..255)');  // 255 are used to indicate default (equal part) behaviour\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 884,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(idx == sig.length,'illegal message size');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 894,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(old_key != address(0),'no public link key');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 905,
          "vulnerability_to_line": null,
          "vulnerability_code": "                require (recoverHash(keccak256(abi.encodePacked(weights[i], keys[i], influencers[i])),sig,offsets[i]) == old_key, 'illegal signature');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 909,
          "vulnerability_to_line": null,
          "vulnerability_code": "                require (recoverHash(keccak256(abi.encodePacked(influencers[i])),sig,offsets[i]) == old_key, 'illegal last signature');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1672,
          "vulnerability_to_line": null,
          "vulnerability_code": "                require(received_from[new_address] == old_address,'only tree ARCs allowed');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 814,
          "vulnerability_to_line": null,
          "vulnerability_code": "            n_influencers++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 855,
          "vulnerability_to_line": null,
          "vulnerability_code": "                idx++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 882,
          "vulnerability_to_line": null,
          "vulnerability_code": "            count_influencers++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 903,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i = 0; i < influencers.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1361,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for(uint i=0; i<numberOfInfluencers;i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1382,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=1; i<numberOfElements; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1666,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < numberOfInfluencers; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1839,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < numberOfInfluencers; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "DOCKER_RECEIVED_SIGNAL_49"
      ],
      "vulnerability_findings": [
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ITwoKeySingletonesRegistry internal registry;\n",
          "message": "UpgradeabilityStorage.registry (TwoKeyDonationCampaign.sol#215) is never initialized. It is used in:\n\t- initialize (TwoKeyDonationCampaign.sol#238-240)\n"
        },
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 218,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address internal _implementation;\n",
          "message": "UpgradeabilityStorage._implementation (TwoKeyDonationCampaign.sol#218) is never initialized. It is used in:\n\t- implementation (TwoKeyDonationCampaign.sol#224-226)\n"
        },
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 1502,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address internal _implementation;\n",
          "message": "UpgradeabilityCampaignStorage._implementation (TwoKeyDonationCampaign.sol#1502) is never initialized. It is used in:\n\t- implementation (TwoKeyDonationCampaign.sol#1508-1510)\n"
        },
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 969,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress twoKeyEconomy; // Address of twoKeyEconomy contract\n",
          "message": "TwoKeyCampaign.twoKeyEconomy (TwoKeyDonationCampaign.sol#969) is never initialized. It is used in:\n\t- referrerWithdraw (TwoKeyDonationCampaign.sol#1256-1289)\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 659,
          "vulnerability_to_line": 685,
          "vulnerability_code": "    function params0(address c, bytes _method) public view returns (uint answer) {\n\n        // https://medium.com/@blockchain101/calling-the-function-of-another-contract-in-solidity-f9edfa921f4c\n\n        //    dc = c;\n\n        bytes4 sig = bytes4(keccak256(_method));\n\n        assembly {\n\n        // move pointer to free memory spot\n\n            let ptr := mload(0x40)\n\n        // put function sig at memory spot\n\n            mstore(ptr,sig)\n\n\n\n            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n\n            15000, // gas limit\n\n            c, // sload(dc_slot),  // to addr. append var to _slot to access storage variable\n\n            0, // not transfer any ether (comment if using staticcall)\n\n            ptr, // Inputs are stored at location ptr\n\n            0x04, // Inputs are 0 bytes long\n\n            ptr,  //Store output over input\n\n            0x20) //Outputs are 1 bytes long\n\n\n\n            if eq(result, 0) {\n\n                revert(0, 0)\n\n            }\n\n\n\n            answer := mload(ptr) // Assign output to answer var\n\n            mstore(0x40,add(ptr,0x24)) // Set storage pointer to new space\n\n        }\n",
          "message": "Call.params0 (TwoKeyDonationCampaign.sol#659-685) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 687,
          "vulnerability_to_line": 715,
          "vulnerability_code": "    function params1(address c, bytes _method, uint _val) public view returns (uint answer) {\n\n        // https://medium.com/@blockchain101/calling-the-function-of-another-contract-in-solidity-f9edfa921f4c\n\n        //    dc = c;\n\n        bytes4 sig = bytes4(keccak256(_method));\n\n        assembly {\n\n        // move pointer to free memory spot\n\n            let ptr := mload(0x40)\n\n        // put function sig at memory spot\n\n            mstore(ptr,sig)\n\n        // append argument after function sig\n\n            mstore(add(ptr,0x04), _val)\n\n\n\n            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n\n            15000, // gas limit\n\n            c, // sload(dc_slot),  // to addr. append var to _slot to access storage variable\n\n            0, // not transfer any ether (comment if using staticcall)\n\n            ptr, // Inputs are stored at location ptr\n\n            0x24, // Inputs are 0 bytes long\n\n            ptr,  //Store output over input\n\n            0x20) //Outputs are 1 bytes long\n\n\n\n            if eq(result, 0) {\n\n                revert(0, 0)\n\n            }\n\n\n\n            answer := mload(ptr) // Assign output to answer var\n\n            mstore(0x40,add(ptr,0x24)) // Set storage pointer to new space\n\n        }\n",
          "message": "Call.params1 (TwoKeyDonationCampaign.sol#687-715) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 717,
          "vulnerability_to_line": 747,
          "vulnerability_code": "    function params2(address c, bytes _method, uint _val1, uint _val2) public view returns (uint answer) {\n\n        // https://medium.com/@blockchain101/calling-the-function-of-another-contract-in-solidity-f9edfa921f4c\n\n        //    dc = c;\n\n        bytes4 sig = bytes4(keccak256(_method));\n\n        assembly {\n\n        // move pointer to free memory spot\n\n            let ptr := mload(0x40)\n\n        // put function sig at memory spot\n\n            mstore(ptr,sig)\n\n        // append argument after function sig\n\n            mstore(add(ptr,0x04), _val1)\n\n            mstore(add(ptr,0x24), _val2)\n\n\n\n            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n\n            15000, // gas limit\n\n            c, // sload(dc_slot),  // to addr. append var to _slot to access storage variable\n\n            0, // not transfer any ether (comment if using staticcall)\n\n            ptr, // Inputs are stored at location ptr\n\n            0x44, // Inputs are 4 bytes for signature and 2 uint256\n\n            ptr,  //Store output over input\n\n            0x20) //Outputs are 1 uint long\n\n\n\n        // TODO cause revert\n\n        //            if eq(result, 0) {\n\n        //                revert(0, 0)\n\n        //            }\n\n\n\n            answer := mload(ptr) // Assign output to answer var\n\n            mstore(0x40,add(ptr,0x20)) // Set storage pointer to new space\n\n        }\n",
          "message": "Call.params2 (TwoKeyDonationCampaign.sol#717-747) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 749,
          "vulnerability_to_line": 757,
          "vulnerability_code": "    function loadAddress(bytes sig, uint idx) public pure returns (address) {\n\n        address influencer;\n\n        idx += 20;\n\n        assembly\n\n        {\n\n            influencer := mload(add(sig, idx))\n\n        }\n\n        return influencer;\n",
          "message": "Call.loadAddress (TwoKeyDonationCampaign.sol#749-757) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 759,
          "vulnerability_to_line": 767,
          "vulnerability_code": "    function loadUint8(bytes sig, uint idx) public pure returns (uint8) {\n\n        uint8 weight;\n\n        idx += 1;\n\n        assembly\n\n        {\n\n            weight := mload(add(sig, idx))\n\n        }\n\n        return weight;\n",
          "message": "Call.loadUint8 (TwoKeyDonationCampaign.sol#759-767) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 770,
          "vulnerability_to_line": 805,
          "vulnerability_code": "    function recoverHash(bytes32 hash, bytes sig, uint idx) public pure returns (address) {\n\n        // same as recoverHash in utils/sign.js\n\n        // The signature format is a compact form of:\n\n        //   {bytes32 r}{bytes32 s}{uint8 v}\n\n        // Compact means, uint8 is not padded to 32 bytes.\n\n        require (sig.length >= 65+idx, 'bad signature length');\n\n        idx += 32;\n\n        bytes32 r;\n\n        assembly\n\n        {\n\n            r := mload(add(sig, idx))\n\n        }\n\n\n\n        idx += 32;\n\n        bytes32 s;\n\n        assembly\n\n        {\n\n            s := mload(add(sig, idx))\n\n        }\n\n\n\n        idx += 1;\n\n        uint8 v;\n\n        assembly\n\n        {\n\n            v := mload(add(sig, idx))\n\n        }\n\n        if (v >= 32) { // handle case when signature was made with ethereum web3.eth.sign or getSign which is for signing ethereum transactions\n\n            v -= 32;\n\n            bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\"; // 32 is the number of bytes in the following hash\n\n            hash = keccak256(abi.encodePacked(prefix, hash));\n\n        }\n\n        if (v <= 1) v += 27;\n\n        require(v==27 || v==28,'bad sig v');\n\n        return ecrecover(hash, v, r, s);\n\n\n",
          "message": "Call.recoverHash (TwoKeyDonationCampaign.sol#770-805) is declared view but contains assembly code\n"
        },
        {
          "name": "locked-ether",
          "vulnerability_from_line": 238,
          "vulnerability_to_line": 240,
          "vulnerability_code": "    function initialize(address sender) public payable {\n\n        require(msg.sender == address(registry));\n",
          "message": "Contract locking ether found in TwoKeyDonationCampaign.sol:\n\tContract TwoKeyEventSource has payable functions:\n\t - initialize (TwoKeyDonationCampaign.sol#238-240)\n\tBut does not have a function to withdraw the ether\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 1652,
          "vulnerability_to_line": 1691,
          "vulnerability_code": "    function distributeArcsBasedOnSignature(\n\n        bytes sig,\n\n        address _converter\n\n    )\n\n    private\n\n    {\n\n        address[] memory influencers;\n\n        address[] memory keys;\n\n        uint8[] memory weights;\n\n        address old_address;\n\n        (influencers, keys, weights, old_address) = super.getInfluencersKeysAndWeightsFromSignature(sig, _converter);\n\n        uint i;\n\n        address new_address;\n\n        uint numberOfInfluencers = influencers.length;\n\n        for (i = 0; i < numberOfInfluencers; i++) {\n\n            new_address = twoKeyEventSource.plasmaOf(influencers[i]);\n\n\n\n            if (received_from[new_address] == 0) {\n\n                transferFrom(old_address, new_address, 1);\n\n            } else {\n\n                require(received_from[new_address] == old_address,'only tree ARCs allowed');\n\n            }\n\n            old_address = new_address;\n\n\n\n            // TODO Updating the public key of influencers may not be a good idea because it will require the influencers to use\n\n            // a deterministic private/public key in the link and this might require user interaction (MetaMask signature)\n\n            // TODO a possible solution is change public_link_key to address=>address[]\n\n            // update (only once) the public address used by each influencer\n\n            // we will need this in case one of the influencers will want to start his own off-chain link\n\n            if (i < keys.length) {\n\n                setPublicLinkKeyOf(new_address, keys[i]);\n\n            }\n\n\n\n            // update (only once) the cut used by each influencer\n\n            // we will need this in case one of the influencers will want to start his own off-chain link\n\n            if (i < weights.length) {\n\n                setCutOf(new_address, uint256(weights[i]));\n\n            }\n\n        }\n",
          "message": "Reentrancy in TwoKeyDonationCampaign.distributeArcsBasedOnSignature (TwoKeyDonationCampaign.sol#1652-1691):\n\tExternal calls:\n\t- (influencers,keys,weights,old_address) = super.getInfluencersKeysAndWeightsFromSignature(sig,_converter) (TwoKeyDonationCampaign.sol#1662)\n\t- new_address = twoKeyEventSource.plasmaOf(influencers[i]) (TwoKeyDonationCampaign.sol#1667)\n\t- transferFrom(old_address,new_address,1) (TwoKeyDonationCampaign.sol#1670)\n\t- setPublicLinkKeyOf(new_address,keys[i]) (TwoKeyDonationCampaign.sol#1682)\n\tState variables written after the call(s):\n\t- public_link_key (TwoKeyDonationCampaign.sol#1682)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 1714,
          "vulnerability_to_line": 1722,
          "vulnerability_code": "    function joinAndShareARC(\n\n        bytes signature,\n\n        address receiver\n\n    )\n\n    public\n\n    {\n\n        distributeArcsBasedOnSignature(signature, msg.sender);\n\n        transferFrom(twoKeyEventSource.plasmaOf(msg.sender), twoKeyEventSource.plasmaOf(receiver), 1);\n",
          "message": "Reentrancy in TwoKeyDonationCampaign.joinAndShareARC (TwoKeyDonationCampaign.sol#1714-1722):\n\tExternal calls:\n\t- distributeArcsBasedOnSignature(signature,msg.sender) (TwoKeyDonationCampaign.sol#1720)\n\t- transferFrom(twoKeyEventSource.plasmaOf(msg.sender),twoKeyEventSource.plasmaOf(receiver),1) (TwoKeyDonationCampaign.sol#1721)\n\tState variables written after the call(s):\n\t- balances (TwoKeyDonationCampaign.sol#1721)\n\t- received_from (TwoKeyDonationCampaign.sol#1721)\n\t- totalSupply_ (TwoKeyDonationCampaign.sol#1721)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 1256,
          "vulnerability_to_line": 1289,
          "vulnerability_code": "\tfunction referrerWithdraw(\n\n\t\taddress _address,\n\n\t\tbool _withdrawAsStable\n\n\t)\n\n\tpublic\n\n\t{\n\n\t\trequire(msg.sender == _address || twoKeyEventSource.isAddressMaintainer(msg.sender));\n\n\t\taddress twoKeyAdminAddress;\n\n\t\taddress twoKeyUpgradableExchangeContract;\n\n\n\n\t\tuint balance;\n\n\t\taddress _referrer = twoKeyEventSource.plasmaOf(_address);\n\n\n\n\t\tif(referrerPlasma2Balances2key[_referrer] != 0) {\n\n\t\t\ttwoKeyAdminAddress = getContractProxyAddress(\"TwoKeyAdmin\");\n\n\t\t\ttwoKeyUpgradableExchangeContract = getContractProxyAddress(\"TwoKeyUpgradableExchange\");\n\n\n\n\t\t\tbalance = referrerPlasma2Balances2key[_referrer];\n\n\t\t\treferrerPlasma2Balances2key[_referrer] = 0;\n\n\n\n\t\t\tif(_withdrawAsStable == true) {\n\n\t\t\t\tIERC20(twoKeyEconomy).approve(twoKeyUpgradableExchangeContract, balance);\n\n\t\t\t\tIUpgradableExchange(twoKeyUpgradableExchangeContract).buyStableCoinWith2key(balance, _address);\n\n\t\t\t}\n\n\t\t\telse if (block.timestamp >= ITwoKeyAdmin(twoKeyAdminAddress).getTwoKeyRewardsReleaseDate()) {\n\n\t\t\t\tIERC20(twoKeyEconomy).transfer(_address, balance);\n\n\t\t\t}\n\n\t\t\telse {\n\n\t\t\t\trevert();\n\n\t\t\t}\n\n\n\n\t\t}\n\n        reservedAmount2keyForRewards -= balance;\n",
          "message": "Reentrancy in TwoKeyCampaign.referrerWithdraw (TwoKeyDonationCampaign.sol#1256-1289):\n\tExternal calls:\n\t- require(bool)(msg.sender == _address || twoKeyEventSource.isAddressMaintainer(msg.sender)) (TwoKeyDonationCampaign.sol#1262)\n\t- _referrer = twoKeyEventSource.plasmaOf(_address) (TwoKeyDonationCampaign.sol#1267)\n\t- twoKeyAdminAddress = getContractProxyAddress(TwoKeyAdmin) (TwoKeyDonationCampaign.sol#1270)\n\t- twoKeyUpgradableExchangeContract = getContractProxyAddress(TwoKeyUpgradableExchange) (TwoKeyDonationCampaign.sol#1271)\n\tState variables written after the call(s):\n\t- referrerPlasma2Balances2key (TwoKeyDonationCampaign.sol#1274)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 1559,
          "vulnerability_to_line": 1599,
          "vulnerability_code": "    function setInitialParamsDonationCampaign(\n\n        address _contractor,\n\n        address _moderator,\n\n        address _twoKeySingletonRegistry,\n\n        address _twoKeyDonationConversionHandler,\n\n        address _twoKeyDonationLogicHandler,\n\n        uint [] numberValues,\n\n        bool [] booleanValues\n\n    )\n\n    public\n\n    {\n\n        require(initialized == false);\n\n\n\n        contractor = _contractor;\n\n        // Moderator address\n\n        moderator = _moderator;\n\n\n\n        twoKeySingletonesRegistry = _twoKeySingletonRegistry;\n\n        twoKeyEventSource = TwoKeyEventSource(getContractProxyAddress(\"TwoKeyEventSource\"));\n\n\n\n        totalSupply_ = 1000000;\n\n\n\n        maxReferralRewardPercent = numberValues[0];\n\n        conversionQuota = numberValues[6];\n\n\n\n        twoKeyDonationConversionHandler = _twoKeyDonationConversionHandler;\n\n        twoKeyDonationLogicHandler = _twoKeyDonationLogicHandler;\n\n\n\n\n\n        mustConvertToReferr = booleanValues[0];\n\n        isKYCRequired = booleanValues[1];\n\n        acceptsFiat = booleanValues[2];\n\n\n\n\n\n        ownerPlasma = twoKeyEventSource.plasmaOf(_contractor);\n\n        received_from[ownerPlasma] = ownerPlasma;\n\n        balances[ownerPlasma] = totalSupply_;\n\n\n\n\n\n        initialized = true;\n",
          "message": "Reentrancy in TwoKeyDonationCampaign.setInitialParamsDonationCampaign (TwoKeyDonationCampaign.sol#1559-1599):\n\tExternal calls:\n\t- twoKeyEventSource = TwoKeyEventSource(getContractProxyAddress(TwoKeyEventSource)) (TwoKeyDonationCampaign.sol#1577)\n\t- ownerPlasma = twoKeyEventSource.plasmaOf(_contractor) (TwoKeyDonationCampaign.sol#1593)\n\tState variables written after the call(s):\n\t- initialized (TwoKeyDonationCampaign.sol#1598)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 1006,
          "vulnerability_to_line": 1028,
          "vulnerability_code": "\tfunction transferFrom(\n\n\t\taddress _from,\n\n\t\taddress _to,\n\n\t\tuint256 _value\n\n\t)\n\n\tinternal\n\n\treturns (bool)\n\n\t{\n\n\t\t// _from and _to are assumed to be already converted to plasma address (e.g. using plasmaOf)\n\n\t\trequire(_value == 1);\n\n\t\trequire(balances[_from] > 0);\n\n\n\n\t\tbalances[_from] = balances[_from].sub(1);\n\n\t\tbalances[_to] = balances[_to].add(conversionQuota);\n\n\t\ttotalSupply_ = totalSupply_.add(conversionQuota.sub(1));\n\n\n\n\t\tif (received_from[_to] == 0) {\n\n\t\t\ttwoKeyEventSource.joined(this, _from, _to);\n\n\t\t}\n\n\n\n\t\treceived_from[_to] = _from;\n\n\t\treturn true;\n",
          "message": "Reentrancy in TwoKeyCampaign.transferFrom (TwoKeyDonationCampaign.sol#1006-1028):\n\tExternal calls:\n\t- twoKeyEventSource.joined(this,_from,_to) (TwoKeyDonationCampaign.sol#1023)\n\tState variables written after the call(s):\n\t- received_from (TwoKeyDonationCampaign.sol#1026)\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 1783,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint totalBounty2keys;\n",
          "message": "totalBounty2keys in TwoKeyDonationCampaign.buyTokensAndDistributeReferrerRewards (TwoKeyDonationCampaign.sol#1783) is a local variable never initialiazed\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 1266,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tuint balance;\n",
          "message": "balance in TwoKeyCampaign.referrerWithdraw (TwoKeyDonationCampaign.sol#1266) is a local variable never initialiazed\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 1256,
          "vulnerability_to_line": 1289,
          "vulnerability_code": "\tfunction referrerWithdraw(\n\n\t\taddress _address,\n\n\t\tbool _withdrawAsStable\n\n\t)\n\n\tpublic\n\n\t{\n\n\t\trequire(msg.sender == _address || twoKeyEventSource.isAddressMaintainer(msg.sender));\n\n\t\taddress twoKeyAdminAddress;\n\n\t\taddress twoKeyUpgradableExchangeContract;\n\n\n\n\t\tuint balance;\n\n\t\taddress _referrer = twoKeyEventSource.plasmaOf(_address);\n\n\n\n\t\tif(referrerPlasma2Balances2key[_referrer] != 0) {\n\n\t\t\ttwoKeyAdminAddress = getContractProxyAddress(\"TwoKeyAdmin\");\n\n\t\t\ttwoKeyUpgradableExchangeContract = getContractProxyAddress(\"TwoKeyUpgradableExchange\");\n\n\n\n\t\t\tbalance = referrerPlasma2Balances2key[_referrer];\n\n\t\t\treferrerPlasma2Balances2key[_referrer] = 0;\n\n\n\n\t\t\tif(_withdrawAsStable == true) {\n\n\t\t\t\tIERC20(twoKeyEconomy).approve(twoKeyUpgradableExchangeContract, balance);\n\n\t\t\t\tIUpgradableExchange(twoKeyUpgradableExchangeContract).buyStableCoinWith2key(balance, _address);\n\n\t\t\t}\n\n\t\t\telse if (block.timestamp >= ITwoKeyAdmin(twoKeyAdminAddress).getTwoKeyRewardsReleaseDate()) {\n\n\t\t\t\tIERC20(twoKeyEconomy).transfer(_address, balance);\n\n\t\t\t}\n\n\t\t\telse {\n\n\t\t\t\trevert();\n\n\t\t\t}\n\n\n\n\t\t}\n\n        reservedAmount2keyForRewards -= balance;\n",
          "message": "TwoKeyCampaign.referrerWithdraw (TwoKeyDonationCampaign.sol#1256-1289) does not use the value returned by external calls:\n\t-IERC20(twoKeyEconomy).approve(twoKeyUpgradableExchangeContract,balance) (TwoKeyDonationCampaign.sol#1277)\n\t-IUpgradableExchange(twoKeyUpgradableExchangeContract).buyStableCoinWith2key(balance,_address) (TwoKeyDonationCampaign.sol#1278)\n\t-IERC20(twoKeyEconomy).transfer(_address,balance) (TwoKeyDonationCampaign.sol#1281)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 1667,
          "vulnerability_to_line": null,
          "vulnerability_code": "            new_address = twoKeyEventSource.plasmaOf(influencers[i]);\n",
          "message": "TwoKeyDonationCampaign.distributeArcsBasedOnSignature has external calls inside a loop:\n\t- new_address = twoKeyEventSource.plasmaOf(influencers[i]) (TwoKeyDonationCampaign.sol#1667)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1773,
          "vulnerability_to_line": 1797,
          "vulnerability_code": "    function buyTokensAndDistributeReferrerRewards(\n\n        uint256 _maxReferralRewardETHWei,\n\n        address _converter,\n\n        uint _conversionId\n\n    )\n\n    public\n\n    returns (uint)\n\n    {\n\n        require(msg.sender == twoKeyDonationConversionHandler);\n\n        //Fiat rewards = fiatamount * moderatorPercentage / 100  / 0.095\n\n        uint totalBounty2keys;\n\n        //If fiat conversion do exactly the same just send different reward and don't buy tokens, take them from contract\n\n        if(maxReferralRewardPercent > 0) {\n\n            //Buy tokens from upgradable exchange\n\n            totalBounty2keys = buyTokensFromUpgradableExchange(_maxReferralRewardETHWei, address(this));\n\n            //Handle refchain rewards\n\n            ITwoKeyDonationLogicHandler(twoKeyDonationLogicHandler).updateRefchainRewards(\n\n                _maxReferralRewardETHWei,\n\n                _converter,\n\n                _conversionId,\n\n                totalBounty2keys);\n\n        }\n\n        reservedAmount2keyForRewards = reservedAmount2keyForRewards.add(totalBounty2keys);\n\n        return totalBounty2keys;\n",
          "message": "Reentrancy in TwoKeyDonationCampaign.buyTokensAndDistributeReferrerRewards (TwoKeyDonationCampaign.sol#1773-1797):\n\tExternal calls:\n\t- totalBounty2keys = buyTokensFromUpgradableExchange(_maxReferralRewardETHWei,address(this)) (TwoKeyDonationCampaign.sol#1787)\n\t- ITwoKeyDonationLogicHandler(twoKeyDonationLogicHandler).updateRefchainRewards(_maxReferralRewardETHWei,_converter,_conversionId,totalBounty2keys) (TwoKeyDonationCampaign.sol#1789-1793)\n\tExternal calls sending eth:\n\t- totalBounty2keys = buyTokensFromUpgradableExchange(_maxReferralRewardETHWei,address(this)) (TwoKeyDonationCampaign.sol#1787)\n\tState variables written after the call(s):\n\t- reservedAmount2keyForRewards (TwoKeyDonationCampaign.sol#1795)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1803,
          "vulnerability_to_line": 1821,
          "vulnerability_code": "    function buyTokensForModeratorRewards(\n\n        uint moderatorFee\n\n    )\n\n    public\n\n    onlyTwoKeyDonationConversionHandler\n\n    {\n\n        //Get deep freeze token pool address\n\n        address twoKeyDeepFreezeTokenPool = getContractProxyAddress(\"TwoKeyDeepFreezeTokenPool\");\n\n\n\n        uint networkFee = twoKeyEventSource.getTwoKeyDefaultNetworkTaxPercent();\n\n\n\n        // Balance which will go to moderator\n\n        uint balance = moderatorFee.mul(100-networkFee).div(100);\n\n\n\n        uint moderatorEarnings2key = buyTokensFromUpgradableExchange(balance,moderator); // Buy tokens for moderator\n\n        buyTokensFromUpgradableExchange(moderatorFee - balance, twoKeyDeepFreezeTokenPool); // Buy tokens for deep freeze token pool\n\n\n\n        moderatorTotalEarnings2key = moderatorTotalEarnings2key.add(moderatorEarnings2key);\n",
          "message": "Reentrancy in TwoKeyDonationCampaign.buyTokensForModeratorRewards (TwoKeyDonationCampaign.sol#1803-1821):\n\tExternal calls:\n\t- twoKeyDeepFreezeTokenPool = getContractProxyAddress(TwoKeyDeepFreezeTokenPool) (TwoKeyDonationCampaign.sol#1810)\n\t- networkFee = twoKeyEventSource.getTwoKeyDefaultNetworkTaxPercent() (TwoKeyDonationCampaign.sol#1812)\n\t- moderatorEarnings2key = buyTokensFromUpgradableExchange(balance,moderator) (TwoKeyDonationCampaign.sol#1817)\n\t- buyTokensFromUpgradableExchange(moderatorFee - balance,twoKeyDeepFreezeTokenPool) (TwoKeyDonationCampaign.sol#1818)\n\tExternal calls sending eth:\n\t- moderatorEarnings2key = buyTokensFromUpgradableExchange(balance,moderator) (TwoKeyDonationCampaign.sol#1817)\n\t- buyTokensFromUpgradableExchange(moderatorFee - balance,twoKeyDeepFreezeTokenPool) (TwoKeyDonationCampaign.sol#1818)\n\tState variables written after the call(s):\n\t- moderatorTotalEarnings2key (TwoKeyDonationCampaign.sol#1820)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1256,
          "vulnerability_to_line": 1289,
          "vulnerability_code": "\tfunction referrerWithdraw(\n\n\t\taddress _address,\n\n\t\tbool _withdrawAsStable\n\n\t)\n\n\tpublic\n\n\t{\n\n\t\trequire(msg.sender == _address || twoKeyEventSource.isAddressMaintainer(msg.sender));\n\n\t\taddress twoKeyAdminAddress;\n\n\t\taddress twoKeyUpgradableExchangeContract;\n\n\n\n\t\tuint balance;\n\n\t\taddress _referrer = twoKeyEventSource.plasmaOf(_address);\n\n\n\n\t\tif(referrerPlasma2Balances2key[_referrer] != 0) {\n\n\t\t\ttwoKeyAdminAddress = getContractProxyAddress(\"TwoKeyAdmin\");\n\n\t\t\ttwoKeyUpgradableExchangeContract = getContractProxyAddress(\"TwoKeyUpgradableExchange\");\n\n\n\n\t\t\tbalance = referrerPlasma2Balances2key[_referrer];\n\n\t\t\treferrerPlasma2Balances2key[_referrer] = 0;\n\n\n\n\t\t\tif(_withdrawAsStable == true) {\n\n\t\t\t\tIERC20(twoKeyEconomy).approve(twoKeyUpgradableExchangeContract, balance);\n\n\t\t\t\tIUpgradableExchange(twoKeyUpgradableExchangeContract).buyStableCoinWith2key(balance, _address);\n\n\t\t\t}\n\n\t\t\telse if (block.timestamp >= ITwoKeyAdmin(twoKeyAdminAddress).getTwoKeyRewardsReleaseDate()) {\n\n\t\t\t\tIERC20(twoKeyEconomy).transfer(_address, balance);\n\n\t\t\t}\n\n\t\t\telse {\n\n\t\t\t\trevert();\n\n\t\t\t}\n\n\n\n\t\t}\n\n        reservedAmount2keyForRewards -= balance;\n",
          "message": "Reentrancy in TwoKeyCampaign.referrerWithdraw (TwoKeyDonationCampaign.sol#1256-1289):\n\tExternal calls:\n\t- require(bool)(msg.sender == _address || twoKeyEventSource.isAddressMaintainer(msg.sender)) (TwoKeyDonationCampaign.sol#1262)\n\t- _referrer = twoKeyEventSource.plasmaOf(_address) (TwoKeyDonationCampaign.sol#1267)\n\t- twoKeyAdminAddress = getContractProxyAddress(TwoKeyAdmin) (TwoKeyDonationCampaign.sol#1270)\n\t- twoKeyUpgradableExchangeContract = getContractProxyAddress(TwoKeyUpgradableExchange) (TwoKeyDonationCampaign.sol#1271)\n\t- IERC20(twoKeyEconomy).approve(twoKeyUpgradableExchangeContract,balance) (TwoKeyDonationCampaign.sol#1277)\n\t- IUpgradableExchange(twoKeyUpgradableExchangeContract).buyStableCoinWith2key(balance,_address) (TwoKeyDonationCampaign.sol#1278)\n\t- block.timestamp >= ITwoKeyAdmin(twoKeyAdminAddress).getTwoKeyRewardsReleaseDate() (TwoKeyDonationCampaign.sol#1280-1285)\n\t- IERC20(twoKeyEconomy).transfer(_address,balance) (TwoKeyDonationCampaign.sol#1281)\n\tState variables written after the call(s):\n\t- reservedAmount2keyForRewards (TwoKeyDonationCampaign.sol#1288)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1606,
          "vulnerability_to_line": 1618,
          "vulnerability_code": "    function setCutOf(\n\n        address me,\n\n        uint256 cut\n\n    )\n\n    internal\n\n    {\n\n        // what is the percentage of the bounty s/he will receive when acting as an influencer\n\n        // the value 255 is used to signal equal partition with other influencers\n\n        // A sender can set the value only once in a contract\n\n        address plasma = twoKeyEventSource.plasmaOf(me);\n\n        require(referrerPlasma2cut[plasma] == 0 || referrerPlasma2cut[plasma] == cut);\n\n        referrerPlasma2cut[plasma] = cut;\n",
          "message": "Reentrancy in TwoKeyDonationCampaign.setCutOf (TwoKeyDonationCampaign.sol#1606-1618):\n\tExternal calls:\n\t- plasma = twoKeyEventSource.plasmaOf(me) (TwoKeyDonationCampaign.sol#1615)\n\tState variables written after the call(s):\n\t- referrerPlasma2cut (TwoKeyDonationCampaign.sol#1617)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1559,
          "vulnerability_to_line": 1599,
          "vulnerability_code": "    function setInitialParamsDonationCampaign(\n\n        address _contractor,\n\n        address _moderator,\n\n        address _twoKeySingletonRegistry,\n\n        address _twoKeyDonationConversionHandler,\n\n        address _twoKeyDonationLogicHandler,\n\n        uint [] numberValues,\n\n        bool [] booleanValues\n\n    )\n\n    public\n\n    {\n\n        require(initialized == false);\n\n\n\n        contractor = _contractor;\n\n        // Moderator address\n\n        moderator = _moderator;\n\n\n\n        twoKeySingletonesRegistry = _twoKeySingletonRegistry;\n\n        twoKeyEventSource = TwoKeyEventSource(getContractProxyAddress(\"TwoKeyEventSource\"));\n\n\n\n        totalSupply_ = 1000000;\n\n\n\n        maxReferralRewardPercent = numberValues[0];\n\n        conversionQuota = numberValues[6];\n\n\n\n        twoKeyDonationConversionHandler = _twoKeyDonationConversionHandler;\n\n        twoKeyDonationLogicHandler = _twoKeyDonationLogicHandler;\n\n\n\n\n\n        mustConvertToReferr = booleanValues[0];\n\n        isKYCRequired = booleanValues[1];\n\n        acceptsFiat = booleanValues[2];\n\n\n\n\n\n        ownerPlasma = twoKeyEventSource.plasmaOf(_contractor);\n\n        received_from[ownerPlasma] = ownerPlasma;\n\n        balances[ownerPlasma] = totalSupply_;\n\n\n\n\n\n        initialized = true;\n",
          "message": "Reentrancy in TwoKeyDonationCampaign.setInitialParamsDonationCampaign (TwoKeyDonationCampaign.sol#1559-1599):\n\tExternal calls:\n\t- twoKeyEventSource = TwoKeyEventSource(getContractProxyAddress(TwoKeyEventSource)) (TwoKeyDonationCampaign.sol#1577)\n\tState variables written after the call(s):\n\t- acceptsFiat (TwoKeyDonationCampaign.sol#1590)\n\t- conversionQuota (TwoKeyDonationCampaign.sol#1582)\n\t- isKYCRequired (TwoKeyDonationCampaign.sol#1589)\n\t- maxReferralRewardPercent (TwoKeyDonationCampaign.sol#1581)\n\t- mustConvertToReferr (TwoKeyDonationCampaign.sol#1588)\n\t- totalSupply_ (TwoKeyDonationCampaign.sol#1579)\n\t- twoKeyDonationConversionHandler (TwoKeyDonationCampaign.sol#1584)\n\t- twoKeyDonationLogicHandler (TwoKeyDonationCampaign.sol#1585)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1559,
          "vulnerability_to_line": 1599,
          "vulnerability_code": "    function setInitialParamsDonationCampaign(\n\n        address _contractor,\n\n        address _moderator,\n\n        address _twoKeySingletonRegistry,\n\n        address _twoKeyDonationConversionHandler,\n\n        address _twoKeyDonationLogicHandler,\n\n        uint [] numberValues,\n\n        bool [] booleanValues\n\n    )\n\n    public\n\n    {\n\n        require(initialized == false);\n\n\n\n        contractor = _contractor;\n\n        // Moderator address\n\n        moderator = _moderator;\n\n\n\n        twoKeySingletonesRegistry = _twoKeySingletonRegistry;\n\n        twoKeyEventSource = TwoKeyEventSource(getContractProxyAddress(\"TwoKeyEventSource\"));\n\n\n\n        totalSupply_ = 1000000;\n\n\n\n        maxReferralRewardPercent = numberValues[0];\n\n        conversionQuota = numberValues[6];\n\n\n\n        twoKeyDonationConversionHandler = _twoKeyDonationConversionHandler;\n\n        twoKeyDonationLogicHandler = _twoKeyDonationLogicHandler;\n\n\n\n\n\n        mustConvertToReferr = booleanValues[0];\n\n        isKYCRequired = booleanValues[1];\n\n        acceptsFiat = booleanValues[2];\n\n\n\n\n\n        ownerPlasma = twoKeyEventSource.plasmaOf(_contractor);\n\n        received_from[ownerPlasma] = ownerPlasma;\n\n        balances[ownerPlasma] = totalSupply_;\n\n\n\n\n\n        initialized = true;\n",
          "message": "Reentrancy in TwoKeyDonationCampaign.setInitialParamsDonationCampaign (TwoKeyDonationCampaign.sol#1559-1599):\n\tExternal calls:\n\t- twoKeyEventSource = TwoKeyEventSource(getContractProxyAddress(TwoKeyEventSource)) (TwoKeyDonationCampaign.sol#1577)\n\t- ownerPlasma = twoKeyEventSource.plasmaOf(_contractor) (TwoKeyDonationCampaign.sol#1593)\n\tState variables written after the call(s):\n\t- balances (TwoKeyDonationCampaign.sol#1595)\n\t- ownerPlasma (TwoKeyDonationCampaign.sol#1593)\n\t- received_from (TwoKeyDonationCampaign.sol#1594)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1036,
          "vulnerability_to_line": 1051,
          "vulnerability_code": "    function setPublicLinkKeyOf(\n\n\t\taddress me,\n\n\t\taddress new_public_key\n\n\t)\n\n\tinternal\n\n\t{\n\n        me = twoKeyEventSource.plasmaOf(me);\n\n        require(balanceOf(me) > 0);\n\n        address old_address = public_link_key[me];\n\n        if (old_address == address(0)) {\n\n            public_link_key[me] = new_public_key;\n\n        } else {\n\n            require(old_address == new_public_key);\n\n        }\n\n        public_link_key[me] = new_public_key;\n",
          "message": "Reentrancy in TwoKeyCampaign.setPublicLinkKeyOf (TwoKeyDonationCampaign.sol#1036-1051):\n\tExternal calls:\n\t- me = twoKeyEventSource.plasmaOf(me) (TwoKeyDonationCampaign.sol#1042)\n\tState variables written after the call(s):\n\t- public_link_key (TwoKeyDonationCampaign.sol#1046)\n\t- public_link_key (TwoKeyDonationCampaign.sol#1050)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 1256,
          "vulnerability_to_line": 1289,
          "vulnerability_code": "\tfunction referrerWithdraw(\n\n\t\taddress _address,\n\n\t\tbool _withdrawAsStable\n\n\t)\n\n\tpublic\n\n\t{\n\n\t\trequire(msg.sender == _address || twoKeyEventSource.isAddressMaintainer(msg.sender));\n\n\t\taddress twoKeyAdminAddress;\n\n\t\taddress twoKeyUpgradableExchangeContract;\n\n\n\n\t\tuint balance;\n\n\t\taddress _referrer = twoKeyEventSource.plasmaOf(_address);\n\n\n\n\t\tif(referrerPlasma2Balances2key[_referrer] != 0) {\n\n\t\t\ttwoKeyAdminAddress = getContractProxyAddress(\"TwoKeyAdmin\");\n\n\t\t\ttwoKeyUpgradableExchangeContract = getContractProxyAddress(\"TwoKeyUpgradableExchange\");\n\n\n\n\t\t\tbalance = referrerPlasma2Balances2key[_referrer];\n\n\t\t\treferrerPlasma2Balances2key[_referrer] = 0;\n\n\n\n\t\t\tif(_withdrawAsStable == true) {\n\n\t\t\t\tIERC20(twoKeyEconomy).approve(twoKeyUpgradableExchangeContract, balance);\n\n\t\t\t\tIUpgradableExchange(twoKeyUpgradableExchangeContract).buyStableCoinWith2key(balance, _address);\n\n\t\t\t}\n\n\t\t\telse if (block.timestamp >= ITwoKeyAdmin(twoKeyAdminAddress).getTwoKeyRewardsReleaseDate()) {\n\n\t\t\t\tIERC20(twoKeyEconomy).transfer(_address, balance);\n\n\t\t\t}\n\n\t\t\telse {\n\n\t\t\t\trevert();\n\n\t\t\t}\n\n\n\n\t\t}\n\n        reservedAmount2keyForRewards -= balance;\n",
          "message": "TwoKeyCampaign.referrerWithdraw (TwoKeyDonationCampaign.sol#1256-1289) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp >= ITwoKeyAdmin(twoKeyAdminAddress).getTwoKeyRewardsReleaseDate() (TwoKeyDonationCampaign.sol#1280-1285)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 659,
          "vulnerability_to_line": 685,
          "vulnerability_code": "    function params0(address c, bytes _method) public view returns (uint answer) {\n\n        // https://medium.com/@blockchain101/calling-the-function-of-another-contract-in-solidity-f9edfa921f4c\n\n        //    dc = c;\n\n        bytes4 sig = bytes4(keccak256(_method));\n\n        assembly {\n\n        // move pointer to free memory spot\n\n            let ptr := mload(0x40)\n\n        // put function sig at memory spot\n\n            mstore(ptr,sig)\n\n\n\n            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n\n            15000, // gas limit\n\n            c, // sload(dc_slot),  // to addr. append var to _slot to access storage variable\n\n            0, // not transfer any ether (comment if using staticcall)\n\n            ptr, // Inputs are stored at location ptr\n\n            0x04, // Inputs are 0 bytes long\n\n            ptr,  //Store output over input\n\n            0x20) //Outputs are 1 bytes long\n\n\n\n            if eq(result, 0) {\n\n                revert(0, 0)\n\n            }\n\n\n\n            answer := mload(ptr) // Assign output to answer var\n\n            mstore(0x40,add(ptr,0x24)) // Set storage pointer to new space\n\n        }\n",
          "message": "Call.params0 uses assembly (TwoKeyDonationCampaign.sol#659-685)\n\t- TwoKeyDonationCampaign.sol#663-685\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 687,
          "vulnerability_to_line": 715,
          "vulnerability_code": "    function params1(address c, bytes _method, uint _val) public view returns (uint answer) {\n\n        // https://medium.com/@blockchain101/calling-the-function-of-another-contract-in-solidity-f9edfa921f4c\n\n        //    dc = c;\n\n        bytes4 sig = bytes4(keccak256(_method));\n\n        assembly {\n\n        // move pointer to free memory spot\n\n            let ptr := mload(0x40)\n\n        // put function sig at memory spot\n\n            mstore(ptr,sig)\n\n        // append argument after function sig\n\n            mstore(add(ptr,0x04), _val)\n\n\n\n            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n\n            15000, // gas limit\n\n            c, // sload(dc_slot),  // to addr. append var to _slot to access storage variable\n\n            0, // not transfer any ether (comment if using staticcall)\n\n            ptr, // Inputs are stored at location ptr\n\n            0x24, // Inputs are 0 bytes long\n\n            ptr,  //Store output over input\n\n            0x20) //Outputs are 1 bytes long\n\n\n\n            if eq(result, 0) {\n\n                revert(0, 0)\n\n            }\n\n\n\n            answer := mload(ptr) // Assign output to answer var\n\n            mstore(0x40,add(ptr,0x24)) // Set storage pointer to new space\n\n        }\n",
          "message": "Call.params1 uses assembly (TwoKeyDonationCampaign.sol#687-715)\n\t- TwoKeyDonationCampaign.sol#691-715\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 717,
          "vulnerability_to_line": 747,
          "vulnerability_code": "    function params2(address c, bytes _method, uint _val1, uint _val2) public view returns (uint answer) {\n\n        // https://medium.com/@blockchain101/calling-the-function-of-another-contract-in-solidity-f9edfa921f4c\n\n        //    dc = c;\n\n        bytes4 sig = bytes4(keccak256(_method));\n\n        assembly {\n\n        // move pointer to free memory spot\n\n            let ptr := mload(0x40)\n\n        // put function sig at memory spot\n\n            mstore(ptr,sig)\n\n        // append argument after function sig\n\n            mstore(add(ptr,0x04), _val1)\n\n            mstore(add(ptr,0x24), _val2)\n\n\n\n            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n\n            15000, // gas limit\n\n            c, // sload(dc_slot),  // to addr. append var to _slot to access storage variable\n\n            0, // not transfer any ether (comment if using staticcall)\n\n            ptr, // Inputs are stored at location ptr\n\n            0x44, // Inputs are 4 bytes for signature and 2 uint256\n\n            ptr,  //Store output over input\n\n            0x20) //Outputs are 1 uint long\n\n\n\n        // TODO cause revert\n\n        //            if eq(result, 0) {\n\n        //                revert(0, 0)\n\n        //            }\n\n\n\n            answer := mload(ptr) // Assign output to answer var\n\n            mstore(0x40,add(ptr,0x20)) // Set storage pointer to new space\n\n        }\n",
          "message": "Call.params2 uses assembly (TwoKeyDonationCampaign.sol#717-747)\n\t- TwoKeyDonationCampaign.sol#721-747\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 749,
          "vulnerability_to_line": 757,
          "vulnerability_code": "    function loadAddress(bytes sig, uint idx) public pure returns (address) {\n\n        address influencer;\n\n        idx += 20;\n\n        assembly\n\n        {\n\n            influencer := mload(add(sig, idx))\n\n        }\n\n        return influencer;\n",
          "message": "Call.loadAddress uses assembly (TwoKeyDonationCampaign.sol#749-757)\n\t- TwoKeyDonationCampaign.sol#752-756\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 759,
          "vulnerability_to_line": 767,
          "vulnerability_code": "    function loadUint8(bytes sig, uint idx) public pure returns (uint8) {\n\n        uint8 weight;\n\n        idx += 1;\n\n        assembly\n\n        {\n\n            weight := mload(add(sig, idx))\n\n        }\n\n        return weight;\n",
          "message": "Call.loadUint8 uses assembly (TwoKeyDonationCampaign.sol#759-767)\n\t- TwoKeyDonationCampaign.sol#762-766\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 770,
          "vulnerability_to_line": 805,
          "vulnerability_code": "    function recoverHash(bytes32 hash, bytes sig, uint idx) public pure returns (address) {\n\n        // same as recoverHash in utils/sign.js\n\n        // The signature format is a compact form of:\n\n        //   {bytes32 r}{bytes32 s}{uint8 v}\n\n        // Compact means, uint8 is not padded to 32 bytes.\n\n        require (sig.length >= 65+idx, 'bad signature length');\n\n        idx += 32;\n\n        bytes32 r;\n\n        assembly\n\n        {\n\n            r := mload(add(sig, idx))\n\n        }\n\n\n\n        idx += 32;\n\n        bytes32 s;\n\n        assembly\n\n        {\n\n            s := mload(add(sig, idx))\n\n        }\n\n\n\n        idx += 1;\n\n        uint8 v;\n\n        assembly\n\n        {\n\n            v := mload(add(sig, idx))\n\n        }\n\n        if (v >= 32) { // handle case when signature was made with ethereum web3.eth.sign or getSign which is for signing ethereum transactions\n\n            v -= 32;\n\n            bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\"; // 32 is the number of bytes in the following hash\n\n            hash = keccak256(abi.encodePacked(prefix, hash));\n\n        }\n\n        if (v <= 1) v += 27;\n\n        require(v==27 || v==28,'bad sig v');\n\n        return ecrecover(hash, v, r, s);\n\n\n",
          "message": "Call.recoverHash uses assembly (TwoKeyDonationCampaign.sol#770-805)\n\t- TwoKeyDonationCampaign.sol#778-783\n\t- TwoKeyDonationCampaign.sol#785-790\n\t- TwoKeyDonationCampaign.sol#792-796\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 1058,
          "vulnerability_to_line": 1108,
          "vulnerability_code": "\tfunction getInfluencersKeysAndWeightsFromSignature(\n\n\t\tbytes sig,\n\n\t\taddress _converter\n\n\t)\n\n\tinternal\n\n\treturns (address[],address[],uint8[],address)\n\n\t{\n\n\t\t// move ARCs and set public_link keys and weights/cuts based on signature information\n\n\t\t// returns the last address in the sig\n\n\n\n\t\t// sig structure:\n\n\t\t// 1 byte version 0 or 1\n\n\t\t// 20 bytes are the address of the contractor or the influencer who created sig.\n\n\t\t//  this is the \"anchor\" of the link\n\n\t\t//  It must have a public key aleady stored for it in public_link_key\n\n\t\t// Begining of a loop on steps in the link:\n\n\t\t// * 65 bytes are step-signature using the secret from previous step\n\n\t\t// * message of the step that is going to be hashed and used to compute the above step-signature.\n\n\t\t//   message length depend on version 41 (version 0) or 86 (version 1):\n\n\t\t//   * 1 byte cut (percentage) each influencer takes from the bounty. the cut is stored in influencer2cut or weight for voting\n\n\t\t//   * 20 bytes address of influencer (version 0) or 65 bytes of signature of cut using the influencer address to sign\n\n\t\t//   * 20 bytes public key of the last secret\n\n\t\t// In the last step the message can be optional. If it is missing the message used is the address of the sender\n\n\t\taddress old_address;\n\n\t\t/**\n\n           old address -> plasma address\n\n           old key -> publicLinkKey[plasma]\n\n         */\n\n\t\tassembly\n\n\t\t{\n\n\t\t\told_address := mload(add(sig, 21))\n\n\t\t}\n\n\n\n\t\told_address = twoKeyEventSource.plasmaOf(old_address);\n\n\t\taddress old_key = public_link_key[old_address];\n\n\n\n\t\taddress[] memory influencers;\n\n\t\taddress[] memory keys;\n\n\t\tuint8[] memory weights;\n\n\t\t(influencers, keys, weights) = Call.recoverSig(sig, old_key, twoKeyEventSource.plasmaOf(_converter));\n\n\n\n\t\t// check if we exactly reached the end of the signature. this can only happen if the signature\n\n\t\t// was generated with free_join_take and in this case the last part of the signature must have been\n\n\t\t// generated by the caller of this method\n\n\t\trequire(// influencers[influencers.length-1] == msg.sender ||\n\n\t\t\tinfluencers[influencers.length-1] == twoKeyEventSource.plasmaOf(_converter) ||\n\n\t\t\tcontractor == msg.sender\n\n\t\t);\n\n\n\n\t\treturn (influencers, keys, weights, old_address);\n",
          "message": "TwoKeyCampaign.getInfluencersKeysAndWeightsFromSignature uses assembly (TwoKeyDonationCampaign.sol#1058-1108)\n\t- TwoKeyDonationCampaign.sol#1086-1091\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 969,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress twoKeyEconomy; // Address of twoKeyEconomy contract\n",
          "message": "TwoKeyCampaign.twoKeyEconomy should be constant (TwoKeyDonationCampaign.sol#969)\nUpgradeabilityCampaignStorage._implementation should be constant (TwoKeyDonationCampaign.sol#1502)\nUpgradeabilityCampaignStorage.twoKeyFactory should be constant (TwoKeyDonationCampaign.sol#1499)\nUpgradeabilityStorage._implementation should be constant (TwoKeyDonationCampaign.sol#218)\n"
        },
        {
          "name": "pragma",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": "Different versions of Solidity is used in TwoKeyDonationCampaign.sol:\n\t- Version used: ['^0.4.0', '^0.4.24']\n\t- TwoKeyDonationCampaign.sol#3 declares pragma solidity^0.4.24\n\t- TwoKeyDonationCampaign.sol#16 declares pragma solidity^0.4.24\n\t- TwoKeyDonationCampaign.sol#41 declares pragma solidity^0.4.24\n\t- TwoKeyDonationCampaign.sol#108 declares pragma solidity^0.4.24\n\t- TwoKeyDonationCampaign.sol#135 declares pragma solidity^0.4.24\n\t- TwoKeyDonationCampaign.sol#145 declares pragma solidity^0.4.24\n\t- TwoKeyDonationCampaign.sol#159 declares pragma solidity^0.4.24\n\t- TwoKeyDonationCampaign.sol#167 declares pragma solidity^0.4.24\n\t- TwoKeyDonationCampaign.sol#207 declares pragma solidity^0.4.24\n\t- TwoKeyDonationCampaign.sol#231 declares pragma solidity^0.4.24\n\t- TwoKeyDonationCampaign.sol#245 declares pragma solidity^0.4.24\n\t- TwoKeyDonationCampaign.sol#268 declares pragma solidity^0.4.0\n\t- TwoKeyDonationCampaign.sol#319 declares pragma solidity^0.4.24\n\t- TwoKeyDonationCampaign.sol#327 declares pragma solidity^0.4.24\n\t- TwoKeyDonationCampaign.sol#601 declares pragma solidity^0.4.24\n\t- TwoKeyDonationCampaign.sol#656 declares pragma solidity^0.4.24\n\t- TwoKeyDonationCampaign.sol#919 declares pragma solidity^0.4.24\n\t- TwoKeyDonationCampaign.sol#950 declares pragma solidity^0.4.24\n\t- TwoKeyDonationCampaign.sol#1294 declares pragma solidity^0.4.24\n\t- TwoKeyDonationCampaign.sol#1305 declares pragma solidity^0.4.24\n\t- TwoKeyDonationCampaign.sol#1392 declares pragma solidity^0.4.24\n\t- TwoKeyDonationCampaign.sol#1424 declares pragma solidity^0.4.24\n\t- TwoKeyDonationCampaign.sol#1436 declares pragma solidity^0.4.0\n\t- TwoKeyDonationCampaign.sol#1471 declares pragma solidity^0.4.0\n\t- TwoKeyDonationCampaign.sol#1489 declares pragma solidity^0.4.24\n\t- TwoKeyDonationCampaign.sol#1515 declares pragma solidity^0.4.24\n\t- TwoKeyDonationCampaign.sol#1528 declares pragma solidity^0.4.24\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getContractProxyAddress(string _contractName) public view returns (address);\n",
          "message": "ITwoKeySingletoneRegistryFetchAddress.getContractProxyAddress (TwoKeyDonationCampaign.sol#9) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getNonUpgradableContractAddress(string contractName) public view returns (address);\n",
          "message": "ITwoKeySingletoneRegistryFetchAddress.getNonUpgradableContractAddress (TwoKeyDonationCampaign.sol#10) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getLatestContractVersion(string contractName) public view returns (string);\n",
          "message": "ITwoKeySingletoneRegistryFetchAddress.getLatestContractVersion (TwoKeyDonationCampaign.sol#11) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function buyRate2key() public view returns (uint);\n",
          "message": "IUpgradableExchange.buyRate2key (TwoKeyDonationCampaign.sol#20) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function sellRate2key() public view returns (uint);\n",
          "message": "IUpgradableExchange.sellRate2key (TwoKeyDonationCampaign.sol#21) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": 28,
          "vulnerability_code": "    function buyTokens(\n\n        address _beneficiary\n\n    )\n\n    public\n\n    payable\n",
          "message": "IUpgradableExchange.buyTokens (TwoKeyDonationCampaign.sol#23-28) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": 36,
          "vulnerability_code": "    function buyStableCoinWith2key(\n\n        uint _twoKeyUnits,\n\n        address _beneficiary\n\n    )\n\n    public\n\n    payable\n",
          "message": "IUpgradableExchange.buyStableCoinWith2key (TwoKeyDonationCampaign.sol#30-36) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": 76,
          "vulnerability_code": "    function approve(\n\n        address _spender,\n\n        uint256 _value\n\n    )\n\n    public\n",
          "message": "IERC20.approve (TwoKeyDonationCampaign.sol#71-76) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addTwoKeyEventSource(address _twoKeyEventSource) public;\n",
          "message": "ITwoKeyReg.addTwoKeyEventSource (TwoKeyDonationCampaign.sol#112) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function changeTwoKeyEventSource(address _twoKeyEventSource) public;\n",
          "message": "ITwoKeyReg.changeTwoKeyEventSource (TwoKeyDonationCampaign.sol#113) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addWhereContractor(address _userAddress, address _contractAddress) public;\n",
          "message": "ITwoKeyReg.addWhereContractor (TwoKeyDonationCampaign.sol#114) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addWhereModerator(address _userAddress, address _contractAddress) public;\n",
          "message": "ITwoKeyReg.addWhereModerator (TwoKeyDonationCampaign.sol#115) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addWhereReferrer(address _userAddress, address _contractAddress) public;\n",
          "message": "ITwoKeyReg.addWhereReferrer (TwoKeyDonationCampaign.sol#116) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addWhereConverter(address _userAddress, address _contractAddress) public;\n",
          "message": "ITwoKeyReg.addWhereConverter (TwoKeyDonationCampaign.sol#117) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getContractsWhereUserIsContractor(address _userAddress) public view returns (address[]);\n",
          "message": "ITwoKeyReg.getContractsWhereUserIsContractor (TwoKeyDonationCampaign.sol#118) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 119,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getContractsWhereUserIsModerator(address _userAddress) public view returns (address[]);\n",
          "message": "ITwoKeyReg.getContractsWhereUserIsModerator (TwoKeyDonationCampaign.sol#119) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 120,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getContractsWhereUserIsRefferer(address _userAddress) public view returns (address[]);\n",
          "message": "ITwoKeyReg.getContractsWhereUserIsRefferer (TwoKeyDonationCampaign.sol#120) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 121,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getContractsWhereUserIsConverter(address _userAddress) public view returns (address[]);\n",
          "message": "ITwoKeyReg.getContractsWhereUserIsConverter (TwoKeyDonationCampaign.sol#121) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 122,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTwoKeyEventSourceAddress() public view returns (address);\n",
          "message": "ITwoKeyReg.getTwoKeyEventSourceAddress (TwoKeyDonationCampaign.sol#122) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addName(string _name, address _sender, string _fullName, string _email, bytes signature) public;\n",
          "message": "ITwoKeyReg.addName (TwoKeyDonationCampaign.sol#123) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 124,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addNameByUser(string _name) public;\n",
          "message": "ITwoKeyReg.addNameByUser (TwoKeyDonationCampaign.sol#124) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getName2Owner(string _name) public view returns (address);\n",
          "message": "ITwoKeyReg.getName2Owner (TwoKeyDonationCampaign.sol#125) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 126,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getOwner2Name(address _sender) public view returns (string);\n",
          "message": "ITwoKeyReg.getOwner2Name (TwoKeyDonationCampaign.sol#126) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 127,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getPlasmaToEthereum(address plasma) public view returns (address);\n",
          "message": "ITwoKeyReg.getPlasmaToEthereum (TwoKeyDonationCampaign.sol#127) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getEthereumToPlasma(address ethereum) public view returns (address);\n",
          "message": "ITwoKeyReg.getEthereumToPlasma (TwoKeyDonationCampaign.sol#128) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function checkIfTwoKeyMaintainerExists(address _maintainer) public view returns (bool);\n",
          "message": "ITwoKeyReg.checkIfTwoKeyMaintainerExists (TwoKeyDonationCampaign.sol#129) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getDefaultIntegratorFeePercent() public view returns (uint);\n",
          "message": "ITwoKeyAdmin.getDefaultIntegratorFeePercent (TwoKeyDonationCampaign.sol#138) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 139,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getDefaultNetworkTaxPercent() public view returns (uint);\n",
          "message": "ITwoKeyAdmin.getDefaultNetworkTaxPercent (TwoKeyDonationCampaign.sol#139) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isCampaignValidated(address campaign) public view returns (bool);\n",
          "message": "ITwoKeyCampaignValidator.isCampaignValidated (TwoKeyDonationCampaign.sol#151) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 152,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isConversionHandlerCodeValid(address conversionHandler) public view returns (bool);\n",
          "message": "ITwoKeyCampaignValidator.isConversionHandlerCodeValid (TwoKeyDonationCampaign.sol#152) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 153,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function validateAcquisitionCampaign(address campaign, string nonSingletonHash) public;\n",
          "message": "ITwoKeyCampaignValidator.validateAcquisitionCampaign (TwoKeyDonationCampaign.sol#153) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 154,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function validateDonationCampaign(address campaign, address donationConversionHandler, string nonSingletonHash) public;\n",
          "message": "ITwoKeyCampaignValidator.validateDonationCampaign (TwoKeyDonationCampaign.sol#154) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 162,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function onlyMaintainer(address _sender) public view returns (bool);\n",
          "message": "ITwoKeyMaintainersRegistry.onlyMaintainer (TwoKeyDonationCampaign.sol#162) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addVersion(string _contractName, string version, address implementation) public;\n",
          "message": "ITwoKeySingletonesRegistry.addVersion (TwoKeyDonationCampaign.sol#194) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 202,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getVersion(string _contractName, string version) public view returns (address);\n",
          "message": "ITwoKeySingletonesRegistry.getVersion (TwoKeyDonationCampaign.sol#202) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": 226,
          "vulnerability_code": "    function implementation() public view returns (address) {\n\n        return _implementation;\n",
          "message": "UpgradeabilityStorage.implementation (TwoKeyDonationCampaign.sol#224-226) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 238,
          "vulnerability_to_line": 240,
          "vulnerability_code": "    function initialize(address sender) public payable {\n\n        require(msg.sender == address(registry));\n",
          "message": "Upgradeable.initialize (TwoKeyDonationCampaign.sol#238-240) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 521,
          "vulnerability_to_line": 534,
          "vulnerability_code": "    function plasmaOf(\n\n        address me\n\n    )\n\n    public\n\n    view\n\n    returns (address)\n\n    {\n\n        address twoKeyRegistry = getAddressFromTwoKeySingletonRegistry(\"TwoKeyRegistry\");\n\n        address plasma = ITwoKeyReg(twoKeyRegistry).getEthereumToPlasma(me);\n\n        if (plasma != address(0)) {\n\n            return plasma;\n\n        }\n\n        return me;\n",
          "message": "TwoKeyEventSource.plasmaOf (TwoKeyDonationCampaign.sol#521-534) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 541,
          "vulnerability_to_line": 554,
          "vulnerability_code": "    function ethereumOf(\n\n        address me\n\n    )\n\n    public\n\n    view\n\n    returns (address)\n\n    {\n\n        address twoKeyRegistry = getAddressFromTwoKeySingletonRegistry(\"TwoKeyRegistry\");\n\n        address ethereum = ITwoKeyReg(twoKeyRegistry).getPlasmaToEthereum(me);\n\n        if (ethereum != address(0)) {\n\n            return ethereum;\n\n        }\n\n        return me;\n",
          "message": "TwoKeyEventSource.ethereumOf (TwoKeyDonationCampaign.sol#541-554) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 560,
          "vulnerability_to_line": 570,
          "vulnerability_code": "    function isAddressMaintainer(\n\n        address _maintainer\n\n    )\n\n    public\n\n    view\n\n    returns (bool)\n\n    {\n\n        address twoKeyMaintainersRegistry = getAddressFromTwoKeySingletonRegistry(\"TwoKeyMaintainersRegistry\");\n\n        bool _isMaintainer = ITwoKeyMaintainersRegistry(twoKeyMaintainersRegistry).onlyMaintainer(_maintainer);\n\n        return _isMaintainer;\n",
          "message": "TwoKeyEventSource.isAddressMaintainer (TwoKeyDonationCampaign.sol#560-570) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 575,
          "vulnerability_to_line": 583,
          "vulnerability_code": "    function getTwoKeyDefaultIntegratorFeeFromAdmin()\n\n    public\n\n    view\n\n    returns (uint)\n\n    {\n\n        address twoKeyAdmin = getAddressFromTwoKeySingletonRegistry(\"TwoKeyAdmin\");\n\n        uint integratorFeePercentage = ITwoKeyAdmin(twoKeyAdmin).getDefaultIntegratorFeePercent();\n\n        return integratorFeePercentage;\n",
          "message": "TwoKeyEventSource.getTwoKeyDefaultIntegratorFeeFromAdmin (TwoKeyDonationCampaign.sol#575-583) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 588,
          "vulnerability_to_line": 596,
          "vulnerability_code": "    function getTwoKeyDefaultNetworkTaxPercent()\n\n    public\n\n    view\n\n    returns (uint)\n\n    {\n\n        address twoKeyAdmin = getAddressFromTwoKeySingletonRegistry(\"TwoKeyAdmin\");\n\n        uint networkTaxPercent = ITwoKeyAdmin(twoKeyAdmin).getDefaultNetworkTaxPercent();\n\n        return networkTaxPercent;\n",
          "message": "TwoKeyEventSource.getTwoKeyDefaultNetworkTaxPercent (TwoKeyDonationCampaign.sol#588-596) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 659,
          "vulnerability_to_line": 685,
          "vulnerability_code": "    function params0(address c, bytes _method) public view returns (uint answer) {\n\n        // https://medium.com/@blockchain101/calling-the-function-of-another-contract-in-solidity-f9edfa921f4c\n\n        //    dc = c;\n\n        bytes4 sig = bytes4(keccak256(_method));\n\n        assembly {\n\n        // move pointer to free memory spot\n\n            let ptr := mload(0x40)\n\n        // put function sig at memory spot\n\n            mstore(ptr,sig)\n\n\n\n            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n\n            15000, // gas limit\n\n            c, // sload(dc_slot),  // to addr. append var to _slot to access storage variable\n\n            0, // not transfer any ether (comment if using staticcall)\n\n            ptr, // Inputs are stored at location ptr\n\n            0x04, // Inputs are 0 bytes long\n\n            ptr,  //Store output over input\n\n            0x20) //Outputs are 1 bytes long\n\n\n\n            if eq(result, 0) {\n\n                revert(0, 0)\n\n            }\n\n\n\n            answer := mload(ptr) // Assign output to answer var\n\n            mstore(0x40,add(ptr,0x24)) // Set storage pointer to new space\n\n        }\n",
          "message": "Call.params0 (TwoKeyDonationCampaign.sol#659-685) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 687,
          "vulnerability_to_line": 715,
          "vulnerability_code": "    function params1(address c, bytes _method, uint _val) public view returns (uint answer) {\n\n        // https://medium.com/@blockchain101/calling-the-function-of-another-contract-in-solidity-f9edfa921f4c\n\n        //    dc = c;\n\n        bytes4 sig = bytes4(keccak256(_method));\n\n        assembly {\n\n        // move pointer to free memory spot\n\n            let ptr := mload(0x40)\n\n        // put function sig at memory spot\n\n            mstore(ptr,sig)\n\n        // append argument after function sig\n\n            mstore(add(ptr,0x04), _val)\n\n\n\n            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n\n            15000, // gas limit\n\n            c, // sload(dc_slot),  // to addr. append var to _slot to access storage variable\n\n            0, // not transfer any ether (comment if using staticcall)\n\n            ptr, // Inputs are stored at location ptr\n\n            0x24, // Inputs are 0 bytes long\n\n            ptr,  //Store output over input\n\n            0x20) //Outputs are 1 bytes long\n\n\n\n            if eq(result, 0) {\n\n                revert(0, 0)\n\n            }\n\n\n\n            answer := mload(ptr) // Assign output to answer var\n\n            mstore(0x40,add(ptr,0x24)) // Set storage pointer to new space\n\n        }\n",
          "message": "Call.params1 (TwoKeyDonationCampaign.sol#687-715) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 717,
          "vulnerability_to_line": 747,
          "vulnerability_code": "    function params2(address c, bytes _method, uint _val1, uint _val2) public view returns (uint answer) {\n\n        // https://medium.com/@blockchain101/calling-the-function-of-another-contract-in-solidity-f9edfa921f4c\n\n        //    dc = c;\n\n        bytes4 sig = bytes4(keccak256(_method));\n\n        assembly {\n\n        // move pointer to free memory spot\n\n            let ptr := mload(0x40)\n\n        // put function sig at memory spot\n\n            mstore(ptr,sig)\n\n        // append argument after function sig\n\n            mstore(add(ptr,0x04), _val1)\n\n            mstore(add(ptr,0x24), _val2)\n\n\n\n            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n\n            15000, // gas limit\n\n            c, // sload(dc_slot),  // to addr. append var to _slot to access storage variable\n\n            0, // not transfer any ether (comment if using staticcall)\n\n            ptr, // Inputs are stored at location ptr\n\n            0x44, // Inputs are 4 bytes for signature and 2 uint256\n\n            ptr,  //Store output over input\n\n            0x20) //Outputs are 1 uint long\n\n\n\n        // TODO cause revert\n\n        //            if eq(result, 0) {\n\n        //                revert(0, 0)\n\n        //            }\n\n\n\n            answer := mload(ptr) // Assign output to answer var\n\n            mstore(0x40,add(ptr,0x20)) // Set storage pointer to new space\n\n        }\n",
          "message": "Call.params2 (TwoKeyDonationCampaign.sol#717-747) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 889,
          "vulnerability_to_line": 914,
          "vulnerability_code": "    function recoverSig(bytes sig, address old_key, address last_address) public pure returns (address[], address[], uint8[]) {\n\n        // validate sig AND\n\n        // recover the information from the signature: influencers, public_link_keys, weights/cuts\n\n        // influencers may have one more address than the keys and weights arrays\n\n        //\n\n        require(old_key != address(0),'no public link key');\n\n\n\n        address[] memory influencers;\n\n        address[] memory keys;\n\n        uint8[] memory weights;\n\n        uint[] memory offsets;\n\n        (influencers, keys, weights, offsets) = recoverSigParts(sig, last_address);\n\n\n\n        // check if we received a valid signature\n\n        for(uint i = 0; i < influencers.length; i++) {\n\n            if (i < weights.length) {\n\n                require (recoverHash(keccak256(abi.encodePacked(weights[i], keys[i], influencers[i])),sig,offsets[i]) == old_key, 'illegal signature');\n\n                old_key = keys[i];\n\n            } else {\n\n                // signed message for the last step is the address of the converter\n\n                require (recoverHash(keccak256(abi.encodePacked(influencers[i])),sig,offsets[i]) == old_key, 'illegal last signature');\n\n            }\n\n        }\n\n\n\n        return (influencers, keys, weights);\n",
          "message": "Call.recoverSig (TwoKeyDonationCampaign.sol#889-914) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 933,
          "vulnerability_to_line": 935,
          "vulnerability_code": "    function totalSupply() public view returns (uint256) {\n\n        return totalSupply_;\n",
          "message": "ArcERC20.totalSupply (TwoKeyDonationCampaign.sol#933-935) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1114,
          "vulnerability_to_line": 1120,
          "vulnerability_code": "    function setPublicLinkKey(\n\n\t\taddress new_public_key\n\n\t)\n\n\tpublic\n\n\t{\n\n        setPublicLinkKeyOf(msg.sender, new_public_key);\n",
          "message": "TwoKeyCampaign.setPublicLinkKey (TwoKeyDonationCampaign.sol#1114-1120) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1128,
          "vulnerability_to_line": 1140,
          "vulnerability_code": "\tfunction startCampaignWithInitialParams(\n\n\t\tstring _publicMetaHash,\n\n\t\tstring _privateMetaHash,\n\n\t\taddress new_public_key\n\n\t)\n\n\tpublic\n\n\tonlyContractor\n\n\t{\n\n\t\t//TODO: Handle option to update only one of 3 and other setters\n\n\t\tpublicMetaHash = _publicMetaHash;\n\n\t\tprivateMetaHash = _privateMetaHash;\n\n\t\tsetPublicLinkKeyOf(msg.sender, new_public_key);\n",
          "message": "TwoKeyCampaign.startCampaignWithInitialParams (TwoKeyDonationCampaign.sol#1128-1140) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1165,
          "vulnerability_to_line": 1173,
          "vulnerability_code": "\tfunction getReceivedFrom(\n\n\t\taddress _receiver\n\n\t)\n\n\tpublic\n\n\tview\n\n\treturns (address)\n\n\t{\n\n\t\treturn received_from[_receiver];\n",
          "message": "TwoKeyCampaign.getReceivedFrom (TwoKeyDonationCampaign.sol#1165-1173) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1179,
          "vulnerability_to_line": 1187,
          "vulnerability_code": "\tfunction publicLinkKeyOf(\n\n\t\taddress me\n\n\t)\n\n\tpublic\n\n\tview\n\n\treturns (address)\n\n\t{\n\n\t\treturn public_link_key[twoKeyEventSource.plasmaOf(me)];\n",
          "message": "TwoKeyCampaign.publicLinkKeyOf (TwoKeyDonationCampaign.sol#1179-1187) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1192,
          "vulnerability_to_line": 1198,
          "vulnerability_code": "    function getConstantInfo()\n\n\tpublic\n\n\tview\n\n\treturns (uint,uint,bool)\n\n\t{\n\n        return (conversionQuota, maxReferralRewardPercent, isKYCRequired);\n",
          "message": "TwoKeyCampaign.getConstantInfo (TwoKeyDonationCampaign.sol#1192-1198) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1205,
          "vulnerability_to_line": 1211,
          "vulnerability_code": "    function getModeratorTotalEarnings()\n\n\tpublic\n\n\tview\n\n\treturns (uint)\n\n\t{\n\n        return (moderatorTotalEarnings2key);\n",
          "message": "TwoKeyCampaign.getModeratorTotalEarnings (TwoKeyDonationCampaign.sol#1205-1211) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1256,
          "vulnerability_to_line": 1289,
          "vulnerability_code": "\tfunction referrerWithdraw(\n\n\t\taddress _address,\n\n\t\tbool _withdrawAsStable\n\n\t)\n\n\tpublic\n\n\t{\n\n\t\trequire(msg.sender == _address || twoKeyEventSource.isAddressMaintainer(msg.sender));\n\n\t\taddress twoKeyAdminAddress;\n\n\t\taddress twoKeyUpgradableExchangeContract;\n\n\n\n\t\tuint balance;\n\n\t\taddress _referrer = twoKeyEventSource.plasmaOf(_address);\n\n\n\n\t\tif(referrerPlasma2Balances2key[_referrer] != 0) {\n\n\t\t\ttwoKeyAdminAddress = getContractProxyAddress(\"TwoKeyAdmin\");\n\n\t\t\ttwoKeyUpgradableExchangeContract = getContractProxyAddress(\"TwoKeyUpgradableExchange\");\n\n\n\n\t\t\tbalance = referrerPlasma2Balances2key[_referrer];\n\n\t\t\treferrerPlasma2Balances2key[_referrer] = 0;\n\n\n\n\t\t\tif(_withdrawAsStable == true) {\n\n\t\t\t\tIERC20(twoKeyEconomy).approve(twoKeyUpgradableExchangeContract, balance);\n\n\t\t\t\tIUpgradableExchange(twoKeyUpgradableExchangeContract).buyStableCoinWith2key(balance, _address);\n\n\t\t\t}\n\n\t\t\telse if (block.timestamp >= ITwoKeyAdmin(twoKeyAdminAddress).getTwoKeyRewardsReleaseDate()) {\n\n\t\t\t\tIERC20(twoKeyEconomy).transfer(_address, balance);\n\n\t\t\t}\n\n\t\t\telse {\n\n\t\t\t\trevert();\n\n\t\t\t}\n\n\n\n\t\t}\n\n        reservedAmount2keyForRewards -= balance;\n",
          "message": "TwoKeyCampaign.referrerWithdraw (TwoKeyDonationCampaign.sol#1256-1289) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1439,
          "vulnerability_to_line": 1446,
          "vulnerability_code": "    function supportForCreateConversion(\n\n        address _converterAddress,\n\n        uint _conversionAmount,\n\n        uint _maxReferralRewardETHWei,\n\n        bool _isKYCRequired\n\n    )\n\n    public\n",
          "message": "ITwoKeyDonationConversionHandler.supportForCreateConversion (TwoKeyDonationCampaign.sol#1439-1446) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1448,
          "vulnerability_to_line": 1451,
          "vulnerability_code": "    function executeConversion(\n\n        uint _conversionId\n\n    )\n",
          "message": "ITwoKeyDonationConversionHandler.executeConversion (TwoKeyDonationCampaign.sol#1448-1451) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1453,
          "vulnerability_to_line": 1458,
          "vulnerability_code": "    function getAmountConverterSpent(\n\n        address converter\n\n    )\n\n    public\n\n    view\n",
          "message": "ITwoKeyDonationConversionHandler.getAmountConverterSpent (TwoKeyDonationCampaign.sol#1453-1458) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1474,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getReferrers(address customer) public view returns (address[]);\n",
          "message": "ITwoKeyDonationLogicHandler.getReferrers (TwoKeyDonationCampaign.sol#1474) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1476,
          "vulnerability_to_line": 1482,
          "vulnerability_code": "    function updateRefchainRewards(\n\n        uint256 _maxReferralRewardETHWei,\n\n        address _converter,\n\n        uint _conversionId,\n\n        uint totalBounty2keys\n\n    )\n",
          "message": "ITwoKeyDonationLogicHandler.updateRefchainRewards (TwoKeyDonationCampaign.sol#1476-1482) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1484,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getReferrerPlasmaTotalEarnings(address _referrer) public view returns (uint);\n",
          "message": "ITwoKeyDonationLogicHandler.getReferrerPlasmaTotalEarnings (TwoKeyDonationCampaign.sol#1484) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1508,
          "vulnerability_to_line": 1510,
          "vulnerability_code": "    function implementation() public view returns (address) {\n\n        return _implementation;\n",
          "message": "UpgradeabilityCampaignStorage.implementation (TwoKeyDonationCampaign.sol#1508-1510) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1559,
          "vulnerability_to_line": 1599,
          "vulnerability_code": "    function setInitialParamsDonationCampaign(\n\n        address _contractor,\n\n        address _moderator,\n\n        address _twoKeySingletonRegistry,\n\n        address _twoKeyDonationConversionHandler,\n\n        address _twoKeyDonationLogicHandler,\n\n        uint [] numberValues,\n\n        bool [] booleanValues\n\n    )\n\n    public\n\n    {\n\n        require(initialized == false);\n\n\n\n        contractor = _contractor;\n\n        // Moderator address\n\n        moderator = _moderator;\n\n\n\n        twoKeySingletonesRegistry = _twoKeySingletonRegistry;\n\n        twoKeyEventSource = TwoKeyEventSource(getContractProxyAddress(\"TwoKeyEventSource\"));\n\n\n\n        totalSupply_ = 1000000;\n\n\n\n        maxReferralRewardPercent = numberValues[0];\n\n        conversionQuota = numberValues[6];\n\n\n\n        twoKeyDonationConversionHandler = _twoKeyDonationConversionHandler;\n\n        twoKeyDonationLogicHandler = _twoKeyDonationLogicHandler;\n\n\n\n\n\n        mustConvertToReferr = booleanValues[0];\n\n        isKYCRequired = booleanValues[1];\n\n        acceptsFiat = booleanValues[2];\n\n\n\n\n\n        ownerPlasma = twoKeyEventSource.plasmaOf(_contractor);\n\n        received_from[ownerPlasma] = ownerPlasma;\n\n        balances[ownerPlasma] = totalSupply_;\n\n\n\n\n\n        initialized = true;\n",
          "message": "TwoKeyDonationCampaign.setInitialParamsDonationCampaign (TwoKeyDonationCampaign.sol#1559-1599) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1625,
          "vulnerability_to_line": 1631,
          "vulnerability_code": "    function setCut(\n\n        uint256 cut\n\n    )\n\n    public\n\n    {\n\n        setCutOf(msg.sender, cut);\n",
          "message": "TwoKeyDonationCampaign.setCut (TwoKeyDonationCampaign.sol#1625-1631) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1699,
          "vulnerability_to_line": 1707,
          "vulnerability_code": "    function updateContractorProceeds(\n\n        uint value\n\n    )\n\n    public\n\n    {\n\n        require(msg.sender == twoKeyDonationConversionHandler);\n\n        contractorTotalProceeds = contractorTotalProceeds.add(value);\n\n        contractorBalance = contractorBalance.add(value);\n",
          "message": "TwoKeyDonationCampaign.updateContractorProceeds (TwoKeyDonationCampaign.sol#1699-1707) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1714,
          "vulnerability_to_line": 1722,
          "vulnerability_code": "    function joinAndShareARC(\n\n        bytes signature,\n\n        address receiver\n\n    )\n\n    public\n\n    {\n\n        distributeArcsBasedOnSignature(signature, msg.sender);\n\n        transferFrom(twoKeyEventSource.plasmaOf(msg.sender), twoKeyEventSource.plasmaOf(receiver), 1);\n",
          "message": "TwoKeyDonationCampaign.joinAndShareARC (TwoKeyDonationCampaign.sol#1714-1722) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1728,
          "vulnerability_to_line": 1740,
          "vulnerability_code": "    function convert(\n\n        bytes signature\n\n    )\n\n    public\n\n    payable\n\n    {\n\n        address _converterPlasma = twoKeyEventSource.plasmaOf(msg.sender);\n\n        if(received_from[_converterPlasma] == address(0)) {\n\n            distributeArcsBasedOnSignature(signature, msg.sender);\n\n        }\n\n        createConversion(msg.value, msg.sender);\n\n        twoKeyEventSource.converted(address(this),msg.sender,msg.value);\n",
          "message": "TwoKeyDonationCampaign.convert (TwoKeyDonationCampaign.sol#1728-1740) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1773,
          "vulnerability_to_line": 1797,
          "vulnerability_code": "    function buyTokensAndDistributeReferrerRewards(\n\n        uint256 _maxReferralRewardETHWei,\n\n        address _converter,\n\n        uint _conversionId\n\n    )\n\n    public\n\n    returns (uint)\n\n    {\n\n        require(msg.sender == twoKeyDonationConversionHandler);\n\n        //Fiat rewards = fiatamount * moderatorPercentage / 100  / 0.095\n\n        uint totalBounty2keys;\n\n        //If fiat conversion do exactly the same just send different reward and don't buy tokens, take them from contract\n\n        if(maxReferralRewardPercent > 0) {\n\n            //Buy tokens from upgradable exchange\n\n            totalBounty2keys = buyTokensFromUpgradableExchange(_maxReferralRewardETHWei, address(this));\n\n            //Handle refchain rewards\n\n            ITwoKeyDonationLogicHandler(twoKeyDonationLogicHandler).updateRefchainRewards(\n\n                _maxReferralRewardETHWei,\n\n                _converter,\n\n                _conversionId,\n\n                totalBounty2keys);\n\n        }\n\n        reservedAmount2keyForRewards = reservedAmount2keyForRewards.add(totalBounty2keys);\n\n        return totalBounty2keys;\n",
          "message": "TwoKeyDonationCampaign.buyTokensAndDistributeReferrerRewards (TwoKeyDonationCampaign.sol#1773-1797) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1803,
          "vulnerability_to_line": 1821,
          "vulnerability_code": "    function buyTokensForModeratorRewards(\n\n        uint moderatorFee\n\n    )\n\n    public\n\n    onlyTwoKeyDonationConversionHandler\n\n    {\n\n        //Get deep freeze token pool address\n\n        address twoKeyDeepFreezeTokenPool = getContractProxyAddress(\"TwoKeyDeepFreezeTokenPool\");\n\n\n\n        uint networkFee = twoKeyEventSource.getTwoKeyDefaultNetworkTaxPercent();\n\n\n\n        // Balance which will go to moderator\n\n        uint balance = moderatorFee.mul(100-networkFee).div(100);\n\n\n\n        uint moderatorEarnings2key = buyTokensFromUpgradableExchange(balance,moderator); // Buy tokens for moderator\n\n        buyTokensFromUpgradableExchange(moderatorFee - balance, twoKeyDeepFreezeTokenPool); // Buy tokens for deep freeze token pool\n\n\n\n        moderatorTotalEarnings2key = moderatorTotalEarnings2key.add(moderatorEarnings2key);\n",
          "message": "TwoKeyDonationCampaign.buyTokensForModeratorRewards (TwoKeyDonationCampaign.sol#1803-1821) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1828,
          "vulnerability_to_line": 1845,
          "vulnerability_code": "    function getReferrerCuts(\n\n        address last_influencer\n\n    )\n\n    public\n\n    view\n\n    returns (uint256[])\n\n    {\n\n        address[] memory influencers = ITwoKeyDonationLogicHandler(twoKeyDonationLogicHandler).getReferrers(last_influencer);\n\n        uint256[] memory cuts = new uint256[](influencers.length + 1);\n\n\n\n        uint numberOfInfluencers = influencers.length;\n\n        for (uint i = 0; i < numberOfInfluencers; i++) {\n\n            address influencer = influencers[i];\n\n            cuts[i] = getReferrerCut(influencer);\n\n        }\n\n        cuts[influencers.length] = getReferrerCut(last_influencer);\n\n        return cuts;\n",
          "message": "TwoKeyDonationCampaign.getReferrerCuts (TwoKeyDonationCampaign.sol#1828-1845) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1851,
          "vulnerability_to_line": 1853,
          "vulnerability_code": "    function getReferrerBalance(address _referrer) public view returns (uint) {\n\n        return referrerPlasma2Balances2key[twoKeyEventSource.plasmaOf(_referrer)];\n",
          "message": "TwoKeyDonationCampaign.getReferrerBalance (TwoKeyDonationCampaign.sol#1851-1853) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1860,
          "vulnerability_to_line": 1868,
          "vulnerability_code": "    function updateReferrerPlasmaBalance(\n\n        address _influencer,\n\n        uint _balance\n\n    )\n\n    public\n\n    {\n\n        require(msg.sender == twoKeyDonationLogicHandler);\n\n        referrerPlasma2Balances2key[_influencer] = referrerPlasma2Balances2key[_influencer].add(_balance);\n",
          "message": "TwoKeyDonationCampaign.updateReferrerPlasmaBalance (TwoKeyDonationCampaign.sol#1860-1868) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1880,
          "vulnerability_to_line": 1882,
          "vulnerability_code": "    function getReservedAmount2keyForRewards() public view returns (uint) {\n\n        return reservedAmount2keyForRewards;\n",
          "message": "TwoKeyDonationCampaign.getReservedAmount2keyForRewards (TwoKeyDonationCampaign.sol#1880-1882) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1889,
          "vulnerability_to_line": 1898,
          "vulnerability_code": "    function getReferrerPlasmaBalance(\n\n        address _influencer\n\n    )\n\n    public\n\n    view\n\n    returns (uint)\n\n    {\n\n        require(msg.sender == twoKeyDonationLogicHandler);\n\n        return (referrerPlasma2Balances2key[_influencer]);\n",
          "message": "TwoKeyDonationCampaign.getReferrerPlasmaBalance (TwoKeyDonationCampaign.sol#1889-1898) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 268,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;\n",
          "message": "Detected issues with version pragma in TwoKeyDonationCampaign.sol:\n\t- pragma solidity^0.4.0 (TwoKeyDonationCampaign.sol#268): it allows old versions\n\t- pragma solidity^0.4.0 (TwoKeyDonationCampaign.sol#1436): it allows old versions\n\t- pragma solidity^0.4.0 (TwoKeyDonationCampaign.sol#1471): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 218,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address internal _implementation;\n",
          "message": "Variable 'UpgradeabilityStorage._implementation' (TwoKeyDonationCampaign.sol#218) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 250,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address public TWO_KEY_SINGLETON_REGISTRY;\n",
          "message": "Variable 'ITwoKeySingletonUtils.TWO_KEY_SINGLETON_REGISTRY' (TwoKeyDonationCampaign.sol#250) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 412,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _twoKeySingletonesRegistry,\n",
          "message": "Parameter '_twoKeySingletonesRegistry' of TwoKeyEventSource.setInitialParams (TwoKeyDonationCampaign.sol#412) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 413,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _proxyStorage\n",
          "message": "Parameter '_proxyStorage' of TwoKeyEventSource.setInitialParams (TwoKeyDonationCampaign.sol#413) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 433,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _campaign,\n",
          "message": "Parameter '_campaign' of TwoKeyEventSource.created (TwoKeyDonationCampaign.sol#433) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 434,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _owner,\n",
          "message": "Parameter '_owner' of TwoKeyEventSource.created (TwoKeyDonationCampaign.sol#434) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 435,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _moderator\n",
          "message": "Parameter '_moderator' of TwoKeyEventSource.created (TwoKeyDonationCampaign.sol#435) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 454,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _campaign,\n",
          "message": "Parameter '_campaign' of TwoKeyEventSource.joined (TwoKeyDonationCampaign.sol#454) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 455,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _from,\n",
          "message": "Parameter '_from' of TwoKeyEventSource.joined (TwoKeyDonationCampaign.sol#455) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 456,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _to\n",
          "message": "Parameter '_to' of TwoKeyEventSource.joined (TwoKeyDonationCampaign.sol#456) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 474,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _campaign,\n",
          "message": "Parameter '_campaign' of TwoKeyEventSource.converted (TwoKeyDonationCampaign.sol#474) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 475,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _converter,\n",
          "message": "Parameter '_converter' of TwoKeyEventSource.converted (TwoKeyDonationCampaign.sol#475) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 476,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _amountETHWei\n",
          "message": "Parameter '_amountETHWei' of TwoKeyEventSource.converted (TwoKeyDonationCampaign.sol#476) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 493,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _campaign,\n",
          "message": "Parameter '_campaign' of TwoKeyEventSource.rewarded (TwoKeyDonationCampaign.sol#493) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 494,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _to,\n",
          "message": "Parameter '_to' of TwoKeyEventSource.rewarded (TwoKeyDonationCampaign.sol#494) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 495,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _amount\n",
          "message": "Parameter '_amount' of TwoKeyEventSource.rewarded (TwoKeyDonationCampaign.sol#495) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 510,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address  _campaign,\n",
          "message": "Parameter '_campaign' of TwoKeyEventSource.cancelled (TwoKeyDonationCampaign.sol#510) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 511,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _converter,\n",
          "message": "Parameter '_converter' of TwoKeyEventSource.cancelled (TwoKeyDonationCampaign.sol#511) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 512,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _indexOrAmount\n",
          "message": "Parameter '_indexOrAmount' of TwoKeyEventSource.cancelled (TwoKeyDonationCampaign.sol#512) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 561,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _maintainer\n",
          "message": "Parameter '_maintainer' of TwoKeyEventSource.isAddressMaintainer (TwoKeyDonationCampaign.sol#561) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 340,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ITwoKeyEventSourceStorage public PROXY_STORAGE_CONTRACT;\n",
          "message": "Variable 'TwoKeyEventSource.PROXY_STORAGE_CONTRACT' (TwoKeyDonationCampaign.sol#340) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 613,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_a' of SafeMath.mul (TwoKeyDonationCampaign.sol#613) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 613,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_b' of SafeMath.mul (TwoKeyDonationCampaign.sol#613) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 629,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_a' of SafeMath.div (TwoKeyDonationCampaign.sol#629) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 629,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_b' of SafeMath.div (TwoKeyDonationCampaign.sol#629) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 639,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_a' of SafeMath.sub (TwoKeyDonationCampaign.sol#639) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 639,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_b' of SafeMath.sub (TwoKeyDonationCampaign.sol#639) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 647,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_a' of SafeMath.add (TwoKeyDonationCampaign.sol#647) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 647,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_b' of SafeMath.add (TwoKeyDonationCampaign.sol#647) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 659,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params0(address c, bytes _method) public view returns (uint answer) {\n",
          "message": "Parameter '_method' of Call.params0 (TwoKeyDonationCampaign.sol#659) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 687,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params1(address c, bytes _method, uint _val) public view returns (uint answer) {\n",
          "message": "Parameter '_method' of Call.params1 (TwoKeyDonationCampaign.sol#687) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 717,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params2(address c, bytes _method, uint _val1, uint _val2) public view returns (uint answer) {\n",
          "message": "Parameter '_method' of Call.params2 (TwoKeyDonationCampaign.sol#717) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 822,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigParts(bytes sig, address last_address) private pure returns (address[], address[], uint8[], uint[]) {\n",
          "message": "Parameter 'last_address' of Call.recoverSigParts (TwoKeyDonationCampaign.sol#822) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 889,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSig(bytes sig, address old_key, address last_address) public pure returns (address[], address[], uint8[]) {\n",
          "message": "Parameter 'old_key' of Call.recoverSig (TwoKeyDonationCampaign.sol#889) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 889,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSig(bytes sig, address old_key, address last_address) public pure returns (address[], address[], uint8[]) {\n",
          "message": "Parameter 'last_address' of Call.recoverSig (TwoKeyDonationCampaign.sol#889) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 942,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint256) {\n",
          "message": "Parameter '_owner' of ArcERC20.balanceOf (TwoKeyDonationCampaign.sol#942) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1007,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\taddress _from,\n",
          "message": "Parameter '_from' of TwoKeyCampaign.transferFrom (TwoKeyDonationCampaign.sol#1007) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1008,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\taddress _to,\n",
          "message": "Parameter '_to' of TwoKeyCampaign.transferFrom (TwoKeyDonationCampaign.sol#1008) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1009,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tuint256 _value\n",
          "message": "Parameter '_value' of TwoKeyCampaign.transferFrom (TwoKeyDonationCampaign.sol#1009) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1038,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\taddress new_public_key\n",
          "message": "Parameter 'new_public_key' of TwoKeyCampaign.setPublicLinkKeyOf (TwoKeyDonationCampaign.sol#1038) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1060,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\taddress _converter\n",
          "message": "Parameter '_converter' of TwoKeyCampaign.getInfluencersKeysAndWeightsFromSignature (TwoKeyDonationCampaign.sol#1060) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1115,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\taddress new_public_key\n",
          "message": "Parameter 'new_public_key' of TwoKeyCampaign.setPublicLinkKey (TwoKeyDonationCampaign.sol#1115) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1129,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tstring _publicMetaHash,\n",
          "message": "Parameter '_publicMetaHash' of TwoKeyCampaign.startCampaignWithInitialParams (TwoKeyDonationCampaign.sol#1129) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1130,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tstring _privateMetaHash,\n",
          "message": "Parameter '_privateMetaHash' of TwoKeyCampaign.startCampaignWithInitialParams (TwoKeyDonationCampaign.sol#1130) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1131,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\taddress new_public_key\n",
          "message": "Parameter 'new_public_key' of TwoKeyCampaign.startCampaignWithInitialParams (TwoKeyDonationCampaign.sol#1131) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1166,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\taddress _receiver\n",
          "message": "Parameter '_receiver' of TwoKeyCampaign.getReceivedFrom (TwoKeyDonationCampaign.sol#1166) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1257,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\taddress _address,\n",
          "message": "Parameter '_address' of TwoKeyCampaign.referrerWithdraw (TwoKeyDonationCampaign.sol#1257) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1258,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tbool _withdrawAsStable\n",
          "message": "Parameter '_withdrawAsStable' of TwoKeyCampaign.referrerWithdraw (TwoKeyDonationCampaign.sol#1258) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 991,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tmapping(address => address) public public_link_key;\n",
          "message": "Variable 'TwoKeyCampaign.public_link_key' (TwoKeyDonationCampaign.sol#991) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 992,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tmapping(address => address) internal received_from; // referral graph, who did you receive the referral from\n",
          "message": "Variable 'TwoKeyCampaign.received_from' (TwoKeyDonationCampaign.sol#992) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1502,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address internal _implementation;\n",
          "message": "Variable 'UpgradeabilityCampaignStorage._implementation' (TwoKeyDonationCampaign.sol#1502) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1560,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _contractor,\n",
          "message": "Parameter '_contractor' of TwoKeyDonationCampaign.setInitialParamsDonationCampaign (TwoKeyDonationCampaign.sol#1560) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1561,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _moderator,\n",
          "message": "Parameter '_moderator' of TwoKeyDonationCampaign.setInitialParamsDonationCampaign (TwoKeyDonationCampaign.sol#1561) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1562,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _twoKeySingletonRegistry,\n",
          "message": "Parameter '_twoKeySingletonRegistry' of TwoKeyDonationCampaign.setInitialParamsDonationCampaign (TwoKeyDonationCampaign.sol#1562) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1563,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _twoKeyDonationConversionHandler,\n",
          "message": "Parameter '_twoKeyDonationConversionHandler' of TwoKeyDonationCampaign.setInitialParamsDonationCampaign (TwoKeyDonationCampaign.sol#1563) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1564,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _twoKeyDonationLogicHandler,\n",
          "message": "Parameter '_twoKeyDonationLogicHandler' of TwoKeyDonationCampaign.setInitialParamsDonationCampaign (TwoKeyDonationCampaign.sol#1564) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1654,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _converter\n",
          "message": "Parameter '_converter' of TwoKeyDonationCampaign.distributeArcsBasedOnSignature (TwoKeyDonationCampaign.sol#1654) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1774,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _maxReferralRewardETHWei,\n",
          "message": "Parameter '_maxReferralRewardETHWei' of TwoKeyDonationCampaign.buyTokensAndDistributeReferrerRewards (TwoKeyDonationCampaign.sol#1774) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1775,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _converter,\n",
          "message": "Parameter '_converter' of TwoKeyDonationCampaign.buyTokensAndDistributeReferrerRewards (TwoKeyDonationCampaign.sol#1775) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1776,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _conversionId\n",
          "message": "Parameter '_conversionId' of TwoKeyDonationCampaign.buyTokensAndDistributeReferrerRewards (TwoKeyDonationCampaign.sol#1776) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1829,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address last_influencer\n",
          "message": "Parameter 'last_influencer' of TwoKeyDonationCampaign.getReferrerCuts (TwoKeyDonationCampaign.sol#1829) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1851,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getReferrerBalance(address _referrer) public view returns (uint) {\n",
          "message": "Parameter '_referrer' of TwoKeyDonationCampaign.getReferrerBalance (TwoKeyDonationCampaign.sol#1851) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1861,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _influencer,\n",
          "message": "Parameter '_influencer' of TwoKeyDonationCampaign.updateReferrerPlasmaBalance (TwoKeyDonationCampaign.sol#1861) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1862,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _balance\n",
          "message": "Parameter '_balance' of TwoKeyDonationCampaign.updateReferrerPlasmaBalance (TwoKeyDonationCampaign.sol#1862) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1890,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _influencer\n",
          "message": "Parameter '_influencer' of TwoKeyDonationCampaign.getReferrerPlasmaBalance (TwoKeyDonationCampaign.sol#1890) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 1497,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ITwoKeySingletonesRegistry internal registry;\n",
          "message": "UpgradeabilityCampaignStorage.registry (TwoKeyDonationCampaign.sol#1497) is never used in TwoKeyDonationCampaign\nUpgradeabilityCampaignStorage.twoKeyFactory (TwoKeyDonationCampaign.sol#1499) is never used in TwoKeyDonationCampaign\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 903,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i = 0; i < influencers.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 848,
          "vulnerability_to_line": null,
          "vulnerability_code": "        while (idx + 65 <= sig.length) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 659,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params0(address c, bytes _method) public view returns (uint answer) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 687,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params1(address c, bytes _method, uint _val) public view returns (uint answer) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 717,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params2(address c, bytes _method, uint _val1, uint _val2) public view returns (uint answer) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 903,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i = 0; i < influencers.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1666,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < numberOfInfluencers; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1839,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < numberOfInfluencers; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 848,
          "vulnerability_to_line": null,
          "vulnerability_code": "        while (idx + 65 <= sig.length) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract IUpgradableExchange {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 233,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Upgradeable is UpgradeabilityStorage {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 145,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 159,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 167,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 207,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 231,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 245,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 268,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 319,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 327,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 601,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 656,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 919,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 950,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1294,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1305,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1392,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1424,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1436,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1471,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1489,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1515,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1528,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 1551,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint256) private referrerPlasma2cut; // Mapping representing how much are cuts in percent(0-100) for referrer address\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 1280,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t\telse if (block.timestamp >= ITwoKeyAdmin(twoKeyAdminAddress).getTwoKeyRewardsReleaseDate()) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 963,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tusing SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 749,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function loadAddress(bytes sig, uint idx) public pure returns (address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 759,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function loadUint8(bytes sig, uint idx) public pure returns (uint8) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 770,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverHash(bytes32 hash, bytes sig, uint idx) public pure returns (address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 659,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params0(address c, bytes _method) public view returns (uint answer) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 687,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params1(address c, bytes _method, uint _val) public view returns (uint answer) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 717,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params2(address c, bytes _method, uint _val1, uint _val2) public view returns (uint answer) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 807,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigMemory(bytes sig) private pure returns (address[], address[], uint8[], uint[], uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 822,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigParts(bytes sig, address last_address) private pure returns (address[], address[], uint8[], uint[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1063,
          "vulnerability_to_line": null,
          "vulnerability_code": "\treturns (address[],address[],uint8[],address)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1338,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) internal pure returns (uint,uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getContractProxyAddress(string _contractName) public view returns (address);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getNonUpgradableContractAddress(string contractName) public view returns (address);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getLatestContractVersion(string contractName) public view returns (string);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getLatestContractVersion(string contractName) public view returns (string);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getContractsWhereUserIsContractor(address _userAddress) public view returns (address[]);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 119,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getContractsWhereUserIsModerator(address _userAddress) public view returns (address[]);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 120,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getContractsWhereUserIsRefferer(address _userAddress) public view returns (address[]);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 121,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getContractsWhereUserIsConverter(address _userAddress) public view returns (address[]);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addName(string _name, address _sender, string _fullName, string _email, bytes signature) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addName(string _name, address _sender, string _fullName, string _email, bytes signature) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addName(string _name, address _sender, string _fullName, string _email, bytes signature) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addName(string _name, address _sender, string _fullName, string _email, bytes signature) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 124,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addNameByUser(string _name) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getName2Owner(string _name) public view returns (address);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 126,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getOwner2Name(address _sender) public view returns (string);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 153,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function validateAcquisitionCampaign(address campaign, string nonSingletonHash) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 154,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function validateDonationCampaign(address campaign, address donationConversionHandler, string nonSingletonHash) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addVersion(string _contractName, string version, address implementation) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addVersion(string _contractName, string version, address implementation) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 202,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getVersion(string _contractName, string version) public view returns (address);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 202,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getVersion(string _contractName, string version) public view returns (address);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 260,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAddressFromTwoKeySingletonRegistry(string contractName) internal view returns (address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 659,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params0(address c, bytes _method) public view returns (uint answer) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 687,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params1(address c, bytes _method, uint _val) public view returns (uint answer) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 717,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params2(address c, bytes _method, uint _val1, uint _val2) public view returns (uint answer) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 749,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function loadAddress(bytes sig, uint idx) public pure returns (address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 759,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function loadUint8(bytes sig, uint idx) public pure returns (uint8) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 770,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverHash(bytes32 hash, bytes sig, uint idx) public pure returns (address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 807,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigMemory(bytes sig) private pure returns (address[], address[], uint8[], uint[], uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 807,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigMemory(bytes sig) private pure returns (address[], address[], uint8[], uint[], uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 807,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigMemory(bytes sig) private pure returns (address[], address[], uint8[], uint[], uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 807,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigMemory(bytes sig) private pure returns (address[], address[], uint8[], uint[], uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 807,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigMemory(bytes sig) private pure returns (address[], address[], uint8[], uint[], uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 822,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigParts(bytes sig, address last_address) private pure returns (address[], address[], uint8[], uint[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 822,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigParts(bytes sig, address last_address) private pure returns (address[], address[], uint8[], uint[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 822,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigParts(bytes sig, address last_address) private pure returns (address[], address[], uint8[], uint[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 822,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigParts(bytes sig, address last_address) private pure returns (address[], address[], uint8[], uint[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 822,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigParts(bytes sig, address last_address) private pure returns (address[], address[], uint8[], uint[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 889,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSig(bytes sig, address old_key, address last_address) public pure returns (address[], address[], uint8[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 889,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSig(bytes sig, address old_key, address last_address) public pure returns (address[], address[], uint8[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 889,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSig(bytes sig, address old_key, address last_address) public pure returns (address[], address[], uint8[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 889,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSig(bytes sig, address old_key, address last_address) public pure returns (address[], address[], uint8[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1059,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tbytes sig,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1063,
          "vulnerability_to_line": null,
          "vulnerability_code": "\treturns (address[],address[],uint8[],address)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1063,
          "vulnerability_to_line": null,
          "vulnerability_code": "\treturns (address[],address[],uint8[],address)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1063,
          "vulnerability_to_line": null,
          "vulnerability_code": "\treturns (address[],address[],uint8[],address)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1129,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tstring _publicMetaHash,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1130,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tstring _privateMetaHash,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1246,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction getContractProxyAddress(string contractName) internal returns (address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1357,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) internal pure returns (uint[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1474,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getReferrers(address customer) public view returns (address[]);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1565,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint [] numberValues,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1566,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool [] booleanValues\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1653,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes sig,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1715,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes signature,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1729,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes signature\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1833,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (uint256[])\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 663,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 691,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 721,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 752,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 762,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 778,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 785,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 792,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1086,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tassembly\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addVersion(string _contractName, string version, address implementation) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 202,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getVersion(string _contractName, string version) public view returns (address);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 338,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool initialized;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 966,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tTwoKeyEventSource twoKeyEventSource; // Address of TwoKeyEventSource contract\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 968,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress twoKeySingletonesRegistry; // Address of Registry of all singleton contracts\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 969,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress twoKeyEconomy; // Address of twoKeyEconomy contract\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 970,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress ownerPlasma; //contractor plasma address\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 975,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tbool isKYCRequired;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 976,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool mustConvertToReferr;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 978,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tuint256 conversionQuota;  // maximal ARC tokens that can be passed in transferFrom\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 979,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tuint256 contractorBalance; // Contractor balance\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 980,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tuint256 contractorTotalProceeds; // Contractor total earnings\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 981,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tuint256 maxReferralRewardPercent; // maxReferralRewardPercent is actually bonus percentage in ETH\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 982,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tuint256 moderatorTotalEarnings2key; //Total earnings of the moderator all time\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 983,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tuint256 reservedAmount2keyForRewards; //Reserved amount of 2key tokens for rewards distribution\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1541,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool initialized;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1546,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool acceptsFiat; // Will determine if fiat conversion can be created or not\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 759,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function loadUint8(bytes sig, uint idx) public pure returns (uint8) {\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 1128,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction startCampaignWithInitialParams(\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 986,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tstring public publicMetaHash; // Ipfs hash of json campaign object\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 1714,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function joinAndShareARC(\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 986,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tstring public publicMetaHash; // Ipfs hash of json campaign object\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 659,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params0(address c, bytes _method) public view returns (uint answer) {\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 687,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params1(address c, bytes _method, uint _val) public view returns (uint answer) {\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 717,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params2(address c, bytes _method, uint _val1, uint _val2) public view returns (uint answer) {\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 889,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSig(bytes sig, address old_key, address last_address) public pure returns (address[], address[], uint8[]) {\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 669,
          "vulnerability_to_line": null,
          "vulnerability_code": "            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 699,
          "vulnerability_to_line": null,
          "vulnerability_code": "            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 730,
          "vulnerability_to_line": null,
          "vulnerability_code": "            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Unchecked return value from external call. (SWC 104)",
          "vulnerability_from_line": 730,
          "vulnerability_to_line": null,
          "vulnerability_code": "            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n",
          "message": "The return value of a message call is not checked.\nExternal calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.\nClassification: SWC-104"
        },
        {
          "name": "Jump to an arbitrary instruction (SWC 127)",
          "vulnerability_from_line": 770,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverHash(bytes32 hash, bytes sig, uint idx) public pure returns (address) {\n",
          "message": "The caller can redirect execution to arbitrary bytecode locations.\nIt is possible to redirect the control flow to arbitrary locations in the code. This may allow an attacker to bypass security controls or manipulate the business logic of the smart contract. Avoid using low-level-operations and assembly to prevent this issue.\nClassification: SWC-127"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 848,
          "vulnerability_to_line": null,
          "vulnerability_code": "        while (idx + 65 <= sig.length) {\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 775,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require (sig.length >= 65+idx, 'bad signature length');\n",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 810,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint n_influencers = (sig.length-21) / (65+msg_len);\n",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 1288,
          "vulnerability_to_line": null,
          "vulnerability_code": "        reservedAmount2keyForRewards -= balance;\n",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 1288,
          "vulnerability_to_line": null,
          "vulnerability_code": "        reservedAmount2keyForRewards -= balance;\n",
          "message": null
        }
      ]
    }
  }
}