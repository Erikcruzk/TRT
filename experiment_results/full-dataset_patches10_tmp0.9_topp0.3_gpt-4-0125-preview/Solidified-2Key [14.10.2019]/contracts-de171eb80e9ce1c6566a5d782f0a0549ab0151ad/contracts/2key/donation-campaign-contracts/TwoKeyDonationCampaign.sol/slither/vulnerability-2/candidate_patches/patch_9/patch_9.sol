pragma solidity ^0.4.24;




contract ITwoKeySingletoneRegistryFetchAddress {
    function getContractProxyAddress(string _contractName) public view returns (address);
    function getNonUpgradableContractAddress(string contractName) public view returns (address);
    function getLatestContractVersion(string contractName) public view returns (string);
}



pragma solidity ^0.4.24;

contract IUpgradableExchange {

    function buyRate2key() public view returns (uint);
    function sellRate2key() public view returns (uint);

    function buyTokens(
        address _beneficiary
    )
    public
    payable
    returns (uint);

    function buyStableCoinWith2key(
        uint _twoKeyUnits,
        address _beneficiary
    )
    public
    payable
    returns (uint);
}



pragma solidity ^0.4.24;


contract IERC20 {
    function balanceOf(
        address whom
    )
    external
    view
    returns (uint);


    function transfer(
        address _to,
        uint256 _value
    )
    external
    returns (bool);


    function transferFrom(
        address _from,
        address _to,
        uint256 _value
    )
    external
    returns (bool);



    function approve(
        address _spender,
        uint256 _value
    )
    public
    returns (bool);



    function decimals()
    external
    view
    returns (uint);


    function symbol()
    external
    view
    returns (string);


    function name()
    external
    view
    returns (string);


    function freezeTransfers()
    external;


    function unfreezeTransfers()
    external;
}



pragma solidity ^0.4.24;


contract ITwoKeyReg {
    function addTwoKeyEventSource(address _twoKeyEventSource) public;
    function changeTwoKeyEventSource(address _twoKeyEventSource) public;
    function addWhereContractor(address _userAddress, address _contractAddress) public;
    function addWhereModerator(address _userAddress, address _contractAddress) public;
    function addWhereReferrer(address _userAddress, address _contractAddress) public;
    function addWhereConverter(address _userAddress, address _contractAddress) public;
    function getContractsWhereUserIsContractor(address _userAddress) public view returns (address[]);
    function getContractsWhereUserIsModerator(address _userAddress) public view returns (address[]);
    function getContractsWhereUserIsRefferer(address _userAddress) public view returns (address[]);
    function getContractsWhereUserIsConverter(address _userAddress) public view returns (address[]);
    function getTwoKeyEventSourceAddress() public view returns (address);
    function addName(string _name, address _sender, string _fullName, string _email, bytes signature) public;
    function addNameByUser(string _name) public;
    function getName2Owner(string _name) public view returns (address);
    function getOwner2Name(address _sender) public view returns (string);
    function getPlasmaToEthereum(address plasma) public view returns (address);
    function getEthereumToPlasma(address ethereum) public view returns (address);
    function checkIfTwoKeyMaintainerExists(address _maintainer) public view returns (bool);
    function getUserData(address _user) external view returns (bytes);
}



pragma solidity ^0.4.24;

contract ITwoKeyAdmin {
    function getDefaultIntegratorFeePercent() public view returns (uint);
    function getDefaultNetworkTaxPercent() public view returns (uint);
    function getTwoKeyRewardsReleaseDate() external view returns(uint);
}



pragma solidity ^0.4.24;




contract ITwoKeyCampaignValidator {
    function isCampaignValidated(address campaign) public view returns (bool);
    function isConversionHandlerCodeValid(address conversionHandler) public view returns (bool);
    function validateAcquisitionCampaign(address campaign, string nonSingletonHash) public;
    function validateDonationCampaign(address campaign, address donationConversionHandler, string nonSingletonHash) public;
}



pragma solidity ^0.4.24;

contract ITwoKeyMaintainersRegistry {
    function onlyMaintainer(address _sender) public view returns (bool);
}



pragma solidity ^0.4.24;





interface ITwoKeySingletonesRegistry {

    



    event ProxyCreated(address proxy);


    




    event VersionAdded(string version, address implementation);

    




    function addVersion(string _contractName, string version, address implementation) public;

    





    function getVersion(string _contractName, string version) public view returns (address);
}



pragma solidity ^0.4.24;





contract UpgradeabilityStorage {
    
    ITwoKeySingletonesRegistry internal registry;

    
    address internal _implementation;

    



    function implementation() public view returns (address) {
        return _implementation;
    }
}



pragma solidity ^0.4.24;

contract Upgradeable is UpgradeabilityStorage {
    



    function initialize(address sender) public payable {
        require(msg.sender == address(registry));
    }
}



pragma solidity ^0.4.24;


contract ITwoKeySingletonUtils {

    address public TWO_KEY_SINGLETON_REGISTRY;

    
    modifier onlyMaintainer {
        address twoKeyMaintainersRegistry = getAddressFromTwoKeySingletonRegistry("TwoKeyMaintainersRegistry");
        require(ITwoKeyMaintainersRegistry(twoKeyMaintainersRegistry).onlyMaintainer(msg.sender));
        _;
    }

    
    function getAddressFromTwoKeySingletonRegistry(string contractName) internal view returns (address) {
        return ITwoKeySingletoneRegistryFetchAddress(TWO_KEY_SINGLETON_REGISTRY)
        .getContractProxyAddress(contractName);
    }
}



pragma solidity ^0.4.0;

contract IStructuredStorage {

    function setProxyLogicContractAndDeployer(address _proxyLogicContract, address _deployer) external;
    function setProxyLogicContract(address _proxyLogicContract) external;

    
    function getUint(bytes32 _key) external view returns(uint);
    function getString(bytes32 _key) external view returns(string);
    function getAddress(bytes32 _key) external view returns(address);
    function getBytes(bytes32 _key) external view returns(bytes);
    function getBool(bytes32 _key) external view returns(bool);
    function getInt(bytes32 _key) external view returns(int);
    function getBytes32(bytes32 _key) external view returns(bytes32);

    
    function getBytes32Array(bytes32 _key) external view returns (bytes32[]);
    function getAddressArray(bytes32 _key) external view returns (address[]);
    function getUintArray(bytes32 _key) external view returns (uint[]);
    function getIntArray(bytes32 _key) external view returns (int[]);
    function getBoolArray(bytes32 _key) external view returns (bool[]);

    
    function setUint(bytes32 _key, uint _value) external;
    function setString(bytes32 _key, string _value) external;
    function setAddress(bytes32 _key, address _value) external;
    function setBytes(bytes32 _key, bytes _value) external;
    function setBool(bytes32 _key, bool _value) external;
    function setInt(bytes32 _key, int _value) external;
    function setBytes32(bytes32 _key, bytes32 _value) external;

    
    function setBytes32Array(bytes32 _key, bytes32[] _value) external;
    function setAddressArray(bytes32 _key, address[] _value) external;
    function setUintArray(bytes32 _key, uint[] _value) external;
    function setIntArray(bytes32 _key, int[] _value) external;
    function setBoolArray(bytes32 _key, bool[] _value) external;

    
    function deleteUint(bytes32 _key) external;
    function deleteString(bytes32 _key) external;
    function deleteAddress(bytes32 _key) external;
    function deleteBytes(bytes32 _key) external;
    function deleteBool(bytes32 _key) external;
    function deleteInt(bytes32 _key) external;
    function deleteBytes32(bytes32 _key) external;
}



pragma solidity ^0.4.24;

contract ITwoKeyEventSourceStorage is IStructuredStorage {

}



pragma solidity ^0.4.24;








contract TwoKeyEventSource is Upgradeable, ITwoKeySingletonUtils {

    bool initialized;

    ITwoKeyEventSourceStorage public PROXY_STORAGE_CONTRACT;

    event Created(
        address _campaign,
        address _owner,
        address _moderator
    );

    event Joined(
        address _campaign,
        address _from,
        address _to
    );

    event Converted(
        address _campaign,
        address _converter,
        uint256 _amount
    );

    event Rewarded(
        address _campaign,
        address _to,
        uint256 _amount
    );

    event Cancelled(
        address _campaign,
        address _converter,
        uint256 _indexOrAmount
    );

    event Rejected(
        address _campaign,
        address _converter
    );

    event UpdatedPublicMetaHash(
        uint timestamp,
        string value
    );

    event UpdatedData(
        uint timestamp,
        uint value,
        string action
    );

    event ReceivedEther(
        address _sender,
        uint value
    );

    


    modifier onlyAllowedContracts {
        address twoKeyCampaignValidator = getAddressFromTwoKeySingletonRegistry("TwoKeyCampaignValidator");
        require(ITwoKeyCampaignValidator(twoKeyCampaignValidator).isCampaignValidated(msg.sender) == true);
        _;
    }

    modifier onlyValidator {
        address twoKeyCampaignValidator = getAddressFromTwoKeySingletonRegistry("TwoKeyCampaignValidator");
        require(msg.sender == twoKeyCampaignValidator);
        _;
    }

    


    function setInitialParams(
        address _twoKeySingletonesRegistry,
        address _proxyStorage
    )
    external
    {
        require(initialized == false);

        TWO_KEY_SINGLETON_REGISTRY = _twoKeySingletonesRegistry;
        PROXY_STORAGE_CONTRACT = ITwoKeyEventSourceStorage(_proxyStorage);

        initialized = true;
    }

    






    function created(
        address _campaign,
        address _owner,
        address _moderator
    )
    external
    onlyValidator
    {



        emit Created(_campaign, _owner, _moderator);
    }

    






    function joined(
        address _campaign,
        address _from,
        address _to
    )
    external
    onlyAllowedContracts
    {


        emit Joined(_campaign, _from, _to);
    }

    






    function converted(
        address _campaign,
        address _converter,
        uint256 _amountETHWei
    )
    external
    onlyAllowedContracts
    {


        emit Converted(_campaign, _converter, _amountETHWei);
    }

    





    function rewarded(
        address _campaign,
        address _to,
        uint256 _amount
    )
    external
    onlyAllowedContracts
    {
        emit Rewarded(_campaign, _to, _amount);
    }

    





    function cancelled(
        address  _campaign,
        address _converter,
        uint256 _indexOrAmount
    )
    external
    onlyAllowedContracts
    {
        emit Cancelled(_campaign, _converter, _indexOrAmount);
    }


    function plasmaOf(
        address me
    )
    public
    view
    returns (address)
    {
        address twoKeyRegistry = getAddressFromTwoKeySingletonRegistry("TwoKeyRegistry");
        address plasma = ITwoKeyReg(twoKeyRegistry).getEthereumToPlasma(me);
        if (plasma != address(0)) {
            return plasma;
        }
        return me;
    }

    




    function ethereumOf(
        address me
    )
    public
    view
    returns (address)
    {
        address twoKeyRegistry = getAddressFromTwoKeySingletonRegistry("TwoKeyRegistry");
        address ethereum = ITwoKeyReg(twoKeyRegistry).getPlasmaToEthereum(me);
        if (ethereum != address(0)) {
            return ethereum;
        }
        return me;
    }

    



    function isAddressMaintainer(
        address _maintainer
    )
    public
    view
    returns (bool)
    {
        address twoKeyMaintainersRegistry = getAddressFromTwoKeySingletonRegistry("TwoKeyMaintainersRegistry");
        bool _isMaintainer = ITwoKeyMaintainersRegistry(twoKeyMaintainersRegistry).onlyMaintainer(_maintainer);
        return _isMaintainer;
    }

    


    function getTwoKeyDefaultIntegratorFeeFromAdmin()
    public
    view
    returns (uint)
    {
        address twoKeyAdmin = getAddressFromTwoKeySingletonRegistry("TwoKeyAdmin");
        uint integratorFeePercentage = ITwoKeyAdmin(twoKeyAdmin).getDefaultIntegratorFeePercent();
        return integratorFeePercentage;
    }

    


    function getTwoKeyDefaultNetworkTaxPercent()
    public
    view
    returns (uint)
    {
        address twoKeyAdmin = getAddressFromTwoKeySingletonRegistry("TwoKeyAdmin");
        uint networkTaxPercent = ITwoKeyAdmin(twoKeyAdmin).getDefaultNetworkTaxPercent();
        return networkTaxPercent;
    }
}



pragma solidity ^0.4.24;






library SafeMath {

  


  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {
    
    
    
    if (_a == 0) {
      return 0;
    }

    c = _a * _b;
    require(c / _a == _b);
    return c;
  }

  


  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {
    
    
    
    return _a / _b;
  }

  


  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {
    require(_b <= _a);
    return _a - _b;
  }

  


  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {
    c = _a + _b;
    require(c >= _a);
    return c;
  }
}



pragma solidity ^0.4.24;

library Call {
    function params0(address c, bytes _method) public view returns (uint answer) {
        
        
        bytes4 sig = bytes4(keccak256(_method));
        assembly {
        
            let ptr := mload(0x40)
        
            mstore(ptr,sig)

            let result := call(  
            15000, 
            c, 
            0, 
            ptr, 
            0x04, 
            ptr,  
            0x20) 

            if eq(result, 0) {
                revert(0, 0)
            }

            answer := mload(ptr) 
            mstore(0x40,add(ptr,0x24)) 
        }
    }

    function params1(address c, bytes _method, uint _val) public view returns (uint answer) {
        
        
        bytes4 sig = bytes4(keccak256(_method));
        assembly {
        
            let ptr := mload(0x40)
        
            mstore(ptr,sig)
        
            mstore(add(ptr,0x04), _val)

            let result := call(  
            15000, 
            c, 
            0, 
            ptr, 
            0x24, 
            ptr,  
            0x20) 

            if eq(result, 0) {
                revert(0, 0)
            }

            answer := mload(ptr) 
            mstore(0x40,add(ptr,0x24)) 
        }
    }

    function params2(address c, bytes _method, uint _val1, uint _val2) public view returns (uint answer) {
        
        
        bytes4 sig = bytes4(keccak256(_method));
        assembly {
        
            let ptr := mload(0x40)
        
            mstore(ptr,sig)
        
            mstore(add(ptr,0x04), _val1)
            mstore(add(ptr,0x24), _val2)

            let result := call(  
            15000, 
            c, 
            0, 
            ptr, 
            0x44, 
            ptr,  
            0x20) 

        
        
        
        

            answer := mload(ptr) 
            mstore(0x40,add(ptr,0x20)) 
        }
    }

    function loadAddress(bytes sig, uint idx) public pure returns (address) {
        address influencer;
        idx += 20;
        assembly
        {
            influencer := mload(add(sig, idx))
        }
        return influencer;
    }

    function loadUint8(bytes sig, uint idx) public pure returns (uint8) {
        uint8 weight;
        idx += 1;
        assembly
        {
            weight := mload(add(sig, idx))
        }
        return weight;
    }


    function recoverHash(bytes32 hash, bytes sig, uint idx) public pure returns (address) {
        
        
        
        
        require (sig.length >= 65+idx, 'bad signature length');
        idx += 32;
        bytes32 r;
        assembly
        {
            r := mload(add(sig, idx))
        }

        idx += 32;
        bytes32 s;
        assembly
        {
            s := mload(add(sig, idx))
        }

        idx += 1;
        uint8 v;
        assembly
        {
            v := mload(add(sig, idx))
        }
        if (v >= 32) { 
            v -= 32;
            bytes memory prefix = "\x19Ethereum Signed Message:\n32"; 
            hash = keccak256(abi.encodePacked(prefix, hash));
        }
        if (v <= 1) v += 27;
        require(v==27 || v==28,'bad sig v');
        return ecrecover(hash, v, r, s);

    }

    function recoverSigMemory(bytes sig) private pure returns (address[], address[], uint8[], uint[], uint) {
        uint8 version = loadUint8(sig, 0);
        uint msg_len = (version == 1) ? 1+65+20 : 1+20+20;
        uint n_influencers = (sig.length-21) / (65+msg_len);
        uint8[] memory weights = new uint8[](n_influencers);
        address[] memory keys = new address[](n_influencers);
        if ((sig.length-21) % (65+msg_len) > 0) {
            n_influencers++;
        }
        address[] memory influencers = new address[](n_influencers);
        uint[] memory offsets = new uint[](n_influencers);

        return (influencers, keys, weights, offsets, msg_len);
    }

    function recoverSigParts(bytes sig, address last_address) private pure returns (address[], address[], uint8[], uint[]) {
        
        
        
        
        
        
        
        
        
        
        
        
        
        uint idx = 0;
        uint msg_len;
        uint8[] memory weights;
        address[] memory keys;
        address[] memory influencers;
        uint[] memory offsets;
        (influencers, keys, weights, offsets, msg_len) = recoverSigMemory(sig);
        idx += 1;  

        idx += 20; 
        uint count_influencers = 0;

        while (idx + 65 <= sig.length) {
            offsets[count_influencers] = idx;
            idx += 65;  

            if (idx + msg_len <= sig.length) {  
                weights[count_influencers] = loadUint8(sig, idx);
                require(weights[count_influencers] > 0,'weight not defined (1..255)');  
                idx++;


                if (msg_len == 41)  
                {
                    influencers[count_influencers] = loadAddress(sig, idx);
                    idx += 20;
                    keys[count_influencers] = loadAddress(sig, idx);
                    idx += 20;
                } else if (msg_len == 86)  
                {
                    keys[count_influencers] = loadAddress(sig, idx+65);
                    influencers[count_influencers] = recoverHash(
                        keccak256(
                            abi.encodePacked(
                                keccak256(abi.encodePacked("bytes binding to weight","bytes binding to public")),
                                keccak256(abi.encodePacked(weights[count_influencers],keys[count_influencers]))
                            )
                        ),sig,idx);
                    idx += 65;
                    idx += 20;
                }

            } else {
                
                influencers[count_influencers] = last_address;
            }
            count_influencers++;
        }
        require(idx == sig.length,'illegal message size');

        return (influencers, keys, weights, offsets);
    }

    function recoverSig(bytes sig, address old_key, address last_address) public pure returns (address[], address[], uint8[]) {
        
        
        
        
        require(old_key != address(0),'no public link key');

        address[] memory influencers;
        address[] memory keys;
        uint8[] memory weights;
        uint[] memory offsets;
        (influencers, keys, weights, offsets) = recoverSigParts(sig, last_address);

        
        for(uint i = 0; i < influencers.length; i++) {
            if (i < weights.length) {
                require (recoverHash(keccak256(abi.encodePacked(weights[i], keys[i], influencers[i])),sig,offsets[i]) == old_key, 'illegal signature');
                old_key = keys[i];
            } else {
                
                require (recoverHash(keccak256(abi.encodePacked(influencers[i])),sig,offsets[i]) == old_key, 'illegal last signature');
            }
        }

        return (influencers, keys, weights);
    }
}



pragma solidity ^0.4.24;




contract ArcERC20 {

    uint256 internal totalSupply_ = 1000000;

    mapping(address => uint256) internal balances;

    


    function totalSupply() public view returns (uint256) {
        return totalSupply_;
    }

    




    function balanceOf(address _owner) public view returns (uint256) {
        return balances[_owner];
    }

}



pragma solidity ^0.4.24;










contract TwoKeyCampaign is ArcERC20 {

	using SafeMath for uint256;
	using Call for *;

	TwoKeyEventSource twoKeyEventSource; 

	address twoKeySingletonesRegistry; 
	address twoKeyEconomy; 
	address ownerPlasma; 

	address public contractor; 
	address public moderator; 

	bool isKYCRequired;
    bool mustConvertToReferr;

	uint256 conversionQuota;  
	uint256 contractorBalance; 
	uint256 contractorTotalProceeds; 
	uint256 maxReferralRewardPercent; 
	uint256 moderatorTotalEarnings2key; 
	uint256 reservedAmount2keyForRewards; 


	string public publicMetaHash; 
	string public privateMetaHash; 

	mapping(address => uint256) internal referrerPlasma2Balances2key; 

	mapping(address => address) public public_link_key;
	mapping(address => address) internal received_from; 

    
    modifier onlyContractor() {
        require(msg.sender == contractor);
        _;
    }

	





	function transferFrom(
		address _from,
		address _to,
		uint256 _value
	)
	internal
	returns (bool)
	{
		
		require(_value == 1);
		require(balances[_from] > 0);

		balances[_from] = balances[_from].sub(1);
		balances[_to] = balances[_to].add(conversionQuota);
		totalSupply_ = totalSupply_.add(conversionQuota.sub(1));

		if (received_from[_to] == 0) {
			twoKeyEventSource.joined(this, _from, _to);
		}

		received_from[_to] = _from;
		return true;
	}


    




    function setPublicLinkKeyOf(
		address me,
		address new_public_key
	)
	internal
	{
        me = twoKeyEventSource.plasmaOf(me);
        require(balanceOf(me) > 0);
        address old_address = public_link_key[me];
        if (old_address == address(0)) {
            public_link_key[me] = new_public_key;
        } else {
            require(old_address == new_public_key);
        }
        public_link_key[me] = new_public_key;
    }


	



	function getInfluencersKeysAndWeightsFromSignature(
		bytes sig,
		address _converter
	)
	internal
	returns (address[],address[],uint8[],address)
	{
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		address old_address;
		



		assembly
		{
			old_address := mload(add(sig, 21))
		}

		old_address = twoKeyEventSource.plasmaOf(old_address);
		address old_key = public_link_key[old_address];

		address[] memory influencers;
		address[] memory keys;
		uint8[] memory weights;
		(influencers, keys, weights) = Call.recoverSig(sig, old_key, twoKeyEventSource.plasmaOf(_converter));

		
		
		
		require(
			influencers[influencers.length-1] == twoKeyEventSource.plasmaOf(_converter) ||
			contractor == msg.sender
		);

		return (influencers, keys, weights, old_address);
	}

    



    function setPublicLinkKey(
		address new_public_key
	)
	public
	{
        setPublicLinkKeyOf(msg.sender, new_public_key);
    }


	




	function startCampaignWithInitialParams(
		string _publicMetaHash,
		string _privateMetaHash,
		address new_public_key
	)
	public
	onlyContractor
	{
		
		publicMetaHash = _publicMetaHash;
		privateMetaHash = _privateMetaHash;
		setPublicLinkKeyOf(msg.sender, new_public_key);
	}


	




	function buyTokensFromUpgradableExchange(
		uint amountOfMoney,
		address receiver
	)
	internal
	returns (uint)
	{
		address upgradableExchange = getContractProxyAddress("TwoKeyUpgradableExchange");
		uint amountBought = IUpgradableExchange(upgradableExchange).buyTokens.value(amountOfMoney)(receiver);
		return amountBought;
	}


	



	function getReceivedFrom(
		address _receiver
	)
	public
	view
	returns (address)
	{
		return received_from[_receiver];
	}

	



	function publicLinkKeyOf(
		address me
	)
	public
	view
	returns (address)
	{
		return public_link_key[twoKeyEventSource.plasmaOf(me)];
	}

    


    function getConstantInfo()
	public
	view
	returns (uint,uint,bool)
	{
        return (conversionQuota, maxReferralRewardPercent, isKYCRequired);
    }

    




    function getModeratorTotalEarnings()
	public
	view
	returns (uint)
	{
        return (moderatorTotalEarnings2key);
    }

    




    function getContractorBalanceAndTotalProceeds()
	external
	onlyContractor
	view
	returns (uint,uint)
	{
        return (contractorBalance, contractorTotalProceeds);
    }


    




    function withdrawContractor()
	public
	onlyContractor
	{
        uint balance = contractorBalance;
        contractorBalance = 0;
        



        contractor.transfer(balance);
    }

	function getContractProxyAddress(string contractName) internal returns (address) {
		return ITwoKeySingletoneRegistryFetchAddress(twoKeySingletonesRegistry).getContractProxyAddress(contractName);
	}


	




	function referrerWithdraw(
		address _address,
		bool _withdrawAsStable
	)
	public
	{
		require(msg.sender == _address || twoKeyEventSource.isAddressMaintainer(msg.sender));
		address twoKeyAdminAddress;
		address twoKeyUpgradableExchangeContract;

		uint balance;
		address _referrer = twoKeyEventSource.plasmaOf(_address);

		if(referrerPlasma2Balances2key[_referrer] != 0) {
			twoKeyAdminAddress = getContractProxyAddress("TwoKeyAdmin");
			twoKeyUpgradableExchangeContract = getContractProxyAddress("TwoKeyUpgradableExchange");

			balance = referrerPlasma2Balances2key[_referrer];
			referrerPlasma2Balances2key[_referrer] = 0;

			if(_withdrawAsStable == true) {
				IERC20(twoKeyEconomy).approve(twoKeyUpgradableExchangeContract, balance);
				IUpgradableExchange(twoKeyUpgradableExchangeContract).buyStableCoinWith2key(balance, _address);
			}
			else if (block.timestamp >= ITwoKeyAdmin(twoKeyAdminAddress).getTwoKeyRewardsReleaseDate()) {
				IERC20(twoKeyEconomy).transfer(_address, balance);
			}
			else {
				revert();
			}

		}
        reservedAmount2keyForRewards -= balance;
	}
}



pragma solidity ^0.4.24;




contract TwoKeyCampaignIncentiveModels {
    enum IncentiveModel {MANUAL, VANILLA_AVERAGE, VANILLA_AVERAGE_LAST_3X, VANILLA_POWER_LAW, NO_REFERRAL_REWARD}
}



pragma solidity ^0.4.24;





library IncentiveModels {

    




    function averageModelRewards(
        uint totalRewardEthWEI,
        uint numberOfInfluencers
    ) internal pure returns (uint) {
        if(numberOfInfluencers > 0) {
            uint equalPart = totalRewardEthWEI / numberOfInfluencers;
            return equalPart;
        }
        return 0;
    }

    





    function averageLast3xRewards(
        uint totalRewardEthWEI,
        uint numberOfInfluencers
    ) internal pure returns (uint,uint) {
        if(numberOfInfluencers> 0) {
            uint rewardPerReferrer = totalRewardEthWEI / (numberOfInfluencers + 2);
            uint rewardForLast = rewardPerReferrer*3;
            return (rewardPerReferrer, rewardForLast);
        }
        return (0,0);
    }

    





    function powerLawRewards(
        uint totalRewardEthWEI,
        uint numberOfInfluencers,
        uint factor
    ) internal pure returns (uint[]) {
        uint[] memory rewards = new uint[](numberOfInfluencers);
        if(numberOfInfluencers > 0) {
            uint x = calculateX(totalRewardEthWEI,numberOfInfluencers,factor);
            for(uint i=0; i<numberOfInfluencers;i++) {
                rewards[numberOfInfluencers-i-1] = x / (2**i);
            }
        }
        return rewards;
    }


    





    function calculateX(
        uint sumWei,
        uint numberOfElements,
        uint factor
    ) private pure returns (uint) {
        uint a = 1;
        uint sumOfFactors = 1;
        for(uint i=1; i<numberOfElements; i++) {
            a = a*factor;
            sumOfFactors += a;
        }
        return (sumWei*a) / sumOfFactors;
    }
}



pragma solidity ^0.4.24;

contract TwoKeyConverterStates {
    enum ConverterState {NOT_EXISTING, PENDING_APPROVAL, APPROVED, REJECTED}

    
    
    
    function convertConverterStateToBytes(
        ConverterState state
    )
    internal
    pure
    returns (bytes32)
    {
        if(ConverterState.NOT_EXISTING == state) {
            return bytes32("NOT_EXISTING");
        }
        else if(ConverterState.PENDING_APPROVAL == state) {
            return bytes32("PENDING_APPROVAL");
        }
        else if(ConverterState.APPROVED == state) {
            return bytes32("APPROVED");
        }
        else if(ConverterState.REJECTED == state) {
            return bytes32("REJECTED");
        }
    }
}



pragma solidity ^0.4.24;





contract TwoKeyConversionStates {
    enum ConversionState {PENDING_APPROVAL, APPROVED, EXECUTED, REJECTED, CANCELLED_BY_CONVERTER}
}



pragma solidity ^0.4.0;

contract ITwoKeyDonationConversionHandler {
    function supportForCreateConversion(
        address _converterAddress,
        uint _conversionAmount,
        uint _maxReferralRewardETHWei,
        bool _isKYCRequired
    )
    public
    returns (uint);

    function executeConversion(
        uint _conversionId
    )
    public;

    function getAmountConverterSpent(
        address converter
    )
    public
    view
    returns (uint);

    function getStateForConverter(
        address _converter
    )
    external
    view
    returns (bytes32);

}



pragma solidity ^0.4.0;

contract ITwoKeyDonationLogicHandler {
    function getReferrers(address customer) public view returns (address[]);

    function updateRefchainRewards(
        uint256 _maxReferralRewardETHWei,
        address _converter,
        uint _conversionId,
        uint totalBounty2keys
    )
    public;

    function getReferrerPlasmaTotalEarnings(address _referrer) public view returns (uint);
}



pragma solidity ^0.4.24;





function beginMigration() public onlyMaintainer {
    require(_implementation != address(0));
    _implementation.delegatecall(abi.encodeWithSignature("initialize(address)", msg.sender));
}



pragma solidity ^0.4.24;

contract UpgradeableCampaign is UpgradeabilityCampaignStorage {






}



pragma solidity ^0.4.24;










contract TwoKeyDonationCampaign is UpgradeableCampaign, TwoKeyCampaign, TwoKeyCampaignIncentiveModels {

    bool initialized;

    address public twoKeyDonationConversionHandler; 
    address public twoKeyDonationLogicHandler;

    bool acceptsFiat; 



    
    mapping(address => uint256) private referrerPlasma2cut; 

    modifier onlyTwoKeyDonationConversionHandler {
        require(msg.sender == twoKeyDonationConversionHandler);
        _;
    }


    function setInitialParamsDonationCampaign(
        address _contractor,
        address _moderator,
        address _twoKeySingletonRegistry,
        address _twoKeyDonationConversionHandler,
        address _twoKeyDonationLogicHandler,
        uint [] numberValues,
        bool [] booleanValues
    )
    public
    {
        require(initialized == false);

        contractor = _contractor;
        
        moderator = _moderator;

        twoKeySingletonesRegistry = _twoKeySingletonRegistry;
        twoKeyEventSource = TwoKeyEventSource(getContractProxyAddress("TwoKeyEventSource"));

        totalSupply_ = 1000000;

        maxReferralRewardPercent = numberValues[0];
        conversionQuota = numberValues[6];

        twoKeyDonationConversionHandler = _twoKeyDonationConversionHandler;
        twoKeyDonationLogicHandler = _twoKeyDonationLogicHandler;


        mustConvertToReferr = booleanValues[0];
        isKYCRequired = booleanValues[1];
        acceptsFiat = booleanValues[2];


        ownerPlasma = twoKeyEventSource.plasmaOf(_contractor);
        received_from[ownerPlasma] = ownerPlasma;
        balances[ownerPlasma] = totalSupply_;


        initialized = true;
    }

    




    function setCutOf(
        address me,
        uint256 cut
    )
    internal
    {
        
        
        
        address plasma = twoKeyEventSource.plasmaOf(me);
        require(referrerPlasma2cut[plasma] == 0 || referrerPlasma2cut[plasma] == cut);
        referrerPlasma2cut[plasma] = cut;
    }

    




    function setCut(
        uint256 cut
    )
    public
    {
        setCutOf(msg.sender, cut);
    }


    



    function getReferrerCut(
        address me
    )
    public
    view
    returns (uint256)
    {
        return referrerPlasma2cut[twoKeyEventSource.plasmaOf(me)];
    }

    



    function distributeArcsBasedOnSignature(
        bytes sig,
        address _converter
    )
    private
    {
        address[] memory influencers;
        address[] memory keys;
        uint8[] memory weights;
        address old_address;
        (influencers, keys, weights, old_address) = super.getInfluencersKeysAndWeightsFromSignature(sig, _converter);
        uint i;
        address new_address;
        uint numberOfInfluencers = influencers.length;
        for (i = 0; i < numberOfInfluencers; i++) {
            new_address = twoKeyEventSource.plasmaOf(influencers[i]);

            if (received_from[new_address] == 0) {
                transferFrom(old_address, new_address, 1);
            } else {
                require(received_from[new_address] == old_address,'only tree ARCs allowed');
            }
            old_address = new_address;

            
            
            
            
            
            if (i < keys.length) {
                setPublicLinkKeyOf(new_address, keys[i]);
            }

            
            
            if (i < weights.length) {
                setCutOf(new_address, uint256(weights[i]));
            }
        }
    }


    




    function updateContractorProceeds(
        uint value
    )
    public
    {
        require(msg.sender == twoKeyDonationConversionHandler);
        contractorTotalProceeds = contractorTotalProceeds.add(value);
        contractorBalance = contractorBalance.add(value);
    }

    




    function joinAndShareARC(
        bytes signature,
        address receiver
    )
    public
    {
        distributeArcsBasedOnSignature(signature, msg.sender);
        transferFrom(twoKeyEventSource.plasmaOf(msg.sender), twoKeyEventSource.plasmaOf(receiver), 1);
    }

    



    function convert(
        bytes signature
    )
    public
    payable
    {
        address _converterPlasma = twoKeyEventSource.plasmaOf(msg.sender);
        if(received_from[_converterPlasma] == address(0)) {
            distributeArcsBasedOnSignature(signature, msg.sender);
        }
        createConversion(msg.value, msg.sender);
        twoKeyEventSource.converted(address(this),msg.sender,msg.value);
    }

    




    function createConversion(
        uint conversionAmountEthWEI,
        address converterAddress
    )
    private
    {
        uint256 maxReferralRewardFiatOrETHWei = conversionAmountEthWEI.mul(maxReferralRewardPercent).div(100);

        uint id = ITwoKeyDonationConversionHandler(twoKeyDonationConversionHandler).supportForCreateConversion(
            converterAddress,
            conversionAmountEthWEI,
            maxReferralRewardFiatOrETHWei,
            isKYCRequired
        );

        if(isKYCRequired == false) {
            ITwoKeyDonationConversionHandler(twoKeyDonationConversionHandler).executeConversion(id);
        }
    }

    





    function buyTokensAndDistributeReferrerRewards(
        uint256 _maxReferralRewardETHWei,
        address _converter,
        uint _conversionId
    )
    public
    returns (uint)
    {
        require(msg.sender == twoKeyDonationConversionHandler);
        
        uint totalBounty2keys;
        
        if(maxReferralRewardPercent > 0) {
            
            totalBounty2keys = buyTokensFromUpgradableExchange(_maxReferralRewardETHWei, address(this));
            
            ITwoKeyDonationLogicHandler(twoKeyDonationLogicHandler).updateRefchainRewards(
                _maxReferralRewardETHWei,
                _converter,
                _conversionId,
                totalBounty2keys);
        }
        reservedAmount2keyForRewards = reservedAmount2keyForRewards.add(totalBounty2keys);
        return totalBounty2keys;
    }

    



    function buyTokensForModeratorRewards(
        uint moderatorFee
    )
    public
    onlyTwoKeyDonationConversionHandler
    {
        
        address twoKeyDeepFreezeTokenPool = getContractProxyAddress("TwoKeyDeepFreezeTokenPool");

        uint networkFee = twoKeyEventSource.getTwoKeyDefaultNetworkTaxPercent();

        
        uint balance = moderatorFee.mul(100-networkFee).div(100);

        uint moderatorEarnings2key = buyTokensFromUpgradableExchange(balance,moderator); 
        buyTokensFromUpgradableExchange(moderatorFee - balance, twoKeyDeepFreezeTokenPool); 

        moderatorTotalEarnings2key = moderatorTotalEarnings2key.add(moderatorEarnings2key);
    }

    




    function getReferrerCuts(
        address last_influencer
    )
    public
    view
    returns (uint256[])
    {
        address[] memory influencers = ITwoKeyDonationLogicHandler(twoKeyDonationLogicHandler).getReferrers(last_influencer);
        uint256[] memory cuts = new uint256[](influencers.length + 1);

        uint numberOfInfluencers = influencers.length;
        for (uint i = 0; i < numberOfInfluencers; i++) {
            address influencer = influencers[i];
            cuts[i] = getReferrerCut(influencer);
        }
        cuts[influencers.length] = getReferrerCut(last_influencer);
        return cuts;
    }


    


    function getReferrerBalance(address _referrer) public view returns (uint) {
        return referrerPlasma2Balances2key[twoKeyEventSource.plasmaOf(_referrer)];
    }

    




    function updateReferrerPlasmaBalance(
        address _influencer,
        uint _balance
    )
    public
    {
        require(msg.sender == twoKeyDonationLogicHandler);
        referrerPlasma2Balances2key[_influencer] = referrerPlasma2Balances2key[_influencer].add(_balance);
    }

    


    function withdrawContractor() public onlyContractor {
        super.withdrawContractor();
    }

    


    function getReservedAmount2keyForRewards() public view returns (uint) {
        return reservedAmount2keyForRewards;
    }

    




    function getReferrerPlasmaBalance(
        address _influencer
    )
    public
    view
    returns (uint)
    {
        require(msg.sender == twoKeyDonationLogicHandler);
        return (referrerPlasma2Balances2key[_influencer]);
    }


}