{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 654,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i< pending.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 657,
          "vulnerability_to_line": null,
          "vulnerability_code": "                pending[i] = pending[pending.length-1];\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 658,
          "vulnerability_to_line": null,
          "vulnerability_code": "                delete pending[pending.length-1];\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 660,
          "vulnerability_to_line": null,
          "vulnerability_code": "                stateToConverter[key].length--;\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(string _name, string _symbol, address _tokensOwner) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "        owner = _tokensOwner;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "        name = _name;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "        symbol = _symbol;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balances[_tokensOwner] = totalSupply_;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 656,
          "vulnerability_to_line": null,
          "vulnerability_code": "                stateToConverter[destinationState].push(_converter);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 659,
          "vulnerability_to_line": null,
          "vulnerability_code": "                stateToConverter[key] = pending;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 660,
          "vulnerability_to_line": null,
          "vulnerability_code": "                stateToConverter[key].length--;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 654,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i< pending.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 586,
          "vulnerability_to_line": null,
          "vulnerability_code": "        counters[1]--; //Decrease number of approved conversions\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 660,
          "vulnerability_to_line": null,
          "vulnerability_code": "                stateToConverter[key].length--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 556,
          "vulnerability_to_line": null,
          "vulnerability_code": "        counters[1]++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 572,
          "vulnerability_to_line": null,
          "vulnerability_code": "        numberOfConversions++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 612,
          "vulnerability_to_line": null,
          "vulnerability_code": "            counters[5]++; //increase number of unique converters\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 618,
          "vulnerability_to_line": null,
          "vulnerability_code": "        counters[3]++; //Increase number of executed conversions\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 654,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i< pending.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_93"
      ],
      "vulnerability_findings": [
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 100,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => mapping (address => uint256)) internal allowed;\n",
          "message": "InvoiceTokenERC20.allowed (TwoKeyDonationConversionHandler.sol#100) is never initialized. It is used in:\n\t- allowance (TwoKeyDonationConversionHandler.sol#148-157)\n"
        },
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 374,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address internal _implementation;\n",
          "message": "UpgradeabilityCampaignStorage._implementation (TwoKeyDonationConversionHandler.sol#374) is never initialized. It is used in:\n\t- implementation (TwoKeyDonationConversionHandler.sol#380-382)\n"
        },
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 445,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => bool) isConverterAnonymous;\n",
          "message": "TwoKeyDonationConversionHandler.isConverterAnonymous (TwoKeyDonationConversionHandler.sol#445) is never initialized. It is used in:\n\t- getConversion (TwoKeyDonationConversionHandler.sol#804-829)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 577,
          "vulnerability_to_line": 622,
          "vulnerability_code": "    function executeConversion(\n\n        uint _conversionId\n\n    )\n\n    public\n\n    {\n\n        Conversion conversion = conversions[_conversionId];\n\n        require(converterToState[conversion.converter] == ConverterState.APPROVED);\n\n        require(conversion.state == ConversionState.APPROVED);\n\n\n\n        counters[1]--; //Decrease number of approved conversions\n\n\n\n//         Buy tokens from campaign and distribute rewards between referrers\n\n        uint totalReward2keys = twoKeyDonationCampaign.buyTokensAndDistributeReferrerRewards(\n\n            conversion.maxReferralRewardETHWei,\n\n            conversion.converter,\n\n            _conversionId\n\n        );\n\n\n\n\n\n        // Update reputation points in registry for conversion executed event\n\n//        ITwoKeyBaseReputationRegistry(twoKeyBaseReputationRegistry).updateOnConversionExecutedEvent(\n\n//            conversion.converter,\n\n//            contractor,\n\n//            twoKeyDonationCampaign\n\n//        );\n\n\n\n\n\n        amountConverterSpentEthWEI[conversion.converter] = amountConverterSpentEthWEI[conversion.converter].add(conversion.conversionAmount);\n\n        counters[8] = counters[8].add(totalReward2keys);\n\n        twoKeyDonationCampaign.buyTokensForModeratorRewards(conversion.moderatorFeeETHWei);\n\n        twoKeyDonationCampaign.updateContractorProceeds(conversion.contractorProceedsETHWei);\n\n\n\n        counters[6] = counters[6].add(conversion.conversionAmount);\n\n\n\n        if(doesConverterHaveExecutedConversions[conversion.converter] == false) {\n\n            counters[5]++; //increase number of unique converters\n\n            doesConverterHaveExecutedConversions[conversion.converter] = true;\n\n        }\n\n\n\n        conversion.maxReferralReward2key = totalReward2keys;\n\n        conversion.state = ConversionState.EXECUTED;\n\n        counters[3]++; //Increase number of executed conversions\n\n\n\n        //TODO: Add tokens transfer\n\n        transferInvoiceToken(conversion.converter, conversion.conversionAmount);\n",
          "message": "Reentrancy in TwoKeyDonationConversionHandler.executeConversion (TwoKeyDonationConversionHandler.sol#577-622):\n\tExternal calls:\n\t- totalReward2keys = twoKeyDonationCampaign.buyTokensAndDistributeReferrerRewards(conversion.maxReferralRewardETHWei,conversion.converter,_conversionId) (TwoKeyDonationConversionHandler.sol#589-593)\n\tState variables written after the call(s):\n\t- counters (TwoKeyDonationConversionHandler.sol#605)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 577,
          "vulnerability_to_line": 622,
          "vulnerability_code": "    function executeConversion(\n\n        uint _conversionId\n\n    )\n\n    public\n\n    {\n\n        Conversion conversion = conversions[_conversionId];\n\n        require(converterToState[conversion.converter] == ConverterState.APPROVED);\n\n        require(conversion.state == ConversionState.APPROVED);\n\n\n\n        counters[1]--; //Decrease number of approved conversions\n\n\n\n//         Buy tokens from campaign and distribute rewards between referrers\n\n        uint totalReward2keys = twoKeyDonationCampaign.buyTokensAndDistributeReferrerRewards(\n\n            conversion.maxReferralRewardETHWei,\n\n            conversion.converter,\n\n            _conversionId\n\n        );\n\n\n\n\n\n        // Update reputation points in registry for conversion executed event\n\n//        ITwoKeyBaseReputationRegistry(twoKeyBaseReputationRegistry).updateOnConversionExecutedEvent(\n\n//            conversion.converter,\n\n//            contractor,\n\n//            twoKeyDonationCampaign\n\n//        );\n\n\n\n\n\n        amountConverterSpentEthWEI[conversion.converter] = amountConverterSpentEthWEI[conversion.converter].add(conversion.conversionAmount);\n\n        counters[8] = counters[8].add(totalReward2keys);\n\n        twoKeyDonationCampaign.buyTokensForModeratorRewards(conversion.moderatorFeeETHWei);\n\n        twoKeyDonationCampaign.updateContractorProceeds(conversion.contractorProceedsETHWei);\n\n\n\n        counters[6] = counters[6].add(conversion.conversionAmount);\n\n\n\n        if(doesConverterHaveExecutedConversions[conversion.converter] == false) {\n\n            counters[5]++; //increase number of unique converters\n\n            doesConverterHaveExecutedConversions[conversion.converter] = true;\n\n        }\n\n\n\n        conversion.maxReferralReward2key = totalReward2keys;\n\n        conversion.state = ConversionState.EXECUTED;\n\n        counters[3]++; //Increase number of executed conversions\n\n\n\n        //TODO: Add tokens transfer\n\n        transferInvoiceToken(conversion.converter, conversion.conversionAmount);\n",
          "message": "Reentrancy in TwoKeyDonationConversionHandler.executeConversion (TwoKeyDonationConversionHandler.sol#577-622):\n\tExternal calls:\n\t- totalReward2keys = twoKeyDonationCampaign.buyTokensAndDistributeReferrerRewards(conversion.maxReferralRewardETHWei,conversion.converter,_conversionId) (TwoKeyDonationConversionHandler.sol#589-593)\n\t- twoKeyDonationCampaign.buyTokensForModeratorRewards(conversion.moderatorFeeETHWei) (TwoKeyDonationConversionHandler.sol#606)\n\t- twoKeyDonationCampaign.updateContractorProceeds(conversion.contractorProceedsETHWei) (TwoKeyDonationConversionHandler.sol#607)\n\tState variables written after the call(s):\n\t- conversions (TwoKeyDonationConversionHandler.sol#616)\n\t- conversions (TwoKeyDonationConversionHandler.sol#617)\n\t- counters (TwoKeyDonationConversionHandler.sol#609)\n\t- counters (TwoKeyDonationConversionHandler.sol#612)\n\t- counters (TwoKeyDonationConversionHandler.sol#618)\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 813,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address converter; // Defaults to 0x0\n",
          "message": "converter in TwoKeyDonationConversionHandler.getConversion (TwoKeyDonationConversionHandler.sol#813) is a local variable never initialiazed\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 624,
          "vulnerability_to_line": 640,
          "vulnerability_code": "    function transferInvoiceToken(\n\n        address _converter,\n\n        uint _conversionAmountETHWei\n\n    )\n\n    internal\n\n    {\n\n        if(keccak256(currency) == keccak256('ETH')) {\n\n            erc20InvoiceToken.transfer(_converter, _conversionAmountETHWei);\n\n        } else {\n\n            address twoKeyExchangeRateContract = getAddressFromTwoKeySingletonRegistry(\"TwoKeyExchangeRateContract\");\n\n            uint rate = ITwoKeyExchangeRateContract(twoKeyExchangeRateContract).getBaseToTargetRate(currency);\n\n\n\n            uint conversionAmountInFIAT = (_conversionAmountETHWei*rate).div(10**18);\n\n\n\n            erc20InvoiceToken.transfer(_converter, conversionAmountInFIAT);\n\n        }\n",
          "message": "TwoKeyDonationConversionHandler.transferInvoiceToken (TwoKeyDonationConversionHandler.sol#624-640) does not use the value returned by external calls:\n\t-erc20InvoiceToken.transfer(_converter,_conversionAmountETHWei) (TwoKeyDonationConversionHandler.sol#631)\n\t-erc20InvoiceToken.transfer(_converter,conversionAmountInFIAT) (TwoKeyDonationConversionHandler.sol#638)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 577,
          "vulnerability_to_line": 622,
          "vulnerability_code": "    function executeConversion(\n\n        uint _conversionId\n\n    )\n\n    public\n\n    {\n\n        Conversion conversion = conversions[_conversionId];\n\n        require(converterToState[conversion.converter] == ConverterState.APPROVED);\n\n        require(conversion.state == ConversionState.APPROVED);\n\n\n\n        counters[1]--; //Decrease number of approved conversions\n\n\n\n//         Buy tokens from campaign and distribute rewards between referrers\n\n        uint totalReward2keys = twoKeyDonationCampaign.buyTokensAndDistributeReferrerRewards(\n\n            conversion.maxReferralRewardETHWei,\n\n            conversion.converter,\n\n            _conversionId\n\n        );\n\n\n\n\n\n        // Update reputation points in registry for conversion executed event\n\n//        ITwoKeyBaseReputationRegistry(twoKeyBaseReputationRegistry).updateOnConversionExecutedEvent(\n\n//            conversion.converter,\n\n//            contractor,\n\n//            twoKeyDonationCampaign\n\n//        );\n\n\n\n\n\n        amountConverterSpentEthWEI[conversion.converter] = amountConverterSpentEthWEI[conversion.converter].add(conversion.conversionAmount);\n\n        counters[8] = counters[8].add(totalReward2keys);\n\n        twoKeyDonationCampaign.buyTokensForModeratorRewards(conversion.moderatorFeeETHWei);\n\n        twoKeyDonationCampaign.updateContractorProceeds(conversion.contractorProceedsETHWei);\n\n\n\n        counters[6] = counters[6].add(conversion.conversionAmount);\n\n\n\n        if(doesConverterHaveExecutedConversions[conversion.converter] == false) {\n\n            counters[5]++; //increase number of unique converters\n\n            doesConverterHaveExecutedConversions[conversion.converter] = true;\n\n        }\n\n\n\n        conversion.maxReferralReward2key = totalReward2keys;\n\n        conversion.state = ConversionState.EXECUTED;\n\n        counters[3]++; //Increase number of executed conversions\n\n\n\n        //TODO: Add tokens transfer\n\n        transferInvoiceToken(conversion.converter, conversion.conversionAmount);\n",
          "message": "Reentrancy in TwoKeyDonationConversionHandler.executeConversion (TwoKeyDonationConversionHandler.sol#577-622):\n\tExternal calls:\n\t- totalReward2keys = twoKeyDonationCampaign.buyTokensAndDistributeReferrerRewards(conversion.maxReferralRewardETHWei,conversion.converter,_conversionId) (TwoKeyDonationConversionHandler.sol#589-593)\n\tState variables written after the call(s):\n\t- amountConverterSpentEthWEI (TwoKeyDonationConversionHandler.sol#604)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 577,
          "vulnerability_to_line": 622,
          "vulnerability_code": "    function executeConversion(\n\n        uint _conversionId\n\n    )\n\n    public\n\n    {\n\n        Conversion conversion = conversions[_conversionId];\n\n        require(converterToState[conversion.converter] == ConverterState.APPROVED);\n\n        require(conversion.state == ConversionState.APPROVED);\n\n\n\n        counters[1]--; //Decrease number of approved conversions\n\n\n\n//         Buy tokens from campaign and distribute rewards between referrers\n\n        uint totalReward2keys = twoKeyDonationCampaign.buyTokensAndDistributeReferrerRewards(\n\n            conversion.maxReferralRewardETHWei,\n\n            conversion.converter,\n\n            _conversionId\n\n        );\n\n\n\n\n\n        // Update reputation points in registry for conversion executed event\n\n//        ITwoKeyBaseReputationRegistry(twoKeyBaseReputationRegistry).updateOnConversionExecutedEvent(\n\n//            conversion.converter,\n\n//            contractor,\n\n//            twoKeyDonationCampaign\n\n//        );\n\n\n\n\n\n        amountConverterSpentEthWEI[conversion.converter] = amountConverterSpentEthWEI[conversion.converter].add(conversion.conversionAmount);\n\n        counters[8] = counters[8].add(totalReward2keys);\n\n        twoKeyDonationCampaign.buyTokensForModeratorRewards(conversion.moderatorFeeETHWei);\n\n        twoKeyDonationCampaign.updateContractorProceeds(conversion.contractorProceedsETHWei);\n\n\n\n        counters[6] = counters[6].add(conversion.conversionAmount);\n\n\n\n        if(doesConverterHaveExecutedConversions[conversion.converter] == false) {\n\n            counters[5]++; //increase number of unique converters\n\n            doesConverterHaveExecutedConversions[conversion.converter] = true;\n\n        }\n\n\n\n        conversion.maxReferralReward2key = totalReward2keys;\n\n        conversion.state = ConversionState.EXECUTED;\n\n        counters[3]++; //Increase number of executed conversions\n\n\n\n        //TODO: Add tokens transfer\n\n        transferInvoiceToken(conversion.converter, conversion.conversionAmount);\n",
          "message": "Reentrancy in TwoKeyDonationConversionHandler.executeConversion (TwoKeyDonationConversionHandler.sol#577-622):\n\tExternal calls:\n\t- totalReward2keys = twoKeyDonationCampaign.buyTokensAndDistributeReferrerRewards(conversion.maxReferralRewardETHWei,conversion.converter,_conversionId) (TwoKeyDonationConversionHandler.sol#589-593)\n\t- twoKeyDonationCampaign.buyTokensForModeratorRewards(conversion.moderatorFeeETHWei) (TwoKeyDonationConversionHandler.sol#606)\n\t- twoKeyDonationCampaign.updateContractorProceeds(conversion.contractorProceedsETHWei) (TwoKeyDonationConversionHandler.sol#607)\n\tState variables written after the call(s):\n\t- doesConverterHaveExecutedConversions (TwoKeyDonationConversionHandler.sol#613)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 527,
          "vulnerability_to_line": 575,
          "vulnerability_code": "    function supportForCreateConversion(\n\n        address _converterAddress,\n\n        uint _conversionAmount,\n\n        uint _maxReferralRewardETHWei,\n\n        bool _isKYCRequired\n\n    )\n\n    public\n\n    returns (uint)\n\n    {\n\n        require(msg.sender == address(twoKeyDonationCampaign));\n\n        //If KYC is required, basic funnel executes and we require that converter is not previously rejected\n\n        if(_isKYCRequired == true) {\n\n            require(converterToState[_converterAddress] != ConverterState.REJECTED); // If converter is rejected then can't create conversion\n\n            // Checking the state for converter, if this is his 1st time, he goes initially to PENDING_APPROVAL\n\n            if(converterToState[_converterAddress] == ConverterState.NOT_EXISTING) {\n\n                converterToState[_converterAddress] = ConverterState.PENDING_APPROVAL;\n\n                stateToConverter[bytes32(\"PENDING_APPROVAL\")].push(_converterAddress);\n\n            }\n\n        } else {\n\n            //If KYC is not required converter is automatically approved\n\n            if(converterToState[_converterAddress] == ConverterState.NOT_EXISTING) {\n\n                converterToState[_converterAddress] = ConverterState.APPROVED;\n\n                stateToConverter[bytes32(\"APPROVED\")].push(_converterAddress);\n\n            }\n\n        }\n\n\n\n\n\n        uint256 _moderatorFeeETHWei = calculateModeratorFee(_conversionAmount);\n\n        uint256 _contractorProceeds = _conversionAmount - _maxReferralRewardETHWei - _moderatorFeeETHWei;\n\n        counters[1]++;\n\n\n\n        Conversion memory c = Conversion(\n\n            contractor,\n\n            _contractorProceeds,\n\n            _converterAddress,\n\n            ConversionState.APPROVED,\n\n            _conversionAmount,\n\n            _maxReferralRewardETHWei,\n\n            0,\n\n            _moderatorFeeETHWei\n\n        );\n\n\n\n        conversions.push(c);\n\n        converterToHisConversions[_converterAddress].push(numberOfConversions);\n\n        emit ConversionCreated(numberOfConversions);\n\n        numberOfConversions++;\n\n\n\n        return numberOfConversions-1;\n",
          "message": "Reentrancy in TwoKeyDonationConversionHandler.supportForCreateConversion (TwoKeyDonationConversionHandler.sol#527-575):\n\tExternal calls:\n\t- _moderatorFeeETHWei = calculateModeratorFee(_conversionAmount) (TwoKeyDonationConversionHandler.sol#554)\n\tState variables written after the call(s):\n\t- conversions (TwoKeyDonationConversionHandler.sol#569)\n\t- converterToHisConversions (TwoKeyDonationConversionHandler.sol#570)\n\t- counters (TwoKeyDonationConversionHandler.sol#556)\n\t- numberOfConversions (TwoKeyDonationConversionHandler.sol#572)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 public decimals = 18;\n",
          "message": "InvoiceTokenERC20.decimals should be constant (TwoKeyDonationConversionHandler.sol#95)\nInvoiceTokenERC20.totalSupply_ should be constant (TwoKeyDonationConversionHandler.sol#92)\nUpgradeabilityCampaignStorage._implementation should be constant (TwoKeyDonationConversionHandler.sol#374)\nUpgradeabilityCampaignStorage.twoKeyFactory should be constant (TwoKeyDonationConversionHandler.sol#371)\n"
        },
        {
          "name": "pragma",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": "Different versions of Solidity is used in TwoKeyDonationConversionHandler.sol:\n\t- Version used: ['^0.4.0', '^0.4.24']\n\t- TwoKeyDonationConversionHandler.sol#3 declares pragma solidity^0.4.24\n\t- TwoKeyDonationConversionHandler.sol#25 declares pragma solidity^0.4.24\n\t- TwoKeyDonationConversionHandler.sol#80 declares pragma solidity^0.4.24\n\t- TwoKeyDonationConversionHandler.sol#193 declares pragma solidity^0.4.24\n\t- TwoKeyDonationConversionHandler.sol#205 declares pragma solidity^0.4.24\n\t- TwoKeyDonationConversionHandler.sol#237 declares pragma solidity^0.4.0\n\t- TwoKeyDonationConversionHandler.sol#264 declares pragma solidity^0.4.24\n\t- TwoKeyDonationConversionHandler.sol#276 declares pragma solidity^0.4.24\n\t- TwoKeyDonationConversionHandler.sol#289 declares pragma solidity^0.4.24\n\t- TwoKeyDonationConversionHandler.sol#301 declares pragma solidity^0.4.24\n\t- TwoKeyDonationConversionHandler.sol#309 declares pragma solidity^0.4.24\n\t- TwoKeyDonationConversionHandler.sol#321 declares pragma solidity^0.4.24\n\t- TwoKeyDonationConversionHandler.sol#361 declares pragma solidity^0.4.24\n\t- TwoKeyDonationConversionHandler.sol#387 declares pragma solidity^0.4.24\n\t- TwoKeyDonationConversionHandler.sol#400 declares pragma solidity^0.4.0\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 162,
          "vulnerability_to_line": 164,
          "vulnerability_code": "    function totalSupply() public view returns (uint256) {\n\n        return totalSupply_;\n",
          "message": "InvoiceTokenERC20.totalSupply (TwoKeyDonationConversionHandler.sol#162-164) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function totalSupply() public view returns (uint256);\n",
          "message": "ERC20.totalSupply (TwoKeyDonationConversionHandler.sol#12) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _who) public view returns (uint256);\n",
          "message": "ERC20.balanceOf (TwoKeyDonationConversionHandler.sol#13) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 185,
          "vulnerability_to_line": 187,
          "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint256) {\n\n        return balances[_owner];\n",
          "message": "InvoiceTokenERC20.balanceOf (TwoKeyDonationConversionHandler.sol#185-187) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool);\n",
          "message": "ERC20.transfer (TwoKeyDonationConversionHandler.sol#14) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 171,
          "vulnerability_to_line": 178,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public onlyOwner returns (bool) {\n\n        require(_value <= balances[msg.sender]);\n\n        require(_to != address(0));\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n\n        balances[_to] = balances[_to].add(_value);\n\n        emit Transfer(msg.sender, _to, _value);\n\n        return true;\n",
          "message": "InvoiceTokenERC20.transfer (TwoKeyDonationConversionHandler.sol#171-178) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 148,
          "vulnerability_to_line": 157,
          "vulnerability_code": "    function allowance(\n\n        address _owner,\n\n        address _spender\n\n    )\n\n    public\n\n    view\n\n    returns (uint256)\n\n    {\n\n        return allowed[_owner][_spender];\n",
          "message": "InvoiceTokenERC20.allowance (TwoKeyDonationConversionHandler.sol#148-157) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _ocwner, address _spender) public view returns (uint256);\n",
          "message": "ERC20.allowance (TwoKeyDonationConversionHandler.sol#15) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": 140,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n\n        revert();\n",
          "message": "InvoiceTokenERC20.approve (TwoKeyDonationConversionHandler.sol#138-140) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address spender, uint tokens) public returns (bool success);\n",
          "message": "ERC20.approve (TwoKeyDonationConversionHandler.sol#16) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": 132,
          "vulnerability_code": "    function transferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _value\n\n    )\n\n    public\n\n    returns (bool)\n\n    {\n\n        revert();\n",
          "message": "InvoiceTokenERC20.transferFrom (TwoKeyDonationConversionHandler.sol#123-132) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n",
          "message": "ERC20.transferFrom (TwoKeyDonationConversionHandler.sol#17) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 241,
          "vulnerability_to_line": 244,
          "vulnerability_code": "    function buyTokensForModeratorRewards(\n\n        uint moderatorFee\n\n    )\n",
          "message": "ITwoKeyDonationCampaign.buyTokensForModeratorRewards (TwoKeyDonationConversionHandler.sol#241-244) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 246,
          "vulnerability_to_line": 252,
          "vulnerability_code": "    function buyTokensAndDistributeReferrerRewards(\n\n        uint256 _maxReferralRewardETHWei,\n\n        address _converter,\n\n        uint _conversionId\n\n    )\n\n    public\n",
          "message": "ITwoKeyDonationCampaign.buyTokensAndDistributeReferrerRewards (TwoKeyDonationConversionHandler.sol#246-252) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 254,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getReferrerPlasmaBalance(address _influencer) public view returns (uint);\n",
          "message": "ITwoKeyDonationCampaign.getReferrerPlasmaBalance (TwoKeyDonationConversionHandler.sol#254) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 255,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function updateReferrerPlasmaBalance(address _influencer, uint _balance) public;\n",
          "message": "ITwoKeyDonationCampaign.updateReferrerPlasmaBalance (TwoKeyDonationConversionHandler.sol#255) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 256,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getReferrerCut(address me) public view returns (uint256);\n",
          "message": "ITwoKeyDonationCampaign.getReferrerCut (TwoKeyDonationConversionHandler.sol#256) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 257,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function updateContractorProceeds(uint value) public;\n",
          "message": "ITwoKeyDonationCampaign.updateContractorProceeds (TwoKeyDonationConversionHandler.sol#257) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 258,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getReceivedFrom(address _receiver) public view returns (address);\n",
          "message": "ITwoKeyDonationCampaign.getReceivedFrom (TwoKeyDonationConversionHandler.sol#258) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 259,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint256);\n",
          "message": "ITwoKeyDonationCampaign.balanceOf (TwoKeyDonationConversionHandler.sol#259) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 268,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ethereumOf(address me) public view returns (address);\n",
          "message": "ITwoKeyEventSource.ethereumOf (TwoKeyDonationConversionHandler.sol#268) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 269,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function plasmaOf(address me) public view returns (address);\n",
          "message": "ITwoKeyEventSource.plasmaOf (TwoKeyDonationConversionHandler.sol#269) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 270,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isAddressMaintainer(address _maintainer) public view returns (bool);\n",
          "message": "ITwoKeyEventSource.isAddressMaintainer (TwoKeyDonationConversionHandler.sol#270) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 271,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTwoKeyDefaultIntegratorFeeFromAdmin() public view returns (uint);\n",
          "message": "ITwoKeyEventSource.getTwoKeyDefaultIntegratorFeeFromAdmin (TwoKeyDonationConversionHandler.sol#271) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 282,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getContractProxyAddress(string _contractName) public view returns (address);\n",
          "message": "ITwoKeySingletoneRegistryFetchAddress.getContractProxyAddress (TwoKeyDonationConversionHandler.sol#282) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 283,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getNonUpgradableContractAddress(string contractName) public view returns (address);\n",
          "message": "ITwoKeySingletoneRegistryFetchAddress.getNonUpgradableContractAddress (TwoKeyDonationConversionHandler.sol#283) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 284,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getLatestContractVersion(string contractName) public view returns (string);\n",
          "message": "ITwoKeySingletoneRegistryFetchAddress.getLatestContractVersion (TwoKeyDonationConversionHandler.sol#284) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function updateOnConversionExecutedEvent(address converter, address contractor, address acquisitionCampaign) public;\n",
          "message": "ITwoKeyBaseReputationRegistry.updateOnConversionExecutedEvent (TwoKeyDonationConversionHandler.sol#295) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 296,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function updateOnConversionRejectedEvent(address converter, address contractor, address acquisitionCampaign) public;\n",
          "message": "ITwoKeyBaseReputationRegistry.updateOnConversionRejectedEvent (TwoKeyDonationConversionHandler.sol#296) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 304,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function onlyMaintainer(address _sender) public view returns (bool);\n",
          "message": "ITwoKeyMaintainersRegistry.onlyMaintainer (TwoKeyDonationConversionHandler.sol#304) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 316,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBaseToTargetRate(string _currency) public view returns (uint);\n",
          "message": "ITwoKeyExchangeRateContract.getBaseToTargetRate (TwoKeyDonationConversionHandler.sol#316) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 348,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addVersion(string _contractName, string version, address implementation) public;\n",
          "message": "ITwoKeySingletonesRegistry.addVersion (TwoKeyDonationConversionHandler.sol#348) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 356,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getVersion(string _contractName, string version) public view returns (address);\n",
          "message": "ITwoKeySingletonesRegistry.getVersion (TwoKeyDonationConversionHandler.sol#356) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 380,
          "vulnerability_to_line": 382,
          "vulnerability_code": "    function implementation() public view returns (address) {\n\n        return _implementation;\n",
          "message": "UpgradeabilityCampaignStorage.implementation (TwoKeyDonationConversionHandler.sol#380-382) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 475,
          "vulnerability_to_line": 497,
          "vulnerability_code": "    function setInitialParamsDonationConversionHandler(\n\n        string tokenName,\n\n        string tokenSymbol,\n\n        string _currency,\n\n        address _contractor,\n\n        address _twoKeyDonationCampaign,\n\n        address _twoKeySingletonRegistry\n\n    )\n\n    public\n\n    {\n\n        require(isCampaignInitialized == false);\n\n\n\n        counters = new uint[](10);\n\n        twoKeyDonationCampaign = ITwoKeyDonationCampaign(_twoKeyDonationCampaign);\n\n        twoKeySingletonRegistry = _twoKeySingletonRegistry;\n\n        contractor = _contractor;\n\n        currency = _currency;\n\n        // Deploy an ERC20 token which will be used as the Invoice\n\n        erc20InvoiceToken = new InvoiceTokenERC20(tokenName,tokenSymbol,address(this));\n\n        // Emit an event with deployed token address, name, and symbol\n\n        emit InvoiceTokenCreated(address(erc20InvoiceToken), tokenName, tokenSymbol);\n\n        isCampaignInitialized = true;\n",
          "message": "TwoKeyDonationConversionHandler.setInitialParamsDonationConversionHandler (TwoKeyDonationConversionHandler.sol#475-497) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 527,
          "vulnerability_to_line": 575,
          "vulnerability_code": "    function supportForCreateConversion(\n\n        address _converterAddress,\n\n        uint _conversionAmount,\n\n        uint _maxReferralRewardETHWei,\n\n        bool _isKYCRequired\n\n    )\n\n    public\n\n    returns (uint)\n\n    {\n\n        require(msg.sender == address(twoKeyDonationCampaign));\n\n        //If KYC is required, basic funnel executes and we require that converter is not previously rejected\n\n        if(_isKYCRequired == true) {\n\n            require(converterToState[_converterAddress] != ConverterState.REJECTED); // If converter is rejected then can't create conversion\n\n            // Checking the state for converter, if this is his 1st time, he goes initially to PENDING_APPROVAL\n\n            if(converterToState[_converterAddress] == ConverterState.NOT_EXISTING) {\n\n                converterToState[_converterAddress] = ConverterState.PENDING_APPROVAL;\n\n                stateToConverter[bytes32(\"PENDING_APPROVAL\")].push(_converterAddress);\n\n            }\n\n        } else {\n\n            //If KYC is not required converter is automatically approved\n\n            if(converterToState[_converterAddress] == ConverterState.NOT_EXISTING) {\n\n                converterToState[_converterAddress] = ConverterState.APPROVED;\n\n                stateToConverter[bytes32(\"APPROVED\")].push(_converterAddress);\n\n            }\n\n        }\n\n\n\n\n\n        uint256 _moderatorFeeETHWei = calculateModeratorFee(_conversionAmount);\n\n        uint256 _contractorProceeds = _conversionAmount - _maxReferralRewardETHWei - _moderatorFeeETHWei;\n\n        counters[1]++;\n\n\n\n        Conversion memory c = Conversion(\n\n            contractor,\n\n            _contractorProceeds,\n\n            _converterAddress,\n\n            ConversionState.APPROVED,\n\n            _conversionAmount,\n\n            _maxReferralRewardETHWei,\n\n            0,\n\n            _moderatorFeeETHWei\n\n        );\n\n\n\n        conversions.push(c);\n\n        converterToHisConversions[_converterAddress].push(numberOfConversions);\n\n        emit ConversionCreated(numberOfConversions);\n\n        numberOfConversions++;\n\n\n\n        return numberOfConversions-1;\n",
          "message": "TwoKeyDonationConversionHandler.supportForCreateConversion (TwoKeyDonationConversionHandler.sol#527-575) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 577,
          "vulnerability_to_line": 622,
          "vulnerability_code": "    function executeConversion(\n\n        uint _conversionId\n\n    )\n\n    public\n\n    {\n\n        Conversion conversion = conversions[_conversionId];\n\n        require(converterToState[conversion.converter] == ConverterState.APPROVED);\n\n        require(conversion.state == ConversionState.APPROVED);\n\n\n\n        counters[1]--; //Decrease number of approved conversions\n\n\n\n//         Buy tokens from campaign and distribute rewards between referrers\n\n        uint totalReward2keys = twoKeyDonationCampaign.buyTokensAndDistributeReferrerRewards(\n\n            conversion.maxReferralRewardETHWei,\n\n            conversion.converter,\n\n            _conversionId\n\n        );\n\n\n\n\n\n        // Update reputation points in registry for conversion executed event\n\n//        ITwoKeyBaseReputationRegistry(twoKeyBaseReputationRegistry).updateOnConversionExecutedEvent(\n\n//            conversion.converter,\n\n//            contractor,\n\n//            twoKeyDonationCampaign\n\n//        );\n\n\n\n\n\n        amountConverterSpentEthWEI[conversion.converter] = amountConverterSpentEthWEI[conversion.converter].add(conversion.conversionAmount);\n\n        counters[8] = counters[8].add(totalReward2keys);\n\n        twoKeyDonationCampaign.buyTokensForModeratorRewards(conversion.moderatorFeeETHWei);\n\n        twoKeyDonationCampaign.updateContractorProceeds(conversion.contractorProceedsETHWei);\n\n\n\n        counters[6] = counters[6].add(conversion.conversionAmount);\n\n\n\n        if(doesConverterHaveExecutedConversions[conversion.converter] == false) {\n\n            counters[5]++; //increase number of unique converters\n\n            doesConverterHaveExecutedConversions[conversion.converter] = true;\n\n        }\n\n\n\n        conversion.maxReferralReward2key = totalReward2keys;\n\n        conversion.state = ConversionState.EXECUTED;\n\n        counters[3]++; //Increase number of executed conversions\n\n\n\n        //TODO: Add tokens transfer\n\n        transferInvoiceToken(conversion.converter, conversion.conversionAmount);\n",
          "message": "TwoKeyDonationConversionHandler.executeConversion (TwoKeyDonationConversionHandler.sol#577-622) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 697,
          "vulnerability_to_line": 705,
          "vulnerability_code": "    function approveConverter(\n\n        address _converter\n\n    )\n\n    public\n\n    onlyContractorOrMaintainer\n\n    {\n\n        require(converterToState[_converter] == ConverterState.PENDING_APPROVAL);\n\n        moveFromPendingOrRejectedToApprovedState(_converter);\n",
          "message": "TwoKeyDonationConversionHandler.approveConverter (TwoKeyDonationConversionHandler.sol#697-705) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 715,
          "vulnerability_to_line": 723,
          "vulnerability_code": "    function getConverterConversionIds(\n\n        address _converter\n\n    )\n\n    public\n\n    view\n\n    returns (uint[])\n\n    {\n\n        return converterToHisConversions[_converter];\n",
          "message": "TwoKeyDonationConversionHandler.getConverterConversionIds (TwoKeyDonationConversionHandler.sol#715-723) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 726,
          "vulnerability_to_line": 734,
          "vulnerability_code": "    function getLastConverterConversionId(\n\n        address _converter\n\n    )\n\n    public\n\n    view\n\n    returns (uint)\n\n    {\n\n        return converterToHisConversions[_converter][converterToHisConversions[_converter].length - 1];\n",
          "message": "TwoKeyDonationConversionHandler.getLastConverterConversionId (TwoKeyDonationConversionHandler.sol#726-734) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 740,
          "vulnerability_to_line": 759,
          "vulnerability_code": "    function getCampaignSummary()\n\n    public\n\n    view\n\n    returns (uint,uint,uint,uint[])\n\n    {\n\n        bytes32 pending = convertConverterStateToBytes(ConverterState.PENDING_APPROVAL);\n\n        bytes32 approved = convertConverterStateToBytes(ConverterState.APPROVED);\n\n        bytes32 rejected = convertConverterStateToBytes(ConverterState.REJECTED);\n\n\n\n        uint numberOfPending = stateToConverter[pending].length;\n\n        uint numberOfApproved = stateToConverter[approved].length;\n\n        uint numberOfRejected = stateToConverter[rejected].length;\n\n\n\n        return (\n\n        numberOfPending,\n\n        numberOfApproved,\n\n        numberOfRejected,\n\n        counters\n\n        );\n",
          "message": "TwoKeyDonationConversionHandler.getCampaignSummary (TwoKeyDonationConversionHandler.sol#740-759) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 789,
          "vulnerability_to_line": 798,
          "vulnerability_code": "    function getAllConvertersPerState(\n\n        bytes32 state\n\n    )\n\n    public\n\n    view\n\n    onlyContractorOrMaintainer\n\n    returns (address[])\n\n    {\n\n        return stateToConverter[state];\n",
          "message": "TwoKeyDonationConversionHandler.getAllConvertersPerState (TwoKeyDonationConversionHandler.sol#789-798) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 831,
          "vulnerability_to_line": 838,
          "vulnerability_code": "    function getAmountConverterSpent(\n\n        address converter\n\n    )\n\n    public\n\n    view\n\n    returns (uint) {\n\n        return amountConverterSpentEthWEI[converter];\n",
          "message": "TwoKeyDonationConversionHandler.getAmountConverterSpent (TwoKeyDonationConversionHandler.sol#831-838) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 237,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;\n",
          "message": "Detected issues with version pragma in TwoKeyDonationConversionHandler.sol:\n\t- pragma solidity^0.4.0 (TwoKeyDonationConversionHandler.sol#237): it allows old versions\n\t- pragma solidity^0.4.0 (TwoKeyDonationConversionHandler.sol#400): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_a' of SafeMath.mul (TwoKeyDonationConversionHandler.sol#37) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_b' of SafeMath.mul (TwoKeyDonationConversionHandler.sol#37) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_a' of SafeMath.div (TwoKeyDonationConversionHandler.sol#53) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_b' of SafeMath.div (TwoKeyDonationConversionHandler.sol#53) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_a' of SafeMath.sub (TwoKeyDonationConversionHandler.sol#63) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_b' of SafeMath.sub (TwoKeyDonationConversionHandler.sol#63) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_a' of SafeMath.add (TwoKeyDonationConversionHandler.sol#71) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_b' of SafeMath.add (TwoKeyDonationConversionHandler.sol#71) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 185,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint256) {\n",
          "message": "Parameter '_owner' of InvoiceTokenERC20.balanceOf (TwoKeyDonationConversionHandler.sol#185) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 171,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public onlyOwner returns (bool) {\n",
          "message": "Parameter '_to' of InvoiceTokenERC20.transfer (TwoKeyDonationConversionHandler.sol#171) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 171,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public onlyOwner returns (bool) {\n",
          "message": "Parameter '_value' of InvoiceTokenERC20.transfer (TwoKeyDonationConversionHandler.sol#171) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _owner,\n",
          "message": "Parameter '_owner' of InvoiceTokenERC20.allowance (TwoKeyDonationConversionHandler.sol#149) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _spender\n",
          "message": "Parameter '_spender' of InvoiceTokenERC20.allowance (TwoKeyDonationConversionHandler.sol#150) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(string _name, string _symbol, address _tokensOwner) public {\n",
          "message": "Parameter '_name' of InvoiceTokenERC20. (TwoKeyDonationConversionHandler.sol#110) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(string _name, string _symbol, address _tokensOwner) public {\n",
          "message": "Parameter '_symbol' of InvoiceTokenERC20. (TwoKeyDonationConversionHandler.sol#110) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(string _name, string _symbol, address _tokensOwner) public {\n",
          "message": "Parameter '_tokensOwner' of InvoiceTokenERC20. (TwoKeyDonationConversionHandler.sol#110) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 374,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address internal _implementation;\n",
          "message": "Variable 'UpgradeabilityCampaignStorage._implementation' (TwoKeyDonationConversionHandler.sol#374) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 478,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _currency,\n",
          "message": "Parameter '_currency' of TwoKeyDonationConversionHandler.setInitialParamsDonationConversionHandler (TwoKeyDonationConversionHandler.sol#478) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 479,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _contractor,\n",
          "message": "Parameter '_contractor' of TwoKeyDonationConversionHandler.setInitialParamsDonationConversionHandler (TwoKeyDonationConversionHandler.sol#479) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 480,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _twoKeyDonationCampaign,\n",
          "message": "Parameter '_twoKeyDonationCampaign' of TwoKeyDonationConversionHandler.setInitialParamsDonationConversionHandler (TwoKeyDonationConversionHandler.sol#480) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 481,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _twoKeySingletonRegistry\n",
          "message": "Parameter '_twoKeySingletonRegistry' of TwoKeyDonationConversionHandler.setInitialParamsDonationConversionHandler (TwoKeyDonationConversionHandler.sol#481) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 512,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _conversionAmountETHWei\n",
          "message": "Parameter '_conversionAmountETHWei' of TwoKeyDonationConversionHandler.calculateModeratorFee (TwoKeyDonationConversionHandler.sol#512) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 528,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _converterAddress,\n",
          "message": "Parameter '_converterAddress' of TwoKeyDonationConversionHandler.supportForCreateConversion (TwoKeyDonationConversionHandler.sol#528) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 529,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _conversionAmount,\n",
          "message": "Parameter '_conversionAmount' of TwoKeyDonationConversionHandler.supportForCreateConversion (TwoKeyDonationConversionHandler.sol#529) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 530,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _maxReferralRewardETHWei,\n",
          "message": "Parameter '_maxReferralRewardETHWei' of TwoKeyDonationConversionHandler.supportForCreateConversion (TwoKeyDonationConversionHandler.sol#530) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 531,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool _isKYCRequired\n",
          "message": "Parameter '_isKYCRequired' of TwoKeyDonationConversionHandler.supportForCreateConversion (TwoKeyDonationConversionHandler.sol#531) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 578,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _conversionId\n",
          "message": "Parameter '_conversionId' of TwoKeyDonationConversionHandler.executeConversion (TwoKeyDonationConversionHandler.sol#578) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 625,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _converter,\n",
          "message": "Parameter '_converter' of TwoKeyDonationConversionHandler.transferInvoiceToken (TwoKeyDonationConversionHandler.sol#625) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 626,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _conversionAmountETHWei\n",
          "message": "Parameter '_conversionAmountETHWei' of TwoKeyDonationConversionHandler.transferInvoiceToken (TwoKeyDonationConversionHandler.sol#626) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 646,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _converter,\n",
          "message": "Parameter '_converter' of TwoKeyDonationConversionHandler.moveFromStateAToStateB (TwoKeyDonationConversionHandler.sol#646) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 670,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _converter\n",
          "message": "Parameter '_converter' of TwoKeyDonationConversionHandler.moveFromPendingOrRejectedToApprovedState (TwoKeyDonationConversionHandler.sol#670) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 684,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _converter\n",
          "message": "Parameter '_converter' of TwoKeyDonationConversionHandler.moveFromPendingToRejectedState (TwoKeyDonationConversionHandler.sol#684) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 698,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _converter\n",
          "message": "Parameter '_converter' of TwoKeyDonationConversionHandler.approveConverter (TwoKeyDonationConversionHandler.sol#698) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 716,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _converter\n",
          "message": "Parameter '_converter' of TwoKeyDonationConversionHandler.getConverterConversionIds (TwoKeyDonationConversionHandler.sol#716) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 727,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _converter\n",
          "message": "Parameter '_converter' of TwoKeyDonationConversionHandler.getLastConverterConversionId (TwoKeyDonationConversionHandler.sol#727) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 779,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _converter\n",
          "message": "Parameter '_converter' of TwoKeyDonationConversionHandler.getStateForConverter (TwoKeyDonationConversionHandler.sol#779) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 369,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ITwoKeySingletonesRegistry internal registry;\n",
          "message": "UpgradeabilityCampaignStorage.registry (TwoKeyDonationConversionHandler.sol#369) is never used in TwoKeyDonationConversionHandler\nUpgradeabilityCampaignStorage.twoKeyFactory (TwoKeyDonationConversionHandler.sol#371) is never used in TwoKeyDonationConversionHandler\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 660,
          "vulnerability_to_line": null,
          "vulnerability_code": "                stateToConverter[key].length--;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_FUNCTIONS_ALWAYS_RETURN_FALSE",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_FUNCTIONS_ALWAYS_RETURN_FALSE",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 654,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i< pending.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 654,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i< pending.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 193,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 237,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 264,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 276,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 289,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 301,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 309,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 321,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 361,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 387,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 400,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 441,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint256) private amountConverterSpentEthWEI; // Amount converter put to the contract in Ether\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 413,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256; // Define lib necessary to handle uint operations\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(string _name, string _symbol, address _tokensOwner) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(string _name, string _symbol, address _tokensOwner) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 282,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getContractProxyAddress(string _contractName) public view returns (address);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 283,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getNonUpgradableContractAddress(string contractName) public view returns (address);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 284,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getLatestContractVersion(string contractName) public view returns (string);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 284,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getLatestContractVersion(string contractName) public view returns (string);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 316,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBaseToTargetRate(string _currency) public view returns (uint);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 348,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addVersion(string _contractName, string version, address implementation) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 348,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addVersion(string _contractName, string version, address implementation) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 356,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getVersion(string _contractName, string version) public view returns (address);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 356,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getVersion(string _contractName, string version) public view returns (address);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 476,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string tokenName,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 477,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string tokenSymbol,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 478,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _currency,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 501,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAddressFromTwoKeySingletonRegistry(string contractName) internal view returns (address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 720,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (uint[])\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 743,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (uint,uint,uint,uint[])\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 795,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (address[])\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 582,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Conversion conversion = conversions[_conversionId];\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 348,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addVersion(string _contractName, string version, address implementation) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 356,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getVersion(string _contractName, string version) public view returns (address);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 414,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool isCampaignInitialized; //defaults to false\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 419,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ITwoKeyDonationCampaign twoKeyDonationCampaign;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 421,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address twoKeySingletonRegistry;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 422,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string currency;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 423,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address contractor;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 424,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint numberOfConversions;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 438,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint [] counters; //Metrics counter\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 442,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes32 => address[]) stateToConverter; //State to all converters in that state\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 443,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => ConverterState) converterToState; // Converter to state\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 444,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint[]) converterToHisConversions;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 445,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => bool) isConverterAnonymous;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 446,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => bool) doesConverterHaveExecutedConversions;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string public name;\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 811,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Conversion memory conversion = conversions[conversionId];\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 733,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return converterToHisConversions[_converter][converterToHisConversions[_converter].length - 1];\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.\nClassification: SWC-110"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 577,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function executeConversion(\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 416,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Conversion [] public conversions;\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 726,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getLastConverterConversionId(\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [
        "SYMBOLIC EXECUTION TIMEOUT"
      ],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "// File: ../sc_datasets/DAppSCAN/Solidified-2Key [14.10.2019]/contracts-de171eb80e9ce1c6566a5d782f0a0549ab0151ad/contracts/2key/donation-campaign-contracts/ERC20.sol\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 556,
          "vulnerability_to_line": null,
          "vulnerability_code": "        counters[1]++;\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 572,
          "vulnerability_to_line": null,
          "vulnerability_code": "        numberOfConversions++;\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 612,
          "vulnerability_to_line": null,
          "vulnerability_code": "            counters[5]++; //increase number of unique converters\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 618,
          "vulnerability_to_line": null,
          "vulnerability_code": "        counters[3]++; //Increase number of executed conversions\n",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 555,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _contractorProceeds = _conversionAmount - _maxReferralRewardETHWei - _moderatorFeeETHWei;\n",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 574,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return numberOfConversions-1;\n",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 586,
          "vulnerability_to_line": null,
          "vulnerability_code": "        counters[1]--; //Decrease number of approved conversions\n",
          "message": null
        }
      ]
    }
  }
}