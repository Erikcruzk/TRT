function executeConversion(
    uint _conversionId
)
public
{
    Conversion storage conversion = conversions[_conversionId];
    require(converterToState[conversion.converter] == ConverterState.APPROVED);
    require(conversion.state == ConversionState.APPROVED);

    counters[1]--; //Decrease number of approved conversions

    conversion.state = ConversionState.EXECUTED; //Move state change before external calls

    uint totalReward2keys = twoKeyDonationCampaign.buyTokensAndDistributeReferrerRewards(
        conversion.maxReferralRewardETHWei,
        conversion.converter,
        _conversionId
    );

    amountConverterSpentEthWEI[conversion.converter] = amountConverterSpentEthWEI[conversion.converter].add(conversion.conversionAmount);
    counters[8] = counters[8].add(totalReward2keys);
    twoKeyDonationCampaign.buyTokensForModeratorRewards(conversion.moderatorFeeETHWei);
    twoKeyDonationCampaign.updateContractorProceeds(conversion.contractorProceedsETHWei);

    counters[6] = counters[6].add(conversion.conversionAmount);

    if(doesConverterHaveExecutedConversions[conversion.converter] == false) {
        counters[5]++; //increase number of unique converters
        doesConverterHaveExecutedConversions[conversion.converter] = true;
    }

    conversion.maxReferralReward2key = totalReward2keys;
    
    counters[3]++; //Increase number of executed conversions

    //Transfer invoice token at the end to ensure state changes are made before external calls
    transferInvoiceToken(conversion.converter, conversion.conversionAmount);
}