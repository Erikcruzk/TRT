function buyTokensAndDistributeReferrerRewards(
    uint256 _maxReferralRewardETHWei,
    address _converter,
    uint _conversionId,
    bool _isConversionFiat
)
public
onlyTwoKeyConversionHandler
returns (uint)
{
    uint totalBounty2keys;
    
    // Check if maxReferralReward is more than 0 and _maxReferralRewardETHWei is not 0 to prevent division by 0
    if(maxReferralRewardPercent > 0 && _maxReferralRewardETHWei > 0) {
        if(_isConversionFiat) {
            address upgradableExchange = getContractProxyAddress("TwoKeyUpgradableExchange");
            uint rate = IUpgradableExchange(upgradableExchange).sellRate2key();
            
            // Fix for the vulnerability is applied here: prevent incorrect calculation due to division before multiplication
            totalBounty2keys = (_maxReferralRewardETHWei * (1000)) / rate;
        } else {
            totalBounty2keys = buyTokensFromUpgradableExchange(_maxReferralRewardETHWei, address(this));
        }

        ITwoKeyAcquisitionLogicHandler(twoKeyAcquisitionLogicHandler).updateRefchainRewards(
            _maxReferralRewardETHWei,
            _converter,
            _conversionId,
            totalBounty2keys);
    }
    return totalBounty2keys;
}