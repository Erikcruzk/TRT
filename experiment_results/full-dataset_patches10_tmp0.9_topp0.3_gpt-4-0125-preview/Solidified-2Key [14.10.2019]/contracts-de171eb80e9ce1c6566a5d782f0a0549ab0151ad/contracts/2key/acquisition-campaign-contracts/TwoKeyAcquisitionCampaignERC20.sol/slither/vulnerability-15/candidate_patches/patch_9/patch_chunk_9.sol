function beginMigration() external {
    // Assuming the missing part where only owner or authorized addresses can call this function
    require(ITwoKeyAcquisitionLogicHandler(twoKeyAcquisitionLogicHandler).checkIsCampaignActive() == false, "Campaign must be inactive to begin migration.");
    uint unsoldTokens = getAvailableAndNonReservedTokensAmount();
    IERC20(assetContractERC20).transfer(contractor, unsoldTokens);

    if(assetContractERC20 != twoKeyEconomy) {
        uint rewardsNotSpent = getTokenBalance(twoKeyEconomy) - reservedAmount2keyForRewards;
        // Ensuring that reservedAmount2keyForRewards is not greater than the balance to prevent underflow
        require(rewardsNotSpent <= getTokenBalance(twoKeyEconomy), "Insufficient balance for rewards");
        address twoKeyUpgradableExchangeContract = getContractProxyAddress("TwoKeyUpgradableExchange");
        IERC20(twoKeyEconomy).approve(twoKeyUpgradableExchangeContract, rewardsNotSpent);
        IUpgradableExchange(twoKeyUpgradableExchangeContract).buyStableCoinWith2key(rewardsNotSpent, contractor);
    }
}