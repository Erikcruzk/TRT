function executeConversion(
    uint _conversionId
)
public
{
    Conversion storage conversion = conversions[_conversionId];
    require(converterToState[conversion.converter] == ConverterState.APPROVED, "Converter must be approved");
    require(conversion.state == ConversionState.APPROVED || (conversion.isConversionFiat && conversion.state == ConversionState.PENDING_APPROVAL), "Conversion must be approved or pending approval for fiat");

    uint totalUnits = conversion.baseTokenUnits + conversion.bonusTokenUnits;
    uint availableTokens = twoKeyAcquisitionCampaignERC20.getAvailableAndNonReservedTokensAmount();
    require(totalUnits <= availableTokens, "Not enough available tokens");

    if(conversion.isConversionFiat) {
        if(isFiatConversionAutomaticallyApproved) {
            counters[1]--;
        } else {
            require(msg.sender == contractor, "Only contractor can execute fiat conversion not automatically approved");
            counters[0]--;
        }
        counters[9] = counters[9].add(conversion.conversionAmount);
        amountConverterSpentFiatWei[conversion.converter] = amountConverterSpentFiatWei[conversion.converter].add(conversion.conversionAmount);
    } else {
        amountConverterSpentEthWEI[conversion.converter] = amountConverterSpentEthWEI[conversion.converter].add(conversion.conversionAmount);
        counters[1]--;
    }

    unitsConverterBought[conversion.converter] = unitsConverterBought[conversion.converter].add(totalUnits);
    conversion.state = ConversionState.EXECUTED;

    uint totalReward2keys = twoKeyAcquisitionCampaignERC20.buyTokensAndDistributeReferrerRewards(
        conversion.maxReferralRewardETHWei,
        conversion.converter,
        _conversionId,
        conversion.isConversionFiat
    );

    counters[8] = counters[8].add(totalReward2keys);
    counters[3]++;
    counters[7] = counters[7].add(totalUnits);

    if(!doesConverterHaveExecutedConversions[conversion.converter]) {
        counters[5]++;
        doesConverterHaveExecutedConversions[conversion.converter] = true;
    }

    twoKeyAcquisitionCampaignERC20.updateReservedAmountOfTokensIfConversionRejectedOrExecuted(totalUnits);
    twoKeyAcquisitionCampaignERC20.moveFungibleAsset(address(twoKeyPurchasesHandler), totalUnits);
    conversion.maxReferralReward2key = totalReward2keys;

    ITwoKeyBaseReputationRegistry(twoKeyBaseReputationRegistry).updateOnConversionExecutedEvent(
        conversion.converter,
        contractor,
        twoKeyAcquisitionCampaignERC20
    );

    ITwoKeyPurchasesHandler(twoKeyPurchasesHandler).startVesting(
        conversion.baseTokenUnits,
        conversion.bonusTokenUnits,
        _conversionId,
        conversion.converter
    );
}