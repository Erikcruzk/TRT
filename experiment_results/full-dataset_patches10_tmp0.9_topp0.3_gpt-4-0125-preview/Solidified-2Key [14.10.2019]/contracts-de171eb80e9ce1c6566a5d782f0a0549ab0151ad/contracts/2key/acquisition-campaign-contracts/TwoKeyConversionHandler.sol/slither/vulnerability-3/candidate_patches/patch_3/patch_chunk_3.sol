function executeConversion(
    uint _conversionId
)
external
{
    Conversion storage conversion = conversions[_conversionId];

    uint totalUnits = conversion.baseTokenUnits + conversion.bonusTokenUnits;

    require(converterToState[conversion.converter] == ConverterState.APPROVED, "Converter not approved");

    if(conversion.isConversionFiat) {
        if(isFiatConversionAutomaticallyApproved) {
            counters[1] --; // Decrease number of approved conversions
        } else {
            require(conversion.state == ConversionState.PENDING_APPROVAL, "Conversion not pending approval");
            require(msg.sender == contractor, "Only contractor can execute this conversion"); // first check who calls this in order to save gas
            uint availableTokens = twoKeyAcquisitionCampaignERC20.getAvailableAndNonReservedTokensAmount();
            require(totalUnits < availableTokens, "Not enough available tokens");
            counters[0]--; //Decrease number of pending conversions
        }

        //Update raised funds FIAT once the conversion is executed
        counters[9] = counters[9].add(conversion.conversionAmount);

        //Update amount converter spent in FIAT
        amountConverterSpentFiatWei[conversion.converter] = amountConverterSpentFiatWei[conversion.converter].add(conversion.conversionAmount);
    } else {
        require(conversion.state == ConversionState.APPROVED, "Conversion must be approved for non-fiat");
        amountConverterSpentEthWEI[conversion.converter] = amountConverterSpentEthWEI[conversion.converter].add(conversion.conversionAmount);
        counters[1]--; //Decrease number of approved conversions
    }
    //Update bought units
    unitsConverterBought[conversion.converter] = unitsConverterBought[conversion.converter].add(conversion.baseTokenUnits + conversion.bonusTokenUnits);

    // Total rewards for referrers
    uint totalReward2keys = 0;

    // Buy tokens from campaign and distribute rewards between referrers
    totalReward2keys = twoKeyAcquisitionCampaignERC20.buyTokensAndDistributeReferrerRewards(
        conversion.maxReferralRewardETHWei,
        conversion.converter,
        _conversionId,
        conversion.isConversionFiat
    );

    // Update reputation points in registry for conversion executed event
    ITwoKeyBaseReputationRegistry(twoKeyBaseReputationRegistry).updateOnConversionExecutedEvent(
        conversion.converter,
        contractor,
        twoKeyAcquisitionCampaignERC20
    );

    // Add total rewards
    counters[8] = counters[8].add(totalReward2keys);

    // update reserved amount of tokens on acquisition contract
    twoKeyAcquisitionCampaignERC20.updateReservedAmountOfTokensIfConversionRejectedOrExecuted(totalUnits); // External call after state updates

    //Update total raised funds
    if(!conversion.isConversionFiat) {
        // update moderator balances
        twoKeyAcquisitionCampaignERC20.buyTokensForModeratorRewards(conversion.moderatorFeeETHWei); // External call after state updates
        // update contractor proceeds
        twoKeyAcquisitionCampaignERC20.updateContractorProceeds(conversion.contractorProceedsETHWei); // External call after state updates
        // add conversion amount to counter
        counters[6] = counters[6].add(conversion.conversionAmount);
    }

    if(!doesConverterHaveExecutedConversions[conversion.converter]) {
        counters[5]++; //increase number of unique converters
        doesConverterHaveExecutedConversions[conversion.converter] = true;
    }

    ITwoKeyPurchasesHandler(twoKeyPurchasesHandler).startVesting(
        conversion.baseTokenUnits,
        conversion.bonusTokenUnits,
        _conversionId,
        conversion.converter
    ); // External call after state updates

    // Transfer tokens to lockup contract
    twoKeyAcquisitionCampaignERC20.moveFungibleAsset(address(twoKeyPurchasesHandler), totalUnits); // External call after state updates

    conversion.maxReferralReward2key = totalReward2keys;
    conversion.state = ConversionState.EXECUTED;
    counters[3]++; //Increase number of executed conversions
    counters[7] = counters[7].add(totalUnits); //update sold tokens once conversion is executed
}