function rejectConverter(
    address _converter
)
public
onlyContractorOrMaintainer
{
    require(converterToState[_converter] == ConverterState.PENDING_APPROVAL);
    moveFromPendingToRejectedState(_converter);
    uint reservedAmount = 0;
    uint refundAmount = 0;
    uint len = converterToHisConversions[_converter].length;
    for(uint i=0; i< len; i++) {
        uint conversionId = converterToHisConversions[_converter][i];
        Conversion storage c = conversions[conversionId];
        if(c.state == ConversionState.PENDING_APPROVAL || c.state == ConversionState.APPROVED) {
            counters[0]--; 
            counters[2]++; 
            if (c.state == ConversionState.APPROVED) {
                ITwoKeyBaseReputationRegistry(twoKeyBaseReputationRegistry).updateOnConversionRejectedEvent(_converter, contractor, twoKeyAcquisitionCampaignERC20);
            }
            c.state = ConversionState.REJECTED;
            reservedAmount += c.baseTokenUnits + c.bonusTokenUnits;
            if(c.isConversionFiat == false) {
                refundAmount += c.conversionAmount;
            }
        }
    }
    
    if(reservedAmount > 0 && refundAmount > 0) {
        twoKeyAcquisitionCampaignERC20.updateReservedAmountOfTokensIfConversionRejectedOrExecuted(reservedAmount);
        twoKeyAcquisitionCampaignERC20.sendBackEthWhenConversionCancelled(_converter, refundAmount);
    }
}