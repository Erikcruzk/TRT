function executeConversion(
    uint _conversionId
)
external
{
    Conversion storage conversion = conversions[_conversionId];

    uint totalUnits = conversion.baseTokenUnits + conversion.bonusTokenUnits;

    require(converterToState[conversion.converter] == ConverterState.APPROVED);

    if(conversion.isConversionFiat == true) {
        if(isFiatConversionAutomaticallyApproved) {
            counters[1] --;
        } else {
            require(conversion.state == ConversionState.PENDING_APPROVAL);
            require(msg.sender == contractor);
            uint availableTokens = twoKeyAcquisitionCampaignERC20.getAvailableAndNonReservedTokensAmount();
            require(totalUnits <= availableTokens);
            counters[0]--;
        }

        counters[9] = counters[9].add(conversion.conversionAmount);

        amountConverterSpentFiatWei[conversion.converter] = amountConverterSpentFiatWei[conversion.converter].add(conversion.conversionAmount);
    } else {
        require(conversion.state == ConversionState.APPROVED);
        amountConverterSpentEthWEI[conversion.converter] = amountConverterSpentEthWEI[conversion.converter].add(conversion.conversionAmount);
        counters[1]--;
    }
    unitsConverterBought[conversion.converter] = unitsConverterBought[conversion.converter].add(totalUnits);

    if(doesConverterHaveExecutedConversions[conversion.converter] == false) {
        counters[5]++;
        doesConverterHaveExecutedConversions[conversion.converter] = true;
    }

    uint totalReward2keys = twoKeyAcquisitionCampaignERC20.buyTokensAndDistributeReferrerRewards(
        conversion.maxReferralRewardETHWei,
        conversion.converter,
        _conversionId,
        conversion.isConversionFiat
    );

    ITwoKeyBaseReputationRegistry(twoKeyBaseReputationRegistry).updateOnConversionExecutedEvent(
        conversion.converter,
        contractor,
        twoKeyAcquisitionCampaignERC20
    );

    counters[8] = counters[8].add(totalReward2keys);

    twoKeyAcquisitionCampaignERC20.updateReservedAmountOfTokensIfConversionRejectedOrExecuted(totalUnits);

    conversion.maxReferralReward2key = totalReward2keys;
    conversion.state = ConversionState.EXECUTED;
    counters[3]++;
    counters[7] = counters[7].add(totalUnits);
}