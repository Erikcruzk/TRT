{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 610,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i< pending.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 613,
          "vulnerability_to_line": null,
          "vulnerability_code": "                pending[i] = pending[pending.length-1];\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 614,
          "vulnerability_to_line": null,
          "vulnerability_code": "                delete pending[pending.length-1];\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 616,
          "vulnerability_to_line": null,
          "vulnerability_code": "                stateToConverter[key].length--;\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 612,
          "vulnerability_to_line": null,
          "vulnerability_code": "                stateToConverter[destinationState].push(_converter);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 615,
          "vulnerability_to_line": null,
          "vulnerability_code": "                stateToConverter[key] = pending;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 616,
          "vulnerability_to_line": null,
          "vulnerability_code": "                stateToConverter[key].length--;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 663,
          "vulnerability_to_line": null,
          "vulnerability_code": "            uint conversionId = converterToHisConversions[_converter][i];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 664,
          "vulnerability_to_line": null,
          "vulnerability_code": "            Conversion c = conversions[conversionId];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 667,
          "vulnerability_to_line": null,
          "vulnerability_code": "                counters[0]--; //Reduce number of pending conversions\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 668,
          "vulnerability_to_line": null,
          "vulnerability_code": "                counters[1]++; //Increase number of approved conversions\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 692,
          "vulnerability_to_line": null,
          "vulnerability_code": "            uint conversionId = converterToHisConversions[_converter][i];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 693,
          "vulnerability_to_line": null,
          "vulnerability_code": "            Conversion c = conversions[conversionId];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 695,
          "vulnerability_to_line": null,
          "vulnerability_code": "                counters[0]--; //Reduce number of pending conversions\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 696,
          "vulnerability_to_line": null,
          "vulnerability_code": "                counters[2]++; //Increase number of rejected conversions\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 697,
          "vulnerability_to_line": null,
          "vulnerability_code": "                ITwoKeyBaseReputationRegistry(twoKeyBaseReputationRegistry).updateOnConversionRejectedEvent(_converter, contractor, twoKeyAcquisitionCampaignERC20);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 697,
          "vulnerability_to_line": null,
          "vulnerability_code": "                ITwoKeyBaseReputationRegistry(twoKeyBaseReputationRegistry).updateOnConversionRejectedEvent(_converter, contractor, twoKeyAcquisitionCampaignERC20);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 697,
          "vulnerability_to_line": null,
          "vulnerability_code": "                ITwoKeyBaseReputationRegistry(twoKeyBaseReputationRegistry).updateOnConversionRejectedEvent(_converter, contractor, twoKeyAcquisitionCampaignERC20);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 610,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i< pending.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 662,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<len; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 691,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i< len; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 665,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if(c.state == ConversionState.PENDING_APPROVAL && c.isConversionFiat == true) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 666,
          "vulnerability_to_line": null,
          "vulnerability_code": "                //TODO: Here should be APPROVED if it is not fiat\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 667,
          "vulnerability_to_line": null,
          "vulnerability_code": "                counters[0]--; //Reduce number of pending conversions\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 668,
          "vulnerability_to_line": null,
          "vulnerability_code": "                counters[1]++; //Increase number of approved conversions\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 669,
          "vulnerability_to_line": null,
          "vulnerability_code": "                c.state = ConversionState.APPROVED;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 670,
          "vulnerability_to_line": null,
          "vulnerability_code": "//                conversions[conversionId] = c;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 671,
          "vulnerability_to_line": null,
          "vulnerability_code": "            }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 706,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(reservedAmount > 0 && refundAmount > 0) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 707,
          "vulnerability_to_line": null,
          "vulnerability_code": "            twoKeyAcquisitionCampaignERC20.updateReservedAmountOfTokensIfConversionRejectedOrExecuted(reservedAmount);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 708,
          "vulnerability_to_line": null,
          "vulnerability_code": "            twoKeyAcquisitionCampaignERC20.sendBackEthWhenConversionCancelled(_converter, refundAmount);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 709,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 474,
          "vulnerability_to_line": null,
          "vulnerability_code": "                counters[1] --; // Decrease number of approved conversions\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 480,
          "vulnerability_to_line": null,
          "vulnerability_code": "                counters[0]--; //Decrease number of pending conversions\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 491,
          "vulnerability_to_line": null,
          "vulnerability_code": "            counters[1]--; //Decrease number of approved conversions\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 616,
          "vulnerability_to_line": null,
          "vulnerability_code": "                stateToConverter[key].length--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 667,
          "vulnerability_to_line": null,
          "vulnerability_code": "                counters[0]--; //Reduce number of pending conversions\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 695,
          "vulnerability_to_line": null,
          "vulnerability_code": "                counters[0]--; //Reduce number of pending conversions\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 770,
          "vulnerability_to_line": null,
          "vulnerability_code": "        counters[0]--; // Reduce number of pending conversions\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 429,
          "vulnerability_to_line": null,
          "vulnerability_code": "            counters[1]++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 434,
          "vulnerability_to_line": null,
          "vulnerability_code": "                counters[1] ++; // Increase the number of approved conversions\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 437,
          "vulnerability_to_line": null,
          "vulnerability_code": "                counters[0]++; // If conversion is FIAT it will be always first pending and will have to be approved\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 450,
          "vulnerability_to_line": null,
          "vulnerability_code": "        numberOfConversions++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 531,
          "vulnerability_to_line": null,
          "vulnerability_code": "            counters[5]++; //increase number of unique converters\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 547,
          "vulnerability_to_line": null,
          "vulnerability_code": "        counters[3]++; //Increase number of executed conversions\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 610,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i< pending.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 662,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<len; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 668,
          "vulnerability_to_line": null,
          "vulnerability_code": "                counters[1]++; //Increase number of approved conversions\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 691,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i< len; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 696,
          "vulnerability_to_line": null,
          "vulnerability_code": "                counters[2]++; //Increase number of rejected conversions\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 771,
          "vulnerability_to_line": null,
          "vulnerability_code": "        counters[4]++; // Increase number of cancelled conversions\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_77"
      ],
      "vulnerability_findings": [
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 219,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address internal _implementation;\n",
          "message": "UpgradeabilityCampaignStorage._implementation (TwoKeyConversionHandler.sol#219) is never initialized. It is used in:\n\t- implementation (TwoKeyConversionHandler.sol#225-227)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 460,
          "vulnerability_to_line": 549,
          "vulnerability_code": "    function executeConversion(\n\n        uint _conversionId\n\n    )\n\n    public\n\n    {\n\n        Conversion conversion = conversions[_conversionId];\n\n\n\n        uint totalUnits = conversion.baseTokenUnits + conversion.bonusTokenUnits;\n\n\n\n        // Converter must be approved in all cases\n\n        require(converterToState[conversion.converter] == ConverterState.APPROVED);\n\n\n\n        if(conversion.isConversionFiat == true) {\n\n            if(isFiatConversionAutomaticallyApproved) {\n\n                counters[1] --; // Decrease number of approved conversions\n\n            } else {\n\n                require(conversion.state == ConversionState.PENDING_APPROVAL);\n\n                require(msg.sender == contractor); // first check who calls this in order to save gas\n\n                uint availableTokens = twoKeyAcquisitionCampaignERC20.getAvailableAndNonReservedTokensAmount();\n\n                require(totalUnits < availableTokens);\n\n                counters[0]--; //Decrease number of pending conversions\n\n            }\n\n\n\n            //Update raised funds FIAT once the conversion is executed\n\n            counters[9] = counters[9].add(conversion.conversionAmount);\n\n\n\n            //Update amount converter spent in FIAT\n\n            amountConverterSpentFiatWei[conversion.converter] = amountConverterSpentFiatWei[conversion.converter].add(conversion.conversionAmount);\n\n        } else {\n\n            require(conversion.state == ConversionState.APPROVED);\n\n            amountConverterSpentEthWEI[conversion.converter] = amountConverterSpentEthWEI[conversion.converter].add(conversion.conversionAmount);\n\n            counters[1]--; //Decrease number of approved conversions\n\n        }\n\n        //Update bought units\n\n        unitsConverterBought[conversion.converter] = unitsConverterBought[conversion.converter].add(conversion.baseTokenUnits + conversion.bonusTokenUnits);\n\n\n\n        // Total rewards for referrers\n\n        uint totalReward2keys = 0;\n\n\n\n        // Buy tokens from campaign and distribute rewards between referrers\n\n        totalReward2keys = twoKeyAcquisitionCampaignERC20.buyTokensAndDistributeReferrerRewards(\n\n            conversion.maxReferralRewardETHWei,\n\n            conversion.converter,\n\n            _conversionId,\n\n            conversion.isConversionFiat\n\n        );\n\n\n\n//         Update reputation points in registry for conversion executed event\n\n        ITwoKeyBaseReputationRegistry(twoKeyBaseReputationRegistry).updateOnConversionExecutedEvent(\n\n            conversion.converter,\n\n            contractor,\n\n            twoKeyAcquisitionCampaignERC20\n\n        );\n\n//\n\n        // Add total rewards\n\n        counters[8] = counters[8].add(totalReward2keys);\n\n\n\n        // update reserved amount of tokens on acquisition contract\n\n        twoKeyAcquisitionCampaignERC20.updateReservedAmountOfTokensIfConversionRejectedOrExecuted(totalUnits);\n\n\n\n        //Update total raised funds\n\n        if(conversion.isConversionFiat == false) {\n\n            // update moderator balances\n\n            twoKeyAcquisitionCampaignERC20.buyTokensForModeratorRewards(conversion.moderatorFeeETHWei);\n\n            // update contractor proceeds\n\n            twoKeyAcquisitionCampaignERC20.updateContractorProceeds(conversion.contractorProceedsETHWei);\n\n            // add conversion amount to counter\n\n            counters[6] = counters[6].add(conversion.conversionAmount);\n\n        }\n\n\n\n        if(doesConverterHaveExecutedConversions[conversion.converter] == false) {\n\n            counters[5]++; //increase number of unique converters\n\n            doesConverterHaveExecutedConversions[conversion.converter] = true;\n\n        }\n\n\n\n        ITwoKeyPurchasesHandler(twoKeyPurchasesHandler).startVesting(\n\n            conversion.baseTokenUnits,\n\n            conversion.bonusTokenUnits,\n\n            _conversionId,\n\n            conversion.converter\n\n        );\n\n\n\n        // Transfer tokens to lockup contract\n\n        twoKeyAcquisitionCampaignERC20.moveFungibleAsset(address(twoKeyPurchasesHandler), totalUnits);\n\n\n\n        conversion.maxReferralReward2key = totalReward2keys;\n\n        conversion.state = ConversionState.EXECUTED;\n\n        counters[3]++; //Increase number of executed conversions\n\n        counters[7] = counters[7].add(totalUnits); //update sold tokens once conversion is executed\n",
          "message": "Reentrancy in TwoKeyConversionHandler.executeConversion (TwoKeyConversionHandler.sol#460-549):\n\tExternal calls:\n\t- availableTokens = twoKeyAcquisitionCampaignERC20.getAvailableAndNonReservedTokensAmount() (TwoKeyConversionHandler.sol#478)\n\t- totalReward2keys = twoKeyAcquisitionCampaignERC20.buyTokensAndDistributeReferrerRewards(conversion.maxReferralRewardETHWei,conversion.converter,_conversionId,conversion.isConversionFiat) (TwoKeyConversionHandler.sol#500-505)\n\t- ITwoKeyBaseReputationRegistry(twoKeyBaseReputationRegistry).updateOnConversionExecutedEvent(conversion.converter,contractor,twoKeyAcquisitionCampaignERC20) (TwoKeyConversionHandler.sol#508-512)\n\tState variables written after the call(s):\n\t- counters (TwoKeyConversionHandler.sol#515)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 460,
          "vulnerability_to_line": 549,
          "vulnerability_code": "    function executeConversion(\n\n        uint _conversionId\n\n    )\n\n    public\n\n    {\n\n        Conversion conversion = conversions[_conversionId];\n\n\n\n        uint totalUnits = conversion.baseTokenUnits + conversion.bonusTokenUnits;\n\n\n\n        // Converter must be approved in all cases\n\n        require(converterToState[conversion.converter] == ConverterState.APPROVED);\n\n\n\n        if(conversion.isConversionFiat == true) {\n\n            if(isFiatConversionAutomaticallyApproved) {\n\n                counters[1] --; // Decrease number of approved conversions\n\n            } else {\n\n                require(conversion.state == ConversionState.PENDING_APPROVAL);\n\n                require(msg.sender == contractor); // first check who calls this in order to save gas\n\n                uint availableTokens = twoKeyAcquisitionCampaignERC20.getAvailableAndNonReservedTokensAmount();\n\n                require(totalUnits < availableTokens);\n\n                counters[0]--; //Decrease number of pending conversions\n\n            }\n\n\n\n            //Update raised funds FIAT once the conversion is executed\n\n            counters[9] = counters[9].add(conversion.conversionAmount);\n\n\n\n            //Update amount converter spent in FIAT\n\n            amountConverterSpentFiatWei[conversion.converter] = amountConverterSpentFiatWei[conversion.converter].add(conversion.conversionAmount);\n\n        } else {\n\n            require(conversion.state == ConversionState.APPROVED);\n\n            amountConverterSpentEthWEI[conversion.converter] = amountConverterSpentEthWEI[conversion.converter].add(conversion.conversionAmount);\n\n            counters[1]--; //Decrease number of approved conversions\n\n        }\n\n        //Update bought units\n\n        unitsConverterBought[conversion.converter] = unitsConverterBought[conversion.converter].add(conversion.baseTokenUnits + conversion.bonusTokenUnits);\n\n\n\n        // Total rewards for referrers\n\n        uint totalReward2keys = 0;\n\n\n\n        // Buy tokens from campaign and distribute rewards between referrers\n\n        totalReward2keys = twoKeyAcquisitionCampaignERC20.buyTokensAndDistributeReferrerRewards(\n\n            conversion.maxReferralRewardETHWei,\n\n            conversion.converter,\n\n            _conversionId,\n\n            conversion.isConversionFiat\n\n        );\n\n\n\n//         Update reputation points in registry for conversion executed event\n\n        ITwoKeyBaseReputationRegistry(twoKeyBaseReputationRegistry).updateOnConversionExecutedEvent(\n\n            conversion.converter,\n\n            contractor,\n\n            twoKeyAcquisitionCampaignERC20\n\n        );\n\n//\n\n        // Add total rewards\n\n        counters[8] = counters[8].add(totalReward2keys);\n\n\n\n        // update reserved amount of tokens on acquisition contract\n\n        twoKeyAcquisitionCampaignERC20.updateReservedAmountOfTokensIfConversionRejectedOrExecuted(totalUnits);\n\n\n\n        //Update total raised funds\n\n        if(conversion.isConversionFiat == false) {\n\n            // update moderator balances\n\n            twoKeyAcquisitionCampaignERC20.buyTokensForModeratorRewards(conversion.moderatorFeeETHWei);\n\n            // update contractor proceeds\n\n            twoKeyAcquisitionCampaignERC20.updateContractorProceeds(conversion.contractorProceedsETHWei);\n\n            // add conversion amount to counter\n\n            counters[6] = counters[6].add(conversion.conversionAmount);\n\n        }\n\n\n\n        if(doesConverterHaveExecutedConversions[conversion.converter] == false) {\n\n            counters[5]++; //increase number of unique converters\n\n            doesConverterHaveExecutedConversions[conversion.converter] = true;\n\n        }\n\n\n\n        ITwoKeyPurchasesHandler(twoKeyPurchasesHandler).startVesting(\n\n            conversion.baseTokenUnits,\n\n            conversion.bonusTokenUnits,\n\n            _conversionId,\n\n            conversion.converter\n\n        );\n\n\n\n        // Transfer tokens to lockup contract\n\n        twoKeyAcquisitionCampaignERC20.moveFungibleAsset(address(twoKeyPurchasesHandler), totalUnits);\n\n\n\n        conversion.maxReferralReward2key = totalReward2keys;\n\n        conversion.state = ConversionState.EXECUTED;\n\n        counters[3]++; //Increase number of executed conversions\n\n        counters[7] = counters[7].add(totalUnits); //update sold tokens once conversion is executed\n",
          "message": "Reentrancy in TwoKeyConversionHandler.executeConversion (TwoKeyConversionHandler.sol#460-549):\n\tExternal calls:\n\t- availableTokens = twoKeyAcquisitionCampaignERC20.getAvailableAndNonReservedTokensAmount() (TwoKeyConversionHandler.sol#478)\n\t- totalReward2keys = twoKeyAcquisitionCampaignERC20.buyTokensAndDistributeReferrerRewards(conversion.maxReferralRewardETHWei,conversion.converter,_conversionId,conversion.isConversionFiat) (TwoKeyConversionHandler.sol#500-505)\n\t- ITwoKeyBaseReputationRegistry(twoKeyBaseReputationRegistry).updateOnConversionExecutedEvent(conversion.converter,contractor,twoKeyAcquisitionCampaignERC20) (TwoKeyConversionHandler.sol#508-512)\n\t- twoKeyAcquisitionCampaignERC20.updateReservedAmountOfTokensIfConversionRejectedOrExecuted(totalUnits) (TwoKeyConversionHandler.sol#518)\n\t- twoKeyAcquisitionCampaignERC20.buyTokensForModeratorRewards(conversion.moderatorFeeETHWei) (TwoKeyConversionHandler.sol#523)\n\t- twoKeyAcquisitionCampaignERC20.updateContractorProceeds(conversion.contractorProceedsETHWei) (TwoKeyConversionHandler.sol#525)\n\tState variables written after the call(s):\n\t- counters (TwoKeyConversionHandler.sol#527)\n\t- counters (TwoKeyConversionHandler.sol#531)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 460,
          "vulnerability_to_line": 549,
          "vulnerability_code": "    function executeConversion(\n\n        uint _conversionId\n\n    )\n\n    public\n\n    {\n\n        Conversion conversion = conversions[_conversionId];\n\n\n\n        uint totalUnits = conversion.baseTokenUnits + conversion.bonusTokenUnits;\n\n\n\n        // Converter must be approved in all cases\n\n        require(converterToState[conversion.converter] == ConverterState.APPROVED);\n\n\n\n        if(conversion.isConversionFiat == true) {\n\n            if(isFiatConversionAutomaticallyApproved) {\n\n                counters[1] --; // Decrease number of approved conversions\n\n            } else {\n\n                require(conversion.state == ConversionState.PENDING_APPROVAL);\n\n                require(msg.sender == contractor); // first check who calls this in order to save gas\n\n                uint availableTokens = twoKeyAcquisitionCampaignERC20.getAvailableAndNonReservedTokensAmount();\n\n                require(totalUnits < availableTokens);\n\n                counters[0]--; //Decrease number of pending conversions\n\n            }\n\n\n\n            //Update raised funds FIAT once the conversion is executed\n\n            counters[9] = counters[9].add(conversion.conversionAmount);\n\n\n\n            //Update amount converter spent in FIAT\n\n            amountConverterSpentFiatWei[conversion.converter] = amountConverterSpentFiatWei[conversion.converter].add(conversion.conversionAmount);\n\n        } else {\n\n            require(conversion.state == ConversionState.APPROVED);\n\n            amountConverterSpentEthWEI[conversion.converter] = amountConverterSpentEthWEI[conversion.converter].add(conversion.conversionAmount);\n\n            counters[1]--; //Decrease number of approved conversions\n\n        }\n\n        //Update bought units\n\n        unitsConverterBought[conversion.converter] = unitsConverterBought[conversion.converter].add(conversion.baseTokenUnits + conversion.bonusTokenUnits);\n\n\n\n        // Total rewards for referrers\n\n        uint totalReward2keys = 0;\n\n\n\n        // Buy tokens from campaign and distribute rewards between referrers\n\n        totalReward2keys = twoKeyAcquisitionCampaignERC20.buyTokensAndDistributeReferrerRewards(\n\n            conversion.maxReferralRewardETHWei,\n\n            conversion.converter,\n\n            _conversionId,\n\n            conversion.isConversionFiat\n\n        );\n\n\n\n//         Update reputation points in registry for conversion executed event\n\n        ITwoKeyBaseReputationRegistry(twoKeyBaseReputationRegistry).updateOnConversionExecutedEvent(\n\n            conversion.converter,\n\n            contractor,\n\n            twoKeyAcquisitionCampaignERC20\n\n        );\n\n//\n\n        // Add total rewards\n\n        counters[8] = counters[8].add(totalReward2keys);\n\n\n\n        // update reserved amount of tokens on acquisition contract\n\n        twoKeyAcquisitionCampaignERC20.updateReservedAmountOfTokensIfConversionRejectedOrExecuted(totalUnits);\n\n\n\n        //Update total raised funds\n\n        if(conversion.isConversionFiat == false) {\n\n            // update moderator balances\n\n            twoKeyAcquisitionCampaignERC20.buyTokensForModeratorRewards(conversion.moderatorFeeETHWei);\n\n            // update contractor proceeds\n\n            twoKeyAcquisitionCampaignERC20.updateContractorProceeds(conversion.contractorProceedsETHWei);\n\n            // add conversion amount to counter\n\n            counters[6] = counters[6].add(conversion.conversionAmount);\n\n        }\n\n\n\n        if(doesConverterHaveExecutedConversions[conversion.converter] == false) {\n\n            counters[5]++; //increase number of unique converters\n\n            doesConverterHaveExecutedConversions[conversion.converter] = true;\n\n        }\n\n\n\n        ITwoKeyPurchasesHandler(twoKeyPurchasesHandler).startVesting(\n\n            conversion.baseTokenUnits,\n\n            conversion.bonusTokenUnits,\n\n            _conversionId,\n\n            conversion.converter\n\n        );\n\n\n\n        // Transfer tokens to lockup contract\n\n        twoKeyAcquisitionCampaignERC20.moveFungibleAsset(address(twoKeyPurchasesHandler), totalUnits);\n\n\n\n        conversion.maxReferralReward2key = totalReward2keys;\n\n        conversion.state = ConversionState.EXECUTED;\n\n        counters[3]++; //Increase number of executed conversions\n\n        counters[7] = counters[7].add(totalUnits); //update sold tokens once conversion is executed\n",
          "message": "Reentrancy in TwoKeyConversionHandler.executeConversion (TwoKeyConversionHandler.sol#460-549):\n\tExternal calls:\n\t- availableTokens = twoKeyAcquisitionCampaignERC20.getAvailableAndNonReservedTokensAmount() (TwoKeyConversionHandler.sol#478)\n\t- totalReward2keys = twoKeyAcquisitionCampaignERC20.buyTokensAndDistributeReferrerRewards(conversion.maxReferralRewardETHWei,conversion.converter,_conversionId,conversion.isConversionFiat) (TwoKeyConversionHandler.sol#500-505)\n\t- ITwoKeyBaseReputationRegistry(twoKeyBaseReputationRegistry).updateOnConversionExecutedEvent(conversion.converter,contractor,twoKeyAcquisitionCampaignERC20) (TwoKeyConversionHandler.sol#508-512)\n\t- twoKeyAcquisitionCampaignERC20.updateReservedAmountOfTokensIfConversionRejectedOrExecuted(totalUnits) (TwoKeyConversionHandler.sol#518)\n\t- twoKeyAcquisitionCampaignERC20.buyTokensForModeratorRewards(conversion.moderatorFeeETHWei) (TwoKeyConversionHandler.sol#523)\n\t- twoKeyAcquisitionCampaignERC20.updateContractorProceeds(conversion.contractorProceedsETHWei) (TwoKeyConversionHandler.sol#525)\n\t- ITwoKeyPurchasesHandler(twoKeyPurchasesHandler).startVesting(conversion.baseTokenUnits,conversion.bonusTokenUnits,_conversionId,conversion.converter) (TwoKeyConversionHandler.sol#535-540)\n\t- twoKeyAcquisitionCampaignERC20.moveFungibleAsset(address(twoKeyPurchasesHandler),totalUnits) (TwoKeyConversionHandler.sol#543)\n\tState variables written after the call(s):\n\t- conversions (TwoKeyConversionHandler.sol#545)\n\t- conversions (TwoKeyConversionHandler.sol#546)\n\t- counters (TwoKeyConversionHandler.sol#547)\n\t- counters (TwoKeyConversionHandler.sol#548)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 680,
          "vulnerability_to_line": 710,
          "vulnerability_code": "    function rejectConverter(\n\n        address _converter\n\n    )\n\n    public\n\n    onlyContractorOrMaintainer\n\n    {\n\n        require(converterToState[_converter] == ConverterState.PENDING_APPROVAL);\n\n        moveFromPendingToRejectedState(_converter);\n\n        uint reservedAmount = 0;\n\n        uint refundAmount = 0;\n\n        uint len = converterToHisConversions[_converter].length;\n\n        for(uint i=0; i< len; i++) {\n\n            uint conversionId = converterToHisConversions[_converter][i];\n\n            Conversion c = conversions[conversionId];\n\n            if(c.state == ConversionState.PENDING_APPROVAL || c.state == ConversionState.APPROVED) {\n\n                counters[0]--; //Reduce number of pending conversions\n\n                counters[2]++; //Increase number of rejected conversions\n\n                ITwoKeyBaseReputationRegistry(twoKeyBaseReputationRegistry).updateOnConversionRejectedEvent(_converter, contractor, twoKeyAcquisitionCampaignERC20);\n\n                c.state = ConversionState.REJECTED;\n\n                reservedAmount += c.baseTokenUnits + c.bonusTokenUnits;\n\n                if(c.isConversionFiat == false) {\n\n                    refundAmount += c.conversionAmount;\n\n                }\n\n            }\n\n        }\n\n        //If there's an amount to be returned and reserved tokens, update state and execute cashback\n\n        if(reservedAmount > 0 && refundAmount > 0) {\n\n            twoKeyAcquisitionCampaignERC20.updateReservedAmountOfTokensIfConversionRejectedOrExecuted(reservedAmount);\n\n            twoKeyAcquisitionCampaignERC20.sendBackEthWhenConversionCancelled(_converter, refundAmount);\n\n        }\n",
          "message": "Reentrancy in TwoKeyConversionHandler.rejectConverter (TwoKeyConversionHandler.sol#680-710):\n\tExternal calls:\n\t- ITwoKeyBaseReputationRegistry(twoKeyBaseReputationRegistry).updateOnConversionRejectedEvent(_converter,contractor,twoKeyAcquisitionCampaignERC20) (TwoKeyConversionHandler.sol#697)\n\tState variables written after the call(s):\n\t- conversions (TwoKeyConversionHandler.sol#698)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 697,
          "vulnerability_to_line": null,
          "vulnerability_code": "                ITwoKeyBaseReputationRegistry(twoKeyBaseReputationRegistry).updateOnConversionRejectedEvent(_converter, contractor, twoKeyAcquisitionCampaignERC20);\n",
          "message": "TwoKeyConversionHandler.rejectConverter has external calls inside a loop:\n\t- ITwoKeyBaseReputationRegistry(twoKeyBaseReputationRegistry).updateOnConversionRejectedEvent(_converter,contractor,twoKeyAcquisitionCampaignERC20) (TwoKeyConversionHandler.sol#697)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 460,
          "vulnerability_to_line": 549,
          "vulnerability_code": "    function executeConversion(\n\n        uint _conversionId\n\n    )\n\n    public\n\n    {\n\n        Conversion conversion = conversions[_conversionId];\n\n\n\n        uint totalUnits = conversion.baseTokenUnits + conversion.bonusTokenUnits;\n\n\n\n        // Converter must be approved in all cases\n\n        require(converterToState[conversion.converter] == ConverterState.APPROVED);\n\n\n\n        if(conversion.isConversionFiat == true) {\n\n            if(isFiatConversionAutomaticallyApproved) {\n\n                counters[1] --; // Decrease number of approved conversions\n\n            } else {\n\n                require(conversion.state == ConversionState.PENDING_APPROVAL);\n\n                require(msg.sender == contractor); // first check who calls this in order to save gas\n\n                uint availableTokens = twoKeyAcquisitionCampaignERC20.getAvailableAndNonReservedTokensAmount();\n\n                require(totalUnits < availableTokens);\n\n                counters[0]--; //Decrease number of pending conversions\n\n            }\n\n\n\n            //Update raised funds FIAT once the conversion is executed\n\n            counters[9] = counters[9].add(conversion.conversionAmount);\n\n\n\n            //Update amount converter spent in FIAT\n\n            amountConverterSpentFiatWei[conversion.converter] = amountConverterSpentFiatWei[conversion.converter].add(conversion.conversionAmount);\n\n        } else {\n\n            require(conversion.state == ConversionState.APPROVED);\n\n            amountConverterSpentEthWEI[conversion.converter] = amountConverterSpentEthWEI[conversion.converter].add(conversion.conversionAmount);\n\n            counters[1]--; //Decrease number of approved conversions\n\n        }\n\n        //Update bought units\n\n        unitsConverterBought[conversion.converter] = unitsConverterBought[conversion.converter].add(conversion.baseTokenUnits + conversion.bonusTokenUnits);\n\n\n\n        // Total rewards for referrers\n\n        uint totalReward2keys = 0;\n\n\n\n        // Buy tokens from campaign and distribute rewards between referrers\n\n        totalReward2keys = twoKeyAcquisitionCampaignERC20.buyTokensAndDistributeReferrerRewards(\n\n            conversion.maxReferralRewardETHWei,\n\n            conversion.converter,\n\n            _conversionId,\n\n            conversion.isConversionFiat\n\n        );\n\n\n\n//         Update reputation points in registry for conversion executed event\n\n        ITwoKeyBaseReputationRegistry(twoKeyBaseReputationRegistry).updateOnConversionExecutedEvent(\n\n            conversion.converter,\n\n            contractor,\n\n            twoKeyAcquisitionCampaignERC20\n\n        );\n\n//\n\n        // Add total rewards\n\n        counters[8] = counters[8].add(totalReward2keys);\n\n\n\n        // update reserved amount of tokens on acquisition contract\n\n        twoKeyAcquisitionCampaignERC20.updateReservedAmountOfTokensIfConversionRejectedOrExecuted(totalUnits);\n\n\n\n        //Update total raised funds\n\n        if(conversion.isConversionFiat == false) {\n\n            // update moderator balances\n\n            twoKeyAcquisitionCampaignERC20.buyTokensForModeratorRewards(conversion.moderatorFeeETHWei);\n\n            // update contractor proceeds\n\n            twoKeyAcquisitionCampaignERC20.updateContractorProceeds(conversion.contractorProceedsETHWei);\n\n            // add conversion amount to counter\n\n            counters[6] = counters[6].add(conversion.conversionAmount);\n\n        }\n\n\n\n        if(doesConverterHaveExecutedConversions[conversion.converter] == false) {\n\n            counters[5]++; //increase number of unique converters\n\n            doesConverterHaveExecutedConversions[conversion.converter] = true;\n\n        }\n\n\n\n        ITwoKeyPurchasesHandler(twoKeyPurchasesHandler).startVesting(\n\n            conversion.baseTokenUnits,\n\n            conversion.bonusTokenUnits,\n\n            _conversionId,\n\n            conversion.converter\n\n        );\n\n\n\n        // Transfer tokens to lockup contract\n\n        twoKeyAcquisitionCampaignERC20.moveFungibleAsset(address(twoKeyPurchasesHandler), totalUnits);\n\n\n\n        conversion.maxReferralReward2key = totalReward2keys;\n\n        conversion.state = ConversionState.EXECUTED;\n\n        counters[3]++; //Increase number of executed conversions\n\n        counters[7] = counters[7].add(totalUnits); //update sold tokens once conversion is executed\n",
          "message": "Reentrancy in TwoKeyConversionHandler.executeConversion (TwoKeyConversionHandler.sol#460-549):\n\tExternal calls:\n\t- availableTokens = twoKeyAcquisitionCampaignERC20.getAvailableAndNonReservedTokensAmount() (TwoKeyConversionHandler.sol#478)\n\tState variables written after the call(s):\n\t- amountConverterSpentFiatWei (TwoKeyConversionHandler.sol#487)\n\t- counters (TwoKeyConversionHandler.sol#480)\n\t- counters (TwoKeyConversionHandler.sol#484)\n\t- unitsConverterBought (TwoKeyConversionHandler.sol#494)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 460,
          "vulnerability_to_line": 549,
          "vulnerability_code": "    function executeConversion(\n\n        uint _conversionId\n\n    )\n\n    public\n\n    {\n\n        Conversion conversion = conversions[_conversionId];\n\n\n\n        uint totalUnits = conversion.baseTokenUnits + conversion.bonusTokenUnits;\n\n\n\n        // Converter must be approved in all cases\n\n        require(converterToState[conversion.converter] == ConverterState.APPROVED);\n\n\n\n        if(conversion.isConversionFiat == true) {\n\n            if(isFiatConversionAutomaticallyApproved) {\n\n                counters[1] --; // Decrease number of approved conversions\n\n            } else {\n\n                require(conversion.state == ConversionState.PENDING_APPROVAL);\n\n                require(msg.sender == contractor); // first check who calls this in order to save gas\n\n                uint availableTokens = twoKeyAcquisitionCampaignERC20.getAvailableAndNonReservedTokensAmount();\n\n                require(totalUnits < availableTokens);\n\n                counters[0]--; //Decrease number of pending conversions\n\n            }\n\n\n\n            //Update raised funds FIAT once the conversion is executed\n\n            counters[9] = counters[9].add(conversion.conversionAmount);\n\n\n\n            //Update amount converter spent in FIAT\n\n            amountConverterSpentFiatWei[conversion.converter] = amountConverterSpentFiatWei[conversion.converter].add(conversion.conversionAmount);\n\n        } else {\n\n            require(conversion.state == ConversionState.APPROVED);\n\n            amountConverterSpentEthWEI[conversion.converter] = amountConverterSpentEthWEI[conversion.converter].add(conversion.conversionAmount);\n\n            counters[1]--; //Decrease number of approved conversions\n\n        }\n\n        //Update bought units\n\n        unitsConverterBought[conversion.converter] = unitsConverterBought[conversion.converter].add(conversion.baseTokenUnits + conversion.bonusTokenUnits);\n\n\n\n        // Total rewards for referrers\n\n        uint totalReward2keys = 0;\n\n\n\n        // Buy tokens from campaign and distribute rewards between referrers\n\n        totalReward2keys = twoKeyAcquisitionCampaignERC20.buyTokensAndDistributeReferrerRewards(\n\n            conversion.maxReferralRewardETHWei,\n\n            conversion.converter,\n\n            _conversionId,\n\n            conversion.isConversionFiat\n\n        );\n\n\n\n//         Update reputation points in registry for conversion executed event\n\n        ITwoKeyBaseReputationRegistry(twoKeyBaseReputationRegistry).updateOnConversionExecutedEvent(\n\n            conversion.converter,\n\n            contractor,\n\n            twoKeyAcquisitionCampaignERC20\n\n        );\n\n//\n\n        // Add total rewards\n\n        counters[8] = counters[8].add(totalReward2keys);\n\n\n\n        // update reserved amount of tokens on acquisition contract\n\n        twoKeyAcquisitionCampaignERC20.updateReservedAmountOfTokensIfConversionRejectedOrExecuted(totalUnits);\n\n\n\n        //Update total raised funds\n\n        if(conversion.isConversionFiat == false) {\n\n            // update moderator balances\n\n            twoKeyAcquisitionCampaignERC20.buyTokensForModeratorRewards(conversion.moderatorFeeETHWei);\n\n            // update contractor proceeds\n\n            twoKeyAcquisitionCampaignERC20.updateContractorProceeds(conversion.contractorProceedsETHWei);\n\n            // add conversion amount to counter\n\n            counters[6] = counters[6].add(conversion.conversionAmount);\n\n        }\n\n\n\n        if(doesConverterHaveExecutedConversions[conversion.converter] == false) {\n\n            counters[5]++; //increase number of unique converters\n\n            doesConverterHaveExecutedConversions[conversion.converter] = true;\n\n        }\n\n\n\n        ITwoKeyPurchasesHandler(twoKeyPurchasesHandler).startVesting(\n\n            conversion.baseTokenUnits,\n\n            conversion.bonusTokenUnits,\n\n            _conversionId,\n\n            conversion.converter\n\n        );\n\n\n\n        // Transfer tokens to lockup contract\n\n        twoKeyAcquisitionCampaignERC20.moveFungibleAsset(address(twoKeyPurchasesHandler), totalUnits);\n\n\n\n        conversion.maxReferralReward2key = totalReward2keys;\n\n        conversion.state = ConversionState.EXECUTED;\n\n        counters[3]++; //Increase number of executed conversions\n\n        counters[7] = counters[7].add(totalUnits); //update sold tokens once conversion is executed\n",
          "message": "Reentrancy in TwoKeyConversionHandler.executeConversion (TwoKeyConversionHandler.sol#460-549):\n\tExternal calls:\n\t- availableTokens = twoKeyAcquisitionCampaignERC20.getAvailableAndNonReservedTokensAmount() (TwoKeyConversionHandler.sol#478)\n\t- totalReward2keys = twoKeyAcquisitionCampaignERC20.buyTokensAndDistributeReferrerRewards(conversion.maxReferralRewardETHWei,conversion.converter,_conversionId,conversion.isConversionFiat) (TwoKeyConversionHandler.sol#500-505)\n\t- ITwoKeyBaseReputationRegistry(twoKeyBaseReputationRegistry).updateOnConversionExecutedEvent(conversion.converter,contractor,twoKeyAcquisitionCampaignERC20) (TwoKeyConversionHandler.sol#508-512)\n\t- twoKeyAcquisitionCampaignERC20.updateReservedAmountOfTokensIfConversionRejectedOrExecuted(totalUnits) (TwoKeyConversionHandler.sol#518)\n\t- twoKeyAcquisitionCampaignERC20.buyTokensForModeratorRewards(conversion.moderatorFeeETHWei) (TwoKeyConversionHandler.sol#523)\n\t- twoKeyAcquisitionCampaignERC20.updateContractorProceeds(conversion.contractorProceedsETHWei) (TwoKeyConversionHandler.sol#525)\n\tState variables written after the call(s):\n\t- doesConverterHaveExecutedConversions (TwoKeyConversionHandler.sol#532)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 383,
          "vulnerability_to_line": 453,
          "vulnerability_code": "    function supportForCreateConversion(\n\n        address _contractor,\n\n        address _converterAddress,\n\n        uint256 _conversionAmount,\n\n        uint256 _maxReferralRewardETHWei,\n\n        uint256 baseTokensForConverterUnits,\n\n        uint256 bonusTokensForConverterUnits,\n\n        bool isConversionFiat,\n\n        bool _isAnonymous,\n\n        bool _isKYCRequired\n\n    )\n\n    public\n\n    returns (uint)\n\n    {\n\n        require(msg.sender == address(twoKeyAcquisitionCampaignERC20));\n\n\n\n        //If KYC is required, basic funnel executes and we require that converter is not previously rejected\n\n        if(_isKYCRequired == true) {\n\n            require(converterToState[_converterAddress] != ConverterState.REJECTED); // If converter is rejected then can't create conversion\n\n            // Checking the state for converter, if this is his 1st time, he goes initially to PENDING_APPROVAL\n\n            if(converterToState[_converterAddress] == ConverterState.NOT_EXISTING) {\n\n                converterToState[_converterAddress] = ConverterState.PENDING_APPROVAL;\n\n                stateToConverter[bytes32(\"PENDING_APPROVAL\")].push(_converterAddress);\n\n            }\n\n        } else {\n\n            //If KYC is not required converter is automatically approved\n\n            if(converterToState[_converterAddress] == ConverterState.NOT_EXISTING) {\n\n                converterToState[_converterAddress] = ConverterState.APPROVED;\n\n                stateToConverter[bytes32(\"APPROVED\")].push(_converterAddress);\n\n            }\n\n        }\n\n\n\n        // Set if converter want to be anonymous\n\n        isConverterAnonymous[_converterAddress] = _isAnonymous;\n\n\n\n\n\n        uint _moderatorFeeETHWei = 0;\n\n        uint256 _contractorProceeds = _conversionAmount; //In case of fiat conversion, this is going to be fiat value\n\n\n\n        ConversionState state;\n\n\n\n        if(isConversionFiat == false) {\n\n            _moderatorFeeETHWei = calculateModeratorFee(_conversionAmount);\n\n            _contractorProceeds = _conversionAmount - _maxReferralRewardETHWei - _moderatorFeeETHWei;\n\n            //TODO: Add accounting for fiat proceeds\n\n            state = ConversionState.APPROVED; // All eth conversions are auto approved\n\n            counters[1]++;\n\n        } else {\n\n            //This means fiat conversion is automatically approved\n\n            if(isFiatConversionAutomaticallyApproved) {\n\n                state = ConversionState.APPROVED;\n\n                counters[1] ++; // Increase the number of approved conversions\n\n            } else {\n\n                state = ConversionState.PENDING_APPROVAL; // Fiat conversion state is PENDING_APPROVAL\n\n                counters[0]++; // If conversion is FIAT it will be always first pending and will have to be approved\n\n            }\n\n        }\n\n\n\n        Conversion memory c = Conversion(_contractor, _contractorProceeds, _converterAddress,\n\n            state ,_conversionAmount, _maxReferralRewardETHWei, 0, _moderatorFeeETHWei, baseTokensForConverterUnits,\n\n            bonusTokensForConverterUnits,\n\n            now, now + expiryConversionInHours * (1 hours), isConversionFiat);\n\n\n\n        conversions.push(c);\n\n\n\n        converterToHisConversions[_converterAddress].push(numberOfConversions);\n\n        emit ConversionCreated(numberOfConversions);\n\n        numberOfConversions++;\n\n\n\n        return numberOfConversions-1;\n",
          "message": "Reentrancy in TwoKeyConversionHandler.supportForCreateConversion (TwoKeyConversionHandler.sol#383-453):\n\tExternal calls:\n\t- _moderatorFeeETHWei = calculateModeratorFee(_conversionAmount) (TwoKeyConversionHandler.sol#425)\n\tState variables written after the call(s):\n\t- conversions (TwoKeyConversionHandler.sol#446)\n\t- converterToHisConversions (TwoKeyConversionHandler.sol#448)\n\t- counters (TwoKeyConversionHandler.sol#429)\n\t- numberOfConversions (TwoKeyConversionHandler.sol#450)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 759,
          "vulnerability_to_line": 774,
          "vulnerability_code": "    function converterCancelConversion(\n\n        uint _conversionId\n\n    )\n\n    external\n\n    {\n\n        Conversion conversion = conversions[_conversionId];\n\n\n\n        require(conversion.conversionCreatedAt + 10*(1 days) < block.timestamp);\n\n        require(msg.sender == conversion.converter);\n\n        require(conversion.state == ConversionState.PENDING_APPROVAL);\n\n\n\n        counters[0]--; // Reduce number of pending conversions\n\n        counters[4]++; // Increase number of cancelled conversions\n\n        conversion.state = ConversionState.CANCELLED_BY_CONVERTER;\n\n        twoKeyAcquisitionCampaignERC20.sendBackEthWhenConversionCancelled(msg.sender, conversion.conversionAmount);\n",
          "message": "TwoKeyConversionHandler.converterCancelConversion (TwoKeyConversionHandler.sol#759-774) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(conversion.conversionCreatedAt + 10 * (86400) < block.timestamp) (TwoKeyConversionHandler.sol#766)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address public conversionHandler;\n",
          "message": "ITwoKeyAcquisitionCampaignERC20.conversionHandler should be constant (TwoKeyConversionHandler.sol#52)\nUpgradeabilityCampaignStorage._implementation should be constant (TwoKeyConversionHandler.sol#219)\nUpgradeabilityCampaignStorage.twoKeyFactory should be constant (TwoKeyConversionHandler.sol#216)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function buyTokensAndDistributeReferrerRewards(uint256 _maxReferralRewardETHWei, address _converter, uint _conversionId, bool _isConversionFiat) public returns (uint);\n",
          "message": "ITwoKeyAcquisitionCampaignERC20.buyTokensAndDistributeReferrerRewards (TwoKeyConversionHandler.sol#53) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function moveFungibleAsset(address _to, uint256 _amount) public;\n",
          "message": "ITwoKeyAcquisitionCampaignERC20.moveFungibleAsset (TwoKeyConversionHandler.sol#54) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function updateContractorProceeds(uint value) public;\n",
          "message": "ITwoKeyAcquisitionCampaignERC20.updateContractorProceeds (TwoKeyConversionHandler.sol#55) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function sendBackEthWhenConversionCancelled(address _cancelledConverter, uint _conversionAmount) public;\n",
          "message": "ITwoKeyAcquisitionCampaignERC20.sendBackEthWhenConversionCancelled (TwoKeyConversionHandler.sol#56) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function buyTokensForModeratorRewards(uint moderatorFee) public;\n",
          "message": "ITwoKeyAcquisitionCampaignERC20.buyTokensForModeratorRewards (TwoKeyConversionHandler.sol#57) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function updateReservedAmountOfTokensIfConversionRejectedOrExecuted(uint value) public;\n",
          "message": "ITwoKeyAcquisitionCampaignERC20.updateReservedAmountOfTokensIfConversionRejectedOrExecuted (TwoKeyConversionHandler.sol#58) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getStatistics(address ethereum, address plasma) public view returns (uint,uint,uint,uint);\n",
          "message": "ITwoKeyAcquisitionCampaignERC20.getStatistics (TwoKeyConversionHandler.sol#60) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTotalReferrerEarnings(address _referrer, address eth_address) public view returns (uint);\n",
          "message": "ITwoKeyAcquisitionCampaignERC20.getTotalReferrerEarnings (TwoKeyConversionHandler.sol#62) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getReferrerPlasmaBalance(address _influencer) public view returns (uint);\n",
          "message": "ITwoKeyAcquisitionCampaignERC20.getReferrerPlasmaBalance (TwoKeyConversionHandler.sol#63) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function updateReferrerPlasmaBalance(address _influencer, uint _balance) public;\n",
          "message": "ITwoKeyAcquisitionCampaignERC20.updateReferrerPlasmaBalance (TwoKeyConversionHandler.sol#64) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getReferrerCut(address me) public view returns (uint256);\n",
          "message": "ITwoKeyAcquisitionCampaignERC20.getReferrerCut (TwoKeyConversionHandler.sol#65) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ethereumOf(address me) public view returns (address);\n",
          "message": "ITwoKeyEventSource.ethereumOf (TwoKeyConversionHandler.sol#74) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function plasmaOf(address me) public view returns (address);\n",
          "message": "ITwoKeyEventSource.plasmaOf (TwoKeyConversionHandler.sol#75) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isAddressMaintainer(address _maintainer) public view returns (bool);\n",
          "message": "ITwoKeyEventSource.isAddressMaintainer (TwoKeyConversionHandler.sol#76) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTwoKeyDefaultIntegratorFeeFromAdmin() public view returns (uint);\n",
          "message": "ITwoKeyEventSource.getTwoKeyDefaultIntegratorFeeFromAdmin (TwoKeyConversionHandler.sol#77) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function updateOnConversionExecutedEvent(address converter, address contractor, address acquisitionCampaign) public;\n",
          "message": "ITwoKeyBaseReputationRegistry.updateOnConversionExecutedEvent (TwoKeyConversionHandler.sol#88) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 89,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function updateOnConversionRejectedEvent(address converter, address contractor, address acquisitionCampaign) public;\n",
          "message": "ITwoKeyBaseReputationRegistry.updateOnConversionRejectedEvent (TwoKeyConversionHandler.sol#89) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 100,
          "vulnerability_to_line": 106,
          "vulnerability_code": "    function startVesting(\n\n        uint _baseTokens,\n\n        uint _bonusTokens,\n\n        uint _conversionId,\n\n        address _converter\n\n    )\n",
          "message": "ITwoKeyPurchasesHandler.startVesting (TwoKeyConversionHandler.sol#100-106) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 193,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addVersion(string _contractName, string version, address implementation) public;\n",
          "message": "ITwoKeySingletonesRegistry.addVersion (TwoKeyConversionHandler.sol#193) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getVersion(string _contractName, string version) public view returns (address);\n",
          "message": "ITwoKeySingletonesRegistry.getVersion (TwoKeyConversionHandler.sol#201) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 225,
          "vulnerability_to_line": 227,
          "vulnerability_code": "    function implementation() public view returns (address) {\n\n        return _implementation;\n",
          "message": "UpgradeabilityCampaignStorage.implementation (TwoKeyConversionHandler.sol#225-227) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 330,
          "vulnerability_to_line": 359,
          "vulnerability_code": "    function setInitialParamsConversionHandler(\n\n        uint [] values,\n\n        address _twoKeyAcquisitionCampaignERC20,\n\n        address _twoKeyPurchasesHandler,\n\n        address _contractor,\n\n        address _assetContractERC20,\n\n        address _twoKeyEventSource,\n\n        address _twoKeyBaseReputationRegistry\n\n    )\n\n    public\n\n    {\n\n        require(isCampaignInitialized == false);\n\n        counters = new uint[](10);\n\n\n\n        expiryConversionInHours = values[0];\n\n\n\n        if(values[1] == 1) {\n\n            isFiatConversionAutomaticallyApproved = true;\n\n        }\n\n\n\n        // Instance of interface\n\n        twoKeyPurchasesHandler = _twoKeyPurchasesHandler;\n\n        twoKeyAcquisitionCampaignERC20 = ITwoKeyAcquisitionCampaignERC20(_twoKeyAcquisitionCampaignERC20);\n\n\n\n        contractor = _contractor;\n\n        assetContractERC20 =_assetContractERC20;\n\n        twoKeyEventSource = _twoKeyEventSource;\n\n        twoKeyBaseReputationRegistry = _twoKeyBaseReputationRegistry;\n\n        isCampaignInitialized = true;\n",
          "message": "TwoKeyConversionHandler.setInitialParamsConversionHandler (TwoKeyConversionHandler.sol#330-359) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 383,
          "vulnerability_to_line": 453,
          "vulnerability_code": "    function supportForCreateConversion(\n\n        address _contractor,\n\n        address _converterAddress,\n\n        uint256 _conversionAmount,\n\n        uint256 _maxReferralRewardETHWei,\n\n        uint256 baseTokensForConverterUnits,\n\n        uint256 bonusTokensForConverterUnits,\n\n        bool isConversionFiat,\n\n        bool _isAnonymous,\n\n        bool _isKYCRequired\n\n    )\n\n    public\n\n    returns (uint)\n\n    {\n\n        require(msg.sender == address(twoKeyAcquisitionCampaignERC20));\n\n\n\n        //If KYC is required, basic funnel executes and we require that converter is not previously rejected\n\n        if(_isKYCRequired == true) {\n\n            require(converterToState[_converterAddress] != ConverterState.REJECTED); // If converter is rejected then can't create conversion\n\n            // Checking the state for converter, if this is his 1st time, he goes initially to PENDING_APPROVAL\n\n            if(converterToState[_converterAddress] == ConverterState.NOT_EXISTING) {\n\n                converterToState[_converterAddress] = ConverterState.PENDING_APPROVAL;\n\n                stateToConverter[bytes32(\"PENDING_APPROVAL\")].push(_converterAddress);\n\n            }\n\n        } else {\n\n            //If KYC is not required converter is automatically approved\n\n            if(converterToState[_converterAddress] == ConverterState.NOT_EXISTING) {\n\n                converterToState[_converterAddress] = ConverterState.APPROVED;\n\n                stateToConverter[bytes32(\"APPROVED\")].push(_converterAddress);\n\n            }\n\n        }\n\n\n\n        // Set if converter want to be anonymous\n\n        isConverterAnonymous[_converterAddress] = _isAnonymous;\n\n\n\n\n\n        uint _moderatorFeeETHWei = 0;\n\n        uint256 _contractorProceeds = _conversionAmount; //In case of fiat conversion, this is going to be fiat value\n\n\n\n        ConversionState state;\n\n\n\n        if(isConversionFiat == false) {\n\n            _moderatorFeeETHWei = calculateModeratorFee(_conversionAmount);\n\n            _contractorProceeds = _conversionAmount - _maxReferralRewardETHWei - _moderatorFeeETHWei;\n\n            //TODO: Add accounting for fiat proceeds\n\n            state = ConversionState.APPROVED; // All eth conversions are auto approved\n\n            counters[1]++;\n\n        } else {\n\n            //This means fiat conversion is automatically approved\n\n            if(isFiatConversionAutomaticallyApproved) {\n\n                state = ConversionState.APPROVED;\n\n                counters[1] ++; // Increase the number of approved conversions\n\n            } else {\n\n                state = ConversionState.PENDING_APPROVAL; // Fiat conversion state is PENDING_APPROVAL\n\n                counters[0]++; // If conversion is FIAT it will be always first pending and will have to be approved\n\n            }\n\n        }\n\n\n\n        Conversion memory c = Conversion(_contractor, _contractorProceeds, _converterAddress,\n\n            state ,_conversionAmount, _maxReferralRewardETHWei, 0, _moderatorFeeETHWei, baseTokensForConverterUnits,\n\n            bonusTokensForConverterUnits,\n\n            now, now + expiryConversionInHours * (1 hours), isConversionFiat);\n\n\n\n        conversions.push(c);\n\n\n\n        converterToHisConversions[_converterAddress].push(numberOfConversions);\n\n        emit ConversionCreated(numberOfConversions);\n\n        numberOfConversions++;\n\n\n\n        return numberOfConversions-1;\n",
          "message": "TwoKeyConversionHandler.supportForCreateConversion (TwoKeyConversionHandler.sol#383-453) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 460,
          "vulnerability_to_line": 549,
          "vulnerability_code": "    function executeConversion(\n\n        uint _conversionId\n\n    )\n\n    public\n\n    {\n\n        Conversion conversion = conversions[_conversionId];\n\n\n\n        uint totalUnits = conversion.baseTokenUnits + conversion.bonusTokenUnits;\n\n\n\n        // Converter must be approved in all cases\n\n        require(converterToState[conversion.converter] == ConverterState.APPROVED);\n\n\n\n        if(conversion.isConversionFiat == true) {\n\n            if(isFiatConversionAutomaticallyApproved) {\n\n                counters[1] --; // Decrease number of approved conversions\n\n            } else {\n\n                require(conversion.state == ConversionState.PENDING_APPROVAL);\n\n                require(msg.sender == contractor); // first check who calls this in order to save gas\n\n                uint availableTokens = twoKeyAcquisitionCampaignERC20.getAvailableAndNonReservedTokensAmount();\n\n                require(totalUnits < availableTokens);\n\n                counters[0]--; //Decrease number of pending conversions\n\n            }\n\n\n\n            //Update raised funds FIAT once the conversion is executed\n\n            counters[9] = counters[9].add(conversion.conversionAmount);\n\n\n\n            //Update amount converter spent in FIAT\n\n            amountConverterSpentFiatWei[conversion.converter] = amountConverterSpentFiatWei[conversion.converter].add(conversion.conversionAmount);\n\n        } else {\n\n            require(conversion.state == ConversionState.APPROVED);\n\n            amountConverterSpentEthWEI[conversion.converter] = amountConverterSpentEthWEI[conversion.converter].add(conversion.conversionAmount);\n\n            counters[1]--; //Decrease number of approved conversions\n\n        }\n\n        //Update bought units\n\n        unitsConverterBought[conversion.converter] = unitsConverterBought[conversion.converter].add(conversion.baseTokenUnits + conversion.bonusTokenUnits);\n\n\n\n        // Total rewards for referrers\n\n        uint totalReward2keys = 0;\n\n\n\n        // Buy tokens from campaign and distribute rewards between referrers\n\n        totalReward2keys = twoKeyAcquisitionCampaignERC20.buyTokensAndDistributeReferrerRewards(\n\n            conversion.maxReferralRewardETHWei,\n\n            conversion.converter,\n\n            _conversionId,\n\n            conversion.isConversionFiat\n\n        );\n\n\n\n//         Update reputation points in registry for conversion executed event\n\n        ITwoKeyBaseReputationRegistry(twoKeyBaseReputationRegistry).updateOnConversionExecutedEvent(\n\n            conversion.converter,\n\n            contractor,\n\n            twoKeyAcquisitionCampaignERC20\n\n        );\n\n//\n\n        // Add total rewards\n\n        counters[8] = counters[8].add(totalReward2keys);\n\n\n\n        // update reserved amount of tokens on acquisition contract\n\n        twoKeyAcquisitionCampaignERC20.updateReservedAmountOfTokensIfConversionRejectedOrExecuted(totalUnits);\n\n\n\n        //Update total raised funds\n\n        if(conversion.isConversionFiat == false) {\n\n            // update moderator balances\n\n            twoKeyAcquisitionCampaignERC20.buyTokensForModeratorRewards(conversion.moderatorFeeETHWei);\n\n            // update contractor proceeds\n\n            twoKeyAcquisitionCampaignERC20.updateContractorProceeds(conversion.contractorProceedsETHWei);\n\n            // add conversion amount to counter\n\n            counters[6] = counters[6].add(conversion.conversionAmount);\n\n        }\n\n\n\n        if(doesConverterHaveExecutedConversions[conversion.converter] == false) {\n\n            counters[5]++; //increase number of unique converters\n\n            doesConverterHaveExecutedConversions[conversion.converter] = true;\n\n        }\n\n\n\n        ITwoKeyPurchasesHandler(twoKeyPurchasesHandler).startVesting(\n\n            conversion.baseTokenUnits,\n\n            conversion.bonusTokenUnits,\n\n            _conversionId,\n\n            conversion.converter\n\n        );\n\n\n\n        // Transfer tokens to lockup contract\n\n        twoKeyAcquisitionCampaignERC20.moveFungibleAsset(address(twoKeyPurchasesHandler), totalUnits);\n\n\n\n        conversion.maxReferralReward2key = totalReward2keys;\n\n        conversion.state = ConversionState.EXECUTED;\n\n        counters[3]++; //Increase number of executed conversions\n\n        counters[7] = counters[7].add(totalUnits); //update sold tokens once conversion is executed\n",
          "message": "TwoKeyConversionHandler.executeConversion (TwoKeyConversionHandler.sol#460-549) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 586,
          "vulnerability_to_line": 595,
          "vulnerability_code": "    function getAllConvertersPerState(\n\n        bytes32 state\n\n    )\n\n    public\n\n    view\n\n    onlyContractorOrMaintainer\n\n    returns (address[])\n\n    {\n\n        return stateToConverter[state];\n",
          "message": "TwoKeyConversionHandler.getAllConvertersPerState (TwoKeyConversionHandler.sol#586-595) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 654,
          "vulnerability_to_line": 674,
          "vulnerability_code": "    function approveConverter(\n\n        address _converter\n\n    )\n\n    public\n\n    onlyContractorOrMaintainer\n\n    {\n\n        require(converterToState[_converter] == ConverterState.PENDING_APPROVAL);\n\n        uint len = converterToHisConversions[_converter].length;\n\n        for(uint i=0; i<len; i++) {\n\n            uint conversionId = converterToHisConversions[_converter][i];\n\n            Conversion c = conversions[conversionId];\n\n            if(c.state == ConversionState.PENDING_APPROVAL && c.isConversionFiat == true) {\n\n                //TODO: Here should be APPROVED if it is not fiat\n\n                counters[0]--; //Reduce number of pending conversions\n\n                counters[1]++; //Increase number of approved conversions\n\n                c.state = ConversionState.APPROVED;\n\n//                conversions[conversionId] = c;\n\n            }\n\n        }\n\n        moveFromPendingOrRejectedToApprovedState(_converter);\n",
          "message": "TwoKeyConversionHandler.approveConverter (TwoKeyConversionHandler.sol#654-674) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 680,
          "vulnerability_to_line": 710,
          "vulnerability_code": "    function rejectConverter(\n\n        address _converter\n\n    )\n\n    public\n\n    onlyContractorOrMaintainer\n\n    {\n\n        require(converterToState[_converter] == ConverterState.PENDING_APPROVAL);\n\n        moveFromPendingToRejectedState(_converter);\n\n        uint reservedAmount = 0;\n\n        uint refundAmount = 0;\n\n        uint len = converterToHisConversions[_converter].length;\n\n        for(uint i=0; i< len; i++) {\n\n            uint conversionId = converterToHisConversions[_converter][i];\n\n            Conversion c = conversions[conversionId];\n\n            if(c.state == ConversionState.PENDING_APPROVAL || c.state == ConversionState.APPROVED) {\n\n                counters[0]--; //Reduce number of pending conversions\n\n                counters[2]++; //Increase number of rejected conversions\n\n                ITwoKeyBaseReputationRegistry(twoKeyBaseReputationRegistry).updateOnConversionRejectedEvent(_converter, contractor, twoKeyAcquisitionCampaignERC20);\n\n                c.state = ConversionState.REJECTED;\n\n                reservedAmount += c.baseTokenUnits + c.bonusTokenUnits;\n\n                if(c.isConversionFiat == false) {\n\n                    refundAmount += c.conversionAmount;\n\n                }\n\n            }\n\n        }\n\n        //If there's an amount to be returned and reserved tokens, update state and execute cashback\n\n        if(reservedAmount > 0 && refundAmount > 0) {\n\n            twoKeyAcquisitionCampaignERC20.updateReservedAmountOfTokensIfConversionRejectedOrExecuted(reservedAmount);\n\n            twoKeyAcquisitionCampaignERC20.sendBackEthWhenConversionCancelled(_converter, refundAmount);\n\n        }\n",
          "message": "TwoKeyConversionHandler.rejectConverter (TwoKeyConversionHandler.sol#680-710) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 719,
          "vulnerability_to_line": 728,
          "vulnerability_code": "    function getConverterConversionIds(\n\n        address _converter\n\n    )\n\n    public\n\n    view\n\n    returns (uint[])\n\n    {\n\n//        require(msg.sender == contractor || ITwoKeyEventSource(twoKeyEventSource).isAddressMaintainer(msg.sender) || msg.sender == _converter);\n\n        return converterToHisConversions[_converter];\n",
          "message": "TwoKeyConversionHandler.getConverterConversionIds (TwoKeyConversionHandler.sol#719-728) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 730,
          "vulnerability_to_line": 738,
          "vulnerability_code": "    function getLastConverterConversionId(\n\n        address _converter\n\n    )\n\n    public\n\n    view\n\n    returns (uint)\n\n    {\n\n        return converterToHisConversions[_converter][converterToHisConversions[_converter].length - 1];\n",
          "message": "TwoKeyConversionHandler.getLastConverterConversionId (TwoKeyConversionHandler.sol#730-738) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 780,
          "vulnerability_to_line": 799,
          "vulnerability_code": "    function getCampaignSummary()\n\n    public\n\n    view\n\n    returns (uint,uint,uint,uint[])\n\n    {\n\n        bytes32 pending = convertConverterStateToBytes(ConverterState.PENDING_APPROVAL);\n\n        bytes32 approved = convertConverterStateToBytes(ConverterState.APPROVED);\n\n        bytes32 rejected = convertConverterStateToBytes(ConverterState.REJECTED);\n\n\n\n        uint numberOfPending = stateToConverter[pending].length;\n\n        uint numberOfApproved = stateToConverter[approved].length;\n\n        uint numberOfRejected = stateToConverter[rejected].length;\n\n\n\n        return (\n\n            numberOfPending,\n\n            numberOfApproved,\n\n            numberOfRejected,\n\n            counters\n\n        );\n",
          "message": "TwoKeyConversionHandler.getCampaignSummary (TwoKeyConversionHandler.sol#780-799) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 821,
          "vulnerability_to_line": 833,
          "vulnerability_code": "    function getConverterPurchasesStats(\n\n        address _converter\n\n    )\n\n    public\n\n    view\n\n    returns (uint,uint,uint)\n\n    {\n\n        return (\n\n            amountConverterSpentEthWEI[_converter],\n\n            amountConverterSpentFiatWei[_converter],\n\n            unitsConverterBought[_converter]\n\n        );\n",
          "message": "TwoKeyConversionHandler.getConverterPurchasesStats (TwoKeyConversionHandler.sol#821-833) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTotalReferrerEarnings(address _referrer, address eth_address) public view returns (uint);\n",
          "message": "Parameter 'eth_address' of ITwoKeyAcquisitionCampaignERC20.getTotalReferrerEarnings (TwoKeyConversionHandler.sol#62) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_a' of SafeMath.mul (TwoKeyConversionHandler.sol#123) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_b' of SafeMath.mul (TwoKeyConversionHandler.sol#123) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 139,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_a' of SafeMath.div (TwoKeyConversionHandler.sol#139) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 139,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_b' of SafeMath.div (TwoKeyConversionHandler.sol#139) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_a' of SafeMath.sub (TwoKeyConversionHandler.sol#149) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_b' of SafeMath.sub (TwoKeyConversionHandler.sol#149) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_a' of SafeMath.add (TwoKeyConversionHandler.sol#157) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_b' of SafeMath.add (TwoKeyConversionHandler.sol#157) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 219,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address internal _implementation;\n",
          "message": "Variable 'UpgradeabilityCampaignStorage._implementation' (TwoKeyConversionHandler.sol#219) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _twoKeyAcquisitionCampaignERC20,\n",
          "message": "Parameter '_twoKeyAcquisitionCampaignERC20' of TwoKeyConversionHandler.setInitialParamsConversionHandler (TwoKeyConversionHandler.sol#332) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 333,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _twoKeyPurchasesHandler,\n",
          "message": "Parameter '_twoKeyPurchasesHandler' of TwoKeyConversionHandler.setInitialParamsConversionHandler (TwoKeyConversionHandler.sol#333) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 334,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _contractor,\n",
          "message": "Parameter '_contractor' of TwoKeyConversionHandler.setInitialParamsConversionHandler (TwoKeyConversionHandler.sol#334) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 335,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _assetContractERC20,\n",
          "message": "Parameter '_assetContractERC20' of TwoKeyConversionHandler.setInitialParamsConversionHandler (TwoKeyConversionHandler.sol#335) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 336,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _twoKeyEventSource,\n",
          "message": "Parameter '_twoKeyEventSource' of TwoKeyConversionHandler.setInitialParamsConversionHandler (TwoKeyConversionHandler.sol#336) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 337,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _twoKeyBaseReputationRegistry\n",
          "message": "Parameter '_twoKeyBaseReputationRegistry' of TwoKeyConversionHandler.setInitialParamsConversionHandler (TwoKeyConversionHandler.sol#337) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 367,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _conversionAmountETHWei\n",
          "message": "Parameter '_conversionAmountETHWei' of TwoKeyConversionHandler.calculateModeratorFee (TwoKeyConversionHandler.sol#367) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 384,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _contractor,\n",
          "message": "Parameter '_contractor' of TwoKeyConversionHandler.supportForCreateConversion (TwoKeyConversionHandler.sol#384) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 385,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _converterAddress,\n",
          "message": "Parameter '_converterAddress' of TwoKeyConversionHandler.supportForCreateConversion (TwoKeyConversionHandler.sol#385) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 386,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _conversionAmount,\n",
          "message": "Parameter '_conversionAmount' of TwoKeyConversionHandler.supportForCreateConversion (TwoKeyConversionHandler.sol#386) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 387,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _maxReferralRewardETHWei,\n",
          "message": "Parameter '_maxReferralRewardETHWei' of TwoKeyConversionHandler.supportForCreateConversion (TwoKeyConversionHandler.sol#387) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 391,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool _isAnonymous,\n",
          "message": "Parameter '_isAnonymous' of TwoKeyConversionHandler.supportForCreateConversion (TwoKeyConversionHandler.sol#391) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 392,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool _isKYCRequired\n",
          "message": "Parameter '_isKYCRequired' of TwoKeyConversionHandler.supportForCreateConversion (TwoKeyConversionHandler.sol#392) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 461,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _conversionId\n",
          "message": "Parameter '_conversionId' of TwoKeyConversionHandler.executeConversion (TwoKeyConversionHandler.sol#461) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 602,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _converter,\n",
          "message": "Parameter '_converter' of TwoKeyConversionHandler.moveFromStateAToStateB (TwoKeyConversionHandler.sol#602) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 627,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _converter\n",
          "message": "Parameter '_converter' of TwoKeyConversionHandler.moveFromPendingOrRejectedToApprovedState (TwoKeyConversionHandler.sol#627) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 641,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _converter\n",
          "message": "Parameter '_converter' of TwoKeyConversionHandler.moveFromPendingToRejectedState (TwoKeyConversionHandler.sol#641) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 655,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _converter\n",
          "message": "Parameter '_converter' of TwoKeyConversionHandler.approveConverter (TwoKeyConversionHandler.sol#655) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 681,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _converter\n",
          "message": "Parameter '_converter' of TwoKeyConversionHandler.rejectConverter (TwoKeyConversionHandler.sol#681) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 720,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _converter\n",
          "message": "Parameter '_converter' of TwoKeyConversionHandler.getConverterConversionIds (TwoKeyConversionHandler.sol#720) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 731,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _converter\n",
          "message": "Parameter '_converter' of TwoKeyConversionHandler.getLastConverterConversionId (TwoKeyConversionHandler.sol#731) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 760,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _conversionId\n",
          "message": "Parameter '_conversionId' of TwoKeyConversionHandler.converterCancelConversion (TwoKeyConversionHandler.sol#760) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 807,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _converter\n",
          "message": "Parameter '_converter' of TwoKeyConversionHandler.getStateForConverter (TwoKeyConversionHandler.sol#807) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 822,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _converter\n",
          "message": "Parameter '_converter' of TwoKeyConversionHandler.getConverterPurchasesStats (TwoKeyConversionHandler.sol#822) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 214,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ITwoKeySingletonesRegistry internal registry;\n",
          "message": "UpgradeabilityCampaignStorage.registry (TwoKeyConversionHandler.sol#214) is never used in TwoKeyConversionHandler\nUpgradeabilityCampaignStorage.twoKeyFactory (TwoKeyConversionHandler.sol#216) is never used in TwoKeyConversionHandler\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 564,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address empty = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 616,
          "vulnerability_to_line": null,
          "vulnerability_code": "                stateToConverter[key].length--;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 610,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i< pending.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 610,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i< pending.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 662,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<len; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 691,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i< len; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 166,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 206,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 245,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 272,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint256) private amountConverterSpentFiatWei; // Amount converter spent for Fiat conversions\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 273,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint256) private amountConverterSpentEthWEI; // Amount converter put to the contract in Ether\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 274,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint256) private unitsConverterBought; // Number of units (ERC20 tokens) bought\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 260,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 773,
          "vulnerability_to_line": null,
          "vulnerability_code": "        twoKeyAcquisitionCampaignERC20.sendBackEthWhenConversionCancelled(msg.sender, conversion.conversionAmount);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 193,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addVersion(string _contractName, string version, address implementation) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 193,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addVersion(string _contractName, string version, address implementation) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getVersion(string _contractName, string version) public view returns (address);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getVersion(string _contractName, string version) public view returns (address);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 331,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint [] values,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 592,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (address[])\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 724,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (uint[])\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 783,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (uint,uint,uint,uint[])\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 465,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Conversion conversion = conversions[_conversionId];\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 664,
          "vulnerability_to_line": null,
          "vulnerability_code": "            Conversion c = conversions[conversionId];\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 693,
          "vulnerability_to_line": null,
          "vulnerability_code": "            Conversion c = conversions[conversionId];\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 764,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Conversion conversion = conversions[_conversionId];\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 193,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addVersion(string _contractName, string version, address implementation) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getVersion(string _contractName, string version) public view returns (address);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 262,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool isCampaignInitialized;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 267,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint numberOfConversions;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 269,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Conversion[] conversions;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 270,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ITwoKeyAcquisitionCampaignERC20 twoKeyAcquisitionCampaignERC20;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 277,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes32 => address[]) stateToConverter; //State to all converters in that state\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint[]) converterToHisConversions;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 280,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => ConverterState) converterToState; //Converter to his state\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 281,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => bool) isConverterAnonymous;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 282,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => bool) doesConverterHaveExecutedConversions;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 296,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint [] counters;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 298,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint expiryConversionInHours; // How long converter can be pending before it will be automatically rejected and funds will be returned to convertor (hours)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 300,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address twoKeyEventSource;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 301,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address contractor;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 302,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address assetContractERC20;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 303,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address twoKeyBaseReputationRegistry;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 563,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Conversion memory conversion = conversions[conversionId];\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 770,
          "vulnerability_to_line": null,
          "vulnerability_code": "        counters[0]--; // Reduce number of pending conversions\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 330,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setInitialParamsConversionHandler(\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 330,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setInitialParamsConversionHandler(\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.\nClassification: SWC-110"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 460,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function executeConversion(\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 759,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function converterCancelConversion(\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 325,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == contractor || ITwoKeyEventSource(twoKeyEventSource).isAddressMaintainer(msg.sender));\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 594,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return stateToConverter[state];\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 730,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getLastConverterConversionId(\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 342,
          "vulnerability_to_line": null,
          "vulnerability_code": "        counters = new uint[](10);\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.\nClassification: SWC-101"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [
        "SYMBOLIC EXECUTION TIMEOUT",
        "exception (ArgumentError: argument 1: <type 'exceptions.Exception'>: timeout)"
      ],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "// File: ../sc_datasets/DAppSCAN/Solidified-2Key [14.10.2019]/contracts-de171eb80e9ce1c6566a5d782f0a0549ab0151ad/contracts/2key/TwoKeyConversionStates.sol\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 467,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint totalUnits = conversion.baseTokenUnits + conversion.bonusTokenUnits;\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 531,
          "vulnerability_to_line": null,
          "vulnerability_code": "            counters[5]++; //increase number of unique converters\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 586,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAllConvertersPerState(\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 594,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return stateToConverter[state];\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 696,
          "vulnerability_to_line": null,
          "vulnerability_code": "                counters[2]++; //Increase number of rejected conversions\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 699,
          "vulnerability_to_line": null,
          "vulnerability_code": "                reservedAmount += c.baseTokenUnits + c.bonusTokenUnits;\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 719,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getConverterConversionIds(\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 727,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return converterToHisConversions[_converter];\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 766,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(conversion.conversionCreatedAt + 10*(1 days) < block.timestamp);\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 771,
          "vulnerability_to_line": null,
          "vulnerability_code": "        counters[4]++; // Increase number of cancelled conversions\n",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 474,
          "vulnerability_to_line": null,
          "vulnerability_code": "                counters[1] --; // Decrease number of approved conversions\n",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 480,
          "vulnerability_to_line": null,
          "vulnerability_code": "                counters[0]--; //Decrease number of pending conversions\n",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 491,
          "vulnerability_to_line": null,
          "vulnerability_code": "            counters[1]--; //Decrease number of approved conversions\n",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 695,
          "vulnerability_to_line": null,
          "vulnerability_code": "                counters[0]--; //Reduce number of pending conversions\n",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 770,
          "vulnerability_to_line": null,
          "vulnerability_code": "        counters[0]--; // Reduce number of pending conversions\n",
          "message": null
        }
      ]
    }
  }
}