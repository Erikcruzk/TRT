{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 239,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=1; i<numberOfVestingPortions + 1; i++) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 240,
          "vulnerability_to_line": null,
          "vulnerability_code": "            portionToUnlockingDate[i] = bonusVestingStartDate + (i-1) * (numberOfDaysBetweenPortions * (1 days));\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 240,
          "vulnerability_to_line": null,
          "vulnerability_code": "            portionToUnlockingDate[i] = bonusVestingStartDate + (i-1) * (numberOfDaysBetweenPortions * (1 days));\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 279,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=1; i<numberOfVestingPortions + 1; i++) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 308,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<numberOfVestingPortions; i++) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 336,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<numberOfVestingPortions+1;i++) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 337,
          "vulnerability_to_line": null,
          "vulnerability_code": "            portionToUnlockingDate[i] = portionToUnlockingDate[i] + shift;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 337,
          "vulnerability_to_line": null,
          "vulnerability_code": "            portionToUnlockingDate[i] = portionToUnlockingDate[i] + shift;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 408,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i< numberOfVestingPortions+1; i++) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 409,
          "vulnerability_to_line": null,
          "vulnerability_code": "            dates[i] = portionToUnlockingDate[i];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 239,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=1; i<numberOfVestingPortions + 1; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 279,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=1; i<numberOfVestingPortions + 1; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 308,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<numberOfVestingPortions; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 336,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<numberOfVestingPortions+1;i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 408,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i< numberOfVestingPortions+1; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 354,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(p.isPortionWithdrawn[portion] == false && block.timestamp > portionToUnlockingDate[portion]);\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 239,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=1; i<numberOfVestingPortions + 1; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 261,
          "vulnerability_to_line": null,
          "vulnerability_code": "        numberOfPurchases++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 279,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=1; i<numberOfVestingPortions + 1; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 308,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<numberOfVestingPortions; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 336,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<numberOfVestingPortions+1;i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 408,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i< numberOfVestingPortions+1; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_41"
      ],
      "vulnerability_findings": [
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address internal _implementation;\n",
          "message": "UpgradeabilityCampaignStorage._implementation (TwoKeyPurchasesHandler.sol#135) is never initialized. It is used in:\n\t- implementation (TwoKeyPurchasesHandler.sol#141-143)\n"
        },
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 175,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address converter;\n",
          "message": "TwoKeyPurchasesHandler.converter (TwoKeyPurchasesHandler.sol#175) is never initialized. It is used in:\n\t- withdrawTokens (TwoKeyPurchasesHandler.sol#345-366)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 345,
          "vulnerability_to_line": 366,
          "vulnerability_code": "    function withdrawTokens(\n\n        uint conversionId,\n\n        uint portion\n\n    )\n\n    public\n\n    {\n\n        Purchase p = conversionIdToPurchase[conversionId];\n\n        //Only converter of maintainer can call this function\n\n        require(msg.sender == p.converter || ITwoKeyEventSource(twoKeyEventSource).isAddressMaintainer(msg.sender) == true);\n\n        require(p.isPortionWithdrawn[portion] == false && block.timestamp > portionToUnlockingDate[portion]);\n\n        //Transfer tokens\n\n        require(IERC20(assetContractERC20).transfer(p.converter, p.portionAmounts[portion]));\n\n        p.isPortionWithdrawn[portion] = true;\n\n\n\n        emit TokensWithdrawn (\n\n            block.timestamp,\n\n            msg.sender,\n\n            converter,\n\n            portion,\n\n            p.portionAmounts[portion]\n\n        );\n",
          "message": "Reentrancy in TwoKeyPurchasesHandler.withdrawTokens (TwoKeyPurchasesHandler.sol#345-366):\n\tExternal calls:\n\t- require(bool)(msg.sender == p.converter || ITwoKeyEventSource(twoKeyEventSource).isAddressMaintainer(msg.sender) == true) (TwoKeyPurchasesHandler.sol#353)\n\t- require(bool)(IERC20(assetContractERC20).transfer(p.converter,p.portionAmounts[portion])) (TwoKeyPurchasesHandler.sol#356)\n\tState variables written after the call(s):\n\t- conversionIdToPurchase (TwoKeyPurchasesHandler.sol#357)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 345,
          "vulnerability_to_line": 366,
          "vulnerability_code": "    function withdrawTokens(\n\n        uint conversionId,\n\n        uint portion\n\n    )\n\n    public\n\n    {\n\n        Purchase p = conversionIdToPurchase[conversionId];\n\n        //Only converter of maintainer can call this function\n\n        require(msg.sender == p.converter || ITwoKeyEventSource(twoKeyEventSource).isAddressMaintainer(msg.sender) == true);\n\n        require(p.isPortionWithdrawn[portion] == false && block.timestamp > portionToUnlockingDate[portion]);\n\n        //Transfer tokens\n\n        require(IERC20(assetContractERC20).transfer(p.converter, p.portionAmounts[portion]));\n\n        p.isPortionWithdrawn[portion] = true;\n\n\n\n        emit TokensWithdrawn (\n\n            block.timestamp,\n\n            msg.sender,\n\n            converter,\n\n            portion,\n\n            p.portionAmounts[portion]\n\n        );\n",
          "message": "TwoKeyPurchasesHandler.withdrawTokens (TwoKeyPurchasesHandler.sol#345-366) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(p.isPortionWithdrawn[portion] == false && block.timestamp > portionToUnlockingDate[portion]) (TwoKeyPurchasesHandler.sol#354)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 175,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address converter;\n",
          "message": "TwoKeyPurchasesHandler.converter should be constant (TwoKeyPurchasesHandler.sol#175)\nUpgradeabilityCampaignStorage._implementation should be constant (TwoKeyPurchasesHandler.sol#135)\nUpgradeabilityCampaignStorage.twoKeyFactory should be constant (TwoKeyPurchasesHandler.sol#132)\n"
        },
        {
          "name": "pragma",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": "Different versions of Solidity is used in TwoKeyPurchasesHandler.sol:\n\t- Version used: ['^0.4.0', '^0.4.24']\n\t- TwoKeyPurchasesHandler.sol#3 declares pragma solidity^0.4.24\n\t- TwoKeyPurchasesHandler.sol#15 declares pragma solidity^0.4.24\n\t- TwoKeyPurchasesHandler.sol#82 declares pragma solidity^0.4.24\n\t- TwoKeyPurchasesHandler.sol#122 declares pragma solidity^0.4.24\n\t- TwoKeyPurchasesHandler.sol#148 declares pragma solidity^0.4.24\n\t- TwoKeyPurchasesHandler.sol#161 declares pragma solidity^0.4.0\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ethereumOf(address me) public view returns (address);\n",
          "message": "ITwoKeyEventSource.ethereumOf (TwoKeyPurchasesHandler.sol#7) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function plasmaOf(address me) public view returns (address);\n",
          "message": "ITwoKeyEventSource.plasmaOf (TwoKeyPurchasesHandler.sol#8) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isAddressMaintainer(address _maintainer) public view returns (bool);\n",
          "message": "ITwoKeyEventSource.isAddressMaintainer (TwoKeyPurchasesHandler.sol#9) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTwoKeyDefaultIntegratorFeeFromAdmin() public view returns (uint);\n",
          "message": "ITwoKeyEventSource.getTwoKeyDefaultIntegratorFeeFromAdmin (TwoKeyPurchasesHandler.sol#10) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": 50,
          "vulnerability_code": "    function approve(\n\n        address _spender,\n\n        uint256 _value\n\n    )\n\n    public\n",
          "message": "IERC20.approve (TwoKeyPurchasesHandler.sol#45-50) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 109,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addVersion(string _contractName, string version, address implementation) public;\n",
          "message": "ITwoKeySingletonesRegistry.addVersion (TwoKeyPurchasesHandler.sol#109) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getVersion(string _contractName, string version) public view returns (address);\n",
          "message": "ITwoKeySingletonesRegistry.getVersion (TwoKeyPurchasesHandler.sol#117) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": 143,
          "vulnerability_code": "    function implementation() public view returns (address) {\n\n        return _implementation;\n",
          "message": "UpgradeabilityCampaignStorage.implementation (TwoKeyPurchasesHandler.sol#141-143) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 206,
          "vulnerability_to_line": 244,
          "vulnerability_code": "    function setInitialParamsPurchasesHandler(\n\n        uint[] values,\n\n        address _contractor,\n\n        address _assetContractERC20,\n\n        address _twoKeyEventSource,\n\n        address _proxyConversionHandler\n\n    )\n\n    public\n\n    {\n\n        require(initialized == false);\n\n\n\n        tokenDistributionDate = values[2];\n\n        maxDistributionDateShiftInDays = values[3];\n\n        numberOfVestingPortions = values[4];\n\n        numberOfDaysBetweenPortions = values[5];\n\n        bonusTokensVestingStartShiftInDaysFromDistributionDate = values[6];\n\n        vestingAmount = VestingAmount(values[7]);\n\n        contractor = _contractor;\n\n        assetContractERC20 = _assetContractERC20;\n\n        twoKeyEventSource = _twoKeyEventSource;\n\n        proxyConversionHandler = _proxyConversionHandler;\n\n\n\n        uint bonusVestingStartDate;\n\n        // In case vested amounts are both bonus and base, bonusTokensVestingStartShiftInDaysFromDistributionDate is ignored\n\n        if(vestingAmount == VestingAmount.BASE_AND_BONUS) {\n\n            bonusVestingStartDate = tokenDistributionDate + numberOfDaysBetweenPortions * (1 days);\n\n        } else {\n\n            bonusVestingStartDate = tokenDistributionDate + bonusTokensVestingStartShiftInDaysFromDistributionDate * (1 days);\n\n        }\n\n\n\n\n\n        portionToUnlockingDate[0] = tokenDistributionDate;\n\n\n\n        for(uint i=1; i<numberOfVestingPortions + 1; i++) {\n\n            portionToUnlockingDate[i] = bonusVestingStartDate + (i-1) * (numberOfDaysBetweenPortions * (1 days));\n\n        }\n\n\n\n        initialized = true;\n",
          "message": "TwoKeyPurchasesHandler.setInitialParamsPurchasesHandler (TwoKeyPurchasesHandler.sol#206-244) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 247,
          "vulnerability_to_line": 262,
          "vulnerability_code": "    function startVesting(\n\n        uint _baseTokens,\n\n        uint _bonusTokens,\n\n        uint _conversionId,\n\n        address _converter\n\n    )\n\n    public\n\n    {\n\n        require(msg.sender == proxyConversionHandler);\n\n        if(vestingAmount == VestingAmount.BASE_AND_BONUS) {\n\n            baseAndBonusVesting(_baseTokens, _bonusTokens, _conversionId, _converter);\n\n        } else {\n\n            bonusVestingOnly(_baseTokens, _bonusTokens, _conversionId, _converter);\n\n        }\n\n        numberOfPurchases++;\n",
          "message": "TwoKeyPurchasesHandler.startVesting (TwoKeyPurchasesHandler.sol#247-262) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 324,
          "vulnerability_to_line": 342,
          "vulnerability_code": "    function changeDistributionDate(\n\n        uint _newDate\n\n    )\n\n    public\n\n    {\n\n        require(msg.sender == contractor);\n\n        require(isDistributionDateChanged == false);\n\n        require(_newDate - (maxDistributionDateShiftInDays * (1 days)) <= tokenDistributionDate);\n\n        require(now < tokenDistributionDate);\n\n\n\n        uint shift = tokenDistributionDate - _newDate;\n\n        // If the date is changed shifting all tokens unlocking dates for the difference\n\n        for(uint i=0; i<numberOfVestingPortions+1;i++) {\n\n            portionToUnlockingDate[i] = portionToUnlockingDate[i] + shift;\n\n        }\n\n\n\n        isDistributionDateChanged = true;\n\n        tokenDistributionDate = _newDate;\n",
          "message": "TwoKeyPurchasesHandler.changeDistributionDate (TwoKeyPurchasesHandler.sol#324-342) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 345,
          "vulnerability_to_line": 366,
          "vulnerability_code": "    function withdrawTokens(\n\n        uint conversionId,\n\n        uint portion\n\n    )\n\n    public\n\n    {\n\n        Purchase p = conversionIdToPurchase[conversionId];\n\n        //Only converter of maintainer can call this function\n\n        require(msg.sender == p.converter || ITwoKeyEventSource(twoKeyEventSource).isAddressMaintainer(msg.sender) == true);\n\n        require(p.isPortionWithdrawn[portion] == false && block.timestamp > portionToUnlockingDate[portion]);\n\n        //Transfer tokens\n\n        require(IERC20(assetContractERC20).transfer(p.converter, p.portionAmounts[portion]));\n\n        p.isPortionWithdrawn[portion] = true;\n\n\n\n        emit TokensWithdrawn (\n\n            block.timestamp,\n\n            msg.sender,\n\n            converter,\n\n            portion,\n\n            p.portionAmounts[portion]\n\n        );\n",
          "message": "TwoKeyPurchasesHandler.withdrawTokens (TwoKeyPurchasesHandler.sol#345-366) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 368,
          "vulnerability_to_line": 385,
          "vulnerability_code": "    function getPurchaseInformation(\n\n        uint _conversionId\n\n    )\n\n    public\n\n    view\n\n    returns (address, uint, uint, uint[], bool[], uint[])\n\n    {\n\n        Purchase memory p = conversionIdToPurchase[_conversionId];\n\n        uint [] memory unlockingDates = getPortionsUnlockingDates();\n\n        return (\n\n            p.converter,\n\n            p.baseTokens,\n\n            p.bonusTokens,\n\n            p.portionAmounts,\n\n            p.isPortionWithdrawn,\n\n            unlockingDates\n\n        );\n",
          "message": "TwoKeyPurchasesHandler.getPurchaseInformation (TwoKeyPurchasesHandler.sol#368-385) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 387,
          "vulnerability_to_line": 400,
          "vulnerability_code": "    function getStaticInfo()\n\n    public\n\n    view\n\n    returns (uint,uint,uint,uint,uint,uint)\n\n    {\n\n        return (\n\n            bonusTokensVestingStartShiftInDaysFromDistributionDate,\n\n            tokenDistributionDate,\n\n            numberOfVestingPortions,\n\n            numberOfDaysBetweenPortions,\n\n            maxDistributionDateShiftInDays,\n\n            uint(vestingAmount)\n\n        );\n",
          "message": "TwoKeyPurchasesHandler.getStaticInfo (TwoKeyPurchasesHandler.sol#387-400) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 161,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;\n",
          "message": "Detected issues with version pragma in TwoKeyPurchasesHandler.sol:\n\t- pragma solidity^0.4.0 (TwoKeyPurchasesHandler.sol#161): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address internal _implementation;\n",
          "message": "Variable 'UpgradeabilityCampaignStorage._implementation' (TwoKeyPurchasesHandler.sol#135) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 208,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _contractor,\n",
          "message": "Parameter '_contractor' of TwoKeyPurchasesHandler.setInitialParamsPurchasesHandler (TwoKeyPurchasesHandler.sol#208) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 209,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _assetContractERC20,\n",
          "message": "Parameter '_assetContractERC20' of TwoKeyPurchasesHandler.setInitialParamsPurchasesHandler (TwoKeyPurchasesHandler.sol#209) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 210,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _twoKeyEventSource,\n",
          "message": "Parameter '_twoKeyEventSource' of TwoKeyPurchasesHandler.setInitialParamsPurchasesHandler (TwoKeyPurchasesHandler.sol#210) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _proxyConversionHandler\n",
          "message": "Parameter '_proxyConversionHandler' of TwoKeyPurchasesHandler.setInitialParamsPurchasesHandler (TwoKeyPurchasesHandler.sol#211) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 248,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _baseTokens,\n",
          "message": "Parameter '_baseTokens' of TwoKeyPurchasesHandler.startVesting (TwoKeyPurchasesHandler.sol#248) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 249,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _bonusTokens,\n",
          "message": "Parameter '_bonusTokens' of TwoKeyPurchasesHandler.startVesting (TwoKeyPurchasesHandler.sol#249) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 250,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _conversionId,\n",
          "message": "Parameter '_conversionId' of TwoKeyPurchasesHandler.startVesting (TwoKeyPurchasesHandler.sol#250) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 251,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _converter\n",
          "message": "Parameter '_converter' of TwoKeyPurchasesHandler.startVesting (TwoKeyPurchasesHandler.sol#251) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 265,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _baseTokens,\n",
          "message": "Parameter '_baseTokens' of TwoKeyPurchasesHandler.bonusVestingOnly (TwoKeyPurchasesHandler.sol#265) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 266,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _bonusTokens,\n",
          "message": "Parameter '_bonusTokens' of TwoKeyPurchasesHandler.bonusVestingOnly (TwoKeyPurchasesHandler.sol#266) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 267,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _conversionId,\n",
          "message": "Parameter '_conversionId' of TwoKeyPurchasesHandler.bonusVestingOnly (TwoKeyPurchasesHandler.sol#267) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 268,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _converter\n",
          "message": "Parameter '_converter' of TwoKeyPurchasesHandler.bonusVestingOnly (TwoKeyPurchasesHandler.sol#268) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _baseTokens,\n",
          "message": "Parameter '_baseTokens' of TwoKeyPurchasesHandler.baseAndBonusVesting (TwoKeyPurchasesHandler.sol#295) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 296,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _bonusTokens,\n",
          "message": "Parameter '_bonusTokens' of TwoKeyPurchasesHandler.baseAndBonusVesting (TwoKeyPurchasesHandler.sol#296) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 297,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _conversionId,\n",
          "message": "Parameter '_conversionId' of TwoKeyPurchasesHandler.baseAndBonusVesting (TwoKeyPurchasesHandler.sol#297) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 298,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _converter\n",
          "message": "Parameter '_converter' of TwoKeyPurchasesHandler.baseAndBonusVesting (TwoKeyPurchasesHandler.sol#298) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 325,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _newDate\n",
          "message": "Parameter '_newDate' of TwoKeyPurchasesHandler.changeDistributionDate (TwoKeyPurchasesHandler.sol#325) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 369,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _conversionId\n",
          "message": "Parameter '_conversionId' of TwoKeyPurchasesHandler.getPurchaseInformation (TwoKeyPurchasesHandler.sol#369) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 130,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ITwoKeySingletonesRegistry internal registry;\n",
          "message": "UpgradeabilityCampaignStorage.registry (TwoKeyPurchasesHandler.sol#130) is never used in TwoKeyPurchasesHandler\nUpgradeabilityCampaignStorage.twoKeyFactory (TwoKeyPurchasesHandler.sol#132) is never used in TwoKeyPurchasesHandler\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 239,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=1; i<numberOfVestingPortions + 1; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 279,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=1; i<numberOfVestingPortions + 1; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 308,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<numberOfVestingPortions; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 336,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<numberOfVestingPortions+1;i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 408,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i< numberOfVestingPortions+1; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 122,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 148,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 161,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 109,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addVersion(string _contractName, string version, address implementation) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 109,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addVersion(string _contractName, string version, address implementation) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getVersion(string _contractName, string version) public view returns (address);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getVersion(string _contractName, string version) public view returns (address);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 207,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint[] values,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 373,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (address, uint, uint, uint[], bool[], uint[])\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 373,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (address, uint, uint, uint[], bool[], uint[])\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 373,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (address, uint, uint, uint[], bool[], uint[])\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 405,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (uint[])\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 351,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Purchase p = conversionIdToPurchase[conversionId];\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 109,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addVersion(string _contractName, string version, address implementation) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getVersion(string _contractName, string version) public view returns (address);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 168,
          "vulnerability_to_line": null,
          "vulnerability_code": "    VestingAmount vestingAmount;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 170,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool initialized;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 171,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool isDistributionDateChanged;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address proxyConversionHandler;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 175,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address converter;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 176,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address contractor;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 177,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address twoKeyEventSource;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 181,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint numberOfPurchases;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 182,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint bonusTokensVestingStartShiftInDaysFromDistributionDate;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint tokenDistributionDate; // Start of token distribution\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 184,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint numberOfVestingPortions; // For example 6\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 185,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint numberOfDaysBetweenPortions; // For example 30 days\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 186,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint maxDistributionDateShiftInDays;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 188,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(uint => Purchase) conversionIdToPurchase;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 206,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setInitialParamsPurchasesHandler(\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 206,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setInitialParamsPurchasesHandler(\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 206,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setInitialParamsPurchasesHandler(\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 206,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setInitialParamsPurchasesHandler(\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 231,
          "vulnerability_to_line": null,
          "vulnerability_code": "            bonusVestingStartDate = tokenDistributionDate + numberOfDaysBetweenPortions * (1 days);\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 231,
          "vulnerability_to_line": null,
          "vulnerability_code": "            bonusVestingStartDate = tokenDistributionDate + numberOfDaysBetweenPortions * (1 days);\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 233,
          "vulnerability_to_line": null,
          "vulnerability_code": "            bonusVestingStartDate = tokenDistributionDate + bonusTokensVestingStartShiftInDaysFromDistributionDate * (1 days);\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 233,
          "vulnerability_to_line": null,
          "vulnerability_code": "            bonusVestingStartDate = tokenDistributionDate + bonusTokensVestingStartShiftInDaysFromDistributionDate * (1 days);\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 239,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=1; i<numberOfVestingPortions + 1; i++) {\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 240,
          "vulnerability_to_line": null,
          "vulnerability_code": "            portionToUnlockingDate[i] = bonusVestingStartDate + (i-1) * (numberOfDaysBetweenPortions * (1 days));\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 240,
          "vulnerability_to_line": null,
          "vulnerability_code": "            portionToUnlockingDate[i] = bonusVestingStartDate + (i-1) * (numberOfDaysBetweenPortions * (1 days));\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 345,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawTokens(\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint [] memory dates = new uint[](numberOfVestingPortions+1);\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 408,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i< numberOfVestingPortions+1; i++) {\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 331,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_newDate - (maxDistributionDateShiftInDays * (1 days)) <= tokenDistributionDate);\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 331,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_newDate - (maxDistributionDateShiftInDays * (1 days)) <= tokenDistributionDate);\n",
          "message": "The arithmetic operator can underflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Dependence on predictable environment variable (SWC 116)",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(now < tokenDistributionDate);\n",
          "message": "A control flow decision is made based on The block.timestamp environment variable.\nThe block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-116"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 334,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint shift = tokenDistributionDate - _newDate;\n",
          "message": "The arithmetic operator can underflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 336,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<numberOfVestingPortions+1;i++) {\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 337,
          "vulnerability_to_line": null,
          "vulnerability_code": "            portionToUnlockingDate[i] = portionToUnlockingDate[i] + shift;\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.\nClassification: SWC-110"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [
        "SYMBOLIC EXECUTION TIMEOUT"
      ],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 368,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getPurchaseInformation(\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 375,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Purchase memory p = conversionIdToPurchase[_conversionId];\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint [] memory dates = new uint[](numberOfVestingPortions+1);\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 408,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i< numberOfVestingPortions+1; i++) {\n",
          "message": null
        }
      ]
    }
  }
}