{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool isActivated = false;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint numberOfConversions = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 159,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _inventory,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 161,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _erc20ContractAddress,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 162,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _campaignStartTime,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 163,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _campaignEndTime,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 164,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _numberOfTokensPerConverterAndReferralChain\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 165,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 166,
          "vulnerability_to_line": null,
          "vulnerability_code": "        contractor = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 167,
          "vulnerability_to_line": null,
          "vulnerability_code": "        inventoryAmount = _inventory;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 168,
          "vulnerability_to_line": null,
          "vulnerability_code": "        erc20ContractAddress = _erc20ContractAddress;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 137,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(block.timestamp >= campaignStartTime && block.timestamp <= campaignEndTime);\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 209,
          "vulnerability_to_line": null,
          "vulnerability_code": "        numberOfConversions++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_17"
      ],
      "vulnerability_findings": [
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 121,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint) converterToConversionId;\n",
          "message": "TwoKeyAirdropCampaign.converterToConversionId (TwoKeyAirdropCampaign.sol#121) is never initialized. It is used in:\n\t- getConverterBalance (TwoKeyAirdropCampaign.sol#281-290)\n\t- converterWithdraw (TwoKeyAirdropCampaign.sol#295-302)\n"
        },
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint) referrerTotalEarnings;\n",
          "message": "TwoKeyAirdropCampaign.referrerTotalEarnings (TwoKeyAirdropCampaign.sol#125) is never initialized. It is used in:\n\t- getReferrerBalanceAndTotalEarnings (TwoKeyAirdropCampaign.sol#260-263)\n"
        },
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 184,
          "vulnerability_to_line": 192,
          "vulnerability_code": "    function activateCampaign() external onlyContractor {\n\n        uint balance = IERC20(TWO_KEY_ECONOMY).balanceOf(address(this));\n\n        if(erc20ContractAddress == TWO_KEY_ECONOMY) {\n\n            require(balance == numberOfConversions * CONVERSION_FEE_2KEY + inventoryAmount);\n\n        } else {\n\n            require(balance == numberOfConversions * CONVERSION_FEE_2KEY);\n\n        }\n\n        isActivated = true;\n",
          "message": "TwoKeyAirdropCampaign.activateCampaign (TwoKeyAirdropCampaign.sol#184-192) uses a dangerous strict equality:\n\t- require(bool)(balance == numberOfConversions * CONVERSION_FEE_2KEY + inventoryAmount)\n\t- require(bool)(balance == numberOfConversions * CONVERSION_FEE_2KEY)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": 302,
          "vulnerability_code": "    function converterWithdraw() external {\n\n        uint conversionId = converterToConversionId[msg.sender];\n\n        Conversion memory c = conversions[conversionId];\n\n        require(c.state == ConversionState.APPROVED);\n\n        c.state = ConversionState.EXECUTED;\n\n        IERC20(erc20ContractAddress).transfer(msg.sender, numberOfTokensPerConverter); //this is going to be an erc20 transfer\n\n        conversions[conversionId] = c;\n",
          "message": "Reentrancy in TwoKeyAirdropCampaign.converterWithdraw (TwoKeyAirdropCampaign.sol#295-302):\n\tExternal calls:\n\t- IERC20(erc20ContractAddress).transfer(msg.sender,numberOfTokensPerConverter) (TwoKeyAirdropCampaign.sol#300)\n\tState variables written after the call(s):\n\t- conversions (TwoKeyAirdropCampaign.sol#301)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 308,
          "vulnerability_to_line": 312,
          "vulnerability_code": "    function referrerWithdraw() external {\n\n        require(referrerBalances[msg.sender] > 0);\n\n        IERC20(erc20ContractAddress).transfer(msg.sender, referrerBalances[msg.sender]);\n\n        referrerBalances[msg.sender] = 0;\n",
          "message": "Reentrancy in TwoKeyAirdropCampaign.referrerWithdraw (TwoKeyAirdropCampaign.sol#308-312):\n\tExternal calls:\n\t- IERC20(erc20ContractAddress).transfer(msg.sender,referrerBalances[msg.sender]) (TwoKeyAirdropCampaign.sol#310)\n\tState variables written after the call(s):\n\t- referrerBalances (TwoKeyAirdropCampaign.sol#311)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": 302,
          "vulnerability_code": "    function converterWithdraw() external {\n\n        uint conversionId = converterToConversionId[msg.sender];\n\n        Conversion memory c = conversions[conversionId];\n\n        require(c.state == ConversionState.APPROVED);\n\n        c.state = ConversionState.EXECUTED;\n\n        IERC20(erc20ContractAddress).transfer(msg.sender, numberOfTokensPerConverter); //this is going to be an erc20 transfer\n\n        conversions[conversionId] = c;\n",
          "message": "TwoKeyAirdropCampaign.converterWithdraw (TwoKeyAirdropCampaign.sol#295-302) does not use the value returned by external calls:\n\t-IERC20(erc20ContractAddress).transfer(msg.sender,numberOfTokensPerConverter) (TwoKeyAirdropCampaign.sol#300)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 308,
          "vulnerability_to_line": 312,
          "vulnerability_code": "    function referrerWithdraw() external {\n\n        require(referrerBalances[msg.sender] > 0);\n\n        IERC20(erc20ContractAddress).transfer(msg.sender, referrerBalances[msg.sender]);\n\n        referrerBalances[msg.sender] = 0;\n",
          "message": "TwoKeyAirdropCampaign.referrerWithdraw (TwoKeyAirdropCampaign.sol#308-312) does not use the value returned by external calls:\n\t-IERC20(erc20ContractAddress).transfer(msg.sender,referrerBalances[msg.sender]) (TwoKeyAirdropCampaign.sol#310)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 184,
          "vulnerability_to_line": 192,
          "vulnerability_code": "    function activateCampaign() external onlyContractor {\n\n        uint balance = IERC20(TWO_KEY_ECONOMY).balanceOf(address(this));\n\n        if(erc20ContractAddress == TWO_KEY_ECONOMY) {\n\n            require(balance == numberOfConversions * CONVERSION_FEE_2KEY + inventoryAmount);\n\n        } else {\n\n            require(balance == numberOfConversions * CONVERSION_FEE_2KEY);\n\n        }\n\n        isActivated = true;\n",
          "message": "Reentrancy in TwoKeyAirdropCampaign.activateCampaign (TwoKeyAirdropCampaign.sol#184-192):\n\tExternal calls:\n\t- balance = IERC20(TWO_KEY_ECONOMY).balanceOf(address(this)) (TwoKeyAirdropCampaign.sol#185)\n\tState variables written after the call(s):\n\t- isActivated (TwoKeyAirdropCampaign.sol#191)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": 50,
          "vulnerability_code": "    function approve(\n\n        address _spender,\n\n        uint256 _value\n\n    )\n\n    public\n",
          "message": "IERC20.approve (TwoKeyAirdropCampaign.sol#45-50) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _inventory,\n",
          "message": "Parameter '_inventory' of TwoKeyAirdropCampaign. (TwoKeyAirdropCampaign.sol#160) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 161,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _erc20ContractAddress,\n",
          "message": "Parameter '_erc20ContractAddress' of TwoKeyAirdropCampaign. (TwoKeyAirdropCampaign.sol#161) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 162,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _campaignStartTime,\n",
          "message": "Parameter '_campaignStartTime' of TwoKeyAirdropCampaign. (TwoKeyAirdropCampaign.sol#162) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 163,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _campaignEndTime,\n",
          "message": "Parameter '_campaignEndTime' of TwoKeyAirdropCampaign. (TwoKeyAirdropCampaign.sol#163) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 164,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _numberOfTokensPerConverterAndReferralChain\n",
          "message": "Parameter '_numberOfTokensPerConverterAndReferralChain' of TwoKeyAirdropCampaign. (TwoKeyAirdropCampaign.sol#164) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 260,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getReferrerBalanceAndTotalEarnings(address _referrer) external view returns (uint,uint) {\n",
          "message": "Parameter '_referrer' of TwoKeyAirdropCampaign.getReferrerBalanceAndTotalEarnings (TwoKeyAirdropCampaign.sol#260) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 281,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getConverterBalance(address _converter) external view returns (uint) {\n",
          "message": "Parameter '_converter' of TwoKeyAirdropCampaign.getConverterBalance (TwoKeyAirdropCampaign.sol#281) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant TWO_KEY_SINGLETONE_ADDRESSES = address(0);\n",
          "message": "TwoKeyAirdropCampaign.TWO_KEY_SINGLETONE_ADDRESSES (TwoKeyAirdropCampaign.sol#99) is never used in TwoKeyAirdropCampaign\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant TWO_KEY_ECONOMY = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant TWO_KEY_SINGLETONE_ADDRESSES = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool isActivated = false;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant TWO_KEY_ECONOMY = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant TWO_KEY_SINGLETONE_ADDRESSES = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address contractor;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint inventoryAmount;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address erc20ContractAddress;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint campaignStartTime;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 109,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint campaignEndTime;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint referralReward;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Conversion[] conversions;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint numberOfConversions = 0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 119,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint maxNumberOfConversions;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 121,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint) converterToConversionId;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint) referrerBalances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint) referrerTotalEarnings;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 127,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant CONVERSION_FEE_2KEY = 5;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 271,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Conversion memory conversion = conversions[conversionId];\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 242,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getContractInformations() external view returns (bytes) {\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": null,
          "vulnerability_code": "        maxNumberOfConversions = inventoryAmount / (2*_numberOfTokensPerConverterAndReferralChain);\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": null,
          "vulnerability_code": "        maxNumberOfConversions = inventoryAmount / (2*_numberOfTokensPerConverterAndReferralChain);\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.\nClassification: SWC-110"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "// File: ../sc_datasets/DAppSCAN/Solidified-2Key [14.10.2019]/contracts-de171eb80e9ce1c6566a5d782f0a0549ab0151ad/contracts/2key/TwoKeyConversionStates.sol\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 187,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(balance == numberOfConversions * CONVERSION_FEE_2KEY + inventoryAmount);\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 189,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(balance == numberOfConversions * CONVERSION_FEE_2KEY);\n",
          "message": null
        }
      ]
    }
  }
}