{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 400,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract TwoKeyVoteToken is StandardToken, Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 674,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint j=0; j<initialMemberTypes.length; j++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 759,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<memberTypeToMembers[memberType].length - 1; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 763,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if(flag == true || i== memberTypeToMembers[memberType].length - 2) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 772,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint j = memberId[targetMember]; j<members.length-1; j++){\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 805,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<memberTypes.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 895,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<allParticipants.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 578,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool initialized = false;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 301,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 302,
          "vulnerability_to_line": null,
          "vulnerability_code": "    owner = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 303,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 412,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _decentralizedNation) Ownable() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 413,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_decentralizedNation!= address(0));\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 414,
          "vulnerability_to_line": null,
          "vulnerability_code": "        decentralizedNation = _decentralizedNation;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 415,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 650,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 651,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _nationName,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 652,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _ipfsHashForConstitution,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 653,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _ipfsHashForDAOPublicInfo,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 654,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] founder,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 655,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32[] initialMemberTypes,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 656,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint[] limitPerType,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 657,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint[] rightsToCreateVoting,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 658,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _minimalNumberOfVotersForVotingCampaign,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 659,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _minimalPercentOfVotersForVotingCampaign,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 675,
          "vulnerability_to_line": null,
          "vulnerability_code": "            limitOfMembersPerType[initialMemberTypes[j]] = limitPerType[j];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 677,
          "vulnerability_to_line": null,
          "vulnerability_code": "                isMemberTypeEligibleToCreateVotingCampaign[initialMemberTypes[j]] = true;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 679,
          "vulnerability_to_line": null,
          "vulnerability_code": "                isMemberTypeEligibleToCreateVotingCampaign[initialMemberTypes[j]] = false;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 681,
          "vulnerability_to_line": null,
          "vulnerability_code": "            memberTypes.push(initialMemberTypes[j]);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 759,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<memberTypeToMembers[memberType].length - 1; i++) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 760,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if(memberTypeToMembers[memberType][i] == targetMember) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 763,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if(flag == true || i== memberTypeToMembers[memberType].length - 2) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 764,
          "vulnerability_to_line": null,
          "vulnerability_code": "                memberTypeToMembers[memberType][i] = memberTypeToMembers[memberType][i+1];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 764,
          "vulnerability_to_line": null,
          "vulnerability_code": "                memberTypeToMembers[memberType][i] = memberTypeToMembers[memberType][i+1];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 772,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint j = memberId[targetMember]; j<members.length-1; j++){\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 772,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint j = memberId[targetMember]; j<members.length-1; j++){\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 773,
          "vulnerability_to_line": null,
          "vulnerability_code": "            members[j] = members[j+1];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 773,
          "vulnerability_to_line": null,
          "vulnerability_code": "            members[j] = members[j+1];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 805,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<memberTypes.length; i++) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 806,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if(memberTypes[i] == memberType) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 823,
          "vulnerability_to_line": null,
          "vulnerability_code": "            Member memory m = members[i];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 674,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint j=0; j<initialMemberTypes.length; j++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 759,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<memberTypeToMembers[memberType].length - 1; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 772,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint j = memberId[targetMember]; j<members.length-1; j++){\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 805,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<memberTypes.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 822,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=1; i<length + 1; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 895,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<allParticipants.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 426,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_contractAddress != address(0), 'addContract zero');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 443,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(allowedContract(), 'onlyAllowedContracts');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 508,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_value <= balance, 'transferFrom balance');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 509,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_to != address(0), 'transferFrom zero');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 540,
          "vulnerability_to_line": null,
          "vulnerability_code": "        revert(\"totalSupply - not supported\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 548,
          "vulnerability_to_line": null,
          "vulnerability_code": "        revert(\"transfer - not supported\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 553,
          "vulnerability_to_line": null,
          "vulnerability_code": "        revert(\"approve - not supported\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 782,
          "vulnerability_to_line": null,
          "vulnerability_code": "        members.length--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 674,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint j=0; j<initialMemberTypes.length; j++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 719,
          "vulnerability_to_line": null,
          "vulnerability_code": "        numOfMembers++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 753,
          "vulnerability_to_line": null,
          "vulnerability_code": "        numOfMembers++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 759,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<memberTypeToMembers[memberType].length - 1; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 772,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint j = memberId[targetMember]; j<members.length-1; j++){\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 805,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<memberTypes.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 822,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=1; i<length + 1; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 876,
          "vulnerability_to_line": null,
          "vulnerability_code": "        numberOfVotingCamapignsAndPetitions++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 895,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<allParticipants.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 902,
          "vulnerability_to_line": null,
          "vulnerability_code": "                campaign.votesYes++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 906,
          "vulnerability_to_line": null,
          "vulnerability_code": "                campaign.votesNo++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_121"
      ],
      "vulnerability_findings": [
        {
          "name": "shadowing-state",
          "vulnerability_from_line": 406,
          "vulnerability_to_line": 407,
          "vulnerability_code": "    string public name = 'TwoKeyVote';\n",
          "message": "TwoKeyVoteToken.name (DecentralizedNation.sol#406-407) shadows:\n\t- StandardToken.name (DecentralizedNation.sol#118)\n"
        },
        {
          "name": "shadowing-state",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": 408,
          "vulnerability_code": "    string public symbol = '2KV';\n",
          "message": "TwoKeyVoteToken.symbol (DecentralizedNation.sol#407-408) shadows:\n\t- StandardToken.symbol (DecentralizedNation.sol#119)\n"
        },
        {
          "name": "shadowing-state",
          "vulnerability_from_line": 408,
          "vulnerability_to_line": 409,
          "vulnerability_code": "    uint8 public decimals = 18;\n",
          "message": "TwoKeyVoteToken.decimals (DecentralizedNation.sol#408-409) shadows:\n\t- StandardToken.decimals (DecentralizedNation.sol#120)\n"
        },
        {
          "name": "shadowing-state",
          "vulnerability_from_line": 403,
          "vulnerability_to_line": 404,
          "vulnerability_code": "    mapping (address => mapping (address => uint256)) internal allowed;\n",
          "message": "TwoKeyVoteToken.allowed (DecentralizedNation.sol#403-404) shadows:\n\t- StandardToken.allowed (DecentralizedNation.sol#122)\n"
        },
        {
          "name": "shadowing-state",
          "vulnerability_from_line": 404,
          "vulnerability_to_line": 405,
          "vulnerability_code": "    mapping(address => uint256) internal balances;\n",
          "message": "TwoKeyVoteToken.balances (DecentralizedNation.sol#404-405) shadows:\n\t- StandardToken.balances (DecentralizedNation.sol#123)\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 376,
          "vulnerability_to_line": 391,
          "vulnerability_code": "    function at(address _addr) internal view returns (bytes o_code) {\n\n        assembly {\n\n        // retrieve the size of the code, this needs assembly\n\n            let size := extcodesize(_addr)\n\n        // allocate output byte array - this could also be done without assembly\n\n        // by using o_code = new bytes(size)\n\n            o_code := mload(0x40)\n\n        // new \"memory end\" including padding\n\n            mstore(0x40, add(o_code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n\n        // store length in memory\n\n            mstore(o_code, size)\n\n        // actually retrieve the code, this needs assembly\n\n            extcodecopy(_addr, add(o_code, 0x20), 0, size)\n\n        }\n\n    }\n",
          "message": "GetCode.at (DecentralizedNation.sol#376-391) is declared view but contains assembly code\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 722,
          "vulnerability_to_line": 756,
          "vulnerability_code": "    function addMember(\n\n        address _memberAddress,\n\n        bytes32 _memberType)\n\n    internal {\n\n        if(members.length > 0) {\n\n            require(ITwoKeyRegistry(twoKeyRegistryContract).checkIfUserExists(_memberAddress));\n\n        }\n\n        if(initialized) {\n\n            require(limitOfMembersPerType[_memberType] > memberTypeToMembers[_memberType].length);\n\n        }\n\n\n\n        bytes32 memberUsername;\n\n        bytes32 memberFullName;\n\n        bytes32 memberEmail;\n\n\n\n        (memberUsername,memberFullName,memberEmail) = ITwoKeyRegistry(twoKeyRegistryContract).getUserData(_memberAddress);\n\n        require(checkIfMemberTypeExists(_memberType) || _memberType == bytes32(0));\n\n        Member memory m = Member({\n\n            memberAddress: _memberAddress,\n\n            username: memberUsername,\n\n            fullName: memberFullName,\n\n            email: memberEmail,\n\n            memberType: _memberType\n\n        });\n\n\n\n        members.push(m);\n\n        memberAddressToMemberType[_memberAddress] = _memberType;\n\n        memberId[_memberAddress] = numOfMembers;\n\n        memberTypeToMembers[_memberType].push(_memberAddress);\n\n        votingPoints[_memberAddress] = 1000000000000000000;\n\n        totalNumberOfCampaigns[_memberAddress] = numberOfVotingCamapignsAndPetitions;\n\n        numOfMembers++;\n\n    }\n\n\n",
          "message": "Reentrancy in DecentralizedNation.addMember (DecentralizedNation.sol#722-756):\n\tExternal calls:\n\t- require(bool)(ITwoKeyRegistry(twoKeyRegistryContract).checkIfUserExists(_memberAddress)) (DecentralizedNation.sol#727-728)\n\t- (memberUsername,memberFullName,memberEmail) = ITwoKeyRegistry(twoKeyRegistryContract).getUserData(_memberAddress) (DecentralizedNation.sol#737-738)\n\tState variables written after the call(s):\n\t- memberTypeToMembers (DecentralizedNation.sol#750-751)\n\t- members (DecentralizedNation.sol#747-748)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 696,
          "vulnerability_to_line": 722,
          "vulnerability_code": "    function addMembersByFounders(address _memberAddress, bytes32 _memberType) public onlyInitialFounder {\n\n        require(limitOfMembersPerType[_memberType] > memberTypeToMembers[_memberType].length);\n\n\n\n        bytes32 memberUsername;\n\n        bytes32 memberFullName;\n\n        bytes32 memberEmail;\n\n\n\n        (memberUsername,memberFullName,memberEmail) = ITwoKeyRegistry(twoKeyRegistryContract).getUserData(_memberAddress);\n\n        require(checkIfMemberTypeExists(_memberType) || _memberType == bytes32(0));\n\n        Member memory m = Member({\n\n            memberAddress: _memberAddress,\n\n            username: memberUsername,\n\n            fullName: memberFullName,\n\n            email: memberEmail,\n\n            memberType: _memberType\n\n            });\n\n\n\n        members.push(m);\n\n        memberAddressToMemberType[_memberAddress] = _memberType;\n\n        memberId[_memberAddress] = numOfMembers;\n\n        memberTypeToMembers[_memberType].push(_memberAddress);\n\n        votingPoints[_memberAddress] = 1000000000000000000;\n\n        totalNumberOfCampaigns[_memberAddress] = numberOfVotingCamapignsAndPetitions;\n\n        numOfMembers++;\n\n    }\n\n\n",
          "message": "Reentrancy in DecentralizedNation.addMembersByFounders (DecentralizedNation.sol#696-722):\n\tExternal calls:\n\t- (memberUsername,memberFullName,memberEmail) = ITwoKeyRegistry(twoKeyRegistryContract).getUserData(_memberAddress) (DecentralizedNation.sol#703-704)\n\tState variables written after the call(s):\n\t- memberTypeToMembers (DecentralizedNation.sol#716-717)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 650,
          "vulnerability_to_line": 695,
          "vulnerability_code": "    constructor(\n\n        string _nationName,\n\n        string _ipfsHashForConstitution,\n\n        string _ipfsHashForDAOPublicInfo,\n\n        address[] founder,\n\n        bytes32[] initialMemberTypes,\n\n        uint[] limitPerType,\n\n        uint[] rightsToCreateVoting,\n\n        uint _minimalNumberOfVotersForVotingCampaign,\n\n        uint _minimalPercentOfVotersForVotingCampaign,\n\n        uint _minimalNumberOfVotersForPetitioningCampaign,\n\n        uint _minimalPercentOfVotersForPetitioningCampaign,\n\n        address _twoKeyRegistry\n\n    ) public {\n\n        require(limitPerType.length == initialMemberTypes.length);\n\n        initialFounder = founder[0];\n\n        memberTypes.push(bytes32(\"FOUNDERS\"));\n\n        isMemberTypeEligibleToCreateVotingCampaign[bytes32(\"FOUNDERS\")] = true;\n\n        twoKeyRegistryContract = _twoKeyRegistry;\n\n        addMember(0,bytes32(0));\n\n        addMember(founder[0], bytes32(\"FOUNDERS\"));\n\n\n\n        votingToken = new TwoKeyVoteToken(address(this));\n\n\n\n        for(uint j=0; j<initialMemberTypes.length; j++) {\n\n            limitOfMembersPerType[initialMemberTypes[j]] = limitPerType[j];\n\n            if(rightsToCreateVoting[j] == 1){\n\n                isMemberTypeEligibleToCreateVotingCampaign[initialMemberTypes[j]] = true;\n\n            } else {\n\n                isMemberTypeEligibleToCreateVotingCampaign[initialMemberTypes[j]] = false;\n\n            }\n\n            memberTypes.push(initialMemberTypes[j]);\n\n        }\n\n\n\n        minimalNumberOfPositiveVotersForVotingCampaign = _minimalNumberOfVotersForVotingCampaign;\n\n        minimalPercentOfVotersForVotingCampaign = _minimalPercentOfVotersForVotingCampaign;\n\n        minimalNumberOfVotersForPetitioningCampaign = _minimalNumberOfVotersForPetitioningCampaign;\n\n        minimalPercentOfVotersForPetitioningCampaign = _minimalPercentOfVotersForPetitioningCampaign;\n\n\n\n        nationName = _nationName;\n\n        ipfsForConstitution = _ipfsHashForConstitution;\n\n        ipfsHashForDAOPublicInfo = _ipfsHashForDAOPublicInfo;\n\n        initialized = true;\n\n    }\n\n\n",
          "message": "Reentrancy in DecentralizedNation.constructor (DecentralizedNation.sol#650-695):\n\tExternal calls:\n\t- addMember(0,bytes32(0)) (DecentralizedNation.sol#669-670)\n\t- addMember(founder[0],bytes32(FOUNDERS)) (DecentralizedNation.sol#670-671)\n\tState variables written after the call(s):\n\t- initialized (DecentralizedNation.sol#692-693)\n\t- limitOfMembersPerType (DecentralizedNation.sol#675-676)\n\t- memberTypeToMembers (DecentralizedNation.sol#670-671)\n\t- memberTypes (DecentralizedNation.sol#674-684)\n\t- memberTypes (DecentralizedNation.sol#681-682)\n\t- members (DecentralizedNation.sol#670-671)\n\t- numOfMembers (DecentralizedNation.sol#670-671)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 886,
          "vulnerability_to_line": 914,
          "vulnerability_code": "    function executeVoting(uint campaign_id, bytes signature) public returns (uint) {\n\n\n\n        Campaign memory campaign = allCampaigns[campaign_id];\n\n\n\n        require(campaign.finished == false);\n\n//        require(block.timestamp > nvc.votingCampaignLengthInDays);\n\n        ITwoKeyWeightedVoteContract(campaign.votingContract).transferSig(signature);\n\n        address [] memory allParticipants = ITwoKeyWeightedVoteContract(campaign.votingContract).getAllVoters();\n\n\n\n        for(uint i=0; i<allParticipants.length; i++) {\n\n            bool vote;\n\n            uint power;\n\n\n\n            (vote,power) = ITwoKeyWeightedVoteContract(campaign.votingContract).getVoteAndChoicePerAddress(allParticipants[i]);\n\n\n\n            if(vote == true) {\n\n                campaign.votesYes++;\n\n                campaign.votingResultForYes += int(power);\n\n            }\n\n            if(vote == false){\n\n                campaign.votesNo++;\n\n                campaign.votingResultForNo += int(power);\n\n            }\n\n        }\n\n        campaign.finished = true;\n\n        allCampaigns[campaign_id] = campaign;\n\n    }\n\n\n",
          "message": "Reentrancy in DecentralizedNation.executeVoting (DecentralizedNation.sol#886-914):\n\tExternal calls:\n\t- ITwoKeyWeightedVoteContract(campaign.votingContract).transferSig(signature) (DecentralizedNation.sol#892-893)\n\t- allParticipants = ITwoKeyWeightedVoteContract(campaign.votingContract).getAllVoters() (DecentralizedNation.sol#893-894)\n\tState variables written after the call(s):\n\t- allCampaigns (DecentralizedNation.sol#911-912)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 497,
          "vulnerability_to_line": 517,
          "vulnerability_code": "    function transferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _value\n\n    )\n\n    public\n\n//        onlyOwner\n\n    returns (bool)\n\n    {\n\n        checkBalance(_from);\n\n        uint balance = balanceOf(_from);\n\n        require(_value <= balance, 'transferFrom balance');\n\n        require(_to != address(0), 'transferFrom zero');\n\n        //TODO : reduce balance on contract\n\n        balances[_from] = balances[_from].sub(_value);\n\n        balances[_to] = balances[_to].add(_value);\n\n        emit Transfer(_from, _to, _value);\n\n        return true;\n\n    }\n\n\n",
          "message": "Reentrancy in TwoKeyVoteToken.transferFrom (DecentralizedNation.sol#497-517):\n\tExternal calls:\n\t- checkBalance(_from) (DecentralizedNation.sol#506-507)\n\t- balance = balanceOf(_from) (DecentralizedNation.sol#507-508)\n\tState variables written after the call(s):\n\t- balances (DecentralizedNation.sol#511-512)\n\t- balances (DecentralizedNation.sol#512-513)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 886,
          "vulnerability_to_line": 914,
          "vulnerability_code": "    function executeVoting(uint campaign_id, bytes signature) public returns (uint) {\n\n\n\n        Campaign memory campaign = allCampaigns[campaign_id];\n\n\n\n        require(campaign.finished == false);\n\n//        require(block.timestamp > nvc.votingCampaignLengthInDays);\n\n        ITwoKeyWeightedVoteContract(campaign.votingContract).transferSig(signature);\n\n        address [] memory allParticipants = ITwoKeyWeightedVoteContract(campaign.votingContract).getAllVoters();\n\n\n\n        for(uint i=0; i<allParticipants.length; i++) {\n\n            bool vote;\n\n            uint power;\n\n\n\n            (vote,power) = ITwoKeyWeightedVoteContract(campaign.votingContract).getVoteAndChoicePerAddress(allParticipants[i]);\n\n\n\n            if(vote == true) {\n\n                campaign.votesYes++;\n\n                campaign.votingResultForYes += int(power);\n\n            }\n\n            if(vote == false){\n\n                campaign.votesNo++;\n\n                campaign.votingResultForNo += int(power);\n\n            }\n\n        }\n\n        campaign.finished = true;\n\n        allCampaigns[campaign_id] = campaign;\n\n    }\n\n\n",
          "message": "DecentralizedNation.executeVoting (DecentralizedNation.sol#886-914) does not use the value returned by external calls:\n\t-ITwoKeyWeightedVoteContract(campaign.votingContract).transferSig(signature) (DecentralizedNation.sol#892-893)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 899,
          "vulnerability_to_line": 900,
          "vulnerability_code": "            (vote,power) = ITwoKeyWeightedVoteContract(campaign.votingContract).getVoteAndChoicePerAddress(allParticipants[i]);\n",
          "message": "DecentralizedNation.executeVoting has external calls inside a loop:\n\t- (vote,power) = ITwoKeyWeightedVoteContract(campaign.votingContract).getVoteAndChoicePerAddress(allParticipants[i]) (DecentralizedNation.sol#899-900)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 722,
          "vulnerability_to_line": 756,
          "vulnerability_code": "    function addMember(\n\n        address _memberAddress,\n\n        bytes32 _memberType)\n\n    internal {\n\n        if(members.length > 0) {\n\n            require(ITwoKeyRegistry(twoKeyRegistryContract).checkIfUserExists(_memberAddress));\n\n        }\n\n        if(initialized) {\n\n            require(limitOfMembersPerType[_memberType] > memberTypeToMembers[_memberType].length);\n\n        }\n\n\n\n        bytes32 memberUsername;\n\n        bytes32 memberFullName;\n\n        bytes32 memberEmail;\n\n\n\n        (memberUsername,memberFullName,memberEmail) = ITwoKeyRegistry(twoKeyRegistryContract).getUserData(_memberAddress);\n\n        require(checkIfMemberTypeExists(_memberType) || _memberType == bytes32(0));\n\n        Member memory m = Member({\n\n            memberAddress: _memberAddress,\n\n            username: memberUsername,\n\n            fullName: memberFullName,\n\n            email: memberEmail,\n\n            memberType: _memberType\n\n        });\n\n\n\n        members.push(m);\n\n        memberAddressToMemberType[_memberAddress] = _memberType;\n\n        memberId[_memberAddress] = numOfMembers;\n\n        memberTypeToMembers[_memberType].push(_memberAddress);\n\n        votingPoints[_memberAddress] = 1000000000000000000;\n\n        totalNumberOfCampaigns[_memberAddress] = numberOfVotingCamapignsAndPetitions;\n\n        numOfMembers++;\n\n    }\n\n\n",
          "message": "Reentrancy in DecentralizedNation.addMember (DecentralizedNation.sol#722-756):\n\tExternal calls:\n\t- require(bool)(ITwoKeyRegistry(twoKeyRegistryContract).checkIfUserExists(_memberAddress)) (DecentralizedNation.sol#727-728)\n\t- (memberUsername,memberFullName,memberEmail) = ITwoKeyRegistry(twoKeyRegistryContract).getUserData(_memberAddress) (DecentralizedNation.sol#737-738)\n\tState variables written after the call(s):\n\t- memberAddressToMemberType (DecentralizedNation.sol#748-749)\n\t- memberId (DecentralizedNation.sol#749-750)\n\t- numOfMembers (DecentralizedNation.sol#753-754)\n\t- totalNumberOfCampaigns (DecentralizedNation.sol#752-753)\n\t- votingPoints (DecentralizedNation.sol#751-752)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 696,
          "vulnerability_to_line": 722,
          "vulnerability_code": "    function addMembersByFounders(address _memberAddress, bytes32 _memberType) public onlyInitialFounder {\n\n        require(limitOfMembersPerType[_memberType] > memberTypeToMembers[_memberType].length);\n\n\n\n        bytes32 memberUsername;\n\n        bytes32 memberFullName;\n\n        bytes32 memberEmail;\n\n\n\n        (memberUsername,memberFullName,memberEmail) = ITwoKeyRegistry(twoKeyRegistryContract).getUserData(_memberAddress);\n\n        require(checkIfMemberTypeExists(_memberType) || _memberType == bytes32(0));\n\n        Member memory m = Member({\n\n            memberAddress: _memberAddress,\n\n            username: memberUsername,\n\n            fullName: memberFullName,\n\n            email: memberEmail,\n\n            memberType: _memberType\n\n            });\n\n\n\n        members.push(m);\n\n        memberAddressToMemberType[_memberAddress] = _memberType;\n\n        memberId[_memberAddress] = numOfMembers;\n\n        memberTypeToMembers[_memberType].push(_memberAddress);\n\n        votingPoints[_memberAddress] = 1000000000000000000;\n\n        totalNumberOfCampaigns[_memberAddress] = numberOfVotingCamapignsAndPetitions;\n\n        numOfMembers++;\n\n    }\n\n\n",
          "message": "Reentrancy in DecentralizedNation.addMembersByFounders (DecentralizedNation.sol#696-722):\n\tExternal calls:\n\t- (memberUsername,memberFullName,memberEmail) = ITwoKeyRegistry(twoKeyRegistryContract).getUserData(_memberAddress) (DecentralizedNation.sol#703-704)\n\tState variables written after the call(s):\n\t- memberAddressToMemberType (DecentralizedNation.sol#714-715)\n\t- memberId (DecentralizedNation.sol#715-716)\n\t- members (DecentralizedNation.sol#713-714)\n\t- numOfMembers (DecentralizedNation.sol#719-720)\n\t- totalNumberOfCampaigns (DecentralizedNation.sol#718-719)\n\t- votingPoints (DecentralizedNation.sol#717-718)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 470,
          "vulnerability_to_line": 483,
          "vulnerability_code": "    function checkBalance(address _owner) internal returns (uint256){\n\n        if (visited[_owner]) {\n\n            return balances[_owner];\n\n        }\n\n\n\n        visited[_owner] = true;\n\n        uint id = IDecentralizedNation(decentralizedNation).getMemberid(_owner);\n\n        if(id != 0) {\n\n             balances[_owner] = IDecentralizedNation(decentralizedNation).getMembersVotingPoints(_owner);\n\n        }\n\n        return balances[_owner];\n\n    }\n\n\n",
          "message": "Reentrancy in TwoKeyVoteToken.checkBalance (DecentralizedNation.sol#470-483):\n\tExternal calls:\n\t- id = IDecentralizedNation(decentralizedNation).getMemberid(_owner) (DecentralizedNation.sol#476-477)\n\t- balances[_owner] = IDecentralizedNation(decentralizedNation).getMembersVotingPoints(_owner) (DecentralizedNation.sol#478-479)\n\tState variables written after the call(s):\n\t- balances (DecentralizedNation.sol#478-479)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 650,
          "vulnerability_to_line": 695,
          "vulnerability_code": "    constructor(\n\n        string _nationName,\n\n        string _ipfsHashForConstitution,\n\n        string _ipfsHashForDAOPublicInfo,\n\n        address[] founder,\n\n        bytes32[] initialMemberTypes,\n\n        uint[] limitPerType,\n\n        uint[] rightsToCreateVoting,\n\n        uint _minimalNumberOfVotersForVotingCampaign,\n\n        uint _minimalPercentOfVotersForVotingCampaign,\n\n        uint _minimalNumberOfVotersForPetitioningCampaign,\n\n        uint _minimalPercentOfVotersForPetitioningCampaign,\n\n        address _twoKeyRegistry\n\n    ) public {\n\n        require(limitPerType.length == initialMemberTypes.length);\n\n        initialFounder = founder[0];\n\n        memberTypes.push(bytes32(\"FOUNDERS\"));\n\n        isMemberTypeEligibleToCreateVotingCampaign[bytes32(\"FOUNDERS\")] = true;\n\n        twoKeyRegistryContract = _twoKeyRegistry;\n\n        addMember(0,bytes32(0));\n\n        addMember(founder[0], bytes32(\"FOUNDERS\"));\n\n\n\n        votingToken = new TwoKeyVoteToken(address(this));\n\n\n\n        for(uint j=0; j<initialMemberTypes.length; j++) {\n\n            limitOfMembersPerType[initialMemberTypes[j]] = limitPerType[j];\n\n            if(rightsToCreateVoting[j] == 1){\n\n                isMemberTypeEligibleToCreateVotingCampaign[initialMemberTypes[j]] = true;\n\n            } else {\n\n                isMemberTypeEligibleToCreateVotingCampaign[initialMemberTypes[j]] = false;\n\n            }\n\n            memberTypes.push(initialMemberTypes[j]);\n\n        }\n\n\n\n        minimalNumberOfPositiveVotersForVotingCampaign = _minimalNumberOfVotersForVotingCampaign;\n\n        minimalPercentOfVotersForVotingCampaign = _minimalPercentOfVotersForVotingCampaign;\n\n        minimalNumberOfVotersForPetitioningCampaign = _minimalNumberOfVotersForPetitioningCampaign;\n\n        minimalPercentOfVotersForPetitioningCampaign = _minimalPercentOfVotersForPetitioningCampaign;\n\n\n\n        nationName = _nationName;\n\n        ipfsForConstitution = _ipfsHashForConstitution;\n\n        ipfsHashForDAOPublicInfo = _ipfsHashForDAOPublicInfo;\n\n        initialized = true;\n\n    }\n\n\n",
          "message": "Reentrancy in DecentralizedNation.constructor (DecentralizedNation.sol#650-695):\n\tExternal calls:\n\t- addMember(0,bytes32(0)) (DecentralizedNation.sol#669-670)\n\t- addMember(founder[0],bytes32(FOUNDERS)) (DecentralizedNation.sol#670-671)\n\tState variables written after the call(s):\n\t- ipfsForConstitution (DecentralizedNation.sol#690-691)\n\t- ipfsHashForDAOPublicInfo (DecentralizedNation.sol#691-692)\n\t- isMemberTypeEligibleToCreateVotingCampaign (DecentralizedNation.sol#677-678)\n\t- isMemberTypeEligibleToCreateVotingCampaign (DecentralizedNation.sol#679-680)\n\t- memberAddressToMemberType (DecentralizedNation.sol#670-671)\n\t- memberId (DecentralizedNation.sol#670-671)\n\t- minimalNumberOfPositiveVotersForVotingCampaign (DecentralizedNation.sol#684-685)\n\t- minimalNumberOfVotersForPetitioningCampaign (DecentralizedNation.sol#686-687)\n\t- minimalPercentOfVotersForPetitioningCampaign (DecentralizedNation.sol#687-688)\n\t- minimalPercentOfVotersForVotingCampaign (DecentralizedNation.sol#685-686)\n\t- nationName (DecentralizedNation.sol#689-690)\n\t- totalNumberOfCampaigns (DecentralizedNation.sol#670-671)\n\t- votingPoints (DecentralizedNation.sol#670-671)\n\t- votingToken (DecentralizedNation.sol#672-673)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 847,
          "vulnerability_to_line": 879,
          "vulnerability_code": "    function startCampagin(\n\n        string description,\n\n        uint votingCampaignLengthInDays,\n\n        address twoKeyWeightedVoteContract,\n\n        uint flag //if 0 then voting else petitioning\n\n    ) public {\n\n        require(memberId[msg.sender] != 0);\n\n        bytes32 _campaignType;\n\n        if(flag == 0) {\n\n            _campaignType = bytes32(\"VOTING\");\n\n        } else {\n\n            _campaignType = bytes32(\"PETITIONING\");\n\n        }\n\n\n\n        Campaign memory cmp = Campaign({\n\n            votingReason: description,\n\n            finished: false,\n\n            votesYes: 0,\n\n            votesNo: 0,\n\n            votingResultForYes: 0,\n\n            votingResultForNo: 0,\n\n            votingCampaignLengthInDays: votingCampaignLengthInDays,\n\n            campaignType: _campaignType,\n\n            votingContract: twoKeyWeightedVoteContract\n\n        });\n\n\n\n        votingContractToCampaign[twoKeyWeightedVoteContract] = cmp;\n\n        ITwoKeyWeightedVoteContract(twoKeyWeightedVoteContract).setValid();\n\n        allCampaigns.push(cmp);\n\n        numberOfVotingCamapignsAndPetitions++;\n\n    }\n\n\n",
          "message": "Reentrancy in DecentralizedNation.startCampagin (DecentralizedNation.sol#847-879):\n\tExternal calls:\n\t- ITwoKeyWeightedVoteContract(twoKeyWeightedVoteContract).setValid() (DecentralizedNation.sol#874-875)\n\tState variables written after the call(s):\n\t- allCampaigns (DecentralizedNation.sol#875-876)\n\t- numberOfVotingCamapignsAndPetitions (DecentralizedNation.sol#876-877)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 376,
          "vulnerability_to_line": 391,
          "vulnerability_code": "    function at(address _addr) internal view returns (bytes o_code) {\n\n        assembly {\n\n        // retrieve the size of the code, this needs assembly\n\n            let size := extcodesize(_addr)\n\n        // allocate output byte array - this could also be done without assembly\n\n        // by using o_code = new bytes(size)\n\n            o_code := mload(0x40)\n\n        // new \"memory end\" including padding\n\n            mstore(0x40, add(o_code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n\n        // store length in memory\n\n            mstore(o_code, size)\n\n        // actually retrieve the code, this needs assembly\n\n            extcodecopy(_addr, add(o_code, 0x20), 0, size)\n\n        }\n\n    }\n",
          "message": "GetCode.at uses assembly (DecentralizedNation.sol#376-391)\n\t- DecentralizedNation.sol#377-391\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 120,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint8 public decimals;\n",
          "message": "StandardToken.decimals should be constant (DecentralizedNation.sol#120)\nStandardToken.name should be constant (DecentralizedNation.sol#118)\nStandardToken.symbol should be constant (DecentralizedNation.sol#119)\nStandardToken.totalSupply_ should be constant (DecentralizedNation.sol#117)\nTwoKeyVoteToken.decimals should be constant (DecentralizedNation.sol#408-409)\nTwoKeyVoteToken.name should be constant (DecentralizedNation.sol#406-407)\nTwoKeyVoteToken.symbol should be constant (DecentralizedNation.sol#407-408)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getDescription() public view returns(string);\n",
          "message": "ITwoKeyWeightedVoteContract.getDescription (DecentralizedNation.sol#6) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferSig(bytes sig) public returns (address[]);\n",
          "message": "ITwoKeyWeightedVoteContract.transferSig (DecentralizedNation.sol#7) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setValid() public;\n",
          "message": "ITwoKeyWeightedVoteContract.setValid (DecentralizedNation.sol#8) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getDynamicData() public view returns (uint,uint,uint,uint,uint,uint);\n",
          "message": "ITwoKeyWeightedVoteContract.getDynamicData (DecentralizedNation.sol#9) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getHowMuchAddressPutPower(address add) public view returns (uint);\n",
          "message": "ITwoKeyWeightedVoteContract.getHowMuchAddressPutPower (DecentralizedNation.sol#10) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getVoteAndChoicePerAddress(address voter) public view returns (bool, uint);\n",
          "message": "ITwoKeyWeightedVoteContract.getVoteAndChoicePerAddress (DecentralizedNation.sol#11) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAllVoters() public view returns (address[]);\n",
          "message": "ITwoKeyWeightedVoteContract.getAllVoters (DecentralizedNation.sol#12) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function checkIfUserExists(address _userAddress) public view returns (bool);\n",
          "message": "ITwoKeyRegistry.checkIfUserExists (DecentralizedNation.sol#20) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getUserData(address _user) public view returns (bytes32,bytes32,bytes32);\n",
          "message": "ITwoKeyRegistry.getUserData (DecentralizedNation.sol#21) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 234,
          "vulnerability_to_line": 236,
          "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return totalSupply_;\n",
          "message": "StandardToken.totalSupply (DecentralizedNation.sol#234-236) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 539,
          "vulnerability_to_line": 544,
          "vulnerability_code": "    function totalSupply() public view returns (uint256) {\n\n        revert(\"totalSupply - not supported\");\n\n        return 0;\n\n    }\n\n\n",
          "message": "TwoKeyVoteToken.totalSupply (DecentralizedNation.sol#539-544) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
          "message": "ERC20Basic.totalSupply (DecentralizedNation.sol#90) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 547,
          "vulnerability_to_line": 552,
          "vulnerability_code": "    function transfer(address, uint256) public returns (bool) {\n\n        revert(\"transfer - not supported\");\n\n        return false;\n\n    }\n\n\n",
          "message": "TwoKeyVoteToken.transfer (DecentralizedNation.sol#547-552) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 92,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool);\n",
          "message": "ERC20Basic.transfer (DecentralizedNation.sol#92) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 243,
          "vulnerability_to_line": 251,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n\n    require(_value <= balances[msg.sender]);\n\n    require(_to != address(0));\n\n\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    emit Transfer(msg.sender, _to, _value);\n\n    return true;\n",
          "message": "StandardToken.transfer (DecentralizedNation.sol#243-251) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address _ocwner, address _spender) public view returns (uint256);\n",
          "message": "ERC20Basic.allowance (DecentralizedNation.sol#93) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 523,
          "vulnerability_to_line": 534,
          "vulnerability_code": "    function allowance(\n\n        address _owner,\n\n        address _spender\n\n    )\n\n    public\n\n    view\n\n    returns (uint256)\n\n    {\n\n        return balanceOf(_owner);\n\n    }\n\n\n",
          "message": "TwoKeyVoteToken.allowance (DecentralizedNation.sol#523-534) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": 181,
          "vulnerability_code": "  function allowance(\n\n    address _owner,\n\n    address _spender\n\n   )\n\n    public\n\n    view\n\n    returns (uint256)\n\n  {\n\n    return allowed[_owner][_spender];\n",
          "message": "StandardToken.allowance (DecentralizedNation.sol#172-181) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": 164,
          "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n\n    allowed[msg.sender][_spender] = _value;\n\n    emit Approval(msg.sender, _spender, _value);\n\n    return true;\n",
          "message": "StandardToken.approve (DecentralizedNation.sol#160-164) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 552,
          "vulnerability_to_line": 556,
          "vulnerability_code": "    function approve(address, uint256) public returns (bool) {\n\n        revert(\"approve - not supported\");\n\n        return false;\n\n    }\n",
          "message": "TwoKeyVoteToken.approve (DecentralizedNation.sol#552-556) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address spender, uint tokens) public returns (bool success);\n",
          "message": "ERC20Basic.approve (DecentralizedNation.sol#94) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n",
          "message": "ERC20Basic.transferFrom (DecentralizedNation.sol#95) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 497,
          "vulnerability_to_line": 517,
          "vulnerability_code": "    function transferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _value\n\n    )\n\n    public\n\n//        onlyOwner\n\n    returns (bool)\n\n    {\n\n        checkBalance(_from);\n\n        uint balance = balanceOf(_from);\n\n        require(_value <= balance, 'transferFrom balance');\n\n        require(_to != address(0), 'transferFrom zero');\n\n        //TODO : reduce balance on contract\n\n        balances[_from] = balances[_from].sub(_value);\n\n        balances[_to] = balances[_to].add(_value);\n\n        emit Transfer(_from, _to, _value);\n\n        return true;\n\n    }\n\n\n",
          "message": "TwoKeyVoteToken.transferFrom (DecentralizedNation.sol#497-517) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 132,
          "vulnerability_to_line": 149,
          "vulnerability_code": "  function transferFrom(\n\n    address _from,\n\n    address _to,\n\n    uint256 _value\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(_value <= balances[_from]);\n\n    require(_value <= allowed[_from][msg.sender]);\n\n    require(_to != address(0));\n\n\n\n    balances[_from] = balances[_from].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n    emit Transfer(_from, _to, _value);\n\n    return true;\n",
          "message": "StandardToken.transferFrom (DecentralizedNation.sol#132-149) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 192,
          "vulnerability_to_line": 203,
          "vulnerability_code": "  function increaseApproval(\n\n    address _spender,\n\n    uint256 _addedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    allowed[msg.sender][_spender] = (\n\n      allowed[msg.sender][_spender].add(_addedValue));\n\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
          "message": "StandardToken.increaseApproval (DecentralizedNation.sol#192-203) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 214,
          "vulnerability_to_line": 229,
          "vulnerability_code": "  function decreaseApproval(\n\n    address _spender,\n\n    uint256 _subtractedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    uint256 oldValue = allowed[msg.sender][_spender];\n\n    if (_subtractedValue >= oldValue) {\n\n      allowed[msg.sender][_spender] = 0;\n\n    } else {\n\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\n    }\n\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
          "message": "StandardToken.decreaseApproval (DecentralizedNation.sol#214-229) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 319,
          "vulnerability_to_line": 322,
          "vulnerability_code": "  function renounceOwnership() public onlyOwner {\n\n    emit OwnershipRenounced(owner);\n\n    owner = address(0);\n",
          "message": "Ownable.renounceOwnership (DecentralizedNation.sol#319-322) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 328,
          "vulnerability_to_line": 330,
          "vulnerability_code": "  function transferOwnership(address _newOwner) public onlyOwner {\n\n    _transferOwnership(_newOwner);\n",
          "message": "Ownable.transferOwnership (DecentralizedNation.sol#328-330) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 349,
          "vulnerability_to_line": 354,
          "vulnerability_code": "    function getMembersVotingPoints(\n\n        address _memberAddress\n\n    )\n\n    public\n\n    view\n",
          "message": "IDecentralizedNation.getMembersVotingPoints (DecentralizedNation.sol#349-354) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 357,
          "vulnerability_to_line": 362,
          "vulnerability_code": "    function getMemberid(\n\n        address _member\n\n    )\n\n    public\n\n    view\n",
          "message": "IDecentralizedNation.getMemberid (DecentralizedNation.sol#357-362) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 425,
          "vulnerability_to_line": 432,
          "vulnerability_code": "    function addContract(address _contractAddress) public onlyOwner {\n\n        require(_contractAddress != address(0), 'addContract zero');\n\n        bytes memory _contractCode = GetCode.at(_contractAddress);\n\n        bytes32 cc = keccak256(abi.encodePacked(_contractCode));\n\n        canEmit[cc] = true;\n\n    }\n\n\n",
          "message": "TwoKeyVoteToken.addContract (DecentralizedNation.sol#425-432) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 603,
          "vulnerability_to_line": 612,
          "vulnerability_code": "    function getLimitsForDAO() public view returns (uint,uint,uint,uint) {\n\n        return(\n\n            minimalNumberOfPositiveVotersForVotingCampaign,\n\n            minimalPercentOfVotersForVotingCampaign,\n\n            minimalNumberOfVotersForPetitioningCampaign,\n\n            minimalPercentOfVotersForPetitioningCampaign\n\n        );\n\n    }\n\n\n",
          "message": "DecentralizedNation.getLimitsForDAO (DecentralizedNation.sol#603-612) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 696,
          "vulnerability_to_line": 722,
          "vulnerability_code": "    function addMembersByFounders(address _memberAddress, bytes32 _memberType) public onlyInitialFounder {\n\n        require(limitOfMembersPerType[_memberType] > memberTypeToMembers[_memberType].length);\n\n\n\n        bytes32 memberUsername;\n\n        bytes32 memberFullName;\n\n        bytes32 memberEmail;\n\n\n\n        (memberUsername,memberFullName,memberEmail) = ITwoKeyRegistry(twoKeyRegistryContract).getUserData(_memberAddress);\n\n        require(checkIfMemberTypeExists(_memberType) || _memberType == bytes32(0));\n\n        Member memory m = Member({\n\n            memberAddress: _memberAddress,\n\n            username: memberUsername,\n\n            fullName: memberFullName,\n\n            email: memberEmail,\n\n            memberType: _memberType\n\n            });\n\n\n\n        members.push(m);\n\n        memberAddressToMemberType[_memberAddress] = _memberType;\n\n        memberId[_memberAddress] = numOfMembers;\n\n        memberTypeToMembers[_memberType].push(_memberAddress);\n\n        votingPoints[_memberAddress] = 1000000000000000000;\n\n        totalNumberOfCampaigns[_memberAddress] = numberOfVotingCamapignsAndPetitions;\n\n        numOfMembers++;\n\n    }\n\n\n",
          "message": "DecentralizedNation.addMembersByFounders (DecentralizedNation.sol#696-722) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 785,
          "vulnerability_to_line": 789,
          "vulnerability_code": "    function getMemberId(address _memberAddress) public view returns (uint) {\n\n        return memberId[msg.sender];\n\n    }\n\n\n",
          "message": "DecentralizedNation.getMemberId (DecentralizedNation.sol#785-789) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 814,
          "vulnerability_to_line": 833,
          "vulnerability_code": "    function getAllMembers() public view returns (address[],bytes32[],bytes32[],bytes32[], bytes32[]) {\n\n        uint length = members.length - 1;\n\n        address[] memory allMemberAddresses = new address[](length);\n\n        bytes32[] memory allMemberUsernames = new bytes32[](length);\n\n        bytes32[] memory allMemberFullNames = new bytes32[](length);\n\n        bytes32[] memory allMemberEmails = new bytes32[](length);\n\n        bytes32[] memory allMemberTypes = new bytes32[](length);\n\n\n\n        for(uint i=1; i<length + 1; i++) {\n\n            Member memory m = members[i];\n\n            allMemberAddresses[i-1] = m.memberAddress;\n\n            allMemberUsernames[i-1] = m.username;\n\n            allMemberFullNames[i-1] = m.fullName;\n\n            allMemberEmails[i-1] = m.email;\n\n            allMemberTypes[i-1] = m.memberType;\n\n        }\n\n        return (allMemberAddresses, allMemberUsernames, allMemberFullNames, allMemberEmails, allMemberTypes);\n\n    }\n\n\n",
          "message": "DecentralizedNation.getAllMembers (DecentralizedNation.sol#814-833) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 834,
          "vulnerability_to_line": 838,
          "vulnerability_code": "    function getAllMembersForType(bytes32 memberType) public view returns (address[]) {\n\n        return memberTypeToMembers[memberType];\n\n    }\n\n\n",
          "message": "DecentralizedNation.getAllMembersForType (DecentralizedNation.sol#834-838) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 838,
          "vulnerability_to_line": 842,
          "vulnerability_code": "    function getLimitForType(bytes32 memberType) public view returns(uint) {\n\n        return limitOfMembersPerType[memberType];\n\n    }\n\n\n",
          "message": "DecentralizedNation.getLimitForType (DecentralizedNation.sol#838-842) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 842,
          "vulnerability_to_line": 846,
          "vulnerability_code": "    function getMembersVotingPoints(address _memberAddress) public view returns (uint) {\n\n        return votingPoints[_memberAddress];\n\n    }\n\n\n",
          "message": "DecentralizedNation.getMembersVotingPoints (DecentralizedNation.sol#842-846) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 847,
          "vulnerability_to_line": 879,
          "vulnerability_code": "    function startCampagin(\n\n        string description,\n\n        uint votingCampaignLengthInDays,\n\n        address twoKeyWeightedVoteContract,\n\n        uint flag //if 0 then voting else petitioning\n\n    ) public {\n\n        require(memberId[msg.sender] != 0);\n\n        bytes32 _campaignType;\n\n        if(flag == 0) {\n\n            _campaignType = bytes32(\"VOTING\");\n\n        } else {\n\n            _campaignType = bytes32(\"PETITIONING\");\n\n        }\n\n\n\n        Campaign memory cmp = Campaign({\n\n            votingReason: description,\n\n            finished: false,\n\n            votesYes: 0,\n\n            votesNo: 0,\n\n            votingResultForYes: 0,\n\n            votingResultForNo: 0,\n\n            votingCampaignLengthInDays: votingCampaignLengthInDays,\n\n            campaignType: _campaignType,\n\n            votingContract: twoKeyWeightedVoteContract\n\n        });\n\n\n\n        votingContractToCampaign[twoKeyWeightedVoteContract] = cmp;\n\n        ITwoKeyWeightedVoteContract(twoKeyWeightedVoteContract).setValid();\n\n        allCampaigns.push(cmp);\n\n        numberOfVotingCamapignsAndPetitions++;\n\n    }\n\n\n",
          "message": "DecentralizedNation.startCampagin (DecentralizedNation.sol#847-879) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 881,
          "vulnerability_to_line": 885,
          "vulnerability_code": "    function getResultsForVoting(address weightedVoteContractAddress) public view returns (uint,uint,uint,uint,uint,uint) {\n\n        return ITwoKeyWeightedVoteContract(weightedVoteContractAddress).getDynamicData();\n\n    }\n\n\n",
          "message": "DecentralizedNation.getResultsForVoting (DecentralizedNation.sol#881-885) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 886,
          "vulnerability_to_line": 914,
          "vulnerability_code": "    function executeVoting(uint campaign_id, bytes signature) public returns (uint) {\n\n\n\n        Campaign memory campaign = allCampaigns[campaign_id];\n\n\n\n        require(campaign.finished == false);\n\n//        require(block.timestamp > nvc.votingCampaignLengthInDays);\n\n        ITwoKeyWeightedVoteContract(campaign.votingContract).transferSig(signature);\n\n        address [] memory allParticipants = ITwoKeyWeightedVoteContract(campaign.votingContract).getAllVoters();\n\n\n\n        for(uint i=0; i<allParticipants.length; i++) {\n\n            bool vote;\n\n            uint power;\n\n\n\n            (vote,power) = ITwoKeyWeightedVoteContract(campaign.votingContract).getVoteAndChoicePerAddress(allParticipants[i]);\n\n\n\n            if(vote == true) {\n\n                campaign.votesYes++;\n\n                campaign.votingResultForYes += int(power);\n\n            }\n\n            if(vote == false){\n\n                campaign.votesNo++;\n\n                campaign.votingResultForNo += int(power);\n\n            }\n\n        }\n\n        campaign.finished = true;\n\n        allCampaigns[campaign_id] = campaign;\n\n    }\n\n\n",
          "message": "DecentralizedNation.executeVoting (DecentralizedNation.sol#886-914) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 914,
          "vulnerability_to_line": 918,
          "vulnerability_code": "    function getNumberOfVotingCampaigns() public view returns (uint) {\n\n        return numberOfVotingCamapignsAndPetitions;\n\n    }\n\n\n",
          "message": "DecentralizedNation.getNumberOfVotingCampaigns (DecentralizedNation.sol#914-918) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 918,
          "vulnerability_to_line": 932,
          "vulnerability_code": "    function getCampaignByAddressOfVoteContract(address voteContract) public view returns (string, bool, uint, uint, int, int, uint, bytes32, address) {\n\n        Campaign memory campaign = votingContractToCampaign[voteContract];\n\n        return (\n\n        campaign.votingReason,\n\n        campaign.finished,\n\n        campaign.votesYes,\n\n        campaign.votesNo,\n\n        campaign.votingResultForYes,\n\n        campaign.votingResultForNo,\n\n        campaign.votingCampaignLengthInDays,\n\n        campaign.campaignType,\n\n        campaign.votingContract);\n\n    }\n\n\n",
          "message": "DecentralizedNation.getCampaignByAddressOfVoteContract (DecentralizedNation.sol#918-932) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 933,
          "vulnerability_to_line": 947,
          "vulnerability_code": "    function getCampaign(uint id) public view returns (string, bool, uint, uint, int, int, uint, bytes32, address) {\n\n        Campaign memory campaign = allCampaigns[id];\n\n        return (\n\n            campaign.votingReason,\n\n            campaign.finished,\n\n            campaign.votesYes,\n\n            campaign.votesNo,\n\n            campaign.votingResultForYes,\n\n            campaign.votingResultForNo,\n\n            campaign.votingCampaignLengthInDays,\n\n            campaign.campaignType,\n\n            campaign.votingContract);\n\n    }\n\n\n",
          "message": "DecentralizedNation.getCampaign (DecentralizedNation.sol#933-947) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 948,
          "vulnerability_to_line": 952,
          "vulnerability_code": "    function getNameAndIpfsHashes() public view returns (string,string,string) {\n\n        return (nationName, ipfsForConstitution, ipfsHashForDAOPublicInfo);\n\n    }\n\n\n",
          "message": "DecentralizedNation.getNameAndIpfsHashes (DecentralizedNation.sol#948-952) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 952,
          "vulnerability_to_line": 956,
          "vulnerability_code": "    function getMemberid(address _member) public view returns (uint) {\n\n        return memberId[_member];\n\n    }\n\n\n",
          "message": "DecentralizedNation.getMemberid (DecentralizedNation.sol#952-956) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_a' of SafeMath.mul (DecentralizedNation.sol#38) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_b' of SafeMath.mul (DecentralizedNation.sol#38) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_a' of SafeMath.div (DecentralizedNation.sol#54) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_b' of SafeMath.div (DecentralizedNation.sol#54) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_a' of SafeMath.sub (DecentralizedNation.sol#64) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_b' of SafeMath.sub (DecentralizedNation.sol#64) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_a' of SafeMath.add (DecentralizedNation.sol#72) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_b' of SafeMath.add (DecentralizedNation.sol#72) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 258,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256) {\n",
          "message": "Parameter '_owner' of StandardToken.balanceOf (DecentralizedNation.sol#258) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 243,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_to' of StandardToken.transfer (DecentralizedNation.sol#243) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 243,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of StandardToken.transfer (DecentralizedNation.sol#243) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _owner,\n",
          "message": "Parameter '_owner' of StandardToken.allowance (DecentralizedNation.sol#173) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 174,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _spender\n",
          "message": "Parameter '_spender' of StandardToken.allowance (DecentralizedNation.sol#174) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_spender' of StandardToken.approve (DecentralizedNation.sol#160) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of StandardToken.approve (DecentralizedNation.sol#160) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 133,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _from,\n",
          "message": "Parameter '_from' of StandardToken.transferFrom (DecentralizedNation.sol#133) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _to,\n",
          "message": "Parameter '_to' of StandardToken.transferFrom (DecentralizedNation.sol#134) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of StandardToken.transferFrom (DecentralizedNation.sol#135) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 193,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _spender,\n",
          "message": "Parameter '_spender' of StandardToken.increaseApproval (DecentralizedNation.sol#193) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _addedValue\n",
          "message": "Parameter '_addedValue' of StandardToken.increaseApproval (DecentralizedNation.sol#194) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _spender,\n",
          "message": "Parameter '_spender' of StandardToken.decreaseApproval (DecentralizedNation.sol#215) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _subtractedValue\n",
          "message": "Parameter '_subtractedValue' of StandardToken.decreaseApproval (DecentralizedNation.sol#216) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 328,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferOwnership(address _newOwner) public onlyOwner {\n",
          "message": "Parameter '_newOwner' of Ownable.transferOwnership (DecentralizedNation.sol#328) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 336,
          "vulnerability_to_line": 340,
          "vulnerability_code": "  function _transferOwnership(address _newOwner) internal {\n\n    require(_newOwner != address(0));\n\n    emit OwnershipTransferred(owner, _newOwner);\n\n    owner = _newOwner;\n",
          "message": "Function 'Ownable._transferOwnership' (DecentralizedNation.sol#336-340) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 336,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function _transferOwnership(address _newOwner) internal {\n",
          "message": "Parameter '_newOwner' of Ownable._transferOwnership (DecentralizedNation.sol#336) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 456,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint256) {\n",
          "message": "Parameter '_owner' of TwoKeyVoteToken.balanceOf (DecentralizedNation.sol#456) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 547,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address, uint256) public returns (bool) {\n",
          "message": "Parameter '' of TwoKeyVoteToken.transfer (DecentralizedNation.sol#547) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 547,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address, uint256) public returns (bool) {\n",
          "message": "Parameter '_scope_0' of TwoKeyVoteToken.transfer (DecentralizedNation.sol#547) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 524,
          "vulnerability_to_line": 525,
          "vulnerability_code": "        address _owner,\n",
          "message": "Parameter '_owner' of TwoKeyVoteToken.allowance (DecentralizedNation.sol#524-525) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 552,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address, uint256) public returns (bool) {\n",
          "message": "Parameter '' of TwoKeyVoteToken.approve (DecentralizedNation.sol#552) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 552,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address, uint256) public returns (bool) {\n",
          "message": "Parameter '_scope_0' of TwoKeyVoteToken.approve (DecentralizedNation.sol#552) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 498,
          "vulnerability_to_line": 499,
          "vulnerability_code": "        address _from,\n",
          "message": "Parameter '_from' of TwoKeyVoteToken.transferFrom (DecentralizedNation.sol#498-499) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 499,
          "vulnerability_to_line": 500,
          "vulnerability_code": "        address _to,\n",
          "message": "Parameter '_to' of TwoKeyVoteToken.transferFrom (DecentralizedNation.sol#499-500) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 500,
          "vulnerability_to_line": 501,
          "vulnerability_code": "        uint256 _value\n",
          "message": "Parameter '_value' of TwoKeyVoteToken.transferFrom (DecentralizedNation.sol#500-501) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 412,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _decentralizedNation) Ownable() public {\n",
          "message": "Parameter '_decentralizedNation' of TwoKeyVoteToken. (DecentralizedNation.sol#412) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 425,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addContract(address _contractAddress) public onlyOwner {\n",
          "message": "Parameter '_contractAddress' of TwoKeyVoteToken.addContract (DecentralizedNation.sol#425) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 470,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function checkBalance(address _owner) internal returns (uint256){\n",
          "message": "Parameter '_owner' of TwoKeyVoteToken.checkBalance (DecentralizedNation.sol#470) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 651,
          "vulnerability_to_line": 652,
          "vulnerability_code": "        string _nationName,\n",
          "message": "Parameter '_nationName' of DecentralizedNation. (DecentralizedNation.sol#651-652) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 652,
          "vulnerability_to_line": 653,
          "vulnerability_code": "        string _ipfsHashForConstitution,\n",
          "message": "Parameter '_ipfsHashForConstitution' of DecentralizedNation. (DecentralizedNation.sol#652-653) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 653,
          "vulnerability_to_line": 654,
          "vulnerability_code": "        string _ipfsHashForDAOPublicInfo,\n",
          "message": "Parameter '_ipfsHashForDAOPublicInfo' of DecentralizedNation. (DecentralizedNation.sol#653-654) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 658,
          "vulnerability_to_line": 659,
          "vulnerability_code": "        uint _minimalNumberOfVotersForVotingCampaign,\n",
          "message": "Parameter '_minimalNumberOfVotersForVotingCampaign' of DecentralizedNation. (DecentralizedNation.sol#658-659) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 659,
          "vulnerability_to_line": 660,
          "vulnerability_code": "        uint _minimalPercentOfVotersForVotingCampaign,\n",
          "message": "Parameter '_minimalPercentOfVotersForVotingCampaign' of DecentralizedNation. (DecentralizedNation.sol#659-660) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 660,
          "vulnerability_to_line": 661,
          "vulnerability_code": "        uint _minimalNumberOfVotersForPetitioningCampaign,\n",
          "message": "Parameter '_minimalNumberOfVotersForPetitioningCampaign' of DecentralizedNation. (DecentralizedNation.sol#660-661) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 661,
          "vulnerability_to_line": 662,
          "vulnerability_code": "        uint _minimalPercentOfVotersForPetitioningCampaign,\n",
          "message": "Parameter '_minimalPercentOfVotersForPetitioningCampaign' of DecentralizedNation. (DecentralizedNation.sol#661-662) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 662,
          "vulnerability_to_line": 663,
          "vulnerability_code": "        address _twoKeyRegistry\n",
          "message": "Parameter '_twoKeyRegistry' of DecentralizedNation. (DecentralizedNation.sol#662-663) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 696,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMembersByFounders(address _memberAddress, bytes32 _memberType) public onlyInitialFounder {\n",
          "message": "Parameter '_memberAddress' of DecentralizedNation.addMembersByFounders (DecentralizedNation.sol#696) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 696,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMembersByFounders(address _memberAddress, bytes32 _memberType) public onlyInitialFounder {\n",
          "message": "Parameter '_memberType' of DecentralizedNation.addMembersByFounders (DecentralizedNation.sol#696) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 723,
          "vulnerability_to_line": 724,
          "vulnerability_code": "        address _memberAddress,\n",
          "message": "Parameter '_memberAddress' of DecentralizedNation.addMember (DecentralizedNation.sol#723-724) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 724,
          "vulnerability_to_line": 725,
          "vulnerability_code": "        bytes32 _memberType)\n",
          "message": "Parameter '_memberType' of DecentralizedNation.addMember (DecentralizedNation.sol#724-725) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 791,
          "vulnerability_to_line": 792,
          "vulnerability_code": "        address _memberAddress,\n",
          "message": "Parameter '_memberAddress' of DecentralizedNation.changeMemberType (DecentralizedNation.sol#791-792) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 792,
          "vulnerability_to_line": 793,
          "vulnerability_code": "        bytes32 _newType)\n",
          "message": "Parameter '_newType' of DecentralizedNation.changeMemberType (DecentralizedNation.sol#792-793) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 842,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getMembersVotingPoints(address _memberAddress) public view returns (uint) {\n",
          "message": "Parameter '_memberAddress' of DecentralizedNation.getMembersVotingPoints (DecentralizedNation.sol#842) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 886,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function executeVoting(uint campaign_id, bytes signature) public returns (uint) {\n",
          "message": "Parameter 'campaign_id' of DecentralizedNation.executeVoting (DecentralizedNation.sol#886) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 952,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getMemberid(address _member) public view returns (uint) {\n",
          "message": "Parameter '_member' of DecentralizedNation.getMemberid (DecentralizedNation.sol#952) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 internal totalSupply_;\n",
          "message": "StandardToken.totalSupply_ (DecentralizedNation.sol#117) is never used in TwoKeyVoteToken\nTwoKeyVoteToken.allowed (DecentralizedNation.sol#403-404) is never used in TwoKeyVoteToken\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 321,
          "vulnerability_to_line": null,
          "vulnerability_code": "    owner = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 782,
          "vulnerability_to_line": null,
          "vulnerability_code": "        members.length--;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 552,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address, uint256) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 674,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint j=0; j<initialMemberTypes.length; j++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 759,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<memberTypeToMembers[memberType].length - 1; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 772,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint j = memberId[targetMember]; j<members.length-1; j++){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 805,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<memberTypes.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 895,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<allParticipants.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 886,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function executeVoting(uint campaign_id, bytes signature) public returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 376,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function at(address _addr) internal view returns (bytes o_code) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 674,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint j=0; j<initialMemberTypes.length; j++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 805,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<memberTypes.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 895,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<allParticipants.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 266,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 345,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 367,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 395,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 560,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 417,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => bool) private visited;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 419,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes32 => bool) private canEmit;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 401,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 376,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function at(address _addr) internal view returns (bytes o_code) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getDescription() public view returns(string);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferSig(bytes sig) public returns (address[]);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferSig(bytes sig) public returns (address[]);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAllVoters() public view returns (address[]);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 376,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function at(address _addr) internal view returns (bytes o_code) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 651,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _nationName,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 652,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _ipfsHashForConstitution,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 653,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _ipfsHashForDAOPublicInfo,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 654,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] founder,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 655,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32[] initialMemberTypes,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 656,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint[] limitPerType,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 657,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint[] rightsToCreateVoting,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 814,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAllMembers() public view returns (address[],bytes32[],bytes32[],bytes32[], bytes32[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 814,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAllMembers() public view returns (address[],bytes32[],bytes32[],bytes32[], bytes32[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 814,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAllMembers() public view returns (address[],bytes32[],bytes32[],bytes32[], bytes32[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 814,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAllMembers() public view returns (address[],bytes32[],bytes32[],bytes32[], bytes32[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 814,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAllMembers() public view returns (address[],bytes32[],bytes32[],bytes32[], bytes32[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 834,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAllMembersForType(bytes32 memberType) public view returns (address[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 848,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string description,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 886,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function executeVoting(uint campaign_id, bytes signature) public returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 918,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getCampaignByAddressOfVoteContract(address voteContract) public view returns (string, bool, uint, uint, int, int, uint, bytes32, address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 933,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getCampaign(uint id) public view returns (string, bool, uint, uint, int, int, uint, bytes32, address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 948,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getNameAndIpfsHashes() public view returns (string,string,string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 948,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getNameAndIpfsHashes() public view returns (string,string,string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 948,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getNameAndIpfsHashes() public view returns (string,string,string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 377,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 572,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address initialFounder;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 574,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint numOfMembers;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 578,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool initialized = false;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 589,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint numberOfVotingCamapignsAndPetitions;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 593,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint) votingPoints;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 594,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint) totalNumberOfCampaigns;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 597,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint minimalNumberOfPositiveVotersForVotingCampaign;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 598,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint minimalPercentOfVotersForVotingCampaign;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 600,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint minimalNumberOfVotersForPetitioningCampaign;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 601,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint minimalPercentOfVotersForPetitioningCampaign;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 612,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address twoKeyRegistryContract;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 570,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32[] public memberTypes;\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 566,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string public nationName;\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    c = _a + _b;\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": null,
          "vulnerability_code": "  string public name;\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    c = _a + _b;\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 406,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string public name = 'TwoKeyVote';\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [
        "SYMBOLIC EXECUTION TIMEOUT",
        "DOCKER_TIMEOUT",
        "exception (AttributeError: 'long' object has no attribute 'data')"
      ],
      "vulnerability_findings": [
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 934,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Campaign memory campaign = allCampaigns[id];\n",
          "message": null
        }
      ]
    }
  }
}