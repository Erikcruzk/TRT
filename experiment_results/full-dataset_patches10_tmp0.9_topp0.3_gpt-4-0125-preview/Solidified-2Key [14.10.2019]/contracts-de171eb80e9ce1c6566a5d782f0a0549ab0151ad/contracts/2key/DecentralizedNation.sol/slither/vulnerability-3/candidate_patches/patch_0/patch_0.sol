pragma solidity ^0.4.24;

contract ITwoKeyWeightedVoteContract {
    function getDescription() public view returns(string);
    function transferSig(bytes sig) public returns (address[]);
    function setValid() public;
    function getDynamicData() public view returns (uint,uint,uint,uint,uint,uint);
    function getHowMuchAddressPutPower(address add) public view returns (uint);
    function getVoteAndChoicePerAddress(address voter) public view returns (bool, uint);
    function getAllVoters() public view returns (address[]);
}



pragma solidity ^0.4.24;

contract ITwoKeyRegistry {
    function checkIfUserExists(address _userAddress) public view returns (bool);
    function getUserData(address _user) public view returns (bytes32,bytes32,bytes32);
}



pragma solidity ^0.4.24;






library SafeMath {

  


  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {
    
    
    
    if (_a == 0) {
      return 0;
    }

    c = _a * _b;
    assert(c / _a == _b);
    return c;
  }

  


  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {
    
    
    
    return _a / _b;
  }

  


  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {
    assert(_b <= _a);
    return _a - _b;
  }

  


  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {
    c = _a + _b;
    assert(c >= _a);
    return c;
  }
}



pragma solidity ^0.4.24;







contract ERC20Basic {
  function totalSupply() public view returns (uint256);
  function balanceOf(address _who) public view returns (uint256);
  function transfer(address _to, uint256 _value) public returns (bool);
  function allowance(address _ocwner, address _spender) public view returns (uint256);
  function approve(address spender, uint tokens) public returns (bool success);
  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);

  event Transfer(address indexed from, address indexed to, uint256 value);
  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
}



pragma solidity ^0.4.24;









contract StandardToken is ERC20Basic {

  using SafeMath for uint256;

  uint256 internal totalSupply_;
  string public name;
  string public symbol;
  uint8 public decimals;

  mapping (address => mapping (address => uint256)) internal allowed;
  mapping(address => uint256) internal balances;


  





  function transferFrom(
    address _from,
    address _to,
    uint256 _value
  )
    public
    returns (bool)
  {
    require(_value <= balances[_from]);
    require(_value <= allowed[_from][msg.sender]);
    require(_to != address(0));

    balances[_from] = balances[_from].sub(_value);
    balances[_to] = balances[_to].add(_value);
    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    emit Transfer(_from, _to, _value);
    return true;
  }

  








  function approve(address _spender, uint256 _value) public returns (bool) {
    allowed[msg.sender][_spender] = _value;
    emit Approval(msg.sender, _spender, _value);
    return true;
  }

  





  function allowance(
    address _owner,
    address _spender
   )
    public
    view
    returns (uint256)
  {
    return allowed[_owner][_spender];
  }

  








  function increaseApproval(
    address _spender,
    uint256 _addedValue
  )
    public
    returns (bool)
  {
    allowed[msg.sender][_spender] = (
      allowed[msg.sender][_spender].add(_addedValue));
    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }

  








  function decreaseApproval(
    address _spender,
    uint256 _subtractedValue
  )
    public
    returns (bool)
  {
    uint256 oldValue = allowed[msg.sender][_spender];
    if (_subtractedValue >= oldValue) {
      allowed[msg.sender][_spender] = 0;
    } else {
      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
    }
    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }

  


  function totalSupply() public view returns (uint256) {
    return totalSupply_;
  }

  




  function transfer(address _to, uint256 _value) public returns (bool) {
    require(_value <= balances[msg.sender]);
    require(_to != address(0));

    balances[msg.sender] = balances[msg.sender].sub(_value);
    balances[_to] = balances[_to].add(_value);
    emit Transfer(msg.sender, _to, _value);
    return true;
  }

  




  function balanceOf(address _owner) public view returns (uint256) {
    return balances[_owner];
  }

}



pragma solidity ^0.4.24;





contract ERC20 is ERC20Basic {

}



pragma solidity ^0.4.24;







contract Ownable {
  address public owner;


  event OwnershipRenounced(address indexed previousOwner);
  event OwnershipTransferred(
    address indexed previousOwner,
    address indexed newOwner
  );


  



  constructor() public {
    owner = msg.sender;
  }

  


  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }

  





  function renounceOwnership() public onlyOwner {
    emit OwnershipRenounced(owner);
    owner = address(0);
  }

  



  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }

  



  function _transferOwnership(address _newOwner) internal {
    require(_newOwner != address(0));
    emit OwnershipTransferred(owner, _newOwner);
    owner = _newOwner;
  }
}



pragma solidity ^0.4.24;

contract IDecentralizedNation {

    function getMembersVotingPoints(
        address _memberAddress
    )
    public
    view
    returns (uint);


    function getMemberid(
        address _member
    )
    public
    view
    returns (uint);
}



pragma solidity ^0.4.24;







library GetCode {
    function at(address _addr) internal view returns (bytes o_code) {
        assembly {
        
            let size := extcodesize(_addr)
        
        
            o_code := mload(0x40)
        
            mstore(0x40, add(o_code, and(add(add(size, 0x20), 0x1f), not(0x1f))))
        
            mstore(o_code, size)
        
            extcodecopy(_addr, add(o_code, 0x20), 0, size)
        }
    }
}



pragma solidity ^0.4.24;




function beginMigration() public onlyOwner {
    require(!migrationStarted);
    migrationStarted = true;
    emit MigrationStarted();
}



pragma solidity ^0.4.24;



contract DecentralizedNation {

    string public nationName;
    string public ipfsForConstitution;
    string public ipfsHashForDAOPublicInfo;

    bytes32[] public memberTypes;

    address initialFounder;
    Member[] public members;
    uint numOfMembers;

    address public votingToken;

    bool initialized = false;

    mapping(address => uint) public memberId;

    mapping(bytes32 => uint) public limitOfMembersPerType;
    mapping(bytes32 => address[]) public memberTypeToMembers;

    mapping(address => Campaign) public votingContractToCampaign;


    Campaign[] public allCampaigns;
    uint numberOfVotingCamapignsAndPetitions;

    mapping(address => bytes32) public memberAddressToMemberType;

    mapping(address => uint) votingPoints;
    mapping(address => uint) totalNumberOfCampaigns;
    mapping(bytes32 => bool) public isMemberTypeEligibleToCreateVotingCampaign;

    uint minimalNumberOfPositiveVotersForVotingCampaign;
    uint minimalPercentOfVotersForVotingCampaign;

    uint minimalNumberOfVotersForPetitioningCampaign;
    uint minimalPercentOfVotersForPetitioningCampaign;

    function getLimitsForDAO() public view returns (uint,uint,uint,uint) {
        return(
            minimalNumberOfPositiveVotersForVotingCampaign,
            minimalPercentOfVotersForVotingCampaign,
            minimalNumberOfVotersForPetitioningCampaign,
            minimalPercentOfVotersForPetitioningCampaign
        );
    }

    address twoKeyRegistryContract;

    struct Campaign {
        string votingReason; 
        bool finished;
        uint votesYes;
        uint votesNo;
        int votingResultForYes;
        int votingResultForNo;
        uint votingCampaignLengthInDays;
        bytes32 campaignType; 
        address votingContract;
    }



    struct Member {
        address memberAddress;
        bytes32 username;
        bytes32 fullName;
        bytes32 email;
        bytes32 memberType;
    }




    modifier onlyMembers {
        require(memberId[msg.sender] != 0);
        _;
    }

    modifier onlyInitialFounder {
        require(msg.sender == initialFounder);
        _;
    }


    constructor(
        string _nationName,
        string _ipfsHashForConstitution,
        string _ipfsHashForDAOPublicInfo,
        address[] founder,
        bytes32[] initialMemberTypes,
        uint[] limitPerType,
        uint[] rightsToCreateVoting,
        uint _minimalNumberOfVotersForVotingCampaign,
        uint _minimalPercentOfVotersForVotingCampaign,
        uint _minimalNumberOfVotersForPetitioningCampaign,
        uint _minimalPercentOfVotersForPetitioningCampaign,
        address _twoKeyRegistry
    ) public {
        require(limitPerType.length == initialMemberTypes.length);
        initialFounder = founder[0];
        memberTypes.push(bytes32("FOUNDERS"));
        isMemberTypeEligibleToCreateVotingCampaign[bytes32("FOUNDERS")] = true;
        twoKeyRegistryContract = _twoKeyRegistry;
        addMember(0,bytes32(0));
        addMember(founder[0], bytes32("FOUNDERS"));

        votingToken = new TwoKeyVoteToken(address(this));

        for(uint j=0; j<initialMemberTypes.length; j++) {
            limitOfMembersPerType[initialMemberTypes[j]] = limitPerType[j];
            if(rightsToCreateVoting[j] == 1){
                isMemberTypeEligibleToCreateVotingCampaign[initialMemberTypes[j]] = true;
            } else {
                isMemberTypeEligibleToCreateVotingCampaign[initialMemberTypes[j]] = false;
            }
            memberTypes.push(initialMemberTypes[j]);
        }

        minimalNumberOfPositiveVotersForVotingCampaign = _minimalNumberOfVotersForVotingCampaign;
        minimalPercentOfVotersForVotingCampaign = _minimalPercentOfVotersForVotingCampaign;
        minimalNumberOfVotersForPetitioningCampaign = _minimalNumberOfVotersForPetitioningCampaign;
        minimalPercentOfVotersForPetitioningCampaign = _minimalPercentOfVotersForPetitioningCampaign;

        nationName = _nationName;
        ipfsForConstitution = _ipfsHashForConstitution;
        ipfsHashForDAOPublicInfo = _ipfsHashForDAOPublicInfo;
        initialized = true;
    }


    function addMembersByFounders(address _memberAddress, bytes32 _memberType) public onlyInitialFounder {
        require(limitOfMembersPerType[_memberType] > memberTypeToMembers[_memberType].length);

        bytes32 memberUsername;
        bytes32 memberFullName;
        bytes32 memberEmail;

        (memberUsername,memberFullName,memberEmail) = ITwoKeyRegistry(twoKeyRegistryContract).getUserData(_memberAddress);
        require(checkIfMemberTypeExists(_memberType) || _memberType == bytes32(0));
        Member memory m = Member({
            memberAddress: _memberAddress,
            username: memberUsername,
            fullName: memberFullName,
            email: memberEmail,
            memberType: _memberType
            });

        members.push(m);
        memberAddressToMemberType[_memberAddress] = _memberType;
        memberId[_memberAddress] = numOfMembers;
        memberTypeToMembers[_memberType].push(_memberAddress);
        votingPoints[_memberAddress] = 1000000000000000000;
        totalNumberOfCampaigns[_memberAddress] = numberOfVotingCamapignsAndPetitions;
        numOfMembers++;
    }

    function addMember(
        address _memberAddress,
        bytes32 _memberType)
    internal {
        if(members.length > 0) {
            require(ITwoKeyRegistry(twoKeyRegistryContract).checkIfUserExists(_memberAddress));
        }
        if(initialized) {
            require(limitOfMembersPerType[_memberType] > memberTypeToMembers[_memberType].length);
        }

        bytes32 memberUsername;
        bytes32 memberFullName;
        bytes32 memberEmail;

        (memberUsername,memberFullName,memberEmail) = ITwoKeyRegistry(twoKeyRegistryContract).getUserData(_memberAddress);
        require(checkIfMemberTypeExists(_memberType) || _memberType == bytes32(0));
        Member memory m = Member({
            memberAddress: _memberAddress,
            username: memberUsername,
            fullName: memberFullName,
            email: memberEmail,
            memberType: _memberType
        });

        members.push(m);
        memberAddressToMemberType[_memberAddress] = _memberType;
        memberId[_memberAddress] = numOfMembers;
        memberTypeToMembers[_memberType].push(_memberAddress);
        votingPoints[_memberAddress] = 1000000000000000000;
        totalNumberOfCampaigns[_memberAddress] = numberOfVotingCamapignsAndPetitions;
        numOfMembers++;
    }

    function removeMemberFromMemberTypeArray(address targetMember) internal {
        bytes32 memberType = memberAddressToMemberType[targetMember];
        bool flag = false;
        for(uint i=0; i<memberTypeToMembers[memberType].length - 1; i++) {
            if(memberTypeToMembers[memberType][i] == targetMember) {
                flag = true;
            }
            if(flag == true || i== memberTypeToMembers[memberType].length - 2) {
                memberTypeToMembers[memberType][i] = memberTypeToMembers[memberType][i+1];
            }
        }
        delete memberTypeToMembers[memberType][memberTypeToMembers[memberType].length-1];
    }

    function removeMember(address targetMember) internal {
        require(memberId[targetMember] != 0);
        for (uint j = memberId[targetMember]; j<members.length-1; j++){
            members[j] = members[j+1];
        }
        delete members[members.length-1];

        removeMemberFromMemberTypeArray(targetMember);

        memberId[targetMember] = 0;
        memberAddressToMemberType[targetMember] = bytes32(0);
        votingPoints[targetMember] = 0;
        members.length--;
    }

    function getMemberId(address _memberAddress) public view returns (uint) {
        return memberId[msg.sender];
    }


    function changeMemberType(
        address _memberAddress,
        bytes32 _newType)
    internal {
        require(memberId[_memberAddress] != 0);
        require(checkIfMemberTypeExists(_newType));
        uint id = memberId[_memberAddress];
        memberAddressToMemberType[_memberAddress] = _newType;
        Member memory m = members[id];
        m.memberType = _newType;
        members[id] = m;
    }


    function checkIfMemberTypeExists(bytes32 memberType) public view returns (bool) {
        for(uint i=0; i<memberTypes.length; i++) {
            if(memberTypes[i] == memberType) {
                return true;
            }
        }
        return false;
    }

    
    function getAllMembers() public view returns (address[],bytes32[],bytes32[],bytes32[], bytes32[]) {
        uint length = members.length - 1;
        address[] memory allMemberAddresses = new address[](length);
        bytes32[] memory allMemberUsernames = new bytes32[](length);
        bytes32[] memory allMemberFullNames = new bytes32[](length);
        bytes32[] memory allMemberEmails = new bytes32[](length);
        bytes32[] memory allMemberTypes = new bytes32[](length);

        for(uint i=1; i<length + 1; i++) {
            Member memory m = members[i];
            allMemberAddresses[i-1] = m.memberAddress;
            allMemberUsernames[i-1] = m.username;
            allMemberFullNames[i-1] = m.fullName;
            allMemberEmails[i-1] = m.email;
            allMemberTypes[i-1] = m.memberType;
        }
        return (allMemberAddresses, allMemberUsernames, allMemberFullNames, allMemberEmails, allMemberTypes);
    }


    function getAllMembersForType(bytes32 memberType) public view returns (address[]) {
        return memberTypeToMembers[memberType];
    }

    function getLimitForType(bytes32 memberType) public view returns(uint) {
        return limitOfMembersPerType[memberType];
    }

    function getMembersVotingPoints(address _memberAddress) public view returns (uint) {
        return votingPoints[_memberAddress];
    }


    function startCampagin(
        string description,
        uint votingCampaignLengthInDays,
        address twoKeyWeightedVoteContract,
        uint flag 
    ) public {
        require(memberId[msg.sender] != 0);
        bytes32 _campaignType;
        if(flag == 0) {
            _campaignType = bytes32("VOTING");
        } else {
            _campaignType = bytes32("PETITIONING");
        }

        Campaign memory cmp = Campaign({
            votingReason: description,
            finished: false,
            votesYes: 0,
            votesNo: 0,
            votingResultForYes: 0,
            votingResultForNo: 0,
            votingCampaignLengthInDays: votingCampaignLengthInDays,
            campaignType: _campaignType,
            votingContract: twoKeyWeightedVoteContract
        });

        votingContractToCampaign[twoKeyWeightedVoteContract] = cmp;
        ITwoKeyWeightedVoteContract(twoKeyWeightedVoteContract).setValid();
        allCampaigns.push(cmp);
        numberOfVotingCamapignsAndPetitions++;
    }



    function getResultsForVoting(address weightedVoteContractAddress) public view returns (uint,uint,uint,uint,uint,uint) {
        return ITwoKeyWeightedVoteContract(weightedVoteContractAddress).getDynamicData();
    }


    function executeVoting(uint campaign_id, bytes signature) public returns (uint) {

        Campaign memory campaign = allCampaigns[campaign_id];

        require(campaign.finished == false);

        ITwoKeyWeightedVoteContract(campaign.votingContract).transferSig(signature);
        address [] memory allParticipants = ITwoKeyWeightedVoteContract(campaign.votingContract).getAllVoters();

        for(uint i=0; i<allParticipants.length; i++) {
            bool vote;
            uint power;

            (vote,power) = ITwoKeyWeightedVoteContract(campaign.votingContract).getVoteAndChoicePerAddress(allParticipants[i]);

            if(vote == true) {
                campaign.votesYes++;
                campaign.votingResultForYes += int(power);
            }
            if(vote == false){
                campaign.votesNo++;
                campaign.votingResultForNo += int(power);
            }
        }
        campaign.finished = true;
        allCampaigns[campaign_id] = campaign;
    }

    function getNumberOfVotingCampaigns() public view returns (uint) {
        return numberOfVotingCamapignsAndPetitions;
    }

    function getCampaignByAddressOfVoteContract(address voteContract) public view returns (string, bool, uint, uint, int, int, uint, bytes32, address) {
        Campaign memory campaign = votingContractToCampaign[voteContract];
        return (
        campaign.votingReason,
        campaign.finished,
        campaign.votesYes,
        campaign.votesNo,
        campaign.votingResultForYes,
        campaign.votingResultForNo,
        campaign.votingCampaignLengthInDays,
        campaign.campaignType,
        campaign.votingContract);
    }


    function getCampaign(uint id) public view returns (string, bool, uint, uint, int, int, uint, bytes32, address) {
        Campaign memory campaign = allCampaigns[id];
        return (
            campaign.votingReason,
            campaign.finished,
            campaign.votesYes,
            campaign.votesNo,
            campaign.votingResultForYes,
            campaign.votingResultForNo,
            campaign.votingCampaignLengthInDays,
            campaign.campaignType,
            campaign.votingContract);
    }


    function getNameAndIpfsHashes() public view returns (string,string,string) {
        return (nationName, ipfsForConstitution, ipfsHashForDAOPublicInfo);
    }

    function getMemberid(address _member) public view returns (uint) {
        return memberId[_member];
    }

}