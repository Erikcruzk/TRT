{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (string _contractName, string _version) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "        registry = ITwoKeySingletonesRegistry(msg.sender);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _implementation = registry.getVersion(_contractName, _version);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_11"
      ],
      "vulnerability_findings": [
        {
          "name": "locked-ether",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": 100,
          "vulnerability_code": "    function () payable public {\n\n        address _impl = implementation();\n\n        require(_impl != address(0));\n\n\n\n        assembly {\n\n            let ptr := mload(0x40)\n\n            calldatacopy(ptr, 0, calldatasize)\n\n            let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\n\n            let size := returndatasize\n\n            returndatacopy(ptr, 0, size)\n\n\n\n            switch result\n\n            case 0 { revert(ptr, size) }\n\n            default { return(ptr, size) }\n\n        }\n",
          "message": "Contract locking ether found in UpgradabilityProxyAcquisition.sol:\n\tContract UpgradabilityProxyAcquisition has payable functions:\n\t - fallback (UpgradabilityProxyAcquisition.sol#85-100)\n\tBut does not have a function to withdraw the ether\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": 100,
          "vulnerability_code": "    function () payable public {\n\n        address _impl = implementation();\n\n        require(_impl != address(0));\n\n\n\n        assembly {\n\n            let ptr := mload(0x40)\n\n            calldatacopy(ptr, 0, calldatasize)\n\n            let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\n\n            let size := returndatasize\n\n            returndatacopy(ptr, 0, size)\n\n\n\n            switch result\n\n            case 0 { revert(ptr, size) }\n\n            default { return(ptr, size) }\n\n        }\n",
          "message": "Proxy.fallback uses assembly (UpgradabilityProxyAcquisition.sol#85-100)\n\t- UpgradabilityProxyAcquisition.sol#89-100\n"
        },
        {
          "name": "pragma",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": "Different versions of Solidity is used in UpgradabilityProxyAcquisition.sol:\n\t- Version used: ['^0.4.0', '^0.4.24']\n\t- UpgradabilityProxyAcquisition.sol#3 declares pragma solidity^0.4.24\n\t- UpgradabilityProxyAcquisition.sol#43 declares pragma solidity^0.4.24\n\t- UpgradabilityProxyAcquisition.sol#67 declares pragma solidity^0.4.24\n\t- UpgradabilityProxyAcquisition.sol#105 declares pragma solidity^0.4.0\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addVersion(string _contractName, string version, address implementation) public;\n",
          "message": "ITwoKeySingletonesRegistry.addVersion (UpgradabilityProxyAcquisition.sol#30) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getVersion(string _contractName, string version) public view returns (address);\n",
          "message": "ITwoKeySingletonesRegistry.getVersion (UpgradabilityProxyAcquisition.sol#38) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": 62,
          "vulnerability_code": "    function implementation() public view returns (address) {\n\n        return _implementation;\n",
          "message": "UpgradeabilityStorage.implementation (UpgradabilityProxyAcquisition.sol#60-62) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": 100,
          "vulnerability_code": "    function () payable public {\n\n        address _impl = implementation();\n\n        require(_impl != address(0));\n\n\n\n        assembly {\n\n            let ptr := mload(0x40)\n\n            calldatacopy(ptr, 0, calldatasize)\n\n            let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\n\n            let size := returndatasize\n\n            returndatacopy(ptr, 0, size)\n\n\n\n            switch result\n\n            case 0 { revert(ptr, size) }\n\n            default { return(ptr, size) }\n\n        }\n",
          "message": "Proxy.fallback (UpgradabilityProxyAcquisition.sol#85-100) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;\n",
          "message": "Detected issues with version pragma in UpgradabilityProxyAcquisition.sol:\n\t- pragma solidity^0.4.0 (UpgradabilityProxyAcquisition.sol#105): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address internal _implementation;\n",
          "message": "Variable 'UpgradeabilityStorage._implementation' (UpgradabilityProxyAcquisition.sol#54) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (string _contractName, string _version) public {\n",
          "message": "Parameter '_contractName' of UpgradabilityProxyAcquisition. (UpgradabilityProxyAcquisition.sol#110) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (string _contractName, string _version) public {\n",
          "message": "Parameter '_version' of UpgradabilityProxyAcquisition. (UpgradabilityProxyAcquisition.sol#110) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Proxy {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function () payable public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addVersion(string _contractName, string version, address implementation) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addVersion(string _contractName, string version, address implementation) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getVersion(string _contractName, string version) public view returns (address);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getVersion(string _contractName, string version) public view returns (address);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (string _contractName, string _version) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (string _contractName, string _version) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 89,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addVersion(string _contractName, string version, address implementation) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getVersion(string _contractName, string version) public view returns (address);\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}