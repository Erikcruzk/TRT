{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_41"
      ],
      "vulnerability_findings": [
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 225,
          "vulnerability_to_line": 226,
          "vulnerability_code": "    ITwoKeySingletonesRegistry internal registry;\n",
          "message": "UpgradeabilityStorage.registry (TwoKeyCampaignValidator.sol#225-226) is never initialized. It is used in:\n\t- initialize (TwoKeyCampaignValidator.sol#248-251)\n"
        },
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": 229,
          "vulnerability_code": "    address internal _implementation;\n",
          "message": "UpgradeabilityStorage._implementation (TwoKeyCampaignValidator.sol#228-229) is never initialized. It is used in:\n\t- implementation (TwoKeyCampaignValidator.sol#234-237)\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": 27,
          "vulnerability_code": "    function at(address _addr) internal view returns (bytes o_code) {\n\n        assembly {\n\n        // retrieve the size of the code, this needs assembly\n\n            let size := extcodesize(_addr)\n\n        // allocate output byte array - this could also be done without assembly\n\n        // by using o_code = new bytes(size)\n\n            o_code := mload(0x40)\n\n        // new \"memory end\" including padding\n\n            mstore(0x40, add(o_code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n\n        // store length in memory\n\n            mstore(o_code, size)\n\n        // actually retrieve the code, this needs assembly\n\n            extcodecopy(_addr, add(o_code, 0x20), 0, size)\n\n        }\n\n    }\n",
          "message": "GetCode.at (TwoKeyCampaignValidator.sol#12-27) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 431,
          "vulnerability_to_line": 447,
          "vulnerability_code": "    function stringToBytes32(\n\n        string memory source\n\n    )\n\n    internal\n\n    pure\n\n    returns (bytes32 result)\n\n    {\n\n        bytes memory tempEmptyStringTest = bytes(source);\n\n        if (tempEmptyStringTest.length == 0) {\n\n            return 0x0;\n\n        }\n\n        assembly {\n\n            result := mload(add(source, 32))\n\n        }\n\n    }\n\n\n",
          "message": "TwoKeyCampaignValidator.stringToBytes32 (TwoKeyCampaignValidator.sol#431-447) is declared view but contains assembly code\n"
        },
        {
          "name": "locked-ether",
          "vulnerability_from_line": 248,
          "vulnerability_to_line": 251,
          "vulnerability_code": "    function initialize(address sender) public payable {\n\n        require(msg.sender == address(registry));\n\n    }\n",
          "message": "Contract locking ether found in TwoKeyCampaignValidator.sol:\n\tContract TwoKeyCampaignValidator has payable functions:\n\t - initialize (TwoKeyCampaignValidator.sol#248-251)\n\tBut does not have a function to withdraw the ether\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": 27,
          "vulnerability_code": "    function at(address _addr) internal view returns (bytes o_code) {\n\n        assembly {\n\n        // retrieve the size of the code, this needs assembly\n\n            let size := extcodesize(_addr)\n\n        // allocate output byte array - this could also be done without assembly\n\n        // by using o_code = new bytes(size)\n\n            o_code := mload(0x40)\n\n        // new \"memory end\" including padding\n\n            mstore(0x40, add(o_code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n\n        // store length in memory\n\n            mstore(o_code, size)\n\n        // actually retrieve the code, this needs assembly\n\n            extcodecopy(_addr, add(o_code, 0x20), 0, size)\n\n        }\n\n    }\n",
          "message": "GetCode.at uses assembly (TwoKeyCampaignValidator.sol#12-27)\n\t- TwoKeyCampaignValidator.sol#13-27\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 431,
          "vulnerability_to_line": 447,
          "vulnerability_code": "    function stringToBytes32(\n\n        string memory source\n\n    )\n\n    internal\n\n    pure\n\n    returns (bytes32 result)\n\n    {\n\n        bytes memory tempEmptyStringTest = bytes(source);\n\n        if (tempEmptyStringTest.length == 0) {\n\n            return 0x0;\n\n        }\n\n        assembly {\n\n            result := mload(add(source, 32))\n\n        }\n\n    }\n\n\n",
          "message": "TwoKeyCampaignValidator.stringToBytes32 uses assembly (TwoKeyCampaignValidator.sol#431-447)\n\t- TwoKeyCampaignValidator.sol#442-447\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": 54,
          "vulnerability_code": "    address public conversionHandler;\n",
          "message": "ITwoKeyAcquisitionCampaignStateVariables.conversionHandler should be constant (TwoKeyCampaignValidator.sol#53-54)\nITwoKeyAcquisitionCampaignStateVariables.twoKeyAcquisitionLogicHandler should be constant (TwoKeyCampaignValidator.sol#52-53)\nITwoKeyCampaignPublicAddresses.contractor should be constant (TwoKeyCampaignValidator.sol#38)\nITwoKeyCampaignPublicAddresses.moderator should be constant (TwoKeyCampaignValidator.sol#39)\nITwoKeyCampaignPublicAddresses.twoKeySingletonesRegistry should be constant (TwoKeyCampaignValidator.sol#37-38)\nITwoKeyDonationCampaignFetchAddresses.twoKeyDonationCampaign should be constant (TwoKeyCampaignValidator.sol#102-103)\nITwoKeyDonationCampaignFetchAddresses.twoKeyDonationConversionHandler should be constant (TwoKeyCampaignValidator.sol#101-102)\nUpgradeabilityStorage._implementation should be constant (TwoKeyCampaignValidator.sol#228-229)\n"
        },
        {
          "name": "pragma",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": "Different versions of Solidity is used in TwoKeyCampaignValidator.sol:\n\t- Version used: ['^0.4.0', '^0.4.24']\n\t- TwoKeyCampaignValidator.sol#3 declares pragma solidity^0.4.24\n\t- TwoKeyCampaignValidator.sol#31-32 declares pragma solidity^0.4.24\n\t- TwoKeyCampaignValidator.sol#45-47 declares pragma solidity^0.4.24\n\t- TwoKeyCampaignValidator.sol#60-61 declares pragma solidity^0.4.24\n\t- TwoKeyCampaignValidator.sol#71-73 declares pragma solidity^0.4.0\n\t- TwoKeyCampaignValidator.sol#98-100 declares pragma solidity^0.4.0\n\t- TwoKeyCampaignValidator.sol#107-109 declares pragma solidity^0.4.0\n\t- TwoKeyCampaignValidator.sol#118-120 declares pragma solidity^0.4.0\n\t- TwoKeyCampaignValidator.sol#169-171 declares pragma solidity^0.4.24\n\t- TwoKeyCampaignValidator.sol#177-179 declares pragma solidity^0.4.24\n\t- TwoKeyCampaignValidator.sol#217-219 declares pragma solidity^0.4.24\n\t- TwoKeyCampaignValidator.sol#241-243 declares pragma solidity^0.4.24\n\t- TwoKeyCampaignValidator.sol#255-256 declares pragma solidity^0.4.24\n\t- TwoKeyCampaignValidator.sol#268-270 declares pragma solidity^0.4.24\n\t- TwoKeyCampaignValidator.sol#276-278 declares pragma solidity^0.4.24\n\t- TwoKeyCampaignValidator.sol#299-301 declares pragma solidity^0.4.24\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": 41,
          "vulnerability_code": "    function publicLinkKeyOf(address me) public view returns (address);\n",
          "message": "ITwoKeyCampaignPublicAddresses.publicLinkKeyOf (TwoKeyCampaignValidator.sol#40-41) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": 56,
          "vulnerability_code": "    function getInventoryBalance() public view returns (uint);\n",
          "message": "ITwoKeyAcquisitionCampaignStateVariables.getInventoryBalance (TwoKeyCampaignValidator.sol#55-56) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": 80,
          "vulnerability_code": "    function buyTokensForModeratorRewards(\n\n        uint moderatorFee\n\n    )\n\n    public;\n\n\n",
          "message": "ITwoKeyDonationCampaign.buyTokensForModeratorRewards (TwoKeyCampaignValidator.sol#75-80) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": 88,
          "vulnerability_code": "    function buyTokensAndDistributeReferrerRewards(\n\n        uint256 _maxReferralRewardETHWei,\n\n        address _converter,\n\n        uint _conversionId\n\n    )\n\n    public\n\n    returns (uint);\n\n\n",
          "message": "ITwoKeyDonationCampaign.buyTokensAndDistributeReferrerRewards (TwoKeyCampaignValidator.sol#80-88) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": 89,
          "vulnerability_code": "    function getReferrerPlasmaBalance(address _influencer) public view returns (uint);\n",
          "message": "ITwoKeyDonationCampaign.getReferrerPlasmaBalance (TwoKeyCampaignValidator.sol#88-89) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 89,
          "vulnerability_to_line": 90,
          "vulnerability_code": "    function updateReferrerPlasmaBalance(address _influencer, uint _balance) public;\n",
          "message": "ITwoKeyDonationCampaign.updateReferrerPlasmaBalance (TwoKeyCampaignValidator.sol#89-90) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": 91,
          "vulnerability_code": "    function getReferrerCut(address me) public view returns (uint256);\n",
          "message": "ITwoKeyDonationCampaign.getReferrerCut (TwoKeyCampaignValidator.sol#90-91) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": 92,
          "vulnerability_code": "    function updateContractorProceeds(uint value) public;\n",
          "message": "ITwoKeyDonationCampaign.updateContractorProceeds (TwoKeyCampaignValidator.sol#91-92) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 92,
          "vulnerability_to_line": 93,
          "vulnerability_code": "    function getReceivedFrom(address _receiver) public view returns (address);\n",
          "message": "ITwoKeyDonationCampaign.getReceivedFrom (TwoKeyCampaignValidator.sol#92-93) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": 94,
          "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint256);\n",
          "message": "ITwoKeyDonationCampaign.balanceOf (TwoKeyCampaignValidator.sol#93-94) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": 114,
          "vulnerability_code": "    function implementation()\n\n    public\n\n    view\n\n    returns (address);\n",
          "message": "IGetImplementation.implementation (TwoKeyCampaignValidator.sol#110-114) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 204,
          "vulnerability_to_line": 206,
          "vulnerability_code": "    function addVersion(string _contractName, string version, address implementation) public;\n\n\n",
          "message": "ITwoKeySingletonesRegistry.addVersion (TwoKeyCampaignValidator.sol#204-206) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 212,
          "vulnerability_to_line": 213,
          "vulnerability_code": "    function getVersion(string _contractName, string version) public view returns (address);\n",
          "message": "ITwoKeySingletonesRegistry.getVersion (TwoKeyCampaignValidator.sol#212-213) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 234,
          "vulnerability_to_line": 237,
          "vulnerability_code": "    function implementation() public view returns (address) {\n\n        return _implementation;\n\n    }\n",
          "message": "UpgradeabilityStorage.implementation (TwoKeyCampaignValidator.sol#234-237) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 248,
          "vulnerability_to_line": 251,
          "vulnerability_code": "    function initialize(address sender) public payable {\n\n        require(msg.sender == address(registry));\n\n    }\n",
          "message": "Upgradeable.initialize (TwoKeyCampaignValidator.sol#248-251) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 261,
          "vulnerability_to_line": 262,
          "vulnerability_code": "    function getContractProxyAddress(string _contractName) public view returns (address);\n",
          "message": "ITwoKeySingletoneRegistryFetchAddress.getContractProxyAddress (TwoKeyCampaignValidator.sol#261-262) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 262,
          "vulnerability_to_line": 263,
          "vulnerability_code": "    function getNonUpgradableContractAddress(string contractName) public view returns (address);\n",
          "message": "ITwoKeySingletoneRegistryFetchAddress.getNonUpgradableContractAddress (TwoKeyCampaignValidator.sol#262-263) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 263,
          "vulnerability_to_line": 264,
          "vulnerability_code": "    function getLatestContractVersion(string contractName) public view returns (string);\n",
          "message": "ITwoKeySingletoneRegistryFetchAddress.getLatestContractVersion (TwoKeyCampaignValidator.sol#263-264) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 271,
          "vulnerability_to_line": 272,
          "vulnerability_code": "    function onlyMaintainer(address _sender) public view returns (bool);\n",
          "message": "ITwoKeyMaintainersRegistry.onlyMaintainer (TwoKeyCampaignValidator.sol#271-272) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 346,
          "vulnerability_to_line": 360,
          "vulnerability_code": "    function setInitialParams(\n\n        address _twoKeySingletoneRegistry,\n\n        address _proxyStorage\n\n    )\n\n    public\n\n    {\n\n        require(initialized == false);\n\n\n\n        TWO_KEY_SINGLETON_REGISTRY = _twoKeySingletoneRegistry;\n\n        PROXY_STORAGE_CONTRACT = ITwoKeyCampaignValidatorStorage(_proxyStorage);\n\n\n\n        initialized = true;\n\n    }\n\n\n",
          "message": "TwoKeyCampaignValidator.setInitialParams (TwoKeyCampaignValidator.sol#346-360) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 372,
          "vulnerability_to_line": 390,
          "vulnerability_code": "    function validateAcquisitionCampaign(\n\n        address campaign,\n\n        string nonSingletonHash\n\n    )\n\n    public\n\n    onlyTwoKeyFactory\n\n    {\n\n        address conversionHandler = ITwoKeyAcquisitionCampaignStateVariables(campaign).conversionHandler();\n\n        address logicHandler = ITwoKeyAcquisitionCampaignStateVariables(campaign).twoKeyAcquisitionLogicHandler();\n\n\n\n        PROXY_STORAGE_CONTRACT.setBool(keccak256(\"isCampaignValidated\", conversionHandler), true);\n\n        PROXY_STORAGE_CONTRACT.setBool(keccak256(\"isCampaignValidated\", logicHandler), true);\n\n        PROXY_STORAGE_CONTRACT.setBool(keccak256(\"isCampaignValidated\",campaign), true);\n\n        PROXY_STORAGE_CONTRACT.setString(keccak256(\"campaign2NonSingletonHash\",campaign), nonSingletonHash);\n\n\n\n        emitCreatedEvent(campaign);\n\n    }\n\n\n",
          "message": "TwoKeyCampaignValidator.validateAcquisitionCampaign (TwoKeyCampaignValidator.sol#372-390) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 395,
          "vulnerability_to_line": 409,
          "vulnerability_code": "    function validateDonationCampaign(\n\n        address campaign,\n\n        address donationConversionHandler,\n\n        string nonSingletonHash\n\n    )\n\n    public\n\n    onlyTwoKeyFactory\n\n    {\n\n        PROXY_STORAGE_CONTRACT.setBool(keccak256(\"isCampaignValidated\",campaign), true);\n\n        PROXY_STORAGE_CONTRACT.setString(keccak256(\"campaign2NonSingletonHash\",campaign), nonSingletonHash);\n\n\n\n        emitCreatedEvent(campaign);\n\n    }\n\n\n",
          "message": "TwoKeyCampaignValidator.validateDonationCampaign (TwoKeyCampaignValidator.sol#395-409) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 415,
          "vulnerability_to_line": 426,
          "vulnerability_code": "    function isConversionHandlerCodeValid(\n\n        address _conversionHandler\n\n    )\n\n    public\n\n    view\n\n    returns (bool)\n\n    {\n\n        require(PROXY_STORAGE_CONTRACT.getBool(keccak256(\"isCampaignValidated\",_conversionHandler)) == true);\n\n        return true;\n\n    }\n\n\n",
          "message": "TwoKeyCampaignValidator.isConversionHandlerCodeValid (TwoKeyCampaignValidator.sol#415-426) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 447,
          "vulnerability_to_line": 452,
          "vulnerability_code": "    function isCampaignValidated(address campaign) public view returns (bool) {\n\n        bytes32 hashKey = keccak256(\"isCampaignValidated\", campaign);\n\n        return PROXY_STORAGE_CONTRACT.getBool(hashKey);\n\n    }\n\n\n",
          "message": "TwoKeyCampaignValidator.isCampaignValidated (TwoKeyCampaignValidator.sol#447-452) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 452,
          "vulnerability_to_line": 456,
          "vulnerability_code": "    function campaign2NonSingletonHash(address campaign) public view returns (string) {\n\n        return PROXY_STORAGE_CONTRACT.getString(keccak256(\"campaign2NonSingletonHash\", campaign));\n\n    }\n\n\n",
          "message": "TwoKeyCampaignValidator.campaign2NonSingletonHash (TwoKeyCampaignValidator.sol#452-456) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": 73,
          "vulnerability_code": "pragma solidity ^0.4.0;\n\n\n",
          "message": "Detected issues with version pragma in TwoKeyCampaignValidator.sol:\n\t- pragma solidity^0.4.0 (TwoKeyCampaignValidator.sol#71-73): it allows old versions\n\t- pragma solidity^0.4.0 (TwoKeyCampaignValidator.sol#98-100): it allows old versions\n\t- pragma solidity^0.4.0 (TwoKeyCampaignValidator.sol#107-109): it allows old versions\n\t- pragma solidity^0.4.0 (TwoKeyCampaignValidator.sol#118-120): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": 229,
          "vulnerability_code": "    address internal _implementation;\n",
          "message": "Variable 'UpgradeabilityStorage._implementation' (TwoKeyCampaignValidator.sol#228-229) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 281,
          "vulnerability_to_line": 282,
          "vulnerability_code": "    address public TWO_KEY_SINGLETON_REGISTRY;\n",
          "message": "Variable 'ITwoKeySingletonUtils.TWO_KEY_SINGLETON_REGISTRY' (TwoKeyCampaignValidator.sol#281-282) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 347,
          "vulnerability_to_line": 348,
          "vulnerability_code": "        address _twoKeySingletoneRegistry,\n",
          "message": "Parameter '_twoKeySingletoneRegistry' of TwoKeyCampaignValidator.setInitialParams (TwoKeyCampaignValidator.sol#347-348) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 348,
          "vulnerability_to_line": 349,
          "vulnerability_code": "        address _proxyStorage\n",
          "message": "Parameter '_proxyStorage' of TwoKeyCampaignValidator.setInitialParams (TwoKeyCampaignValidator.sol#348-349) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 416,
          "vulnerability_to_line": 417,
          "vulnerability_code": "        address _conversionHandler\n",
          "message": "Parameter '_conversionHandler' of TwoKeyCampaignValidator.isConversionHandlerCodeValid (TwoKeyCampaignValidator.sol#416-417) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 340,
          "vulnerability_to_line": 341,
          "vulnerability_code": "    ITwoKeyCampaignValidatorStorage public PROXY_STORAGE_CONTRACT;\n",
          "message": "Variable 'TwoKeyCampaignValidator.PROXY_STORAGE_CONTRACT' (TwoKeyCampaignValidator.sol#340-341) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 440,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return 0x0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function at(address _addr) internal view returns (bytes o_code) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 243,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Upgradeable is UpgradeabilityStorage {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 169,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 177,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 241,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 255,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 268,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 276,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 299,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 431,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function stringToBytes32(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function at(address _addr) internal view returns (bytes o_code) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 382,
          "vulnerability_to_line": null,
          "vulnerability_code": "        PROXY_STORAGE_CONTRACT.setBool(keccak256(\"isCampaignValidated\", conversionHandler), true);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 383,
          "vulnerability_to_line": null,
          "vulnerability_code": "        PROXY_STORAGE_CONTRACT.setBool(keccak256(\"isCampaignValidated\", logicHandler), true);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 384,
          "vulnerability_to_line": null,
          "vulnerability_code": "        PROXY_STORAGE_CONTRACT.setBool(keccak256(\"isCampaignValidated\",campaign), true);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 385,
          "vulnerability_to_line": null,
          "vulnerability_code": "        PROXY_STORAGE_CONTRACT.setString(keccak256(\"campaign2NonSingletonHash\",campaign), nonSingletonHash);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 403,
          "vulnerability_to_line": null,
          "vulnerability_code": "        PROXY_STORAGE_CONTRACT.setBool(keccak256(\"isCampaignValidated\",campaign), true);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 404,
          "vulnerability_to_line": null,
          "vulnerability_code": "        PROXY_STORAGE_CONTRACT.setString(keccak256(\"campaign2NonSingletonHash\",campaign), nonSingletonHash);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 422,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(PROXY_STORAGE_CONTRACT.getBool(keccak256(\"isCampaignValidated\",_conversionHandler)) == true);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 448,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32 hashKey = keccak256(\"isCampaignValidated\", campaign);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 453,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return PROXY_STORAGE_CONTRACT.getString(keccak256(\"campaign2NonSingletonHash\", campaign));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function at(address _addr) internal view returns (bytes o_code) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 204,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addVersion(string _contractName, string version, address implementation) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 204,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addVersion(string _contractName, string version, address implementation) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 212,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getVersion(string _contractName, string version) public view returns (address);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 212,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getVersion(string _contractName, string version) public view returns (address);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 261,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getContractProxyAddress(string _contractName) public view returns (address);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 262,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getNonUpgradableContractAddress(string contractName) public view returns (address);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 263,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getLatestContractVersion(string contractName) public view returns (string);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 263,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getLatestContractVersion(string contractName) public view returns (string);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 291,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAddressFromTwoKeySingletonRegistry(string contractName) internal view returns (address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 374,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string nonSingletonHash\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 398,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string nonSingletonHash\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 452,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function campaign2NonSingletonHash(address campaign) public view returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 442,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 204,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addVersion(string _contractName, string version, address implementation) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 212,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getVersion(string _contractName, string version) public view returns (address);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 338,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool initialized;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 395,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function validateDonationCampaign(\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 449,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return PROXY_STORAGE_CONTRACT.getBool(hashKey);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 422,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(PROXY_STORAGE_CONTRACT.getBool(keccak256(\"isCampaignValidated\",_conversionHandler)) == true);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}