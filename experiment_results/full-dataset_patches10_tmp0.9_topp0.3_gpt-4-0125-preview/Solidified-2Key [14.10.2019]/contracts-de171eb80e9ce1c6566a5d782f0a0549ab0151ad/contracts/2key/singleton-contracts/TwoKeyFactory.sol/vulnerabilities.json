{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1000,
          "vulnerability_to_line": null,
          "vulnerability_code": "        while (idx + 65 <= sig.length) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1004,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (idx + msg_len <= sig.length) {  // its  a < and not a <= because we dont want this to be the final iteration for the converter\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1055,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i = 0; i < influencers.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1056,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (i < weights.length) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1737,
          "vulnerability_to_line": null,
          "vulnerability_code": "                if (i == influencers.length - 1) {  // if its the last influencer then all the bounty goes to it.\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1745,
          "vulnerability_to_line": null,
          "vulnerability_code": "                        b = totalBounty2keys.div(influencers.length - i);\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 257,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (string _contractName, string _version, address twoKeySingletonRegistry) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 258,
          "vulnerability_to_line": null,
          "vulnerability_code": "        twoKeyFactory = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 259,
          "vulnerability_to_line": null,
          "vulnerability_code": "        registry = ITwoKeySingletonesRegistry(twoKeySingletonRegistry);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 260,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _implementation = registry.getVersion(_contractName, _version);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 261,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 436,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=1; i<numberOfVestingPortions + 1; i++) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 437,
          "vulnerability_to_line": null,
          "vulnerability_code": "            portionToUnlockingDate[i] = bonusVestingStartDate + (i-1) * (numberOfDaysBetweenPortions * (1 days));\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 437,
          "vulnerability_to_line": null,
          "vulnerability_code": "            portionToUnlockingDate[i] = bonusVestingStartDate + (i-1) * (numberOfDaysBetweenPortions * (1 days));\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 476,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=1; i<numberOfVestingPortions + 1; i++) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 505,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<numberOfVestingPortions; i++) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 533,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<numberOfVestingPortions+1;i++) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 534,
          "vulnerability_to_line": null,
          "vulnerability_code": "            portionToUnlockingDate[i] = portionToUnlockingDate[i] + shift;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 534,
          "vulnerability_to_line": null,
          "vulnerability_code": "            portionToUnlockingDate[i] = portionToUnlockingDate[i] + shift;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 605,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i< numberOfVestingPortions+1; i++) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 606,
          "vulnerability_to_line": null,
          "vulnerability_code": "            dates[i] = portionToUnlockingDate[i];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1659,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (influencer == plasmaOf(contractor)) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1741,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    uint256 cut = ITwoKeyAcquisitionCampaignERC20(twoKeyAcquisitionCampaign).getReferrerCut(influencers[i]);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1800,
          "vulnerability_to_line": null,
          "vulnerability_code": "            referrersPendingPlasmaBalance[i] = ITwoKeyAcquisitionCampaignERC20(twoKeyAcquisitionCampaign).getReferrerPlasmaBalance(_referrerPlasmaList[i]);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1801,
          "vulnerability_to_line": null,
          "vulnerability_code": "            referrersTotalEarningsPlasmaBalance[i] = referrerPlasma2TotalEarnings2key[_referrerPlasmaList[i]];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1838,
          "vulnerability_to_line": null,
          "vulnerability_code": "            earnings[i] = referrerPlasma2EarningsPerConversion[_referrer][conversionIds[i]];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 436,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=1; i<numberOfVestingPortions + 1; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 476,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=1; i<numberOfVestingPortions + 1; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 505,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<numberOfVestingPortions; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 533,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<numberOfVestingPortions+1;i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 605,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i< numberOfVestingPortions+1; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1055,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i = 0; i < influencers.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1127,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for(uint i=0; i<numberOfInfluencers;i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1148,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=1; i<numberOfElements; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1799,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i=0; i<numberOfAddresses; i++){\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1837,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<len; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 927,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require (sig.length >= 65+idx, 'bad signature length');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 954,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(v==27 || v==28,'bad sig v');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1006,
          "vulnerability_to_line": null,
          "vulnerability_code": "                require(weights[count_influencers] > 0,'weight not defined (1..255)');  // 255 are used to indicate default (equal part) behaviour\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1036,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(idx == sig.length,'illegal message size');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1046,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(old_key != address(0),'no public link key');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1057,
          "vulnerability_to_line": null,
          "vulnerability_code": "                require (recoverHash(keccak256(abi.encodePacked(weights[i], keys[i], influencers[i])),sig,offsets[i]) == old_key, 'illegal signature');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1061,
          "vulnerability_to_line": null,
          "vulnerability_code": "                require (recoverHash(keccak256(abi.encodePacked(influencers[i])),sig,offsets[i]) == old_key, 'illegal last signature');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1250,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(values[1] >= values[0], \"max contribution criteria not satisfied\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1251,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(values[4] > values[3], \"campaign start time can't be greater than end time\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 551,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(p.isPortionWithdrawn[portion] == false && block.timestamp > portionToUnlockingDate[portion]);\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1390,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(block.timestamp >= campaignStartTime && block.timestamp <= campaignEndTime) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1391,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return true;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1392,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1742,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    if (cut > 0 && cut <= 101) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1743,
          "vulnerability_to_line": null,
          "vulnerability_code": "                        b = totalBounty2keys.mul(cut.sub(1)).div(100);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1744,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    } else {// cut == 0 or 255 indicates equal particine of the bounty\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1745,
          "vulnerability_to_line": null,
          "vulnerability_code": "                        b = totalBounty2keys.div(influencers.length - i);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1746,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 1670,
          "vulnerability_to_line": null,
          "vulnerability_code": "            n_influencers--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 436,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=1; i<numberOfVestingPortions + 1; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 458,
          "vulnerability_to_line": null,
          "vulnerability_code": "        numberOfPurchases++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 476,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=1; i<numberOfVestingPortions + 1; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 505,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<numberOfVestingPortions; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 533,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<numberOfVestingPortions+1;i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 605,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i< numberOfVestingPortions+1; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 966,
          "vulnerability_to_line": null,
          "vulnerability_code": "            n_influencers++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1007,
          "vulnerability_to_line": null,
          "vulnerability_code": "                idx++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1034,
          "vulnerability_to_line": null,
          "vulnerability_code": "            count_influencers++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1055,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i = 0; i < influencers.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1127,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for(uint i=0; i<numberOfInfluencers;i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1148,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=1; i<numberOfElements; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1662,
          "vulnerability_to_line": null,
          "vulnerability_code": "            n_influencers++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1710,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for(i=0; i<numberOfInfluencers; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1720,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for(i=0; i<numberOfInfluencers - 1; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1730,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for(i=0; i<numberOfInfluencers; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1734,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (i = 0; i < numberOfInfluencers; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1799,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i=0; i<numberOfAddresses; i++){\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1837,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<len; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1250,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(values[1] >= values[0], \"max contribution criteria not satisfied\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1251,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(values[4] > values[3], \"campaign start time can't be greater than end time\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_201"
      ],
      "vulnerability_findings": [
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address internal _implementation;\n",
          "message": "UpgradeabilityCampaignStorage._implementation (TwoKeyFactory.sol#201) is never initialized. It is used in:\n\t- implementation (TwoKeyFactory.sol#207-209)\n"
        },
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 372,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address converter;\n",
          "message": "TwoKeyPurchasesHandler.converter (TwoKeyFactory.sol#372) is never initialized. It is used in:\n\t- withdrawTokens (TwoKeyFactory.sol#542-563)\n"
        },
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 1907,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ITwoKeySingletonesRegistry internal registry;\n",
          "message": "UpgradeabilityStorage.registry (TwoKeyFactory.sol#1907) is never initialized. It is used in:\n\t- initialize (TwoKeyFactory.sol#1930-1932)\n"
        },
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 1910,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address internal _implementation;\n",
          "message": "UpgradeabilityStorage._implementation (TwoKeyFactory.sol#1910) is never initialized. It is used in:\n\t- implementation (TwoKeyFactory.sol#1916-1918)\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 811,
          "vulnerability_to_line": 837,
          "vulnerability_code": "    function params0(address c, bytes _method) public view returns (uint answer) {\n\n        // https://medium.com/@blockchain101/calling-the-function-of-another-contract-in-solidity-f9edfa921f4c\n\n        //    dc = c;\n\n        bytes4 sig = bytes4(keccak256(_method));\n\n        assembly {\n\n        // move pointer to free memory spot\n\n            let ptr := mload(0x40)\n\n        // put function sig at memory spot\n\n            mstore(ptr,sig)\n\n\n\n            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n\n            15000, // gas limit\n\n            c, // sload(dc_slot),  // to addr. append var to _slot to access storage variable\n\n            0, // not transfer any ether (comment if using staticcall)\n\n            ptr, // Inputs are stored at location ptr\n\n            0x04, // Inputs are 0 bytes long\n\n            ptr,  //Store output over input\n\n            0x20) //Outputs are 1 bytes long\n\n\n\n            if eq(result, 0) {\n\n                revert(0, 0)\n\n            }\n\n\n\n            answer := mload(ptr) // Assign output to answer var\n\n            mstore(0x40,add(ptr,0x24)) // Set storage pointer to new space\n\n        }\n",
          "message": "Call.params0 (TwoKeyFactory.sol#811-837) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 839,
          "vulnerability_to_line": 867,
          "vulnerability_code": "    function params1(address c, bytes _method, uint _val) public view returns (uint answer) {\n\n        // https://medium.com/@blockchain101/calling-the-function-of-another-contract-in-solidity-f9edfa921f4c\n\n        //    dc = c;\n\n        bytes4 sig = bytes4(keccak256(_method));\n\n        assembly {\n\n        // move pointer to free memory spot\n\n            let ptr := mload(0x40)\n\n        // put function sig at memory spot\n\n            mstore(ptr,sig)\n\n        // append argument after function sig\n\n            mstore(add(ptr,0x04), _val)\n\n\n\n            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n\n            15000, // gas limit\n\n            c, // sload(dc_slot),  // to addr. append var to _slot to access storage variable\n\n            0, // not transfer any ether (comment if using staticcall)\n\n            ptr, // Inputs are stored at location ptr\n\n            0x24, // Inputs are 0 bytes long\n\n            ptr,  //Store output over input\n\n            0x20) //Outputs are 1 bytes long\n\n\n\n            if eq(result, 0) {\n\n                revert(0, 0)\n\n            }\n\n\n\n            answer := mload(ptr) // Assign output to answer var\n\n            mstore(0x40,add(ptr,0x24)) // Set storage pointer to new space\n\n        }\n",
          "message": "Call.params1 (TwoKeyFactory.sol#839-867) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 869,
          "vulnerability_to_line": 899,
          "vulnerability_code": "    function params2(address c, bytes _method, uint _val1, uint _val2) public view returns (uint answer) {\n\n        // https://medium.com/@blockchain101/calling-the-function-of-another-contract-in-solidity-f9edfa921f4c\n\n        //    dc = c;\n\n        bytes4 sig = bytes4(keccak256(_method));\n\n        assembly {\n\n        // move pointer to free memory spot\n\n            let ptr := mload(0x40)\n\n        // put function sig at memory spot\n\n            mstore(ptr,sig)\n\n        // append argument after function sig\n\n            mstore(add(ptr,0x04), _val1)\n\n            mstore(add(ptr,0x24), _val2)\n\n\n\n            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n\n            15000, // gas limit\n\n            c, // sload(dc_slot),  // to addr. append var to _slot to access storage variable\n\n            0, // not transfer any ether (comment if using staticcall)\n\n            ptr, // Inputs are stored at location ptr\n\n            0x44, // Inputs are 4 bytes for signature and 2 uint256\n\n            ptr,  //Store output over input\n\n            0x20) //Outputs are 1 uint long\n\n\n\n        // TODO cause revert\n\n        //            if eq(result, 0) {\n\n        //                revert(0, 0)\n\n        //            }\n\n\n\n            answer := mload(ptr) // Assign output to answer var\n\n            mstore(0x40,add(ptr,0x20)) // Set storage pointer to new space\n\n        }\n",
          "message": "Call.params2 (TwoKeyFactory.sol#869-899) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 901,
          "vulnerability_to_line": 909,
          "vulnerability_code": "    function loadAddress(bytes sig, uint idx) public pure returns (address) {\n\n        address influencer;\n\n        idx += 20;\n\n        assembly\n\n        {\n\n            influencer := mload(add(sig, idx))\n\n        }\n\n        return influencer;\n",
          "message": "Call.loadAddress (TwoKeyFactory.sol#901-909) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 911,
          "vulnerability_to_line": 919,
          "vulnerability_code": "    function loadUint8(bytes sig, uint idx) public pure returns (uint8) {\n\n        uint8 weight;\n\n        idx += 1;\n\n        assembly\n\n        {\n\n            weight := mload(add(sig, idx))\n\n        }\n\n        return weight;\n",
          "message": "Call.loadUint8 (TwoKeyFactory.sol#911-919) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 922,
          "vulnerability_to_line": 957,
          "vulnerability_code": "    function recoverHash(bytes32 hash, bytes sig, uint idx) public pure returns (address) {\n\n        // same as recoverHash in utils/sign.js\n\n        // The signature format is a compact form of:\n\n        //   {bytes32 r}{bytes32 s}{uint8 v}\n\n        // Compact means, uint8 is not padded to 32 bytes.\n\n        require (sig.length >= 65+idx, 'bad signature length');\n\n        idx += 32;\n\n        bytes32 r;\n\n        assembly\n\n        {\n\n            r := mload(add(sig, idx))\n\n        }\n\n\n\n        idx += 32;\n\n        bytes32 s;\n\n        assembly\n\n        {\n\n            s := mload(add(sig, idx))\n\n        }\n\n\n\n        idx += 1;\n\n        uint8 v;\n\n        assembly\n\n        {\n\n            v := mload(add(sig, idx))\n\n        }\n\n        if (v >= 32) { // handle case when signature was made with ethereum web3.eth.sign or getSign which is for signing ethereum transactions\n\n            v -= 32;\n\n            bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\"; // 32 is the number of bytes in the following hash\n\n            hash = keccak256(abi.encodePacked(prefix, hash));\n\n        }\n\n        if (v <= 1) v += 27;\n\n        require(v==27 || v==28,'bad sig v');\n\n        return ecrecover(hash, v, r, s);\n\n\n",
          "message": "Call.recoverHash (TwoKeyFactory.sol#922-957) is declared view but contains assembly code\n"
        },
        {
          "name": "locked-ether",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": 247,
          "vulnerability_code": "    function () payable public {\n\n        address _impl = implementation();\n\n        require(_impl != address(0));\n\n\n\n        assembly {\n\n            let ptr := mload(0x40)\n\n            calldatacopy(ptr, 0, calldatasize)\n\n            let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\n\n            let size := returndatasize\n\n            returndatacopy(ptr, 0, size)\n\n\n\n            switch result\n\n            case 0 { revert(ptr, size) }\n\n            default { return(ptr, size) }\n\n        }\n",
          "message": "Contract locking ether found in TwoKeyFactory.sol:\n\tContract ProxyCampaign has payable functions:\n\t - fallback (TwoKeyFactory.sol#232-247)\n\tBut does not have a function to withdraw the ether\n"
        },
        {
          "name": "locked-ether",
          "vulnerability_from_line": 1930,
          "vulnerability_to_line": 1932,
          "vulnerability_code": "    function initialize(address sender) public payable {\n\n        require(msg.sender == address(registry));\n",
          "message": "Contract locking ether found in TwoKeyFactory.sol:\n\tContract TwoKeyFactory has payable functions:\n\t - initialize (TwoKeyFactory.sol#1930-1932)\n\t - createProxiesForAcquisitions (TwoKeyFactory.sol#2092-2194)\n\tBut does not have a function to withdraw the ether\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 1294,
          "vulnerability_to_line": 1300,
          "vulnerability_code": "    function activateCampaign() public onlyContractor {\n\n        require(IS_CAMPAIGN_ACTIVE == false);\n\n        uint balanceOfTokenBeingSoldOnAcquisition = getInventoryBalance();\n\n        //balance is in weis, price is in weis and hardcap is regular number\n\n        require((balanceOfTokenBeingSoldOnAcquisition * pricePerUnitInETHWeiOrUSD).div(10**18) >= campaignHardCapWei);\n\n        IS_CAMPAIGN_ACTIVE = true;\n",
          "message": "Reentrancy in TwoKeyAcquisitionLogicHandler.activateCampaign (TwoKeyFactory.sol#1294-1300):\n\tExternal calls:\n\t- balanceOfTokenBeingSoldOnAcquisition = getInventoryBalance() (TwoKeyFactory.sol#1296)\n\tState variables written after the call(s):\n\t- IS_CAMPAIGN_ACTIVE (TwoKeyFactory.sol#1299)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 1238,
          "vulnerability_to_line": 1289,
          "vulnerability_code": "    function setInitialParamsLogicHandler(\n\n        uint [] values,\n\n        string _currency,\n\n        address _assetContractERC20,\n\n        address _moderator,\n\n        address _contractor,\n\n        address _acquisitionCampaignAddress,\n\n        address _twoKeySingletoneRegistry,\n\n        address _twoKeyConversionHandler\n\n    )\n\n    public\n\n    {\n\n        require(values[1] >= values[0], \"max contribution criteria not satisfied\");\n\n        require(values[4] > values[3], \"campaign start time can't be greater than end time\");\n\n        require(isCampaignInitialized == false);\n\n\n\n        if(values[0] == values[1]) {\n\n            isFixedInvestmentAmount = true;\n\n        }\n\n\n\n        minContributionETHorFiatCurrency = values[0];\n\n        maxContributionETHorFiatCurrency = values[1];\n\n        pricePerUnitInETHWeiOrUSD = values[2];\n\n        campaignStartTime = values[3];\n\n        campaignEndTime = values[4];\n\n        maxConverterBonusPercent = values[5];\n\n\n\n        //Add as 6th argument incentive model uint\n\n        incentiveModel = IncentiveModel(values[6]);\n\n        if(values[7] == 1) {\n\n            isAcceptingFiatOnly = true;\n\n        }\n\n\n\n        campaignHardCapWei = values[8];\n\n\n\n        currency = _currency;\n\n        assetContractERC20 = _assetContractERC20;\n\n        moderator = _moderator;\n\n        contractor = _contractor;\n\n        unit_decimals = IERC20(_assetContractERC20).decimals();\n\n\n\n        twoKeyAcquisitionCampaign = _acquisitionCampaignAddress;\n\n        twoKeySingletoneRegistry = _twoKeySingletoneRegistry;\n\n\n\n        twoKeyRegistry = ITwoKeySingletoneRegistryFetchAddress(twoKeySingletoneRegistry).getContractProxyAddress(\"TwoKeyRegistry\");\n\n        twoKeyMaintainersRegistry = ITwoKeySingletoneRegistryFetchAddress(twoKeySingletoneRegistry).getContractProxyAddress(\"TwoKeyMaintainersRegistry\");\n\n\n\n        ownerPlasma = plasmaOf(contractor);\n\n        twoKeyConversionHandler = _twoKeyConversionHandler;\n\n\n\n        isCampaignInitialized = true;\n",
          "message": "Reentrancy in TwoKeyAcquisitionLogicHandler.setInitialParamsLogicHandler (TwoKeyFactory.sol#1238-1289):\n\tExternal calls:\n\t- unit_decimals = IERC20(_assetContractERC20).decimals() (TwoKeyFactory.sol#1277)\n\t- twoKeyRegistry = ITwoKeySingletoneRegistryFetchAddress(twoKeySingletoneRegistry).getContractProxyAddress(TwoKeyRegistry) (TwoKeyFactory.sol#1282)\n\t- twoKeyMaintainersRegistry = ITwoKeySingletoneRegistryFetchAddress(twoKeySingletoneRegistry).getContractProxyAddress(TwoKeyMaintainersRegistry) (TwoKeyFactory.sol#1283)\n\t- ownerPlasma = plasmaOf(contractor) (TwoKeyFactory.sol#1285)\n\tState variables written after the call(s):\n\t- isCampaignInitialized (TwoKeyFactory.sol#1288)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 542,
          "vulnerability_to_line": 563,
          "vulnerability_code": "    function withdrawTokens(\n\n        uint conversionId,\n\n        uint portion\n\n    )\n\n    public\n\n    {\n\n        Purchase p = conversionIdToPurchase[conversionId];\n\n        //Only converter of maintainer can call this function\n\n        require(msg.sender == p.converter || ITwoKeyEventSource(twoKeyEventSource).isAddressMaintainer(msg.sender) == true);\n\n        require(p.isPortionWithdrawn[portion] == false && block.timestamp > portionToUnlockingDate[portion]);\n\n        //Transfer tokens\n\n        require(IERC20(assetContractERC20).transfer(p.converter, p.portionAmounts[portion]));\n\n        p.isPortionWithdrawn[portion] = true;\n\n\n\n        emit TokensWithdrawn (\n\n            block.timestamp,\n\n            msg.sender,\n\n            converter,\n\n            portion,\n\n            p.portionAmounts[portion]\n\n        );\n",
          "message": "Reentrancy in TwoKeyPurchasesHandler.withdrawTokens (TwoKeyFactory.sol#542-563):\n\tExternal calls:\n\t- require(bool)(msg.sender == p.converter || ITwoKeyEventSource(twoKeyEventSource).isAddressMaintainer(msg.sender) == true) (TwoKeyFactory.sol#550)\n\t- require(bool)(IERC20(assetContractERC20).transfer(p.converter,p.portionAmounts[portion])) (TwoKeyFactory.sol#553)\n\tState variables written after the call(s):\n\t- conversionIdToPurchase (TwoKeyFactory.sol#554)\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 1624,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool flag;\n",
          "message": "flag in TwoKeyAcquisitionLogicHandler.getSuperStatistics (TwoKeyFactory.sol#1624) is a local variable never initialiazed\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 1556,
          "vulnerability_to_line": null,
          "vulnerability_code": "            bool isReferrer;\n",
          "message": "isReferrer in TwoKeyAcquisitionLogicHandler.getAddressStatistic (TwoKeyFactory.sol#1556) is a local variable never initialiazed\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 1626,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _address;\n",
          "message": "_address in TwoKeyAcquisitionLogicHandler.getSuperStatistics (TwoKeyFactory.sol#1626) is a local variable never initialiazed\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 1555,
          "vulnerability_to_line": null,
          "vulnerability_code": "            bool isConverter;\n",
          "message": "isConverter in TwoKeyAcquisitionLogicHandler.getAddressStatistic (TwoKeyFactory.sol#1555) is a local variable never initialiazed\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 1547,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32 state; // NOT-EXISTING AS CONVERTER DEFAULT STATE\n",
          "message": "state in TwoKeyAcquisitionLogicHandler.getAddressStatistic (TwoKeyFactory.sol#1547) is a local variable never initialiazed\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 1658,
          "vulnerability_to_line": null,
          "vulnerability_code": "            influencer = plasmaOf(ITwoKeyAcquisitionARC(acquisitionCampaignContract).getReceivedFrom(influencer));\n",
          "message": "TwoKeyAcquisitionLogicHandler.getReferrers has external calls inside a loop:\n\t- influencer = plasmaOf(ITwoKeyAcquisitionARC(acquisitionCampaignContract).getReceivedFrom(influencer)) (TwoKeyFactory.sol#1658)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 1669,
          "vulnerability_to_line": null,
          "vulnerability_code": "            influencer = plasmaOf(ITwoKeyAcquisitionARC(acquisitionCampaignContract).getReceivedFrom(influencer));\n",
          "message": "TwoKeyAcquisitionLogicHandler.getReferrers has external calls inside a loop:\n\t- influencer = plasmaOf(ITwoKeyAcquisitionARC(acquisitionCampaignContract).getReceivedFrom(influencer)) (TwoKeyFactory.sol#1669)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 1741,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    uint256 cut = ITwoKeyAcquisitionCampaignERC20(twoKeyAcquisitionCampaign).getReferrerCut(influencers[i]);\n",
          "message": "TwoKeyAcquisitionLogicHandler.updateRefchainRewards has external calls inside a loop:\n\t- cut = ITwoKeyAcquisitionCampaignERC20(twoKeyAcquisitionCampaign).getReferrerCut(influencers[i]) (TwoKeyFactory.sol#1741)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 1800,
          "vulnerability_to_line": null,
          "vulnerability_code": "            referrersPendingPlasmaBalance[i] = ITwoKeyAcquisitionCampaignERC20(twoKeyAcquisitionCampaign).getReferrerPlasmaBalance(_referrerPlasmaList[i]);\n",
          "message": "TwoKeyAcquisitionLogicHandler.getReferrersBalancesAndTotalEarnings has external calls inside a loop:\n\t- referrersPendingPlasmaBalance[i] = ITwoKeyAcquisitionCampaignERC20(twoKeyAcquisitionCampaign).getReferrerPlasmaBalance(_referrerPlasmaList[i]) (TwoKeyFactory.sol#1800)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1238,
          "vulnerability_to_line": 1289,
          "vulnerability_code": "    function setInitialParamsLogicHandler(\n\n        uint [] values,\n\n        string _currency,\n\n        address _assetContractERC20,\n\n        address _moderator,\n\n        address _contractor,\n\n        address _acquisitionCampaignAddress,\n\n        address _twoKeySingletoneRegistry,\n\n        address _twoKeyConversionHandler\n\n    )\n\n    public\n\n    {\n\n        require(values[1] >= values[0], \"max contribution criteria not satisfied\");\n\n        require(values[4] > values[3], \"campaign start time can't be greater than end time\");\n\n        require(isCampaignInitialized == false);\n\n\n\n        if(values[0] == values[1]) {\n\n            isFixedInvestmentAmount = true;\n\n        }\n\n\n\n        minContributionETHorFiatCurrency = values[0];\n\n        maxContributionETHorFiatCurrency = values[1];\n\n        pricePerUnitInETHWeiOrUSD = values[2];\n\n        campaignStartTime = values[3];\n\n        campaignEndTime = values[4];\n\n        maxConverterBonusPercent = values[5];\n\n\n\n        //Add as 6th argument incentive model uint\n\n        incentiveModel = IncentiveModel(values[6]);\n\n        if(values[7] == 1) {\n\n            isAcceptingFiatOnly = true;\n\n        }\n\n\n\n        campaignHardCapWei = values[8];\n\n\n\n        currency = _currency;\n\n        assetContractERC20 = _assetContractERC20;\n\n        moderator = _moderator;\n\n        contractor = _contractor;\n\n        unit_decimals = IERC20(_assetContractERC20).decimals();\n\n\n\n        twoKeyAcquisitionCampaign = _acquisitionCampaignAddress;\n\n        twoKeySingletoneRegistry = _twoKeySingletoneRegistry;\n\n\n\n        twoKeyRegistry = ITwoKeySingletoneRegistryFetchAddress(twoKeySingletoneRegistry).getContractProxyAddress(\"TwoKeyRegistry\");\n\n        twoKeyMaintainersRegistry = ITwoKeySingletoneRegistryFetchAddress(twoKeySingletoneRegistry).getContractProxyAddress(\"TwoKeyMaintainersRegistry\");\n\n\n\n        ownerPlasma = plasmaOf(contractor);\n\n        twoKeyConversionHandler = _twoKeyConversionHandler;\n\n\n\n        isCampaignInitialized = true;\n",
          "message": "Reentrancy in TwoKeyAcquisitionLogicHandler.setInitialParamsLogicHandler (TwoKeyFactory.sol#1238-1289):\n\tExternal calls:\n\t- unit_decimals = IERC20(_assetContractERC20).decimals() (TwoKeyFactory.sol#1277)\n\tState variables written after the call(s):\n\t- twoKeyAcquisitionCampaign (TwoKeyFactory.sol#1279)\n\t- twoKeySingletoneRegistry (TwoKeyFactory.sol#1280)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1238,
          "vulnerability_to_line": 1289,
          "vulnerability_code": "    function setInitialParamsLogicHandler(\n\n        uint [] values,\n\n        string _currency,\n\n        address _assetContractERC20,\n\n        address _moderator,\n\n        address _contractor,\n\n        address _acquisitionCampaignAddress,\n\n        address _twoKeySingletoneRegistry,\n\n        address _twoKeyConversionHandler\n\n    )\n\n    public\n\n    {\n\n        require(values[1] >= values[0], \"max contribution criteria not satisfied\");\n\n        require(values[4] > values[3], \"campaign start time can't be greater than end time\");\n\n        require(isCampaignInitialized == false);\n\n\n\n        if(values[0] == values[1]) {\n\n            isFixedInvestmentAmount = true;\n\n        }\n\n\n\n        minContributionETHorFiatCurrency = values[0];\n\n        maxContributionETHorFiatCurrency = values[1];\n\n        pricePerUnitInETHWeiOrUSD = values[2];\n\n        campaignStartTime = values[3];\n\n        campaignEndTime = values[4];\n\n        maxConverterBonusPercent = values[5];\n\n\n\n        //Add as 6th argument incentive model uint\n\n        incentiveModel = IncentiveModel(values[6]);\n\n        if(values[7] == 1) {\n\n            isAcceptingFiatOnly = true;\n\n        }\n\n\n\n        campaignHardCapWei = values[8];\n\n\n\n        currency = _currency;\n\n        assetContractERC20 = _assetContractERC20;\n\n        moderator = _moderator;\n\n        contractor = _contractor;\n\n        unit_decimals = IERC20(_assetContractERC20).decimals();\n\n\n\n        twoKeyAcquisitionCampaign = _acquisitionCampaignAddress;\n\n        twoKeySingletoneRegistry = _twoKeySingletoneRegistry;\n\n\n\n        twoKeyRegistry = ITwoKeySingletoneRegistryFetchAddress(twoKeySingletoneRegistry).getContractProxyAddress(\"TwoKeyRegistry\");\n\n        twoKeyMaintainersRegistry = ITwoKeySingletoneRegistryFetchAddress(twoKeySingletoneRegistry).getContractProxyAddress(\"TwoKeyMaintainersRegistry\");\n\n\n\n        ownerPlasma = plasmaOf(contractor);\n\n        twoKeyConversionHandler = _twoKeyConversionHandler;\n\n\n\n        isCampaignInitialized = true;\n",
          "message": "Reentrancy in TwoKeyAcquisitionLogicHandler.setInitialParamsLogicHandler (TwoKeyFactory.sol#1238-1289):\n\tExternal calls:\n\t- unit_decimals = IERC20(_assetContractERC20).decimals() (TwoKeyFactory.sol#1277)\n\t- twoKeyRegistry = ITwoKeySingletoneRegistryFetchAddress(twoKeySingletoneRegistry).getContractProxyAddress(TwoKeyRegistry) (TwoKeyFactory.sol#1282)\n\tState variables written after the call(s):\n\t- twoKeyRegistry (TwoKeyFactory.sol#1282)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1238,
          "vulnerability_to_line": 1289,
          "vulnerability_code": "    function setInitialParamsLogicHandler(\n\n        uint [] values,\n\n        string _currency,\n\n        address _assetContractERC20,\n\n        address _moderator,\n\n        address _contractor,\n\n        address _acquisitionCampaignAddress,\n\n        address _twoKeySingletoneRegistry,\n\n        address _twoKeyConversionHandler\n\n    )\n\n    public\n\n    {\n\n        require(values[1] >= values[0], \"max contribution criteria not satisfied\");\n\n        require(values[4] > values[3], \"campaign start time can't be greater than end time\");\n\n        require(isCampaignInitialized == false);\n\n\n\n        if(values[0] == values[1]) {\n\n            isFixedInvestmentAmount = true;\n\n        }\n\n\n\n        minContributionETHorFiatCurrency = values[0];\n\n        maxContributionETHorFiatCurrency = values[1];\n\n        pricePerUnitInETHWeiOrUSD = values[2];\n\n        campaignStartTime = values[3];\n\n        campaignEndTime = values[4];\n\n        maxConverterBonusPercent = values[5];\n\n\n\n        //Add as 6th argument incentive model uint\n\n        incentiveModel = IncentiveModel(values[6]);\n\n        if(values[7] == 1) {\n\n            isAcceptingFiatOnly = true;\n\n        }\n\n\n\n        campaignHardCapWei = values[8];\n\n\n\n        currency = _currency;\n\n        assetContractERC20 = _assetContractERC20;\n\n        moderator = _moderator;\n\n        contractor = _contractor;\n\n        unit_decimals = IERC20(_assetContractERC20).decimals();\n\n\n\n        twoKeyAcquisitionCampaign = _acquisitionCampaignAddress;\n\n        twoKeySingletoneRegistry = _twoKeySingletoneRegistry;\n\n\n\n        twoKeyRegistry = ITwoKeySingletoneRegistryFetchAddress(twoKeySingletoneRegistry).getContractProxyAddress(\"TwoKeyRegistry\");\n\n        twoKeyMaintainersRegistry = ITwoKeySingletoneRegistryFetchAddress(twoKeySingletoneRegistry).getContractProxyAddress(\"TwoKeyMaintainersRegistry\");\n\n\n\n        ownerPlasma = plasmaOf(contractor);\n\n        twoKeyConversionHandler = _twoKeyConversionHandler;\n\n\n\n        isCampaignInitialized = true;\n",
          "message": "Reentrancy in TwoKeyAcquisitionLogicHandler.setInitialParamsLogicHandler (TwoKeyFactory.sol#1238-1289):\n\tExternal calls:\n\t- unit_decimals = IERC20(_assetContractERC20).decimals() (TwoKeyFactory.sol#1277)\n\t- twoKeyRegistry = ITwoKeySingletoneRegistryFetchAddress(twoKeySingletoneRegistry).getContractProxyAddress(TwoKeyRegistry) (TwoKeyFactory.sol#1282)\n\t- twoKeyMaintainersRegistry = ITwoKeySingletoneRegistryFetchAddress(twoKeySingletoneRegistry).getContractProxyAddress(TwoKeyMaintainersRegistry) (TwoKeyFactory.sol#1283)\n\tState variables written after the call(s):\n\t- twoKeyMaintainersRegistry (TwoKeyFactory.sol#1283)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1238,
          "vulnerability_to_line": 1289,
          "vulnerability_code": "    function setInitialParamsLogicHandler(\n\n        uint [] values,\n\n        string _currency,\n\n        address _assetContractERC20,\n\n        address _moderator,\n\n        address _contractor,\n\n        address _acquisitionCampaignAddress,\n\n        address _twoKeySingletoneRegistry,\n\n        address _twoKeyConversionHandler\n\n    )\n\n    public\n\n    {\n\n        require(values[1] >= values[0], \"max contribution criteria not satisfied\");\n\n        require(values[4] > values[3], \"campaign start time can't be greater than end time\");\n\n        require(isCampaignInitialized == false);\n\n\n\n        if(values[0] == values[1]) {\n\n            isFixedInvestmentAmount = true;\n\n        }\n\n\n\n        minContributionETHorFiatCurrency = values[0];\n\n        maxContributionETHorFiatCurrency = values[1];\n\n        pricePerUnitInETHWeiOrUSD = values[2];\n\n        campaignStartTime = values[3];\n\n        campaignEndTime = values[4];\n\n        maxConverterBonusPercent = values[5];\n\n\n\n        //Add as 6th argument incentive model uint\n\n        incentiveModel = IncentiveModel(values[6]);\n\n        if(values[7] == 1) {\n\n            isAcceptingFiatOnly = true;\n\n        }\n\n\n\n        campaignHardCapWei = values[8];\n\n\n\n        currency = _currency;\n\n        assetContractERC20 = _assetContractERC20;\n\n        moderator = _moderator;\n\n        contractor = _contractor;\n\n        unit_decimals = IERC20(_assetContractERC20).decimals();\n\n\n\n        twoKeyAcquisitionCampaign = _acquisitionCampaignAddress;\n\n        twoKeySingletoneRegistry = _twoKeySingletoneRegistry;\n\n\n\n        twoKeyRegistry = ITwoKeySingletoneRegistryFetchAddress(twoKeySingletoneRegistry).getContractProxyAddress(\"TwoKeyRegistry\");\n\n        twoKeyMaintainersRegistry = ITwoKeySingletoneRegistryFetchAddress(twoKeySingletoneRegistry).getContractProxyAddress(\"TwoKeyMaintainersRegistry\");\n\n\n\n        ownerPlasma = plasmaOf(contractor);\n\n        twoKeyConversionHandler = _twoKeyConversionHandler;\n\n\n\n        isCampaignInitialized = true;\n",
          "message": "Reentrancy in TwoKeyAcquisitionLogicHandler.setInitialParamsLogicHandler (TwoKeyFactory.sol#1238-1289):\n\tExternal calls:\n\t- unit_decimals = IERC20(_assetContractERC20).decimals() (TwoKeyFactory.sol#1277)\n\t- twoKeyRegistry = ITwoKeySingletoneRegistryFetchAddress(twoKeySingletoneRegistry).getContractProxyAddress(TwoKeyRegistry) (TwoKeyFactory.sol#1282)\n\t- twoKeyMaintainersRegistry = ITwoKeySingletoneRegistryFetchAddress(twoKeySingletoneRegistry).getContractProxyAddress(TwoKeyMaintainersRegistry) (TwoKeyFactory.sol#1283)\n\t- ownerPlasma = plasmaOf(contractor) (TwoKeyFactory.sol#1285)\n\tState variables written after the call(s):\n\t- ownerPlasma (TwoKeyFactory.sol#1285)\n\t- twoKeyConversionHandler (TwoKeyFactory.sol#1286)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1690,
          "vulnerability_to_line": 1754,
          "vulnerability_code": "    function updateRefchainRewards(\n\n        uint256 _maxReferralRewardETHWei,\n\n        address _converter,\n\n        uint _conversionId,\n\n        uint totalBounty2keys\n\n    )\n\n    public\n\n    {\n\n        require(msg.sender == twoKeyAcquisitionCampaign);\n\n\n\n        //Get all the influencers\n\n        address[] memory influencers = getReferrers(_converter,twoKeyAcquisitionCampaign);\n\n\n\n        //Get array length\n\n        uint numberOfInfluencers = influencers.length;\n\n\n\n        uint i;\n\n        uint reward;\n\n        if(incentiveModel == IncentiveModel.VANILLA_AVERAGE) {\n\n            reward = IncentiveModels.averageModelRewards(totalBounty2keys, numberOfInfluencers);\n\n            for(i=0; i<numberOfInfluencers; i++) {\n\n                updateReferrerMappings(influencers[i], reward, _conversionId);\n\n\n\n            }\n\n        } else if (incentiveModel == IncentiveModel.VANILLA_AVERAGE_LAST_3X) {\n\n            uint rewardForLast;\n\n            // Calculate reward for regular ones and for the last\n\n            (reward, rewardForLast) = IncentiveModels.averageLast3xRewards(totalBounty2keys, numberOfInfluencers);\n\n\n\n            //Update equal rewards to all influencers but last\n\n            for(i=0; i<numberOfInfluencers - 1; i++) {\n\n                updateReferrerMappings(influencers[i], reward, _conversionId);\n\n\n\n            }\n\n            //Update reward for last\n\n            updateReferrerMappings(influencers[numberOfInfluencers-1], rewardForLast, _conversionId);\n\n        } else if(incentiveModel == IncentiveModel.VANILLA_POWER_LAW) {\n\n            // Get rewards per referrer\n\n            uint [] memory rewards = IncentiveModels.powerLawRewards(totalBounty2keys, numberOfInfluencers, 2);\n\n            //Iterate through all referrers and distribute rewards\n\n            for(i=0; i<numberOfInfluencers; i++) {\n\n                updateReferrerMappings(influencers[i], rewards[i], _conversionId);\n\n            }\n\n        } else if(incentiveModel == IncentiveModel.MANUAL) {\n\n            for (i = 0; i < numberOfInfluencers; i++) {\n\n                uint256 b;\n\n\n\n                if (i == influencers.length - 1) {  // if its the last influencer then all the bounty goes to it.\n\n                    b = totalBounty2keys;\n\n                }\n\n                else {\n\n                    uint256 cut = ITwoKeyAcquisitionCampaignERC20(twoKeyAcquisitionCampaign).getReferrerCut(influencers[i]);\n\n                    if (cut > 0 && cut <= 101) {\n\n                        b = totalBounty2keys.mul(cut.sub(1)).div(100);\n\n                    } else {// cut == 0 or 255 indicates equal particine of the bounty\n\n                        b = totalBounty2keys.div(influencers.length - i);\n\n                    }\n\n                }\n\n\n\n                updateReferrerMappings(influencers[i], b, _conversionId);\n\n                //Decrease bounty for distributed\n\n                totalBounty2keys = totalBounty2keys.sub(b);\n\n            }\n\n        }\n",
          "message": "Reentrancy in TwoKeyAcquisitionLogicHandler.updateRefchainRewards (TwoKeyFactory.sol#1690-1754):\n\tExternal calls:\n\t- influencers = getReferrers(_converter,twoKeyAcquisitionCampaign) (TwoKeyFactory.sol#1701)\n\t- updateReferrerMappings(influencers[i],reward,_conversionId) (TwoKeyFactory.sol#1711)\n\tState variables written after the call(s):\n\t- referrerPlasma2EarningsPerConversion (TwoKeyFactory.sol#1711)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1690,
          "vulnerability_to_line": 1754,
          "vulnerability_code": "    function updateRefchainRewards(\n\n        uint256 _maxReferralRewardETHWei,\n\n        address _converter,\n\n        uint _conversionId,\n\n        uint totalBounty2keys\n\n    )\n\n    public\n\n    {\n\n        require(msg.sender == twoKeyAcquisitionCampaign);\n\n\n\n        //Get all the influencers\n\n        address[] memory influencers = getReferrers(_converter,twoKeyAcquisitionCampaign);\n\n\n\n        //Get array length\n\n        uint numberOfInfluencers = influencers.length;\n\n\n\n        uint i;\n\n        uint reward;\n\n        if(incentiveModel == IncentiveModel.VANILLA_AVERAGE) {\n\n            reward = IncentiveModels.averageModelRewards(totalBounty2keys, numberOfInfluencers);\n\n            for(i=0; i<numberOfInfluencers; i++) {\n\n                updateReferrerMappings(influencers[i], reward, _conversionId);\n\n\n\n            }\n\n        } else if (incentiveModel == IncentiveModel.VANILLA_AVERAGE_LAST_3X) {\n\n            uint rewardForLast;\n\n            // Calculate reward for regular ones and for the last\n\n            (reward, rewardForLast) = IncentiveModels.averageLast3xRewards(totalBounty2keys, numberOfInfluencers);\n\n\n\n            //Update equal rewards to all influencers but last\n\n            for(i=0; i<numberOfInfluencers - 1; i++) {\n\n                updateReferrerMappings(influencers[i], reward, _conversionId);\n\n\n\n            }\n\n            //Update reward for last\n\n            updateReferrerMappings(influencers[numberOfInfluencers-1], rewardForLast, _conversionId);\n\n        } else if(incentiveModel == IncentiveModel.VANILLA_POWER_LAW) {\n\n            // Get rewards per referrer\n\n            uint [] memory rewards = IncentiveModels.powerLawRewards(totalBounty2keys, numberOfInfluencers, 2);\n\n            //Iterate through all referrers and distribute rewards\n\n            for(i=0; i<numberOfInfluencers; i++) {\n\n                updateReferrerMappings(influencers[i], rewards[i], _conversionId);\n\n            }\n\n        } else if(incentiveModel == IncentiveModel.MANUAL) {\n\n            for (i = 0; i < numberOfInfluencers; i++) {\n\n                uint256 b;\n\n\n\n                if (i == influencers.length - 1) {  // if its the last influencer then all the bounty goes to it.\n\n                    b = totalBounty2keys;\n\n                }\n\n                else {\n\n                    uint256 cut = ITwoKeyAcquisitionCampaignERC20(twoKeyAcquisitionCampaign).getReferrerCut(influencers[i]);\n\n                    if (cut > 0 && cut <= 101) {\n\n                        b = totalBounty2keys.mul(cut.sub(1)).div(100);\n\n                    } else {// cut == 0 or 255 indicates equal particine of the bounty\n\n                        b = totalBounty2keys.div(influencers.length - i);\n\n                    }\n\n                }\n\n\n\n                updateReferrerMappings(influencers[i], b, _conversionId);\n\n                //Decrease bounty for distributed\n\n                totalBounty2keys = totalBounty2keys.sub(b);\n\n            }\n\n        }\n",
          "message": "Reentrancy in TwoKeyAcquisitionLogicHandler.updateRefchainRewards (TwoKeyFactory.sol#1690-1754):\n\tExternal calls:\n\t- influencers = getReferrers(_converter,twoKeyAcquisitionCampaign) (TwoKeyFactory.sol#1701)\n\t- updateReferrerMappings(influencers[i],reward,_conversionId) (TwoKeyFactory.sol#1721)\n\tState variables written after the call(s):\n\t- referrerPlasma2EarningsPerConversion (TwoKeyFactory.sol#1721)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1690,
          "vulnerability_to_line": 1754,
          "vulnerability_code": "    function updateRefchainRewards(\n\n        uint256 _maxReferralRewardETHWei,\n\n        address _converter,\n\n        uint _conversionId,\n\n        uint totalBounty2keys\n\n    )\n\n    public\n\n    {\n\n        require(msg.sender == twoKeyAcquisitionCampaign);\n\n\n\n        //Get all the influencers\n\n        address[] memory influencers = getReferrers(_converter,twoKeyAcquisitionCampaign);\n\n\n\n        //Get array length\n\n        uint numberOfInfluencers = influencers.length;\n\n\n\n        uint i;\n\n        uint reward;\n\n        if(incentiveModel == IncentiveModel.VANILLA_AVERAGE) {\n\n            reward = IncentiveModels.averageModelRewards(totalBounty2keys, numberOfInfluencers);\n\n            for(i=0; i<numberOfInfluencers; i++) {\n\n                updateReferrerMappings(influencers[i], reward, _conversionId);\n\n\n\n            }\n\n        } else if (incentiveModel == IncentiveModel.VANILLA_AVERAGE_LAST_3X) {\n\n            uint rewardForLast;\n\n            // Calculate reward for regular ones and for the last\n\n            (reward, rewardForLast) = IncentiveModels.averageLast3xRewards(totalBounty2keys, numberOfInfluencers);\n\n\n\n            //Update equal rewards to all influencers but last\n\n            for(i=0; i<numberOfInfluencers - 1; i++) {\n\n                updateReferrerMappings(influencers[i], reward, _conversionId);\n\n\n\n            }\n\n            //Update reward for last\n\n            updateReferrerMappings(influencers[numberOfInfluencers-1], rewardForLast, _conversionId);\n\n        } else if(incentiveModel == IncentiveModel.VANILLA_POWER_LAW) {\n\n            // Get rewards per referrer\n\n            uint [] memory rewards = IncentiveModels.powerLawRewards(totalBounty2keys, numberOfInfluencers, 2);\n\n            //Iterate through all referrers and distribute rewards\n\n            for(i=0; i<numberOfInfluencers; i++) {\n\n                updateReferrerMappings(influencers[i], rewards[i], _conversionId);\n\n            }\n\n        } else if(incentiveModel == IncentiveModel.MANUAL) {\n\n            for (i = 0; i < numberOfInfluencers; i++) {\n\n                uint256 b;\n\n\n\n                if (i == influencers.length - 1) {  // if its the last influencer then all the bounty goes to it.\n\n                    b = totalBounty2keys;\n\n                }\n\n                else {\n\n                    uint256 cut = ITwoKeyAcquisitionCampaignERC20(twoKeyAcquisitionCampaign).getReferrerCut(influencers[i]);\n\n                    if (cut > 0 && cut <= 101) {\n\n                        b = totalBounty2keys.mul(cut.sub(1)).div(100);\n\n                    } else {// cut == 0 or 255 indicates equal particine of the bounty\n\n                        b = totalBounty2keys.div(influencers.length - i);\n\n                    }\n\n                }\n\n\n\n                updateReferrerMappings(influencers[i], b, _conversionId);\n\n                //Decrease bounty for distributed\n\n                totalBounty2keys = totalBounty2keys.sub(b);\n\n            }\n\n        }\n",
          "message": "Reentrancy in TwoKeyAcquisitionLogicHandler.updateRefchainRewards (TwoKeyFactory.sol#1690-1754):\n\tExternal calls:\n\t- influencers = getReferrers(_converter,twoKeyAcquisitionCampaign) (TwoKeyFactory.sol#1701)\n\t- updateReferrerMappings(influencers[numberOfInfluencers - 1],rewardForLast,_conversionId) (TwoKeyFactory.sol#1725)\n\tState variables written after the call(s):\n\t- referrerPlasma2EarningsPerConversion (TwoKeyFactory.sol#1725)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1690,
          "vulnerability_to_line": 1754,
          "vulnerability_code": "    function updateRefchainRewards(\n\n        uint256 _maxReferralRewardETHWei,\n\n        address _converter,\n\n        uint _conversionId,\n\n        uint totalBounty2keys\n\n    )\n\n    public\n\n    {\n\n        require(msg.sender == twoKeyAcquisitionCampaign);\n\n\n\n        //Get all the influencers\n\n        address[] memory influencers = getReferrers(_converter,twoKeyAcquisitionCampaign);\n\n\n\n        //Get array length\n\n        uint numberOfInfluencers = influencers.length;\n\n\n\n        uint i;\n\n        uint reward;\n\n        if(incentiveModel == IncentiveModel.VANILLA_AVERAGE) {\n\n            reward = IncentiveModels.averageModelRewards(totalBounty2keys, numberOfInfluencers);\n\n            for(i=0; i<numberOfInfluencers; i++) {\n\n                updateReferrerMappings(influencers[i], reward, _conversionId);\n\n\n\n            }\n\n        } else if (incentiveModel == IncentiveModel.VANILLA_AVERAGE_LAST_3X) {\n\n            uint rewardForLast;\n\n            // Calculate reward for regular ones and for the last\n\n            (reward, rewardForLast) = IncentiveModels.averageLast3xRewards(totalBounty2keys, numberOfInfluencers);\n\n\n\n            //Update equal rewards to all influencers but last\n\n            for(i=0; i<numberOfInfluencers - 1; i++) {\n\n                updateReferrerMappings(influencers[i], reward, _conversionId);\n\n\n\n            }\n\n            //Update reward for last\n\n            updateReferrerMappings(influencers[numberOfInfluencers-1], rewardForLast, _conversionId);\n\n        } else if(incentiveModel == IncentiveModel.VANILLA_POWER_LAW) {\n\n            // Get rewards per referrer\n\n            uint [] memory rewards = IncentiveModels.powerLawRewards(totalBounty2keys, numberOfInfluencers, 2);\n\n            //Iterate through all referrers and distribute rewards\n\n            for(i=0; i<numberOfInfluencers; i++) {\n\n                updateReferrerMappings(influencers[i], rewards[i], _conversionId);\n\n            }\n\n        } else if(incentiveModel == IncentiveModel.MANUAL) {\n\n            for (i = 0; i < numberOfInfluencers; i++) {\n\n                uint256 b;\n\n\n\n                if (i == influencers.length - 1) {  // if its the last influencer then all the bounty goes to it.\n\n                    b = totalBounty2keys;\n\n                }\n\n                else {\n\n                    uint256 cut = ITwoKeyAcquisitionCampaignERC20(twoKeyAcquisitionCampaign).getReferrerCut(influencers[i]);\n\n                    if (cut > 0 && cut <= 101) {\n\n                        b = totalBounty2keys.mul(cut.sub(1)).div(100);\n\n                    } else {// cut == 0 or 255 indicates equal particine of the bounty\n\n                        b = totalBounty2keys.div(influencers.length - i);\n\n                    }\n\n                }\n\n\n\n                updateReferrerMappings(influencers[i], b, _conversionId);\n\n                //Decrease bounty for distributed\n\n                totalBounty2keys = totalBounty2keys.sub(b);\n\n            }\n\n        }\n",
          "message": "Reentrancy in TwoKeyAcquisitionLogicHandler.updateRefchainRewards (TwoKeyFactory.sol#1690-1754):\n\tExternal calls:\n\t- influencers = getReferrers(_converter,twoKeyAcquisitionCampaign) (TwoKeyFactory.sol#1701)\n\t- updateReferrerMappings(influencers[i],rewards[i],_conversionId) (TwoKeyFactory.sol#1731)\n\tState variables written after the call(s):\n\t- referrerPlasma2EarningsPerConversion (TwoKeyFactory.sol#1731)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1690,
          "vulnerability_to_line": 1754,
          "vulnerability_code": "    function updateRefchainRewards(\n\n        uint256 _maxReferralRewardETHWei,\n\n        address _converter,\n\n        uint _conversionId,\n\n        uint totalBounty2keys\n\n    )\n\n    public\n\n    {\n\n        require(msg.sender == twoKeyAcquisitionCampaign);\n\n\n\n        //Get all the influencers\n\n        address[] memory influencers = getReferrers(_converter,twoKeyAcquisitionCampaign);\n\n\n\n        //Get array length\n\n        uint numberOfInfluencers = influencers.length;\n\n\n\n        uint i;\n\n        uint reward;\n\n        if(incentiveModel == IncentiveModel.VANILLA_AVERAGE) {\n\n            reward = IncentiveModels.averageModelRewards(totalBounty2keys, numberOfInfluencers);\n\n            for(i=0; i<numberOfInfluencers; i++) {\n\n                updateReferrerMappings(influencers[i], reward, _conversionId);\n\n\n\n            }\n\n        } else if (incentiveModel == IncentiveModel.VANILLA_AVERAGE_LAST_3X) {\n\n            uint rewardForLast;\n\n            // Calculate reward for regular ones and for the last\n\n            (reward, rewardForLast) = IncentiveModels.averageLast3xRewards(totalBounty2keys, numberOfInfluencers);\n\n\n\n            //Update equal rewards to all influencers but last\n\n            for(i=0; i<numberOfInfluencers - 1; i++) {\n\n                updateReferrerMappings(influencers[i], reward, _conversionId);\n\n\n\n            }\n\n            //Update reward for last\n\n            updateReferrerMappings(influencers[numberOfInfluencers-1], rewardForLast, _conversionId);\n\n        } else if(incentiveModel == IncentiveModel.VANILLA_POWER_LAW) {\n\n            // Get rewards per referrer\n\n            uint [] memory rewards = IncentiveModels.powerLawRewards(totalBounty2keys, numberOfInfluencers, 2);\n\n            //Iterate through all referrers and distribute rewards\n\n            for(i=0; i<numberOfInfluencers; i++) {\n\n                updateReferrerMappings(influencers[i], rewards[i], _conversionId);\n\n            }\n\n        } else if(incentiveModel == IncentiveModel.MANUAL) {\n\n            for (i = 0; i < numberOfInfluencers; i++) {\n\n                uint256 b;\n\n\n\n                if (i == influencers.length - 1) {  // if its the last influencer then all the bounty goes to it.\n\n                    b = totalBounty2keys;\n\n                }\n\n                else {\n\n                    uint256 cut = ITwoKeyAcquisitionCampaignERC20(twoKeyAcquisitionCampaign).getReferrerCut(influencers[i]);\n\n                    if (cut > 0 && cut <= 101) {\n\n                        b = totalBounty2keys.mul(cut.sub(1)).div(100);\n\n                    } else {// cut == 0 or 255 indicates equal particine of the bounty\n\n                        b = totalBounty2keys.div(influencers.length - i);\n\n                    }\n\n                }\n\n\n\n                updateReferrerMappings(influencers[i], b, _conversionId);\n\n                //Decrease bounty for distributed\n\n                totalBounty2keys = totalBounty2keys.sub(b);\n\n            }\n\n        }\n",
          "message": "Reentrancy in TwoKeyAcquisitionLogicHandler.updateRefchainRewards (TwoKeyFactory.sol#1690-1754):\n\tExternal calls:\n\t- influencers = getReferrers(_converter,twoKeyAcquisitionCampaign) (TwoKeyFactory.sol#1701)\n\t- cut = ITwoKeyAcquisitionCampaignERC20(twoKeyAcquisitionCampaign).getReferrerCut(influencers[i]) (TwoKeyFactory.sol#1741)\n\t- updateReferrerMappings(influencers[i],b,_conversionId) (TwoKeyFactory.sol#1749)\n\tState variables written after the call(s):\n\t- referrerPlasma2EarningsPerConversion (TwoKeyFactory.sol#1749)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1677,
          "vulnerability_to_line": 1682,
          "vulnerability_code": "    function updateReferrerMappings(address referrerPlasma, uint reward, uint conversionId) internal {\n\n        ITwoKeyAcquisitionCampaignERC20(twoKeyAcquisitionCampaign).updateReferrerPlasmaBalance(referrerPlasma,reward);\n\n        referrerPlasma2TotalEarnings2key[referrerPlasma] = referrerPlasma2TotalEarnings2key[referrerPlasma].add(reward);\n\n        referrerPlasma2EarningsPerConversion[referrerPlasma][conversionId] = reward;\n\n        referrerPlasmaAddressToCounterOfConversions[referrerPlasma] += 1;\n",
          "message": "Reentrancy in TwoKeyAcquisitionLogicHandler.updateReferrerMappings (TwoKeyFactory.sol#1677-1682):\n\tExternal calls:\n\t- ITwoKeyAcquisitionCampaignERC20(twoKeyAcquisitionCampaign).updateReferrerPlasmaBalance(referrerPlasma,reward) (TwoKeyFactory.sol#1678)\n\tState variables written after the call(s):\n\t- referrerPlasma2EarningsPerConversion (TwoKeyFactory.sol#1680)\n\t- referrerPlasma2TotalEarnings2key (TwoKeyFactory.sol#1679)\n\t- referrerPlasmaAddressToCounterOfConversions (TwoKeyFactory.sol#1681)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 542,
          "vulnerability_to_line": 563,
          "vulnerability_code": "    function withdrawTokens(\n\n        uint conversionId,\n\n        uint portion\n\n    )\n\n    public\n\n    {\n\n        Purchase p = conversionIdToPurchase[conversionId];\n\n        //Only converter of maintainer can call this function\n\n        require(msg.sender == p.converter || ITwoKeyEventSource(twoKeyEventSource).isAddressMaintainer(msg.sender) == true);\n\n        require(p.isPortionWithdrawn[portion] == false && block.timestamp > portionToUnlockingDate[portion]);\n\n        //Transfer tokens\n\n        require(IERC20(assetContractERC20).transfer(p.converter, p.portionAmounts[portion]));\n\n        p.isPortionWithdrawn[portion] = true;\n\n\n\n        emit TokensWithdrawn (\n\n            block.timestamp,\n\n            msg.sender,\n\n            converter,\n\n            portion,\n\n            p.portionAmounts[portion]\n\n        );\n",
          "message": "TwoKeyPurchasesHandler.withdrawTokens (TwoKeyFactory.sol#542-563) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(p.isPortionWithdrawn[portion] == false && block.timestamp > portionToUnlockingDate[portion]) (TwoKeyFactory.sol#551)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 1385,
          "vulnerability_to_line": 1394,
          "vulnerability_code": "    function checkIsCampaignActive()\n\n    public\n\n    view\n\n    returns (bool)\n\n    {\n\n        if(block.timestamp >= campaignStartTime && block.timestamp <= campaignEndTime) {\n\n            return true;\n\n        }\n\n        return false;\n",
          "message": "TwoKeyAcquisitionLogicHandler.checkIsCampaignActive (TwoKeyFactory.sol#1385-1394) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp >= campaignStartTime && block.timestamp <= campaignEndTime (TwoKeyFactory.sol#1390-1392)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": 247,
          "vulnerability_code": "    function () payable public {\n\n        address _impl = implementation();\n\n        require(_impl != address(0));\n\n\n\n        assembly {\n\n            let ptr := mload(0x40)\n\n            calldatacopy(ptr, 0, calldatasize)\n\n            let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\n\n            let size := returndatasize\n\n            returndatacopy(ptr, 0, size)\n\n\n\n            switch result\n\n            case 0 { revert(ptr, size) }\n\n            default { return(ptr, size) }\n\n        }\n",
          "message": "Proxy.fallback uses assembly (TwoKeyFactory.sol#232-247)\n\t- TwoKeyFactory.sol#236-247\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 811,
          "vulnerability_to_line": 837,
          "vulnerability_code": "    function params0(address c, bytes _method) public view returns (uint answer) {\n\n        // https://medium.com/@blockchain101/calling-the-function-of-another-contract-in-solidity-f9edfa921f4c\n\n        //    dc = c;\n\n        bytes4 sig = bytes4(keccak256(_method));\n\n        assembly {\n\n        // move pointer to free memory spot\n\n            let ptr := mload(0x40)\n\n        // put function sig at memory spot\n\n            mstore(ptr,sig)\n\n\n\n            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n\n            15000, // gas limit\n\n            c, // sload(dc_slot),  // to addr. append var to _slot to access storage variable\n\n            0, // not transfer any ether (comment if using staticcall)\n\n            ptr, // Inputs are stored at location ptr\n\n            0x04, // Inputs are 0 bytes long\n\n            ptr,  //Store output over input\n\n            0x20) //Outputs are 1 bytes long\n\n\n\n            if eq(result, 0) {\n\n                revert(0, 0)\n\n            }\n\n\n\n            answer := mload(ptr) // Assign output to answer var\n\n            mstore(0x40,add(ptr,0x24)) // Set storage pointer to new space\n\n        }\n",
          "message": "Call.params0 uses assembly (TwoKeyFactory.sol#811-837)\n\t- TwoKeyFactory.sol#815-837\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 839,
          "vulnerability_to_line": 867,
          "vulnerability_code": "    function params1(address c, bytes _method, uint _val) public view returns (uint answer) {\n\n        // https://medium.com/@blockchain101/calling-the-function-of-another-contract-in-solidity-f9edfa921f4c\n\n        //    dc = c;\n\n        bytes4 sig = bytes4(keccak256(_method));\n\n        assembly {\n\n        // move pointer to free memory spot\n\n            let ptr := mload(0x40)\n\n        // put function sig at memory spot\n\n            mstore(ptr,sig)\n\n        // append argument after function sig\n\n            mstore(add(ptr,0x04), _val)\n\n\n\n            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n\n            15000, // gas limit\n\n            c, // sload(dc_slot),  // to addr. append var to _slot to access storage variable\n\n            0, // not transfer any ether (comment if using staticcall)\n\n            ptr, // Inputs are stored at location ptr\n\n            0x24, // Inputs are 0 bytes long\n\n            ptr,  //Store output over input\n\n            0x20) //Outputs are 1 bytes long\n\n\n\n            if eq(result, 0) {\n\n                revert(0, 0)\n\n            }\n\n\n\n            answer := mload(ptr) // Assign output to answer var\n\n            mstore(0x40,add(ptr,0x24)) // Set storage pointer to new space\n\n        }\n",
          "message": "Call.params1 uses assembly (TwoKeyFactory.sol#839-867)\n\t- TwoKeyFactory.sol#843-867\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 869,
          "vulnerability_to_line": 899,
          "vulnerability_code": "    function params2(address c, bytes _method, uint _val1, uint _val2) public view returns (uint answer) {\n\n        // https://medium.com/@blockchain101/calling-the-function-of-another-contract-in-solidity-f9edfa921f4c\n\n        //    dc = c;\n\n        bytes4 sig = bytes4(keccak256(_method));\n\n        assembly {\n\n        // move pointer to free memory spot\n\n            let ptr := mload(0x40)\n\n        // put function sig at memory spot\n\n            mstore(ptr,sig)\n\n        // append argument after function sig\n\n            mstore(add(ptr,0x04), _val1)\n\n            mstore(add(ptr,0x24), _val2)\n\n\n\n            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n\n            15000, // gas limit\n\n            c, // sload(dc_slot),  // to addr. append var to _slot to access storage variable\n\n            0, // not transfer any ether (comment if using staticcall)\n\n            ptr, // Inputs are stored at location ptr\n\n            0x44, // Inputs are 4 bytes for signature and 2 uint256\n\n            ptr,  //Store output over input\n\n            0x20) //Outputs are 1 uint long\n\n\n\n        // TODO cause revert\n\n        //            if eq(result, 0) {\n\n        //                revert(0, 0)\n\n        //            }\n\n\n\n            answer := mload(ptr) // Assign output to answer var\n\n            mstore(0x40,add(ptr,0x20)) // Set storage pointer to new space\n\n        }\n",
          "message": "Call.params2 uses assembly (TwoKeyFactory.sol#869-899)\n\t- TwoKeyFactory.sol#873-899\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 901,
          "vulnerability_to_line": 909,
          "vulnerability_code": "    function loadAddress(bytes sig, uint idx) public pure returns (address) {\n\n        address influencer;\n\n        idx += 20;\n\n        assembly\n\n        {\n\n            influencer := mload(add(sig, idx))\n\n        }\n\n        return influencer;\n",
          "message": "Call.loadAddress uses assembly (TwoKeyFactory.sol#901-909)\n\t- TwoKeyFactory.sol#904-908\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 911,
          "vulnerability_to_line": 919,
          "vulnerability_code": "    function loadUint8(bytes sig, uint idx) public pure returns (uint8) {\n\n        uint8 weight;\n\n        idx += 1;\n\n        assembly\n\n        {\n\n            weight := mload(add(sig, idx))\n\n        }\n\n        return weight;\n",
          "message": "Call.loadUint8 uses assembly (TwoKeyFactory.sol#911-919)\n\t- TwoKeyFactory.sol#914-918\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 922,
          "vulnerability_to_line": 957,
          "vulnerability_code": "    function recoverHash(bytes32 hash, bytes sig, uint idx) public pure returns (address) {\n\n        // same as recoverHash in utils/sign.js\n\n        // The signature format is a compact form of:\n\n        //   {bytes32 r}{bytes32 s}{uint8 v}\n\n        // Compact means, uint8 is not padded to 32 bytes.\n\n        require (sig.length >= 65+idx, 'bad signature length');\n\n        idx += 32;\n\n        bytes32 r;\n\n        assembly\n\n        {\n\n            r := mload(add(sig, idx))\n\n        }\n\n\n\n        idx += 32;\n\n        bytes32 s;\n\n        assembly\n\n        {\n\n            s := mload(add(sig, idx))\n\n        }\n\n\n\n        idx += 1;\n\n        uint8 v;\n\n        assembly\n\n        {\n\n            v := mload(add(sig, idx))\n\n        }\n\n        if (v >= 32) { // handle case when signature was made with ethereum web3.eth.sign or getSign which is for signing ethereum transactions\n\n            v -= 32;\n\n            bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\"; // 32 is the number of bytes in the following hash\n\n            hash = keccak256(abi.encodePacked(prefix, hash));\n\n        }\n\n        if (v <= 1) v += 27;\n\n        require(v==27 || v==28,'bad sig v');\n\n        return ecrecover(hash, v, r, s);\n\n\n",
          "message": "Call.recoverHash uses assembly (TwoKeyFactory.sol#922-957)\n\t- TwoKeyFactory.sol#930-935\n\t- TwoKeyFactory.sol#937-942\n\t- TwoKeyFactory.sol#944-948\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 688,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address public conversionHandler;\n",
          "message": "ITwoKeyAcquisitionCampaignERC20.conversionHandler should be constant (TwoKeyFactory.sol#688)\nITwoKeyConversionHandler.isFiatConversionAutomaticallyApproved should be constant (TwoKeyFactory.sol#633)\nTwoKeyPurchasesHandler.converter should be constant (TwoKeyFactory.sol#372)\nUpgradeabilityStorage._implementation should be constant (TwoKeyFactory.sol#1910)\n"
        },
        {
          "name": "pragma",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": "Different versions of Solidity is used in TwoKeyFactory.sol:\n\t- Version used: ['^0.4.0', '^0.4.24']\n\t- TwoKeyFactory.sol#3 declares pragma solidity^0.4.24\n\t- TwoKeyFactory.sol#16 declares pragma solidity^0.4.0\n\t- TwoKeyFactory.sol#134 declares pragma solidity^0.4.24\n\t- TwoKeyFactory.sol#148 declares pragma solidity^0.4.24\n\t- TwoKeyFactory.sol#188 declares pragma solidity^0.4.24\n\t- TwoKeyFactory.sol#214 declares pragma solidity^0.4.24\n\t- TwoKeyFactory.sol#252 declares pragma solidity^0.4.0\n\t- TwoKeyFactory.sol#266 declares pragma solidity^0.4.24\n\t- TwoKeyFactory.sol#279 declares pragma solidity^0.4.24\n\t- TwoKeyFactory.sol#291 declares pragma solidity^0.4.24\n\t- TwoKeyFactory.sol#358 declares pragma solidity^0.4.0\n\t- TwoKeyFactory.sol#617 declares pragma solidity^0.4.24\n\t- TwoKeyFactory.sol#629 declares pragma solidity^0.4.24\n\t- TwoKeyFactory.sol#683 declares pragma solidity^0.4.24\n\t- TwoKeyFactory.sol#706 declares pragma solidity^0.4.24\n\t- TwoKeyFactory.sol#733 declares pragma solidity^0.4.24\n\t- TwoKeyFactory.sol#745 declares pragma solidity^0.4.24\n\t- TwoKeyFactory.sol#753 declares pragma solidity^0.4.24\n\t- TwoKeyFactory.sol#808 declares pragma solidity^0.4.24\n\t- TwoKeyFactory.sol#1071 declares pragma solidity^0.4.24\n\t- TwoKeyFactory.sol#1158 declares pragma solidity^0.4.24\n\t- TwoKeyFactory.sol#1169 declares pragma solidity^0.4.24\n\t- TwoKeyFactory.sol#1899 declares pragma solidity^0.4.24\n\t- TwoKeyFactory.sol#1923 declares pragma solidity^0.4.24\n\t- TwoKeyFactory.sol#1937 declares pragma solidity^0.4.24\n\t- TwoKeyFactory.sol#1960 declares pragma solidity^0.4.0\n\t- TwoKeyFactory.sol#2011 declares pragma solidity^0.4.24\n\t- TwoKeyFactory.sol#2019 declares pragma solidity^0.4.0\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getContractProxyAddress(string _contractName) public view returns (address);\n",
          "message": "ITwoKeySingletoneRegistryFetchAddress.getContractProxyAddress (TwoKeyFactory.sol#9) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getNonUpgradableContractAddress(string contractName) public view returns (address);\n",
          "message": "ITwoKeySingletoneRegistryFetchAddress.getNonUpgradableContractAddress (TwoKeyFactory.sol#10) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getLatestContractVersion(string contractName) public view returns (string);\n",
          "message": "ITwoKeySingletoneRegistryFetchAddress.getLatestContractVersion (TwoKeyFactory.sol#11) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": 38,
          "vulnerability_code": "    function setInitialParamsCampaign(\n\n        address _twoKeySingletonesRegistry,\n\n        address _twoKeyAcquisitionLogicHandler,\n\n        address _conversionHandler,\n\n        address _moderator,\n\n        address _assetContractERC20,\n\n        address _contractor,\n\n        uint [] values\n",
          "message": "IHandleCampaignDeployment.setInitialParamsCampaign (TwoKeyFactory.sol#30-38) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": 55,
          "vulnerability_code": "    function setInitialParamsLogicHandler(\n\n        uint [] values,\n\n        string _currency,\n\n        address _assetContractERC20,\n\n        address _moderator,\n\n        address _contractor,\n\n        address _acquisitionCampaignAddress,\n\n        address _twoKeySingletoneRegistry,\n\n        address _twoKeyConversionHandler\n",
          "message": "IHandleCampaignDeployment.setInitialParamsLogicHandler (TwoKeyFactory.sol#46-55) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": 71,
          "vulnerability_code": "    function setInitialParamsConversionHandler(\n\n        uint [] values,\n\n        address _twoKeyAcquisitionCampaignERC20,\n\n        address _twoKeyPurchasesHandler,\n\n        address _contractor,\n\n        address _assetContractERC20,\n\n        address _twoKeyEventSource,\n\n        address _twoKeyBaseReputationRegistry\n",
          "message": "IHandleCampaignDeployment.setInitialParamsConversionHandler (TwoKeyFactory.sol#63-71) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": 86,
          "vulnerability_code": "    function setInitialParamsPurchasesHandler(\n\n        uint[] values,\n\n        address _contractor,\n\n        address _assetContractERC20,\n\n        address _twoKeyEventSource,\n\n        address _proxyConversionHandler\n",
          "message": "IHandleCampaignDeployment.setInitialParamsPurchasesHandler (TwoKeyFactory.sol#80-86) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": 103,
          "vulnerability_code": "    function setInitialParamsDonationCampaign(\n\n        address _contractor,\n\n        address _moderator,\n\n        address _twoKeySingletonRegistry,\n\n        address _twoKeyDonationConversionHandler,\n\n        address _twoKeyDonationLogicHandler,\n\n        uint [] numberValues,\n\n        bool [] booleanValues\n",
          "message": "IHandleCampaignDeployment.setInitialParamsDonationCampaign (TwoKeyFactory.sol#95-103) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": 118,
          "vulnerability_code": "    function setInitialParamsDonationConversionHandler(\n\n        string tokenName,\n\n        string tokenSymbol,\n\n        string _currency,\n\n        address _contractor,\n\n        address _twoKeyDonationCampaign,\n\n        address _twoKeySingletonRegistry\n",
          "message": "IHandleCampaignDeployment.setInitialParamsDonationConversionHandler (TwoKeyFactory.sol#111-118) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 121,
          "vulnerability_to_line": 129,
          "vulnerability_code": "    function setInitialParamsDonationLogicHandler(\n\n        uint[] numberValues,\n\n        string currency,\n\n        address contractor,\n\n        address moderator,\n\n        address twoKeySingletonRegistry,\n\n        address twoKeyDonationCampaign,\n\n        address twoKeyDonationLogicHandler\n",
          "message": "IHandleCampaignDeployment.setInitialParamsDonationLogicHandler (TwoKeyFactory.sol#121-129) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 140,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isCampaignValidated(address campaign) public view returns (bool);\n",
          "message": "ITwoKeyCampaignValidator.isCampaignValidated (TwoKeyFactory.sol#140) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isConversionHandlerCodeValid(address conversionHandler) public view returns (bool);\n",
          "message": "ITwoKeyCampaignValidator.isConversionHandlerCodeValid (TwoKeyFactory.sol#141) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function validateAcquisitionCampaign(address campaign, string nonSingletonHash) public;\n",
          "message": "ITwoKeyCampaignValidator.validateAcquisitionCampaign (TwoKeyFactory.sol#142) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function validateDonationCampaign(address campaign, address donationConversionHandler, string nonSingletonHash) public;\n",
          "message": "ITwoKeyCampaignValidator.validateDonationCampaign (TwoKeyFactory.sol#143) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 175,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addVersion(string _contractName, string version, address implementation) public;\n",
          "message": "ITwoKeySingletonesRegistry.addVersion (TwoKeyFactory.sol#175) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getVersion(string _contractName, string version) public view returns (address);\n",
          "message": "ITwoKeySingletonesRegistry.getVersion (TwoKeyFactory.sol#183) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 207,
          "vulnerability_to_line": 209,
          "vulnerability_code": "    function implementation() public view returns (address) {\n\n        return _implementation;\n",
          "message": "UpgradeabilityCampaignStorage.implementation (TwoKeyFactory.sol#207-209) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": 247,
          "vulnerability_code": "    function () payable public {\n\n        address _impl = implementation();\n\n        require(_impl != address(0));\n\n\n\n        assembly {\n\n            let ptr := mload(0x40)\n\n            calldatacopy(ptr, 0, calldatasize)\n\n            let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\n\n            let size := returndatasize\n\n            returndatacopy(ptr, 0, size)\n\n\n\n            switch result\n\n            case 0 { revert(ptr, size) }\n\n            default { return(ptr, size) }\n\n        }\n",
          "message": "Proxy.fallback (TwoKeyFactory.sol#232-247) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 283,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ethereumOf(address me) public view returns (address);\n",
          "message": "ITwoKeyEventSource.ethereumOf (TwoKeyFactory.sol#283) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 284,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function plasmaOf(address me) public view returns (address);\n",
          "message": "ITwoKeyEventSource.plasmaOf (TwoKeyFactory.sol#284) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 285,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isAddressMaintainer(address _maintainer) public view returns (bool);\n",
          "message": "ITwoKeyEventSource.isAddressMaintainer (TwoKeyFactory.sol#285) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 286,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTwoKeyDefaultIntegratorFeeFromAdmin() public view returns (uint);\n",
          "message": "ITwoKeyEventSource.getTwoKeyDefaultIntegratorFeeFromAdmin (TwoKeyFactory.sol#286) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 321,
          "vulnerability_to_line": 326,
          "vulnerability_code": "    function approve(\n\n        address _spender,\n\n        uint256 _value\n\n    )\n\n    public\n",
          "message": "IERC20.approve (TwoKeyFactory.sol#321-326) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 403,
          "vulnerability_to_line": 441,
          "vulnerability_code": "    function setInitialParamsPurchasesHandler(\n\n        uint[] values,\n\n        address _contractor,\n\n        address _assetContractERC20,\n\n        address _twoKeyEventSource,\n\n        address _proxyConversionHandler\n\n    )\n\n    public\n\n    {\n\n        require(initialized == false);\n\n\n\n        tokenDistributionDate = values[2];\n\n        maxDistributionDateShiftInDays = values[3];\n\n        numberOfVestingPortions = values[4];\n\n        numberOfDaysBetweenPortions = values[5];\n\n        bonusTokensVestingStartShiftInDaysFromDistributionDate = values[6];\n\n        vestingAmount = VestingAmount(values[7]);\n\n        contractor = _contractor;\n\n        assetContractERC20 = _assetContractERC20;\n\n        twoKeyEventSource = _twoKeyEventSource;\n\n        proxyConversionHandler = _proxyConversionHandler;\n\n\n\n        uint bonusVestingStartDate;\n\n        // In case vested amounts are both bonus and base, bonusTokensVestingStartShiftInDaysFromDistributionDate is ignored\n\n        if(vestingAmount == VestingAmount.BASE_AND_BONUS) {\n\n            bonusVestingStartDate = tokenDistributionDate + numberOfDaysBetweenPortions * (1 days);\n\n        } else {\n\n            bonusVestingStartDate = tokenDistributionDate + bonusTokensVestingStartShiftInDaysFromDistributionDate * (1 days);\n\n        }\n\n\n\n\n\n        portionToUnlockingDate[0] = tokenDistributionDate;\n\n\n\n        for(uint i=1; i<numberOfVestingPortions + 1; i++) {\n\n            portionToUnlockingDate[i] = bonusVestingStartDate + (i-1) * (numberOfDaysBetweenPortions * (1 days));\n\n        }\n\n\n\n        initialized = true;\n",
          "message": "TwoKeyPurchasesHandler.setInitialParamsPurchasesHandler (TwoKeyFactory.sol#403-441) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 444,
          "vulnerability_to_line": 459,
          "vulnerability_code": "    function startVesting(\n\n        uint _baseTokens,\n\n        uint _bonusTokens,\n\n        uint _conversionId,\n\n        address _converter\n\n    )\n\n    public\n\n    {\n\n        require(msg.sender == proxyConversionHandler);\n\n        if(vestingAmount == VestingAmount.BASE_AND_BONUS) {\n\n            baseAndBonusVesting(_baseTokens, _bonusTokens, _conversionId, _converter);\n\n        } else {\n\n            bonusVestingOnly(_baseTokens, _bonusTokens, _conversionId, _converter);\n\n        }\n\n        numberOfPurchases++;\n",
          "message": "TwoKeyPurchasesHandler.startVesting (TwoKeyFactory.sol#444-459) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 521,
          "vulnerability_to_line": 539,
          "vulnerability_code": "    function changeDistributionDate(\n\n        uint _newDate\n\n    )\n\n    public\n\n    {\n\n        require(msg.sender == contractor);\n\n        require(isDistributionDateChanged == false);\n\n        require(_newDate - (maxDistributionDateShiftInDays * (1 days)) <= tokenDistributionDate);\n\n        require(now < tokenDistributionDate);\n\n\n\n        uint shift = tokenDistributionDate - _newDate;\n\n        // If the date is changed shifting all tokens unlocking dates for the difference\n\n        for(uint i=0; i<numberOfVestingPortions+1;i++) {\n\n            portionToUnlockingDate[i] = portionToUnlockingDate[i] + shift;\n\n        }\n\n\n\n        isDistributionDateChanged = true;\n\n        tokenDistributionDate = _newDate;\n",
          "message": "TwoKeyPurchasesHandler.changeDistributionDate (TwoKeyFactory.sol#521-539) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 542,
          "vulnerability_to_line": 563,
          "vulnerability_code": "    function withdrawTokens(\n\n        uint conversionId,\n\n        uint portion\n\n    )\n\n    public\n\n    {\n\n        Purchase p = conversionIdToPurchase[conversionId];\n\n        //Only converter of maintainer can call this function\n\n        require(msg.sender == p.converter || ITwoKeyEventSource(twoKeyEventSource).isAddressMaintainer(msg.sender) == true);\n\n        require(p.isPortionWithdrawn[portion] == false && block.timestamp > portionToUnlockingDate[portion]);\n\n        //Transfer tokens\n\n        require(IERC20(assetContractERC20).transfer(p.converter, p.portionAmounts[portion]));\n\n        p.isPortionWithdrawn[portion] = true;\n\n\n\n        emit TokensWithdrawn (\n\n            block.timestamp,\n\n            msg.sender,\n\n            converter,\n\n            portion,\n\n            p.portionAmounts[portion]\n\n        );\n",
          "message": "TwoKeyPurchasesHandler.withdrawTokens (TwoKeyFactory.sol#542-563) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 565,
          "vulnerability_to_line": 582,
          "vulnerability_code": "    function getPurchaseInformation(\n\n        uint _conversionId\n\n    )\n\n    public\n\n    view\n\n    returns (address, uint, uint, uint[], bool[], uint[])\n\n    {\n\n        Purchase memory p = conversionIdToPurchase[_conversionId];\n\n        uint [] memory unlockingDates = getPortionsUnlockingDates();\n\n        return (\n\n            p.converter,\n\n            p.baseTokens,\n\n            p.bonusTokens,\n\n            p.portionAmounts,\n\n            p.isPortionWithdrawn,\n\n            unlockingDates\n\n        );\n",
          "message": "TwoKeyPurchasesHandler.getPurchaseInformation (TwoKeyFactory.sol#565-582) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 584,
          "vulnerability_to_line": 597,
          "vulnerability_code": "    function getStaticInfo()\n\n    public\n\n    view\n\n    returns (uint,uint,uint,uint,uint,uint)\n\n    {\n\n        return (\n\n            bonusTokensVestingStartShiftInDaysFromDistributionDate,\n\n            tokenDistributionDate,\n\n            numberOfVestingPortions,\n\n            numberOfDaysBetweenPortions,\n\n            maxDistributionDateShiftInDays,\n\n            uint(vestingAmount)\n\n        );\n",
          "message": "TwoKeyPurchasesHandler.getStaticInfo (TwoKeyFactory.sol#584-597) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 624,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBaseToTargetRate(string _currency) public view returns (uint);\n",
          "message": "ITwoKeyExchangeRateContract.getBaseToTargetRate (TwoKeyFactory.sol#624) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 635,
          "vulnerability_to_line": 647,
          "vulnerability_code": "    function supportForCreateConversion(\n\n        address _contractor,\n\n        address _converterAddress,\n\n        uint256 _conversionAmount,\n\n        uint256 _maxReferralRewardETHWei,\n\n        uint256 baseTokensForConverterUnits,\n\n        uint256 bonusTokensForConverterUnits,\n\n        bool isConversionFiat,\n\n        bool _isAnonymous,\n\n        bool _isKYCRequired\n\n    )\n\n    public\n",
          "message": "ITwoKeyConversionHandler.supportForCreateConversion (TwoKeyFactory.sol#635-647) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 649,
          "vulnerability_to_line": 652,
          "vulnerability_code": "    function executeConversion(\n\n        uint _conversionId\n\n    )\n",
          "message": "ITwoKeyConversionHandler.executeConversion (TwoKeyFactory.sol#649-652) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 663,
          "vulnerability_to_line": 668,
          "vulnerability_code": "    function getConverterPurchasesStats(\n\n        address _converter\n\n    )\n\n    public\n\n    view\n",
          "message": "ITwoKeyConversionHandler.getConverterPurchasesStats (TwoKeyFactory.sol#663-668) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 671,
          "vulnerability_to_line": 676,
          "vulnerability_code": "    function getStateForConverter(\n\n        address _converter\n\n    )\n\n    public\n\n    view\n",
          "message": "ITwoKeyConversionHandler.getStateForConverter (TwoKeyFactory.sol#671-676) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 689,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function buyTokensAndDistributeReferrerRewards(uint256 _maxReferralRewardETHWei, address _converter, uint _conversionId, bool _isConversionFiat) public returns (uint);\n",
          "message": "ITwoKeyAcquisitionCampaignERC20.buyTokensAndDistributeReferrerRewards (TwoKeyFactory.sol#689) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 690,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function moveFungibleAsset(address _to, uint256 _amount) public;\n",
          "message": "ITwoKeyAcquisitionCampaignERC20.moveFungibleAsset (TwoKeyFactory.sol#690) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 691,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function updateContractorProceeds(uint value) public;\n",
          "message": "ITwoKeyAcquisitionCampaignERC20.updateContractorProceeds (TwoKeyFactory.sol#691) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 692,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function sendBackEthWhenConversionCancelled(address _cancelledConverter, uint _conversionAmount) public;\n",
          "message": "ITwoKeyAcquisitionCampaignERC20.sendBackEthWhenConversionCancelled (TwoKeyFactory.sol#692) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 693,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function buyTokensForModeratorRewards(uint moderatorFee) public;\n",
          "message": "ITwoKeyAcquisitionCampaignERC20.buyTokensForModeratorRewards (TwoKeyFactory.sol#693) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 694,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function updateReservedAmountOfTokensIfConversionRejectedOrExecuted(uint value) public;\n",
          "message": "ITwoKeyAcquisitionCampaignERC20.updateReservedAmountOfTokensIfConversionRejectedOrExecuted (TwoKeyFactory.sol#694) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 696,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getStatistics(address ethereum, address plasma) public view returns (uint,uint,uint,uint);\n",
          "message": "ITwoKeyAcquisitionCampaignERC20.getStatistics (TwoKeyFactory.sol#696) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 698,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTotalReferrerEarnings(address _referrer, address eth_address) public view returns (uint);\n",
          "message": "ITwoKeyAcquisitionCampaignERC20.getTotalReferrerEarnings (TwoKeyFactory.sol#698) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 699,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getReferrerPlasmaBalance(address _influencer) public view returns (uint);\n",
          "message": "ITwoKeyAcquisitionCampaignERC20.getReferrerPlasmaBalance (TwoKeyFactory.sol#699) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 700,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function updateReferrerPlasmaBalance(address _influencer, uint _balance) public;\n",
          "message": "ITwoKeyAcquisitionCampaignERC20.updateReferrerPlasmaBalance (TwoKeyFactory.sol#700) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 701,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getReferrerCut(address me) public view returns (uint256);\n",
          "message": "ITwoKeyAcquisitionCampaignERC20.getReferrerCut (TwoKeyFactory.sol#701) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 710,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addTwoKeyEventSource(address _twoKeyEventSource) public;\n",
          "message": "ITwoKeyReg.addTwoKeyEventSource (TwoKeyFactory.sol#710) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 711,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function changeTwoKeyEventSource(address _twoKeyEventSource) public;\n",
          "message": "ITwoKeyReg.changeTwoKeyEventSource (TwoKeyFactory.sol#711) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 712,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addWhereContractor(address _userAddress, address _contractAddress) public;\n",
          "message": "ITwoKeyReg.addWhereContractor (TwoKeyFactory.sol#712) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 713,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addWhereModerator(address _userAddress, address _contractAddress) public;\n",
          "message": "ITwoKeyReg.addWhereModerator (TwoKeyFactory.sol#713) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 714,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addWhereReferrer(address _userAddress, address _contractAddress) public;\n",
          "message": "ITwoKeyReg.addWhereReferrer (TwoKeyFactory.sol#714) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 715,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addWhereConverter(address _userAddress, address _contractAddress) public;\n",
          "message": "ITwoKeyReg.addWhereConverter (TwoKeyFactory.sol#715) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 716,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getContractsWhereUserIsContractor(address _userAddress) public view returns (address[]);\n",
          "message": "ITwoKeyReg.getContractsWhereUserIsContractor (TwoKeyFactory.sol#716) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 717,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getContractsWhereUserIsModerator(address _userAddress) public view returns (address[]);\n",
          "message": "ITwoKeyReg.getContractsWhereUserIsModerator (TwoKeyFactory.sol#717) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 718,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getContractsWhereUserIsRefferer(address _userAddress) public view returns (address[]);\n",
          "message": "ITwoKeyReg.getContractsWhereUserIsRefferer (TwoKeyFactory.sol#718) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 719,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getContractsWhereUserIsConverter(address _userAddress) public view returns (address[]);\n",
          "message": "ITwoKeyReg.getContractsWhereUserIsConverter (TwoKeyFactory.sol#719) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 720,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTwoKeyEventSourceAddress() public view returns (address);\n",
          "message": "ITwoKeyReg.getTwoKeyEventSourceAddress (TwoKeyFactory.sol#720) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 721,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addName(string _name, address _sender, string _fullName, string _email, bytes signature) public;\n",
          "message": "ITwoKeyReg.addName (TwoKeyFactory.sol#721) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 722,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addNameByUser(string _name) public;\n",
          "message": "ITwoKeyReg.addNameByUser (TwoKeyFactory.sol#722) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 723,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getName2Owner(string _name) public view returns (address);\n",
          "message": "ITwoKeyReg.getName2Owner (TwoKeyFactory.sol#723) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 724,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getOwner2Name(address _sender) public view returns (string);\n",
          "message": "ITwoKeyReg.getOwner2Name (TwoKeyFactory.sol#724) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 725,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getPlasmaToEthereum(address plasma) public view returns (address);\n",
          "message": "ITwoKeyReg.getPlasmaToEthereum (TwoKeyFactory.sol#725) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 726,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getEthereumToPlasma(address ethereum) public view returns (address);\n",
          "message": "ITwoKeyReg.getEthereumToPlasma (TwoKeyFactory.sol#726) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 727,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function checkIfTwoKeyMaintainerExists(address _maintainer) public view returns (bool);\n",
          "message": "ITwoKeyReg.checkIfTwoKeyMaintainerExists (TwoKeyFactory.sol#727) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 739,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getReceivedFrom(address _receiver) public view returns (address);\n",
          "message": "ITwoKeyAcquisitionARC.getReceivedFrom (TwoKeyFactory.sol#739) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 740,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint256);\n",
          "message": "ITwoKeyAcquisitionARC.balanceOf (TwoKeyFactory.sol#740) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 748,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function onlyMaintainer(address _sender) public view returns (bool);\n",
          "message": "ITwoKeyMaintainersRegistry.onlyMaintainer (TwoKeyFactory.sol#748) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 811,
          "vulnerability_to_line": 837,
          "vulnerability_code": "    function params0(address c, bytes _method) public view returns (uint answer) {\n\n        // https://medium.com/@blockchain101/calling-the-function-of-another-contract-in-solidity-f9edfa921f4c\n\n        //    dc = c;\n\n        bytes4 sig = bytes4(keccak256(_method));\n\n        assembly {\n\n        // move pointer to free memory spot\n\n            let ptr := mload(0x40)\n\n        // put function sig at memory spot\n\n            mstore(ptr,sig)\n\n\n\n            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n\n            15000, // gas limit\n\n            c, // sload(dc_slot),  // to addr. append var to _slot to access storage variable\n\n            0, // not transfer any ether (comment if using staticcall)\n\n            ptr, // Inputs are stored at location ptr\n\n            0x04, // Inputs are 0 bytes long\n\n            ptr,  //Store output over input\n\n            0x20) //Outputs are 1 bytes long\n\n\n\n            if eq(result, 0) {\n\n                revert(0, 0)\n\n            }\n\n\n\n            answer := mload(ptr) // Assign output to answer var\n\n            mstore(0x40,add(ptr,0x24)) // Set storage pointer to new space\n\n        }\n",
          "message": "Call.params0 (TwoKeyFactory.sol#811-837) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 839,
          "vulnerability_to_line": 867,
          "vulnerability_code": "    function params1(address c, bytes _method, uint _val) public view returns (uint answer) {\n\n        // https://medium.com/@blockchain101/calling-the-function-of-another-contract-in-solidity-f9edfa921f4c\n\n        //    dc = c;\n\n        bytes4 sig = bytes4(keccak256(_method));\n\n        assembly {\n\n        // move pointer to free memory spot\n\n            let ptr := mload(0x40)\n\n        // put function sig at memory spot\n\n            mstore(ptr,sig)\n\n        // append argument after function sig\n\n            mstore(add(ptr,0x04), _val)\n\n\n\n            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n\n            15000, // gas limit\n\n            c, // sload(dc_slot),  // to addr. append var to _slot to access storage variable\n\n            0, // not transfer any ether (comment if using staticcall)\n\n            ptr, // Inputs are stored at location ptr\n\n            0x24, // Inputs are 0 bytes long\n\n            ptr,  //Store output over input\n\n            0x20) //Outputs are 1 bytes long\n\n\n\n            if eq(result, 0) {\n\n                revert(0, 0)\n\n            }\n\n\n\n            answer := mload(ptr) // Assign output to answer var\n\n            mstore(0x40,add(ptr,0x24)) // Set storage pointer to new space\n\n        }\n",
          "message": "Call.params1 (TwoKeyFactory.sol#839-867) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 869,
          "vulnerability_to_line": 899,
          "vulnerability_code": "    function params2(address c, bytes _method, uint _val1, uint _val2) public view returns (uint answer) {\n\n        // https://medium.com/@blockchain101/calling-the-function-of-another-contract-in-solidity-f9edfa921f4c\n\n        //    dc = c;\n\n        bytes4 sig = bytes4(keccak256(_method));\n\n        assembly {\n\n        // move pointer to free memory spot\n\n            let ptr := mload(0x40)\n\n        // put function sig at memory spot\n\n            mstore(ptr,sig)\n\n        // append argument after function sig\n\n            mstore(add(ptr,0x04), _val1)\n\n            mstore(add(ptr,0x24), _val2)\n\n\n\n            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n\n            15000, // gas limit\n\n            c, // sload(dc_slot),  // to addr. append var to _slot to access storage variable\n\n            0, // not transfer any ether (comment if using staticcall)\n\n            ptr, // Inputs are stored at location ptr\n\n            0x44, // Inputs are 4 bytes for signature and 2 uint256\n\n            ptr,  //Store output over input\n\n            0x20) //Outputs are 1 uint long\n\n\n\n        // TODO cause revert\n\n        //            if eq(result, 0) {\n\n        //                revert(0, 0)\n\n        //            }\n\n\n\n            answer := mload(ptr) // Assign output to answer var\n\n            mstore(0x40,add(ptr,0x20)) // Set storage pointer to new space\n\n        }\n",
          "message": "Call.params2 (TwoKeyFactory.sol#869-899) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1041,
          "vulnerability_to_line": 1066,
          "vulnerability_code": "    function recoverSig(bytes sig, address old_key, address last_address) public pure returns (address[], address[], uint8[]) {\n\n        // validate sig AND\n\n        // recover the information from the signature: influencers, public_link_keys, weights/cuts\n\n        // influencers may have one more address than the keys and weights arrays\n\n        //\n\n        require(old_key != address(0),'no public link key');\n\n\n\n        address[] memory influencers;\n\n        address[] memory keys;\n\n        uint8[] memory weights;\n\n        uint[] memory offsets;\n\n        (influencers, keys, weights, offsets) = recoverSigParts(sig, last_address);\n\n\n\n        // check if we received a valid signature\n\n        for(uint i = 0; i < influencers.length; i++) {\n\n            if (i < weights.length) {\n\n                require (recoverHash(keccak256(abi.encodePacked(weights[i], keys[i], influencers[i])),sig,offsets[i]) == old_key, 'illegal signature');\n\n                old_key = keys[i];\n\n            } else {\n\n                // signed message for the last step is the address of the converter\n\n                require (recoverHash(keccak256(abi.encodePacked(influencers[i])),sig,offsets[i]) == old_key, 'illegal last signature');\n\n            }\n\n        }\n\n\n\n        return (influencers, keys, weights);\n",
          "message": "Call.recoverSig (TwoKeyFactory.sol#1041-1066) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1238,
          "vulnerability_to_line": 1289,
          "vulnerability_code": "    function setInitialParamsLogicHandler(\n\n        uint [] values,\n\n        string _currency,\n\n        address _assetContractERC20,\n\n        address _moderator,\n\n        address _contractor,\n\n        address _acquisitionCampaignAddress,\n\n        address _twoKeySingletoneRegistry,\n\n        address _twoKeyConversionHandler\n\n    )\n\n    public\n\n    {\n\n        require(values[1] >= values[0], \"max contribution criteria not satisfied\");\n\n        require(values[4] > values[3], \"campaign start time can't be greater than end time\");\n\n        require(isCampaignInitialized == false);\n\n\n\n        if(values[0] == values[1]) {\n\n            isFixedInvestmentAmount = true;\n\n        }\n\n\n\n        minContributionETHorFiatCurrency = values[0];\n\n        maxContributionETHorFiatCurrency = values[1];\n\n        pricePerUnitInETHWeiOrUSD = values[2];\n\n        campaignStartTime = values[3];\n\n        campaignEndTime = values[4];\n\n        maxConverterBonusPercent = values[5];\n\n\n\n        //Add as 6th argument incentive model uint\n\n        incentiveModel = IncentiveModel(values[6]);\n\n        if(values[7] == 1) {\n\n            isAcceptingFiatOnly = true;\n\n        }\n\n\n\n        campaignHardCapWei = values[8];\n\n\n\n        currency = _currency;\n\n        assetContractERC20 = _assetContractERC20;\n\n        moderator = _moderator;\n\n        contractor = _contractor;\n\n        unit_decimals = IERC20(_assetContractERC20).decimals();\n\n\n\n        twoKeyAcquisitionCampaign = _acquisitionCampaignAddress;\n\n        twoKeySingletoneRegistry = _twoKeySingletoneRegistry;\n\n\n\n        twoKeyRegistry = ITwoKeySingletoneRegistryFetchAddress(twoKeySingletoneRegistry).getContractProxyAddress(\"TwoKeyRegistry\");\n\n        twoKeyMaintainersRegistry = ITwoKeySingletoneRegistryFetchAddress(twoKeySingletoneRegistry).getContractProxyAddress(\"TwoKeyMaintainersRegistry\");\n\n\n\n        ownerPlasma = plasmaOf(contractor);\n\n        twoKeyConversionHandler = _twoKeyConversionHandler;\n\n\n\n        isCampaignInitialized = true;\n",
          "message": "TwoKeyAcquisitionLogicHandler.setInitialParamsLogicHandler (TwoKeyFactory.sol#1238-1289) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1294,
          "vulnerability_to_line": 1300,
          "vulnerability_code": "    function activateCampaign() public onlyContractor {\n\n        require(IS_CAMPAIGN_ACTIVE == false);\n\n        uint balanceOfTokenBeingSoldOnAcquisition = getInventoryBalance();\n\n        //balance is in weis, price is in weis and hardcap is regular number\n\n        require((balanceOfTokenBeingSoldOnAcquisition * pricePerUnitInETHWeiOrUSD).div(10**18) >= campaignHardCapWei);\n\n        IS_CAMPAIGN_ACTIVE = true;\n",
          "message": "TwoKeyAcquisitionLogicHandler.activateCampaign (TwoKeyFactory.sol#1294-1300) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1319,
          "vulnerability_to_line": 1335,
          "vulnerability_code": "    function canConversionBeCreated(address converter, uint amountWillingToSpend, bool isFiat) public view returns (bool) {\n\n        bool canConvert = checkIsCampaignActive();\n\n        if(IS_CAMPAIGN_ACTIVE == false) {\n\n            return false;\n\n        }\n\n        if(canConvert == false) {\n\n            return false;\n\n        }\n\n        //If we reach this point means we have reached point that campaign is still active\n\n        if(isFiat) {\n\n            (canConvert,)= canMakeFiatConversion(converter, amountWillingToSpend);\n\n        } else {\n\n            (canConvert,) = canMakeETHConversion(converter, amountWillingToSpend);\n\n        }\n\n\n\n        return canConvert;\n",
          "message": "TwoKeyAcquisitionLogicHandler.canConversionBeCreated (TwoKeyFactory.sol#1319-1335) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1401,
          "vulnerability_to_line": 1407,
          "vulnerability_code": "    function getInvestmentRules()\n\n    public\n\n    view\n\n    returns (bool,uint,uint)\n\n    {\n\n        return (isFixedInvestmentAmount, minContributionETHorFiatCurrency, maxContributionETHorFiatCurrency);\n",
          "message": "TwoKeyAcquisitionLogicHandler.getInvestmentRules (TwoKeyFactory.sol#1401-1407) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1416,
          "vulnerability_to_line": 1443,
          "vulnerability_code": "    function getEstimatedTokenAmount(\n\n        uint conversionAmountETHWeiOrFiat,\n\n        bool isFiatConversion\n\n    )\n\n    public\n\n    view\n\n    returns (uint, uint)\n\n    {\n\n        uint value = pricePerUnitInETHWeiOrUSD;\n\n        uint baseTokensForConverterUnits;\n\n        uint bonusTokensForConverterUnits;\n\n        if(isFiatConversion == true) {\n\n            baseTokensForConverterUnits = conversionAmountETHWeiOrFiat.mul(10**18).div(value);\n\n            bonusTokensForConverterUnits = baseTokensForConverterUnits.mul(maxConverterBonusPercent).div(100);\n\n            return (baseTokensForConverterUnits, bonusTokensForConverterUnits);\n\n        } else {\n\n            if(keccak256(currency) != keccak256('ETH')) {\n\n                address ethUSDExchangeContract = ITwoKeySingletoneRegistryFetchAddress(twoKeySingletoneRegistry).getContractProxyAddress(\"TwoKeyExchangeRateContract\");\n\n                uint rate = ITwoKeyExchangeRateContract(ethUSDExchangeContract).getBaseToTargetRate(currency);\n\n\n\n                conversionAmountETHWeiOrFiat = (conversionAmountETHWeiOrFiat.mul(rate)).div(10 ** 18); //converting eth to $wei\n\n            }\n\n        }\n\n\n\n        baseTokensForConverterUnits = conversionAmountETHWeiOrFiat.mul(10 ** unit_decimals).div(value);\n\n        bonusTokensForConverterUnits = baseTokensForConverterUnits.mul(maxConverterBonusPercent).div(100);\n\n        return (baseTokensForConverterUnits, bonusTokensForConverterUnits);\n",
          "message": "TwoKeyAcquisitionLogicHandler.getEstimatedTokenAmount (TwoKeyFactory.sol#1416-1443) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1450,
          "vulnerability_to_line": 1457,
          "vulnerability_code": "    function updateMinContributionETHOrUSD(\n\n        uint value\n\n    )\n\n    public\n\n    onlyContractor\n\n    {\n\n        minContributionETHorFiatCurrency = value;\n",
          "message": "TwoKeyAcquisitionLogicHandler.updateMinContributionETHOrUSD (TwoKeyFactory.sol#1450-1457) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1477,
          "vulnerability_to_line": 1491,
          "vulnerability_code": "    function getConstantInfo()\n\n    public\n\n    view\n\n    returns (uint,uint,uint,uint,uint,uint,uint)\n\n    {\n\n        return (\n\n            campaignStartTime,\n\n            campaignEndTime,\n\n            minContributionETHorFiatCurrency,\n\n            maxContributionETHorFiatCurrency,\n\n            unit_decimals,\n\n            pricePerUnitInETHWeiOrUSD,\n\n            maxConverterBonusPercent\n\n        );\n",
          "message": "TwoKeyAcquisitionLogicHandler.getConstantInfo (TwoKeyFactory.sol#1477-1491) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1606,
          "vulnerability_to_line": 1638,
          "vulnerability_code": "    function getSuperStatistics(\n\n        address _user,\n\n        bool plasma,\n\n        bytes signature\n\n    )\n\n    public\n\n    view\n\n    returns (bytes)\n\n    {\n\n        address eth_address = _user;\n\n\n\n        if (plasma) {\n\n            (eth_address) = ITwoKeyReg(twoKeyRegistry).getPlasmaToEthereum(_user);\n\n        }\n\n\n\n        bytes memory userData = ITwoKeyReg(twoKeyRegistry).getUserData(eth_address);\n\n\n\n        bool isJoined = getAddressJoinedStatus(_user);\n\n        bool flag;\n\n\n\n        address _address;\n\n\n\n        if(msg.sender == contractor || msg.sender == eth_address) {\n\n            flag = true;\n\n        } else {\n\n            _address = recover(signature);\n\n            if(_address == ownerPlasma) {\n\n                flag = true;\n\n            }\n\n        }\n\n        bytes memory stats = getAddressStatistic(_user, plasma, flag, _address);\n\n        return abi.encodePacked(userData, isJoined, eth_address, stats);\n",
          "message": "TwoKeyAcquisitionLogicHandler.getSuperStatistics (TwoKeyFactory.sol#1606-1638) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1690,
          "vulnerability_to_line": 1754,
          "vulnerability_code": "    function updateRefchainRewards(\n\n        uint256 _maxReferralRewardETHWei,\n\n        address _converter,\n\n        uint _conversionId,\n\n        uint totalBounty2keys\n\n    )\n\n    public\n\n    {\n\n        require(msg.sender == twoKeyAcquisitionCampaign);\n\n\n\n        //Get all the influencers\n\n        address[] memory influencers = getReferrers(_converter,twoKeyAcquisitionCampaign);\n\n\n\n        //Get array length\n\n        uint numberOfInfluencers = influencers.length;\n\n\n\n        uint i;\n\n        uint reward;\n\n        if(incentiveModel == IncentiveModel.VANILLA_AVERAGE) {\n\n            reward = IncentiveModels.averageModelRewards(totalBounty2keys, numberOfInfluencers);\n\n            for(i=0; i<numberOfInfluencers; i++) {\n\n                updateReferrerMappings(influencers[i], reward, _conversionId);\n\n\n\n            }\n\n        } else if (incentiveModel == IncentiveModel.VANILLA_AVERAGE_LAST_3X) {\n\n            uint rewardForLast;\n\n            // Calculate reward for regular ones and for the last\n\n            (reward, rewardForLast) = IncentiveModels.averageLast3xRewards(totalBounty2keys, numberOfInfluencers);\n\n\n\n            //Update equal rewards to all influencers but last\n\n            for(i=0; i<numberOfInfluencers - 1; i++) {\n\n                updateReferrerMappings(influencers[i], reward, _conversionId);\n\n\n\n            }\n\n            //Update reward for last\n\n            updateReferrerMappings(influencers[numberOfInfluencers-1], rewardForLast, _conversionId);\n\n        } else if(incentiveModel == IncentiveModel.VANILLA_POWER_LAW) {\n\n            // Get rewards per referrer\n\n            uint [] memory rewards = IncentiveModels.powerLawRewards(totalBounty2keys, numberOfInfluencers, 2);\n\n            //Iterate through all referrers and distribute rewards\n\n            for(i=0; i<numberOfInfluencers; i++) {\n\n                updateReferrerMappings(influencers[i], rewards[i], _conversionId);\n\n            }\n\n        } else if(incentiveModel == IncentiveModel.MANUAL) {\n\n            for (i = 0; i < numberOfInfluencers; i++) {\n\n                uint256 b;\n\n\n\n                if (i == influencers.length - 1) {  // if its the last influencer then all the bounty goes to it.\n\n                    b = totalBounty2keys;\n\n                }\n\n                else {\n\n                    uint256 cut = ITwoKeyAcquisitionCampaignERC20(twoKeyAcquisitionCampaign).getReferrerCut(influencers[i]);\n\n                    if (cut > 0 && cut <= 101) {\n\n                        b = totalBounty2keys.mul(cut.sub(1)).div(100);\n\n                    } else {// cut == 0 or 255 indicates equal particine of the bounty\n\n                        b = totalBounty2keys.div(influencers.length - i);\n\n                    }\n\n                }\n\n\n\n                updateReferrerMappings(influencers[i], b, _conversionId);\n\n                //Decrease bounty for distributed\n\n                totalBounty2keys = totalBounty2keys.sub(b);\n\n            }\n\n        }\n",
          "message": "TwoKeyAcquisitionLogicHandler.updateRefchainRewards (TwoKeyFactory.sol#1690-1754) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1786,
          "vulnerability_to_line": 1805,
          "vulnerability_code": "    function getReferrersBalancesAndTotalEarnings(\n\n        address[] _referrerPlasmaList\n\n    )\n\n    public\n\n    view\n\n    returns (uint256[], uint256[])\n\n    {\n\n        require(ITwoKeyMaintainersRegistry(twoKeyMaintainersRegistry).onlyMaintainer(msg.sender));\n\n\n\n        uint numberOfAddresses = _referrerPlasmaList.length;\n\n        uint256[] memory referrersPendingPlasmaBalance = new uint256[](numberOfAddresses);\n\n        uint256[] memory referrersTotalEarningsPlasmaBalance = new uint256[](numberOfAddresses);\n\n\n\n        for (uint i=0; i<numberOfAddresses; i++){\n\n            referrersPendingPlasmaBalance[i] = ITwoKeyAcquisitionCampaignERC20(twoKeyAcquisitionCampaign).getReferrerPlasmaBalance(_referrerPlasmaList[i]);\n\n            referrersTotalEarningsPlasmaBalance[i] = referrerPlasma2TotalEarnings2key[_referrerPlasmaList[i]];\n\n        }\n\n\n\n        return (referrersPendingPlasmaBalance, referrersTotalEarningsPlasmaBalance);\n",
          "message": "TwoKeyAcquisitionLogicHandler.getReferrersBalancesAndTotalEarnings (TwoKeyFactory.sol#1786-1805) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1816,
          "vulnerability_to_line": 1843,
          "vulnerability_code": "    function getReferrerBalanceAndTotalEarningsAndNumberOfConversions(\n\n        address _referrer,\n\n        bytes signature,\n\n        uint[] conversionIds\n\n    )\n\n    public\n\n    view\n\n    returns (uint,uint,uint,uint[])\n\n    {\n\n        if(_referrer != address(0)) {\n\n            require(msg.sender == _referrer || msg.sender == contractor || ITwoKeyMaintainersRegistry(twoKeyMaintainersRegistry).onlyMaintainer(msg.sender));\n\n            _referrer = plasmaOf(_referrer);\n\n        } else {\n\n            bytes32 hash = keccak256(abi.encodePacked(keccak256(abi.encodePacked(\"bytes binding referrer to plasma\")),\n\n                keccak256(abi.encodePacked(\"GET_REFERRER_REWARDS\"))));\n\n            _referrer = Call.recoverHash(hash, signature, 0);\n\n        }\n\n\n\n        uint len = conversionIds.length;\n\n        uint[] memory earnings = new uint[](len);\n\n\n\n        for(uint i=0; i<len; i++) {\n\n            earnings[i] = referrerPlasma2EarningsPerConversion[_referrer][conversionIds[i]];\n\n        }\n\n\n\n        uint referrerBalance = ITwoKeyAcquisitionCampaignERC20(twoKeyAcquisitionCampaign).getReferrerPlasmaBalance(_referrer);\n\n        return (referrerBalance, referrerPlasma2TotalEarnings2key[_referrer], referrerPlasmaAddressToCounterOfConversions[_referrer], earnings);\n",
          "message": "TwoKeyAcquisitionLogicHandler.getReferrerBalanceAndTotalEarningsAndNumberOfConversions (TwoKeyFactory.sol#1816-1843) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1846,
          "vulnerability_to_line": 1855,
          "vulnerability_code": "    function getReferrerPlasmaTotalEarnings(\n\n        address _referrer\n\n    )\n\n    public\n\n    view\n\n    returns (uint)\n\n    {\n\n        require(msg.sender == twoKeyAcquisitionCampaign);\n\n        return referrerPlasma2TotalEarnings2key[_referrer];\n",
          "message": "TwoKeyAcquisitionLogicHandler.getReferrerPlasmaTotalEarnings (TwoKeyFactory.sol#1846-1855) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1916,
          "vulnerability_to_line": 1918,
          "vulnerability_code": "    function implementation() public view returns (address) {\n\n        return _implementation;\n",
          "message": "UpgradeabilityStorage.implementation (TwoKeyFactory.sol#1916-1918) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1930,
          "vulnerability_to_line": 1932,
          "vulnerability_code": "    function initialize(address sender) public payable {\n\n        require(msg.sender == address(registry));\n",
          "message": "Upgradeable.initialize (TwoKeyFactory.sol#1930-1932) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 2060,
          "vulnerability_to_line": 2071,
          "vulnerability_code": "    function setInitialParams(\n\n        address _twoKeySingletonRegistry,\n\n        address _proxyStorage\n\n    )\n\n    public\n\n    {\n\n        require(initialized == false);\n\n\n\n        TWO_KEY_SINGLETON_REGISTRY = ITwoKeySingletoneRegistryFetchAddress(_twoKeySingletonRegistry);\n\n        PROXY_STORAGE_CONTRACT = ITwoKeyFactoryStorage(_proxyStorage);\n\n        initialized = true;\n",
          "message": "TwoKeyFactory.setInitialParams (TwoKeyFactory.sol#2060-2071) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 2092,
          "vulnerability_to_line": 2194,
          "vulnerability_code": "    function createProxiesForAcquisitions(\n\n        address[] addresses,\n\n        uint[] valuesConversion,\n\n        uint[] valuesLogicHandler,\n\n        uint[] values,\n\n        string _currency,\n\n        string _nonSingletonHash\n\n    )\n\n    public\n\n    payable\n\n    {\n\n\n\n        //Deploy proxy for Acquisition contract\n\n        ProxyCampaign proxyAcquisition = new ProxyCampaign(\n\n            \"TwoKeyAcquisitionCampaignERC20\",\n\n            getLatestContractVersion(\"TwoKeyAcquisitionCampaignERC20\"),\n\n            address(TWO_KEY_SINGLETON_REGISTRY)\n\n        );\n\n\n\n        //Deploy proxy for ConversionHandler contract\n\n        ProxyCampaign proxyConversions = new ProxyCampaign(\n\n            \"TwoKeyConversionHandler\",\n\n            getLatestContractVersion(\"TwoKeyConversionHandler\"),\n\n            address(TWO_KEY_SINGLETON_REGISTRY)\n\n        );\n\n\n\n        //Deploy proxy for TwoKeyAcquisitionLogicHandler contract\n\n        ProxyCampaign proxyLogicHandler = new ProxyCampaign(\n\n            \"TwoKeyAcquisitionLogicHandler\",\n\n            getLatestContractVersion(\"TwoKeyAcquisitionLogicHandler\"),\n\n            address(TWO_KEY_SINGLETON_REGISTRY)\n\n        );\n\n\n\n\n\n        //Deploy proxy for TwoKeyPurchasesHandler contract\n\n        ProxyCampaign proxyPurchasesHandler = new ProxyCampaign(\n\n            \"TwoKeyPurchasesHandler\",\n\n            getLatestContractVersion(\"TwoKeyAcquisitionLogicHandler\"),\n\n            address(TWO_KEY_SINGLETON_REGISTRY)\n\n        );\n\n\n\n\n\n        //        UpgradeableCampaign(proxyPurchasesHandler).initialize.value(msg.value)(msg.sender);\n\n        //        UpgradeableCampaign(proxyLogicHandler).initialize.value(msg.value)(msg.sender);\n\n        //        UpgradeableCampaign(proxyConversions).initialize.value(msg.value)(msg.sender);\n\n        //        UpgradeableCampaign(proxyAcquisition).initialize.value(msg.value)(msg.sender);\n\n\n\n        IHandleCampaignDeployment(proxyPurchasesHandler).setInitialParamsPurchasesHandler(\n\n            valuesConversion,\n\n            msg.sender,\n\n            addresses[0],\n\n            getAddressFromTwoKeySingletonRegistry(\"TwoKeyEventSource\"),\n\n            proxyConversions\n\n        );\n\n\n\n        // Set initial arguments inside Conversion Handler contract\n\n        IHandleCampaignDeployment(proxyConversions).setInitialParamsConversionHandler(\n\n            valuesConversion,\n\n            proxyAcquisition,\n\n            proxyPurchasesHandler,\n\n            msg.sender,\n\n            addresses[0], //ERC20 address\n\n            getAddressFromTwoKeySingletonRegistry(\"TwoKeyEventSource\"),\n\n            getAddressFromTwoKeySingletonRegistry(\"TwoKeyBaseReputationRegistry\")\n\n        );\n\n\n\n        // Set initial arguments inside Logic Handler contract\n\n        IHandleCampaignDeployment(proxyLogicHandler).setInitialParamsLogicHandler(\n\n            valuesLogicHandler,\n\n            _currency,\n\n            addresses[0], //asset contract erc20\n\n            addresses[1], // moderator\n\n            msg.sender,\n\n            proxyAcquisition,\n\n            address(TWO_KEY_SINGLETON_REGISTRY),\n\n            proxyConversions\n\n        );\n\n\n\n        // Set initial arguments inside AcquisitionCampaign contract\n\n        IHandleCampaignDeployment(proxyAcquisition).setInitialParamsCampaign(\n\n            address(TWO_KEY_SINGLETON_REGISTRY),\n\n            address(proxyLogicHandler),\n\n            address(proxyConversions),\n\n            addresses[1], //moderator\n\n            addresses[0], //asset contract\n\n            msg.sender, //contractor\n\n            values\n\n        );\n\n\n\n        // Validate campaign so it will be approved to interact (and write) to/with our singleton contracts\n\n        ITwoKeyCampaignValidator(getAddressFromTwoKeySingletonRegistry(\"TwoKeyCampaignValidator\"))\n\n        .validateAcquisitionCampaign(proxyAcquisition, _nonSingletonHash);\n\n\n\n        setAddressToCampaignType(proxyAcquisition, \"TOKEN_SELL\");\n\n        // Emit an event with proxies for Acquisition campaign\n\n        emit ProxyForCampaign(\n\n            proxyLogicHandler,\n\n            proxyConversions,\n\n            proxyAcquisition,\n\n            proxyPurchasesHandler,\n\n            msg.sender\n\n        );\n",
          "message": "TwoKeyFactory.createProxiesForAcquisitions (TwoKeyFactory.sol#2092-2194) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 2200,
          "vulnerability_to_line": 2281,
          "vulnerability_code": "    function createProxiesForDonationCampaign(\n\n        address _moderator,\n\n        uint [] numberValues,\n\n        bool [] booleanValues,\n\n        string _currency,\n\n        string tokenName,\n\n        string tokenSymbol,\n\n        string nonSingletonHash\n\n    )\n\n    public\n\n    {\n\n\n\n        // Deploying a proxy contract for donations\n\n        ProxyCampaign proxyDonationCampaign = new ProxyCampaign(\n\n            \"TwoKeyDonationCampaign\",\n\n            getLatestContractVersion(\"TwoKeyDonationCampaign\"),\n\n            TWO_KEY_SINGLETON_REGISTRY\n\n        );\n\n\n\n        //Deploying a proxy contract for donation conversion handler\n\n        ProxyCampaign proxyDonationConversionHandler = new ProxyCampaign(\n\n            \"TwoKeyDonationConversionHandler\",\n\n            getLatestContractVersion(\"TwoKeyDonationConversionHandler\"),\n\n            TWO_KEY_SINGLETON_REGISTRY\n\n        );\n\n\n\n        //Deploying a proxy contract for donation logic handler\n\n        ProxyCampaign proxyDonationLogicHandler = new ProxyCampaign(\n\n            \"TwoKeyDonationLogicHandler\",\n\n            getLatestContractVersion(\"TwoKeyDonationLogicHandler\"),\n\n            TWO_KEY_SINGLETON_REGISTRY\n\n        );\n\n\n\n        IHandleCampaignDeployment(proxyDonationLogicHandler).setInitialParamsDonationLogicHandler(\n\n            numberValues,\n\n            _currency,\n\n            msg.sender,\n\n            _moderator,\n\n            TWO_KEY_SINGLETON_REGISTRY,\n\n            proxyDonationCampaign,\n\n            proxyDonationConversionHandler\n\n        );\n\n\n\n        // Set initial parameters under Donation conversion handler\n\n        IHandleCampaignDeployment(proxyDonationConversionHandler).setInitialParamsDonationConversionHandler(\n\n            tokenName,\n\n            tokenSymbol,\n\n            _currency,\n\n            msg.sender, //contractor\n\n            proxyDonationCampaign,\n\n            address(TWO_KEY_SINGLETON_REGISTRY)\n\n        );\n\n\n\n        // Set initial parameters under Donation campaign contract\n\n        IHandleCampaignDeployment(proxyDonationCampaign).setInitialParamsDonationCampaign(\n\n            msg.sender, //contractor\n\n            _moderator, //moderator address\n\n            TWO_KEY_SINGLETON_REGISTRY,\n\n            proxyDonationConversionHandler,\n\n            proxyDonationLogicHandler,\n\n            numberValues,\n\n            booleanValues\n\n        );\n\n\n\n        // Validate campaign\n\n        ITwoKeyCampaignValidator(getAddressFromTwoKeySingletonRegistry(\"TwoKeyCampaignValidator\"))\n\n        .validateDonationCampaign(\n\n            proxyDonationCampaign,\n\n            proxyDonationConversionHandler,\n\n            nonSingletonHash\n\n        );\n\n\n\n        setAddressToCampaignType(proxyDonationCampaign, \"DONATION_CAMPAIGN\");\n\n\n\n//         Emit an event\n\n        emit ProxyForDonationCampaign(\n\n            proxyDonationCampaign,\n\n            proxyDonationConversionHandler,\n\n            proxyDonationLogicHandler,\n\n            msg.sender\n\n        );\n",
          "message": "TwoKeyFactory.createProxiesForDonationCampaign (TwoKeyFactory.sol#2200-2281) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 2297,
          "vulnerability_to_line": 2299,
          "vulnerability_code": "    function addressToCampaignType(address _key) public view returns (string) {\n\n        return PROXY_STORAGE_CONTRACT.getString(keccak256(\"addressToCampaignType\", _key));\n",
          "message": "TwoKeyFactory.addressToCampaignType (TwoKeyFactory.sol#2297-2299) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;\n",
          "message": "Detected issues with version pragma in TwoKeyFactory.sol:\n\t- pragma solidity^0.4.0 (TwoKeyFactory.sol#16): it allows old versions\n\t- pragma solidity^0.4.0 (TwoKeyFactory.sol#252): it allows old versions\n\t- pragma solidity^0.4.0 (TwoKeyFactory.sol#358): it allows old versions\n\t- pragma solidity^0.4.0 (TwoKeyFactory.sol#1960): it allows old versions\n\t- pragma solidity^0.4.0 (TwoKeyFactory.sol#2019): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address internal _implementation;\n",
          "message": "Variable 'UpgradeabilityCampaignStorage._implementation' (TwoKeyFactory.sol#201) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 257,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (string _contractName, string _version, address twoKeySingletonRegistry) public {\n",
          "message": "Parameter '_contractName' of ProxyCampaign. (TwoKeyFactory.sol#257) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 257,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (string _contractName, string _version, address twoKeySingletonRegistry) public {\n",
          "message": "Parameter '_version' of ProxyCampaign. (TwoKeyFactory.sol#257) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 405,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _contractor,\n",
          "message": "Parameter '_contractor' of TwoKeyPurchasesHandler.setInitialParamsPurchasesHandler (TwoKeyFactory.sol#405) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 406,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _assetContractERC20,\n",
          "message": "Parameter '_assetContractERC20' of TwoKeyPurchasesHandler.setInitialParamsPurchasesHandler (TwoKeyFactory.sol#406) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _twoKeyEventSource,\n",
          "message": "Parameter '_twoKeyEventSource' of TwoKeyPurchasesHandler.setInitialParamsPurchasesHandler (TwoKeyFactory.sol#407) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 408,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _proxyConversionHandler\n",
          "message": "Parameter '_proxyConversionHandler' of TwoKeyPurchasesHandler.setInitialParamsPurchasesHandler (TwoKeyFactory.sol#408) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 445,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _baseTokens,\n",
          "message": "Parameter '_baseTokens' of TwoKeyPurchasesHandler.startVesting (TwoKeyFactory.sol#445) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 446,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _bonusTokens,\n",
          "message": "Parameter '_bonusTokens' of TwoKeyPurchasesHandler.startVesting (TwoKeyFactory.sol#446) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 447,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _conversionId,\n",
          "message": "Parameter '_conversionId' of TwoKeyPurchasesHandler.startVesting (TwoKeyFactory.sol#447) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 448,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _converter\n",
          "message": "Parameter '_converter' of TwoKeyPurchasesHandler.startVesting (TwoKeyFactory.sol#448) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 462,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _baseTokens,\n",
          "message": "Parameter '_baseTokens' of TwoKeyPurchasesHandler.bonusVestingOnly (TwoKeyFactory.sol#462) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 463,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _bonusTokens,\n",
          "message": "Parameter '_bonusTokens' of TwoKeyPurchasesHandler.bonusVestingOnly (TwoKeyFactory.sol#463) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 464,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _conversionId,\n",
          "message": "Parameter '_conversionId' of TwoKeyPurchasesHandler.bonusVestingOnly (TwoKeyFactory.sol#464) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 465,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _converter\n",
          "message": "Parameter '_converter' of TwoKeyPurchasesHandler.bonusVestingOnly (TwoKeyFactory.sol#465) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 492,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _baseTokens,\n",
          "message": "Parameter '_baseTokens' of TwoKeyPurchasesHandler.baseAndBonusVesting (TwoKeyFactory.sol#492) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 493,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _bonusTokens,\n",
          "message": "Parameter '_bonusTokens' of TwoKeyPurchasesHandler.baseAndBonusVesting (TwoKeyFactory.sol#493) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 494,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _conversionId,\n",
          "message": "Parameter '_conversionId' of TwoKeyPurchasesHandler.baseAndBonusVesting (TwoKeyFactory.sol#494) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 495,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _converter\n",
          "message": "Parameter '_converter' of TwoKeyPurchasesHandler.baseAndBonusVesting (TwoKeyFactory.sol#495) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 522,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _newDate\n",
          "message": "Parameter '_newDate' of TwoKeyPurchasesHandler.changeDistributionDate (TwoKeyFactory.sol#522) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 566,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _conversionId\n",
          "message": "Parameter '_conversionId' of TwoKeyPurchasesHandler.getPurchaseInformation (TwoKeyFactory.sol#566) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 698,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTotalReferrerEarnings(address _referrer, address eth_address) public view returns (uint);\n",
          "message": "Parameter 'eth_address' of ITwoKeyAcquisitionCampaignERC20.getTotalReferrerEarnings (TwoKeyFactory.sol#698) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 765,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_a' of SafeMath.mul (TwoKeyFactory.sol#765) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 765,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_b' of SafeMath.mul (TwoKeyFactory.sol#765) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 781,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_a' of SafeMath.div (TwoKeyFactory.sol#781) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 781,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_b' of SafeMath.div (TwoKeyFactory.sol#781) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 791,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_a' of SafeMath.sub (TwoKeyFactory.sol#791) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 791,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_b' of SafeMath.sub (TwoKeyFactory.sol#791) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 799,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_a' of SafeMath.add (TwoKeyFactory.sol#799) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 799,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_b' of SafeMath.add (TwoKeyFactory.sol#799) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 811,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params0(address c, bytes _method) public view returns (uint answer) {\n",
          "message": "Parameter '_method' of Call.params0 (TwoKeyFactory.sol#811) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 839,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params1(address c, bytes _method, uint _val) public view returns (uint answer) {\n",
          "message": "Parameter '_method' of Call.params1 (TwoKeyFactory.sol#839) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 869,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params2(address c, bytes _method, uint _val1, uint _val2) public view returns (uint answer) {\n",
          "message": "Parameter '_method' of Call.params2 (TwoKeyFactory.sol#869) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 974,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigParts(bytes sig, address last_address) private pure returns (address[], address[], uint8[], uint[]) {\n",
          "message": "Parameter 'last_address' of Call.recoverSigParts (TwoKeyFactory.sol#974) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1041,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSig(bytes sig, address old_key, address last_address) public pure returns (address[], address[], uint8[]) {\n",
          "message": "Parameter 'old_key' of Call.recoverSig (TwoKeyFactory.sol#1041) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1041,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSig(bytes sig, address old_key, address last_address) public pure returns (address[], address[], uint8[]) {\n",
          "message": "Parameter 'last_address' of Call.recoverSig (TwoKeyFactory.sol#1041) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1240,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _currency,\n",
          "message": "Parameter '_currency' of TwoKeyAcquisitionLogicHandler.setInitialParamsLogicHandler (TwoKeyFactory.sol#1240) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1241,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _assetContractERC20,\n",
          "message": "Parameter '_assetContractERC20' of TwoKeyAcquisitionLogicHandler.setInitialParamsLogicHandler (TwoKeyFactory.sol#1241) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1242,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _moderator,\n",
          "message": "Parameter '_moderator' of TwoKeyAcquisitionLogicHandler.setInitialParamsLogicHandler (TwoKeyFactory.sol#1242) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1243,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _contractor,\n",
          "message": "Parameter '_contractor' of TwoKeyAcquisitionLogicHandler.setInitialParamsLogicHandler (TwoKeyFactory.sol#1243) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1244,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _acquisitionCampaignAddress,\n",
          "message": "Parameter '_acquisitionCampaignAddress' of TwoKeyAcquisitionLogicHandler.setInitialParamsLogicHandler (TwoKeyFactory.sol#1244) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1245,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _twoKeySingletoneRegistry,\n",
          "message": "Parameter '_twoKeySingletoneRegistry' of TwoKeyAcquisitionLogicHandler.setInitialParamsLogicHandler (TwoKeyFactory.sol#1245) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1246,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _twoKeyConversionHandler\n",
          "message": "Parameter '_twoKeyConversionHandler' of TwoKeyAcquisitionLogicHandler.setInitialParamsLogicHandler (TwoKeyFactory.sol#1246) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1514,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _address\n",
          "message": "Parameter '_address' of TwoKeyAcquisitionLogicHandler.getAddressJoinedStatus (TwoKeyFactory.sol#1514) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1538,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _address,\n",
          "message": "Parameter '_address' of TwoKeyAcquisitionLogicHandler.getAddressStatistic (TwoKeyFactory.sol#1538) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1607,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _user,\n",
          "message": "Parameter '_user' of TwoKeyAcquisitionLogicHandler.getSuperStatistics (TwoKeyFactory.sol#1607) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1692,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _converter,\n",
          "message": "Parameter '_converter' of TwoKeyAcquisitionLogicHandler.updateRefchainRewards (TwoKeyFactory.sol#1692) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1693,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _conversionId,\n",
          "message": "Parameter '_conversionId' of TwoKeyAcquisitionLogicHandler.updateRefchainRewards (TwoKeyFactory.sol#1693) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1787,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] _referrerPlasmaList\n",
          "message": "Parameter '_referrerPlasmaList' of TwoKeyAcquisitionLogicHandler.getReferrersBalancesAndTotalEarnings (TwoKeyFactory.sol#1787) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1817,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _referrer,\n",
          "message": "Parameter '_referrer' of TwoKeyAcquisitionLogicHandler.getReferrerBalanceAndTotalEarningsAndNumberOfConversions (TwoKeyFactory.sol#1817) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1847,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _referrer\n",
          "message": "Parameter '_referrer' of TwoKeyAcquisitionLogicHandler.getReferrerPlasmaTotalEarnings (TwoKeyFactory.sol#1847) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1195,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool public IS_CAMPAIGN_ACTIVE;\n",
          "message": "Variable 'TwoKeyAcquisitionLogicHandler.IS_CAMPAIGN_ACTIVE' (TwoKeyFactory.sol#1195) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1218,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint unit_decimals; // ERC20 selling data\n",
          "message": "Variable 'TwoKeyAcquisitionLogicHandler.unit_decimals' (TwoKeyFactory.sol#1218) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1910,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address internal _implementation;\n",
          "message": "Variable 'UpgradeabilityStorage._implementation' (TwoKeyFactory.sol#1910) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1942,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address public TWO_KEY_SINGLETON_REGISTRY;\n",
          "message": "Variable 'ITwoKeySingletonUtils.TWO_KEY_SINGLETON_REGISTRY' (TwoKeyFactory.sol#1942) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2061,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _twoKeySingletonRegistry,\n",
          "message": "Parameter '_twoKeySingletonRegistry' of TwoKeyFactory.setInitialParams (TwoKeyFactory.sol#2061) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2062,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _proxyStorage\n",
          "message": "Parameter '_proxyStorage' of TwoKeyFactory.setInitialParams (TwoKeyFactory.sol#2062) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2097,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _currency,\n",
          "message": "Parameter '_currency' of TwoKeyFactory.createProxiesForAcquisitions (TwoKeyFactory.sol#2097) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2098,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _nonSingletonHash\n",
          "message": "Parameter '_nonSingletonHash' of TwoKeyFactory.createProxiesForAcquisitions (TwoKeyFactory.sol#2098) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2201,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _moderator,\n",
          "message": "Parameter '_moderator' of TwoKeyFactory.createProxiesForDonationCampaign (TwoKeyFactory.sol#2201) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2204,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _currency,\n",
          "message": "Parameter '_currency' of TwoKeyFactory.createProxiesForDonationCampaign (TwoKeyFactory.sol#2204) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2288,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setAddressToCampaignType(address _campaignAddress, string _campaignType) internal {\n",
          "message": "Parameter '_campaignAddress' of TwoKeyFactory.setAddressToCampaignType (TwoKeyFactory.sol#2288) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2288,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setAddressToCampaignType(address _campaignAddress, string _campaignType) internal {\n",
          "message": "Parameter '_campaignType' of TwoKeyFactory.setAddressToCampaignType (TwoKeyFactory.sol#2288) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2297,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addressToCampaignType(address _key) public view returns (string) {\n",
          "message": "Parameter '_key' of TwoKeyFactory.addressToCampaignType (TwoKeyFactory.sol#2297) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2038,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ITwoKeyFactoryStorage PROXY_STORAGE_CONTRACT;\n",
          "message": "Variable 'TwoKeyFactory.PROXY_STORAGE_CONTRACT' (TwoKeyFactory.sol#2038) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 196,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ITwoKeySingletonesRegistry internal registry;\n",
          "message": "UpgradeabilityCampaignStorage.registry (TwoKeyFactory.sol#196) is never used in TwoKeyPurchasesHandler\nUpgradeabilityCampaignStorage.twoKeyFactory (TwoKeyFactory.sol#198) is never used in TwoKeyPurchasesHandler\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 196,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ITwoKeySingletonesRegistry internal registry;\n",
          "message": "UpgradeabilityCampaignStorage.registry (TwoKeyFactory.sol#196) is never used in TwoKeyAcquisitionLogicHandler\nUpgradeabilityCampaignStorage.twoKeyFactory (TwoKeyFactory.sol#198) is never used in TwoKeyAcquisitionLogicHandler\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 436,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=1; i<numberOfVestingPortions + 1; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 476,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=1; i<numberOfVestingPortions + 1; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 505,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<numberOfVestingPortions; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 533,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<numberOfVestingPortions+1;i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 605,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i< numberOfVestingPortions+1; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 1055,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i = 0; i < influencers.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 1000,
          "vulnerability_to_line": null,
          "vulnerability_code": "        while (idx + 65 <= sig.length) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 811,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params0(address c, bytes _method) public view returns (uint answer) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 839,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params1(address c, bytes _method, uint _val) public view returns (uint answer) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 869,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params2(address c, bytes _method, uint _val1, uint _val2) public view returns (uint answer) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1055,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i = 0; i < influencers.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1710,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for(i=0; i<numberOfInfluencers; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1730,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for(i=0; i<numberOfInfluencers; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1734,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (i = 0; i < numberOfInfluencers; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1799,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i=0; i<numberOfAddresses; i++){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1837,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<len; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1000,
          "vulnerability_to_line": null,
          "vulnerability_code": "        while (idx + 65 <= sig.length) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1657,
          "vulnerability_to_line": null,
          "vulnerability_code": "        while (true) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Proxy {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 1925,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Upgradeable is UpgradeabilityStorage {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 2034,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract TwoKeyFactory is Upgradeable, ITwoKeySingletonUtils {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 148,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 188,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 214,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 266,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 279,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 291,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 358,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 617,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 629,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 683,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 706,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 733,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 745,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 753,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 808,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1071,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1158,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1169,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1899,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1923,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1937,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1960,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 2011,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 2019,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 1191,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 901,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function loadAddress(bytes sig, uint idx) public pure returns (address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 911,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function loadUint8(bytes sig, uint idx) public pure returns (uint8) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 922,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverHash(bytes32 hash, bytes sig, uint idx) public pure returns (address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 811,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params0(address c, bytes _method) public view returns (uint answer) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 839,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params1(address c, bytes _method, uint _val) public view returns (uint answer) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 869,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params2(address c, bytes _method, uint _val1, uint _val2) public view returns (uint answer) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 959,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigMemory(bytes sig) private pure returns (address[], address[], uint8[], uint[], uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 974,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigParts(bytes sig, address last_address) private pure returns (address[], address[], uint8[], uint[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1104,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) internal pure returns (uint,uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1339,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function canMakeFiatConversion(address converter, uint amountWillingToSpendFiatWei) internal view returns (bool,uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2289,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32 keyHash = keccak256(\"addressToCampaignType\",_campaignAddress);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2298,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return PROXY_STORAGE_CONTRACT.getString(keccak256(\"addressToCampaignType\", _key));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function () payable public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getContractProxyAddress(string _contractName) public view returns (address);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getNonUpgradableContractAddress(string contractName) public view returns (address);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getLatestContractVersion(string contractName) public view returns (string);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getLatestContractVersion(string contractName) public view returns (string);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint [] values\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint [] values,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _currency,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint [] values,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint[] values,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint [] numberValues,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool [] booleanValues\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string tokenName,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string tokenSymbol,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _currency,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 122,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint[] numberValues,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string currency,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function validateAcquisitionCampaign(address campaign, string nonSingletonHash) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function validateDonationCampaign(address campaign, address donationConversionHandler, string nonSingletonHash) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 175,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addVersion(string _contractName, string version, address implementation) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 175,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addVersion(string _contractName, string version, address implementation) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getVersion(string _contractName, string version) public view returns (address);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getVersion(string _contractName, string version) public view returns (address);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 257,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (string _contractName, string _version, address twoKeySingletonRegistry) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 257,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (string _contractName, string _version, address twoKeySingletonRegistry) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 404,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint[] values,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 570,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (address, uint, uint, uint[], bool[], uint[])\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 570,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (address, uint, uint, uint[], bool[], uint[])\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 570,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (address, uint, uint, uint[], bool[], uint[])\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 602,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (uint[])\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 624,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBaseToTargetRate(string _currency) public view returns (uint);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 716,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getContractsWhereUserIsContractor(address _userAddress) public view returns (address[]);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 717,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getContractsWhereUserIsModerator(address _userAddress) public view returns (address[]);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 718,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getContractsWhereUserIsRefferer(address _userAddress) public view returns (address[]);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 719,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getContractsWhereUserIsConverter(address _userAddress) public view returns (address[]);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 721,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addName(string _name, address _sender, string _fullName, string _email, bytes signature) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 721,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addName(string _name, address _sender, string _fullName, string _email, bytes signature) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 721,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addName(string _name, address _sender, string _fullName, string _email, bytes signature) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 721,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addName(string _name, address _sender, string _fullName, string _email, bytes signature) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 722,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addNameByUser(string _name) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 723,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getName2Owner(string _name) public view returns (address);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 724,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getOwner2Name(address _sender) public view returns (string);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 811,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params0(address c, bytes _method) public view returns (uint answer) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 839,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params1(address c, bytes _method, uint _val) public view returns (uint answer) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 869,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params2(address c, bytes _method, uint _val1, uint _val2) public view returns (uint answer) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 901,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function loadAddress(bytes sig, uint idx) public pure returns (address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 911,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function loadUint8(bytes sig, uint idx) public pure returns (uint8) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 922,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverHash(bytes32 hash, bytes sig, uint idx) public pure returns (address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 959,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigMemory(bytes sig) private pure returns (address[], address[], uint8[], uint[], uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 959,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigMemory(bytes sig) private pure returns (address[], address[], uint8[], uint[], uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 959,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigMemory(bytes sig) private pure returns (address[], address[], uint8[], uint[], uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 959,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigMemory(bytes sig) private pure returns (address[], address[], uint8[], uint[], uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 959,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigMemory(bytes sig) private pure returns (address[], address[], uint8[], uint[], uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 974,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigParts(bytes sig, address last_address) private pure returns (address[], address[], uint8[], uint[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 974,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigParts(bytes sig, address last_address) private pure returns (address[], address[], uint8[], uint[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 974,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigParts(bytes sig, address last_address) private pure returns (address[], address[], uint8[], uint[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 974,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigParts(bytes sig, address last_address) private pure returns (address[], address[], uint8[], uint[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 974,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigParts(bytes sig, address last_address) private pure returns (address[], address[], uint8[], uint[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1041,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSig(bytes sig, address old_key, address last_address) public pure returns (address[], address[], uint8[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1041,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSig(bytes sig, address old_key, address last_address) public pure returns (address[], address[], uint8[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1041,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSig(bytes sig, address old_key, address last_address) public pure returns (address[], address[], uint8[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1041,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSig(bytes sig, address old_key, address last_address) public pure returns (address[], address[], uint8[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1123,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) internal pure returns (uint[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1239,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint [] values,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1240,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _currency,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1545,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (bytes)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1588,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes signature\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1609,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes signature\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1613,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (bytes)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1652,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (address[])\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1787,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] _referrerPlasmaList\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1791,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (uint256[], uint256[])\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1791,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (uint256[], uint256[])\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1818,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes signature,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1819,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint[] conversionIds\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1823,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (uint,uint,uint,uint[])\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1952,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAddressFromTwoKeySingletonRegistry(string contractName) internal view returns (address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2073,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getLatestContractVersion(string contractName) internal view returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2073,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getLatestContractVersion(string contractName) internal view returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2093,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] addresses,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2094,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint[] valuesConversion,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2095,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint[] valuesLogicHandler,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2096,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint[] values,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2097,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _currency,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2098,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _nonSingletonHash\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2202,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint [] numberValues,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2203,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool [] booleanValues,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2204,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _currency,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2205,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string tokenName,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2206,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string tokenSymbol,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2207,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string nonSingletonHash\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2288,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setAddressToCampaignType(address _campaignAddress, string _campaignType) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2297,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addressToCampaignType(address _key) public view returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 548,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Purchase p = conversionIdToPurchase[conversionId];\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 236,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 815,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 843,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 873,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 904,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 914,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 930,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 937,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 944,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 175,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addVersion(string _contractName, string version, address implementation) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getVersion(string _contractName, string version) public view returns (address);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 365,
          "vulnerability_to_line": null,
          "vulnerability_code": "    VestingAmount vestingAmount;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 367,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool initialized;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 368,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool isDistributionDateChanged;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 370,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address proxyConversionHandler;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 372,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address converter;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 373,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address contractor;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 374,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address twoKeyEventSource;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 378,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint numberOfPurchases;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 379,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint bonusTokensVestingStartShiftInDaysFromDistributionDate;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 380,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint tokenDistributionDate; // Start of token distribution\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 381,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint numberOfVestingPortions; // For example 6\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 382,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint numberOfDaysBetweenPortions; // For example 30 days\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 383,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint maxDistributionDateShiftInDays;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 385,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(uint => Purchase) conversionIdToPurchase;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1193,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool isCampaignInitialized;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1202,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address twoKeyRegistry;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1203,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address twoKeyMaintainersRegistry;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1205,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address assetContractERC20;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1206,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address contractor;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1207,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address moderator;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1210,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool isFixedInvestmentAmount; // This means that minimal contribution is equal maximal contribution\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1211,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool isAcceptingFiatOnly; // Means that only fiat conversions will be able to execute -> no referral rewards at all\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1213,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint campaignStartTime; // Time when campaign start\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1214,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint campaignEndTime; // Time when campaign ends\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1215,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint minContributionETHorFiatCurrency; //Minimal contribution\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1216,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint maxContributionETHorFiatCurrency; //Maximal contribution\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1217,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint pricePerUnitInETHWeiOrUSD; // There's single price for the unit ERC20 (Should be in WEI)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1218,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint unit_decimals; // ERC20 selling data\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1219,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint maxConverterBonusPercent; // Maximal bonus percent per converter\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1220,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint campaignHardCapWei; // Hard cap of campaign\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1225,
          "vulnerability_to_line": null,
          "vulnerability_code": "    IncentiveModel incentiveModel;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2036,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool initialized;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2038,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ITwoKeyFactoryStorage PROXY_STORAGE_CONTRACT;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 911,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function loadUint8(bytes sig, uint idx) public pure returns (uint8) {\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 1606,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getSuperStatistics(\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 1342,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(keccak256(currency) == keccak256('ETH')) {\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 2200,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function createProxiesForDonationCampaign(\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 403,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setInitialParamsPurchasesHandler(\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 927,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require (sig.length >= 65+idx, 'bad signature length');\n",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 962,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint n_influencers = (sig.length-21) / (65+msg_len);\n",
          "message": null
        }
      ]
    }
  }
}