pragma solidity ^0.4.24;






library SafeMath {

  


  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {
    
    
    
    if (_a == 0) {
      return 0;
    }

    c = _a * _b;
    require(c / _a == _b);
    return c;
  }

  


  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {
    
    
    
    return _a / _b;
  }

  


  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {
    require(_b <= _a);
    return _a - _b;
  }

  


  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {
    c = _a + _b;
    require(c >= _a);
    return c;
  }
}



pragma solidity ^0.4.24;

function newProposal(
    address beneficiary,
    uint weiAmount,
    string jobDescription,
    bytes transactionBytecode)
public
onlyMembers
returns (uint proposalID)
{
    require(onlyAllowedMethods(transactionBytecode)); 
    proposalID = proposals.length;
    Proposal memory p = Proposal({
        recipient: beneficiary,
        amount: weiAmount,
        description: jobDescription,
        proposalHash: keccak256(abi.encodePacked(beneficiary, weiAmount, transactionBytecode)),
        transactionBytecode: transactionBytecode,
        minExecutionDate: block.timestamp + debatingPeriodInMinutes * 1 minutes,
        executed: false,
        proposalPassed: false,
        numberOfVotes: 0,
        currentResult: 0,
        votes: new Vote[](0)
    });
    proposals.push(p);
    emit ProposalAdded(proposalID, beneficiary, weiAmount, jobDescription);
    numProposals = proposals.length;

    return proposalID;
}