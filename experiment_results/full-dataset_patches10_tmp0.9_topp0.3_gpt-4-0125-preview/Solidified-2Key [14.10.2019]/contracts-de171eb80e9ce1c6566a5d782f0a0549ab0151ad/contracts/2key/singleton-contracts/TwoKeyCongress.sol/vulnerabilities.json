{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i< allowedMethodSignatures.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 163,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<initialMembers.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 246,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<allMembers.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 321,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if(i == allMembers.length) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 327,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint j = i; j< allMembers.length; j++){\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "inefficient-state-variable-increment",
          "vulnerability_from_line": 285,
          "vulnerability_to_line": null,
          "vulnerability_code": "        maxVotingPower += _votingPower;\n",
          "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i< allowedMethodSignatures.length; i++) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 139,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if(compare(allowedMethodSignatures[i], bytecode)) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 246,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<allMembers.length; i++) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 247,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if(allMembers[i] == msg.sender) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 248,
          "vulnerability_to_line": null,
          "vulnerability_code": "                allMembers[i] = _newMemberAddress;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": null,
          "vulnerability_code": "        while(allMembers[i] != targetMember) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 321,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if(i == allMembers.length) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 327,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint j = i; j< allMembers.length; j++){\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 328,
          "vulnerability_to_line": null,
          "vulnerability_code": "            allMembers[j] = allMembers[j+1];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 328,
          "vulnerability_to_line": null,
          "vulnerability_code": "            allMembers[j] = allMembers[j+1];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i< allowedMethodSignatures.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 163,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<initialMembers.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 206,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0;i<3;i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 246,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<allMembers.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 327,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint j = i; j< allMembers.length; j++){\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 544,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 545,
          "vulnerability_to_line": null,
          "vulnerability_code": "//            block.timestamp > p.minExecutionDate  &&                             // If it is past the voting deadline\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 546,
          "vulnerability_to_line": null,
          "vulnerability_code": "             !p.executed                                                         // and it has not already been executed\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 547,
          "vulnerability_to_line": null,
          "vulnerability_code": "            && p.proposalHash == keccak256(abi.encodePacked(p.recipient, p.amount, transactionBytecode))  // and the supplied code matches the proposal\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 548,
          "vulnerability_to_line": null,
          "vulnerability_code": "            && p.numberOfVotes >= minimumQuorum.sub(1) // and a minimum quorum has been reached...\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 549,
          "vulnerability_to_line": null,
          "vulnerability_code": "        //TODO: Delete -1 from MINIMUM QUORUM, left because KIKI is OOO\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 550,
          "vulnerability_to_line": null,
          "vulnerability_code": "            && uint(p.currentResult) >= maxVotingPower.mul(51).div(100)\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 551,
          "vulnerability_to_line": null,
          "vulnerability_code": "            && p.currentResult > 0\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 552,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "        allMembers.length--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i< allowedMethodSignatures.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 163,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<initialMembers.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 206,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0;i<3;i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 246,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<allMembers.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 324,
          "vulnerability_to_line": null,
          "vulnerability_code": "            i++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 327,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint j = i; j< allMembers.length; j++){\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 490,
          "vulnerability_to_line": null,
          "vulnerability_code": "        p.numberOfVotes++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_34"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 536,
          "vulnerability_to_line": 561,
          "vulnerability_code": "    function executeProposal(\n\n        uint proposalNumber,\n\n        bytes transactionBytecode\n\n    )\n\n    public\n\n    {\n\n        Proposal storage p = proposals[proposalNumber];\n\n\n\n        require(\n\n//            block.timestamp > p.minExecutionDate  &&                             // If it is past the voting deadline\n\n             !p.executed                                                         // and it has not already been executed\n\n            && p.proposalHash == keccak256(abi.encodePacked(p.recipient, p.amount, transactionBytecode))  // and the supplied code matches the proposal\n\n            && p.numberOfVotes >= minimumQuorum.sub(1) // and a minimum quorum has been reached...\n\n        //TODO: Delete -1 from MINIMUM QUORUM, left because KIKI is OOO\n\n            && uint(p.currentResult) >= maxVotingPower.mul(51).div(100)\n\n            && p.currentResult > 0\n\n        );\n\n\n\n        // ...then execute result\n\n        p.executed = true; // Avoid recursive calling\n\n        require(p.recipient.call.value(p.amount)(transactionBytecode));\n\n        p.proposalPassed = true;\n\n\n\n        // Fire Events\n\n        emit ProposalTallied(proposalNumber, p.currentResult, p.numberOfVotes, p.proposalPassed);\n",
          "message": "Reentrancy in TwoKeyCongress.executeProposal (TwoKeyCongress.sol#536-561):\n\tExternal calls:\n\t- require(bool)(p.recipient.call.value(p.amount)(transactionBytecode)) (TwoKeyCongress.sol#556)\n\tState variables written after the call(s):\n\t- proposals (TwoKeyCongress.sol#557)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 478,
          "vulnerability_to_line": 502,
          "vulnerability_code": "    function vote(\n\n        uint proposalNumber,\n\n        bool supportsProposal,\n\n        string justificationText)\n\n    public\n\n    onlyMembers\n\n    returns (uint256 voteID)\n\n    {\n\n        Proposal storage p = proposals[proposalNumber]; // Get the proposal\n\n        require(block.timestamp <= p.minExecutionDate);\n\n        require(!p.voted[msg.sender]);                  // If has already voted, cancel\n\n        p.voted[msg.sender] = true;                     // Set this voter as having voted\n\n        p.numberOfVotes++;\n\n        voteID = p.numberOfVotes;                     // Increase the number of votes\n\n        p.votes.push(Vote({ inSupport: supportsProposal, voter: msg.sender, justification: justificationText }));\n\n        uint votingPower = getMemberVotingPower(msg.sender);\n\n        if (supportsProposal) {                         // If they support the proposal\n\n            p.currentResult+= int(votingPower);                          // Increase score\n\n        } else {                                        // If they don't\n\n            p.currentResult-= int(votingPower);                          // Decrease the score\n\n        }\n\n        // Create a log of this event\n\n        emit Voted(proposalNumber,  supportsProposal, msg.sender, justificationText);\n\n        return voteID;\n",
          "message": "TwoKeyCongress.vote (TwoKeyCongress.sol#478-502) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(block.timestamp <= p.minExecutionDate) (TwoKeyCongress.sol#487)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 504,
          "vulnerability_to_line": 516,
          "vulnerability_code": "    function getVoteCount(\n\n        uint256 proposalNumber\n\n    )\n\n    onlyMembers\n\n    public\n\n    view\n\n    returns(uint256 numberOfVotes, int256 currentResult, string description)\n\n    {\n\n        require(proposals[proposalNumber].proposalHash != 0);\n\n        numberOfVotes = proposals[proposalNumber].numberOfVotes;\n\n        currentResult = proposals[proposalNumber].currentResult;\n\n        description = proposals[proposalNumber].description;\n",
          "message": "TwoKeyCongress.getVoteCount (TwoKeyCongress.sol#504-516) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(proposals[proposalNumber].proposalHash != 0) (TwoKeyCongress.sol#512)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 235,
          "vulnerability_to_line": 263,
          "vulnerability_code": "    function replaceMemberAddress(\n\n        address _newMemberAddress\n\n    )\n\n    public\n\n    {\n\n        require(_newMemberAddress != address(0));\n\n        // Update is member in congress state\n\n        isMemberInCongress[_newMemberAddress] = true;\n\n        isMemberInCongress[msg.sender] = false;\n\n\n\n        //Update array containing all members addresses\n\n        for(uint i=0; i<allMembers.length; i++) {\n\n            if(allMembers[i] == msg.sender) {\n\n                allMembers[i] = _newMemberAddress;\n\n            }\n\n        }\n\n\n\n        //Update member object\n\n        Member memory m = address2Member[msg.sender];\n\n        address2Member[_newMemberAddress] = m;\n\n        address2Member[msg.sender] = Member(\n\n            {\n\n            memberAddress: address(0),\n\n            memberSince: block.timestamp,\n\n            votingPower: 0,\n\n            name: \"0x0\"\n\n            }\n\n        );\n",
          "message": "TwoKeyCongress.replaceMemberAddress (TwoKeyCongress.sol#235-263) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 306,
          "vulnerability_to_line": 348,
          "vulnerability_code": "    function removeMember(\n\n        address targetMember\n\n    )\n\n    public\n\n    {\n\n        require(msg.sender == address(this));\n\n        require(isMemberInCongress[targetMember] == true);\n\n\n\n        //Remove member voting power from max voting power\n\n        uint votingPower = getMemberVotingPower(targetMember);\n\n        maxVotingPower-= votingPower;\n\n\n\n        uint i=0;\n\n        //Find selected member\n\n        while(allMembers[i] != targetMember) {\n\n            if(i == allMembers.length) {\n\n                revert();\n\n            }\n\n            i++;\n\n        }\n\n        //After member is found, remove his address from all members\n\n        for (uint j = i; j< allMembers.length; j++){\n\n            allMembers[j] = allMembers[j+1];\n\n        }\n\n        //After reduce array size\n\n        delete allMembers[allMembers.length-1];\n\n        allMembers.length--;\n\n\n\n        //Remove him from state mapping\n\n        isMemberInCongress[targetMember] = false;\n\n\n\n        //Remove his state to empty member\n\n        address2Member[targetMember] = Member(\n\n            {\n\n                memberAddress: address(0),\n\n                memberSince: block.timestamp,\n\n                votingPower: 0,\n\n                name: \"0x0\"\n\n            }\n\n        );\n\n        //Reduce 1 member from quorum\n\n        minimumQuorum -= 1;\n",
          "message": "TwoKeyCongress.removeMember (TwoKeyCongress.sol#306-348) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 356,
          "vulnerability_to_line": 363,
          "vulnerability_code": "    function addNewAllowedBytecode(\n\n        bytes32 functionSignature\n\n    )\n\n    public\n\n    {\n\n        require(msg.sender == address(this));\n\n        allowedMethodSignatures.push(bytes32(functionSignature));\n",
          "message": "TwoKeyCongress.addNewAllowedBytecode (TwoKeyCongress.sol#356-363) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 434,
          "vulnerability_to_line": 445,
          "vulnerability_code": "    function newProposalInEther(\n\n        address beneficiary,\n\n        uint etherAmount,\n\n        string jobDescription,\n\n        bytes transactionBytecode\n\n    )\n\n    public\n\n    onlyMembers\n\n    returns (uint proposalID)\n\n    {\n\n        return newProposal(beneficiary, etherAmount * 1 ether, jobDescription, transactionBytecode);\n",
          "message": "TwoKeyCongress.newProposalInEther (TwoKeyCongress.sol#434-445) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 455,
          "vulnerability_to_line": 467,
          "vulnerability_code": "    function checkProposalCode(\n\n        uint proposalNumber,\n\n        address beneficiary,\n\n        uint weiAmount,\n\n        bytes transactionBytecode\n\n    )\n\n    public\n\n    view\n\n    returns (bool codeChecksOut)\n\n    {\n\n        Proposal storage p = proposals[proposalNumber];\n\n        return p.proposalHash == keccak256(abi.encodePacked(beneficiary, weiAmount, transactionBytecode));\n",
          "message": "TwoKeyCongress.checkProposalCode (TwoKeyCongress.sol#455-467) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 478,
          "vulnerability_to_line": 502,
          "vulnerability_code": "    function vote(\n\n        uint proposalNumber,\n\n        bool supportsProposal,\n\n        string justificationText)\n\n    public\n\n    onlyMembers\n\n    returns (uint256 voteID)\n\n    {\n\n        Proposal storage p = proposals[proposalNumber]; // Get the proposal\n\n        require(block.timestamp <= p.minExecutionDate);\n\n        require(!p.voted[msg.sender]);                  // If has already voted, cancel\n\n        p.voted[msg.sender] = true;                     // Set this voter as having voted\n\n        p.numberOfVotes++;\n\n        voteID = p.numberOfVotes;                     // Increase the number of votes\n\n        p.votes.push(Vote({ inSupport: supportsProposal, voter: msg.sender, justification: justificationText }));\n\n        uint votingPower = getMemberVotingPower(msg.sender);\n\n        if (supportsProposal) {                         // If they support the proposal\n\n            p.currentResult+= int(votingPower);                          // Increase score\n\n        } else {                                        // If they don't\n\n            p.currentResult-= int(votingPower);                          // Decrease the score\n\n        }\n\n        // Create a log of this event\n\n        emit Voted(proposalNumber,  supportsProposal, msg.sender, justificationText);\n\n        return voteID;\n",
          "message": "TwoKeyCongress.vote (TwoKeyCongress.sol#478-502) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 504,
          "vulnerability_to_line": 516,
          "vulnerability_code": "    function getVoteCount(\n\n        uint256 proposalNumber\n\n    )\n\n    onlyMembers\n\n    public\n\n    view\n\n    returns(uint256 numberOfVotes, int256 currentResult, string description)\n\n    {\n\n        require(proposals[proposalNumber].proposalHash != 0);\n\n        numberOfVotes = proposals[proposalNumber].numberOfVotes;\n\n        currentResult = proposals[proposalNumber].currentResult;\n\n        description = proposals[proposalNumber].description;\n",
          "message": "TwoKeyCongress.getVoteCount (TwoKeyCongress.sol#504-516) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 519,
          "vulnerability_to_line": 526,
          "vulnerability_code": "    function getMemberInfo()\n\n    public\n\n    view\n\n    returns (address, bytes32, uint, uint)\n\n    {\n\n        Member memory member = address2Member[msg.sender];\n\n        return (member.memberAddress, member.name, member.votingPower, member.memberSince);\n",
          "message": "TwoKeyCongress.getMemberInfo (TwoKeyCongress.sol#519-526) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 536,
          "vulnerability_to_line": 561,
          "vulnerability_code": "    function executeProposal(\n\n        uint proposalNumber,\n\n        bytes transactionBytecode\n\n    )\n\n    public\n\n    {\n\n        Proposal storage p = proposals[proposalNumber];\n\n\n\n        require(\n\n//            block.timestamp > p.minExecutionDate  &&                             // If it is past the voting deadline\n\n             !p.executed                                                         // and it has not already been executed\n\n            && p.proposalHash == keccak256(abi.encodePacked(p.recipient, p.amount, transactionBytecode))  // and the supplied code matches the proposal\n\n            && p.numberOfVotes >= minimumQuorum.sub(1) // and a minimum quorum has been reached...\n\n        //TODO: Delete -1 from MINIMUM QUORUM, left because KIKI is OOO\n\n            && uint(p.currentResult) >= maxVotingPower.mul(51).div(100)\n\n            && p.currentResult > 0\n\n        );\n\n\n\n        // ...then execute result\n\n        p.executed = true; // Avoid recursive calling\n\n        require(p.recipient.call.value(p.amount)(transactionBytecode));\n\n        p.proposalPassed = true;\n\n\n\n        // Fire Events\n\n        emit ProposalTallied(proposalNumber, p.currentResult, p.numberOfVotes, p.proposalPassed);\n",
          "message": "TwoKeyCongress.executeProposal (TwoKeyCongress.sol#536-561) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 580,
          "vulnerability_to_line": 588,
          "vulnerability_code": "    function checkIsMember(\n\n        address _member\n\n    )\n\n    public\n\n    view\n\n    returns (bool)\n\n    {\n\n        return isMemberInCongress[_member];\n",
          "message": "TwoKeyCongress.checkIsMember (TwoKeyCongress.sol#580-588) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 591,
          "vulnerability_to_line": 593,
          "vulnerability_code": "    function () payable public {\n\n        emit ReceivedEther(msg.sender, msg.value);\n",
          "message": "TwoKeyCongress.fallback (TwoKeyCongress.sol#591-593) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 597,
          "vulnerability_to_line": 603,
          "vulnerability_code": "    function getMaxVotingPower()\n\n    public\n\n    view\n\n    returns (uint)\n\n    {\n\n        return maxVotingPower;\n",
          "message": "TwoKeyCongress.getMaxVotingPower (TwoKeyCongress.sol#597-603) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 607,
          "vulnerability_to_line": 613,
          "vulnerability_code": "    function getMembersLength()\n\n    public\n\n    view\n\n    returns (uint)\n\n    {\n\n        return allMembers.length;\n",
          "message": "TwoKeyCongress.getMembersLength (TwoKeyCongress.sol#607-613) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 617,
          "vulnerability_to_line": 623,
          "vulnerability_code": "    function getAllowedMethods()\n\n    public\n\n    view\n\n    returns (bytes32[])\n\n    {\n\n        return allowedMethodSignatures;\n",
          "message": "TwoKeyCongress.getAllowedMethods (TwoKeyCongress.sol#617-623) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 627,
          "vulnerability_to_line": 635,
          "vulnerability_code": "    function getMethodNameFromMethodHash(\n\n        bytes32 _methodHash\n\n    )\n\n    public\n\n    view\n\n    returns(string)\n\n    {\n\n        return methodHashToMethodName[_methodHash];\n",
          "message": "TwoKeyCongress.getMethodNameFromMethodHash (TwoKeyCongress.sol#627-635) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 640,
          "vulnerability_to_line": 649,
          "vulnerability_code": "    function getProposalData(\n\n        uint proposalId\n\n    )\n\n    public\n\n    view\n\n    returns (uint,string,uint,bool,uint,int,bytes)\n\n    {\n\n        Proposal memory p = proposals[proposalId];\n\n        return (p.amount, p.description, p.minExecutionDate, p.executed, p.numberOfVotes, p.currentResult, p.transactionBytecode);\n",
          "message": "TwoKeyCongress.getProposalData (TwoKeyCongress.sol#640-649) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 653,
          "vulnerability_to_line": 659,
          "vulnerability_code": "    function getAllMemberAddresses()\n\n    public\n\n    view\n\n    returns (address[])\n\n    {\n\n        return allMembers;\n",
          "message": "TwoKeyCongress.getAllMemberAddresses (TwoKeyCongress.sol#653-659) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 536,
          "vulnerability_to_line": 561,
          "vulnerability_code": "    function executeProposal(\n\n        uint proposalNumber,\n\n        bytes transactionBytecode\n\n    )\n\n    public\n\n    {\n\n        Proposal storage p = proposals[proposalNumber];\n\n\n\n        require(\n\n//            block.timestamp > p.minExecutionDate  &&                             // If it is past the voting deadline\n\n             !p.executed                                                         // and it has not already been executed\n\n            && p.proposalHash == keccak256(abi.encodePacked(p.recipient, p.amount, transactionBytecode))  // and the supplied code matches the proposal\n\n            && p.numberOfVotes >= minimumQuorum.sub(1) // and a minimum quorum has been reached...\n\n        //TODO: Delete -1 from MINIMUM QUORUM, left because KIKI is OOO\n\n            && uint(p.currentResult) >= maxVotingPower.mul(51).div(100)\n\n            && p.currentResult > 0\n\n        );\n\n\n\n        // ...then execute result\n\n        p.executed = true; // Avoid recursive calling\n\n        require(p.recipient.call.value(p.amount)(transactionBytecode));\n\n        p.proposalPassed = true;\n\n\n\n        // Fire Events\n\n        emit ProposalTallied(proposalNumber, p.currentResult, p.numberOfVotes, p.proposalPassed);\n",
          "message": "Low level call in TwoKeyCongress.executeProposal (TwoKeyCongress.sol#536-561):\n\t-require(bool)(p.recipient.call.value(p.amount)(transactionBytecode)) TwoKeyCongress.sol#556\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_a' of SafeMath.mul (TwoKeyCongress.sol#15) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_b' of SafeMath.mul (TwoKeyCongress.sol#15) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_a' of SafeMath.div (TwoKeyCongress.sol#31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_b' of SafeMath.div (TwoKeyCongress.sol#31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_a' of SafeMath.sub (TwoKeyCongress.sol#41) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_b' of SafeMath.sub (TwoKeyCongress.sol#41) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_a' of SafeMath.add (TwoKeyCongress.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_b' of SafeMath.add (TwoKeyCongress.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 154,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _minutesForDebate,\n",
          "message": "Parameter '_minutesForDebate' of TwoKeyCongress. (TwoKeyCongress.sol#154) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 236,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _newMemberAddress\n",
          "message": "Parameter '_newMemberAddress' of TwoKeyCongress.replaceMemberAddress (TwoKeyCongress.sol#236) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 277,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _votingPower\n",
          "message": "Parameter '_votingPower' of TwoKeyCongress.addMember (TwoKeyCongress.sol#277) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 581,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _member\n",
          "message": "Parameter '_member' of TwoKeyCongress.checkIsMember (TwoKeyCongress.sol#581) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 628,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32 _methodHash\n",
          "message": "Parameter '_methodHash' of TwoKeyCongress.getMethodNameFromMethodHash (TwoKeyCongress.sol#628) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "        allMembers.length--;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 405,
          "vulnerability_to_line": null,
          "vulnerability_code": "        proposalID = proposals.length++;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i< allowedMethodSignatures.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 163,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<initialMembers.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 246,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<allMembers.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 327,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint j = i; j< allMembers.length; j++){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": null,
          "vulnerability_code": "        while(allMembers[i] != targetMember) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i< allowedMethodSignatures.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 163,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<initialMembers.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 246,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<allMembers.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": null,
          "vulnerability_code": "        while(allMembers[i] != targetMember) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 321,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if(i == allMembers.length) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 591,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function () payable public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 132,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes bytecode\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] initialMembers,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 156,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32[] initialMemberNames,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint[] votingPowers\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes y\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 222,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string nameAndParams\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 398,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string jobDescription,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 399,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes transactionBytecode)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 437,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string jobDescription,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 438,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes transactionBytecode\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 459,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes transactionBytecode\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 481,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string justificationText)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 510,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns(uint256 numberOfVotes, int256 currentResult, string description)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 538,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes transactionBytecode\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 620,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (bytes32[])\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 632,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns(string)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 645,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (uint,string,uint,bool,uint,int,bytes)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 645,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (uint,string,uint,bool,uint,int,bytes)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 656,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (address[])\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool initialized;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 maxVotingPower;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32[] allowedMethodSignatures;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes32 => string) methodHashToMethodName;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function compare(\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Proposal[] public proposals;\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [
        "SYMBOLIC EXECUTION TIMEOUT"
      ],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 207,
          "vulnerability_to_line": null,
          "vulnerability_code": "            byte a = x[i];\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Proposal[] public proposals;\n",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 316,
          "vulnerability_to_line": null,
          "vulnerability_code": "        maxVotingPower-= votingPower;\n",
          "message": null
        }
      ]
    }
  }
}