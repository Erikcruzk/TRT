pragma solidity ^0.4.24;






library SafeMath {

  


  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {
    
    
    
    if (_a == 0) {
      return 0;
    }

    c = _a * _b;
    require(c / _a == _b);
    return c;
  }

  


  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {
    
    
    
    return _a / _b;
  }

  


  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {
    require(_b <= _a);
    return _a - _b;
  }

  


  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {
    c = _a + _b;
    require(c >= _a);
    return c;
  }
}



pragma solidity ^0.4.24;

function executeProposal(
    uint proposalNumber,
    bytes transactionBytecode
)
public
{
    Proposal storage p = proposals[proposalNumber];

    require(
         !p.executed                                                         
        && p.proposalHash == keccak256(abi.encodePacked(p.recipient, p.amount, transactionBytecode))  
        && p.numberOfVotes >= minimumQuorum.sub(1) 

        && uint(p.currentResult) >= maxVotingPower.mul(51).div(100)
        && p.currentResult > 0
    );

    // Mark as executed before calling external contract
    p.executed = true; 
    p.proposalPassed = true;

    // Use call in a safer way to prevent re-entrancy
    (bool success, ) = p.recipient.call.value(p.amount)(transactionBytecode);
    require(success, "Transaction execution failed.");

    emit ProposalTallied(proposalNumber, p.currentResult, p.numberOfVotes, p.proposalPassed);
}