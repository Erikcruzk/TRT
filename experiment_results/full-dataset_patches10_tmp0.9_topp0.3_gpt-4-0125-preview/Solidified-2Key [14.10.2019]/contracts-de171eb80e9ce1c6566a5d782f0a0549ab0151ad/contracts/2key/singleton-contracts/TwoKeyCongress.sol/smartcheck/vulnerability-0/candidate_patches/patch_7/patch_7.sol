pragma solidity ^0.4.24;






library SafeMath {

  


  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {
    
    
    
    if (_a == 0) {
      return 0;
    }

    c = _a * _b;
    require(c / _a == _b);
    return c;
  }

  


  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {
    
    
    
    return _a / _b;
  }

  


  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {
    require(_b <= _a);
    return _a - _b;
  }

  


  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {
    c = _a + _b;
    require(c >= _a);
    return c;
  }
}



pragma solidity ^0.4.24;

function removeMember(
    address targetMember
)
public
{
    require(msg.sender == address(this));
    require(isMemberInCongress[targetMember] == true);

    
    uint votingPower = getMemberVotingPower(targetMember);
    maxVotingPower -= votingPower;

    uint i = 0;
    bool found = false;
    
    for (i; i < allMembers.length - 1; i++) {
        if(allMembers[i] == targetMember) {
            found = true;
        }
        if(found) {
            allMembers[i] = allMembers[i + 1];
        }
    }
    if (allMembers[i] == targetMember) {
        found = true;
    }
    if (found) {
        delete allMembers[i];
        allMembers.length--;
        isMemberInCongress[targetMember] = false;

        
        address2Member[targetMember] = Member(
            {
                memberAddress: address(0),
                memberSince: block.timestamp,
                votingPower: 0,
                name: "0x0"
            }
        );
        
        minimumQuorum = minimumQuorum > 0 ? minimumQuorum - 1 : 0;
    }
}