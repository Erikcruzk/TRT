pragma solidity ^0.4.24;






library SafeMath {

  


  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {
    
    
    
    if (_a == 0) {
      return 0;
    }

    c = _a * _b;
    require(c / _a == _b);
    return c;
  }

  


  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {
    
    
    
    return _a / _b;
  }

  


  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {
    require(_b <= _a);
    return _a - _b;
  }

  


  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {
    c = _a + _b;
    require(c >= _a);
    return c;
  }
}



pragma solidity ^0.4.24;

function removeMember(
    address targetMember
)
public
{
    require(msg.sender == address(this));
    require(isMemberInCongress[targetMember] == true);

    
    uint votingPower = getMemberVotingPower(targetMember);
    maxVotingPower -= votingPower;

    uint index = 0;
    
    for (index = 0; index < allMembers.length; index++) {
        if (allMembers[index] == targetMember) {
            break;
        }
    }
    require(index < allMembers.length);

    
    for (uint i = index; i < allMembers.length - 1; i++) {
        allMembers[i] = allMembers[i + 1];
    }
    allMembers.length--;

    
    isMemberInCongress[targetMember] = false;

    
    address2Member[targetMember] = Member(
        {
            memberAddress: address(0),
            memberSince: block.timestamp,
            votingPower: 0,
            name: "0x0"
        }
    );
    
    minimumQuorum -= 1;
}