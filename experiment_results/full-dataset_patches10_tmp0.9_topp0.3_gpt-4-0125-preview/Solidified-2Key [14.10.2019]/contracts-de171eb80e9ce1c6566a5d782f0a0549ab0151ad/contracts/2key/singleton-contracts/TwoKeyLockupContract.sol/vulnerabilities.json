{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 130,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 131,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _bonusTokensVestingStartShiftInDaysFromDistributionDate,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 132,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _numberOfVestingPortions,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 133,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _numberOfDaysBetweenPortions,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _tokenDistributionDate,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _maxDistributionDateShiftInDays,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _baseTokens,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 137,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _bonusTokens,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _conversionId,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 139,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _converter,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=2 ;i<numberOfVestingPortions + 1; i++) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 161,
          "vulnerability_to_line": null,
          "vulnerability_code": "            tokenUnlockingDate[i] = tokenUnlockingDate[1] + (i-1) * (numberOfDaysBetweenPortions * 1 days);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 161,
          "vulnerability_to_line": null,
          "vulnerability_code": "            tokenUnlockingDate[i] = tokenUnlockingDate[1] + (i-1) * (numberOfDaysBetweenPortions * 1 days);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 161,
          "vulnerability_to_line": null,
          "vulnerability_code": "            tokenUnlockingDate[i] = tokenUnlockingDate[1] + (i-1) * (numberOfDaysBetweenPortions * 1 days);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<numberOfVestingPortions+1;i++) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 174,
          "vulnerability_to_line": null,
          "vulnerability_code": "            dates[i] = tokenUnlockingDate[i];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 175,
          "vulnerability_to_line": null,
          "vulnerability_code": "            areTokensWithdrawn[i] = isWithdrawn[i];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<numberOfVestingPortions+1;i++) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 199,
          "vulnerability_to_line": null,
          "vulnerability_code": "            tokenUnlockingDate[i] = tokenUnlockingDate[i] + shift;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 199,
          "vulnerability_to_line": null,
          "vulnerability_code": "            tokenUnlockingDate[i] = tokenUnlockingDate[i] + shift;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=2 ;i<numberOfVestingPortions + 1; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<numberOfVestingPortions+1;i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<numberOfVestingPortions+1;i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isWithdrawn[part] == false && part < numberOfVestingPortions+1 && block.timestamp > tokenUnlockingDate[part]);\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=2 ;i<numberOfVestingPortions + 1; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<numberOfVestingPortions+1;i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<numberOfVestingPortions+1;i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_23"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 210,
          "vulnerability_to_line": 237,
          "vulnerability_code": "    function withdrawTokens(\n\n        uint part\n\n    )\n\n    public\n\n    returns (bool)\n\n    {\n\n        require(msg.sender == converter || ITwoKeyEventSource(twoKeyEventSource).isAddressMaintainer(msg.sender) == true);\n\n        require(isWithdrawn[part] == false && part < numberOfVestingPortions+1 && block.timestamp > tokenUnlockingDate[part]);\n\n        uint amount;\n\n        if(part == 0) {\n\n            amount = baseTokens;\n\n        } else {\n\n            amount = bonusTokens / numberOfVestingPortions;\n\n        }\n\n        isWithdrawn[part] = true;\n\n        require(IERC20(assetContractERC20).transfer(converter,amount));\n\n\n\n        // Emit an event after tokens are transfered\n\n        emit TokensWithdrawn(\n\n            block.timestamp,\n\n            msg.sender,\n\n            converter,\n\n            part,\n\n            amount\n\n        );\n\n\n\n        return true;\n",
          "message": "Reentrancy in TwoKeyLockupContract.withdrawTokens (TwoKeyLockupContract.sol#210-237):\n\tExternal calls:\n\t- require(bool)(msg.sender == converter || ITwoKeyEventSource(twoKeyEventSource).isAddressMaintainer(msg.sender) == true) (TwoKeyLockupContract.sol#216)\n\tState variables written after the call(s):\n\t- isWithdrawn (TwoKeyLockupContract.sol#224)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 210,
          "vulnerability_to_line": 237,
          "vulnerability_code": "    function withdrawTokens(\n\n        uint part\n\n    )\n\n    public\n\n    returns (bool)\n\n    {\n\n        require(msg.sender == converter || ITwoKeyEventSource(twoKeyEventSource).isAddressMaintainer(msg.sender) == true);\n\n        require(isWithdrawn[part] == false && part < numberOfVestingPortions+1 && block.timestamp > tokenUnlockingDate[part]);\n\n        uint amount;\n\n        if(part == 0) {\n\n            amount = baseTokens;\n\n        } else {\n\n            amount = bonusTokens / numberOfVestingPortions;\n\n        }\n\n        isWithdrawn[part] = true;\n\n        require(IERC20(assetContractERC20).transfer(converter,amount));\n\n\n\n        // Emit an event after tokens are transfered\n\n        emit TokensWithdrawn(\n\n            block.timestamp,\n\n            msg.sender,\n\n            converter,\n\n            part,\n\n            amount\n\n        );\n\n\n\n        return true;\n",
          "message": "TwoKeyLockupContract.withdrawTokens (TwoKeyLockupContract.sol#210-237) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(isWithdrawn[part] == false && part < numberOfVestingPortions + 1 && block.timestamp > tokenUnlockingDate[part]) (TwoKeyLockupContract.sol#217)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": 38,
          "vulnerability_code": "    function approve(\n\n        address _spender,\n\n        uint256 _value\n\n    )\n\n    public\n",
          "message": "IERC20.approve (TwoKeyLockupContract.sol#33-38) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ethereumOf(address me) public view returns (address);\n",
          "message": "ITwoKeyEventSource.ethereumOf (TwoKeyLockupContract.sol#74) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function plasmaOf(address me) public view returns (address);\n",
          "message": "ITwoKeyEventSource.plasmaOf (TwoKeyLockupContract.sol#75) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isAddressMaintainer(address _maintainer) public view returns (bool);\n",
          "message": "ITwoKeyEventSource.isAddressMaintainer (TwoKeyLockupContract.sol#76) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTwoKeyDefaultIntegratorFeeFromAdmin() public view returns (uint);\n",
          "message": "ITwoKeyEventSource.getTwoKeyDefaultIntegratorFeeFromAdmin (TwoKeyLockupContract.sol#77) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 165,
          "vulnerability_to_line": 180,
          "vulnerability_code": "    function getLockupSummary()\n\n    public\n\n    view\n\n    returns (uint, uint, uint, uint, uint[], bool[])\n\n    {\n\n        uint[] memory dates = new uint[](numberOfVestingPortions+1);\n\n        bool[] memory areTokensWithdrawn = new bool[](numberOfVestingPortions+1);\n\n\n\n        for(uint i=0; i<numberOfVestingPortions+1;i++) {\n\n            dates[i] = tokenUnlockingDate[i];\n\n            areTokensWithdrawn[i] = isWithdrawn[i];\n\n        }\n\n        //total = base + bonus\n\n        // monthly bonus = bonus/numberOfVestingPortions\n\n        return (baseTokens, bonusTokens, numberOfVestingPortions, conversionId, dates, areTokensWithdrawn);\n",
          "message": "TwoKeyLockupContract.getLockupSummary (TwoKeyLockupContract.sol#165-180) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 186,
          "vulnerability_to_line": 204,
          "vulnerability_code": "    function changeTokenDistributionDate(\n\n        uint _newDate\n\n    )\n\n    public\n\n    onlyContractor\n\n    {\n\n        require(changed == false);\n\n        require(_newDate - (maxDistributionDateShiftInDays * (1 days)) <= tokenDistributionDate);\n\n        require(now < tokenDistributionDate);\n\n\n\n        uint shift = tokenDistributionDate - _newDate;\n\n        // If the date is changed shifting all tokens unlocking dates for the difference\n\n        for(uint i=0; i<numberOfVestingPortions+1;i++) {\n\n            tokenUnlockingDate[i] = tokenUnlockingDate[i] + shift;\n\n        }\n\n\n\n        changed = true;\n\n        tokenDistributionDate = _newDate;\n",
          "message": "TwoKeyLockupContract.changeTokenDistributionDate (TwoKeyLockupContract.sol#186-204) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 210,
          "vulnerability_to_line": 237,
          "vulnerability_code": "    function withdrawTokens(\n\n        uint part\n\n    )\n\n    public\n\n    returns (bool)\n\n    {\n\n        require(msg.sender == converter || ITwoKeyEventSource(twoKeyEventSource).isAddressMaintainer(msg.sender) == true);\n\n        require(isWithdrawn[part] == false && part < numberOfVestingPortions+1 && block.timestamp > tokenUnlockingDate[part]);\n\n        uint amount;\n\n        if(part == 0) {\n\n            amount = baseTokens;\n\n        } else {\n\n            amount = bonusTokens / numberOfVestingPortions;\n\n        }\n\n        isWithdrawn[part] = true;\n\n        require(IERC20(assetContractERC20).transfer(converter,amount));\n\n\n\n        // Emit an event after tokens are transfered\n\n        emit TokensWithdrawn(\n\n            block.timestamp,\n\n            msg.sender,\n\n            converter,\n\n            part,\n\n            amount\n\n        );\n\n\n\n        return true;\n",
          "message": "TwoKeyLockupContract.withdrawTokens (TwoKeyLockupContract.sol#210-237) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 131,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _bonusTokensVestingStartShiftInDaysFromDistributionDate,\n",
          "message": "Parameter '_bonusTokensVestingStartShiftInDaysFromDistributionDate' of TwoKeyLockupContract. (TwoKeyLockupContract.sol#131) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 132,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _numberOfVestingPortions,\n",
          "message": "Parameter '_numberOfVestingPortions' of TwoKeyLockupContract. (TwoKeyLockupContract.sol#132) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 133,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _numberOfDaysBetweenPortions,\n",
          "message": "Parameter '_numberOfDaysBetweenPortions' of TwoKeyLockupContract. (TwoKeyLockupContract.sol#133) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _tokenDistributionDate,\n",
          "message": "Parameter '_tokenDistributionDate' of TwoKeyLockupContract. (TwoKeyLockupContract.sol#134) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _maxDistributionDateShiftInDays,\n",
          "message": "Parameter '_maxDistributionDateShiftInDays' of TwoKeyLockupContract. (TwoKeyLockupContract.sol#135) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _baseTokens,\n",
          "message": "Parameter '_baseTokens' of TwoKeyLockupContract. (TwoKeyLockupContract.sol#136) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 137,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _bonusTokens,\n",
          "message": "Parameter '_bonusTokens' of TwoKeyLockupContract. (TwoKeyLockupContract.sol#137) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _conversionId,\n",
          "message": "Parameter '_conversionId' of TwoKeyLockupContract. (TwoKeyLockupContract.sol#138) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 139,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _converter,\n",
          "message": "Parameter '_converter' of TwoKeyLockupContract. (TwoKeyLockupContract.sol#139) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 140,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _contractor,\n",
          "message": "Parameter '_contractor' of TwoKeyLockupContract. (TwoKeyLockupContract.sol#140) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _assetContractERC20,\n",
          "message": "Parameter '_assetContractERC20' of TwoKeyLockupContract. (TwoKeyLockupContract.sol#141) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _twoKeyEventSource\n",
          "message": "Parameter '_twoKeyEventSource' of TwoKeyLockupContract. (TwoKeyLockupContract.sol#142) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 187,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _newDate\n",
          "message": "Parameter '_newDate' of TwoKeyLockupContract.changeTokenDistributionDate (TwoKeyLockupContract.sol#187) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=2 ;i<numberOfVestingPortions + 1; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<numberOfVestingPortions+1;i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<numberOfVestingPortions+1;i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 168,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (uint, uint, uint, uint, uint[], bool[])\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 168,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (uint, uint, uint, uint, uint[], bool[])\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint bonusTokensVestingStartShiftInDaysFromDistributionDate;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint tokenDistributionDate;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 89,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint numberOfVestingPortions; // For example 6\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint numberOfDaysBetweenPortions; // For example 30 days\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint maxDistributionDateShiftInDays;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint conversionId;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 100,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(uint => uint) tokenUnlockingDate;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(uint => bool) isWithdrawn;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address contractor;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address assetContractERC20;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 106,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address twoKeyEventSource;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool changed;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 159,
          "vulnerability_to_line": null,
          "vulnerability_code": "        tokenUnlockingDate[1] = tokenDistributionDate + _bonusTokensVestingStartShiftInDaysFromDistributionDate * (1 days); // first part of bonus in days after tokens\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 159,
          "vulnerability_to_line": null,
          "vulnerability_code": "        tokenUnlockingDate[1] = tokenDistributionDate + _bonusTokensVestingStartShiftInDaysFromDistributionDate * (1 days); // first part of bonus in days after tokens\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=2 ;i<numberOfVestingPortions + 1; i++) {\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 161,
          "vulnerability_to_line": null,
          "vulnerability_code": "            tokenUnlockingDate[i] = tokenUnlockingDate[1] + (i-1) * (numberOfDaysBetweenPortions * 1 days);\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 161,
          "vulnerability_to_line": null,
          "vulnerability_code": "            tokenUnlockingDate[i] = tokenUnlockingDate[1] + (i-1) * (numberOfDaysBetweenPortions * 1 days);\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == converter || ITwoKeyEventSource(twoKeyEventSource).isAddressMaintainer(msg.sender) == true);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isWithdrawn[part] == false && part < numberOfVestingPortions+1 && block.timestamp > tokenUnlockingDate[part]);\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isWithdrawn[part] == false && part < numberOfVestingPortions+1 && block.timestamp > tokenUnlockingDate[part]);\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isWithdrawn[part] == false && part < numberOfVestingPortions+1 && block.timestamp > tokenUnlockingDate[part]);\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "Dependence on predictable environment variable (SWC 116)",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isWithdrawn[part] == false && part < numberOfVestingPortions+1 && block.timestamp > tokenUnlockingDate[part]);\n",
          "message": "A control flow decision is made based on The block.timestamp environment variable.\nThe block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-116"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": null,
          "vulnerability_code": "            amount = baseTokens;\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 222,
          "vulnerability_to_line": null,
          "vulnerability_code": "            amount = bonusTokens / numberOfVestingPortions;\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 222,
          "vulnerability_to_line": null,
          "vulnerability_code": "            amount = bonusTokens / numberOfVestingPortions;\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": null,
          "vulnerability_code": "        isWithdrawn[part] = true;\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": null,
          "vulnerability_code": "        isWithdrawn[part] = true;\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 225,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(IERC20(assetContractERC20).transfer(converter,amount));\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 225,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(IERC20(assetContractERC20).transfer(converter,amount));\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 225,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(IERC20(assetContractERC20).transfer(converter,amount));\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 225,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(IERC20(assetContractERC20).transfer(converter,amount));\n",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 225,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(IERC20(assetContractERC20).transfer(converter,amount));\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 231,
          "vulnerability_to_line": null,
          "vulnerability_code": "            converter,\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 170,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint[] memory dates = new uint[](numberOfVestingPortions+1);\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 171,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool[] memory areTokensWithdrawn = new bool[](numberOfVestingPortions+1);\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<numberOfVestingPortions+1;i++) {\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 193,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_newDate - (maxDistributionDateShiftInDays * (1 days)) <= tokenDistributionDate);\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 193,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_newDate - (maxDistributionDateShiftInDays * (1 days)) <= tokenDistributionDate);\n",
          "message": "The arithmetic operator can underflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Dependence on predictable environment variable (SWC 116)",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(now < tokenDistributionDate);\n",
          "message": "A control flow decision is made based on The block.timestamp environment variable.\nThe block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-116"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 196,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint shift = tokenDistributionDate - _newDate;\n",
          "message": "The arithmetic operator can underflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<numberOfVestingPortions+1;i++) {\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 199,
          "vulnerability_to_line": null,
          "vulnerability_code": "            tokenUnlockingDate[i] = tokenUnlockingDate[i] + shift;\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 165,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getLockupSummary()\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 170,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint[] memory dates = new uint[](numberOfVestingPortions+1);\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 171,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool[] memory areTokensWithdrawn = new bool[](numberOfVestingPortions+1);\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<numberOfVestingPortions+1;i++) {\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 193,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_newDate - (maxDistributionDateShiftInDays * (1 days)) <= tokenDistributionDate);\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<numberOfVestingPortions+1;i++) {\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 199,
          "vulnerability_to_line": null,
          "vulnerability_code": "            tokenUnlockingDate[i] = tokenUnlockingDate[i] + shift;\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isWithdrawn[part] == false && part < numberOfVestingPortions+1 && block.timestamp > tokenUnlockingDate[part]);\n",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 193,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_newDate - (maxDistributionDateShiftInDays * (1 days)) <= tokenDistributionDate);\n",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 196,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint shift = tokenDistributionDate - _newDate;\n",
          "message": null
        }
      ]
    }
  }
}