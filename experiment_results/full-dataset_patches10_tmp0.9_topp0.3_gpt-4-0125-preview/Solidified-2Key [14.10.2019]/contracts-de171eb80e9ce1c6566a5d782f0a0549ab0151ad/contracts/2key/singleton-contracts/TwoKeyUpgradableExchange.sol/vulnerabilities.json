{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 575,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_beneficiary != address(0),'beneficiary address can not be 0' );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 576,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_weiAmount != 0, 'wei amount can not be 0');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_90"
      ],
      "vulnerability_findings": [
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 387,
          "vulnerability_to_line": 388,
          "vulnerability_code": "    ITwoKeySingletonesRegistry internal registry;\n",
          "message": "UpgradeabilityStorage.registry (TwoKeyUpgradableExchange.sol#387-388) is never initialized. It is used in:\n\t- initialize (TwoKeyUpgradableExchange.sol#410-413)\n"
        },
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 390,
          "vulnerability_to_line": 391,
          "vulnerability_code": "    address internal _implementation;\n",
          "message": "UpgradeabilityStorage._implementation (TwoKeyUpgradableExchange.sol#390-391) is never initialized. It is used in:\n\t- implementation (TwoKeyUpgradableExchange.sol#396-399)\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": 335,
          "vulnerability_code": "    function at(address _addr) internal view returns (bytes o_code) {\n\n        assembly {\n\n        // retrieve the size of the code, this needs assembly\n\n            let size := extcodesize(_addr)\n\n        // allocate output byte array - this could also be done without assembly\n\n        // by using o_code = new bytes(size)\n\n            o_code := mload(0x40)\n\n        // new \"memory end\" including padding\n\n            mstore(0x40, add(o_code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n\n        // store length in memory\n\n            mstore(o_code, size)\n\n        // actually retrieve the code, this needs assembly\n\n            extcodecopy(_addr, add(o_code, 0x20), 0, size)\n\n        }\n\n    }\n",
          "message": "GetCode.at (TwoKeyUpgradableExchange.sol#320-335) is declared view but contains assembly code\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 527,
          "vulnerability_to_line": 554,
          "vulnerability_code": "    function setInitialParams(\n\n        ERC20 _token,\n\n        address _daiAddress,\n\n        address _kyberNetworkProxy,\n\n        address _twoKeySingletonesRegistry,\n\n        address _proxyStorageContract\n\n    )\n\n    external\n\n    {\n\n        require(initialized == false);\n\n\n\n        TWO_KEY_SINGLETON_REGISTRY = _twoKeySingletonesRegistry;\n\n        PROXY_STORAGE_CONTRACT = ITwoKeyUpgradableExchangeStorage(_proxyStorageContract);\n\n\n\n        setUint((\"buyRate2key\"),95);// When anyone send 2key to contract, 2key in exchange will be calculated on it's buy rate\n\n        setUint((\"sellRate2key\"),100);// When anyone send Ether to contract, 2key in exchange will be calculated on it's sell rate\n\n        setUint((\"weiRaised\"),0);\n\n        setUint(\"transactionCounter\",0);\n\n\n\n        setAddress((\"TWO_KEY_TOKEN\"),address(_token));\n\n        setAddress((\"DAI\"), _daiAddress);\n\n        setAddress((\"ETH_TOKEN_ADDRESS\"), 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\n\n        setAddress((\"KYBER_NETWORK_PROXY\"), _kyberNetworkProxy);\n\n\n\n        initialized = true;\n\n    }\n\n\n",
          "message": "Reentrancy in TwoKeyUpgradableExchange.setInitialParams (TwoKeyUpgradableExchange.sol#527-554):\n\tExternal calls:\n\t- setUint((buyRate2key),95) (TwoKeyUpgradableExchange.sol#541)\n\t- setUint((sellRate2key),100) (TwoKeyUpgradableExchange.sol#542)\n\t- setUint((weiRaised),0) (TwoKeyUpgradableExchange.sol#543-544)\n\t- setUint(transactionCounter,0) (TwoKeyUpgradableExchange.sol#544-545)\n\t- setAddress((TWO_KEY_TOKEN),address(_token)) (TwoKeyUpgradableExchange.sol#546-547)\n\t- setAddress((DAI),_daiAddress) (TwoKeyUpgradableExchange.sol#547-548)\n\t- setAddress((ETH_TOKEN_ADDRESS),0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee) (TwoKeyUpgradableExchange.sol#548-549)\n\t- setAddress((KYBER_NETWORK_PROXY),_kyberNetworkProxy) (TwoKeyUpgradableExchange.sol#549-550)\n\tState variables written after the call(s):\n\t- initialized (TwoKeyUpgradableExchange.sol#551-552)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 764,
          "vulnerability_to_line": 794,
          "vulnerability_code": "    function buyStableCoinWith2key(\n\n        uint _twoKeyUnits,\n\n        address _beneficiary\n\n    )\n\n    external\n\n    onlyValidatedContracts\n\n    returns (uint)\n\n    {\n\n        ERC20 dai = ERC20(getAddress(\"DAI\"));\n\n        ERC20 token = ERC20(getAddress(\"TWO_KEY_TOKEN\"));\n\n\n\n        uint stableCoinUnits = _getUSDStableCoinAmountFrom2keyUnits(_twoKeyUnits);\n\n        uint etherBalanceOnContractBefore = this.balance;\n\n        uint stableCoinsOnContractBefore = dai.balanceOf(address(this));\n\n        token.transferFrom(msg.sender, address(this), _twoKeyUnits);\n\n\n\n        uint stableCoinsAfter = stableCoinsOnContractBefore - stableCoinUnits;\n\n\n\n        dai.transfer(_beneficiary, stableCoinUnits);\n\n\n\n        emitEventWithdrawExecuted(\n\n            _beneficiary,\n\n            stableCoinsOnContractBefore,\n\n            stableCoinsAfter,\n\n            etherBalanceOnContractBefore,\n\n            stableCoinUnits,\n\n            _twoKeyUnits\n\n        );\n\n    }\n\n\n",
          "message": "TwoKeyUpgradableExchange.buyStableCoinWith2key (TwoKeyUpgradableExchange.sol#764-794) does not use the value returned by external calls:\n\t-token.transferFrom(msg.sender,address(this),_twoKeyUnits) (TwoKeyUpgradableExchange.sol#778-779)\n\t-dai.transfer(_beneficiary,stableCoinUnits) (TwoKeyUpgradableExchange.sol#782-783)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 652,
          "vulnerability_to_line": 653,
          "vulnerability_code": "        uint buyRate2key = getUint(\"buyRate2key\");\n",
          "message": "TwoKeyUpgradableExchange._getUSDStableCoinAmountFrom2keyUnits.buyRate2key (local variable @ TwoKeyUpgradableExchange.sol#652-653) shadows:\n\t- TwoKeyUpgradableExchange.buyRate2key (function @ TwoKeyUpgradableExchange.sol#816-820)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 693,
          "vulnerability_to_line": 694,
          "vulnerability_code": "        uint weiRaised = getUint(\"weiRaised\").add(weiAmount);\n",
          "message": "TwoKeyUpgradableExchange.buyTokens.weiRaised (local variable @ TwoKeyUpgradableExchange.sol#693-694) shadows:\n\t- TwoKeyUpgradableExchange.weiRaised (function @ TwoKeyUpgradableExchange.sol#828-832)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": 335,
          "vulnerability_code": "    function at(address _addr) internal view returns (bytes o_code) {\n\n        assembly {\n\n        // retrieve the size of the code, this needs assembly\n\n            let size := extcodesize(_addr)\n\n        // allocate output byte array - this could also be done without assembly\n\n        // by using o_code = new bytes(size)\n\n            o_code := mload(0x40)\n\n        // new \"memory end\" including padding\n\n            mstore(0x40, add(o_code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n\n        // store length in memory\n\n            mstore(o_code, size)\n\n        // actually retrieve the code, this needs assembly\n\n            extcodecopy(_addr, add(o_code, 0x20), 0, size)\n\n        }\n\n    }\n",
          "message": "GetCode.at uses assembly (TwoKeyUpgradableExchange.sol#320-335)\n\t- TwoKeyUpgradableExchange.sol#321-335\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 390,
          "vulnerability_to_line": 391,
          "vulnerability_code": "    address internal _implementation;\n",
          "message": "UpgradeabilityStorage._implementation should be constant (TwoKeyUpgradableExchange.sol#390-391)\n"
        },
        {
          "name": "pragma",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": "Different versions of Solidity is used in TwoKeyUpgradableExchange.sol:\n\t- Version used: ['^0.4.0', '^0.4.24']\n\t- TwoKeyUpgradableExchange.sol#3 declares pragma solidity^0.4.24\n\t- TwoKeyUpgradableExchange.sol#25 declares pragma solidity^0.4.24\n\t- TwoKeyUpgradableExchange.sol#37 declares pragma solidity^0.4.24\n\t- TwoKeyUpgradableExchange.sol#49 declares pragma solidity^0.4.24\n\t- TwoKeyUpgradableExchange.sol#63 declares pragma solidity^0.4.24\n\t- TwoKeyUpgradableExchange.sol#107 declares pragma solidity^0.4.24\n\t- TwoKeyUpgradableExchange.sol#130 declares pragma solidity^0.4.0\n\t- TwoKeyUpgradableExchange.sol#181 declares pragma solidity^0.4.24\n\t- TwoKeyUpgradableExchange.sol#189 declares pragma solidity^0.4.24\n\t- TwoKeyUpgradableExchange.sol#256 declares pragma solidity^0.4.24\n\t- TwoKeyUpgradableExchange.sol#311 declares pragma solidity^0.4.24\n\t- TwoKeyUpgradableExchange.sol#339-341 declares pragma solidity^0.4.24\n\t- TwoKeyUpgradableExchange.sol#379-381 declares pragma solidity^0.4.24\n\t- TwoKeyUpgradableExchange.sol#403-405 declares pragma solidity^0.4.24\n\t- TwoKeyUpgradableExchange.sol#417-418 declares pragma solidity^0.4.24\n\t- TwoKeyUpgradableExchange.sol#430-432 declares pragma solidity^0.4.24\n\t- TwoKeyUpgradableExchange.sol#438-440 declares pragma solidity^0.4.24\n\t- TwoKeyUpgradableExchange.sol#461-463 declares pragma solidity^0.4.24\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
          "message": "ERC20Basic.totalSupply (TwoKeyUpgradableExchange.sol#12) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address _who) public view returns (uint256);\n",
          "message": "ERC20Basic.balanceOf (TwoKeyUpgradableExchange.sol#13) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool);\n",
          "message": "ERC20Basic.transfer (TwoKeyUpgradableExchange.sol#14) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address _ocwner, address _spender) public view returns (uint256);\n",
          "message": "ERC20Basic.allowance (TwoKeyUpgradableExchange.sol#15) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address spender, uint tokens) public returns (bool success);\n",
          "message": "ERC20Basic.approve (TwoKeyUpgradableExchange.sol#16) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n",
          "message": "ERC20Basic.transferFrom (TwoKeyUpgradableExchange.sol#17) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBaseToTargetRate(string _currency) public view returns (uint);\n",
          "message": "ITwoKeyExchangeRateContract.getBaseToTargetRate (TwoKeyUpgradableExchange.sol#44) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isCampaignValidated(address campaign) public view returns (bool);\n",
          "message": "ITwoKeyCampaignValidator.isCampaignValidated (TwoKeyUpgradableExchange.sol#55) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isConversionHandlerCodeValid(address conversionHandler) public view returns (bool);\n",
          "message": "ITwoKeyCampaignValidator.isConversionHandlerCodeValid (TwoKeyUpgradableExchange.sol#56) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function validateAcquisitionCampaign(address campaign, string nonSingletonHash) public;\n",
          "message": "ITwoKeyCampaignValidator.validateAcquisitionCampaign (TwoKeyUpgradableExchange.sol#57) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function validateDonationCampaign(address campaign, address donationConversionHandler, string nonSingletonHash) public;\n",
          "message": "ITwoKeyCampaignValidator.validateDonationCampaign (TwoKeyUpgradableExchange.sol#58) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": 116,
          "vulnerability_code": "    function swapEtherToToken(\n\n        ERC20 token,\n\n        uint minConversionRate\n\n    )\n\n    public\n\n    payable\n",
          "message": "IKyberNetworkProxy.swapEtherToToken (TwoKeyUpgradableExchange.sol#110-116) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": 125,
          "vulnerability_code": "    function getExpectedRate(\n\n        ERC20 src,\n\n        ERC20 dest,\n\n        uint srcQty\n\n    )\n\n    public\n\n    view\n",
          "message": "IKyberNetworkProxy.getExpectedRate (TwoKeyUpgradableExchange.sol#118-125) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 219,
          "vulnerability_to_line": 224,
          "vulnerability_code": "    function approve(\n\n        address _spender,\n\n        uint256 _value\n\n    )\n\n    public\n",
          "message": "IERC20.approve (TwoKeyUpgradableExchange.sol#219-224) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 366,
          "vulnerability_to_line": 368,
          "vulnerability_code": "    function addVersion(string _contractName, string version, address implementation) public;\n\n\n",
          "message": "ITwoKeySingletonesRegistry.addVersion (TwoKeyUpgradableExchange.sol#366-368) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 374,
          "vulnerability_to_line": 375,
          "vulnerability_code": "    function getVersion(string _contractName, string version) public view returns (address);\n",
          "message": "ITwoKeySingletonesRegistry.getVersion (TwoKeyUpgradableExchange.sol#374-375) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 396,
          "vulnerability_to_line": 399,
          "vulnerability_code": "    function implementation() public view returns (address) {\n\n        return _implementation;\n\n    }\n",
          "message": "UpgradeabilityStorage.implementation (TwoKeyUpgradableExchange.sol#396-399) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 410,
          "vulnerability_to_line": 413,
          "vulnerability_code": "    function initialize(address sender) public payable {\n\n        require(msg.sender == address(registry));\n\n    }\n",
          "message": "Upgradeable.initialize (TwoKeyUpgradableExchange.sol#410-413) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 423,
          "vulnerability_to_line": 424,
          "vulnerability_code": "    function getContractProxyAddress(string _contractName) public view returns (address);\n",
          "message": "ITwoKeySingletoneRegistryFetchAddress.getContractProxyAddress (TwoKeyUpgradableExchange.sol#423-424) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 424,
          "vulnerability_to_line": 425,
          "vulnerability_code": "    function getNonUpgradableContractAddress(string contractName) public view returns (address);\n",
          "message": "ITwoKeySingletoneRegistryFetchAddress.getNonUpgradableContractAddress (TwoKeyUpgradableExchange.sol#424-425) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 425,
          "vulnerability_to_line": 426,
          "vulnerability_code": "    function getLatestContractVersion(string contractName) public view returns (string);\n",
          "message": "ITwoKeySingletoneRegistryFetchAddress.getLatestContractVersion (TwoKeyUpgradableExchange.sol#425-426) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 433,
          "vulnerability_to_line": 434,
          "vulnerability_code": "    function onlyMaintainer(address _sender) public view returns (bool);\n",
          "message": "ITwoKeyMaintainersRegistry.onlyMaintainer (TwoKeyUpgradableExchange.sol#433-434) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 678,
          "vulnerability_to_line": 711,
          "vulnerability_code": "    function buyTokens(\n\n        address _beneficiary\n\n    )\n\n    public\n\n    payable\n\n    onlyValidatedContracts\n\n    returns (uint)\n\n    {\n\n        uint256 weiAmount = msg.value;\n\n        _preValidatePurchase(_beneficiary, weiAmount);\n\n\n\n        // calculate token amount to be created\n\n        uint256 tokens = _getTokenAmountToBeSold(weiAmount);\n\n\n\n        // update state\n\n        uint weiRaised = getUint(\"weiRaised\").add(weiAmount);\n\n        setUint(\"weiRaised\",weiRaised);\n\n        setUint(\"transactionCounter\",getUint(\"transactionCounter\")+1);\n\n\n\n        _processPurchase(_beneficiary, tokens);\n\n\n\n\n\n        emit TokenPurchase(\n\n            msg.sender,\n\n            _beneficiary,\n\n            weiAmount,\n\n            tokens,\n\n            getUint(\"sellRate2key\")\n\n        );\n\n\n\n        return tokens;\n\n    }\n\n\n",
          "message": "TwoKeyUpgradableExchange.buyTokens (TwoKeyUpgradableExchange.sol#678-711) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 742,
          "vulnerability_to_line": 759,
          "vulnerability_code": "    function startHedging(\n\n        uint amountToBeHedged,\n\n        uint approvedMinConversionRate\n\n    )\n\n    public\n\n    onlyMaintainer\n\n    {\n\n        ERC20 dai = ERC20(getAddress(\"DAI\"));\n\n\n\n        address kyberProxyContract = getAddress(\"KYBER_NETWORK_PROXY\");\n\n        IKyberNetworkProxy proxyContract = IKyberNetworkProxy(kyberProxyContract);\n\n\n\n        uint minConversionRate = getKyberExpectedRate(amountToBeHedged);\n\n        require(minConversionRate >= approvedMinConversionRate.mul(95).div(100)); //Means our rate can be at most same as their rate, because they're giving the best rate\n\n        uint stableCoinUnits = proxyContract.swapEtherToToken.value(amountToBeHedged)(dai,minConversionRate);\n\n    }\n\n\n",
          "message": "TwoKeyUpgradableExchange.startHedging (TwoKeyUpgradableExchange.sol#742-759) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 816,
          "vulnerability_to_line": 820,
          "vulnerability_code": "    function buyRate2key() public view returns (uint) {\n\n        return getUint(\"buyRate2key\");\n\n    }\n\n\n",
          "message": "TwoKeyUpgradableExchange.buyRate2key (TwoKeyUpgradableExchange.sol#816-820) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 820,
          "vulnerability_to_line": 824,
          "vulnerability_code": "    function sellRate2key() public view returns (uint) {\n\n        return getUint(\"sellRate2key\");\n\n    }\n\n\n",
          "message": "TwoKeyUpgradableExchange.sellRate2key (TwoKeyUpgradableExchange.sol#820-824) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 824,
          "vulnerability_to_line": 828,
          "vulnerability_code": "    function transactionCounter() public view returns (uint) {\n\n        return getUint(\"transactionCounter\");\n\n    }\n\n\n",
          "message": "TwoKeyUpgradableExchange.transactionCounter (TwoKeyUpgradableExchange.sol#824-828) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 828,
          "vulnerability_to_line": 832,
          "vulnerability_code": "    function weiRaised() public view returns (uint) {\n\n        return getUint(\"weiRaised\");\n\n    }\n\n\n",
          "message": "TwoKeyUpgradableExchange.weiRaised (TwoKeyUpgradableExchange.sol#828-832) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 853,
          "vulnerability_to_line": 863,
          "vulnerability_code": "    function updateUint(\n\n        string key,\n\n        uint value\n\n    )\n\n    public\n\n    onlyMaintainer\n\n    {\n\n        setUint(key, value);\n\n    }\n\n\n",
          "message": "TwoKeyUpgradableExchange.updateUint (TwoKeyUpgradableExchange.sol#853-863) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 866,
          "vulnerability_to_line": 873,
          "vulnerability_code": "    function ()\n\n    public\n\n    payable\n\n    {\n\n\n\n    }\n\n\n",
          "message": "TwoKeyUpgradableExchange.fallback (TwoKeyUpgradableExchange.sol#866-873) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 130,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;\n",
          "message": "Detected issues with version pragma in TwoKeyUpgradableExchange.sol:\n\t- pragma solidity^0.4.0 (TwoKeyUpgradableExchange.sol#130): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ERC20Basic _token,\n",
          "message": "Parameter '_token' of SafeERC20.safeTransfer (TwoKeyUpgradableExchange.sol#74) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _to,\n",
          "message": "Parameter '_to' of SafeERC20.safeTransfer (TwoKeyUpgradableExchange.sol#75) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of SafeERC20.safeTransfer (TwoKeyUpgradableExchange.sol#76) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ERC20 _token,\n",
          "message": "Parameter '_token' of SafeERC20.safeTransferFrom (TwoKeyUpgradableExchange.sol#84) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _from,\n",
          "message": "Parameter '_from' of SafeERC20.safeTransferFrom (TwoKeyUpgradableExchange.sol#85) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _to,\n",
          "message": "Parameter '_to' of SafeERC20.safeTransferFrom (TwoKeyUpgradableExchange.sol#86) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of SafeERC20.safeTransferFrom (TwoKeyUpgradableExchange.sol#87) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ERC20 _token,\n",
          "message": "Parameter '_token' of SafeERC20.safeApprove (TwoKeyUpgradableExchange.sol#95) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _spender,\n",
          "message": "Parameter '_spender' of SafeERC20.safeApprove (TwoKeyUpgradableExchange.sol#96) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of SafeERC20.safeApprove (TwoKeyUpgradableExchange.sol#97) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 268,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_a' of SafeMath.mul (TwoKeyUpgradableExchange.sol#268) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 268,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_b' of SafeMath.mul (TwoKeyUpgradableExchange.sol#268) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 284,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_a' of SafeMath.div (TwoKeyUpgradableExchange.sol#284) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 284,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_b' of SafeMath.div (TwoKeyUpgradableExchange.sol#284) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_a' of SafeMath.sub (TwoKeyUpgradableExchange.sol#294) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_b' of SafeMath.sub (TwoKeyUpgradableExchange.sol#294) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 302,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_a' of SafeMath.add (TwoKeyUpgradableExchange.sol#302) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 302,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_b' of SafeMath.add (TwoKeyUpgradableExchange.sol#302) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 390,
          "vulnerability_to_line": 391,
          "vulnerability_code": "    address internal _implementation;\n",
          "message": "Variable 'UpgradeabilityStorage._implementation' (TwoKeyUpgradableExchange.sol#390-391) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 443,
          "vulnerability_to_line": 444,
          "vulnerability_code": "    address public TWO_KEY_SINGLETON_REGISTRY;\n",
          "message": "Variable 'ITwoKeySingletonUtils.TWO_KEY_SINGLETON_REGISTRY' (TwoKeyUpgradableExchange.sol#443-444) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 528,
          "vulnerability_to_line": 529,
          "vulnerability_code": "        ERC20 _token,\n",
          "message": "Parameter '_token' of TwoKeyUpgradableExchange.setInitialParams (TwoKeyUpgradableExchange.sol#528-529) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 529,
          "vulnerability_to_line": 530,
          "vulnerability_code": "        address _daiAddress,\n",
          "message": "Parameter '_daiAddress' of TwoKeyUpgradableExchange.setInitialParams (TwoKeyUpgradableExchange.sol#529-530) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 530,
          "vulnerability_to_line": 531,
          "vulnerability_code": "        address _kyberNetworkProxy,\n",
          "message": "Parameter '_kyberNetworkProxy' of TwoKeyUpgradableExchange.setInitialParams (TwoKeyUpgradableExchange.sol#530-531) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 531,
          "vulnerability_to_line": 532,
          "vulnerability_code": "        address _twoKeySingletonesRegistry,\n",
          "message": "Parameter '_twoKeySingletonesRegistry' of TwoKeyUpgradableExchange.setInitialParams (TwoKeyUpgradableExchange.sol#531-532) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 532,
          "vulnerability_to_line": 533,
          "vulnerability_code": "        address _proxyStorageContract\n",
          "message": "Parameter '_proxyStorageContract' of TwoKeyUpgradableExchange.setInitialParams (TwoKeyUpgradableExchange.sol#532-533) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 569,
          "vulnerability_to_line": 579,
          "vulnerability_code": "    function _preValidatePurchase(\n\n        address _beneficiary,\n\n        uint256 _weiAmount\n\n    )\n\n    private\n\n    {\n\n        require(_beneficiary != address(0),'beneficiary address can not be 0' );\n\n        require(_weiAmount != 0, 'wei amount can not be 0');\n\n    }\n\n\n",
          "message": "Function 'TwoKeyUpgradableExchange._preValidatePurchase' (TwoKeyUpgradableExchange.sol#569-579) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 570,
          "vulnerability_to_line": 571,
          "vulnerability_code": "        address _beneficiary,\n",
          "message": "Parameter '_beneficiary' of TwoKeyUpgradableExchange._preValidatePurchase (TwoKeyUpgradableExchange.sol#570-571) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 571,
          "vulnerability_to_line": 572,
          "vulnerability_code": "        uint256 _weiAmount\n",
          "message": "Parameter '_weiAmount' of TwoKeyUpgradableExchange._preValidatePurchase (TwoKeyUpgradableExchange.sol#571-572) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 585,
          "vulnerability_to_line": 597,
          "vulnerability_code": "    function _deliverTokens(\n\n        address _beneficiary,\n\n        uint256 _tokenAmount\n\n    )\n\n    internal\n\n    {\n\n        //Take the address of token from storage\n\n        address tokenAddress = getAddress(\"TWO_KEY_TOKEN\");\n\n\n\n        ERC20(tokenAddress).safeTransfer(_beneficiary, _tokenAmount);\n\n    }\n\n\n",
          "message": "Function 'TwoKeyUpgradableExchange._deliverTokens' (TwoKeyUpgradableExchange.sol#585-597) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 586,
          "vulnerability_to_line": 587,
          "vulnerability_code": "        address _beneficiary,\n",
          "message": "Parameter '_beneficiary' of TwoKeyUpgradableExchange._deliverTokens (TwoKeyUpgradableExchange.sol#586-587) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 587,
          "vulnerability_to_line": 588,
          "vulnerability_code": "        uint256 _tokenAmount\n",
          "message": "Parameter '_tokenAmount' of TwoKeyUpgradableExchange._deliverTokens (TwoKeyUpgradableExchange.sol#587-588) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 603,
          "vulnerability_to_line": 612,
          "vulnerability_code": "    function _processPurchase(\n\n        address _beneficiary,\n\n        uint256 _tokenAmount\n\n    )\n\n    internal\n\n    {\n\n        _deliverTokens(_beneficiary, _tokenAmount);\n\n    }\n\n\n",
          "message": "Function 'TwoKeyUpgradableExchange._processPurchase' (TwoKeyUpgradableExchange.sol#603-612) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 604,
          "vulnerability_to_line": 605,
          "vulnerability_code": "        address _beneficiary,\n",
          "message": "Parameter '_beneficiary' of TwoKeyUpgradableExchange._processPurchase (TwoKeyUpgradableExchange.sol#604-605) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 605,
          "vulnerability_to_line": 606,
          "vulnerability_code": "        uint256 _tokenAmount\n",
          "message": "Parameter '_tokenAmount' of TwoKeyUpgradableExchange._processPurchase (TwoKeyUpgradableExchange.sol#605-606) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 618,
          "vulnerability_to_line": 631,
          "vulnerability_code": "    function _getTokenAmountToBeSold(\n\n        uint256 _weiAmount\n\n    )\n\n    public\n\n    view\n\n    returns (uint256)\n\n    {\n\n        address twoKeyExchangeRateContract = getAddressFromTwoKeySingletonRegistry(\"TwoKeyExchangeRateContract\");\n\n\n\n        uint rate = ITwoKeyExchangeRateContract(twoKeyExchangeRateContract).getBaseToTargetRate(\"USD\");\n\n        return (_weiAmount*rate).mul(1000).div(getUint(\"sellRate2key\")).div(10**18);\n\n    }\n\n\n",
          "message": "Function 'TwoKeyUpgradableExchange._getTokenAmountToBeSold' (TwoKeyUpgradableExchange.sol#618-631) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 619,
          "vulnerability_to_line": 620,
          "vulnerability_code": "        uint256 _weiAmount\n",
          "message": "Parameter '_weiAmount' of TwoKeyUpgradableExchange._getTokenAmountToBeSold (TwoKeyUpgradableExchange.sol#619-620) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 637,
          "vulnerability_to_line": 660,
          "vulnerability_code": "    function _getUSDStableCoinAmountFrom2keyUnits(\n\n        uint256 _2keyAmount\n\n    )\n\n    public\n\n    view\n\n    returns (uint256)\n\n    {\n\n        // Take the address of TwoKeyExchangeRateContract\n\n        address twoKeyExchangeRateContract = getAddressFromTwoKeySingletonRegistry(\"TwoKeyExchangeRateContract\");\n\n\n\n        // This is the case when we buy 2keys in exchange for stable coins\n\n        uint rate = ITwoKeyExchangeRateContract(twoKeyExchangeRateContract).getBaseToTargetRate(\"USD-DAI\"); // 1.01\n\n        uint lowestAcceptedRate = 96;\n\n        require(rate >= lowestAcceptedRate.mul(10**18).div(100)); // Require that lowest accepted rate is greater than 0.95\n\n\n\n        uint buyRate2key = getUint(\"buyRate2key\");\n\n\n\n        uint dollarWeiWorthTokens = _2keyAmount.mul(buyRate2key).div(1000);  // 100*95/1000 = 9.5\n\n        uint amountOfDAIs = dollarWeiWorthTokens.mul(rate).div(10**18);      // 9.5 * 1.01 =vOK\n\n\n\n        return amountOfDAIs;\n\n    }\n\n\n",
          "message": "Function 'TwoKeyUpgradableExchange._getUSDStableCoinAmountFrom2keyUnits' (TwoKeyUpgradableExchange.sol#637-660) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 638,
          "vulnerability_to_line": 639,
          "vulnerability_code": "        uint256 _2keyAmount\n",
          "message": "Parameter '_2keyAmount' of TwoKeyUpgradableExchange._getUSDStableCoinAmountFrom2keyUnits (TwoKeyUpgradableExchange.sol#638-639) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 664,
          "vulnerability_to_line": 672,
          "vulnerability_code": "    function _forwardFunds(\n\n        address _twoKeyAdmin\n\n    )\n\n    internal\n\n    {\n\n        _twoKeyAdmin.transfer(msg.value);\n\n    }\n\n\n",
          "message": "Function 'TwoKeyUpgradableExchange._forwardFunds' (TwoKeyUpgradableExchange.sol#664-672) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 665,
          "vulnerability_to_line": 666,
          "vulnerability_code": "        address _twoKeyAdmin\n",
          "message": "Parameter '_twoKeyAdmin' of TwoKeyUpgradableExchange._forwardFunds (TwoKeyUpgradableExchange.sol#665-666) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 679,
          "vulnerability_to_line": 680,
          "vulnerability_code": "        address _beneficiary\n",
          "message": "Parameter '_beneficiary' of TwoKeyUpgradableExchange.buyTokens (TwoKeyUpgradableExchange.sol#679-680) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 765,
          "vulnerability_to_line": 766,
          "vulnerability_code": "        uint _twoKeyUnits,\n",
          "message": "Parameter '_twoKeyUnits' of TwoKeyUpgradableExchange.buyStableCoinWith2key (TwoKeyUpgradableExchange.sol#765-766) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 766,
          "vulnerability_to_line": 767,
          "vulnerability_code": "        address _beneficiary\n",
          "message": "Parameter '_beneficiary' of TwoKeyUpgradableExchange.buyStableCoinWith2key (TwoKeyUpgradableExchange.sol#766-767) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 795,
          "vulnerability_to_line": 796,
          "vulnerability_code": "        address _beneficiary,\n",
          "message": "Parameter '_beneficiary' of TwoKeyUpgradableExchange.emitEventWithdrawExecuted (TwoKeyUpgradableExchange.sol#795-796) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 796,
          "vulnerability_to_line": 797,
          "vulnerability_code": "        uint _stableCoinsOnContractBefore,\n",
          "message": "Parameter '_stableCoinsOnContractBefore' of TwoKeyUpgradableExchange.emitEventWithdrawExecuted (TwoKeyUpgradableExchange.sol#796-797) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 797,
          "vulnerability_to_line": 798,
          "vulnerability_code": "        uint _stableCoinsAfter,\n",
          "message": "Parameter '_stableCoinsAfter' of TwoKeyUpgradableExchange.emitEventWithdrawExecuted (TwoKeyUpgradableExchange.sol#797-798) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 798,
          "vulnerability_to_line": 799,
          "vulnerability_code": "        uint _etherBalanceOnContractBefore,\n",
          "message": "Parameter '_etherBalanceOnContractBefore' of TwoKeyUpgradableExchange.emitEventWithdrawExecuted (TwoKeyUpgradableExchange.sol#798-799) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 799,
          "vulnerability_to_line": 800,
          "vulnerability_code": "        uint _stableCoinUnits,\n",
          "message": "Parameter '_stableCoinUnits' of TwoKeyUpgradableExchange.emitEventWithdrawExecuted (TwoKeyUpgradableExchange.sol#799-800) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 478,
          "vulnerability_to_line": 479,
          "vulnerability_code": "    ITwoKeyUpgradableExchangeStorage public PROXY_STORAGE_CONTRACT;\n",
          "message": "Variable 'TwoKeyUpgradableExchange.PROXY_STORAGE_CONTRACT' (TwoKeyUpgradableExchange.sol#478-479) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 548,
          "vulnerability_to_line": null,
          "vulnerability_code": "        setAddress((\"ETH_TOKEN_ADDRESS\"), 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 764,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function buyStableCoinWith2key(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function at(address _addr) internal view returns (bytes o_code) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 109,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract IKyberNetworkProxy {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 405,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Upgradeable is UpgradeabilityStorage {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 130,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 181,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 189,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 256,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 311,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 339,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 379,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 403,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 417,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 430,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 438,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 461,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 473,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function at(address _addr) internal view returns (bytes o_code) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 867,
          "vulnerability_to_line": null,
          "vulnerability_code": "    public\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBaseToTargetRate(string _currency) public view returns (uint);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function validateAcquisitionCampaign(address campaign, string nonSingletonHash) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function validateDonationCampaign(address campaign, address donationConversionHandler, string nonSingletonHash) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function at(address _addr) internal view returns (bytes o_code) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 366,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addVersion(string _contractName, string version, address implementation) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 366,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addVersion(string _contractName, string version, address implementation) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 374,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getVersion(string _contractName, string version) public view returns (address);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 374,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getVersion(string _contractName, string version) public view returns (address);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 423,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getContractProxyAddress(string _contractName) public view returns (address);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 424,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getNonUpgradableContractAddress(string contractName) public view returns (address);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 425,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getLatestContractVersion(string contractName) public view returns (string);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 425,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getLatestContractVersion(string contractName) public view returns (string);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 453,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAddressFromTwoKeySingletonRegistry(string contractName) internal view returns (address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 833,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getUint(string key) internal view returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 838,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setUint(string key, uint value) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 844,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAddress(string key) internal view returns (address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 849,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setAddress(string key, address value) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 854,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string key,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 321,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 366,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addVersion(string _contractName, string version, address implementation) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 374,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getVersion(string _contractName, string version) public view returns (address);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 476,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool initialized;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 834,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return PROXY_STORAGE_CONTRACT.getUint(keccak256(key));\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 551,
          "vulnerability_to_line": null,
          "vulnerability_code": "        initialized = true;\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 551,
          "vulnerability_to_line": null,
          "vulnerability_code": "        initialized = true;\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 559,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(ITwoKeyCampaignValidator(twoKeyCampaignValidator).isCampaignValidated(msg.sender) == true);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 559,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(ITwoKeyCampaignValidator(twoKeyCampaignValidator).isCampaignValidated(msg.sender) == true);\n",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 777,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint stableCoinsOnContractBefore = dai.balanceOf(address(this));\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 777,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint stableCoinsOnContractBefore = dai.balanceOf(address(this));\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 778,
          "vulnerability_to_line": null,
          "vulnerability_code": "        token.transferFrom(msg.sender, address(this), _twoKeyUnits);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 778,
          "vulnerability_to_line": null,
          "vulnerability_code": "        token.transferFrom(msg.sender, address(this), _twoKeyUnits);\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 782,
          "vulnerability_to_line": null,
          "vulnerability_code": "        dai.transfer(_beneficiary, stableCoinUnits);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 782,
          "vulnerability_to_line": null,
          "vulnerability_code": "        dai.transfer(_beneficiary, stableCoinUnits);\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 448,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(ITwoKeyMaintainersRegistry(twoKeyMaintainersRegistry).onlyMaintainer(msg.sender));\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 448,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(ITwoKeyMaintainersRegistry(twoKeyMaintainersRegistry).onlyMaintainer(msg.sender));\n",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 756,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint stableCoinUnits = proxyContract.swapEtherToToken.value(amountToBeHedged)(dai,minConversionRate);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 756,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint stableCoinUnits = proxyContract.swapEtherToToken.value(amountToBeHedged)(dai,minConversionRate);\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 731,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (minConversionRate,) = proxyContract.getExpectedRate(eth, dai, amountEthWei);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 731,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (minConversionRate,) = proxyContract.getExpectedRate(eth, dai, amountEthWei);\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 627,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint rate = ITwoKeyExchangeRateContract(twoKeyExchangeRateContract).getBaseToTargetRate(\"USD\");\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 627,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint rate = ITwoKeyExchangeRateContract(twoKeyExchangeRateContract).getBaseToTargetRate(\"USD\");\n",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 627,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint rate = ITwoKeyExchangeRateContract(twoKeyExchangeRateContract).getBaseToTargetRate(\"USD\");\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 628,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return (_weiAmount*rate).mul(1000).div(getUint(\"sellRate2key\")).div(10**18);\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 648,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint rate = ITwoKeyExchangeRateContract(twoKeyExchangeRateContract).getBaseToTargetRate(\"USD-DAI\"); // 1.01\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 648,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint rate = ITwoKeyExchangeRateContract(twoKeyExchangeRateContract).getBaseToTargetRate(\"USD-DAI\"); // 1.01\n",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 648,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint rate = ITwoKeyExchangeRateContract(twoKeyExchangeRateContract).getBaseToTargetRate(\"USD-DAI\"); // 1.01\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 559,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(ITwoKeyCampaignValidator(twoKeyCampaignValidator).isCampaignValidated(msg.sender) == true);\n",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 834,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return PROXY_STORAGE_CONTRACT.getUint(keccak256(key));\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 834,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return PROXY_STORAGE_CONTRACT.getUint(keccak256(key));\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 834,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return PROXY_STORAGE_CONTRACT.getUint(keccak256(key));\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 834,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return PROXY_STORAGE_CONTRACT.getUint(keccak256(key));\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 834,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return PROXY_STORAGE_CONTRACT.getUint(keccak256(key));\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 834,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return PROXY_STORAGE_CONTRACT.getUint(keccak256(key));\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 834,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return PROXY_STORAGE_CONTRACT.getUint(keccak256(key));\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 839,
          "vulnerability_to_line": null,
          "vulnerability_code": "        PROXY_STORAGE_CONTRACT.setUint(keccak256(key), value);\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 839,
          "vulnerability_to_line": null,
          "vulnerability_code": "        PROXY_STORAGE_CONTRACT.setUint(keccak256(key), value);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 839,
          "vulnerability_to_line": null,
          "vulnerability_code": "        PROXY_STORAGE_CONTRACT.setUint(keccak256(key), value);\n",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 839,
          "vulnerability_to_line": null,
          "vulnerability_code": "        PROXY_STORAGE_CONTRACT.setUint(keccak256(key), value);\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 850,
          "vulnerability_to_line": null,
          "vulnerability_code": "        PROXY_STORAGE_CONTRACT.setAddress(keccak256(key), value);\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 850,
          "vulnerability_to_line": null,
          "vulnerability_code": "        PROXY_STORAGE_CONTRACT.setAddress(keccak256(key), value);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 850,
          "vulnerability_to_line": null,
          "vulnerability_code": "        PROXY_STORAGE_CONTRACT.setAddress(keccak256(key), value);\n",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 850,
          "vulnerability_to_line": null,
          "vulnerability_code": "        PROXY_STORAGE_CONTRACT.setAddress(keccak256(key), value);\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 454,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return ITwoKeySingletoneRegistryFetchAddress(TWO_KEY_SINGLETON_REGISTRY)\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 454,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return ITwoKeySingletoneRegistryFetchAddress(TWO_KEY_SINGLETON_REGISTRY)\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 454,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return ITwoKeySingletoneRegistryFetchAddress(TWO_KEY_SINGLETON_REGISTRY)\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 454,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return ITwoKeySingletoneRegistryFetchAddress(TWO_KEY_SINGLETON_REGISTRY)\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 454,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return ITwoKeySingletoneRegistryFetchAddress(TWO_KEY_SINGLETON_REGISTRY)\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 454,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return ITwoKeySingletoneRegistryFetchAddress(TWO_KEY_SINGLETON_REGISTRY)\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 454,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return ITwoKeySingletoneRegistryFetchAddress(TWO_KEY_SINGLETON_REGISTRY)\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 845,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return PROXY_STORAGE_CONTRACT.getAddress(keccak256(key));\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 845,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return PROXY_STORAGE_CONTRACT.getAddress(keccak256(key));\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 845,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return PROXY_STORAGE_CONTRACT.getAddress(keccak256(key));\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 845,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return PROXY_STORAGE_CONTRACT.getAddress(keccak256(key));\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 845,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return PROXY_STORAGE_CONTRACT.getAddress(keccak256(key));\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 845,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return PROXY_STORAGE_CONTRACT.getAddress(keccak256(key));\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 845,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return PROXY_STORAGE_CONTRACT.getAddress(keccak256(key));\n",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 845,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return PROXY_STORAGE_CONTRACT.getAddress(keccak256(key));\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 845,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return PROXY_STORAGE_CONTRACT.getAddress(keccak256(key));\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 845,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return PROXY_STORAGE_CONTRACT.getAddress(keccak256(key));\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 628,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return (_weiAmount*rate).mul(1000).div(getUint(\"sellRate2key\")).div(10**18);\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_token.transfer(_to, _value));\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_token.transfer(_to, _value));\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 276,
          "vulnerability_to_line": null,
          "vulnerability_code": "    c = _a * _b;\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 628,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return (_weiAmount*rate).mul(1000).div(getUint(\"sellRate2key\")).div(10**18);\n",
          "message": null
        }
      ]
    }
  }
}