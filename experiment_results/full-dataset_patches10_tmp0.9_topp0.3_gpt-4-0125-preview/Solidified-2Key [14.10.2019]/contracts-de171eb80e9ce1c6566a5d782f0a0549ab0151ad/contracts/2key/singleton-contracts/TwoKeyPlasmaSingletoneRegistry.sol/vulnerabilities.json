{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 229,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<_maintainers.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 170,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (string _contractName, string _version) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 171,
          "vulnerability_to_line": null,
          "vulnerability_code": "        registry = ITwoKeySingletonesRegistry(msg.sender);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _implementation = registry.getVersion(_contractName, _version);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 227,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address [] _maintainers, address _twoKeyAdmin) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "        isMaintainer[msg.sender] = true; //for truffle deployment\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 229,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<_maintainers.length; i++) {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 230,
          "vulnerability_to_line": null,
          "vulnerability_code": "            isMaintainer[_maintainers[i]] = true;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 231,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 230,
          "vulnerability_to_line": null,
          "vulnerability_code": "            isMaintainer[_maintainers[i]] = true;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 331,
          "vulnerability_to_line": null,
          "vulnerability_code": "            isMaintainer[_maintainers[i]] = true;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 349,
          "vulnerability_to_line": null,
          "vulnerability_code": "            isMaintainer[_maintainers[i]] = false;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 229,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<_maintainers.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 330,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<numberOfMaintainers; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 348,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<numberOfMaintainers; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 229,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<_maintainers.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 330,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<numberOfMaintainers; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 348,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<numberOfMaintainers; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_26"
      ],
      "vulnerability_findings": [
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 140,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ITwoKeySingletonesRegistry internal registry;\n",
          "message": "UpgradeabilityStorage.registry (TwoKeyPlasmaSingletoneRegistry.sol#140) is never initialized. It is used in:\n\t- initialize (TwoKeyPlasmaSingletoneRegistry.sol#195-197)\n"
        },
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address internal _implementation;\n",
          "message": "UpgradeabilityStorage._implementation (TwoKeyPlasmaSingletoneRegistry.sol#143) is never initialized. It is used in:\n\t- implementation (TwoKeyPlasmaSingletoneRegistry.sol#149-151)\n"
        },
        {
          "name": "locked-ether",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": 127,
          "vulnerability_code": "    function () payable public {\n\n        address _impl = implementation();\n\n        require(_impl != address(0));\n\n\n\n        assembly {\n\n            let ptr := mload(0x40)\n\n            calldatacopy(ptr, 0, calldatasize)\n\n            let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\n\n            let size := returndatasize\n\n            returndatacopy(ptr, 0, size)\n\n\n\n            switch result\n\n            case 0 { revert(ptr, size) }\n\n            default { return(ptr, size) }\n\n        }\n",
          "message": "Contract locking ether found in TwoKeyPlasmaSingletoneRegistry.sol:\n\tContract UpgradeabilityProxy has payable functions:\n\t - fallback (TwoKeyPlasmaSingletoneRegistry.sol#112-127)\n\tBut does not have a function to withdraw the ether\n"
        },
        {
          "name": "locked-ether",
          "vulnerability_from_line": 195,
          "vulnerability_to_line": 197,
          "vulnerability_code": "    function initialize(address sender) public payable {\n\n        require(msg.sender == address(registry));\n",
          "message": "Contract locking ether found in TwoKeyPlasmaSingletoneRegistry.sol:\n\tContract Upgradeable has payable functions:\n\t - initialize (TwoKeyPlasmaSingletoneRegistry.sol#195-197)\n\tBut does not have a function to withdraw the ether\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": 127,
          "vulnerability_code": "    function () payable public {\n\n        address _impl = implementation();\n\n        require(_impl != address(0));\n\n\n\n        assembly {\n\n            let ptr := mload(0x40)\n\n            calldatacopy(ptr, 0, calldatasize)\n\n            let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\n\n            let size := returndatasize\n\n            returndatacopy(ptr, 0, size)\n\n\n\n            switch result\n\n            case 0 { revert(ptr, size) }\n\n            default { return(ptr, size) }\n\n        }\n",
          "message": "Proxy.fallback uses assembly (TwoKeyPlasmaSingletoneRegistry.sol#112-127)\n\t- TwoKeyPlasmaSingletoneRegistry.sol#116-127\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 214,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address public deployer;\n",
          "message": "TwoKeyPlasmaSingletoneRegistry.deployer should be constant (TwoKeyPlasmaSingletoneRegistry.sol#214)\n"
        },
        {
          "name": "pragma",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": "Different versions of Solidity is used in TwoKeyPlasmaSingletoneRegistry.sol:\n\t- Version used: ['^0.4.0', '^0.4.18', '^0.4.24']\n\t- TwoKeyPlasmaSingletoneRegistry.sol#3 declares pragma solidity^0.4.24\n\t- TwoKeyPlasmaSingletoneRegistry.sol#43 declares pragma solidity^0.4.0\n\t- TwoKeyPlasmaSingletoneRegistry.sol#94 declares pragma solidity^0.4.24\n\t- TwoKeyPlasmaSingletoneRegistry.sol#132 declares pragma solidity^0.4.24\n\t- TwoKeyPlasmaSingletoneRegistry.sol#156 declares pragma solidity^0.4.18\n\t- TwoKeyPlasmaSingletoneRegistry.sol#188 declares pragma solidity^0.4.24\n\t- TwoKeyPlasmaSingletoneRegistry.sol#202 declares pragma solidity^0.4.24\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addVersion(string _contractName, string version, address implementation) public;\n",
          "message": "ITwoKeySingletonesRegistry.addVersion (TwoKeyPlasmaSingletoneRegistry.sol#30) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 244,
          "vulnerability_to_line": 249,
          "vulnerability_code": "    function addVersion(string contractName, string version, address implementation) public onlyMaintainer {\n\n        require(versions[contractName][version] == 0x0);\n\n        versions[contractName][version] = implementation;\n\n        contractNameToLatestVersionName[contractName] = version;\n\n        emit VersionAdded(version, implementation);\n",
          "message": "TwoKeyPlasmaSingletoneRegistry.addVersion (TwoKeyPlasmaSingletoneRegistry.sol#244-249) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": 127,
          "vulnerability_code": "    function () payable public {\n\n        address _impl = implementation();\n\n        require(_impl != address(0));\n\n\n\n        assembly {\n\n            let ptr := mload(0x40)\n\n            calldatacopy(ptr, 0, calldatasize)\n\n            let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\n\n            let size := returndatasize\n\n            returndatacopy(ptr, 0, size)\n\n\n\n            switch result\n\n            case 0 { revert(ptr, size) }\n\n            default { return(ptr, size) }\n\n        }\n",
          "message": "Proxy.fallback (TwoKeyPlasmaSingletoneRegistry.sol#112-127) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 179,
          "vulnerability_to_line": 182,
          "vulnerability_code": "    function upgradeTo(string _contractName, string _version, address _impl) public {\n\n        require(msg.sender == address(registry));\n\n        _implementation = _impl;\n",
          "message": "UpgradeabilityProxy.upgradeTo (TwoKeyPlasmaSingletoneRegistry.sol#179-182) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 195,
          "vulnerability_to_line": 197,
          "vulnerability_code": "    function initialize(address sender) public payable {\n\n        require(msg.sender == address(registry));\n",
          "message": "Upgradeable.initialize (TwoKeyPlasmaSingletoneRegistry.sol#195-197) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 265,
          "vulnerability_to_line": 267,
          "vulnerability_code": "    function getLatestContractVersion(string contractName) public view returns (string) {\n\n        return contractNameToLatestVersionName[contractName];\n",
          "message": "TwoKeyPlasmaSingletoneRegistry.getLatestContractVersion (TwoKeyPlasmaSingletoneRegistry.sol#265-267) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": 307,
          "vulnerability_code": "    function createProxy(\n\n        string contractName,\n\n        string contractNameStorage,\n\n        string version\n\n    )\n\n    public\n\n    onlyMaintainer\n\n    {\n\n        address logicProxy = deployProxy(contractName, version);\n\n        address storageProxy = deployProxy(contractNameStorage, version);\n\n\n\n        IStructuredStorage(storageProxy).setProxyLogicContractAndDeployer(logicProxy, msg.sender);\n\n        emit ProxiesDeployed(logicProxy, storageProxy);\n",
          "message": "TwoKeyPlasmaSingletoneRegistry.createProxy (TwoKeyPlasmaSingletoneRegistry.sol#294-307) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 309,
          "vulnerability_to_line": 320,
          "vulnerability_code": "    function upgradeContract(\n\n        string contractName,\n\n        string version\n\n    )\n\n    public\n\n    onlyMaintainer\n\n        //TODO: Change to deployer\n\n    {\n\n        address proxyAddress = getContractProxyAddress(contractName);\n\n        address _impl = getVersion(contractName, version);\n\n        UpgradeabilityProxy(proxyAddress).upgradeTo(contractName, version, _impl);\n",
          "message": "TwoKeyPlasmaSingletoneRegistry.upgradeContract (TwoKeyPlasmaSingletoneRegistry.sol#309-320) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 322,
          "vulnerability_to_line": 333,
          "vulnerability_code": "    function addMaintainers(\n\n        address [] _maintainers\n\n    )\n\n    public\n\n    onlyMaintainer\n\n    {\n\n        //If state variable, .balance, or .length is used several times, holding its value in a local variable is more gas efficient.\n\n        uint numberOfMaintainers = _maintainers.length;\n\n        for(uint i=0; i<numberOfMaintainers; i++) {\n\n            isMaintainer[_maintainers[i]] = true;\n\n        }\n",
          "message": "TwoKeyPlasmaSingletoneRegistry.addMaintainers (TwoKeyPlasmaSingletoneRegistry.sol#322-333) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 340,
          "vulnerability_to_line": 351,
          "vulnerability_code": "    function removeMaintainers(\n\n        address [] _maintainers\n\n    )\n\n    public\n\n    onlyMaintainer\n\n    {\n\n        //If state variable, .balance, or .length is used several times, holding its value in a local variable is more gas efficient.\n\n        uint numberOfMaintainers = _maintainers.length;\n\n        for(uint i=0; i<numberOfMaintainers; i++) {\n\n            isMaintainer[_maintainers[i]] = false;\n\n        }\n",
          "message": "TwoKeyPlasmaSingletoneRegistry.removeMaintainers (TwoKeyPlasmaSingletoneRegistry.sol#340-351) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;\n",
          "message": "Detected issues with version pragma in TwoKeyPlasmaSingletoneRegistry.sol:\n\t- pragma solidity^0.4.0 (TwoKeyPlasmaSingletoneRegistry.sol#43): it allows old versions\n\t- pragma solidity^0.4.18 (TwoKeyPlasmaSingletoneRegistry.sol#156): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address internal _implementation;\n",
          "message": "Variable 'UpgradeabilityStorage._implementation' (TwoKeyPlasmaSingletoneRegistry.sol#143) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 170,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (string _contractName, string _version) public {\n",
          "message": "Parameter '_contractName' of UpgradeabilityProxy. (TwoKeyPlasmaSingletoneRegistry.sol#170) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 170,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (string _contractName, string _version) public {\n",
          "message": "Parameter '_version' of UpgradeabilityProxy. (TwoKeyPlasmaSingletoneRegistry.sol#170) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 179,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function upgradeTo(string _contractName, string _version, address _impl) public {\n",
          "message": "Parameter '_impl' of UpgradeabilityProxy.upgradeTo (TwoKeyPlasmaSingletoneRegistry.sol#179) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 227,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address [] _maintainers, address _twoKeyAdmin) public {\n",
          "message": "Parameter '_maintainers' of TwoKeyPlasmaSingletoneRegistry. (TwoKeyPlasmaSingletoneRegistry.sol#227) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 274,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getContractProxyAddress(string _contractName) public view returns (address) {\n",
          "message": "Parameter '_contractName' of TwoKeyPlasmaSingletoneRegistry.getContractProxyAddress (TwoKeyPlasmaSingletoneRegistry.sol#274) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 323,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address [] _maintainers\n",
          "message": "Parameter '_maintainers' of TwoKeyPlasmaSingletoneRegistry.addMaintainers (TwoKeyPlasmaSingletoneRegistry.sol#323) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 341,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address [] _maintainers\n",
          "message": "Parameter '_maintainers' of TwoKeyPlasmaSingletoneRegistry.removeMaintainers (TwoKeyPlasmaSingletoneRegistry.sol#341) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 229,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<_maintainers.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 229,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<_maintainers.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 330,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<numberOfMaintainers; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 348,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i=0; i<numberOfMaintainers; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 100,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Proxy {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Upgradeable is UpgradeabilityStorage {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 132,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 156,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 188,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 202,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function () payable public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addVersion(string _contractName, string version, address implementation) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addVersion(string _contractName, string version, address implementation) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getVersion(string _contractName, string version) public view returns (address);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getVersion(string _contractName, string version) public view returns (address);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 170,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (string _contractName, string _version) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 170,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (string _contractName, string _version) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 179,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function upgradeTo(string _contractName, string _version, address _impl) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 179,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function upgradeTo(string _contractName, string _version, address _impl) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 227,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address [] _maintainers, address _twoKeyAdmin) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 244,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addVersion(string contractName, string version, address implementation) public onlyMaintainer {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 244,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addVersion(string contractName, string version, address implementation) public onlyMaintainer {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 256,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getVersion(string contractName, string version) public view returns (address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 256,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getVersion(string contractName, string version) public view returns (address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 265,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getLatestContractVersion(string contractName) public view returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 265,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getLatestContractVersion(string contractName) public view returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 274,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getContractProxyAddress(string _contractName) public view returns (address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 279,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string contractName,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 280,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string version\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string contractName,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 296,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string contractNameStorage,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 297,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string version\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 310,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string contractName,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 311,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string version\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 323,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address [] _maintainers\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 341,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address [] _maintainers\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addVersion(string _contractName, string version, address implementation) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getVersion(string _contractName, string version) public view returns (address);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (string => address) contractToProxy;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 218,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (string => string) contractNameToLatestVersionName;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 322,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMaintainers(\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 179,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function upgradeTo(string _contractName, string _version, address _impl) public {\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_KILL_OOM"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [
        "SYMBOLIC EXECUTION TIMEOUT"
      ],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 305,
          "vulnerability_to_line": null,
          "vulnerability_code": "        IStructuredStorage(storageProxy).setProxyLogicContractAndDeployer(logicProxy, msg.sender);\n",
          "message": null
        }
      ]
    }
  }
}