pragma solidity ^0.4.24;




contract ITwoKeySingletoneRegistryFetchAddress {
    function getContractProxyAddress(string _contractName) public view returns (address);
    function getNonUpgradableContractAddress(string contractName) public view returns (address);
    function getLatestContractVersion(string contractName) public view returns (string);
}



pragma solidity ^0.4.0;

contract IStructuredStorage {

    function setProxyLogicContractAndDeployer(address _proxyLogicContract, address _deployer) external;
    function setProxyLogicContract(address _proxyLogicContract) external;

    
    function getUint(bytes32 _key) external view returns(uint);
    function getString(bytes32 _key) external view returns(string);
    function getAddress(bytes32 _key) external view returns(address);
    function getBytes(bytes32 _key) external view returns(bytes);
    function getBool(bytes32 _key) external view returns(bool);
    function getInt(bytes32 _key) external view returns(int);
    function getBytes32(bytes32 _key) external view returns(bytes32);

    
    function getBytes32Array(bytes32 _key) external view returns (bytes32[]);
    function getAddressArray(bytes32 _key) external view returns (address[]);
    function getUintArray(bytes32 _key) external view returns (uint[]);
    function getIntArray(bytes32 _key) external view returns (int[]);
    function getBoolArray(bytes32 _key) external view returns (bool[]);

    
    function setUint(bytes32 _key, uint _value) external;
    function setString(bytes32 _key, string _value) external;
    function setAddress(bytes32 _key, address _value) external;
    function setBytes(bytes32 _key, bytes _value) external;
    function setBool(bytes32 _key, bool _value) external;
    function setInt(bytes32 _key, int _value) external;
    function setBytes32(bytes32 _key, bytes32 _value) external;

    
    function setBytes32Array(bytes32 _key, bytes32[] _value) external;
    function setAddressArray(bytes32 _key, address[] _value) external;
    function setUintArray(bytes32 _key, uint[] _value) external;
    function setIntArray(bytes32 _key, int[] _value) external;
    function setBoolArray(bytes32 _key, bool[] _value) external;

    
    function deleteUint(bytes32 _key) external;
    function deleteString(bytes32 _key) external;
    function deleteAddress(bytes32 _key) external;
    function deleteBytes(bytes32 _key) external;
    function deleteBool(bytes32 _key) external;
    function deleteInt(bytes32 _key) external;
    function deleteBytes32(bytes32 _key) external;
}



pragma solidity ^0.4.24;

contract ITwoKeyMaintainersRegistryStorage is IStructuredStorage {

}



pragma solidity ^0.4.24;





interface ITwoKeySingletonesRegistry {

    



    event ProxyCreated(address proxy);


    




    event VersionAdded(string version, address implementation);

    




    function addVersion(string _contractName, string version, address implementation) public;

    





    function getVersion(string _contractName, string version) public view returns (address);
}



pragma solidity ^0.4.24;





contract UpgradeabilityStorage {
    
    ITwoKeySingletonesRegistry internal registry;

    
    address internal _implementation;

    



    function implementation() public view returns (address) {
        return _implementation;
    }
}



pragma solidity ^0.4.24;

// This code snippet does not contain the beginMigration() function directly.
// However, based on the provided context and considering the vulnerability identified (SOLIDITY_LOCKED_MONEY),
// a hypothetical beginMigration() function might look like this with an added functionality to 
// prevent the contract from locking funds.

pragma solidity ^0.4.24;

contract Upgradeable is UpgradeabilityStorage {
    // Adding a hypothetical `beginMigration` function to demonstrate a fix for SOLIDITY_LOCKED_MONEY vulnerability.
    // This function would typically be used to prepare the contract for an upgrade or migration to a new version,
    // ensuring that funds are not locked in the contract unintentionally.

    // Assuming the contract's logic allows it, the migration function could ensure all funds are either
    // transferred out or properly managed before a migration process begins, to mitigate the risk of
    // locking funds. Without knowing the full contract's context, here's a generic safeguard approach.

    address public owner;

    function beginMigration(address _newAddress) public {
        require(msg.sender == owner, "Only the contract owner can begin the migration.");

        // Logic to transfer out any contract balance or manage funds before migration.
        // Example: Transferring contract's balance to a designated owner or new contract address.
        uint256 contractBalance = address(this).balance;
        if (contractBalance > 0) {
            _newAddress.transfer(contractBalance);
        }

        // Additional migration logic below
        // ...
    }

    // Constructor or initializer where the `owner` is set, for completeness of this snippet.
    function initialize(address _owner) public payable {
        require(!initialized, "Contract is already initialized.");
        owner = _owner;
        initialized = true; // Ensure this is part of the contract's state variables.
    }

    // Ensure there's a fallback function or a way to receive funds if the contract is meant to hold funds.
    function() public payable {
    }
}



pragma solidity ^0.4.24;









contract TwoKeyMaintainersRegistry is Upgradeable {
    


    bool initialized;

    address public TWO_KEY_SINGLETON_REGISTRY;

    ITwoKeyMaintainersRegistryStorage public PROXY_STORAGE_CONTRACT;

    



    function setInitialParams(
        address _twoKeySingletonRegistry,
        address _proxyStorage,
        address [] _maintainers
    )
    public
    {
        require(initialized == false);


        TWO_KEY_SINGLETON_REGISTRY = _twoKeySingletonRegistry;

        PROXY_STORAGE_CONTRACT = ITwoKeyMaintainersRegistryStorage(_proxyStorage);


        
        addMaintainer(msg.sender);

        
        for(uint i=0; i<_maintainers.length; i++) {
            addMaintainer(_maintainers[i]);
        }

        
        initialized = true;
    }


    


    function onlyTwoKeyAdmin(address sender) public view returns (bool) {
        address twoKeyAdmin = getAddressFromTwoKeySingletonRegistry("TwoKeyAdmin");
        require(sender == address(twoKeyAdmin));
        return true;
    }

    function onlyMaintainer(address _sender) public view returns (bool) {
        return isMaintainer(_sender);
    }

    




    function addMaintainers(
        address [] _maintainers
    )
    public
    {
        require(onlyTwoKeyAdmin(msg.sender) == true);
        
        uint numberOfMaintainers = _maintainers.length;
        
        for(uint i=0; i<numberOfMaintainers; i++) {
            addMaintainer(_maintainers[i]);
        }
    }

    




    function removeMaintainers(
        address [] _maintainers
    )
    public
    {
        require(onlyTwoKeyAdmin(msg.sender) == true);
        
        uint numberOfMaintainers = _maintainers.length;
        
        for(uint i=0; i<numberOfMaintainers; i++) {

            removeMaintainer(_maintainers[i]);
        }
    }


    function isMaintainer(
        address _address
    )
    internal
    view
    returns (bool)
    {
        bytes32 keyHash = keccak256("isMaintainer", _address);
        return PROXY_STORAGE_CONTRACT.getBool(keyHash);
    }

    function addMaintainer(
        address _maintainer
    )
    internal
    {
        bytes32 keyHash = keccak256("isMaintainer", _maintainer);
        PROXY_STORAGE_CONTRACT.setBool(keyHash, true);
    }

    function removeMaintainer(
        address _maintainer
    )
    internal
    {
        bytes32 keyHash = keccak256("isMaintainer", _maintainer);
        PROXY_STORAGE_CONTRACT.setBool(keyHash, false);
    }

    
    function getAddressFromTwoKeySingletonRegistry(string contractName) internal view returns (address) {
        return ITwoKeySingletoneRegistryFetchAddress(TWO_KEY_SINGLETON_REGISTRY)
        .getContractProxyAddress(contractName);
    }

}