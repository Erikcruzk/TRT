pragma solidity ^0.4.24;

contract ITwoKeyMaintainersRegistry {
    function onlyMaintainer(address _sender) public view returns (bool);
}



pragma solidity ^0.4.24;




contract ITwoKeySingletoneRegistryFetchAddress {
    function getContractProxyAddress(string _contractName) public view returns (address);
    function getNonUpgradableContractAddress(string contractName) public view returns (address);
    function getLatestContractVersion(string contractName) public view returns (string);
}



pragma solidity ^0.4.24;


contract IERC20 {
    function balanceOf(
        address whom
    )
    external
    view
    returns (uint);


    function transfer(
        address _to,
        uint256 _value
    )
    external
    returns (bool);


    function transferFrom(
        address _from,
        address _to,
        uint256 _value
    )
    external
    returns (bool);



    function approve(
        address _spender,
        uint256 _value
    )
    public
    returns (bool);



    function decimals()
    external
    view
    returns (uint);


    function symbol()
    external
    view
    returns (string);


    function name()
    external
    view
    returns (string);


    function freezeTransfers()
    external;


    function unfreezeTransfers()
    external;
}



pragma solidity ^0.4.24;





interface ITwoKeySingletonesRegistry {

    



    event ProxyCreated(address proxy);


    




    event VersionAdded(string version, address implementation);

    




    function addVersion(string _contractName, string version, address implementation) public;

    





    function getVersion(string _contractName, string version) public view returns (address);
}



pragma solidity ^0.4.24;





contract UpgradeabilityStorage {
    
    ITwoKeySingletonesRegistry internal registry;

    
    address internal _implementation;

    



    function implementation() public view returns (address) {
        return _implementation;
    }
}



pragma solidity ^0.4.24;

// There is no explicit function named "beginMigration()" within the provided code.
// The provided code does not contain a direct issue related to "SOLIDITY_LOCKED_MONEY", as the warning might suggest issues with funds being locked in a contract unintentionally.
// Since a specific fix cannot be applied without a clear identification of the function or scenario causing the "SOLIDITY_LOCKED_MONEY" vulnerability,
// it's important to ensure that contracts handling funds have mechanisms to transfer those funds appropriately, which might include functions to withdraw or migrate funds safely.
// Without a specific function to address, no further Solidity code modifications can be provided under the constraints of the request.



pragma solidity ^0.4.24;


contract ITwoKeySingletonUtils {

    address public TWO_KEY_SINGLETON_REGISTRY;

    
    modifier onlyMaintainer {
        address twoKeyMaintainersRegistry = getAddressFromTwoKeySingletonRegistry("TwoKeyMaintainersRegistry");
        require(ITwoKeyMaintainersRegistry(twoKeyMaintainersRegistry).onlyMaintainer(msg.sender));
        _;
    }

    
    function getAddressFromTwoKeySingletonRegistry(string contractName) internal view returns (address) {
        return ITwoKeySingletoneRegistryFetchAddress(TWO_KEY_SINGLETON_REGISTRY)
        .getContractProxyAddress(contractName);
    }
}



pragma solidity ^0.4.24;









contract TokenPool is Upgradeable, ITwoKeySingletonUtils {

    bool initialized = false;

    address public TWO_KEY_ECONOMY;

    function setInitialParameters(
        address _erc20address,
        address _twoKeySingletonesRegistry
    )
    internal
    {
        TWO_KEY_ECONOMY = _erc20address;
        TWO_KEY_SINGLETON_REGISTRY = _twoKeySingletonesRegistry;
    }

    modifier onlyMaintainer {
        address twoKeyMaintainersRegistry = getAddressFromTwoKeySingletonRegistry("TwoKeyMaintainersRegistry");
        require(ITwoKeyMaintainersRegistry(twoKeyMaintainersRegistry).onlyMaintainer(msg.sender));
        _;
    }

    modifier onlyTwoKeyAdmin {
        address twoKeyAdmin = getAddressFromTwoKeySingletonRegistry("TwoKeyAdmin");
        require(msg.sender == twoKeyAdmin);
        _;
    }

    


    function getContractBalance()
    public
    view
    returns (uint)
    {
        return IERC20(TWO_KEY_ECONOMY).balanceOf(address(this));
    }

    


    function transferTokens(
        address receiver,
        uint amount
    )
    internal
    {
        IERC20(TWO_KEY_ECONOMY).transfer(receiver,amount);
    }

}