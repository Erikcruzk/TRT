{
  "smartbugs_completed": "No vulnerabilities found",
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_3"
      ],
      "vulnerability_findings": [
        {
          "name": "constable-states",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address public conversionHandler;\n",
          "message": "ITwoKeyAcquisitionCampaignStateVariables.conversionHandler should be constant (ITwoKeyAcquisitionCampaignStateVariables.sol#25)\nITwoKeyAcquisitionCampaignStateVariables.twoKeyAcquisitionLogicHandler should be constant (ITwoKeyAcquisitionCampaignStateVariables.sol#24)\nITwoKeyCampaignPublicAddresses.contractor should be constant (ITwoKeyAcquisitionCampaignStateVariables.sol#10)\nITwoKeyCampaignPublicAddresses.moderator should be constant (ITwoKeyAcquisitionCampaignStateVariables.sol#11)\nITwoKeyCampaignPublicAddresses.twoKeySingletonesRegistry should be constant (ITwoKeyAcquisitionCampaignStateVariables.sol#9)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function publicLinkKeyOf(address me) public view returns (address);\n",
          "message": "ITwoKeyCampaignPublicAddresses.publicLinkKeyOf (ITwoKeyAcquisitionCampaignStateVariables.sol#12) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getInventoryBalance() public view returns (uint);\n",
          "message": "ITwoKeyAcquisitionCampaignStateVariables.getInventoryBalance (ITwoKeyAcquisitionCampaignStateVariables.sol#27) should be declared external\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "execution failed"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "input files do not contain any valid contracts"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}