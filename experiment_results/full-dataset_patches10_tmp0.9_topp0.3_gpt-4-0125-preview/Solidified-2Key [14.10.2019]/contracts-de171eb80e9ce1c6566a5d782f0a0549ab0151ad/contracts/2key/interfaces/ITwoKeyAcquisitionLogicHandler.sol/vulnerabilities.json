{
  "smartbugs_completed": "No vulnerabilities found",
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_9"
      ],
      "vulnerability_findings": [
        {
          "name": "constable-states",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool public IS_CAMPAIGN_ACTIVE;\n",
          "message": "ITwoKeyAcquisitionLogicHandler.IS_CAMPAIGN_ACTIVE should be constant (ITwoKeyAcquisitionLogicHandler.sol#10)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function checkIsCampaignActive() public view returns (bool);\n",
          "message": "ITwoKeyAcquisitionLogicHandler.checkIsCampaignActive (ITwoKeyAcquisitionLogicHandler.sol#9) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function canConversionBeCreated(address converter, uint amountWillingToSpend, bool isFiat) public view returns (bool);\n",
          "message": "ITwoKeyAcquisitionLogicHandler.canConversionBeCreated (ITwoKeyAcquisitionLogicHandler.sol#11) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getEstimatedTokenAmount(uint conversionAmountETHWei, bool isFiatConversion) public view returns (uint, uint);\n",
          "message": "ITwoKeyAcquisitionLogicHandler.getEstimatedTokenAmount (ITwoKeyAcquisitionLogicHandler.sol#12) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": 17,
          "vulnerability_code": "    function setTwoKeyAcquisitionCampaignContract(\n\n        address _acquisitionCampaignAddress,\n\n        address twoKeySingletoneRegistry,\n",
          "message": "ITwoKeyAcquisitionLogicHandler.setTwoKeyAcquisitionCampaignContract (ITwoKeyAcquisitionLogicHandler.sol#14-17) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getReferrers(address customer, address acquisitionCampaignContract) public view returns (address[]);\n",
          "message": "ITwoKeyAcquisitionLogicHandler.getReferrers (ITwoKeyAcquisitionLogicHandler.sol#19) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function updateRefchainRewards(uint256 _maxReferralRewardETHWei, address _converter, uint _conversionId, uint totalBounty2keys) public;\n",
          "message": "ITwoKeyAcquisitionLogicHandler.updateRefchainRewards (ITwoKeyAcquisitionLogicHandler.sol#20) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getReferrerPlasmaTotalEarnings(address _referrer) public view returns (uint);\n",
          "message": "ITwoKeyAcquisitionLogicHandler.getReferrerPlasmaTotalEarnings (ITwoKeyAcquisitionLogicHandler.sol#21) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool public IS_CAMPAIGN_ACTIVE;\n",
          "message": "Variable 'ITwoKeyAcquisitionLogicHandler.IS_CAMPAIGN_ACTIVE' (ITwoKeyAcquisitionLogicHandler.sol#10) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getReferrers(address customer, address acquisitionCampaignContract) public view returns (address[]);\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "execution failed"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "input files do not contain any valid contracts"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}