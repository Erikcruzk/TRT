{
  "smartbugs_completed": "No vulnerabilities found",
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_4"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": 13,
          "vulnerability_code": "    function supportForCreateConversion(\n\n        address _converterAddress,\n\n        uint _conversionAmount,\n\n        uint _maxReferralRewardETHWei,\n\n        bool _isKYCRequired\n\n    )\n\n    public\n",
          "message": "ITwoKeyDonationConversionHandler.supportForCreateConversion (ITwoKeyDonationConversionHandler.sol#6-13) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 18,
          "vulnerability_code": "    function executeConversion(\n\n        uint _conversionId\n\n    )\n",
          "message": "ITwoKeyDonationConversionHandler.executeConversion (ITwoKeyDonationConversionHandler.sol#15-18) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": 25,
          "vulnerability_code": "    function getAmountConverterSpent(\n\n        address converter\n\n    )\n\n    public\n\n    view\n",
          "message": "ITwoKeyDonationConversionHandler.getAmountConverterSpent (ITwoKeyDonationConversionHandler.sol#20-25) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;\n",
          "message": "Detected issues with version pragma in ITwoKeyDonationConversionHandler.sol:\n\t- pragma solidity^0.4.0 (ITwoKeyDonationConversionHandler.sol#3): it allows old versions\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "execution failed"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "input files do not contain any valid contracts"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}