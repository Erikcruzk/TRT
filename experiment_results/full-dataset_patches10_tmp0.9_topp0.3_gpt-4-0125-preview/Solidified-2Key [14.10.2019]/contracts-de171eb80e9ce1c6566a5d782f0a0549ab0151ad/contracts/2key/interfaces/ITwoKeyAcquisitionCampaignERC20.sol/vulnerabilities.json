{
  "smartbugs_completed": "No vulnerabilities found",
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_13"
      ],
      "vulnerability_findings": [
        {
          "name": "constable-states",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address public conversionHandler;\n",
          "message": "ITwoKeyAcquisitionCampaignERC20.conversionHandler should be constant (ITwoKeyAcquisitionCampaignERC20.sol#8)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function buyTokensAndDistributeReferrerRewards(uint256 _maxReferralRewardETHWei, address _converter, uint _conversionId, bool _isConversionFiat) public returns (uint);\n",
          "message": "ITwoKeyAcquisitionCampaignERC20.buyTokensAndDistributeReferrerRewards (ITwoKeyAcquisitionCampaignERC20.sol#9) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function moveFungibleAsset(address _to, uint256 _amount) public;\n",
          "message": "ITwoKeyAcquisitionCampaignERC20.moveFungibleAsset (ITwoKeyAcquisitionCampaignERC20.sol#10) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function updateContractorProceeds(uint value) public;\n",
          "message": "ITwoKeyAcquisitionCampaignERC20.updateContractorProceeds (ITwoKeyAcquisitionCampaignERC20.sol#11) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function sendBackEthWhenConversionCancelled(address _cancelledConverter, uint _conversionAmount) public;\n",
          "message": "ITwoKeyAcquisitionCampaignERC20.sendBackEthWhenConversionCancelled (ITwoKeyAcquisitionCampaignERC20.sol#12) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function buyTokensForModeratorRewards(uint moderatorFee) public;\n",
          "message": "ITwoKeyAcquisitionCampaignERC20.buyTokensForModeratorRewards (ITwoKeyAcquisitionCampaignERC20.sol#13) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function updateReservedAmountOfTokensIfConversionRejectedOrExecuted(uint value) public;\n",
          "message": "ITwoKeyAcquisitionCampaignERC20.updateReservedAmountOfTokensIfConversionRejectedOrExecuted (ITwoKeyAcquisitionCampaignERC20.sol#14) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getStatistics(address ethereum, address plasma) public view returns (uint,uint,uint,uint);\n",
          "message": "ITwoKeyAcquisitionCampaignERC20.getStatistics (ITwoKeyAcquisitionCampaignERC20.sol#16) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTotalReferrerEarnings(address _referrer, address eth_address) public view returns (uint);\n",
          "message": "ITwoKeyAcquisitionCampaignERC20.getTotalReferrerEarnings (ITwoKeyAcquisitionCampaignERC20.sol#18) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getReferrerPlasmaBalance(address _influencer) public view returns (uint);\n",
          "message": "ITwoKeyAcquisitionCampaignERC20.getReferrerPlasmaBalance (ITwoKeyAcquisitionCampaignERC20.sol#19) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function updateReferrerPlasmaBalance(address _influencer, uint _balance) public;\n",
          "message": "ITwoKeyAcquisitionCampaignERC20.updateReferrerPlasmaBalance (ITwoKeyAcquisitionCampaignERC20.sol#20) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getReferrerCut(address me) public view returns (uint256);\n",
          "message": "ITwoKeyAcquisitionCampaignERC20.getReferrerCut (ITwoKeyAcquisitionCampaignERC20.sol#21) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTotalReferrerEarnings(address _referrer, address eth_address) public view returns (uint);\n",
          "message": "Parameter 'eth_address' of ITwoKeyAcquisitionCampaignERC20.getTotalReferrerEarnings (ITwoKeyAcquisitionCampaignERC20.sol#18) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "execution failed"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "input files do not contain any valid contracts"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}