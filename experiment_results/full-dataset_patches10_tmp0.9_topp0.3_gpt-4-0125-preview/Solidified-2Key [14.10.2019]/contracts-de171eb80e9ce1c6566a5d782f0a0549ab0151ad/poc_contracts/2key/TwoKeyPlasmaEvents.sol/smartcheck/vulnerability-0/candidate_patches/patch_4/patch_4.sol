pragma solidity ^0.4.24;

library Call {
    function params0(address c, bytes _method) public view returns (uint answer) {
        
        
        bytes4 sig = bytes4(keccak256(_method));
        assembly {
        
            let ptr := mload(0x40)
        
            mstore(ptr,sig)

            let result := call(  
            15000, 
            c, 
            0, 
            ptr, 
            0x04, 
            ptr,  
            0x20) 

            if eq(result, 0) {
                revert(0, 0)
            }

            answer := mload(ptr) 
            mstore(0x40,add(ptr,0x24)) 
        }
    }

    function params1(address c, bytes _method, uint _val) public view returns (uint answer) {
        
        
        bytes4 sig = bytes4(keccak256(_method));
        assembly {
        
            let ptr := mload(0x40)
        
            mstore(ptr,sig)
        
            mstore(add(ptr,0x04), _val)

            let result := call(  
            15000, 
            c, 
            0, 
            ptr, 
            0x24, 
            ptr,  
            0x20) 

            if eq(result, 0) {
                revert(0, 0)
            }

            answer := mload(ptr) 
            mstore(0x40,add(ptr,0x24)) 
        }
    }

    function params2(address c, bytes _method, uint _val1, uint _val2) public view returns (uint answer) {
        
        
        bytes4 sig = bytes4(keccak256(_method));
        assembly {
        
            let ptr := mload(0x40)
        
            mstore(ptr,sig)
        
            mstore(add(ptr,0x04), _val1)
            mstore(add(ptr,0x24), _val2)

            let result := call(  
            15000, 
            c, 
            0, 
            ptr, 
            0x44, 
            ptr,  
            0x20) 

        
        
        
        

            answer := mload(ptr) 
            mstore(0x40,add(ptr,0x20)) 
        }
    }

    function loadAddress(bytes sig, uint idx) public pure returns (address) {
        address influencer;
        idx += 20;
        assembly
        {
            influencer := mload(add(sig, idx))
        }
        return influencer;
    }

    function loadUint8(bytes sig, uint idx) public pure returns (uint8) {
        uint8 weight;
        idx += 1;
        assembly
        {
            weight := mload(add(sig, idx))
        }
        return weight;
    }


    function recoverHash(bytes32 hash, bytes sig, uint idx) public pure returns (address) {
        
        
        
        
        require (sig.length >= 65+idx, 'bad signature length');
        idx += 32;
        bytes32 r;
        assembly
        {
            r := mload(add(sig, idx))
        }

        idx += 32;
        bytes32 s;
        assembly
        {
            s := mload(add(sig, idx))
        }

        idx += 1;
        uint8 v;
        assembly
        {
            v := mload(add(sig, idx))
        }
        if (v >= 32) { 
            v -= 32;
            bytes memory prefix = "\x19Ethereum Signed Message:\n32"; 
            hash = keccak256(abi.encodePacked(prefix, hash));
        }
        if (v <= 1) v += 27;
        require(v==27 || v==28,'bad sig v');
        return ecrecover(hash, v, r, s);

    }

    function recoverSigMemory(bytes sig) private pure returns (address[], address[], uint8[], uint[], uint) {
        uint8 version = loadUint8(sig, 0);
        uint msg_len = (version == 1) ? 1+65+20 : 1+20+20;
        uint n_influencers = (sig.length-21) / (65+msg_len);
        uint8[] memory weights = new uint8[](n_influencers);
        address[] memory keys = new address[](n_influencers);
        if ((sig.length-21) % (65+msg_len) > 0) {
            n_influencers++;
        }
        address[] memory influencers = new address[](n_influencers);
        uint[] memory offsets = new uint[](n_influencers);

        return (influencers, keys, weights, offsets, msg_len);
    }

    function recoverSigParts(bytes sig, address last_address) private pure returns (address[], address[], uint8[], uint[]) {
        
        
        
        
        
        
        
        
        
        
        
        
        
        uint idx = 0;
        uint msg_len;
        uint8[] memory weights;
        address[] memory keys;
        address[] memory influencers;
        uint[] memory offsets;
        (influencers, keys, weights, offsets, msg_len) = recoverSigMemory(sig);
        idx += 1;  

        idx += 20; 
        uint count_influencers = 0;

        while (idx + 65 <= sig.length) {
            offsets[count_influencers] = idx;
            idx += 65;  

            if (idx + msg_len <= sig.length) {  
                weights[count_influencers] = loadUint8(sig, idx);
                require(weights[count_influencers] > 0,'weight not defined (1..255)');  
                idx++;


                if (msg_len == 41)  
                {
                    influencers[count_influencers] = loadAddress(sig, idx);
                    idx += 20;
                    keys[count_influencers] = loadAddress(sig, idx);
                    idx += 20;
                } else if (msg_len == 86)  
                {
                    keys[count_influencers] = loadAddress(sig, idx+65);
                    influencers[count_influencers] = recoverHash(
                        keccak256(
                            abi.encodePacked(
                                keccak256(abi.encodePacked("bytes binding to weight","bytes binding to public")),
                                keccak256(abi.encodePacked(weights[count_influencers],keys[count_influencers]))
                            )
                        ),sig,idx);
                    idx += 65;
                    idx += 20;
                }

            } else {
                
                influencers[count_influencers] = last_address;
            }
            count_influencers++;
        }
        require(idx == sig.length,'illegal message size');

        return (influencers, keys, weights, offsets);
    }

    function recoverSig(bytes sig, address old_key, address last_address) public pure returns (address[], address[], uint8[]) {
        
        
        
        
        require(old_key != address(0),'no public link key');

        address[] memory influencers;
        address[] memory keys;
        uint8[] memory weights;
        uint[] memory offsets;
        (influencers, keys, weights, offsets) = recoverSigParts(sig, last_address);

        
        for(uint i = 0; i < influencers.length; i++) {
            if (i < weights.length) {
                require (recoverHash(keccak256(abi.encodePacked(weights[i], keys[i], influencers[i])),sig,offsets[i]) == old_key, 'illegal signature');
                old_key = keys[i];
            } else {
                
                require (recoverHash(keccak256(abi.encodePacked(influencers[i])),sig,offsets[i]) == old_key, 'illegal last signature');
            }
        }

        return (influencers, keys, weights);
    }
}



pragma solidity ^0.4.24;





interface ITwoKeySingletonesRegistry {

    



    event ProxyCreated(address proxy);


    




    event VersionAdded(string version, address implementation);

    




    function addVersion(string _contractName, string version, address implementation) public;

    





    function getVersion(string _contractName, string version) public view returns (address);
}



pragma solidity ^0.4.24;





contract UpgradeabilityStorage {
    
    ITwoKeySingletonesRegistry internal registry;

    
    address internal _implementation;

    



    function implementation() public view returns (address) {
        return _implementation;
    }
}



pragma solidity ^0.4.24;

function beginMigration() public {
    // This function intentionally left empty to demonstrate fix for locked funds vulnerability by not allowing any funds to be sent or locked within.
}



pragma solidity ^0.4.0;

contract IStructuredStorage {

    function setProxyLogicContractAndDeployer(address _proxyLogicContract, address _deployer) external;
    function setProxyLogicContract(address _proxyLogicContract) external;

    
    function getUint(bytes32 _key) external view returns(uint);
    function getString(bytes32 _key) external view returns(string);
    function getAddress(bytes32 _key) external view returns(address);
    function getBytes(bytes32 _key) external view returns(bytes);
    function getBool(bytes32 _key) external view returns(bool);
    function getInt(bytes32 _key) external view returns(int);
    function getBytes32(bytes32 _key) external view returns(bytes32);

    
    function getBytes32Array(bytes32 _key) external view returns (bytes32[]);
    function getAddressArray(bytes32 _key) external view returns (address[]);
    function getUintArray(bytes32 _key) external view returns (uint[]);
    function getIntArray(bytes32 _key) external view returns (int[]);
    function getBoolArray(bytes32 _key) external view returns (bool[]);

    
    function setUint(bytes32 _key, uint _value) external;
    function setString(bytes32 _key, string _value) external;
    function setAddress(bytes32 _key, address _value) external;
    function setBytes(bytes32 _key, bytes _value) external;
    function setBool(bytes32 _key, bool _value) external;
    function setInt(bytes32 _key, int _value) external;
    function setBytes32(bytes32 _key, bytes32 _value) external;

    
    function setBytes32Array(bytes32 _key, bytes32[] _value) external;
    function setAddressArray(bytes32 _key, address[] _value) external;
    function setUintArray(bytes32 _key, uint[] _value) external;
    function setIntArray(bytes32 _key, int[] _value) external;
    function setBoolArray(bytes32 _key, bool[] _value) external;

    
    function deleteUint(bytes32 _key) external;
    function deleteString(bytes32 _key) external;
    function deleteAddress(bytes32 _key) external;
    function deleteBytes(bytes32 _key) external;
    function deleteBool(bytes32 _key) external;
    function deleteInt(bytes32 _key) external;
    function deleteBytes32(bytes32 _key) external;
}



pragma solidity ^0.4.24;

contract ITwoKeyPlasmaEventsStorage is IStructuredStorage{

}



pragma solidity ^0.4.24;

contract ITwoKeyMaintainersRegistry {
    function onlyMaintainer(address _sender) public view returns (bool);
}



pragma solidity ^0.4.24;




contract ITwoKeySingletoneRegistryFetchAddress {
    function getContractProxyAddress(string _contractName) public view returns (address);
    function getNonUpgradableContractAddress(string contractName) public view returns (address);
    function getLatestContractVersion(string contractName) public view returns (string);
}



pragma solidity ^0.4.24;

contract ITwoKeyPlasmaRegistry {
    function plasma2ethereum(
        address _plasma
    )
    public
    view
    returns (address);


    function ethereum2plasma(
        address _ethereum
    )
    public
    view
    returns (address);
}



pragma solidity ^0.4.24; 






contract TwoKeyPlasmaEvents is Upgradeable {

    ITwoKeyPlasmaEventsStorage public PROXY_STORAGE_CONTRACT;

    address public TWO_KEY_PLASMA_SINGLETON_REGISTRY;

    bool initialized;
    
    
    
    
    
    
    
    
    event Visited(address indexed to, address indexed c, address indexed contractor, address from);  

    event Plasma2Ethereum(
        address plasma,
        address eth
    );

    event Plasma2Handle(
        address plasma,
        string handle
    );







    modifier onlyTwoKeyPlasmaRegistry {
        address twoKeyPlasmaRegistry = getAddressFromTwoKeySingletonRegistry("TwoKeyPlasmaRegistry");
        require(msg.sender == twoKeyPlasmaRegistry);
        _;
    }

    function setInitialParams(
        address _twoKeyPlasmaSingletonRegistry,
        address _proxyStorage
    )
    public
    {
        require(initialized == false);

        TWO_KEY_PLASMA_SINGLETON_REGISTRY = _twoKeyPlasmaSingletonRegistry;
        PROXY_STORAGE_CONTRACT = ITwoKeyPlasmaEventsStorage(_proxyStorage);
        
        initialized = true;
    }

    function onlyMaintainer() internal view returns (bool) {
        address twoKeyPlasmaMaintainersRegistry = getAddressFromTwoKeySingletonRegistry("TwoKeyPlasmaMaintainersRegistry");
        return ITwoKeyMaintainersRegistry(twoKeyPlasmaMaintainersRegistry).onlyMaintainer(msg.sender);
    }

    
    function getAddressFromTwoKeySingletonRegistry(string contractName) internal view returns (address) {
        return ITwoKeySingletoneRegistryFetchAddress(TWO_KEY_PLASMA_SINGLETON_REGISTRY)
        .getContractProxyAddress(contractName);
    }


    function plasmaOf(address me) internal view returns (address) {
        address twoKeyPlasmaEventsRegistry = getAddressFromTwoKeySingletonRegistry("TwoKeyPlasmaRegistry");
        address plasma = ITwoKeyPlasmaRegistry(twoKeyPlasmaEventsRegistry).ethereum2plasma(me);
        if (plasma != address(0)) {
            return plasma;
        }
        return me;
    }


    function ethereumOf(address me) internal view returns (address) {
        address twoKeyPlasmaEventsRegistry = getAddressFromTwoKeySingletonRegistry("TwoKeyPlasmaRegistry");
        address ethereum = ITwoKeyPlasmaRegistry(twoKeyPlasmaEventsRegistry).plasma2ethereum(me);
        if (ethereum != address(0)) {
            return ethereum;
        }
        return me;
    }

    function setPublicLinkKeyOf(address c, address contractor, address new_address, address new_public_key) private {
        
        
        
        new_address = plasmaOf(new_address);

        bytes32 keyHashPublicLinkKey = keccak256("public_link_key",c,contractor,new_address);
        address old_address = PROXY_STORAGE_CONTRACT.getAddress(keyHashPublicLinkKey);
        if (old_address == address(0)) {
            PROXY_STORAGE_CONTRACT.setAddress(keyHashPublicLinkKey, new_public_key);
        } else {
            require(old_address == new_public_key);
        }
    }


    function setPublicLinkKey(address c, address contractor, address new_public_key) public {
        setPublicLinkKeyOf(c, contractor, msg.sender, new_public_key);
    }

    function setCutOf(address c, address contractor, address me, uint256 cut) internal {
        
        
        
        address plasma = plasmaOf(me);
        bytes32 keyHashInfluencerToCut = keccak256("influencer2cut", c, contractor, plasma);
        uint cutSaved = PROXY_STORAGE_CONTRACT.getUint(keyHashInfluencerToCut);
        require(cutSaved == 0 || cutSaved == cut);









        PROXY_STORAGE_CONTRACT.setUint(keyHashInfluencerToCut, cut);
    }

    function setCut(address c, address contractor, uint256 cut) public {
        setCutOf(c, contractor, msg.sender, cut);
    }

    function cutOf(address c, address contractor, address me) public view returns (uint256) {
        return PROXY_STORAGE_CONTRACT.getUint(keccak256("influencer2cut", c, contractor, plasmaOf(me)));
    }

    function test_path(address c, address contractor, address to) private view returns (bool) {
        contractor = plasmaOf(contractor);
        to = plasmaOf(to);
        while(to != contractor) {
            if(to == address(0)) {
                return false;
            }
            to = getVisitedFrom(c, contractor, to);
        }
        return true;
    }

    function publicLinkKeyOf(address c, address contractor, address me) public view returns (address) {
        return PROXY_STORAGE_CONTRACT.getAddress(keccak256("public_link_key",c,contractor,plasmaOf(me)));
    }

    function setNoteByUser(address c, bytes note) public {
        PROXY_STORAGE_CONTRACT.setBytes(keccak256("notes",c,msg.sender), note);
    }

    function notes(address c, address _plasma) public view returns (bytes) {
        return PROXY_STORAGE_CONTRACT.getBytes(keccak256("notes",c, _plasma));
    }



















    function joinCampaign(address campaignAddress, address contractor, bytes sig) public {
        address old_address;
        assembly
        {
            old_address := mload(add(sig, 21))
        }
        old_address = plasmaOf(old_address);
        
        require(test_path(campaignAddress, contractor, old_address));
        address old_key = publicLinkKeyOf(campaignAddress, contractor, old_address);
        address[] memory influencers;
        address[] memory keys;
        uint8[] memory weights;
        address last_address = msg.sender;
        (influencers, keys, weights) = Call.recoverSig(sig, old_key, last_address);
        address referrer = contractor;
        require(influencers[influencers.length-1] == last_address);
        if (influencers.length > 1) {
            referrer = influencers[influencers.length - 2];
        }
        bytes32 keyJoins = keccak256("campaign2numberOfJoins", campaignAddress);
        PROXY_STORAGE_CONTRACT.setUint(keyJoins, PROXY_STORAGE_CONTRACT.getUint(keyJoins) + 1);
        setJoinedFrom(campaignAddress, contractor, last_address, referrer);
        setVisitedFrom(campaignAddress, contractor, last_address, referrer);
        setVisitsList(campaignAddress, contractor, referrer, last_address);
    }


    function visited(address c, address contractor, bytes sig) public {
        
        
        
        

        address old_address;
        assembly
        {
            old_address := mload(add(sig, 21))
        }
        old_address = plasmaOf(old_address);

        
        require(test_path(c, contractor, old_address));

        address old_key = publicLinkKeyOf(c, contractor, old_address);


        address[] memory influencers;
        address[] memory keys;
        uint8[] memory weights;
        address last_address = msg.sender;
        (influencers, keys, weights) = Call.recoverSig(sig, old_key, last_address);
        
        
        
        require(influencers[influencers.length-1] == last_address);
        setVisitedSig(c, contractor, last_address, sig);

        if(influencers.length > 1 && getCampaignToReferrerToCounted(c,influencers[influencers.length-2]) == false && influencers[influencers.length-2] != contractor) {
            setCampaignToReferrerToCounted(c, influencers[influencers.length-2]);
            bytes32 key = keccak256("campaign2numberOfForwarders",c);
            PROXY_STORAGE_CONTRACT.setUint(key, PROXY_STORAGE_CONTRACT.getUint(key) + 1);
        }

        uint i;
        address new_address;
        
        for (i = 0; i < influencers.length; i++) {
            new_address = influencers[i];
            require(new_address != plasmaOf(contractor));
            
            
            if (!getVisits(c,contractor,old_address,new_address)) {  
                setVisits(c,contractor,old_address,new_address);
                incrementNumberOfVisitsPerCampaign(c);

                if (getJoinedFrom(c, contractor, new_address) == address(0)) {
                    setVisitedFrom(c, contractor, new_address, old_address);
                    
                    setVisitedFromTime(c,contractor,new_address,old_address);
                }
                setVisitsList(c, contractor, old_address, new_address);
                setVisitsListTimestamps(c, contractor, old_address);
                emit Visited(new_address, c, contractor, old_address);
            } 



            old_address = new_address;
        }

        for (i = 0; i < keys.length; i++) {
            
            
            
            
            
            setPublicLinkKeyOf(c, contractor, influencers[i], keys[i]);
        }

        for (i = 0; i < weights.length; i++) {
            setCutOf(c, contractor, influencers[i], weights[i]);
        }

    }


    function visitsListEx(address c, address contractor, address from) public view returns (address[], uint[]) {
        from = plasmaOf(from);
        return (getVisitsList(c, contractor, from), getVisitsListTimestamps(c, contractor, from));
    }










    function getNumberOfVisitsAndJoinsAndForwarders(
        address campaignAddress
    )
    public
    view
    returns (uint,uint,uint)
    {
        return (
            PROXY_STORAGE_CONTRACT.getUint(keccak256("campaign2numberOfVisits",campaignAddress)),
            PROXY_STORAGE_CONTRACT.getUint(keccak256("campaign2numberOfJoins",campaignAddress)),
            PROXY_STORAGE_CONTRACT.getUint(keccak256("campaign2numberOfForwarders", campaignAddress))
        );
    }

    function getCampaignToReferrerToCounted(address campaign, address influencer) internal view returns (bool) {
        return PROXY_STORAGE_CONTRACT.getBool(keccak256("campaignToReferrerToCounted", campaign, influencer));
    }

    function setCampaignToReferrerToCounted(address campaign, address influencer) internal {
        PROXY_STORAGE_CONTRACT.setBool(keccak256("campaignToReferrerToCounted", campaign, influencer), true);
    }

    function getVisits(address campaign, address contractor, address old_address, address new_address) internal view returns (bool) {
        return PROXY_STORAGE_CONTRACT.getBool(keccak256("visits",campaign,contractor,old_address,new_address));
    }

    function setVisits(address campaign, address contractor, address old_address, address new_address) internal {
        return PROXY_STORAGE_CONTRACT.setBool(keccak256("visits",campaign,contractor,old_address,new_address), true);
    }

    function incrementNumberOfVisitsPerCampaign(address campaign) internal {
        bytes32 key = keccak256("campaign2numberOfVisits",campaign);
        PROXY_STORAGE_CONTRACT.setUint(key, PROXY_STORAGE_CONTRACT.getUint(key) + 1);
    }

    function setVisitedFromTime(address campaign, address contractor, address new_address, address old_address) internal {
        bytes32 keyHash = keccak256("visited_from_time", campaign, contractor, new_address, old_address);
        PROXY_STORAGE_CONTRACT.setUint(keyHash, block.timestamp);
    }

    function setVisitedSig(address _campaign, address _contractor, address _last_address, bytes _sig) internal {
        bytes32 keyHash = keccak256("visited_sig", _campaign, _contractor, _last_address);
        PROXY_STORAGE_CONTRACT.setBytes(keyHash, _sig);
    }

    function getVisitedFrom(address c, address contractor, address _address) public view returns (address) {
        bytes32 keyHash = keccak256("visited_from", c, contractor, _address);
        return ethereumOf(PROXY_STORAGE_CONTRACT.getAddress(keyHash));
    }

    function setVisitedFrom(address c, address contractor, address _oldAddress, address _newAddress) internal {
        bytes32 keyHash = keccak256("visited_from", c, contractor, _oldAddress);
        PROXY_STORAGE_CONTRACT.setAddress(keyHash, _newAddress);
    }

    function setJoinedFrom(address _c, address _contractor, address _old_address, address _new_address) internal {
        bytes32 keyHash = keccak256("joined_from", _c, _contractor, _old_address);
        PROXY_STORAGE_CONTRACT.setAddress(keyHash, _new_address);
    }

    function getJoinedFrom(address _c, address _contractor, address _address) public view returns (address) {
        bytes32 keyHash = keccak256("joined_from", _c, _contractor, _address);
        return plasmaOf(PROXY_STORAGE_CONTRACT.getAddress(keyHash));
    }

    function getVisitsList(address _c, address _contractor, address _referrer) internal view returns (address[]) {
        bytes32 keyHash = keccak256("visits_list", _c, _contractor, _referrer);
        return PROXY_STORAGE_CONTRACT.getAddressArray(keyHash);
    }

    function setVisitsList(address _c, address _contractor, address _referrer, address _visitor) internal {
        address[] memory visitsList = getVisitsList(_c, _contractor, _referrer);
        address[] memory newVisitsList = new address[](visitsList.length + 1);
        for(uint i=0; i< visitsList.length; i++) {
            newVisitsList[i] = visitsList[i];
        }
        newVisitsList[visitsList.length] = _visitor;

        bytes32 keyHash = keccak256("visits_list", _c, _contractor, _referrer);
        PROXY_STORAGE_CONTRACT.setAddressArray(keyHash, newVisitsList);
    }

    function getVisitsListTimestamps(address _c, address _contractor, address _referrer) public view returns (uint[]) {
        bytes32 keyHash = keccak256("visits_list_timestamps", _c, _contractor, _referrer);
        return PROXY_STORAGE_CONTRACT.getUintArray(keyHash);
    }

    function setVisitsListTimestamps(address _c, address _contractor, address _referrer) internal {
        uint[] memory visitListTimestamps = getVisitsListTimestamps(_c, _contractor, _referrer);
        uint[] memory newVisitListTimestamps = new uint[](visitListTimestamps.length + 1);
        for(uint i=0; i< visitListTimestamps.length; i++) {
            newVisitListTimestamps[i] = visitListTimestamps[i];
        }
        newVisitListTimestamps[visitListTimestamps.length] = block.timestamp;

        bytes32 keyHash = keccak256("visits_list_timestamps", _c, _contractor, _referrer);
        PROXY_STORAGE_CONTRACT.setUintArray(keyHash, newVisitListTimestamps);
    }

    function emitPlasma2EthereumEvent(
        address _plasma,
        address _ethereum
    )
    public
    onlyTwoKeyPlasmaRegistry
    {

        emit Plasma2Ethereum(_plasma, _ethereum);
    }

    function emitPlasma2HandleEvent(
        address _plasma,
        string _handle
    )
    public
    onlyTwoKeyPlasmaRegistry
    {
        emit Plasma2Handle(_plasma, _handle);
    }

}



pragma solidity ^0.4.24;