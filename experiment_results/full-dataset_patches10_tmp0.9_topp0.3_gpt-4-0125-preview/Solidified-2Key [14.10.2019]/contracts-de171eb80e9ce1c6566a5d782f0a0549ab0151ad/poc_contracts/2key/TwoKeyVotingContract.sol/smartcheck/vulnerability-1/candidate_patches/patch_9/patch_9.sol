pragma solidity ^0.4.24;






library SafeMath {

  


  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {
    
    
    
    if (_a == 0) {
      return 0;
    }

    c = _a * _b;
    assert(c / _a == _b);
    return c;
  }

  


  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {
    
    
    
    return _a / _b;
  }

  


  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {
    assert(_b <= _a);
    return _a - _b;
  }

  


  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {
    c = _a + _b;
    assert(c >= _a);
    return c;
  }
}



pragma solidity ^0.4.24;









library ECRecovery {

  




  function recover(bytes32 _hash, bytes _sig)
    internal
    pure
    returns (address)
  {
    bytes32 r;
    bytes32 s;
    uint8 v;

    
    if (_sig.length != 65) {
      return (address(0));
    }

    
    
    
    
    assembly {
      r := mload(add(_sig, 32))
      s := mload(add(_sig, 64))
      v := byte(0, mload(add(_sig, 96)))
    }

    
    if (v < 27) {
      v += 27;
    }

    
    if (v != 27 && v != 28) {
      return (address(0));
    } else {
      
      return ecrecover(_hash, v, r, s);
    }
  }

  




  function toEthSignedMessageHash(bytes32 _hash)
    internal
    pure
    returns (bytes32)
  {
    
    
    return keccak256(
      abi.encodePacked("\x19Ethereum Signed Message:\n32", _hash)
    );
  }
}



pragma solidity ^0.4.24;







contract ERC20Basic {
  function totalSupply() public view returns (uint256);
  function balanceOf(address _who) public view returns (uint256);
  function transfer(address _to, uint256 _value) public returns (bool);
  function allowance(address _ocwner, address _spender) public view returns (uint256);
  function approve(address spender, uint tokens) public returns (bool success);
  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);

  event Transfer(address indexed from, address indexed to, uint256 value);
  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
}



pragma solidity ^0.4.24;









contract StandardToken is ERC20Basic {

  using SafeMath for uint256;

  uint256 internal totalSupply_;
  string public name;
  string public symbol;
  uint8 public decimals;

  mapping (address => mapping (address => uint256)) internal allowed;
  mapping(address => uint256) internal balances;


  





  function transferFrom(
    address _from,
    address _to,
    uint256 _value
  )
    public
    returns (bool)
  {
    require(_value <= balances[_from]);
    require(_value <= allowed[_from][msg.sender]);
    require(_to != address(0));

    balances[_from] = balances[_from].sub(_value);
    balances[_to] = balances[_to].add(_value);
    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    emit Transfer(_from, _to, _value);
    return true;
  }

  








  function approve(address _spender, uint256 _value) public returns (bool) {
    allowed[msg.sender][_spender] = _value;
    emit Approval(msg.sender, _spender, _value);
    return true;
  }

  





  function allowance(
    address _owner,
    address _spender
   )
    public
    view
    returns (uint256)
  {
    return allowed[_owner][_spender];
  }

  








  function increaseApproval(
    address _spender,
    uint256 _addedValue
  )
    public
    returns (bool)
  {
    allowed[msg.sender][_spender] = (
      allowed[msg.sender][_spender].add(_addedValue));
    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }

  








  function decreaseApproval(
    address _spender,
    uint256 _subtractedValue
  )
    public
    returns (bool)
  {
    uint256 oldValue = allowed[msg.sender][_spender];
    if (_subtractedValue >= oldValue) {
      allowed[msg.sender][_spender] = 0;
    } else {
      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
    }
    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }

  


  function totalSupply() public view returns (uint256) {
    return totalSupply_;
  }

  




  function transfer(address _to, uint256 _value) public returns (bool) {
    require(_value <= balances[msg.sender]);
    require(_to != address(0));

    balances[msg.sender] = balances[msg.sender].sub(_value);
    balances[_to] = balances[_to].add(_value);
    emit Transfer(msg.sender, _to, _value);
    return true;
  }

  




  function balanceOf(address _owner) public view returns (uint256) {
    return balances[_owner];
  }

}



pragma solidity ^0.4.24;







library GetCode {
    function at(address _addr) internal view returns (bytes o_code) {
        assembly {
        
            let size := extcodesize(_addr)
        
        
            o_code := mload(0x40)
        
            mstore(0x40, add(o_code, and(add(add(size, 0x20), 0x1f), not(0x1f))))
        
            mstore(o_code, size)
        
            extcodecopy(_addr, add(o_code, 0x20), 0, size)
        }
    }
}



pragma solidity ^0.4.24;




contract IERC20 {
    function balanceOf(address who) public view returns (uint256);
    function transfer(address to, uint256 value) public returns (bool);
    function allowance(address owner, address spender) public view returns (uint256);
    function transferFrom(address from, address to, uint256 value) public returns (bool);
    function approve(address spender, uint256 value) public returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


function beginMigration() external onlyOwner {
    require(!migrationStarted);
    migrationStarted = true;
}







pragma solidity ^0.4.24;

  
  event voteCasted(address voter, bytes vote);
  event pollCreated(address creator, uint quorumPercentage, string description, uint votingLength);
  event pollStatusUpdate(bool status);

  
  enum PollStatus { IN_PROGRESS, TALLY, PASSED, REJECTED }

  
  struct Poll {
    address creator;
    PollStatus status;
    uint quorumPercentage;
    uint yeaVotes;
    uint nayVotes;
    string description;
    address[] voters;
    uint expirationTime;
    mapping(address => Voter) voterInfo;
  }

  
  struct Voter {
    bool hasVoted;
    bytes vote;
  }

  
  Poll public polls;
  Enigma public enigma;

  
  constructor(address _token, address _enigma) public {

    require(_enigma != 0 && address(enigma) == 0);
    enigma = Enigma(_enigma);
  }

  

  


  function createPoll(uint _quorumPct, string _description, uint _voteLength) public {
    require(_quorumPct <= 100, "Quorum Percentage must be less than or equal to 100%");
    require(_voteLength > 0, "The voting period cannot be 0.");

    polls.creator = msg.sender;
    polls.status = PollStatus.IN_PROGRESS;
    polls.quorumPercentage = _quorumPct;
    polls.expirationTime = now + _voteLength * 1 seconds;
    polls.description = _description;

    emit pollCreated(msg.sender, _quorumPct, _description, _voteLength);
  }

  


  function endPoll() external  {
    require(msg.sender == polls.creator, "User is not the creator of the poll.");
    require(polls.status == PollStatus.IN_PROGRESS, "Vote is not in progress.");
    require(now >= getPollExpirationTime(), "Voting period has not expired");
    polls.status = PollStatus.TALLY;
  }

  



  function updatePollStatus(uint _yeaVotes, uint _nayVotes) public onlyEnigma() {
    require(getPollStatus() == PollStatus.TALLY, "Poll has not expired yet.");
    polls.yeaVotes = _yeaVotes;
    polls.nayVotes = _nayVotes;

    bool pollStatus = (polls.yeaVotes.mul(100)) > polls.quorumPercentage.mul(polls.yeaVotes.add(polls.nayVotes));
    if (pollStatus) {
      polls.status = PollStatus.PASSED;
    }
    else {
      polls.status = PollStatus.REJECTED;
    }

    emit pollStatusUpdate(pollStatus);
  }

  


  function getPollStatus() public view returns (PollStatus) {
    return polls.status;
  }

  


  function getPollExpirationTime() public view returns (uint) {
    return polls.expirationTime;
  }

  


  function getPollInfoForVoter(address _voter) public view returns (bytes) {
    require(getPollStatus() != PollStatus.IN_PROGRESS);
    require(userHasVoted(_voter));
    return polls.voterInfo[_voter].vote;
  }

  


  function getVotersForPoll() public view returns (address[]) {
    require(getPollStatus() != PollStatus.IN_PROGRESS);
    return polls.voters;
  }

  


  modifier onlyEnigma() {
    require(msg.sender == address(enigma));
    _;
  }

  

  


  function castVote(bytes _encryptedVote) external {
    require(getPollStatus() == PollStatus.IN_PROGRESS, "Poll has expired.");
    require(!userHasVoted(msg.sender), "User has already voted.");
    require(getPollExpirationTime() > now);

    polls.voterInfo[msg.sender] = Voter({
      hasVoted: true,
      vote: _encryptedVote
      });

    polls.voters.push(msg.sender);

    emit voteCasted(msg.sender, _encryptedVote);
  }

  


  function countVotes(uint[] _votes, uint weight) public pure returns (uint, uint) {
    uint yeaVotes;
    uint nayVotes;
    for (uint i = 0; i < _votes.length; i++) {
      if (_votes[i] == 0) nayVotes += weight;
      else if (_votes[i] == 1) yeaVotes += weight;
    }
    return (yeaVotes, nayVotes);
  }

  


  function userHasVoted(address _user) public view returns (bool) {
    return (polls.voterInfo[_user].hasVoted);
  }

}