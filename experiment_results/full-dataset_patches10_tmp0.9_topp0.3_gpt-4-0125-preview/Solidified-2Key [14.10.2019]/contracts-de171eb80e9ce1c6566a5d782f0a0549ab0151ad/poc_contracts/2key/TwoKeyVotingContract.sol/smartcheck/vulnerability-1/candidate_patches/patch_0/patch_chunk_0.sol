function setWorkersParams(uint256 seed, bytes sig)
    public
    workerRegistered(msg.sender)
    returns (ReturnValue)
{
    require(workers[msg.sender].signer == principal, "Only the Principal can update the seed");

    address sigAddr = verifyParamsSig(seed, sig);
    require(sigAddr == principal, "Invalid signature");

    
    
    
    uint ti = 0;
    for (uint pi = 0; pi < workersParams.length; pi++) {
        
        if (workersParams[pi].firstBlockNumber == 0) {
            ti = pi;
            break;
        } else if (workersParams[pi].firstBlockNumber < workersParams[ti].firstBlockNumber) {
            ti = pi;
        }
    }
    workersParams[ti].firstBlockNumber = block.number;
    workersParams[ti].seed = seed;

    
    uint256 workerAddressesLength = workerAddresses.length; // Use a separate variable to store length
    for (uint wi = 0; wi < workerAddressesLength; wi++) {
        if (workerAddresses[wi] != 0x0) {
            workersParams[ti].workerAddresses.push(workerAddresses[wi]); // Change the way to increase the array length by using push method
        }
    }
    emit WorkersParameterized(seed, workerAddresses, true);
    return ReturnValue.Ok;
}