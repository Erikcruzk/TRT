{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 691,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Whitelist is Ownable, RBAC {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 813,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract TokenVesting is Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 930,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract TwoKeyUpgradableExchange is Crowdsale, Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 983,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract  TwoKeyWhitelisted is Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 736,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _operators.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 764,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _operators.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1009,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _beneficiaries.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 191,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_rate > 0);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 192,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_wallet != address(0));\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 193,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_token != address(0));\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 195,
          "vulnerability_to_line": null,
          "vulnerability_code": "    rate = _rate;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 196,
          "vulnerability_to_line": null,
          "vulnerability_code": "    wallet = _wallet;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 197,
          "vulnerability_to_line": null,
          "vulnerability_code": "    token = _token;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 366,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(uint256 _openingTime, uint256 _closingTime) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 367,
          "vulnerability_to_line": null,
          "vulnerability_code": "    // solium-disable-next-line security/no-block-members\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 368,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_openingTime >= block.timestamp);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 369,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_closingTime >= _openingTime);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 370,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 371,
          "vulnerability_to_line": null,
          "vulnerability_code": "    openingTime = _openingTime;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 372,
          "vulnerability_to_line": null,
          "vulnerability_code": "    closingTime = _closingTime;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 373,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 419,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(uint256 _cap) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 420,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_cap > 0);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 421,
          "vulnerability_to_line": null,
          "vulnerability_code": "    cap = _cap;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 422,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 474,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 475,
          "vulnerability_to_line": null,
          "vulnerability_code": "    owner = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 476,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 842,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 843,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _beneficiary,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 844,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _start,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 845,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _cliff,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 846,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _duration,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 847,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool _revocable\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 848,
          "vulnerability_to_line": null,
          "vulnerability_code": "  )\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 849,
          "vulnerability_to_line": null,
          "vulnerability_code": "    public\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 850,
          "vulnerability_to_line": null,
          "vulnerability_code": "  {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 851,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_beneficiary != address(0));\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 941,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tconstructor(uint256 _rate, address _wallet, ERC20 _token)\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 942,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tCrowdsale(_rate, _wallet, _token) Ownable() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 943,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t}\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 988,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor() Ownable() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 989,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 990,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1057,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tconstructor(TwoKeyWhitelisted _whitelist,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1058,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tuint256 _openingTime, uint256 _closingTime,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1059,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tuint256 _cap,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1060,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tuint256 _rate, address _wallet, ERC20 _token)\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1061,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tTwoKeyUpgradableExchange(_rate, _wallet, _token) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1062,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1063,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\trequire(_whitelist != address(0));\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1064,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1065,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\trequire(_openingTime >= block.timestamp);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1066,
          "vulnerability_to_line": null,
          "vulnerability_code": "   \t\trequire(_closingTime >= _openingTime);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1010,
          "vulnerability_to_line": null,
          "vulnerability_code": "      whitelist[_beneficiaries[i]] = true;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 736,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _operators.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 764,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _operators.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1009,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _beneficiaries.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 357,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 736,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _operators.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 764,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _operators.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1009,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _beneficiaries.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "DOCKER_RECEIVED_SIGNAL_0"
      ],
      "vulnerability_findings": [
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 590,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping (string => Roles.Role) private roles;\n",
          "message": "RBAC.roles (TwoKeyPresellExchange.sol#590) is never initialized. It is used in:\n\t- checkRole (TwoKeyPresellExchange.sol#601-606)\n\t- hasRole (TwoKeyPresellExchange.sol#614-620)\n\t- addRole (TwoKeyPresellExchange.sol#627-632)\n\t- removeRole (TwoKeyPresellExchange.sol#639-644)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 865,
          "vulnerability_to_line": 875,
          "vulnerability_code": "  function release(ERC20Basic _token) public {\n\n    uint256 unreleased = releasableAmount(_token);\n\n\n\n    require(unreleased > 0);\n\n\n\n    released[_token] = released[_token].add(unreleased);\n\n\n\n    _token.safeTransfer(beneficiary, unreleased);\n\n\n\n    emit Released(unreleased);\n",
          "message": "Reentrancy in TokenVesting.release (TwoKeyPresellExchange.sol#865-875):\n\tExternal calls:\n\t- unreleased = releasableAmount(_token) (TwoKeyPresellExchange.sol#866)\n\tState variables written after the call(s):\n\t- released (TwoKeyPresellExchange.sol#870)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 882,
          "vulnerability_to_line": 896,
          "vulnerability_code": "  function revoke(ERC20Basic _token) public onlyOwner {\n\n    require(revocable);\n\n    require(!revoked[_token]);\n\n\n\n    uint256 balance = _token.balanceOf(address(this));\n\n\n\n    uint256 unreleased = releasableAmount(_token);\n\n    uint256 refund = balance.sub(unreleased);\n\n\n\n    revoked[_token] = true;\n\n\n\n    _token.safeTransfer(owner, refund);\n\n\n\n    emit Revoked();\n",
          "message": "Reentrancy in TokenVesting.revoke (TwoKeyPresellExchange.sol#882-896):\n\tExternal calls:\n\t- balance = _token.balanceOf(address(this)) (TwoKeyPresellExchange.sol#886)\n\t- unreleased = releasableAmount(_token) (TwoKeyPresellExchange.sol#888)\n\tState variables written after the call(s):\n\t- revoked (TwoKeyPresellExchange.sol#891)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 1044,
          "vulnerability_to_line": 1047,
          "vulnerability_code": "\tmodifier onlyIfWhitelisted() {\n\n\t    whitelist.isWhitelisted(msg.sender);\n\n\t    _;\n",
          "message": "TwoKeyPresellExchange.onlyIfWhitelisted (TwoKeyPresellExchange.sol#1044-1047) does not use the value returned by external calls:\n\t-whitelist.isWhitelisted(msg.sender) (TwoKeyPresellExchange.sol#1045)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 945,
          "vulnerability_to_line": 955,
          "vulnerability_code": "\tfunction sellTokens(uint256 _tokenAmount) public onlyAlive payable {\n\n\t\trequire(token.allowance(this, msg.sender) >= _tokenAmount);\n\n\t\trequire(token.transferFrom(msg.sender, this, _tokenAmount));\n\n\n\n\t\tuint256 weiAmount = _getWeiAmount(_tokenAmount);\n\n\t\trequire(weiAmount >= address(this).balance);\n\n\t    weiRaised = weiRaised.sub(weiAmount);\n\n\t    msg.sender.transfer(weiAmount);\n\n\n\n\t    emit TokenSell(msg.sender, wallet, weiAmount, _tokenAmount);\n",
          "message": "Reentrancy in TwoKeyUpgradableExchange.sellTokens (TwoKeyPresellExchange.sol#945-955):\n\tExternal calls:\n\t- require(bool)(token.allowance(this,msg.sender) >= _tokenAmount) (TwoKeyPresellExchange.sol#946)\n\t- require(bool)(token.transferFrom(msg.sender,this,_tokenAmount)) (TwoKeyPresellExchange.sol#947)\n\tState variables written after the call(s):\n\t- weiRaised (TwoKeyPresellExchange.sol#951)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 366,
          "vulnerability_to_line": 373,
          "vulnerability_code": "  constructor(uint256 _openingTime, uint256 _closingTime) public {\n\n    // solium-disable-next-line security/no-block-members\n\n    require(_openingTime >= block.timestamp);\n\n    require(_closingTime >= _openingTime);\n\n\n\n    openingTime = _openingTime;\n\n    closingTime = _closingTime;\n",
          "message": "TimedCrowdsale.constructor (TwoKeyPresellExchange.sol#366-373) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(_openingTime >= block.timestamp) (TwoKeyPresellExchange.sol#368)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 379,
          "vulnerability_to_line": 382,
          "vulnerability_code": "  function hasClosed() public view returns (bool) {\n\n    // solium-disable-next-line security/no-block-members\n\n    return block.timestamp > closingTime;\n",
          "message": "TimedCrowdsale.hasClosed (TwoKeyPresellExchange.sol#379-382) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp > closingTime (TwoKeyPresellExchange.sol#381)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 910,
          "vulnerability_to_line": 921,
          "vulnerability_code": "  function vestedAmount(ERC20Basic _token) public view returns (uint256) {\n\n    uint256 currentBalance = _token.balanceOf(address(this));\n\n    uint256 totalBalance = currentBalance.add(released[_token]);\n\n\n\n    if (block.timestamp < cliff) {\n\n      return 0;\n\n    } else if (block.timestamp >= start.add(duration) || revoked[_token]) {\n\n      return totalBalance;\n\n    } else {\n\n      return totalBalance.mul(block.timestamp.sub(start)).div(duration);\n\n    }\n",
          "message": "TokenVesting.vestedAmount (TwoKeyPresellExchange.sol#910-921) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp < cliff (TwoKeyPresellExchange.sol#914-920)\n\t- block.timestamp >= start.add(duration) || revoked[_token] (TwoKeyPresellExchange.sol#916-920)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 1057,
          "vulnerability_to_line": 1076,
          "vulnerability_code": "\tconstructor(TwoKeyWhitelisted _whitelist,\n\n\t\tuint256 _openingTime, uint256 _closingTime,\n\n\t\tuint256 _cap,\n\n\t\tuint256 _rate, address _wallet, ERC20 _token)\n\n\t\tTwoKeyUpgradableExchange(_rate, _wallet, _token) public {\n\n\n\n\t\trequire(_whitelist != address(0));\n\n\n\n\t\trequire(_openingTime >= block.timestamp);\n\n   \t\trequire(_closingTime >= _openingTime);\n\n   \t\trequire(_cap > 0);\n\n\n\n\n\n\t    openingTime = _openingTime;\n\n\t    closingTime = _closingTime;\n\n\n\n        cap = _cap;\n\n\n\n\t\twhitelist = _whitelist;\n",
          "message": "TwoKeyPresellExchange.constructor (TwoKeyPresellExchange.sol#1057-1076) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(_openingTime >= block.timestamp) (TwoKeyPresellExchange.sol#1065)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
          "message": "ERC20Basic.totalSupply (TwoKeyPresellExchange.sol#67) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address _who) public view returns (uint256);\n",
          "message": "ERC20Basic.balanceOf (TwoKeyPresellExchange.sol#68) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool);\n",
          "message": "ERC20Basic.transfer (TwoKeyPresellExchange.sol#69) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address _ocwner, address _spender) public view returns (uint256);\n",
          "message": "ERC20Basic.allowance (TwoKeyPresellExchange.sol#70) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address spender, uint tokens) public returns (bool success);\n",
          "message": "ERC20Basic.approve (TwoKeyPresellExchange.sol#71) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n",
          "message": "ERC20Basic.transferFrom (TwoKeyPresellExchange.sol#72) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 379,
          "vulnerability_to_line": 382,
          "vulnerability_code": "  function hasClosed() public view returns (bool) {\n\n    // solium-disable-next-line security/no-block-members\n\n    return block.timestamp > closingTime;\n",
          "message": "TimedCrowdsale.hasClosed (TwoKeyPresellExchange.sol#379-382) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 428,
          "vulnerability_to_line": 430,
          "vulnerability_code": "  function capReached() public view returns (bool) {\n\n    return weiRaised >= cap;\n",
          "message": "CappedCrowdsale.capReached (TwoKeyPresellExchange.sol#428-430) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 492,
          "vulnerability_to_line": 495,
          "vulnerability_code": "  function renounceOwnership() public onlyOwner {\n\n    emit OwnershipRenounced(owner);\n\n    owner = address(0);\n",
          "message": "Ownable.renounceOwnership (TwoKeyPresellExchange.sol#492-495) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 501,
          "vulnerability_to_line": 503,
          "vulnerability_code": "  function transferOwnership(address _newOwner) public onlyOwner {\n\n    _transferOwnership(_newOwner);\n",
          "message": "Ownable.transferOwnership (TwoKeyPresellExchange.sol#501-503) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 718,
          "vulnerability_to_line": 724,
          "vulnerability_code": "  function whitelist(address _operator)\n\n    public\n\n    view\n\n    returns (bool)\n\n  {\n\n    return hasRole(_operator, ROLE_WHITELISTED);\n",
          "message": "Whitelist.whitelist (TwoKeyPresellExchange.sol#718-724) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 732,
          "vulnerability_to_line": 739,
          "vulnerability_code": "  function addAddressesToWhitelist(address[] _operators)\n\n    public\n\n    onlyOwner\n\n  {\n\n    for (uint256 i = 0; i < _operators.length; i++) {\n\n      addAddressToWhitelist(_operators[i]);\n\n    }\n",
          "message": "Whitelist.addAddressesToWhitelist (TwoKeyPresellExchange.sol#732-739) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 760,
          "vulnerability_to_line": 767,
          "vulnerability_code": "  function removeAddressesFromWhitelist(address[] _operators)\n\n    public\n\n    onlyOwner\n\n  {\n\n    for (uint256 i = 0; i < _operators.length; i++) {\n\n      removeAddressFromWhitelist(_operators[i]);\n\n    }\n",
          "message": "Whitelist.removeAddressesFromWhitelist (TwoKeyPresellExchange.sol#760-767) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 865,
          "vulnerability_to_line": 875,
          "vulnerability_code": "  function release(ERC20Basic _token) public {\n\n    uint256 unreleased = releasableAmount(_token);\n\n\n\n    require(unreleased > 0);\n\n\n\n    released[_token] = released[_token].add(unreleased);\n\n\n\n    _token.safeTransfer(beneficiary, unreleased);\n\n\n\n    emit Released(unreleased);\n",
          "message": "TokenVesting.release (TwoKeyPresellExchange.sol#865-875) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 882,
          "vulnerability_to_line": 896,
          "vulnerability_code": "  function revoke(ERC20Basic _token) public onlyOwner {\n\n    require(revocable);\n\n    require(!revoked[_token]);\n\n\n\n    uint256 balance = _token.balanceOf(address(this));\n\n\n\n    uint256 unreleased = releasableAmount(_token);\n\n    uint256 refund = balance.sub(unreleased);\n\n\n\n    revoked[_token] = true;\n\n\n\n    _token.safeTransfer(owner, refund);\n\n\n\n    emit Revoked();\n",
          "message": "TokenVesting.revoke (TwoKeyPresellExchange.sol#882-896) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 945,
          "vulnerability_to_line": 955,
          "vulnerability_code": "\tfunction sellTokens(uint256 _tokenAmount) public onlyAlive payable {\n\n\t\trequire(token.allowance(this, msg.sender) >= _tokenAmount);\n\n\t\trequire(token.transferFrom(msg.sender, this, _tokenAmount));\n\n\n\n\t\tuint256 weiAmount = _getWeiAmount(_tokenAmount);\n\n\t\trequire(weiAmount >= address(this).balance);\n\n\t    weiRaised = weiRaised.sub(weiAmount);\n\n\t    msg.sender.transfer(weiAmount);\n\n\n\n\t    emit TokenSell(msg.sender, wallet, weiAmount, _tokenAmount);\n",
          "message": "TwoKeyUpgradableExchange.sellTokens (TwoKeyPresellExchange.sol#945-955) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 961,
          "vulnerability_to_line": 963,
          "vulnerability_code": "\tfunction upgrade(address _to) public onlyAlive onlyOwner {\n\n\t\tfiller = _to;\n",
          "message": "TwoKeyUpgradableExchange.upgrade (TwoKeyPresellExchange.sol#961-963) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 992,
          "vulnerability_to_line": 994,
          "vulnerability_code": "  function isWhitelisted(address _beneficiary) public view returns(bool) {\n\n    return(whitelist[_beneficiary]);\n",
          "message": "TwoKeyWhitelisted.isWhitelisted (TwoKeyPresellExchange.sol#992-994) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1000,
          "vulnerability_to_line": 1002,
          "vulnerability_code": "  function addToWhitelist(address _beneficiary) public onlyOwner {\n\n    whitelist[_beneficiary] = true;\n",
          "message": "TwoKeyWhitelisted.addToWhitelist (TwoKeyPresellExchange.sol#1000-1002) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1008,
          "vulnerability_to_line": 1012,
          "vulnerability_code": "  function addManyToWhitelist(address[] _beneficiaries) public onlyOwner {\n\n    for (uint256 i = 0; i < _beneficiaries.length; i++) {\n\n      whitelist[_beneficiaries[i]] = true;\n\n    }\n",
          "message": "TwoKeyWhitelisted.addManyToWhitelist (TwoKeyPresellExchange.sol#1008-1012) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1018,
          "vulnerability_to_line": 1020,
          "vulnerability_code": "  function removeFromWhitelist(address _beneficiary) public onlyOwner {\n\n    whitelist[_beneficiary] = false;\n",
          "message": "TwoKeyWhitelisted.removeFromWhitelist (TwoKeyPresellExchange.sol#1018-1020) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1053,
          "vulnerability_to_line": 1055,
          "vulnerability_code": "\tfunction capReached() public view returns (bool) {\n\n\t    return weiRaised >= cap;\n",
          "message": "TwoKeyPresellExchange.capReached (TwoKeyPresellExchange.sol#1053-1055) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_a' of SafeMath.mul (TwoKeyPresellExchange.sol#15) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_b' of SafeMath.mul (TwoKeyPresellExchange.sol#15) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_a' of SafeMath.div (TwoKeyPresellExchange.sol#31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_b' of SafeMath.div (TwoKeyPresellExchange.sol#31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_a' of SafeMath.sub (TwoKeyPresellExchange.sol#41) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_b' of SafeMath.sub (TwoKeyPresellExchange.sol#41) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_a' of SafeMath.add (TwoKeyPresellExchange.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_b' of SafeMath.add (TwoKeyPresellExchange.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ERC20Basic _token,\n",
          "message": "Parameter '_token' of SafeERC20.safeTransfer (TwoKeyPresellExchange.sol#103) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _to,\n",
          "message": "Parameter '_to' of SafeERC20.safeTransfer (TwoKeyPresellExchange.sol#104) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of SafeERC20.safeTransfer (TwoKeyPresellExchange.sol#105) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ERC20 _token,\n",
          "message": "Parameter '_token' of SafeERC20.safeTransferFrom (TwoKeyPresellExchange.sol#113) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _from,\n",
          "message": "Parameter '_from' of SafeERC20.safeTransferFrom (TwoKeyPresellExchange.sol#114) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _to,\n",
          "message": "Parameter '_to' of SafeERC20.safeTransferFrom (TwoKeyPresellExchange.sol#115) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of SafeERC20.safeTransferFrom (TwoKeyPresellExchange.sol#116) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 124,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ERC20 _token,\n",
          "message": "Parameter '_token' of SafeERC20.safeApprove (TwoKeyPresellExchange.sol#124) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _spender,\n",
          "message": "Parameter '_spender' of SafeERC20.safeApprove (TwoKeyPresellExchange.sol#125) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 126,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of SafeERC20.safeApprove (TwoKeyPresellExchange.sol#126) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n",
          "message": "Parameter '_rate' of Crowdsale. (TwoKeyPresellExchange.sol#190) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n",
          "message": "Parameter '_wallet' of Crowdsale. (TwoKeyPresellExchange.sol#190) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n",
          "message": "Parameter '_token' of Crowdsale. (TwoKeyPresellExchange.sol#190) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function buyTokens(address _beneficiary) public payable {\n",
          "message": "Parameter '_beneficiary' of Crowdsale.buyTokens (TwoKeyPresellExchange.sol#215) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": 260,
          "vulnerability_code": "  function _preValidatePurchase(\n\n    address _beneficiary,\n\n    uint256 _weiAmount\n\n  )\n\n  internal\n\n  {\n\n    require(_beneficiary != address(0));\n\n    require(_weiAmount != 0);\n",
          "message": "Function 'Crowdsale._preValidatePurchase' (TwoKeyPresellExchange.sol#252-260) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 253,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _beneficiary,\n",
          "message": "Parameter '_beneficiary' of Crowdsale._preValidatePurchase (TwoKeyPresellExchange.sol#253) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 254,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _weiAmount\n",
          "message": "Parameter '_weiAmount' of Crowdsale._preValidatePurchase (TwoKeyPresellExchange.sol#254) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 267,
          "vulnerability_to_line": 274,
          "vulnerability_code": "  function _postValidatePurchase(\n\n    address _beneficiary,\n\n    uint256 _weiAmount\n\n  )\n\n  internal\n\n  {\n\n    // optional override\n",
          "message": "Function 'Crowdsale._postValidatePurchase' (TwoKeyPresellExchange.sol#267-274) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 281,
          "vulnerability_to_line": 288,
          "vulnerability_code": "  function _deliverTokens(\n\n    address _beneficiary,\n\n    uint256 _tokenAmount\n\n  )\n\n  internal\n\n  {\n\n    token.safeTransfer(_beneficiary, _tokenAmount);\n",
          "message": "Function 'Crowdsale._deliverTokens' (TwoKeyPresellExchange.sol#281-288) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 282,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _beneficiary,\n",
          "message": "Parameter '_beneficiary' of Crowdsale._deliverTokens (TwoKeyPresellExchange.sol#282) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 283,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _tokenAmount\n",
          "message": "Parameter '_tokenAmount' of Crowdsale._deliverTokens (TwoKeyPresellExchange.sol#283) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": 302,
          "vulnerability_code": "  function _processPurchase(\n\n    address _beneficiary,\n\n    uint256 _tokenAmount\n\n  )\n\n  internal\n\n  {\n\n    _deliverTokens(_beneficiary, _tokenAmount);\n",
          "message": "Function 'Crowdsale._processPurchase' (TwoKeyPresellExchange.sol#295-302) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 296,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _beneficiary,\n",
          "message": "Parameter '_beneficiary' of Crowdsale._processPurchase (TwoKeyPresellExchange.sol#296) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 297,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _tokenAmount\n",
          "message": "Parameter '_tokenAmount' of Crowdsale._processPurchase (TwoKeyPresellExchange.sol#297) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 309,
          "vulnerability_to_line": 316,
          "vulnerability_code": "  function _updatePurchasingState(\n\n    address _beneficiary,\n\n    uint256 _weiAmount\n\n  )\n\n  internal\n\n  {\n\n    // optional override\n",
          "message": "Function 'Crowdsale._updatePurchasingState' (TwoKeyPresellExchange.sol#309-316) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 323,
          "vulnerability_to_line": 327,
          "vulnerability_code": "  function _getTokenAmount(uint256 _weiAmount)\n\n  internal view returns (uint256)\n\n  {\n\n    return _weiAmount.mul(rate);\n",
          "message": "Function 'Crowdsale._getTokenAmount' (TwoKeyPresellExchange.sol#323-327) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 323,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function _getTokenAmount(uint256 _weiAmount)\n",
          "message": "Parameter '_weiAmount' of Crowdsale._getTokenAmount (TwoKeyPresellExchange.sol#323) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": 334,
          "vulnerability_code": "  function _forwardFunds() internal {\n\n    wallet.transfer(msg.value);\n",
          "message": "Function 'Crowdsale._forwardFunds' (TwoKeyPresellExchange.sol#332-334) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 389,
          "vulnerability_to_line": 397,
          "vulnerability_code": "  function _preValidatePurchase(\n\n    address _beneficiary,\n\n    uint256 _weiAmount\n\n  )\n\n    internal\n\n    onlyWhileOpen\n\n  {\n\n    super._preValidatePurchase(_beneficiary, _weiAmount);\n",
          "message": "Function 'TimedCrowdsale._preValidatePurchase' (TwoKeyPresellExchange.sol#389-397) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 390,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _beneficiary,\n",
          "message": "Parameter '_beneficiary' of TimedCrowdsale._preValidatePurchase (TwoKeyPresellExchange.sol#390) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 391,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _weiAmount\n",
          "message": "Parameter '_weiAmount' of TimedCrowdsale._preValidatePurchase (TwoKeyPresellExchange.sol#391) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 366,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(uint256 _openingTime, uint256 _closingTime) public {\n",
          "message": "Parameter '_openingTime' of TimedCrowdsale. (TwoKeyPresellExchange.sol#366) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 366,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(uint256 _openingTime, uint256 _closingTime) public {\n",
          "message": "Parameter '_closingTime' of TimedCrowdsale. (TwoKeyPresellExchange.sol#366) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 437,
          "vulnerability_to_line": 445,
          "vulnerability_code": "  function _preValidatePurchase(\n\n    address _beneficiary,\n\n    uint256 _weiAmount\n\n  )\n\n    internal\n\n  {\n\n    super._preValidatePurchase(_beneficiary, _weiAmount);\n\n    require(weiRaised.add(_weiAmount) <= cap);\n",
          "message": "Function 'CappedCrowdsale._preValidatePurchase' (TwoKeyPresellExchange.sol#437-445) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 438,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _beneficiary,\n",
          "message": "Parameter '_beneficiary' of CappedCrowdsale._preValidatePurchase (TwoKeyPresellExchange.sol#438) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 439,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _weiAmount\n",
          "message": "Parameter '_weiAmount' of CappedCrowdsale._preValidatePurchase (TwoKeyPresellExchange.sol#439) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 419,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(uint256 _cap) public {\n",
          "message": "Parameter '_cap' of CappedCrowdsale. (TwoKeyPresellExchange.sol#419) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 501,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferOwnership(address _newOwner) public onlyOwner {\n",
          "message": "Parameter '_newOwner' of Ownable.transferOwnership (TwoKeyPresellExchange.sol#501) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 509,
          "vulnerability_to_line": 513,
          "vulnerability_code": "  function _transferOwnership(address _newOwner) internal {\n\n    require(_newOwner != address(0));\n\n    emit OwnershipTransferred(owner, _newOwner);\n\n    owner = _newOwner;\n",
          "message": "Function 'Ownable._transferOwnership' (TwoKeyPresellExchange.sol#509-513) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 509,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function _transferOwnership(address _newOwner) internal {\n",
          "message": "Parameter '_newOwner' of Ownable._transferOwnership (TwoKeyPresellExchange.sol#509) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 535,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add(Role storage _role, address _addr)\n",
          "message": "Parameter '_role' of Roles.add (TwoKeyPresellExchange.sol#535) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 535,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add(Role storage _role, address _addr)\n",
          "message": "Parameter '_addr' of Roles.add (TwoKeyPresellExchange.sol#535) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 544,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function remove(Role storage _role, address _addr)\n",
          "message": "Parameter '_role' of Roles.remove (TwoKeyPresellExchange.sol#544) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 544,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function remove(Role storage _role, address _addr)\n",
          "message": "Parameter '_addr' of Roles.remove (TwoKeyPresellExchange.sol#544) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 554,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function check(Role storage _role, address _addr)\n",
          "message": "Parameter '_role' of Roles.check (TwoKeyPresellExchange.sol#554) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 554,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function check(Role storage _role, address _addr)\n",
          "message": "Parameter '_addr' of Roles.check (TwoKeyPresellExchange.sol#554) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 565,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function has(Role storage _role, address _addr)\n",
          "message": "Parameter '_role' of Roles.has (TwoKeyPresellExchange.sol#565) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 565,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function has(Role storage _role, address _addr)\n",
          "message": "Parameter '_addr' of Roles.has (TwoKeyPresellExchange.sol#565) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 601,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function checkRole(address _operator, string _role)\n",
          "message": "Parameter '_operator' of RBAC.checkRole (TwoKeyPresellExchange.sol#601) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 601,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function checkRole(address _operator, string _role)\n",
          "message": "Parameter '_role' of RBAC.checkRole (TwoKeyPresellExchange.sol#601) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 614,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function hasRole(address _operator, string _role)\n",
          "message": "Parameter '_operator' of RBAC.hasRole (TwoKeyPresellExchange.sol#614) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 614,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function hasRole(address _operator, string _role)\n",
          "message": "Parameter '_role' of RBAC.hasRole (TwoKeyPresellExchange.sol#614) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 627,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addRole(address _operator, string _role)\n",
          "message": "Parameter '_operator' of RBAC.addRole (TwoKeyPresellExchange.sol#627) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 627,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addRole(address _operator, string _role)\n",
          "message": "Parameter '_role' of RBAC.addRole (TwoKeyPresellExchange.sol#627) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 639,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function removeRole(address _operator, string _role)\n",
          "message": "Parameter '_operator' of RBAC.removeRole (TwoKeyPresellExchange.sol#639) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 639,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function removeRole(address _operator, string _role)\n",
          "message": "Parameter '_role' of RBAC.removeRole (TwoKeyPresellExchange.sol#639) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 708,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addAddressToWhitelist(address _operator)\n",
          "message": "Parameter '_operator' of Whitelist.addAddressToWhitelist (TwoKeyPresellExchange.sol#708) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 718,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function whitelist(address _operator)\n",
          "message": "Parameter '_operator' of Whitelist.whitelist (TwoKeyPresellExchange.sol#718) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 732,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addAddressesToWhitelist(address[] _operators)\n",
          "message": "Parameter '_operators' of Whitelist.addAddressesToWhitelist (TwoKeyPresellExchange.sol#732) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 747,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function removeAddressFromWhitelist(address _operator)\n",
          "message": "Parameter '_operator' of Whitelist.removeAddressFromWhitelist (TwoKeyPresellExchange.sol#747) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 760,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function removeAddressesFromWhitelist(address[] _operators)\n",
          "message": "Parameter '_operators' of Whitelist.removeAddressesFromWhitelist (TwoKeyPresellExchange.sol#760) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 786,
          "vulnerability_to_line": 794,
          "vulnerability_code": "  function _preValidatePurchase(\n\n    address _beneficiary,\n\n    uint256 _weiAmount\n\n  )\n\n    internal\n\n    onlyIfWhitelisted(_beneficiary)\n\n  {\n\n    super._preValidatePurchase(_beneficiary, _weiAmount);\n",
          "message": "Function 'WhitelistedCrowdsale._preValidatePurchase' (TwoKeyPresellExchange.sol#786-794) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 787,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _beneficiary,\n",
          "message": "Parameter '_beneficiary' of WhitelistedCrowdsale._preValidatePurchase (TwoKeyPresellExchange.sol#787) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 788,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _weiAmount\n",
          "message": "Parameter '_weiAmount' of WhitelistedCrowdsale._preValidatePurchase (TwoKeyPresellExchange.sol#788) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 843,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _beneficiary,\n",
          "message": "Parameter '_beneficiary' of TokenVesting. (TwoKeyPresellExchange.sol#843) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 844,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _start,\n",
          "message": "Parameter '_start' of TokenVesting. (TwoKeyPresellExchange.sol#844) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 845,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _cliff,\n",
          "message": "Parameter '_cliff' of TokenVesting. (TwoKeyPresellExchange.sol#845) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 846,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _duration,\n",
          "message": "Parameter '_duration' of TokenVesting. (TwoKeyPresellExchange.sol#846) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 847,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool _revocable\n",
          "message": "Parameter '_revocable' of TokenVesting. (TwoKeyPresellExchange.sol#847) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 865,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function release(ERC20Basic _token) public {\n",
          "message": "Parameter '_token' of TokenVesting.release (TwoKeyPresellExchange.sol#865) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 882,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function revoke(ERC20Basic _token) public onlyOwner {\n",
          "message": "Parameter '_token' of TokenVesting.revoke (TwoKeyPresellExchange.sol#882) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 902,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function releasableAmount(ERC20Basic _token) public view returns (uint256) {\n",
          "message": "Parameter '_token' of TokenVesting.releasableAmount (TwoKeyPresellExchange.sol#902) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 910,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function vestedAmount(ERC20Basic _token) public view returns (uint256) {\n",
          "message": "Parameter '_token' of TokenVesting.vestedAmount (TwoKeyPresellExchange.sol#910) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 970,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction buyTokens(address _beneficiary) public onlyAlive payable {\n",
          "message": "Parameter '_beneficiary' of TwoKeyUpgradableExchange.buyTokens (TwoKeyPresellExchange.sol#970) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 945,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction sellTokens(uint256 _tokenAmount) public onlyAlive payable {\n",
          "message": "Parameter '_tokenAmount' of TwoKeyUpgradableExchange.sellTokens (TwoKeyPresellExchange.sol#945) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 957,
          "vulnerability_to_line": 959,
          "vulnerability_code": "\tfunction _getWeiAmount(uint256 _tokenAmount) internal view returns (uint256) {\n\n\t    return _tokenAmount.div(rate);\n",
          "message": "Function 'TwoKeyUpgradableExchange._getWeiAmount' (TwoKeyPresellExchange.sol#957-959) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 957,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction _getWeiAmount(uint256 _tokenAmount) internal view returns (uint256) {\n",
          "message": "Parameter '_tokenAmount' of TwoKeyUpgradableExchange._getWeiAmount (TwoKeyPresellExchange.sol#957) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 961,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction upgrade(address _to) public onlyAlive onlyOwner {\n",
          "message": "Parameter '_to' of TwoKeyUpgradableExchange.upgrade (TwoKeyPresellExchange.sol#961) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 992,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isWhitelisted(address _beneficiary) public view returns(bool) {\n",
          "message": "Parameter '_beneficiary' of TwoKeyWhitelisted.isWhitelisted (TwoKeyPresellExchange.sol#992) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1000,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addToWhitelist(address _beneficiary) public onlyOwner {\n",
          "message": "Parameter '_beneficiary' of TwoKeyWhitelisted.addToWhitelist (TwoKeyPresellExchange.sol#1000) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1008,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addManyToWhitelist(address[] _beneficiaries) public onlyOwner {\n",
          "message": "Parameter '_beneficiaries' of TwoKeyWhitelisted.addManyToWhitelist (TwoKeyPresellExchange.sol#1008) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1018,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function removeFromWhitelist(address _beneficiary) public onlyOwner {\n",
          "message": "Parameter '_beneficiary' of TwoKeyWhitelisted.removeFromWhitelist (TwoKeyPresellExchange.sol#1018) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1078,
          "vulnerability_to_line": 1083,
          "vulnerability_code": "\tfunction _preValidatePurchase(\n\n\t    address _beneficiary,\n\n\t    uint256 _weiAmount) internal onlyIfWhitelisted {\n\n\t    super._preValidatePurchase(_beneficiary, _weiAmount);\n\n\t    require(weiRaised.add(_weiAmount) <= cap);\n",
          "message": "Function 'TwoKeyPresellExchange._preValidatePurchase' (TwoKeyPresellExchange.sol#1078-1083) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1079,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t    address _beneficiary,\n",
          "message": "Parameter '_beneficiary' of TwoKeyPresellExchange._preValidatePurchase (TwoKeyPresellExchange.sol#1079) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1080,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t    uint256 _weiAmount) internal onlyIfWhitelisted {\n",
          "message": "Parameter '_weiAmount' of TwoKeyPresellExchange._preValidatePurchase (TwoKeyPresellExchange.sol#1080) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1057,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tconstructor(TwoKeyWhitelisted _whitelist,\n",
          "message": "Parameter '_whitelist' of TwoKeyPresellExchange. (TwoKeyPresellExchange.sol#1057) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1058,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tuint256 _openingTime, uint256 _closingTime,\n",
          "message": "Parameter '_openingTime' of TwoKeyPresellExchange. (TwoKeyPresellExchange.sol#1058) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1058,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tuint256 _openingTime, uint256 _closingTime,\n",
          "message": "Parameter '_closingTime' of TwoKeyPresellExchange. (TwoKeyPresellExchange.sol#1058) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1059,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tuint256 _cap,\n",
          "message": "Parameter '_cap' of TwoKeyPresellExchange. (TwoKeyPresellExchange.sol#1059) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 494,
          "vulnerability_to_line": null,
          "vulnerability_code": "    owner = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 736,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _operators.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 764,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _operators.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 1009,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _beneficiaries.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 736,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _operators.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 764,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _operators.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1009,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _beneficiaries.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 92,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 339,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 403,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 451,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 518,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 576,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 683,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 773,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 802,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 926,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 978,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1027,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 590,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping (string => Roles.Role) private roles;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 153,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 347,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 411,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 814,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 601,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function checkRole(address _operator, string _role)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 614,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function hasRole(address _operator, string _role)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 627,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addRole(address _operator, string _role)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 639,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function removeRole(address _operator, string _role)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 732,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addAddressesToWhitelist(address[] _operators)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 760,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function removeAddressesFromWhitelist(address[] _operators)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1008,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addManyToWhitelist(address[] _beneficiaries) public onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 932,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress filler;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1039,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tTwoKeyWhitelisted whitelist;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 601,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function checkRole(address _operator, string _role)\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 1008,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addManyToWhitelist(address[] _beneficiaries) public onlyOwner {\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 601,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function checkRole(address _operator, string _role)\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 642,
          "vulnerability_to_line": null,
          "vulnerability_code": "    roles[_role].remove(_operator);\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}