function buyProductInternal(uint256 _units, uint256 _bounty) public payable {
    

    address customer = senderPlasma();
    require(balanceOf(customer) > 0,"no arcs");

    uint256 _total_units = total_units();


    require(_units > 0,"no units requested");
    require(_total_units >= _units,"not enough units available in stock");
    address[] memory influencers = getInfluencers(customer);
    uint n_influencers = influencers.length;

    
    uint256 total_bounty = 0;
    for (uint i = 0; i < n_influencers; i++) {
      address influencer = plasmaOf(influencers[i]);  
      uint256 b;
      if (i == n_influencers-1) {  
        b = _bounty;
      } else {
        uint256 cut = cutOf(influencer);
        if (cut > 0 && cut <= 101) {
          b = _bounty.mul(cut.sub(1)).div(100);
        } else {  
          b = _bounty.div(n_influencers-i);
        }
      }
      uint256 newBounty = xbalances[influencer].add(b);
      require(newBounty >= xbalances[influencer], "SafeMath: addition overflow");
      xbalances[influencer] = newBounty;
      emit Rewarded(influencer, b);
      total_bounty = total_bounty.add(b);
      _bounty = _bounty.sub(b);
    }

    uint256 newValue = xbalances[owner_plasma].add(msg.value).sub(total_bounty);
    require(newValue >= xbalances[owner_plasma], "SafeMath: addition overflow");
    xbalances[owner_plasma] = newValue;
    units[customer] = units[customer].add(_units);

    emit Fulfilled(customer, units[customer]);
  }