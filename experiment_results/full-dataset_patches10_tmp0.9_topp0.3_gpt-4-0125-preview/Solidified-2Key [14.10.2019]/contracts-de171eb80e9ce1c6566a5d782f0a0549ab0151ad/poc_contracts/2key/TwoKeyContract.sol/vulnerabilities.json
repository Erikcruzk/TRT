{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 387,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Destructible is Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 418,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract TwoKeyEconomy is StandardToken, Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 703,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract TwoKeyUpgradableExchange is Crowdsale, Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 769,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract TwoKeyAdmin is Ownable, Destructible, AdminContract {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 1324,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract TwoKeyReg is Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 1431,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract TwoKeyContract is StandardToken, Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1248,
          "vulnerability_to_line": null,
          "vulnerability_code": "        while (idx + 65 <= sig.length) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1252,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (idx + msg_len <= sig.length) {  // its  a < and not a <= because we dont want this to be the final iteration for the converter\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1303,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i = 0; i < influencers.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1304,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (i < weights.length) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bool public frozen = false;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 1448,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint8 public decimals = 0;  // ARCs are not divisable\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 166,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 167,
          "vulnerability_to_line": null,
          "vulnerability_code": "    owner = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 168,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 424,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor() Ownable() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 425,
          "vulnerability_to_line": null,
          "vulnerability_code": "    totalSupply_ = 1000000000000000000000000000;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 426,
          "vulnerability_to_line": null,
          "vulnerability_code": "    balances[msg.sender] = totalSupply_;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 427,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 550,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 551,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_rate > 0);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 552,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_wallet != address(0));\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 553,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_token != address(0));\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 554,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 555,
          "vulnerability_to_line": null,
          "vulnerability_code": "    rate = _rate;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 556,
          "vulnerability_to_line": null,
          "vulnerability_code": "    wallet = _wallet;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 557,
          "vulnerability_to_line": null,
          "vulnerability_code": "    token = _token;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 558,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 714,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tconstructor(uint256 _rate, address _wallet, ERC20 _token)\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 715,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tCrowdsale(_rate, _wallet, _token) Ownable() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 716,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t}\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 939,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _twoKeyAdminAddress) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 940,
          "vulnerability_to_line": null,
          "vulnerability_code": "        twoKeyAdmin = TwoKeyAdmin(_twoKeyAdminAddress);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 941,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1340,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(TwoKeyEventSource _eventSource) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1341,
          "vulnerability_to_line": null,
          "vulnerability_code": "    eventSource = _eventSource;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1342,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1719,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(TwoKeyReg _reg, TwoKeyEventSource _eventSource, string _name, string _symbol,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1720,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _tSupply, uint256 _quota, uint256 _cost, uint256 _bounty,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1721,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _units, string _ipfs_hash) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1722,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_bounty <= _cost,\"bounty bigger than cost\");\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1723,
          "vulnerability_to_line": null,
          "vulnerability_code": "    // owner = msg.sender;  // done in Ownable()\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1724,
          "vulnerability_to_line": null,
          "vulnerability_code": "    // We do an explicit type conversion from `address`\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1725,
          "vulnerability_to_line": null,
          "vulnerability_code": "    // to `TwoKeyReg` and assume that the type of\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1726,
          "vulnerability_to_line": null,
          "vulnerability_code": "    // the calling contract is TwoKeyReg, there is\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1727,
          "vulnerability_to_line": null,
          "vulnerability_code": "    // no real way to check that.\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1728,
          "vulnerability_to_line": null,
          "vulnerability_code": "    name = _name;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1775,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(TwoKeyReg _reg, TwoKeyEventSource _eventSource, string _name, string _symbol,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1776,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _tSupply, uint256 _quota, uint256 _cost, uint256 _bounty,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1777,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _ipfs_hash, StandardToken _erc20_token_sell_contract) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1778,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_bounty <= _cost,\"bounty bigger than cost\");\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1779,
          "vulnerability_to_line": null,
          "vulnerability_code": "    // owner = msg.sender;  // done in Ownable()\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1780,
          "vulnerability_to_line": null,
          "vulnerability_code": "    // We do an explicit type conversion from `address`\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1781,
          "vulnerability_to_line": null,
          "vulnerability_code": "    // to `TwoKeyReg` and assume that the type of\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1782,
          "vulnerability_to_line": null,
          "vulnerability_code": "    // the calling contract is TwoKeyReg, there is\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1783,
          "vulnerability_to_line": null,
          "vulnerability_code": "    // no real way to check that.\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1784,
          "vulnerability_to_line": null,
          "vulnerability_code": "    name = _name;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1650,
          "vulnerability_to_line": null,
          "vulnerability_code": "      influencer = plasmaOf(received_from[influencer]);  // already a plasma address\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1652,
          "vulnerability_to_line": null,
          "vulnerability_code": "      if (influencer == owner_plasma) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1663,
          "vulnerability_to_line": null,
          "vulnerability_code": "      influencer = plasmaOf(received_from[influencer]);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1700,
          "vulnerability_to_line": null,
          "vulnerability_code": "      xbalances[influencer] = xbalances[influencer].add(b);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1700,
          "vulnerability_to_line": null,
          "vulnerability_code": "      xbalances[influencer] = xbalances[influencer].add(b);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1303,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i = 0; i < influencers.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1523,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint i = 0; i < n_influencers; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1687,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint i = 0; i < n_influencers; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1175,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require (sig.length >= 65+idx, 'bad signature length');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1202,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(v==27 || v==28,'bad sig v');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1254,
          "vulnerability_to_line": null,
          "vulnerability_code": "                require(weights[count_influencers] > 0,'weight not defined (1..255)');  // 255 are used to indicate default (equal part) behaviour\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1284,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(idx == sig.length,'illegal message size');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1294,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(old_key != address(0),'no public link key');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1305,
          "vulnerability_to_line": null,
          "vulnerability_code": "                require (recoverHash(keccak256(abi.encodePacked(weights[i], keys[i], influencers[i])),sig,offsets[i]) == old_key, 'illegal signature');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1309,
          "vulnerability_to_line": null,
          "vulnerability_code": "                require (recoverHash(keccak256(abi.encodePacked(influencers[i])),sig,offsets[i]) == old_key, 'illegal last signature');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1346,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(name2owner[keccak256(abi.encodePacked(_name))] == 0 || name2owner[keccak256(abi.encodePacked(_name))] == _sender, \"name already assigned\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1370,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require (msg.sender == eth_address || msg.sender == owner, \"only owner or user can change name\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1389,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(plasma2ethereum[plasma_address] == address(0) || plasma2ethereum[plasma_address] == eth_address, \"cant change eth=>plasma\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1402,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require (msg.sender == eth_address || msg.sender == owner, \"only owner or user can change ethereum-plasma\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1472,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(plasma != address(0),'your plasma address was not found in registry');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1507,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(influencer2cut[plasma] == 0 || influencer2cut[plasma] == cut, 'cut already set differently');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1542,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_value == 1, 'can only transfer 1 ARC');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1543,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_from != address(0), '_from undefined');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1544,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_to != address(0), '_to undefined');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1552,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(balances[_from] > 0,'_from does not have arcs');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1574,
          "vulnerability_to_line": null,
          "vulnerability_code": "    revert('transfer not implemented');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1636,
          "vulnerability_to_line": null,
          "vulnerability_code": "       revert(\"failed to send\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1651,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(influencer != address(0),'not connected to contractor');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1675,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(balanceOf(customer) > 0,\"no arcs\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1680,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_units > 0,\"no units requested\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1681,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_total_units >= _units,\"not enough units available in stock\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1722,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_bounty <= _cost,\"bounty bigger than cost\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1758,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.value == cost * _units, \"ethere sent does not divide equally into units\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1778,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_bounty <= _cost,\"bounty bigger than cost\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1805,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(unit_decimals >= 0,\"unit decimals to low\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1806,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(unit_decimals <= 18,\"unit decimals to big\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1837,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(address(erc20_token_sell_contract).call(bytes4(keccak256(\"transfer(address,uint256)\")),msg.sender,_units),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1838,
          "vulnerability_to_line": null,
          "vulnerability_code": "      \"failed to send coins\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 813,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\trequire(to != address(0)  && amount > 0);\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1694,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (cut > 0 && cut <= 101) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1695,
          "vulnerability_to_line": null,
          "vulnerability_code": "          b = _bounty.mul(cut.sub(1)).div(100);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1696,
          "vulnerability_to_line": null,
          "vulnerability_code": "        } else {  // cut == 0 or 255 indicates equal particine of the bounty\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1697,
          "vulnerability_to_line": null,
          "vulnerability_code": "          b = _bounty.div(n_influencers-i);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1698,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 1664,
          "vulnerability_to_line": null,
          "vulnerability_code": "      n_influencers--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1214,
          "vulnerability_to_line": null,
          "vulnerability_code": "            n_influencers++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1255,
          "vulnerability_to_line": null,
          "vulnerability_code": "                idx++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1282,
          "vulnerability_to_line": null,
          "vulnerability_code": "            count_influencers++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1303,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i = 0; i < influencers.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1523,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint i = 0; i < n_influencers; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1655,
          "vulnerability_to_line": null,
          "vulnerability_code": "      n_influencers++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1687,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint i = 0; i < n_influencers; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1370,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require (msg.sender == eth_address || msg.sender == owner, \"only owner or user can change name\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1402,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require (msg.sender == eth_address || msg.sender == owner, \"only owner or user can change ethereum-plasma\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1472,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(plasma != address(0),'your plasma address was not found in registry');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1681,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_total_units >= _units,\"not enough units available in stock\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1758,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.value == cost * _units, \"ethere sent does not divide equally into units\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "encode-packed-collision",
          "vulnerability_from_line": 1400,
          "vulnerability_to_line": null,
          "vulnerability_code": "      keccak256(abi.encodePacked(sig,note))));\n",
          "message": "abi.encodePacked hash collision with variable length arguments in setPlasma2EthereumAndNoteSigned()"
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_8"
      ],
      "vulnerability_findings": [
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 1620,
          "vulnerability_to_line": 1640,
          "vulnerability_code": "  function redeem() public {\n\n    address influencer = senderPlasma();\n\n    uint256 b = xbalances[influencer];\n\n\n\n\n\n    uint256 bmax = address(this).balance;\n\n    if (b > bmax) {\n\n      b = bmax;\n\n    }\n\n    if (b == 0) {\n\n      return;\n\n    }\n\n\n\n    xbalances[influencer] = xbalances[influencer].sub(b);\n\n    // super important to send to msg.senbder not to influencer\n\n    if(!msg.sender.send(b)) {\n\n       revert(\"failed to send\");\n\n    }\n\n  }\n\n\n",
          "message": "TwoKeyContract.redeem (TwoKeyContract.sol#1620-1640) sends eth to arbitrary user\n\tDangerous calls:\n\t- ! msg.sender.send(b) (TwoKeyContract.sol#1635-1638)\n"
        },
        {
          "name": "shadowing-state",
          "vulnerability_from_line": 419,
          "vulnerability_to_line": null,
          "vulnerability_code": "  string public name = 'TwoKeyEconomy';\n",
          "message": "TwoKeyEconomy.name (TwoKeyContract.sol#419) shadows:\n\t- StandardToken.name (TwoKeyContract.sol#225)\n"
        },
        {
          "name": "shadowing-state",
          "vulnerability_from_line": 420,
          "vulnerability_to_line": null,
          "vulnerability_code": "  string public symbol = '2Key';\n",
          "message": "TwoKeyEconomy.symbol (TwoKeyContract.sol#420) shadows:\n\t- StandardToken.symbol (TwoKeyContract.sol#226)\n"
        },
        {
          "name": "shadowing-state",
          "vulnerability_from_line": 421,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint8 public decimals = 18;\n",
          "message": "TwoKeyEconomy.decimals (TwoKeyContract.sol#421) shadows:\n\t- StandardToken.decimals (TwoKeyContract.sol#227)\n"
        },
        {
          "name": "shadowing-state",
          "vulnerability_from_line": 1445,
          "vulnerability_to_line": 1446,
          "vulnerability_code": "  string public name;\n",
          "message": "TwoKeyContract.name (TwoKeyContract.sol#1445-1446) shadows:\n\t- StandardToken.name (TwoKeyContract.sol#225)\n"
        },
        {
          "name": "shadowing-state",
          "vulnerability_from_line": 1447,
          "vulnerability_to_line": 1448,
          "vulnerability_code": "  string public symbol;\n",
          "message": "TwoKeyContract.symbol (TwoKeyContract.sol#1447-1448) shadows:\n\t- StandardToken.symbol (TwoKeyContract.sol#226)\n"
        },
        {
          "name": "shadowing-state",
          "vulnerability_from_line": 1448,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint8 public decimals = 0;  // ARCs are not divisable\n",
          "message": "TwoKeyContract.decimals (TwoKeyContract.sol#1448) shadows:\n\t- StandardToken.decimals (TwoKeyContract.sol#227)\n"
        },
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 internal totalSupply_;\n",
          "message": "BasicToken.totalSupply_ (TwoKeyContract.sol#93) is never initialized. It is used in:\n\t- totalSupply (TwoKeyContract.sol#102-104)\n"
        },
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 775,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress public newAdmin;\n",
          "message": "TwoKeyAdmin.newAdmin (TwoKeyContract.sol#775) is never initialized. It is used in:\n\t- destroy (TwoKeyContract.sol#826-831)\n\t- fallback (TwoKeyContract.sol#820-824)\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 858,
          "vulnerability_to_line": 873,
          "vulnerability_code": "    function at(address _addr) internal view returns (bytes o_code) {\n\n        assembly {\n\n        // retrieve the size of the code, this needs assembly\n\n            let size := extcodesize(_addr)\n\n        // allocate output byte array - this could also be done without assembly\n\n        // by using o_code = new bytes(size)\n\n            o_code := mload(0x40)\n\n        // new \"memory end\" including padding\n\n            mstore(0x40, add(o_code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n\n        // store length in memory\n\n            mstore(o_code, size)\n\n        // actually retrieve the code, this needs assembly\n\n            extcodecopy(_addr, add(o_code, 0x20), 0, size)\n\n        }\n\n    }\n",
          "message": "GetCode.at (TwoKeyContract.sol#858-873) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 1059,
          "vulnerability_to_line": 1087,
          "vulnerability_code": "    function params0(address c, bytes _method) public view returns (uint answer) {\n\n        // https://medium.com/@blockchain101/calling-the-function-of-another-contract-in-solidity-f9edfa921f4c\n\n        //    dc = c;\n\n        bytes4 sig = bytes4(keccak256(_method));\n\n        assembly {\n\n        // move pointer to free memory spot\n\n            let ptr := mload(0x40)\n\n        // put function sig at memory spot\n\n            mstore(ptr,sig)\n\n\n\n            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n\n            15000, // gas limit\n\n            c, // sload(dc_slot),  // to addr. append var to _slot to access storage variable\n\n            0, // not transfer any ether (comment if using staticcall)\n\n            ptr, // Inputs are stored at location ptr\n\n            0x04, // Inputs are 0 bytes long\n\n            ptr,  //Store output over input\n\n            0x20) //Outputs are 1 bytes long\n\n\n\n            if eq(result, 0) {\n\n                revert(0, 0)\n\n            }\n\n\n\n            answer := mload(ptr) // Assign output to answer var\n\n            mstore(0x40,add(ptr,0x24)) // Set storage pointer to new space\n\n        }\n\n    }\n\n\n",
          "message": "Call.params0 (TwoKeyContract.sol#1059-1087) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 1087,
          "vulnerability_to_line": 1117,
          "vulnerability_code": "    function params1(address c, bytes _method, uint _val) public view returns (uint answer) {\n\n        // https://medium.com/@blockchain101/calling-the-function-of-another-contract-in-solidity-f9edfa921f4c\n\n        //    dc = c;\n\n        bytes4 sig = bytes4(keccak256(_method));\n\n        assembly {\n\n        // move pointer to free memory spot\n\n            let ptr := mload(0x40)\n\n        // put function sig at memory spot\n\n            mstore(ptr,sig)\n\n        // append argument after function sig\n\n            mstore(add(ptr,0x04), _val)\n\n\n\n            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n\n            15000, // gas limit\n\n            c, // sload(dc_slot),  // to addr. append var to _slot to access storage variable\n\n            0, // not transfer any ether (comment if using staticcall)\n\n            ptr, // Inputs are stored at location ptr\n\n            0x24, // Inputs are 0 bytes long\n\n            ptr,  //Store output over input\n\n            0x20) //Outputs are 1 bytes long\n\n\n\n            if eq(result, 0) {\n\n                revert(0, 0)\n\n            }\n\n\n\n            answer := mload(ptr) // Assign output to answer var\n\n            mstore(0x40,add(ptr,0x24)) // Set storage pointer to new space\n\n        }\n\n    }\n\n\n",
          "message": "Call.params1 (TwoKeyContract.sol#1087-1117) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 1117,
          "vulnerability_to_line": 1149,
          "vulnerability_code": "    function params2(address c, bytes _method, uint _val1, uint _val2) public view returns (uint answer) {\n\n        // https://medium.com/@blockchain101/calling-the-function-of-another-contract-in-solidity-f9edfa921f4c\n\n        //    dc = c;\n\n        bytes4 sig = bytes4(keccak256(_method));\n\n        assembly {\n\n        // move pointer to free memory spot\n\n            let ptr := mload(0x40)\n\n        // put function sig at memory spot\n\n            mstore(ptr,sig)\n\n        // append argument after function sig\n\n            mstore(add(ptr,0x04), _val1)\n\n            mstore(add(ptr,0x24), _val2)\n\n\n\n            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n\n            15000, // gas limit\n\n            c, // sload(dc_slot),  // to addr. append var to _slot to access storage variable\n\n            0, // not transfer any ether (comment if using staticcall)\n\n            ptr, // Inputs are stored at location ptr\n\n            0x44, // Inputs are 4 bytes for signature and 2 uint256\n\n            ptr,  //Store output over input\n\n            0x20) //Outputs are 1 uint long\n\n\n\n        // TODO cause revert\n\n        //            if eq(result, 0) {\n\n        //                revert(0, 0)\n\n        //            }\n\n\n\n            answer := mload(ptr) // Assign output to answer var\n\n            mstore(0x40,add(ptr,0x20)) // Set storage pointer to new space\n\n        }\n\n    }\n\n\n",
          "message": "Call.params2 (TwoKeyContract.sol#1117-1149) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 1149,
          "vulnerability_to_line": 1159,
          "vulnerability_code": "    function loadAddress(bytes sig, uint idx) public pure returns (address) {\n\n        address influencer;\n\n        idx += 20;\n\n        assembly\n\n        {\n\n            influencer := mload(add(sig, idx))\n\n        }\n\n        return influencer;\n\n    }\n\n\n",
          "message": "Call.loadAddress (TwoKeyContract.sol#1149-1159) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 1159,
          "vulnerability_to_line": 1169,
          "vulnerability_code": "    function loadUint8(bytes sig, uint idx) public pure returns (uint8) {\n\n        uint8 weight;\n\n        idx += 1;\n\n        assembly\n\n        {\n\n            weight := mload(add(sig, idx))\n\n        }\n\n        return weight;\n\n    }\n\n\n",
          "message": "Call.loadUint8 (TwoKeyContract.sol#1159-1169) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 1170,
          "vulnerability_to_line": 1207,
          "vulnerability_code": "    function recoverHash(bytes32 hash, bytes sig, uint idx) public pure returns (address) {\n\n        // same as recoverHash in utils/sign.js\n\n        // The signature format is a compact form of:\n\n        //   {bytes32 r}{bytes32 s}{uint8 v}\n\n        // Compact means, uint8 is not padded to 32 bytes.\n\n        require (sig.length >= 65+idx, 'bad signature length');\n\n        idx += 32;\n\n        bytes32 r;\n\n        assembly\n\n        {\n\n            r := mload(add(sig, idx))\n\n        }\n\n\n\n        idx += 32;\n\n        bytes32 s;\n\n        assembly\n\n        {\n\n            s := mload(add(sig, idx))\n\n        }\n\n\n\n        idx += 1;\n\n        uint8 v;\n\n        assembly\n\n        {\n\n            v := mload(add(sig, idx))\n\n        }\n\n        if (v >= 32) { // handle case when signature was made with ethereum web3.eth.sign or getSign which is for signing ethereum transactions\n\n            v -= 32;\n\n            bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\"; // 32 is the number of bytes in the following hash\n\n            hash = keccak256(abi.encodePacked(prefix, hash));\n\n        }\n\n        if (v <= 1) v += 27;\n\n        require(v==27 || v==28,'bad sig v');\n\n        return ecrecover(hash, v, r, s);\n\n\n\n    }\n\n\n",
          "message": "Call.recoverHash (TwoKeyContract.sol#1170-1207) is declared view but contains assembly code\n"
        },
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 1620,
          "vulnerability_to_line": 1640,
          "vulnerability_code": "  function redeem() public {\n\n    address influencer = senderPlasma();\n\n    uint256 b = xbalances[influencer];\n\n\n\n\n\n    uint256 bmax = address(this).balance;\n\n    if (b > bmax) {\n\n      b = bmax;\n\n    }\n\n    if (b == 0) {\n\n      return;\n\n    }\n\n\n\n    xbalances[influencer] = xbalances[influencer].sub(b);\n\n    // super important to send to msg.senbder not to influencer\n\n    if(!msg.sender.send(b)) {\n\n       revert(\"failed to send\");\n\n    }\n\n  }\n\n\n",
          "message": "TwoKeyContract.redeem (TwoKeyContract.sol#1620-1640) uses a dangerous strict equality:\n\t- b == 0\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 1611,
          "vulnerability_to_line": 1620,
          "vulnerability_code": "  function buyFrom(address _from) public payable {\n\n    _from = plasmaOf(_from);\n\n    address _to = senderPlasma();\n\n    if (balanceOf(_to) == 0) {\n\n      transferFromInternal(_from, _to, 1);\n\n    }\n\n    buyProduct();\n\n  }\n\n\n",
          "message": "Reentrancy in TwoKeyContract.buyFrom (TwoKeyContract.sol#1611-1620):\n\tExternal calls:\n\t- _from = plasmaOf(_from) (TwoKeyContract.sol#1612-1613)\n\t- _to = senderPlasma() (TwoKeyContract.sol#1613-1614)\n\t- balanceOf(_to) == 0 (TwoKeyContract.sol#1614-1617)\n\t- transferFromInternal(_from,_to,1) (TwoKeyContract.sol#1615-1616)\n\tState variables written after the call(s):\n\t- balances (TwoKeyContract.sol#1615-1616)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 1540,
          "vulnerability_to_line": 1568,
          "vulnerability_code": "  function transferFromInternal(address _from, address _to, uint256 _value) internal returns (bool) {\n\n    // _from and _to are assumed to be already converted to plasma address (e.g. using plasmaOf)\n\n    require(_value == 1, 'can only transfer 1 ARC');\n\n    require(_from != address(0), '_from undefined');\n\n    require(_to != address(0), '_to undefined');\n\n    _from = plasmaOf(_from);\n\n    _to = plasmaOf(_to);\n\n\n\n//    // normalize address to be plasma\n\n//    _from = plasmaOf(_from);\n\n//    _to = plasmaOf(_to);\n\n\n\n    require(balances[_from] > 0,'_from does not have arcs');\n\n    balances[_from] = balances[_from].sub(1);\n\n    balances[_to] = balances[_to].add(quota);\n\n    totalSupply_ = totalSupply_.add(quota.sub(1));\n\n\n\n    emit Transfer(_from, _to, 1);\n\n    if (received_from[_to] == 0) {\n\n      // inform the 2key admin contract, once, that an influencer has joined\n\n      if (eventSource != address(0)) {\n\n        eventSource.joined(this, _from, _to);\n\n      }\n\n    }\n\n    received_from[_to] = _from;\n\n    return true;\n\n  }\n\n\n",
          "message": "Reentrancy in TwoKeyContract.transferFromInternal (TwoKeyContract.sol#1540-1568):\n\tExternal calls:\n\t- _from = plasmaOf(_from) (TwoKeyContract.sol#1545-1546)\n\t- _to = plasmaOf(_to) (TwoKeyContract.sol#1546-1547)\n\t- eventSource.joined(this,_from,_to) (TwoKeyContract.sol#1561-1562)\n\tState variables written after the call(s):\n\t- received_from (TwoKeyContract.sol#1564-1565)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 791,
          "vulnerability_to_line": 800,
          "vulnerability_code": "\tfunction replaceOneself(address newAdminContract) external wasNotReplaced adminsVotingApproved {\n\n\t\tAdminContract adminContract = AdminContract(newAdminContract);\n\n\t\tuint balanceOfOldAdmin = economy.balanceOf(adminContract);\n\n\t\t// move to deploy\n\n\t\twasReplaced = true;\n\n\t\teconomy.transfer(newAdminContract, balanceOfOldAdmin);\n\n\t\teconomy.transferOwnership(newAdminContract);\n\n\t\texchange.transferOwnership(newAdminContract);\n\n\t\tnewAdminContract.transfer(address(this).balance);\n",
          "message": "TwoKeyAdmin.replaceOneself (TwoKeyContract.sol#791-800) does not use the value returned by external calls:\n\t-economy.transfer(newAdminContract,balanceOfOldAdmin) (TwoKeyContract.sol#796)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 802,
          "vulnerability_to_line": 804,
          "vulnerability_code": "\tfunction transferByAdmins(address _to, uint256 _tokens) external wasNotReplaced adminsVotingApproved {\n\n\t\teconomy.transfer(_to, _tokens);\n",
          "message": "TwoKeyAdmin.transferByAdmins (TwoKeyContract.sol#802-804) does not use the value returned by external calls:\n\t-economy.transfer(_to,_tokens) (TwoKeyContract.sol#803)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1755,
          "vulnerability_to_line": 1767,
          "vulnerability_code": "  function buyProduct() public payable {\n\n    // caluclate the number of units being purchased\n\n    uint _units = msg.value.div(cost);\n\n    require(msg.value == cost * _units, \"ethere sent does not divide equally into units\");\n\n    // bounty is the cost of a single token. Compute the bounty for the units\n\n    // we are buying\n\n    uint256 _bounty = bounty.mul(_units);\n\n\n\n    buyProductInternal(_units, _bounty);\n\n\n\n    _total_units = _total_units.sub(_units);\n\n  }\n",
          "message": "Reentrancy in TwoKeyAcquisitionContract.buyProduct (TwoKeyContract.sol#1755-1767):\n\tExternal calls:\n\t- buyProductInternal(_units,_bounty) (TwoKeyContract.sol#1763-1764)\n\tState variables written after the call(s):\n\t- _total_units (TwoKeyContract.sol#1765-1766)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1671,
          "vulnerability_to_line": 1712,
          "vulnerability_code": "  function buyProductInternal(uint256 _units, uint256 _bounty) public payable {\n\n    // buy coins with cut\n\n    // low level product purchase function\n\n    address customer = senderPlasma();\n\n    require(balanceOf(customer) > 0,\"no arcs\");\n\n\n\n    uint256 _total_units = total_units();\n\n//    emit Log1('_total_units',_total_units);\n\n\n\n    require(_units > 0,\"no units requested\");\n\n    require(_total_units >= _units,\"not enough units available in stock\");\n\n    address[] memory influencers = getInfluencers(customer);\n\n    uint n_influencers = influencers.length;\n\n\n\n    // distribute bounty to influencers\n\n    uint256 total_bounty = 0;\n\n    for (uint i = 0; i < n_influencers; i++) {\n\n      address influencer = plasmaOf(influencers[i]);  // influencers is in reverse order\n\n      uint256 b;\n\n      if (i == n_influencers-1) {  // if its the last influencer then all the bounty goes to it.\n\n        b = _bounty;\n\n      } else {\n\n        uint256 cut = cutOf(influencer);\n\n        if (cut > 0 && cut <= 101) {\n\n          b = _bounty.mul(cut.sub(1)).div(100);\n\n        } else {  // cut == 0 or 255 indicates equal particine of the bounty\n\n          b = _bounty.div(n_influencers-i);\n\n        }\n\n      }\n\n      xbalances[influencer] = xbalances[influencer].add(b);\n\n      emit Rewarded(influencer, b);\n\n      total_bounty = total_bounty.add(b);\n\n      _bounty = _bounty.sub(b);\n\n    }\n\n\n\n    // all that is left from the cost is given to the owner for selling the product\n\n    xbalances[owner_plasma] = xbalances[owner_plasma].add(msg.value).sub(total_bounty); // TODO we want the cost of a token to be fixed?\n\n    units[customer] = units[customer].add(_units);\n\n\n\n    emit Fulfilled(customer, units[customer]);\n\n  }\n",
          "message": "Reentrancy in TwoKeyContract.buyProductInternal (TwoKeyContract.sol#1671-1712):\n\tExternal calls:\n\t- customer = senderPlasma() (TwoKeyContract.sol#1674-1675)\n\t- require(bool,string)(balanceOf(customer) > 0,no arcs) (TwoKeyContract.sol#1675-1676)\n\t- influencers = getInfluencers(customer) (TwoKeyContract.sol#1682-1683)\n\t- influencer = plasmaOf(influencers[i]) (TwoKeyContract.sol#1688)\n\t- cut = cutOf(influencer) (TwoKeyContract.sol#1693-1694)\n\tState variables written after the call(s):\n\t- xbalances (TwoKeyContract.sol#1700-1701)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1671,
          "vulnerability_to_line": 1712,
          "vulnerability_code": "  function buyProductInternal(uint256 _units, uint256 _bounty) public payable {\n\n    // buy coins with cut\n\n    // low level product purchase function\n\n    address customer = senderPlasma();\n\n    require(balanceOf(customer) > 0,\"no arcs\");\n\n\n\n    uint256 _total_units = total_units();\n\n//    emit Log1('_total_units',_total_units);\n\n\n\n    require(_units > 0,\"no units requested\");\n\n    require(_total_units >= _units,\"not enough units available in stock\");\n\n    address[] memory influencers = getInfluencers(customer);\n\n    uint n_influencers = influencers.length;\n\n\n\n    // distribute bounty to influencers\n\n    uint256 total_bounty = 0;\n\n    for (uint i = 0; i < n_influencers; i++) {\n\n      address influencer = plasmaOf(influencers[i]);  // influencers is in reverse order\n\n      uint256 b;\n\n      if (i == n_influencers-1) {  // if its the last influencer then all the bounty goes to it.\n\n        b = _bounty;\n\n      } else {\n\n        uint256 cut = cutOf(influencer);\n\n        if (cut > 0 && cut <= 101) {\n\n          b = _bounty.mul(cut.sub(1)).div(100);\n\n        } else {  // cut == 0 or 255 indicates equal particine of the bounty\n\n          b = _bounty.div(n_influencers-i);\n\n        }\n\n      }\n\n      xbalances[influencer] = xbalances[influencer].add(b);\n\n      emit Rewarded(influencer, b);\n\n      total_bounty = total_bounty.add(b);\n\n      _bounty = _bounty.sub(b);\n\n    }\n\n\n\n    // all that is left from the cost is given to the owner for selling the product\n\n    xbalances[owner_plasma] = xbalances[owner_plasma].add(msg.value).sub(total_bounty); // TODO we want the cost of a token to be fixed?\n\n    units[customer] = units[customer].add(_units);\n\n\n\n    emit Fulfilled(customer, units[customer]);\n\n  }\n",
          "message": "Reentrancy in TwoKeyContract.buyProductInternal (TwoKeyContract.sol#1671-1712):\n\tExternal calls:\n\t- customer = senderPlasma() (TwoKeyContract.sol#1674-1675)\n\t- require(bool,string)(balanceOf(customer) > 0,no arcs) (TwoKeyContract.sol#1675-1676)\n\t- influencers = getInfluencers(customer) (TwoKeyContract.sol#1682-1683)\n\tState variables written after the call(s):\n\t- units (TwoKeyContract.sol#1708-1709)\n\t- xbalances (TwoKeyContract.sol#1707)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1719,
          "vulnerability_to_line": 1750,
          "vulnerability_code": "  constructor(TwoKeyReg _reg, TwoKeyEventSource _eventSource, string _name, string _symbol,\n\n        uint256 _tSupply, uint256 _quota, uint256 _cost, uint256 _bounty,\n\n        uint256 _units, string _ipfs_hash) public {\n\n    require(_bounty <= _cost,\"bounty bigger than cost\");\n\n    // owner = msg.sender;  // done in Ownable()\n\n    // We do an explicit type conversion from `address`\n\n    // to `TwoKeyReg` and assume that the type of\n\n    // the calling contract is TwoKeyReg, there is\n\n    // no real way to check that.\n\n    name = _name;\n\n    symbol = _symbol;\n\n    totalSupply_ = _tSupply;\n\n    cost = _cost;\n\n    bounty = _bounty;\n\n    quota = _quota;\n\n    _total_units = _units;\n\n    ipfs_hash = _ipfs_hash;\n\n    unit_decimals = 0;  // dont allow fractional units\n\n\n\n\n\n    registry = _reg;\n\n    owner_plasma = plasmaOf(owner); // can be called after setting registry\n\n    received_from[owner_plasma] = owner_plasma;  // allow owner to buy from himself\n\n    balances[owner_plasma] = _tSupply;\n\n\n\n    if (_eventSource != address(0)) {\n\n      eventSource = _eventSource;\n\n      eventSource.created(this, owner);\n\n    }\n\n  }\n\n\n",
          "message": "Reentrancy in TwoKeyAcquisitionContract.constructor (TwoKeyContract.sol#1719-1750):\n\tExternal calls:\n\t- owner_plasma = plasmaOf(owner) (TwoKeyContract.sol#1740)\n\tState variables written after the call(s):\n\t- balances (TwoKeyContract.sol#1742-1743)\n\t- eventSource (TwoKeyContract.sol#1745-1746)\n\t- received_from (TwoKeyContract.sol#1741)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1775,
          "vulnerability_to_line": 1810,
          "vulnerability_code": "  constructor(TwoKeyReg _reg, TwoKeyEventSource _eventSource, string _name, string _symbol,\n\n        uint256 _tSupply, uint256 _quota, uint256 _cost, uint256 _bounty,\n\n        string _ipfs_hash, StandardToken _erc20_token_sell_contract) public {\n\n    require(_bounty <= _cost,\"bounty bigger than cost\");\n\n    // owner = msg.sender;  // done in Ownable()\n\n    // We do an explicit type conversion from `address`\n\n    // to `TwoKeyReg` and assume that the type of\n\n    // the calling contract is TwoKeyReg, there is\n\n    // no real way to check that.\n\n    name = _name;\n\n    symbol = _symbol;\n\n    totalSupply_ = _tSupply;\n\n    cost = _cost;\n\n    bounty = _bounty;\n\n    quota = _quota;\n\n    ipfs_hash = _ipfs_hash;\n\n    registry = _reg;\n\n    owner_plasma = plasmaOf(owner); // can be called after setting registry\n\n    received_from[owner_plasma] = owner_plasma;  // allow owner to buy from himself\n\n    balances[owner_plasma] = _tSupply;\n\n    if (_eventSource != address(0)) {\n\n      eventSource = _eventSource;\n\n      eventSource.created(this, owner);\n\n    }\n\n\n\n    if (_erc20_token_sell_contract != address(0)) {\n\n      // fractional units are determined by the erc20 contract\n\n      erc20_token_sell_contract = _erc20_token_sell_contract;\n\n      unit_decimals = Call.params0(erc20_token_sell_contract, \"decimals()\");\n\n//      emit Log1('start_unit_decimals', unit_decimals); // does not work in constructor on geth\n\n      require(unit_decimals >= 0,\"unit decimals to low\");\n\n      require(unit_decimals <= 18,\"unit decimals to big\");\n\n    }\n\n  }\n\n\n",
          "message": "Reentrancy in TwoKeyPresellContract.constructor (TwoKeyContract.sol#1775-1810):\n\tExternal calls:\n\t- owner_plasma = plasmaOf(owner) (TwoKeyContract.sol#1792)\n\tState variables written after the call(s):\n\t- balances (TwoKeyContract.sol#1794-1795)\n\t- eventSource (TwoKeyContract.sol#1796-1797)\n\t- received_from (TwoKeyContract.sol#1793)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1775,
          "vulnerability_to_line": 1810,
          "vulnerability_code": "  constructor(TwoKeyReg _reg, TwoKeyEventSource _eventSource, string _name, string _symbol,\n\n        uint256 _tSupply, uint256 _quota, uint256 _cost, uint256 _bounty,\n\n        string _ipfs_hash, StandardToken _erc20_token_sell_contract) public {\n\n    require(_bounty <= _cost,\"bounty bigger than cost\");\n\n    // owner = msg.sender;  // done in Ownable()\n\n    // We do an explicit type conversion from `address`\n\n    // to `TwoKeyReg` and assume that the type of\n\n    // the calling contract is TwoKeyReg, there is\n\n    // no real way to check that.\n\n    name = _name;\n\n    symbol = _symbol;\n\n    totalSupply_ = _tSupply;\n\n    cost = _cost;\n\n    bounty = _bounty;\n\n    quota = _quota;\n\n    ipfs_hash = _ipfs_hash;\n\n    registry = _reg;\n\n    owner_plasma = plasmaOf(owner); // can be called after setting registry\n\n    received_from[owner_plasma] = owner_plasma;  // allow owner to buy from himself\n\n    balances[owner_plasma] = _tSupply;\n\n    if (_eventSource != address(0)) {\n\n      eventSource = _eventSource;\n\n      eventSource.created(this, owner);\n\n    }\n\n\n\n    if (_erc20_token_sell_contract != address(0)) {\n\n      // fractional units are determined by the erc20 contract\n\n      erc20_token_sell_contract = _erc20_token_sell_contract;\n\n      unit_decimals = Call.params0(erc20_token_sell_contract, \"decimals()\");\n\n//      emit Log1('start_unit_decimals', unit_decimals); // does not work in constructor on geth\n\n      require(unit_decimals >= 0,\"unit decimals to low\");\n\n      require(unit_decimals <= 18,\"unit decimals to big\");\n\n    }\n\n  }\n\n\n",
          "message": "Reentrancy in TwoKeyPresellContract.constructor (TwoKeyContract.sol#1775-1810):\n\tExternal calls:\n\t- owner_plasma = plasmaOf(owner) (TwoKeyContract.sol#1792)\n\t- eventSource.created(this,owner) (TwoKeyContract.sol#1797-1798)\n\tState variables written after the call(s):\n\t- erc20_token_sell_contract (TwoKeyContract.sol#1802-1803)\n\t- unit_decimals (TwoKeyContract.sol#1803-1804)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1620,
          "vulnerability_to_line": 1640,
          "vulnerability_code": "  function redeem() public {\n\n    address influencer = senderPlasma();\n\n    uint256 b = xbalances[influencer];\n\n\n\n\n\n    uint256 bmax = address(this).balance;\n\n    if (b > bmax) {\n\n      b = bmax;\n\n    }\n\n    if (b == 0) {\n\n      return;\n\n    }\n\n\n\n    xbalances[influencer] = xbalances[influencer].sub(b);\n\n    // super important to send to msg.senbder not to influencer\n\n    if(!msg.sender.send(b)) {\n\n       revert(\"failed to send\");\n\n    }\n\n  }\n\n\n",
          "message": "Reentrancy in TwoKeyContract.redeem (TwoKeyContract.sol#1620-1640):\n\tExternal calls:\n\t- influencer = senderPlasma() (TwoKeyContract.sol#1621-1622)\n\tState variables written after the call(s):\n\t- xbalances (TwoKeyContract.sol#1633-1634)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 791,
          "vulnerability_to_line": 800,
          "vulnerability_code": "\tfunction replaceOneself(address newAdminContract) external wasNotReplaced adminsVotingApproved {\n\n\t\tAdminContract adminContract = AdminContract(newAdminContract);\n\n\t\tuint balanceOfOldAdmin = economy.balanceOf(adminContract);\n\n\t\t// move to deploy\n\n\t\twasReplaced = true;\n\n\t\teconomy.transfer(newAdminContract, balanceOfOldAdmin);\n\n\t\teconomy.transferOwnership(newAdminContract);\n\n\t\texchange.transferOwnership(newAdminContract);\n\n\t\tnewAdminContract.transfer(address(this).balance);\n",
          "message": "Reentrancy in TwoKeyAdmin.replaceOneself (TwoKeyContract.sol#791-800):\n\tExternal calls:\n\t- balanceOfOldAdmin = economy.balanceOf(adminContract) (TwoKeyContract.sol#793)\n\tState variables written after the call(s):\n\t- wasReplaced (TwoKeyContract.sol#795)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 718,
          "vulnerability_to_line": 728,
          "vulnerability_code": "\tfunction sellTokens(uint256 _tokenAmount) public onlyAlive payable {\n\n\t\trequire(token.allowance(this, msg.sender) >= _tokenAmount);\n\n\t\trequire(token.transferFrom(msg.sender, this, _tokenAmount));\n\n\n\n\t\tuint256 weiAmount = _getWeiAmount(_tokenAmount);\n\n\t\trequire(weiAmount >= address(this).balance);\n\n\t    weiRaised = weiRaised.sub(weiAmount);\n\n\t    msg.sender.transfer(weiAmount);\n\n\n\n\t    emit TokenSell(msg.sender, wallet, weiAmount, _tokenAmount);\n",
          "message": "Reentrancy in TwoKeyUpgradableExchange.sellTokens (TwoKeyContract.sol#718-728):\n\tExternal calls:\n\t- require(bool)(token.allowance(this,msg.sender) >= _tokenAmount) (TwoKeyContract.sol#719)\n\t- require(bool)(token.transferFrom(msg.sender,this,_tokenAmount)) (TwoKeyContract.sol#720)\n\tState variables written after the call(s):\n\t- weiRaised (TwoKeyContract.sol#724)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1502,
          "vulnerability_to_line": 1511,
          "vulnerability_code": "  function setCutOf(address me, uint256 cut) internal {\n\n    // what is the percentage of the bounty s/he will receive when acting as an influencer\n\n    // the value 255 is used to signal equal partition with other influencers\n\n    // A sender can set the value only once in a contract\n\n    address plasma = plasmaOf(me);\n\n    require(influencer2cut[plasma] == 0 || influencer2cut[plasma] == cut, 'cut already set differently');\n\n    influencer2cut[plasma] = cut;\n\n  }\n\n\n",
          "message": "Reentrancy in TwoKeyContract.setCutOf (TwoKeyContract.sol#1502-1511):\n\tExternal calls:\n\t- plasma = plasmaOf(me) (TwoKeyContract.sol#1506-1507)\n\tState variables written after the call(s):\n\t- influencer2cut (TwoKeyContract.sol#1508-1509)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1540,
          "vulnerability_to_line": 1568,
          "vulnerability_code": "  function transferFromInternal(address _from, address _to, uint256 _value) internal returns (bool) {\n\n    // _from and _to are assumed to be already converted to plasma address (e.g. using plasmaOf)\n\n    require(_value == 1, 'can only transfer 1 ARC');\n\n    require(_from != address(0), '_from undefined');\n\n    require(_to != address(0), '_to undefined');\n\n    _from = plasmaOf(_from);\n\n    _to = plasmaOf(_to);\n\n\n\n//    // normalize address to be plasma\n\n//    _from = plasmaOf(_from);\n\n//    _to = plasmaOf(_to);\n\n\n\n    require(balances[_from] > 0,'_from does not have arcs');\n\n    balances[_from] = balances[_from].sub(1);\n\n    balances[_to] = balances[_to].add(quota);\n\n    totalSupply_ = totalSupply_.add(quota.sub(1));\n\n\n\n    emit Transfer(_from, _to, 1);\n\n    if (received_from[_to] == 0) {\n\n      // inform the 2key admin contract, once, that an influencer has joined\n\n      if (eventSource != address(0)) {\n\n        eventSource.joined(this, _from, _to);\n\n      }\n\n    }\n\n    received_from[_to] = _from;\n\n    return true;\n\n  }\n\n\n",
          "message": "Reentrancy in TwoKeyContract.transferFromInternal (TwoKeyContract.sol#1540-1568):\n\tExternal calls:\n\t- _from = plasmaOf(_from) (TwoKeyContract.sol#1545-1546)\n\t- _to = plasmaOf(_to) (TwoKeyContract.sol#1546-1547)\n\tState variables written after the call(s):\n\t- balances (TwoKeyContract.sol#1553-1554)\n\t- balances (TwoKeyContract.sol#1554-1555)\n\t- totalSupply_ (TwoKeyContract.sol#1555-1556)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 858,
          "vulnerability_to_line": 873,
          "vulnerability_code": "    function at(address _addr) internal view returns (bytes o_code) {\n\n        assembly {\n\n        // retrieve the size of the code, this needs assembly\n\n            let size := extcodesize(_addr)\n\n        // allocate output byte array - this could also be done without assembly\n\n        // by using o_code = new bytes(size)\n\n            o_code := mload(0x40)\n\n        // new \"memory end\" including padding\n\n            mstore(0x40, add(o_code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n\n        // store length in memory\n\n            mstore(o_code, size)\n\n        // actually retrieve the code, this needs assembly\n\n            extcodecopy(_addr, add(o_code, 0x20), 0, size)\n\n        }\n\n    }\n",
          "message": "GetCode.at uses assembly (TwoKeyContract.sol#858-873)\n\t- TwoKeyContract.sol#859-873\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 1059,
          "vulnerability_to_line": 1087,
          "vulnerability_code": "    function params0(address c, bytes _method) public view returns (uint answer) {\n\n        // https://medium.com/@blockchain101/calling-the-function-of-another-contract-in-solidity-f9edfa921f4c\n\n        //    dc = c;\n\n        bytes4 sig = bytes4(keccak256(_method));\n\n        assembly {\n\n        // move pointer to free memory spot\n\n            let ptr := mload(0x40)\n\n        // put function sig at memory spot\n\n            mstore(ptr,sig)\n\n\n\n            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n\n            15000, // gas limit\n\n            c, // sload(dc_slot),  // to addr. append var to _slot to access storage variable\n\n            0, // not transfer any ether (comment if using staticcall)\n\n            ptr, // Inputs are stored at location ptr\n\n            0x04, // Inputs are 0 bytes long\n\n            ptr,  //Store output over input\n\n            0x20) //Outputs are 1 bytes long\n\n\n\n            if eq(result, 0) {\n\n                revert(0, 0)\n\n            }\n\n\n\n            answer := mload(ptr) // Assign output to answer var\n\n            mstore(0x40,add(ptr,0x24)) // Set storage pointer to new space\n\n        }\n\n    }\n\n\n",
          "message": "Call.params0 uses assembly (TwoKeyContract.sol#1059-1087)\n\t- TwoKeyContract.sol#1063-1087\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 1087,
          "vulnerability_to_line": 1117,
          "vulnerability_code": "    function params1(address c, bytes _method, uint _val) public view returns (uint answer) {\n\n        // https://medium.com/@blockchain101/calling-the-function-of-another-contract-in-solidity-f9edfa921f4c\n\n        //    dc = c;\n\n        bytes4 sig = bytes4(keccak256(_method));\n\n        assembly {\n\n        // move pointer to free memory spot\n\n            let ptr := mload(0x40)\n\n        // put function sig at memory spot\n\n            mstore(ptr,sig)\n\n        // append argument after function sig\n\n            mstore(add(ptr,0x04), _val)\n\n\n\n            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n\n            15000, // gas limit\n\n            c, // sload(dc_slot),  // to addr. append var to _slot to access storage variable\n\n            0, // not transfer any ether (comment if using staticcall)\n\n            ptr, // Inputs are stored at location ptr\n\n            0x24, // Inputs are 0 bytes long\n\n            ptr,  //Store output over input\n\n            0x20) //Outputs are 1 bytes long\n\n\n\n            if eq(result, 0) {\n\n                revert(0, 0)\n\n            }\n\n\n\n            answer := mload(ptr) // Assign output to answer var\n\n            mstore(0x40,add(ptr,0x24)) // Set storage pointer to new space\n\n        }\n\n    }\n\n\n",
          "message": "Call.params1 uses assembly (TwoKeyContract.sol#1087-1117)\n\t- TwoKeyContract.sol#1091-1117\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 1117,
          "vulnerability_to_line": 1149,
          "vulnerability_code": "    function params2(address c, bytes _method, uint _val1, uint _val2) public view returns (uint answer) {\n\n        // https://medium.com/@blockchain101/calling-the-function-of-another-contract-in-solidity-f9edfa921f4c\n\n        //    dc = c;\n\n        bytes4 sig = bytes4(keccak256(_method));\n\n        assembly {\n\n        // move pointer to free memory spot\n\n            let ptr := mload(0x40)\n\n        // put function sig at memory spot\n\n            mstore(ptr,sig)\n\n        // append argument after function sig\n\n            mstore(add(ptr,0x04), _val1)\n\n            mstore(add(ptr,0x24), _val2)\n\n\n\n            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n\n            15000, // gas limit\n\n            c, // sload(dc_slot),  // to addr. append var to _slot to access storage variable\n\n            0, // not transfer any ether (comment if using staticcall)\n\n            ptr, // Inputs are stored at location ptr\n\n            0x44, // Inputs are 4 bytes for signature and 2 uint256\n\n            ptr,  //Store output over input\n\n            0x20) //Outputs are 1 uint long\n\n\n\n        // TODO cause revert\n\n        //            if eq(result, 0) {\n\n        //                revert(0, 0)\n\n        //            }\n\n\n\n            answer := mload(ptr) // Assign output to answer var\n\n            mstore(0x40,add(ptr,0x20)) // Set storage pointer to new space\n\n        }\n\n    }\n\n\n",
          "message": "Call.params2 uses assembly (TwoKeyContract.sol#1117-1149)\n\t- TwoKeyContract.sol#1121-1149\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 1149,
          "vulnerability_to_line": 1159,
          "vulnerability_code": "    function loadAddress(bytes sig, uint idx) public pure returns (address) {\n\n        address influencer;\n\n        idx += 20;\n\n        assembly\n\n        {\n\n            influencer := mload(add(sig, idx))\n\n        }\n\n        return influencer;\n\n    }\n\n\n",
          "message": "Call.loadAddress uses assembly (TwoKeyContract.sol#1149-1159)\n\t- TwoKeyContract.sol#1152-1156\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 1159,
          "vulnerability_to_line": 1169,
          "vulnerability_code": "    function loadUint8(bytes sig, uint idx) public pure returns (uint8) {\n\n        uint8 weight;\n\n        idx += 1;\n\n        assembly\n\n        {\n\n            weight := mload(add(sig, idx))\n\n        }\n\n        return weight;\n\n    }\n\n\n",
          "message": "Call.loadUint8 uses assembly (TwoKeyContract.sol#1159-1169)\n\t- TwoKeyContract.sol#1162-1166\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 1170,
          "vulnerability_to_line": 1207,
          "vulnerability_code": "    function recoverHash(bytes32 hash, bytes sig, uint idx) public pure returns (address) {\n\n        // same as recoverHash in utils/sign.js\n\n        // The signature format is a compact form of:\n\n        //   {bytes32 r}{bytes32 s}{uint8 v}\n\n        // Compact means, uint8 is not padded to 32 bytes.\n\n        require (sig.length >= 65+idx, 'bad signature length');\n\n        idx += 32;\n\n        bytes32 r;\n\n        assembly\n\n        {\n\n            r := mload(add(sig, idx))\n\n        }\n\n\n\n        idx += 32;\n\n        bytes32 s;\n\n        assembly\n\n        {\n\n            s := mload(add(sig, idx))\n\n        }\n\n\n\n        idx += 1;\n\n        uint8 v;\n\n        assembly\n\n        {\n\n            v := mload(add(sig, idx))\n\n        }\n\n        if (v >= 32) { // handle case when signature was made with ethereum web3.eth.sign or getSign which is for signing ethereum transactions\n\n            v -= 32;\n\n            bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\"; // 32 is the number of bytes in the following hash\n\n            hash = keccak256(abi.encodePacked(prefix, hash));\n\n        }\n\n        if (v <= 1) v += 27;\n\n        require(v==27 || v==28,'bad sig v');\n\n        return ecrecover(hash, v, r, s);\n\n\n\n    }\n\n\n",
          "message": "Call.recoverHash uses assembly (TwoKeyContract.sol#1170-1207)\n\t- TwoKeyContract.sol#1178-1183\n\t- TwoKeyContract.sol#1185-1190\n\t- TwoKeyContract.sol#1192-1196\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint8 public decimals;\n",
          "message": "BasicToken.decimals should be constant (TwoKeyContract.sol#96)\nBasicToken.frozen should be constant (TwoKeyContract.sol#97)\nBasicToken.name should be constant (TwoKeyContract.sol#94)\nBasicToken.symbol should be constant (TwoKeyContract.sol#95)\nBasicToken.totalSupply_ should be constant (TwoKeyContract.sol#93)\nStandardToken.decimals should be constant (TwoKeyContract.sol#227)\nStandardToken.name should be constant (TwoKeyContract.sol#225)\nStandardToken.symbol should be constant (TwoKeyContract.sol#226)\nTwoKeyAdmin.newAdmin should be constant (TwoKeyContract.sol#775)\nTwoKeyContract.decimals should be constant (TwoKeyContract.sol#1448)\nTwoKeyEconomy.decimals should be constant (TwoKeyContract.sol#421)\nTwoKeyEconomy.name should be constant (TwoKeyContract.sol#419)\nTwoKeyEconomy.symbol should be constant (TwoKeyContract.sol#420)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": 104,
          "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return totalSupply_;\n",
          "message": "BasicToken.totalSupply (TwoKeyContract.sol#102-104) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
          "message": "ERC20Basic.totalSupply (TwoKeyContract.sol#12) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 341,
          "vulnerability_to_line": 343,
          "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return totalSupply_;\n",
          "message": "StandardToken.totalSupply (TwoKeyContract.sol#341-343) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1573,
          "vulnerability_to_line": 1578,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n\n    revert('transfer not implemented');\n\n    return false;\n\n  }\n\n\n",
          "message": "TwoKeyContract.transfer (TwoKeyContract.sol#1573-1578) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 350,
          "vulnerability_to_line": 358,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n\n    require(_value <= balances[msg.sender]);\n\n    require(_to != address(0));\n\n\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    emit Transfer(msg.sender, _to, _value);\n\n    return true;\n",
          "message": "StandardToken.transfer (TwoKeyContract.sol#350-358) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": 119,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n\n    require(_value <= balances[msg.sender]);\n\n    require(_to != address(0));\n\n\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    emit Transfer(msg.sender, _to, _value);\n\n    return true;\n",
          "message": "BasicToken.transfer (TwoKeyContract.sol#111-119) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool);\n",
          "message": "ERC20Basic.transfer (TwoKeyContract.sol#14) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address _ocwner, address _spender) public view returns (uint256);\n",
          "message": "ERC20Basic.allowance (TwoKeyContract.sol#15) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 279,
          "vulnerability_to_line": 288,
          "vulnerability_code": "  function allowance(\n\n    address _owner,\n\n    address _spender\n\n   )\n\n    public\n\n    view\n\n    returns (uint256)\n\n  {\n\n    return allowed[_owner][_spender];\n",
          "message": "StandardToken.allowance (TwoKeyContract.sol#279-288) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 267,
          "vulnerability_to_line": 271,
          "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n\n    allowed[msg.sender][_spender] = _value;\n\n    emit Approval(msg.sender, _spender, _value);\n\n    return true;\n",
          "message": "StandardToken.approve (TwoKeyContract.sol#267-271) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 132,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool);\n",
          "message": "BasicToken.approve (TwoKeyContract.sol#132) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address spender, uint tokens) public returns (bool success);\n",
          "message": "ERC20Basic.approve (TwoKeyContract.sol#16) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n",
          "message": "ERC20Basic.transferFrom (TwoKeyContract.sol#17) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1537,
          "vulnerability_to_line": 1540,
          "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public onlyOwner returns (bool) {\n\n    return transferFromInternal(_from, _to, _value);\n\n  }\n",
          "message": "TwoKeyContract.transferFrom (TwoKeyContract.sol#1537-1540) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 239,
          "vulnerability_to_line": 256,
          "vulnerability_code": "  function transferFrom(\n\n    address _from,\n\n    address _to,\n\n    uint256 _value\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(_value <= balances[_from]);\n\n    require(_value <= allowed[_from][msg.sender]);\n\n    require(_to != address(0));\n\n\n\n    balances[_from] = balances[_from].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n    emit Transfer(_from, _to, _value);\n\n    return true;\n",
          "message": "StandardToken.transferFrom (TwoKeyContract.sol#239-256) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 429,
          "vulnerability_to_line": 446,
          "vulnerability_code": "  function transferFrom(\n\n    address _from,\n\n    address _to,\n\n    uint256 _value\n\n  )\n\n  public\n\n  returns (bool)\n\n  {\n\n    require(_value <= balances[_from]);\n\n//    require(_value <= allowed[_from][msg.sender]);\n\n    require(_to != address(0));\n\n\n\n    balances[_from] = balances[_from].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n//    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n    emit Transfer(_from, _to, _value);\n\n    return true;\n",
          "message": "TwoKeyEconomy.transferFrom (TwoKeyContract.sol#429-446) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 184,
          "vulnerability_to_line": 187,
          "vulnerability_code": "  function renounceOwnership() public onlyOwner {\n\n    emit OwnershipRenounced(owner);\n\n    owner = address(0);\n",
          "message": "Ownable.renounceOwnership (TwoKeyContract.sol#184-187) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 193,
          "vulnerability_to_line": 195,
          "vulnerability_code": "  function transferOwnership(address _newOwner) public onlyOwner {\n\n    _transferOwnership(_newOwner);\n",
          "message": "Ownable.transferOwnership (TwoKeyContract.sol#193-195) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 299,
          "vulnerability_to_line": 310,
          "vulnerability_code": "  function increaseApproval(\n\n    address _spender,\n\n    uint256 _addedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    allowed[msg.sender][_spender] = (\n\n      allowed[msg.sender][_spender].add(_addedValue));\n\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
          "message": "StandardToken.increaseApproval (TwoKeyContract.sol#299-310) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 321,
          "vulnerability_to_line": 336,
          "vulnerability_code": "  function decreaseApproval(\n\n    address _spender,\n\n    uint256 _subtractedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    uint256 oldValue = allowed[msg.sender][_spender];\n\n    if (_subtractedValue >= oldValue) {\n\n      allowed[msg.sender][_spender] = 0;\n\n    } else {\n\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\n    }\n\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
          "message": "StandardToken.decreaseApproval (TwoKeyContract.sol#321-336) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 391,
          "vulnerability_to_line": 393,
          "vulnerability_code": "  function destroy() public onlyOwner {\n\n    selfdestruct(owner);\n",
          "message": "Destructible.destroy (TwoKeyContract.sol#391-393) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 826,
          "vulnerability_to_line": 831,
          "vulnerability_code": "\tfunction destroy() public adminsVotingApproved {\n\n\t\tif (wasReplaced)\n\n\t\t\tselfdestruct(owner);\n\n\t\telse\n\n\t\t\tselfdestruct(newAdmin);\n",
          "message": "TwoKeyAdmin.destroy (TwoKeyContract.sol#826-831) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 395,
          "vulnerability_to_line": 397,
          "vulnerability_code": "  function destroyAndSend(address _recipient) public onlyOwner {\n\n    selfdestruct(_recipient);\n",
          "message": "Destructible.destroyAndSend (TwoKeyContract.sol#395-397) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 718,
          "vulnerability_to_line": 728,
          "vulnerability_code": "\tfunction sellTokens(uint256 _tokenAmount) public onlyAlive payable {\n\n\t\trequire(token.allowance(this, msg.sender) >= _tokenAmount);\n\n\t\trequire(token.transferFrom(msg.sender, this, _tokenAmount));\n\n\n\n\t\tuint256 weiAmount = _getWeiAmount(_tokenAmount);\n\n\t\trequire(weiAmount >= address(this).balance);\n\n\t    weiRaised = weiRaised.sub(weiAmount);\n\n\t    msg.sender.transfer(weiAmount);\n\n\n\n\t    emit TokenSell(msg.sender, wallet, weiAmount, _tokenAmount);\n",
          "message": "TwoKeyUpgradableExchange.sellTokens (TwoKeyContract.sol#718-728) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 734,
          "vulnerability_to_line": 736,
          "vulnerability_code": "\tfunction upgrade(address _to) public onlyAlive onlyOwner {\n\n\t\tfiller = _to;\n",
          "message": "TwoKeyUpgradableExchange.upgrade (TwoKeyContract.sol#734-736) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 820,
          "vulnerability_to_line": 824,
          "vulnerability_code": "\tfunction() public payable {\n\n\t\tif (wasReplaced) {\n\n\t\t\tnewAdmin.transfer(msg.value);\n\n\t\t}\n",
          "message": "TwoKeyAdmin.fallback (TwoKeyContract.sol#820-824) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 947,
          "vulnerability_to_line": 955,
          "vulnerability_code": "    function addContract(address _contractAddress) public onlyAuthorizedSubadmins {\n\n        require(_contractAddress != address(0));\n\n        bytes memory _contractCode = GetCode.at(_contractAddress);\n\n        bytes32 cc = keccak256(abi.encodePacked(_contractCode));\n\n        emit Code(cc,2);\n\n        canEmit[cc] = true;\n\n    }\n\n\n",
          "message": "TwoKeyEventSource.addContract (TwoKeyContract.sol#947-955) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 959,
          "vulnerability_to_line": 967,
          "vulnerability_code": "    function removeContract(address _contractAddress) public onlyAuthorizedSubadmins {\n\n        require(_contractAddress != address(0));\n\n        bytes memory _contractCode = GetCode.at(_contractAddress);\n\n        bytes32 cc = keccak256(abi.encodePacked(_contractCode));\n\n        emit Code(cc,3);\n\n        canEmit[cc] = false;\n\n    }\n\n\n",
          "message": "TwoKeyEventSource.removeContract (TwoKeyContract.sol#959-967) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 970,
          "vulnerability_to_line": 975,
          "vulnerability_code": "    function addAuthorizedAddress(address _newAddress) public onlyAdmin {\n\n        require(_newAddress != address(0));\n\n        authorizedSubadmins[_newAddress] = true;\n\n    }\n\n\n",
          "message": "TwoKeyEventSource.addAuthorizedAddress (TwoKeyContract.sol#970-975) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 978,
          "vulnerability_to_line": 985,
          "vulnerability_code": "    function removeAuthorizedAddress(address _authorizedAddress) public onlyAdmin {\n\n        require(_authorizedAddress != address(0));\n\n        require(authorizedSubadmins[_authorizedAddress] == true);\n\n\n\n        authorizedSubadmins[_authorizedAddress] = false;\n\n    }\n\n\n",
          "message": "TwoKeyEventSource.removeAuthorizedAddress (TwoKeyContract.sol#978-985) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 989,
          "vulnerability_to_line": 995,
          "vulnerability_code": "    function addCampaignType(bytes _contractCode, CampaignType _campaignType) public onlyAdmin {\n\n        bytes32 cc = keccak256(abi.encodePacked(_contractCode));\n\n        require(canEmit[cc] == true); //Check if this validation is needed\n\n        codeToType[cc] = _campaignType;\n\n    }\n\n\n",
          "message": "TwoKeyEventSource.addCampaignType (TwoKeyContract.sol#989-995) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 998,
          "vulnerability_to_line": 1002,
          "vulnerability_code": "    function changeAdmin(address _newAdminAddress) public onlyAdmin {\n\n        twoKeyAdmin = TwoKeyAdmin(_newAdminAddress);\n\n    }\n\n\n",
          "message": "TwoKeyEventSource.changeAdmin (TwoKeyContract.sol#998-1002) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1002,
          "vulnerability_to_line": 1007,
          "vulnerability_code": "    function checkCanEmit(bytes _contractCode) public view returns (bool) {\n\n        bytes32 cc = keccak256(abi.encodePacked(_contractCode));\n\n        return canEmit[cc];\n\n    }\n\n\n",
          "message": "TwoKeyEventSource.checkCanEmit (TwoKeyContract.sol#1002-1007) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1009,
          "vulnerability_to_line": 1013,
          "vulnerability_code": "    function created(address _campaign, address _owner) public onlyAllowedContracts{\n\n    \temit Created(_campaign, _owner);\n\n    }\n\n\n",
          "message": "TwoKeyEventSource.created (TwoKeyContract.sol#1009-1013) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1015,
          "vulnerability_to_line": 1020,
          "vulnerability_code": "    function joined(address _campaign, address _from, address _to) public onlyAllowedContracts {\n\n      activeUser[_to] = true;  // do we want to do it also for _from and created, escrow, rewarded, fulfilled\n\n    \temit Joined(_campaign, _from, _to);\n\n    }\n\n\n",
          "message": "TwoKeyEventSource.joined (TwoKeyContract.sol#1015-1020) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1022,
          "vulnerability_to_line": 1026,
          "vulnerability_code": "    function escrow(address _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts{\n\n    \temit Escrow(_campaign, _converter, _tokenID, _childContractID, _indexOrAmount, _type);\n\n    }\n\n\n",
          "message": "TwoKeyEventSource.escrow (TwoKeyContract.sol#1022-1026) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1028,
          "vulnerability_to_line": 1032,
          "vulnerability_code": "    function rewarded(address _campaign, address _to, uint256 _amount) public onlyAllowedContracts {\n\n    \temit Rewarded(_campaign, _to, _amount);\n\n\t}\n\n\n",
          "message": "TwoKeyEventSource.rewarded (TwoKeyContract.sol#1028-1032) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1034,
          "vulnerability_to_line": 1038,
          "vulnerability_code": "\tfunction fulfilled(address  _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts {\n\n\t\temit Fulfilled(_campaign, _converter, _tokenID, _childContractID, _indexOrAmount, _type);\n\n\t}\n\n\n",
          "message": "TwoKeyEventSource.fulfilled (TwoKeyContract.sol#1034-1038) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1040,
          "vulnerability_to_line": 1044,
          "vulnerability_code": "\tfunction cancelled(address  _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts{\n\n\t\temit Cancelled(_campaign, _converter, _tokenID, _childContractID, _indexOrAmount, _type);\n\n\t}\n\n\n",
          "message": "TwoKeyEventSource.cancelled (TwoKeyContract.sol#1040-1044) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1045,
          "vulnerability_to_line": 1049,
          "vulnerability_code": "    function getAdmin() public view returns (address) {\n\n        return address(twoKeyAdmin);\n\n    }\n\n\n",
          "message": "TwoKeyEventSource.getAdmin (TwoKeyContract.sol#1045-1049) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1049,
          "vulnerability_to_line": 1052,
          "vulnerability_code": "    function checkIsAuthorized(address _subAdmin) public view returns (bool) {\n\n        return authorizedSubadmins[_subAdmin];\n\n    }\n",
          "message": "TwoKeyEventSource.checkIsAuthorized (TwoKeyContract.sol#1049-1052) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1059,
          "vulnerability_to_line": 1087,
          "vulnerability_code": "    function params0(address c, bytes _method) public view returns (uint answer) {\n\n        // https://medium.com/@blockchain101/calling-the-function-of-another-contract-in-solidity-f9edfa921f4c\n\n        //    dc = c;\n\n        bytes4 sig = bytes4(keccak256(_method));\n\n        assembly {\n\n        // move pointer to free memory spot\n\n            let ptr := mload(0x40)\n\n        // put function sig at memory spot\n\n            mstore(ptr,sig)\n\n\n\n            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n\n            15000, // gas limit\n\n            c, // sload(dc_slot),  // to addr. append var to _slot to access storage variable\n\n            0, // not transfer any ether (comment if using staticcall)\n\n            ptr, // Inputs are stored at location ptr\n\n            0x04, // Inputs are 0 bytes long\n\n            ptr,  //Store output over input\n\n            0x20) //Outputs are 1 bytes long\n\n\n\n            if eq(result, 0) {\n\n                revert(0, 0)\n\n            }\n\n\n\n            answer := mload(ptr) // Assign output to answer var\n\n            mstore(0x40,add(ptr,0x24)) // Set storage pointer to new space\n\n        }\n\n    }\n\n\n",
          "message": "Call.params0 (TwoKeyContract.sol#1059-1087) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1087,
          "vulnerability_to_line": 1117,
          "vulnerability_code": "    function params1(address c, bytes _method, uint _val) public view returns (uint answer) {\n\n        // https://medium.com/@blockchain101/calling-the-function-of-another-contract-in-solidity-f9edfa921f4c\n\n        //    dc = c;\n\n        bytes4 sig = bytes4(keccak256(_method));\n\n        assembly {\n\n        // move pointer to free memory spot\n\n            let ptr := mload(0x40)\n\n        // put function sig at memory spot\n\n            mstore(ptr,sig)\n\n        // append argument after function sig\n\n            mstore(add(ptr,0x04), _val)\n\n\n\n            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n\n            15000, // gas limit\n\n            c, // sload(dc_slot),  // to addr. append var to _slot to access storage variable\n\n            0, // not transfer any ether (comment if using staticcall)\n\n            ptr, // Inputs are stored at location ptr\n\n            0x24, // Inputs are 0 bytes long\n\n            ptr,  //Store output over input\n\n            0x20) //Outputs are 1 bytes long\n\n\n\n            if eq(result, 0) {\n\n                revert(0, 0)\n\n            }\n\n\n\n            answer := mload(ptr) // Assign output to answer var\n\n            mstore(0x40,add(ptr,0x24)) // Set storage pointer to new space\n\n        }\n\n    }\n\n\n",
          "message": "Call.params1 (TwoKeyContract.sol#1087-1117) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1117,
          "vulnerability_to_line": 1149,
          "vulnerability_code": "    function params2(address c, bytes _method, uint _val1, uint _val2) public view returns (uint answer) {\n\n        // https://medium.com/@blockchain101/calling-the-function-of-another-contract-in-solidity-f9edfa921f4c\n\n        //    dc = c;\n\n        bytes4 sig = bytes4(keccak256(_method));\n\n        assembly {\n\n        // move pointer to free memory spot\n\n            let ptr := mload(0x40)\n\n        // put function sig at memory spot\n\n            mstore(ptr,sig)\n\n        // append argument after function sig\n\n            mstore(add(ptr,0x04), _val1)\n\n            mstore(add(ptr,0x24), _val2)\n\n\n\n            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n\n            15000, // gas limit\n\n            c, // sload(dc_slot),  // to addr. append var to _slot to access storage variable\n\n            0, // not transfer any ether (comment if using staticcall)\n\n            ptr, // Inputs are stored at location ptr\n\n            0x44, // Inputs are 4 bytes for signature and 2 uint256\n\n            ptr,  //Store output over input\n\n            0x20) //Outputs are 1 uint long\n\n\n\n        // TODO cause revert\n\n        //            if eq(result, 0) {\n\n        //                revert(0, 0)\n\n        //            }\n\n\n\n            answer := mload(ptr) // Assign output to answer var\n\n            mstore(0x40,add(ptr,0x20)) // Set storage pointer to new space\n\n        }\n\n    }\n\n\n",
          "message": "Call.params2 (TwoKeyContract.sol#1117-1149) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1289,
          "vulnerability_to_line": 1315,
          "vulnerability_code": "    function recoverSig(bytes sig, address old_key, address last_address) public pure returns (address[], address[], uint8[]) {\n\n        // validate sig AND\n\n        // recover the information from the signature: influencers, public_link_keys, weights/cuts\n\n        // influencers may have one more address than the keys and weights arrays\n\n        //\n\n        require(old_key != address(0),'no public link key');\n\n\n\n        address[] memory influencers;\n\n        address[] memory keys;\n\n        uint8[] memory weights;\n\n        uint[] memory offsets;\n\n        (influencers, keys, weights, offsets) = recoverSigParts(sig, last_address);\n\n\n\n        // check if we received a valid signature\n\n        for(uint i = 0; i < influencers.length; i++) {\n\n            if (i < weights.length) {\n\n                require (recoverHash(keccak256(abi.encodePacked(weights[i], keys[i], influencers[i])),sig,offsets[i]) == old_key, 'illegal signature');\n\n                old_key = keys[i];\n\n            } else {\n\n                // signed message for the last step is the address of the converter\n\n                require (recoverHash(keccak256(abi.encodePacked(influencers[i])),sig,offsets[i]) == old_key, 'illegal last signature');\n\n            }\n\n        }\n\n\n\n        return (influencers, keys, weights);\n\n    }\n",
          "message": "Call.recoverSig (TwoKeyContract.sol#1289-1315) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1358,
          "vulnerability_to_line": 1362,
          "vulnerability_code": "  function addName(string _name, address _sender) onlyOwner public {\n\n    addNameInternal(_name, _sender);\n\n  }\n\n\n",
          "message": "TwoKeyReg.addName (TwoKeyContract.sol#1358-1362) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1362,
          "vulnerability_to_line": 1366,
          "vulnerability_code": "  function addNameByUser(string _name) public {\n\n    addNameInternal(_name, msg.sender);\n\n  }\n\n\n",
          "message": "TwoKeyReg.addNameByUser (TwoKeyContract.sol#1362-1366) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1366,
          "vulnerability_to_line": 1374,
          "vulnerability_code": "  function addNameSigned(string _name, bytes external_sig) public {\n\n    bytes32 hash = keccak256(abi.encodePacked(keccak256(abi.encodePacked(\"bytes binding to name\")),\n\n      keccak256(abi.encodePacked(_name))));\n\n    address eth_address = Call.recoverHash(hash,external_sig,0);\n\n    require (msg.sender == eth_address || msg.sender == owner, \"only owner or user can change name\");\n\n    addNameInternal(_name, eth_address);\n\n  }\n\n\n",
          "message": "TwoKeyReg.addNameSigned (TwoKeyContract.sol#1366-1374) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1379,
          "vulnerability_to_line": 1384,
          "vulnerability_code": "  function setNoteByUser(bytes note) public {\n\n    // note is a message you can store with sig. For example it could be the secret you used encrypted by you\n\n    setNoteInternal(note, msg.sender);\n\n  }\n\n\n",
          "message": "TwoKeyReg.setNoteByUser (TwoKeyContract.sol#1379-1384) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1394,
          "vulnerability_to_line": 1398,
          "vulnerability_code": "  function addPlasma2EthereumByUser(bytes sig) public {\n\n    addPlasma2EthereumInternal(sig, msg.sender);\n\n  }\n\n\n",
          "message": "TwoKeyReg.addPlasma2EthereumByUser (TwoKeyContract.sol#1394-1398) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1398,
          "vulnerability_to_line": 1407,
          "vulnerability_code": "  function setPlasma2EthereumAndNoteSigned(bytes sig, bytes note, bytes external_sig) public {\n\n    bytes32 hash = keccak256(abi.encodePacked(keccak256(abi.encodePacked(\"bytes binding to ethereum-plasma\")),\n\n      keccak256(abi.encodePacked(sig,note))));\n\n    address eth_address = Call.recoverHash(hash,external_sig,0);\n\n    require (msg.sender == eth_address || msg.sender == owner, \"only owner or user can change ethereum-plasma\");\n\n    addPlasma2EthereumInternal(sig, eth_address);\n\n    setNoteInternal(note, eth_address);\n\n  }\n\n\n",
          "message": "TwoKeyReg.setPlasma2EthereumAndNoteSigned (TwoKeyContract.sol#1398-1407) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1407,
          "vulnerability_to_line": 1410,
          "vulnerability_code": "  function getName2Owner(string _name) public view returns (address) {\n\n    return name2owner[keccak256(abi.encodePacked(_name))];\n\n  }\n",
          "message": "TwoKeyReg.getName2Owner (TwoKeyContract.sol#1407-1410) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1410,
          "vulnerability_to_line": 1413,
          "vulnerability_code": "  function getOwner2Name(address _sender) public view returns (string) {\n\n    return owner2name[_sender];\n\n  }\n",
          "message": "TwoKeyReg.getOwner2Name (TwoKeyContract.sol#1410-1413) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1489,
          "vulnerability_to_line": 1502,
          "vulnerability_code": "  function ethereumOf(address me) public view returns (address) {\n\n    // used in TwoKeyWeightedVoteContract to move coins\n\n    address ethereum = me;\n\n    if (registry == address(0)) {\n\n      return ethereum;\n\n    }\n\n    ethereum = registry.plasma2ethereum(ethereum);\n\n    if (ethereum != address(0)) {\n\n      return ethereum;\n\n    }\n\n    return me; // assume me is a ethereum address. TODO not to make this assumption\n\n  }\n\n\n",
          "message": "TwoKeyContract.ethereumOf (TwoKeyContract.sol#1489-1502) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1511,
          "vulnerability_to_line": 1515,
          "vulnerability_code": "  function setCut(uint256 cut) public {\n\n    setCutOf(msg.sender, cut);\n\n  }\n\n\n",
          "message": "TwoKeyContract.setCut (TwoKeyContract.sol#1511-1515) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1519,
          "vulnerability_to_line": 1531,
          "vulnerability_code": "  function getCuts(address last_influencer) public view returns (uint256[]) {\n\n    address[] memory influencers = getInfluencers(last_influencer);\n\n    uint n_influencers = influencers.length;\n\n    uint256[] memory cuts = new uint256[](n_influencers + 1);\n\n    for (uint i = 0; i < n_influencers; i++) {\n\n      address influencer = influencers[i];\n\n      cuts[i] = cutOf(influencer);\n\n    }\n\n    cuts[n_influencers] = cutOf(last_influencer);\n\n    return cuts;\n\n  }\n\n\n",
          "message": "TwoKeyContract.getCuts (TwoKeyContract.sol#1519-1531) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1578,
          "vulnerability_to_line": 1582,
          "vulnerability_code": "  function getConstantInfo() public view returns (string,string,uint256,uint256,uint256,address,string,uint256) {\n\n    return (name,symbol,cost,bounty,quota,owner,ipfs_hash,unit_decimals);\n\n  }\n\n\n",
          "message": "TwoKeyContract.getConstantInfo (TwoKeyContract.sol#1578-1582) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1601,
          "vulnerability_to_line": 1606,
          "vulnerability_code": "  function getDynamicInfo(address me) public view returns (uint256,uint256,uint256,uint256,uint256,uint256,uint256) {\n\n    // address(this).balance is solidity reserved word for the the ETH amount deposited in the contract\n\n    return (balanceOf(me),unitsOf(me),xbalanceOf(me),totalSupply_,address(this).balance,total_units(),cutOf(me));\n\n  }\n\n\n",
          "message": "TwoKeyContract.getDynamicInfo (TwoKeyContract.sol#1601-1606) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1611,
          "vulnerability_to_line": 1620,
          "vulnerability_code": "  function buyFrom(address _from) public payable {\n\n    _from = plasmaOf(_from);\n\n    address _to = senderPlasma();\n\n    if (balanceOf(_to) == 0) {\n\n      transferFromInternal(_from, _to, 1);\n\n    }\n\n    buyProduct();\n\n  }\n\n\n",
          "message": "TwoKeyContract.buyFrom (TwoKeyContract.sol#1611-1620) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1620,
          "vulnerability_to_line": 1640,
          "vulnerability_code": "  function redeem() public {\n\n    address influencer = senderPlasma();\n\n    uint256 b = xbalances[influencer];\n\n\n\n\n\n    uint256 bmax = address(this).balance;\n\n    if (b > bmax) {\n\n      b = bmax;\n\n    }\n\n    if (b == 0) {\n\n      return;\n\n    }\n\n\n\n    xbalances[influencer] = xbalances[influencer].sub(b);\n\n    // super important to send to msg.senbder not to influencer\n\n    if(!msg.sender.send(b)) {\n\n       revert(\"failed to send\");\n\n    }\n\n  }\n\n\n",
          "message": "TwoKeyContract.redeem (TwoKeyContract.sol#1620-1640) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 1819,
          "vulnerability_to_line": 1840,
          "vulnerability_code": "  function buyProduct() public payable {\n\n//    emit Log1('unit_decimals', unit_decimals);\n\n//    unit_decimals = 18; // uint256(erc20_token_sell_contract.decimals());\n\n    // cost is the cost of a single token. Each token has 10**decimals units\n\n    uint256 _units = msg.value.mul(10**unit_decimals).div(cost);\n\n//    emit Log1('units', _units);\n\n    // bounty is the cost of a single token. Compute the bounty for the units\n\n    // we are buying\n\n    uint256 _bounty = bounty.mul(_units).div(10**unit_decimals);\n\n//    emit Log1('_bounty', _bounty);\n\n\n\n    buyProductInternal(_units, _bounty);\n\n\n\n//    emit Log1('going to transfer', _units);\n\n//    emit Log1A('coin', address(erc20_token_sell_contract));\n\n\n\n    // We are sending the bought coins to the ether address of the converter\n\n    // keep this last\n\n    require(address(erc20_token_sell_contract).call(bytes4(keccak256(\"transfer(address,uint256)\")),msg.sender,_units),\n\n      \"failed to send coins\");\n\n  }\n",
          "message": "Low level call in TwoKeyPresellContract.buyProduct (TwoKeyContract.sol#1819-1840):\n\t-require(bool,string)(address(erc20_token_sell_contract).call(bytes4(keccak256()(transfer(address,uint256))),msg.sender,_units),failed to send coins) TwoKeyContract.sol#1837-1839\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_a' of SafeMath.mul (TwoKeyContract.sol#37) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_b' of SafeMath.mul (TwoKeyContract.sol#37) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_a' of SafeMath.div (TwoKeyContract.sol#53) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_b' of SafeMath.div (TwoKeyContract.sol#53) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_a' of SafeMath.sub (TwoKeyContract.sol#63) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_b' of SafeMath.sub (TwoKeyContract.sol#63) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_a' of SafeMath.add (TwoKeyContract.sol#71) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_b' of SafeMath.add (TwoKeyContract.sol#71) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 126,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256) {\n",
          "message": "Parameter '_owner' of BasicToken.balanceOf (TwoKeyContract.sol#126) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_to' of BasicToken.transfer (TwoKeyContract.sol#111) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of BasicToken.transfer (TwoKeyContract.sol#111) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 193,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferOwnership(address _newOwner) public onlyOwner {\n",
          "message": "Parameter '_newOwner' of Ownable.transferOwnership (TwoKeyContract.sol#193) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": 205,
          "vulnerability_code": "  function _transferOwnership(address _newOwner) internal {\n\n    require(_newOwner != address(0));\n\n    emit OwnershipTransferred(owner, _newOwner);\n\n    owner = _newOwner;\n",
          "message": "Function 'Ownable._transferOwnership' (TwoKeyContract.sol#201-205) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function _transferOwnership(address _newOwner) internal {\n",
          "message": "Parameter '_newOwner' of Ownable._transferOwnership (TwoKeyContract.sol#201) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 365,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256) {\n",
          "message": "Parameter '_owner' of StandardToken.balanceOf (TwoKeyContract.sol#365) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 350,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_to' of StandardToken.transfer (TwoKeyContract.sol#350) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 350,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of StandardToken.transfer (TwoKeyContract.sol#350) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 280,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _owner,\n",
          "message": "Parameter '_owner' of StandardToken.allowance (TwoKeyContract.sol#280) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 281,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _spender\n",
          "message": "Parameter '_spender' of StandardToken.allowance (TwoKeyContract.sol#281) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 267,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_spender' of StandardToken.approve (TwoKeyContract.sol#267) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 267,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of StandardToken.approve (TwoKeyContract.sol#267) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 240,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _from,\n",
          "message": "Parameter '_from' of StandardToken.transferFrom (TwoKeyContract.sol#240) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 241,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _to,\n",
          "message": "Parameter '_to' of StandardToken.transferFrom (TwoKeyContract.sol#241) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 242,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of StandardToken.transferFrom (TwoKeyContract.sol#242) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 300,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _spender,\n",
          "message": "Parameter '_spender' of StandardToken.increaseApproval (TwoKeyContract.sol#300) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 301,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _addedValue\n",
          "message": "Parameter '_addedValue' of StandardToken.increaseApproval (TwoKeyContract.sol#301) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 322,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _spender,\n",
          "message": "Parameter '_spender' of StandardToken.decreaseApproval (TwoKeyContract.sol#322) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 323,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _subtractedValue\n",
          "message": "Parameter '_subtractedValue' of StandardToken.decreaseApproval (TwoKeyContract.sol#323) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 395,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function destroyAndSend(address _recipient) public onlyOwner {\n",
          "message": "Parameter '_recipient' of Destructible.destroyAndSend (TwoKeyContract.sol#395) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 430,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _from,\n",
          "message": "Parameter '_from' of TwoKeyEconomy.transferFrom (TwoKeyContract.sol#430) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 431,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _to,\n",
          "message": "Parameter '_to' of TwoKeyEconomy.transferFrom (TwoKeyContract.sol#431) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 432,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of TwoKeyEconomy.transferFrom (TwoKeyContract.sol#432) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 463,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ERC20Basic _token,\n",
          "message": "Parameter '_token' of SafeERC20.safeTransfer (TwoKeyContract.sol#463) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 464,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _to,\n",
          "message": "Parameter '_to' of SafeERC20.safeTransfer (TwoKeyContract.sol#464) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 465,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of SafeERC20.safeTransfer (TwoKeyContract.sol#465) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 473,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ERC20 _token,\n",
          "message": "Parameter '_token' of SafeERC20.safeTransferFrom (TwoKeyContract.sol#473) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 474,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _from,\n",
          "message": "Parameter '_from' of SafeERC20.safeTransferFrom (TwoKeyContract.sol#474) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 475,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _to,\n",
          "message": "Parameter '_to' of SafeERC20.safeTransferFrom (TwoKeyContract.sol#475) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 476,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of SafeERC20.safeTransferFrom (TwoKeyContract.sol#476) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 484,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ERC20 _token,\n",
          "message": "Parameter '_token' of SafeERC20.safeApprove (TwoKeyContract.sol#484) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 485,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _spender,\n",
          "message": "Parameter '_spender' of SafeERC20.safeApprove (TwoKeyContract.sol#485) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 486,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of SafeERC20.safeApprove (TwoKeyContract.sol#486) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 550,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n",
          "message": "Parameter '_rate' of Crowdsale. (TwoKeyContract.sol#550) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 550,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n",
          "message": "Parameter '_wallet' of Crowdsale. (TwoKeyContract.sol#550) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 550,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n",
          "message": "Parameter '_token' of Crowdsale. (TwoKeyContract.sol#550) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 575,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function buyTokens(address _beneficiary) public payable {\n",
          "message": "Parameter '_beneficiary' of Crowdsale.buyTokens (TwoKeyContract.sol#575) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 612,
          "vulnerability_to_line": 620,
          "vulnerability_code": "  function _preValidatePurchase(\n\n    address _beneficiary,\n\n    uint256 _weiAmount\n\n  )\n\n  internal\n\n  {\n\n    require(_beneficiary != address(0));\n\n    require(_weiAmount != 0);\n",
          "message": "Function 'Crowdsale._preValidatePurchase' (TwoKeyContract.sol#612-620) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 613,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _beneficiary,\n",
          "message": "Parameter '_beneficiary' of Crowdsale._preValidatePurchase (TwoKeyContract.sol#613) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 614,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _weiAmount\n",
          "message": "Parameter '_weiAmount' of Crowdsale._preValidatePurchase (TwoKeyContract.sol#614) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 627,
          "vulnerability_to_line": 634,
          "vulnerability_code": "  function _postValidatePurchase(\n\n    address _beneficiary,\n\n    uint256 _weiAmount\n\n  )\n\n  internal\n\n  {\n\n    // optional override\n",
          "message": "Function 'Crowdsale._postValidatePurchase' (TwoKeyContract.sol#627-634) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 641,
          "vulnerability_to_line": 648,
          "vulnerability_code": "  function _deliverTokens(\n\n    address _beneficiary,\n\n    uint256 _tokenAmount\n\n  )\n\n  internal\n\n  {\n\n    token.safeTransfer(_beneficiary, _tokenAmount);\n",
          "message": "Function 'Crowdsale._deliverTokens' (TwoKeyContract.sol#641-648) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 642,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _beneficiary,\n",
          "message": "Parameter '_beneficiary' of Crowdsale._deliverTokens (TwoKeyContract.sol#642) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 643,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _tokenAmount\n",
          "message": "Parameter '_tokenAmount' of Crowdsale._deliverTokens (TwoKeyContract.sol#643) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 655,
          "vulnerability_to_line": 662,
          "vulnerability_code": "  function _processPurchase(\n\n    address _beneficiary,\n\n    uint256 _tokenAmount\n\n  )\n\n  internal\n\n  {\n\n    _deliverTokens(_beneficiary, _tokenAmount);\n",
          "message": "Function 'Crowdsale._processPurchase' (TwoKeyContract.sol#655-662) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 656,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _beneficiary,\n",
          "message": "Parameter '_beneficiary' of Crowdsale._processPurchase (TwoKeyContract.sol#656) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 657,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _tokenAmount\n",
          "message": "Parameter '_tokenAmount' of Crowdsale._processPurchase (TwoKeyContract.sol#657) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 669,
          "vulnerability_to_line": 676,
          "vulnerability_code": "  function _updatePurchasingState(\n\n    address _beneficiary,\n\n    uint256 _weiAmount\n\n  )\n\n  internal\n\n  {\n\n    // optional override\n",
          "message": "Function 'Crowdsale._updatePurchasingState' (TwoKeyContract.sol#669-676) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 683,
          "vulnerability_to_line": 687,
          "vulnerability_code": "  function _getTokenAmount(uint256 _weiAmount)\n\n  internal view returns (uint256)\n\n  {\n\n    return _weiAmount.mul(rate);\n",
          "message": "Function 'Crowdsale._getTokenAmount' (TwoKeyContract.sol#683-687) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 683,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function _getTokenAmount(uint256 _weiAmount)\n",
          "message": "Parameter '_weiAmount' of Crowdsale._getTokenAmount (TwoKeyContract.sol#683) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 692,
          "vulnerability_to_line": 694,
          "vulnerability_code": "  function _forwardFunds() internal {\n\n    wallet.transfer(msg.value);\n",
          "message": "Function 'Crowdsale._forwardFunds' (TwoKeyContract.sol#692-694) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 743,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction buyTokens(address _beneficiary) public onlyAlive payable {\n",
          "message": "Parameter '_beneficiary' of TwoKeyUpgradableExchange.buyTokens (TwoKeyContract.sol#743) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 718,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction sellTokens(uint256 _tokenAmount) public onlyAlive payable {\n",
          "message": "Parameter '_tokenAmount' of TwoKeyUpgradableExchange.sellTokens (TwoKeyContract.sol#718) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 730,
          "vulnerability_to_line": 732,
          "vulnerability_code": "\tfunction _getWeiAmount(uint256 _tokenAmount) internal view returns (uint256) {\n\n\t    return _tokenAmount.div(rate);\n",
          "message": "Function 'TwoKeyUpgradableExchange._getWeiAmount' (TwoKeyContract.sol#730-732) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 730,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction _getWeiAmount(uint256 _tokenAmount) internal view returns (uint256) {\n",
          "message": "Parameter '_tokenAmount' of TwoKeyUpgradableExchange._getWeiAmount (TwoKeyContract.sol#730) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 734,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction upgrade(address _to) public onlyAlive onlyOwner {\n",
          "message": "Parameter '_to' of TwoKeyUpgradableExchange.upgrade (TwoKeyContract.sol#734) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 802,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction transferByAdmins(address _to, uint256 _tokens) external wasNotReplaced adminsVotingApproved {\n",
          "message": "Parameter '_to' of TwoKeyAdmin.transferByAdmins (TwoKeyContract.sol#802) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 802,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction transferByAdmins(address _to, uint256 _tokens) external wasNotReplaced adminsVotingApproved {\n",
          "message": "Parameter '_tokens' of TwoKeyAdmin.transferByAdmins (TwoKeyContract.sol#802) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 779,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tTwoKeyEconomy _economy,\n",
          "message": "Parameter '_economy' of TwoKeyAdmin. (TwoKeyContract.sol#779) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 780,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\taddress _electorateAdmins,\n",
          "message": "Parameter '_electorateAdmins' of TwoKeyAdmin. (TwoKeyContract.sol#780) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 781,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tTwoKeyUpgradableExchange _exchange) Ownable() Destructible() payable public {\n",
          "message": "Parameter '_exchange' of TwoKeyAdmin. (TwoKeyContract.sol#781) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 939,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _twoKeyAdminAddress) public {\n",
          "message": "Parameter '_twoKeyAdminAddress' of TwoKeyEventSource. (TwoKeyContract.sol#939) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 947,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addContract(address _contractAddress) public onlyAuthorizedSubadmins {\n",
          "message": "Parameter '_contractAddress' of TwoKeyEventSource.addContract (TwoKeyContract.sol#947) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 959,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function removeContract(address _contractAddress) public onlyAuthorizedSubadmins {\n",
          "message": "Parameter '_contractAddress' of TwoKeyEventSource.removeContract (TwoKeyContract.sol#959) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 970,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addAuthorizedAddress(address _newAddress) public onlyAdmin {\n",
          "message": "Parameter '_newAddress' of TwoKeyEventSource.addAuthorizedAddress (TwoKeyContract.sol#970) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 978,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function removeAuthorizedAddress(address _authorizedAddress) public onlyAdmin {\n",
          "message": "Parameter '_authorizedAddress' of TwoKeyEventSource.removeAuthorizedAddress (TwoKeyContract.sol#978) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 989,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addCampaignType(bytes _contractCode, CampaignType _campaignType) public onlyAdmin {\n",
          "message": "Parameter '_contractCode' of TwoKeyEventSource.addCampaignType (TwoKeyContract.sol#989) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 989,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addCampaignType(bytes _contractCode, CampaignType _campaignType) public onlyAdmin {\n",
          "message": "Parameter '_campaignType' of TwoKeyEventSource.addCampaignType (TwoKeyContract.sol#989) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 998,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function changeAdmin(address _newAdminAddress) public onlyAdmin {\n",
          "message": "Parameter '_newAdminAddress' of TwoKeyEventSource.changeAdmin (TwoKeyContract.sol#998) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1002,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function checkCanEmit(bytes _contractCode) public view returns (bool) {\n",
          "message": "Parameter '_contractCode' of TwoKeyEventSource.checkCanEmit (TwoKeyContract.sol#1002) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1009,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function created(address _campaign, address _owner) public onlyAllowedContracts{\n",
          "message": "Parameter '_campaign' of TwoKeyEventSource.created (TwoKeyContract.sol#1009) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1009,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function created(address _campaign, address _owner) public onlyAllowedContracts{\n",
          "message": "Parameter '_owner' of TwoKeyEventSource.created (TwoKeyContract.sol#1009) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1015,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function joined(address _campaign, address _from, address _to) public onlyAllowedContracts {\n",
          "message": "Parameter '_campaign' of TwoKeyEventSource.joined (TwoKeyContract.sol#1015) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1015,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function joined(address _campaign, address _from, address _to) public onlyAllowedContracts {\n",
          "message": "Parameter '_from' of TwoKeyEventSource.joined (TwoKeyContract.sol#1015) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1015,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function joined(address _campaign, address _from, address _to) public onlyAllowedContracts {\n",
          "message": "Parameter '_to' of TwoKeyEventSource.joined (TwoKeyContract.sol#1015) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1022,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function escrow(address _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts{\n",
          "message": "Parameter '_campaign' of TwoKeyEventSource.escrow (TwoKeyContract.sol#1022) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1022,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function escrow(address _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts{\n",
          "message": "Parameter '_converter' of TwoKeyEventSource.escrow (TwoKeyContract.sol#1022) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1022,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function escrow(address _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts{\n",
          "message": "Parameter '_tokenID' of TwoKeyEventSource.escrow (TwoKeyContract.sol#1022) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1022,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function escrow(address _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts{\n",
          "message": "Parameter '_childContractID' of TwoKeyEventSource.escrow (TwoKeyContract.sol#1022) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1022,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function escrow(address _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts{\n",
          "message": "Parameter '_indexOrAmount' of TwoKeyEventSource.escrow (TwoKeyContract.sol#1022) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1022,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function escrow(address _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts{\n",
          "message": "Parameter '_type' of TwoKeyEventSource.escrow (TwoKeyContract.sol#1022) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1028,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function rewarded(address _campaign, address _to, uint256 _amount) public onlyAllowedContracts {\n",
          "message": "Parameter '_campaign' of TwoKeyEventSource.rewarded (TwoKeyContract.sol#1028) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1028,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function rewarded(address _campaign, address _to, uint256 _amount) public onlyAllowedContracts {\n",
          "message": "Parameter '_to' of TwoKeyEventSource.rewarded (TwoKeyContract.sol#1028) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1028,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function rewarded(address _campaign, address _to, uint256 _amount) public onlyAllowedContracts {\n",
          "message": "Parameter '_amount' of TwoKeyEventSource.rewarded (TwoKeyContract.sol#1028) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1034,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction fulfilled(address  _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts {\n",
          "message": "Parameter '_campaign' of TwoKeyEventSource.fulfilled (TwoKeyContract.sol#1034) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1034,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction fulfilled(address  _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts {\n",
          "message": "Parameter '_converter' of TwoKeyEventSource.fulfilled (TwoKeyContract.sol#1034) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1034,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction fulfilled(address  _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts {\n",
          "message": "Parameter '_tokenID' of TwoKeyEventSource.fulfilled (TwoKeyContract.sol#1034) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1034,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction fulfilled(address  _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts {\n",
          "message": "Parameter '_childContractID' of TwoKeyEventSource.fulfilled (TwoKeyContract.sol#1034) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1034,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction fulfilled(address  _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts {\n",
          "message": "Parameter '_indexOrAmount' of TwoKeyEventSource.fulfilled (TwoKeyContract.sol#1034) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1034,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction fulfilled(address  _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts {\n",
          "message": "Parameter '_type' of TwoKeyEventSource.fulfilled (TwoKeyContract.sol#1034) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1040,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction cancelled(address  _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts{\n",
          "message": "Parameter '_campaign' of TwoKeyEventSource.cancelled (TwoKeyContract.sol#1040) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1040,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction cancelled(address  _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts{\n",
          "message": "Parameter '_converter' of TwoKeyEventSource.cancelled (TwoKeyContract.sol#1040) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1040,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction cancelled(address  _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts{\n",
          "message": "Parameter '_tokenID' of TwoKeyEventSource.cancelled (TwoKeyContract.sol#1040) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1040,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction cancelled(address  _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts{\n",
          "message": "Parameter '_childContractID' of TwoKeyEventSource.cancelled (TwoKeyContract.sol#1040) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1040,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction cancelled(address  _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts{\n",
          "message": "Parameter '_indexOrAmount' of TwoKeyEventSource.cancelled (TwoKeyContract.sol#1040) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1040,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction cancelled(address  _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts{\n",
          "message": "Parameter '_type' of TwoKeyEventSource.cancelled (TwoKeyContract.sol#1040) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1049,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function checkIsAuthorized(address _subAdmin) public view returns (bool) {\n",
          "message": "Parameter '_subAdmin' of TwoKeyEventSource.checkIsAuthorized (TwoKeyContract.sol#1049) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1059,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params0(address c, bytes _method) public view returns (uint answer) {\n",
          "message": "Parameter '_method' of Call.params0 (TwoKeyContract.sol#1059) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1087,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params1(address c, bytes _method, uint _val) public view returns (uint answer) {\n",
          "message": "Parameter '_method' of Call.params1 (TwoKeyContract.sol#1087) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1117,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params2(address c, bytes _method, uint _val1, uint _val2) public view returns (uint answer) {\n",
          "message": "Parameter '_method' of Call.params2 (TwoKeyContract.sol#1117) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1222,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigParts(bytes sig, address last_address) private pure returns (address[], address[], uint8[], uint[]) {\n",
          "message": "Parameter 'last_address' of Call.recoverSigParts (TwoKeyContract.sol#1222) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1289,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSig(bytes sig, address old_key, address last_address) public pure returns (address[], address[], uint8[]) {\n",
          "message": "Parameter 'old_key' of Call.recoverSig (TwoKeyContract.sol#1289) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1289,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSig(bytes sig, address old_key, address last_address) public pure returns (address[], address[], uint8[]) {\n",
          "message": "Parameter 'last_address' of Call.recoverSig (TwoKeyContract.sol#1289) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1340,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(TwoKeyEventSource _eventSource) public {\n",
          "message": "Parameter '_eventSource' of TwoKeyReg. (TwoKeyContract.sol#1340) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1344,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addNameInternal(string _name, address _sender) private {\n",
          "message": "Parameter '_name' of TwoKeyReg.addNameInternal (TwoKeyContract.sol#1344) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1344,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addNameInternal(string _name, address _sender) private {\n",
          "message": "Parameter '_sender' of TwoKeyReg.addNameInternal (TwoKeyContract.sol#1344) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1358,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addName(string _name, address _sender) onlyOwner public {\n",
          "message": "Parameter '_name' of TwoKeyReg.addName (TwoKeyContract.sol#1358) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1358,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addName(string _name, address _sender) onlyOwner public {\n",
          "message": "Parameter '_sender' of TwoKeyReg.addName (TwoKeyContract.sol#1358) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1362,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addNameByUser(string _name) public {\n",
          "message": "Parameter '_name' of TwoKeyReg.addNameByUser (TwoKeyContract.sol#1362) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1366,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addNameSigned(string _name, bytes external_sig) public {\n",
          "message": "Parameter '_name' of TwoKeyReg.addNameSigned (TwoKeyContract.sol#1366) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1366,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addNameSigned(string _name, bytes external_sig) public {\n",
          "message": "Parameter 'external_sig' of TwoKeyReg.addNameSigned (TwoKeyContract.sol#1366) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1384,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addPlasma2EthereumInternal(bytes sig, address eth_address) private {\n",
          "message": "Parameter 'eth_address' of TwoKeyReg.addPlasma2EthereumInternal (TwoKeyContract.sol#1384) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1398,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setPlasma2EthereumAndNoteSigned(bytes sig, bytes note, bytes external_sig) public {\n",
          "message": "Parameter 'external_sig' of TwoKeyReg.setPlasma2EthereumAndNoteSigned (TwoKeyContract.sol#1398) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1407,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getName2Owner(string _name) public view returns (address) {\n",
          "message": "Parameter '_name' of TwoKeyReg.getName2Owner (TwoKeyContract.sol#1407) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1410,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getOwner2Name(address _sender) public view returns (string) {\n",
          "message": "Parameter '_sender' of TwoKeyReg.getOwner2Name (TwoKeyContract.sol#1410) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1537,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public onlyOwner returns (bool) {\n",
          "message": "Parameter '_from' of TwoKeyContract.transferFrom (TwoKeyContract.sol#1537) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1537,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public onlyOwner returns (bool) {\n",
          "message": "Parameter '_to' of TwoKeyContract.transferFrom (TwoKeyContract.sol#1537) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1537,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public onlyOwner returns (bool) {\n",
          "message": "Parameter '_value' of TwoKeyContract.transferFrom (TwoKeyContract.sol#1537) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1519,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getCuts(address last_influencer) public view returns (uint256[]) {\n",
          "message": "Parameter 'last_influencer' of TwoKeyContract.getCuts (TwoKeyContract.sol#1519) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1540,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFromInternal(address _from, address _to, uint256 _value) internal returns (bool) {\n",
          "message": "Parameter '_from' of TwoKeyContract.transferFromInternal (TwoKeyContract.sol#1540) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1540,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFromInternal(address _from, address _to, uint256 _value) internal returns (bool) {\n",
          "message": "Parameter '_to' of TwoKeyContract.transferFromInternal (TwoKeyContract.sol#1540) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1540,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFromInternal(address _from, address _to, uint256 _value) internal returns (bool) {\n",
          "message": "Parameter '_value' of TwoKeyContract.transferFromInternal (TwoKeyContract.sol#1540) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1582,
          "vulnerability_to_line": 1584,
          "vulnerability_code": "  function total_units() public view returns (uint256);\n\n\n",
          "message": "Function 'TwoKeyContract.total_units' (TwoKeyContract.sol#1582-1584) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1611,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function buyFrom(address _from) public payable {\n",
          "message": "Parameter '_from' of TwoKeyContract.buyFrom (TwoKeyContract.sol#1611) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1671,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function buyProductInternal(uint256 _units, uint256 _bounty) public payable {\n",
          "message": "Parameter '_units' of TwoKeyContract.buyProductInternal (TwoKeyContract.sol#1671) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1671,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function buyProductInternal(uint256 _units, uint256 _bounty) public payable {\n",
          "message": "Parameter '_bounty' of TwoKeyContract.buyProductInternal (TwoKeyContract.sol#1671) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1444,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address owner_plasma; // must be set in constructor\n",
          "message": "Variable 'TwoKeyContract.owner_plasma' (TwoKeyContract.sol#1444) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1446,
          "vulnerability_to_line": 1447,
          "vulnerability_code": "  string public ipfs_hash;\n",
          "message": "Variable 'TwoKeyContract.ipfs_hash' (TwoKeyContract.sol#1446-1447) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1452,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 unit_decimals;  // units being sold can be fractional (for example tokens in ERC20)\n",
          "message": "Variable 'TwoKeyContract.unit_decimals' (TwoKeyContract.sol#1452) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1456,
          "vulnerability_to_line": 1457,
          "vulnerability_code": "  mapping (address => address) public received_from;\n",
          "message": "Variable 'TwoKeyContract.received_from' (TwoKeyContract.sol#1456-1457) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1750,
          "vulnerability_to_line": 1754,
          "vulnerability_code": "  function total_units() public view returns (uint256) {\n\n    return _total_units;\n\n  }\n\n\n",
          "message": "Function 'TwoKeyAcquisitionContract.total_units' (TwoKeyContract.sol#1750-1754) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1719,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(TwoKeyReg _reg, TwoKeyEventSource _eventSource, string _name, string _symbol,\n",
          "message": "Parameter '_reg' of TwoKeyAcquisitionContract. (TwoKeyContract.sol#1719) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1719,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(TwoKeyReg _reg, TwoKeyEventSource _eventSource, string _name, string _symbol,\n",
          "message": "Parameter '_eventSource' of TwoKeyAcquisitionContract. (TwoKeyContract.sol#1719) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1719,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(TwoKeyReg _reg, TwoKeyEventSource _eventSource, string _name, string _symbol,\n",
          "message": "Parameter '_name' of TwoKeyAcquisitionContract. (TwoKeyContract.sol#1719) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1719,
          "vulnerability_to_line": 1720,
          "vulnerability_code": "  constructor(TwoKeyReg _reg, TwoKeyEventSource _eventSource, string _name, string _symbol,\n",
          "message": "Parameter '_symbol' of TwoKeyAcquisitionContract. (TwoKeyContract.sol#1719-1720) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1720,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _tSupply, uint256 _quota, uint256 _cost, uint256 _bounty,\n",
          "message": "Parameter '_tSupply' of TwoKeyAcquisitionContract. (TwoKeyContract.sol#1720) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1720,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _tSupply, uint256 _quota, uint256 _cost, uint256 _bounty,\n",
          "message": "Parameter '_quota' of TwoKeyAcquisitionContract. (TwoKeyContract.sol#1720) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1720,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _tSupply, uint256 _quota, uint256 _cost, uint256 _bounty,\n",
          "message": "Parameter '_cost' of TwoKeyAcquisitionContract. (TwoKeyContract.sol#1720) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1720,
          "vulnerability_to_line": 1721,
          "vulnerability_code": "        uint256 _tSupply, uint256 _quota, uint256 _cost, uint256 _bounty,\n",
          "message": "Parameter '_bounty' of TwoKeyAcquisitionContract. (TwoKeyContract.sol#1720-1721) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1721,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _units, string _ipfs_hash) public {\n",
          "message": "Parameter '_units' of TwoKeyAcquisitionContract. (TwoKeyContract.sol#1721) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1721,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _units, string _ipfs_hash) public {\n",
          "message": "Parameter '_ipfs_hash' of TwoKeyAcquisitionContract. (TwoKeyContract.sol#1721) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1716,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 public _total_units; // total number of units on offer\n",
          "message": "Variable 'TwoKeyAcquisitionContract._total_units' (TwoKeyContract.sol#1716) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1810,
          "vulnerability_to_line": 1817,
          "vulnerability_code": "  function total_units() public view returns (uint256) {\n\n    uint256 _total_units;\n\n//    _total_units = erc20_token_sell_contract.balanceOf(address(this));\n\n    _total_units = Call.params1(erc20_token_sell_contract, \"balanceOf(address)\",uint(this));\n\n    return _total_units;\n\n  }\n\n\n",
          "message": "Function 'TwoKeyPresellContract.total_units' (TwoKeyContract.sol#1810-1817) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1775,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(TwoKeyReg _reg, TwoKeyEventSource _eventSource, string _name, string _symbol,\n",
          "message": "Parameter '_reg' of TwoKeyPresellContract. (TwoKeyContract.sol#1775) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1775,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(TwoKeyReg _reg, TwoKeyEventSource _eventSource, string _name, string _symbol,\n",
          "message": "Parameter '_eventSource' of TwoKeyPresellContract. (TwoKeyContract.sol#1775) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1775,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(TwoKeyReg _reg, TwoKeyEventSource _eventSource, string _name, string _symbol,\n",
          "message": "Parameter '_name' of TwoKeyPresellContract. (TwoKeyContract.sol#1775) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1775,
          "vulnerability_to_line": 1776,
          "vulnerability_code": "  constructor(TwoKeyReg _reg, TwoKeyEventSource _eventSource, string _name, string _symbol,\n",
          "message": "Parameter '_symbol' of TwoKeyPresellContract. (TwoKeyContract.sol#1775-1776) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1776,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _tSupply, uint256 _quota, uint256 _cost, uint256 _bounty,\n",
          "message": "Parameter '_tSupply' of TwoKeyPresellContract. (TwoKeyContract.sol#1776) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1776,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _tSupply, uint256 _quota, uint256 _cost, uint256 _bounty,\n",
          "message": "Parameter '_quota' of TwoKeyPresellContract. (TwoKeyContract.sol#1776) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1776,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _tSupply, uint256 _quota, uint256 _cost, uint256 _bounty,\n",
          "message": "Parameter '_cost' of TwoKeyPresellContract. (TwoKeyContract.sol#1776) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1776,
          "vulnerability_to_line": 1777,
          "vulnerability_code": "        uint256 _tSupply, uint256 _quota, uint256 _cost, uint256 _bounty,\n",
          "message": "Parameter '_bounty' of TwoKeyPresellContract. (TwoKeyContract.sol#1776-1777) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1777,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _ipfs_hash, StandardToken _erc20_token_sell_contract) public {\n",
          "message": "Parameter '_ipfs_hash' of TwoKeyPresellContract. (TwoKeyContract.sol#1777) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1777,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _ipfs_hash, StandardToken _erc20_token_sell_contract) public {\n",
          "message": "Parameter '_erc20_token_sell_contract' of TwoKeyPresellContract. (TwoKeyContract.sol#1777) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1770,
          "vulnerability_to_line": 1771,
          "vulnerability_code": "  StandardToken public erc20_token_sell_contract;\n",
          "message": "Variable 'TwoKeyPresellContract.erc20_token_sell_contract' (TwoKeyContract.sol#1770-1771) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 186,
          "vulnerability_to_line": null,
          "vulnerability_code": "    owner = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 267,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 1303,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i = 0; i < influencers.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 1248,
          "vulnerability_to_line": null,
          "vulnerability_code": "        while (idx + 65 <= sig.length) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 858,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function at(address _addr) internal view returns (bytes o_code) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 1059,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params0(address c, bytes _method) public view returns (uint answer) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 1087,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params1(address c, bytes _method, uint _val) public view returns (uint answer) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 1117,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params2(address c, bytes _method, uint _val1, uint _val2) public view returns (uint answer) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1303,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i = 0; i < influencers.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1523,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint i = 0; i < n_influencers; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1687,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint i = 0; i < n_influencers; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1248,
          "vulnerability_to_line": null,
          "vulnerability_code": "        while (idx + 65 <= sig.length) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1649,
          "vulnerability_to_line": null,
          "vulnerability_code": "    while (true) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 1714,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract TwoKeyAcquisitionContract is TwoKeyContract\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 1769,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract TwoKeyPresellContract is TwoKeyContract {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 210,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 373,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 381,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 402,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 414,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 452,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 496,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 699,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 751,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 849,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 877,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1056,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1319,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1417,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24; //We have to specify what version of compiler this code will use\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 1635,
          "vulnerability_to_line": null,
          "vulnerability_code": "    if(!msg.sender.send(b)) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 89,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 222,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 513,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 1438,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SEND",
          "vulnerability_from_line": 1635,
          "vulnerability_to_line": null,
          "vulnerability_code": "    if(!msg.sender.send(b)) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 1149,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function loadAddress(bytes sig, uint idx) public pure returns (address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 1159,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function loadUint8(bytes sig, uint idx) public pure returns (uint8) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 1170,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverHash(bytes32 hash, bytes sig, uint idx) public pure returns (address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 858,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function at(address _addr) internal view returns (bytes o_code) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 1059,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params0(address c, bytes _method) public view returns (uint answer) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 1087,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params1(address c, bytes _method, uint _val) public view returns (uint answer) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 1117,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params2(address c, bytes _method, uint _val1, uint _val2) public view returns (uint answer) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1207,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigMemory(bytes sig) private pure returns (address[], address[], uint8[], uint[], uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1222,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigParts(bytes sig, address last_address) private pure returns (address[], address[], uint8[], uint[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1837,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(address(erc20_token_sell_contract).call(bytes4(keccak256(\"transfer(address,uint256)\")),msg.sender,_units),\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 820,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction() public payable {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 858,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function at(address _addr) internal view returns (bytes o_code) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 989,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addCampaignType(bytes _contractCode, CampaignType _campaignType) public onlyAdmin {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1002,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function checkCanEmit(bytes _contractCode) public view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1059,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params0(address c, bytes _method) public view returns (uint answer) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1087,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params1(address c, bytes _method, uint _val) public view returns (uint answer) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1117,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params2(address c, bytes _method, uint _val1, uint _val2) public view returns (uint answer) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1149,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function loadAddress(bytes sig, uint idx) public pure returns (address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1159,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function loadUint8(bytes sig, uint idx) public pure returns (uint8) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1170,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverHash(bytes32 hash, bytes sig, uint idx) public pure returns (address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1207,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigMemory(bytes sig) private pure returns (address[], address[], uint8[], uint[], uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1207,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigMemory(bytes sig) private pure returns (address[], address[], uint8[], uint[], uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1207,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigMemory(bytes sig) private pure returns (address[], address[], uint8[], uint[], uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1207,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigMemory(bytes sig) private pure returns (address[], address[], uint8[], uint[], uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1207,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigMemory(bytes sig) private pure returns (address[], address[], uint8[], uint[], uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1222,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigParts(bytes sig, address last_address) private pure returns (address[], address[], uint8[], uint[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1222,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigParts(bytes sig, address last_address) private pure returns (address[], address[], uint8[], uint[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1222,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigParts(bytes sig, address last_address) private pure returns (address[], address[], uint8[], uint[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1222,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigParts(bytes sig, address last_address) private pure returns (address[], address[], uint8[], uint[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1222,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigParts(bytes sig, address last_address) private pure returns (address[], address[], uint8[], uint[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1289,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSig(bytes sig, address old_key, address last_address) public pure returns (address[], address[], uint8[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1289,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSig(bytes sig, address old_key, address last_address) public pure returns (address[], address[], uint8[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1289,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSig(bytes sig, address old_key, address last_address) public pure returns (address[], address[], uint8[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1289,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSig(bytes sig, address old_key, address last_address) public pure returns (address[], address[], uint8[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1344,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addNameInternal(string _name, address _sender) private {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1358,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addName(string _name, address _sender) onlyOwner public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1362,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addNameByUser(string _name) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1366,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addNameSigned(string _name, bytes external_sig) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1366,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addNameSigned(string _name, bytes external_sig) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1374,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setNoteInternal(bytes note, address me) private {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1379,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setNoteByUser(bytes note) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1384,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addPlasma2EthereumInternal(bytes sig, address eth_address) private {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1394,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addPlasma2EthereumByUser(bytes sig) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1398,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setPlasma2EthereumAndNoteSigned(bytes sig, bytes note, bytes external_sig) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1398,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setPlasma2EthereumAndNoteSigned(bytes sig, bytes note, bytes external_sig) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1398,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setPlasma2EthereumAndNoteSigned(bytes sig, bytes note, bytes external_sig) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1407,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getName2Owner(string _name) public view returns (address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1410,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getOwner2Name(address _sender) public view returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1519,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getCuts(address last_influencer) public view returns (uint256[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1578,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getConstantInfo() public view returns (string,string,uint256,uint256,uint256,address,string,uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1578,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getConstantInfo() public view returns (string,string,uint256,uint256,uint256,address,string,uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1578,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getConstantInfo() public view returns (string,string,uint256,uint256,uint256,address,string,uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1643,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getInfluencers(address customer) public view returns (address[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1719,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(TwoKeyReg _reg, TwoKeyEventSource _eventSource, string _name, string _symbol,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1719,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(TwoKeyReg _reg, TwoKeyEventSource _eventSource, string _name, string _symbol,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1721,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _units, string _ipfs_hash) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1775,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(TwoKeyReg _reg, TwoKeyEventSource _eventSource, string _name, string _symbol,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1775,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(TwoKeyReg _reg, TwoKeyEventSource _eventSource, string _name, string _symbol,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1777,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _ipfs_hash, StandardToken _erc20_token_sell_contract) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 859,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1063,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1091,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1121,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1152,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1162,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1178,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1185,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1192,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 705,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress filler;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 772,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tTwoKeyEconomy economy;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 773,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress electorateAdmins;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 774,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tTwoKeyUpgradableExchange exchange;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 776,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tbool wasReplaced;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 899,
          "vulnerability_to_line": null,
          "vulnerability_code": "    TwoKeyAdmin twoKeyAdmin;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 904,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes32 => bool) canEmit;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 907,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes32 => CampaignType) codeToType;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 911,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => bool) authorizedSubadmins;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1337,
          "vulnerability_to_line": null,
          "vulnerability_code": "  TwoKeyEventSource eventSource;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1440,
          "vulnerability_to_line": null,
          "vulnerability_code": "  TwoKeyReg registry;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1441,
          "vulnerability_to_line": null,
          "vulnerability_code": "  TwoKeyEventSource eventSource;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1444,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address owner_plasma; // must be set in constructor\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1452,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 unit_decimals;  // units being sold can be fractional (for example tokens in ERC20)\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 1159,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function loadUint8(bytes sig, uint idx) public pure returns (uint8) {\n",
          "message": null
        },
        {
          "name": "Transaction-Ordering Dependence (TOD)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "    c = _a + _b;\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 225,
          "vulnerability_to_line": null,
          "vulnerability_code": "  string public name;\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "    c = _a + _b;\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 1445,
          "vulnerability_to_line": null,
          "vulnerability_code": "  string public name;\n",
          "message": null
        },
        {
          "name": "Transaction-Ordering Dependence (TOD)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "Transaction-Ordering Dependence (TOD)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "    c = _a + _b;\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 419,
          "vulnerability_to_line": null,
          "vulnerability_code": "  string public name = 'TwoKeyEconomy';\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 989,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addCampaignType(bytes _contractCode, CampaignType _campaignType) public onlyAdmin {\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "    c = _a + _b;\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 1445,
          "vulnerability_to_line": null,
          "vulnerability_code": "  string public name;\n",
          "message": null
        },
        {
          "name": "Transaction-Ordering Dependence (TOD)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 1379,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setNoteByUser(bytes note) public {\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 1325,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping(address => string) public owner2name;\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1175,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require (sig.length >= 65+idx, 'bad signature length');\n",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 1210,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint n_influencers = (sig.length-21) / (65+msg_len);\n",
          "message": null
        },
        {
          "name": "Concurrency bug",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    }
  }
}