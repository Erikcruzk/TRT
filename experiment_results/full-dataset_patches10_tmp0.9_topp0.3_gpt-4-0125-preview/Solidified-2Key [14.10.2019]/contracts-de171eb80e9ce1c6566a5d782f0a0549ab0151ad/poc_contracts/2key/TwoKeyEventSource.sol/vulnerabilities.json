{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Destructible is Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 355,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract TwoKeyEconomy is StandardToken, Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 640,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract TwoKeyUpgradableExchange is Crowdsale, Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 706,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract TwoKeyAdmin is Ownable, Destructible, AdminContract {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    owner = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 361,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor() Ownable() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 362,
          "vulnerability_to_line": null,
          "vulnerability_code": "    totalSupply_ = 1000000000000000000000000000;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 363,
          "vulnerability_to_line": null,
          "vulnerability_code": "    balances[msg.sender] = totalSupply_;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 364,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 487,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 488,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_rate > 0);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 489,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_wallet != address(0));\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 490,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_token != address(0));\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 491,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 492,
          "vulnerability_to_line": null,
          "vulnerability_code": "    rate = _rate;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 493,
          "vulnerability_to_line": null,
          "vulnerability_code": "    wallet = _wallet;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 494,
          "vulnerability_to_line": null,
          "vulnerability_code": "    token = _token;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 495,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 651,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tconstructor(uint256 _rate, address _wallet, ERC20 _token)\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 652,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tCrowdsale(_rate, _wallet, _token) Ownable() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 653,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t}\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 876,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _twoKeyAdminAddress) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 877,
          "vulnerability_to_line": null,
          "vulnerability_code": "        twoKeyAdmin = TwoKeyAdmin(_twoKeyAdminAddress);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 878,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 750,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\trequire(to != address(0)  && amount > 0);\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "DOCKER_RECEIVED_SIGNAL_24"
      ],
      "vulnerability_findings": [
        {
          "name": "shadowing-state",
          "vulnerability_from_line": 356,
          "vulnerability_to_line": null,
          "vulnerability_code": "  string public name = 'TwoKeyEconomy';\n",
          "message": "TwoKeyEconomy.name (TwoKeyEventSource.sol#356) shadows:\n\t- StandardToken.name (TwoKeyEventSource.sol#191)\n"
        },
        {
          "name": "shadowing-state",
          "vulnerability_from_line": 357,
          "vulnerability_to_line": null,
          "vulnerability_code": "  string public symbol = '2Key';\n",
          "message": "TwoKeyEconomy.symbol (TwoKeyEventSource.sol#357) shadows:\n\t- StandardToken.symbol (TwoKeyEventSource.sol#192)\n"
        },
        {
          "name": "shadowing-state",
          "vulnerability_from_line": 358,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint8 public decimals = 18;\n",
          "message": "TwoKeyEconomy.decimals (TwoKeyEventSource.sol#358) shadows:\n\t- StandardToken.decimals (TwoKeyEventSource.sol#193)\n"
        },
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 712,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress public newAdmin;\n",
          "message": "TwoKeyAdmin.newAdmin (TwoKeyEventSource.sol#712) is never initialized. It is used in:\n\t- destroy (TwoKeyEventSource.sol#763-768)\n\t- fallback (TwoKeyEventSource.sol#757-761)\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 795,
          "vulnerability_to_line": 810,
          "vulnerability_code": "    function at(address _addr) internal view returns (bytes o_code) {\n\n        assembly {\n\n        // retrieve the size of the code, this needs assembly\n\n            let size := extcodesize(_addr)\n\n        // allocate output byte array - this could also be done without assembly\n\n        // by using o_code = new bytes(size)\n\n            o_code := mload(0x40)\n\n        // new \"memory end\" including padding\n\n            mstore(0x40, add(o_code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n\n        // store length in memory\n\n            mstore(o_code, size)\n\n        // actually retrieve the code, this needs assembly\n\n            extcodecopy(_addr, add(o_code, 0x20), 0, size)\n\n        }\n\n    }\n",
          "message": "GetCode.at (TwoKeyEventSource.sol#795-810) is declared view but contains assembly code\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 728,
          "vulnerability_to_line": 737,
          "vulnerability_code": "\tfunction replaceOneself(address newAdminContract) external wasNotReplaced adminsVotingApproved {\n\n\t\tAdminContract adminContract = AdminContract(newAdminContract);\n\n\t\tuint balanceOfOldAdmin = economy.balanceOf(adminContract);\n\n\t\t// move to deploy\n\n\t\twasReplaced = true;\n\n\t\teconomy.transfer(newAdminContract, balanceOfOldAdmin);\n\n\t\teconomy.transferOwnership(newAdminContract);\n\n\t\texchange.transferOwnership(newAdminContract);\n\n\t\tnewAdminContract.transfer(address(this).balance);\n",
          "message": "TwoKeyAdmin.replaceOneself (TwoKeyEventSource.sol#728-737) does not use the value returned by external calls:\n\t-economy.transfer(newAdminContract,balanceOfOldAdmin) (TwoKeyEventSource.sol#733)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 739,
          "vulnerability_to_line": 741,
          "vulnerability_code": "\tfunction transferByAdmins(address _to, uint256 _tokens) external wasNotReplaced adminsVotingApproved {\n\n\t\teconomy.transfer(_to, _tokens);\n",
          "message": "TwoKeyAdmin.transferByAdmins (TwoKeyEventSource.sol#739-741) does not use the value returned by external calls:\n\t-economy.transfer(_to,_tokens) (TwoKeyEventSource.sol#740)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 728,
          "vulnerability_to_line": 737,
          "vulnerability_code": "\tfunction replaceOneself(address newAdminContract) external wasNotReplaced adminsVotingApproved {\n\n\t\tAdminContract adminContract = AdminContract(newAdminContract);\n\n\t\tuint balanceOfOldAdmin = economy.balanceOf(adminContract);\n\n\t\t// move to deploy\n\n\t\twasReplaced = true;\n\n\t\teconomy.transfer(newAdminContract, balanceOfOldAdmin);\n\n\t\teconomy.transferOwnership(newAdminContract);\n\n\t\texchange.transferOwnership(newAdminContract);\n\n\t\tnewAdminContract.transfer(address(this).balance);\n",
          "message": "Reentrancy in TwoKeyAdmin.replaceOneself (TwoKeyEventSource.sol#728-737):\n\tExternal calls:\n\t- balanceOfOldAdmin = economy.balanceOf(adminContract) (TwoKeyEventSource.sol#730)\n\tState variables written after the call(s):\n\t- wasReplaced (TwoKeyEventSource.sol#732)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 655,
          "vulnerability_to_line": 665,
          "vulnerability_code": "\tfunction sellTokens(uint256 _tokenAmount) public onlyAlive payable {\n\n\t\trequire(token.allowance(this, msg.sender) >= _tokenAmount);\n\n\t\trequire(token.transferFrom(msg.sender, this, _tokenAmount));\n\n\n\n\t\tuint256 weiAmount = _getWeiAmount(_tokenAmount);\n\n\t\trequire(weiAmount >= address(this).balance);\n\n\t    weiRaised = weiRaised.sub(weiAmount);\n\n\t    msg.sender.transfer(weiAmount);\n\n\n\n\t    emit TokenSell(msg.sender, wallet, weiAmount, _tokenAmount);\n",
          "message": "Reentrancy in TwoKeyUpgradableExchange.sellTokens (TwoKeyEventSource.sol#655-665):\n\tExternal calls:\n\t- require(bool)(token.allowance(this,msg.sender) >= _tokenAmount) (TwoKeyEventSource.sol#656)\n\t- require(bool)(token.transferFrom(msg.sender,this,_tokenAmount)) (TwoKeyEventSource.sol#657)\n\tState variables written after the call(s):\n\t- weiRaised (TwoKeyEventSource.sol#661)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 795,
          "vulnerability_to_line": 810,
          "vulnerability_code": "    function at(address _addr) internal view returns (bytes o_code) {\n\n        assembly {\n\n        // retrieve the size of the code, this needs assembly\n\n            let size := extcodesize(_addr)\n\n        // allocate output byte array - this could also be done without assembly\n\n        // by using o_code = new bytes(size)\n\n            o_code := mload(0x40)\n\n        // new \"memory end\" including padding\n\n            mstore(0x40, add(o_code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n\n        // store length in memory\n\n            mstore(o_code, size)\n\n        // actually retrieve the code, this needs assembly\n\n            extcodecopy(_addr, add(o_code, 0x20), 0, size)\n\n        }\n\n    }\n",
          "message": "GetCode.at uses assembly (TwoKeyEventSource.sol#795-810)\n\t- TwoKeyEventSource.sol#796-810\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 193,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint8 public decimals;\n",
          "message": "StandardToken.decimals should be constant (TwoKeyEventSource.sol#193)\nStandardToken.name should be constant (TwoKeyEventSource.sol#191)\nStandardToken.symbol should be constant (TwoKeyEventSource.sol#192)\nTwoKeyAdmin.newAdmin should be constant (TwoKeyEventSource.sol#712)\nTwoKeyEconomy.decimals should be constant (TwoKeyEventSource.sol#358)\nTwoKeyEconomy.name should be constant (TwoKeyEventSource.sol#356)\nTwoKeyEconomy.symbol should be constant (TwoKeyEventSource.sol#357)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": 55,
          "vulnerability_code": "  function renounceOwnership() public onlyOwner {\n\n    emit OwnershipRenounced(owner);\n\n    owner = address(0);\n",
          "message": "Ownable.renounceOwnership (TwoKeyEventSource.sol#52-55) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": 63,
          "vulnerability_code": "  function transferOwnership(address _newOwner) public onlyOwner {\n\n    _transferOwnership(_newOwner);\n",
          "message": "Ownable.transferOwnership (TwoKeyEventSource.sol#61-63) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 763,
          "vulnerability_to_line": 768,
          "vulnerability_code": "\tfunction destroy() public adminsVotingApproved {\n\n\t\tif (wasReplaced)\n\n\t\t\tselfdestruct(owner);\n\n\t\telse\n\n\t\t\tselfdestruct(newAdmin);\n",
          "message": "TwoKeyAdmin.destroy (TwoKeyEventSource.sol#763-768) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": 90,
          "vulnerability_code": "  function destroy() public onlyOwner {\n\n    selfdestruct(owner);\n",
          "message": "Destructible.destroy (TwoKeyEventSource.sol#88-90) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 92,
          "vulnerability_to_line": 94,
          "vulnerability_code": "  function destroyAndSend(address _recipient) public onlyOwner {\n\n    selfdestruct(_recipient);\n",
          "message": "Destructible.destroyAndSend (TwoKeyEventSource.sol#92-94) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 307,
          "vulnerability_to_line": 309,
          "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return totalSupply_;\n",
          "message": "StandardToken.totalSupply (TwoKeyEventSource.sol#307-309) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 163,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
          "message": "ERC20Basic.totalSupply (TwoKeyEventSource.sol#163) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 164,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address _who) public view returns (uint256);\n",
          "message": "ERC20Basic.balanceOf (TwoKeyEventSource.sol#164) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 331,
          "vulnerability_to_line": 333,
          "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256) {\n\n    return balances[_owner];\n",
          "message": "StandardToken.balanceOf (TwoKeyEventSource.sol#331-333) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 316,
          "vulnerability_to_line": 324,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n\n    require(_value <= balances[msg.sender]);\n\n    require(_to != address(0));\n\n\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    emit Transfer(msg.sender, _to, _value);\n\n    return true;\n",
          "message": "StandardToken.transfer (TwoKeyEventSource.sol#316-324) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 165,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool);\n",
          "message": "ERC20Basic.transfer (TwoKeyEventSource.sol#165) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 166,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address _ocwner, address _spender) public view returns (uint256);\n",
          "message": "ERC20Basic.allowance (TwoKeyEventSource.sol#166) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 245,
          "vulnerability_to_line": 254,
          "vulnerability_code": "  function allowance(\n\n    address _owner,\n\n    address _spender\n\n   )\n\n    public\n\n    view\n\n    returns (uint256)\n\n  {\n\n    return allowed[_owner][_spender];\n",
          "message": "StandardToken.allowance (TwoKeyEventSource.sol#245-254) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 167,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address spender, uint tokens) public returns (bool success);\n",
          "message": "ERC20Basic.approve (TwoKeyEventSource.sol#167) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 233,
          "vulnerability_to_line": 237,
          "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n\n    allowed[msg.sender][_spender] = _value;\n\n    emit Approval(msg.sender, _spender, _value);\n\n    return true;\n",
          "message": "StandardToken.approve (TwoKeyEventSource.sol#233-237) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 168,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n",
          "message": "ERC20Basic.transferFrom (TwoKeyEventSource.sol#168) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 366,
          "vulnerability_to_line": 383,
          "vulnerability_code": "  function transferFrom(\n\n    address _from,\n\n    address _to,\n\n    uint256 _value\n\n  )\n\n  public\n\n  returns (bool)\n\n  {\n\n    require(_value <= balances[_from]);\n\n//    require(_value <= allowed[_from][msg.sender]);\n\n    require(_to != address(0));\n\n\n\n    balances[_from] = balances[_from].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n//    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n    emit Transfer(_from, _to, _value);\n\n    return true;\n",
          "message": "TwoKeyEconomy.transferFrom (TwoKeyEventSource.sol#366-383) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": 222,
          "vulnerability_code": "  function transferFrom(\n\n    address _from,\n\n    address _to,\n\n    uint256 _value\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(_value <= balances[_from]);\n\n    require(_value <= allowed[_from][msg.sender]);\n\n    require(_to != address(0));\n\n\n\n    balances[_from] = balances[_from].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n    emit Transfer(_from, _to, _value);\n\n    return true;\n",
          "message": "StandardToken.transferFrom (TwoKeyEventSource.sol#205-222) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 265,
          "vulnerability_to_line": 276,
          "vulnerability_code": "  function increaseApproval(\n\n    address _spender,\n\n    uint256 _addedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    allowed[msg.sender][_spender] = (\n\n      allowed[msg.sender][_spender].add(_addedValue));\n\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
          "message": "StandardToken.increaseApproval (TwoKeyEventSource.sol#265-276) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 287,
          "vulnerability_to_line": 302,
          "vulnerability_code": "  function decreaseApproval(\n\n    address _spender,\n\n    uint256 _subtractedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    uint256 oldValue = allowed[msg.sender][_spender];\n\n    if (_subtractedValue >= oldValue) {\n\n      allowed[msg.sender][_spender] = 0;\n\n    } else {\n\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\n    }\n\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
          "message": "StandardToken.decreaseApproval (TwoKeyEventSource.sol#287-302) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 655,
          "vulnerability_to_line": 665,
          "vulnerability_code": "\tfunction sellTokens(uint256 _tokenAmount) public onlyAlive payable {\n\n\t\trequire(token.allowance(this, msg.sender) >= _tokenAmount);\n\n\t\trequire(token.transferFrom(msg.sender, this, _tokenAmount));\n\n\n\n\t\tuint256 weiAmount = _getWeiAmount(_tokenAmount);\n\n\t\trequire(weiAmount >= address(this).balance);\n\n\t    weiRaised = weiRaised.sub(weiAmount);\n\n\t    msg.sender.transfer(weiAmount);\n\n\n\n\t    emit TokenSell(msg.sender, wallet, weiAmount, _tokenAmount);\n",
          "message": "TwoKeyUpgradableExchange.sellTokens (TwoKeyEventSource.sol#655-665) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 671,
          "vulnerability_to_line": 673,
          "vulnerability_code": "\tfunction upgrade(address _to) public onlyAlive onlyOwner {\n\n\t\tfiller = _to;\n",
          "message": "TwoKeyUpgradableExchange.upgrade (TwoKeyEventSource.sol#671-673) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 757,
          "vulnerability_to_line": 761,
          "vulnerability_code": "\tfunction() public payable {\n\n\t\tif (wasReplaced) {\n\n\t\t\tnewAdmin.transfer(msg.value);\n\n\t\t}\n",
          "message": "TwoKeyAdmin.fallback (TwoKeyEventSource.sol#757-761) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 884,
          "vulnerability_to_line": 892,
          "vulnerability_code": "    function addContract(address _contractAddress) public onlyAuthorizedSubadmins {\n\n        require(_contractAddress != address(0));\n\n        bytes memory _contractCode = GetCode.at(_contractAddress);\n\n        bytes32 cc = keccak256(abi.encodePacked(_contractCode));\n\n        emit Code(cc,2);\n\n        canEmit[cc] = true;\n\n    }\n\n\n",
          "message": "TwoKeyEventSource.addContract (TwoKeyEventSource.sol#884-892) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 896,
          "vulnerability_to_line": 904,
          "vulnerability_code": "    function removeContract(address _contractAddress) public onlyAuthorizedSubadmins {\n\n        require(_contractAddress != address(0));\n\n        bytes memory _contractCode = GetCode.at(_contractAddress);\n\n        bytes32 cc = keccak256(abi.encodePacked(_contractCode));\n\n        emit Code(cc,3);\n\n        canEmit[cc] = false;\n\n    }\n\n\n",
          "message": "TwoKeyEventSource.removeContract (TwoKeyEventSource.sol#896-904) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 907,
          "vulnerability_to_line": 912,
          "vulnerability_code": "    function addAuthorizedAddress(address _newAddress) public onlyAdmin {\n\n        require(_newAddress != address(0));\n\n        authorizedSubadmins[_newAddress] = true;\n\n    }\n\n\n",
          "message": "TwoKeyEventSource.addAuthorizedAddress (TwoKeyEventSource.sol#907-912) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 915,
          "vulnerability_to_line": 922,
          "vulnerability_code": "    function removeAuthorizedAddress(address _authorizedAddress) public onlyAdmin {\n\n        require(_authorizedAddress != address(0));\n\n        require(authorizedSubadmins[_authorizedAddress] == true);\n\n\n\n        authorizedSubadmins[_authorizedAddress] = false;\n\n    }\n\n\n",
          "message": "TwoKeyEventSource.removeAuthorizedAddress (TwoKeyEventSource.sol#915-922) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 926,
          "vulnerability_to_line": 932,
          "vulnerability_code": "    function addCampaignType(bytes _contractCode, CampaignType _campaignType) public onlyAdmin {\n\n        bytes32 cc = keccak256(abi.encodePacked(_contractCode));\n\n        require(canEmit[cc] == true); //Check if this validation is needed\n\n        codeToType[cc] = _campaignType;\n\n    }\n\n\n",
          "message": "TwoKeyEventSource.addCampaignType (TwoKeyEventSource.sol#926-932) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 935,
          "vulnerability_to_line": 939,
          "vulnerability_code": "    function changeAdmin(address _newAdminAddress) public onlyAdmin {\n\n        twoKeyAdmin = TwoKeyAdmin(_newAdminAddress);\n\n    }\n\n\n",
          "message": "TwoKeyEventSource.changeAdmin (TwoKeyEventSource.sol#935-939) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 939,
          "vulnerability_to_line": 944,
          "vulnerability_code": "    function checkCanEmit(bytes _contractCode) public view returns (bool) {\n\n        bytes32 cc = keccak256(abi.encodePacked(_contractCode));\n\n        return canEmit[cc];\n\n    }\n\n\n",
          "message": "TwoKeyEventSource.checkCanEmit (TwoKeyEventSource.sol#939-944) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 946,
          "vulnerability_to_line": 950,
          "vulnerability_code": "    function created(address _campaign, address _owner) public onlyAllowedContracts{\n\n    \temit Created(_campaign, _owner);\n\n    }\n\n\n",
          "message": "TwoKeyEventSource.created (TwoKeyEventSource.sol#946-950) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 952,
          "vulnerability_to_line": 957,
          "vulnerability_code": "    function joined(address _campaign, address _from, address _to) public onlyAllowedContracts {\n\n      activeUser[_to] = true;  // do we want to do it also for _from and created, escrow, rewarded, fulfilled\n\n    \temit Joined(_campaign, _from, _to);\n\n    }\n\n\n",
          "message": "TwoKeyEventSource.joined (TwoKeyEventSource.sol#952-957) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 959,
          "vulnerability_to_line": 963,
          "vulnerability_code": "    function escrow(address _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts{\n\n    \temit Escrow(_campaign, _converter, _tokenID, _childContractID, _indexOrAmount, _type);\n\n    }\n\n\n",
          "message": "TwoKeyEventSource.escrow (TwoKeyEventSource.sol#959-963) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 965,
          "vulnerability_to_line": 969,
          "vulnerability_code": "    function rewarded(address _campaign, address _to, uint256 _amount) public onlyAllowedContracts {\n\n    \temit Rewarded(_campaign, _to, _amount);\n\n\t}\n\n\n",
          "message": "TwoKeyEventSource.rewarded (TwoKeyEventSource.sol#965-969) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 971,
          "vulnerability_to_line": 975,
          "vulnerability_code": "\tfunction fulfilled(address  _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts {\n\n\t\temit Fulfilled(_campaign, _converter, _tokenID, _childContractID, _indexOrAmount, _type);\n\n\t}\n\n\n",
          "message": "TwoKeyEventSource.fulfilled (TwoKeyEventSource.sol#971-975) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 977,
          "vulnerability_to_line": 981,
          "vulnerability_code": "\tfunction cancelled(address  _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts{\n\n\t\temit Cancelled(_campaign, _converter, _tokenID, _childContractID, _indexOrAmount, _type);\n\n\t}\n\n\n",
          "message": "TwoKeyEventSource.cancelled (TwoKeyEventSource.sol#977-981) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 982,
          "vulnerability_to_line": 986,
          "vulnerability_code": "    function getAdmin() public view returns (address) {\n\n        return address(twoKeyAdmin);\n\n    }\n\n\n",
          "message": "TwoKeyEventSource.getAdmin (TwoKeyEventSource.sol#982-986) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 986,
          "vulnerability_to_line": 989,
          "vulnerability_code": "    function checkIsAuthorized(address _subAdmin) public view returns (bool) {\n\n        return authorizedSubadmins[_subAdmin];\n\n    }\n",
          "message": "TwoKeyEventSource.checkIsAuthorized (TwoKeyEventSource.sol#986-989) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferOwnership(address _newOwner) public onlyOwner {\n",
          "message": "Parameter '_newOwner' of Ownable.transferOwnership (TwoKeyEventSource.sol#61) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": 73,
          "vulnerability_code": "  function _transferOwnership(address _newOwner) internal {\n\n    require(_newOwner != address(0));\n\n    emit OwnershipTransferred(owner, _newOwner);\n\n    owner = _newOwner;\n",
          "message": "Function 'Ownable._transferOwnership' (TwoKeyEventSource.sol#69-73) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function _transferOwnership(address _newOwner) internal {\n",
          "message": "Parameter '_newOwner' of Ownable._transferOwnership (TwoKeyEventSource.sol#69) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 92,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function destroyAndSend(address _recipient) public onlyOwner {\n",
          "message": "Parameter '_recipient' of Destructible.destroyAndSend (TwoKeyEventSource.sol#92) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_a' of SafeMath.mul (TwoKeyEventSource.sol#111) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_b' of SafeMath.mul (TwoKeyEventSource.sol#111) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 127,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_a' of SafeMath.div (TwoKeyEventSource.sol#127) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 127,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_b' of SafeMath.div (TwoKeyEventSource.sol#127) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 137,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_a' of SafeMath.sub (TwoKeyEventSource.sol#137) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 137,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_b' of SafeMath.sub (TwoKeyEventSource.sol#137) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 145,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_a' of SafeMath.add (TwoKeyEventSource.sol#145) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 145,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_b' of SafeMath.add (TwoKeyEventSource.sol#145) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 331,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256) {\n",
          "message": "Parameter '_owner' of StandardToken.balanceOf (TwoKeyEventSource.sol#331) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 316,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_to' of StandardToken.transfer (TwoKeyEventSource.sol#316) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 316,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of StandardToken.transfer (TwoKeyEventSource.sol#316) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 246,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _owner,\n",
          "message": "Parameter '_owner' of StandardToken.allowance (TwoKeyEventSource.sol#246) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 247,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _spender\n",
          "message": "Parameter '_spender' of StandardToken.allowance (TwoKeyEventSource.sol#247) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 233,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_spender' of StandardToken.approve (TwoKeyEventSource.sol#233) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 233,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of StandardToken.approve (TwoKeyEventSource.sol#233) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 206,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _from,\n",
          "message": "Parameter '_from' of StandardToken.transferFrom (TwoKeyEventSource.sol#206) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 207,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _to,\n",
          "message": "Parameter '_to' of StandardToken.transferFrom (TwoKeyEventSource.sol#207) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 208,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of StandardToken.transferFrom (TwoKeyEventSource.sol#208) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 266,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _spender,\n",
          "message": "Parameter '_spender' of StandardToken.increaseApproval (TwoKeyEventSource.sol#266) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 267,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _addedValue\n",
          "message": "Parameter '_addedValue' of StandardToken.increaseApproval (TwoKeyEventSource.sol#267) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 288,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _spender,\n",
          "message": "Parameter '_spender' of StandardToken.decreaseApproval (TwoKeyEventSource.sol#288) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 289,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _subtractedValue\n",
          "message": "Parameter '_subtractedValue' of StandardToken.decreaseApproval (TwoKeyEventSource.sol#289) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 367,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _from,\n",
          "message": "Parameter '_from' of TwoKeyEconomy.transferFrom (TwoKeyEventSource.sol#367) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 368,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _to,\n",
          "message": "Parameter '_to' of TwoKeyEconomy.transferFrom (TwoKeyEventSource.sol#368) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 369,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of TwoKeyEconomy.transferFrom (TwoKeyEventSource.sol#369) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 400,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ERC20Basic _token,\n",
          "message": "Parameter '_token' of SafeERC20.safeTransfer (TwoKeyEventSource.sol#400) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 401,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _to,\n",
          "message": "Parameter '_to' of SafeERC20.safeTransfer (TwoKeyEventSource.sol#401) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 402,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of SafeERC20.safeTransfer (TwoKeyEventSource.sol#402) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 410,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ERC20 _token,\n",
          "message": "Parameter '_token' of SafeERC20.safeTransferFrom (TwoKeyEventSource.sol#410) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 411,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _from,\n",
          "message": "Parameter '_from' of SafeERC20.safeTransferFrom (TwoKeyEventSource.sol#411) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 412,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _to,\n",
          "message": "Parameter '_to' of SafeERC20.safeTransferFrom (TwoKeyEventSource.sol#412) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 413,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of SafeERC20.safeTransferFrom (TwoKeyEventSource.sol#413) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 421,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ERC20 _token,\n",
          "message": "Parameter '_token' of SafeERC20.safeApprove (TwoKeyEventSource.sol#421) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 422,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _spender,\n",
          "message": "Parameter '_spender' of SafeERC20.safeApprove (TwoKeyEventSource.sol#422) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 423,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of SafeERC20.safeApprove (TwoKeyEventSource.sol#423) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 487,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n",
          "message": "Parameter '_rate' of Crowdsale. (TwoKeyEventSource.sol#487) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 487,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n",
          "message": "Parameter '_wallet' of Crowdsale. (TwoKeyEventSource.sol#487) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 487,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n",
          "message": "Parameter '_token' of Crowdsale. (TwoKeyEventSource.sol#487) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 512,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function buyTokens(address _beneficiary) public payable {\n",
          "message": "Parameter '_beneficiary' of Crowdsale.buyTokens (TwoKeyEventSource.sol#512) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 549,
          "vulnerability_to_line": 557,
          "vulnerability_code": "  function _preValidatePurchase(\n\n    address _beneficiary,\n\n    uint256 _weiAmount\n\n  )\n\n  internal\n\n  {\n\n    require(_beneficiary != address(0));\n\n    require(_weiAmount != 0);\n",
          "message": "Function 'Crowdsale._preValidatePurchase' (TwoKeyEventSource.sol#549-557) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 550,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _beneficiary,\n",
          "message": "Parameter '_beneficiary' of Crowdsale._preValidatePurchase (TwoKeyEventSource.sol#550) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 551,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _weiAmount\n",
          "message": "Parameter '_weiAmount' of Crowdsale._preValidatePurchase (TwoKeyEventSource.sol#551) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 564,
          "vulnerability_to_line": 571,
          "vulnerability_code": "  function _postValidatePurchase(\n\n    address _beneficiary,\n\n    uint256 _weiAmount\n\n  )\n\n  internal\n\n  {\n\n    // optional override\n",
          "message": "Function 'Crowdsale._postValidatePurchase' (TwoKeyEventSource.sol#564-571) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 578,
          "vulnerability_to_line": 585,
          "vulnerability_code": "  function _deliverTokens(\n\n    address _beneficiary,\n\n    uint256 _tokenAmount\n\n  )\n\n  internal\n\n  {\n\n    token.safeTransfer(_beneficiary, _tokenAmount);\n",
          "message": "Function 'Crowdsale._deliverTokens' (TwoKeyEventSource.sol#578-585) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 579,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _beneficiary,\n",
          "message": "Parameter '_beneficiary' of Crowdsale._deliverTokens (TwoKeyEventSource.sol#579) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 580,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _tokenAmount\n",
          "message": "Parameter '_tokenAmount' of Crowdsale._deliverTokens (TwoKeyEventSource.sol#580) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 592,
          "vulnerability_to_line": 599,
          "vulnerability_code": "  function _processPurchase(\n\n    address _beneficiary,\n\n    uint256 _tokenAmount\n\n  )\n\n  internal\n\n  {\n\n    _deliverTokens(_beneficiary, _tokenAmount);\n",
          "message": "Function 'Crowdsale._processPurchase' (TwoKeyEventSource.sol#592-599) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 593,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _beneficiary,\n",
          "message": "Parameter '_beneficiary' of Crowdsale._processPurchase (TwoKeyEventSource.sol#593) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 594,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _tokenAmount\n",
          "message": "Parameter '_tokenAmount' of Crowdsale._processPurchase (TwoKeyEventSource.sol#594) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 606,
          "vulnerability_to_line": 613,
          "vulnerability_code": "  function _updatePurchasingState(\n\n    address _beneficiary,\n\n    uint256 _weiAmount\n\n  )\n\n  internal\n\n  {\n\n    // optional override\n",
          "message": "Function 'Crowdsale._updatePurchasingState' (TwoKeyEventSource.sol#606-613) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 620,
          "vulnerability_to_line": 624,
          "vulnerability_code": "  function _getTokenAmount(uint256 _weiAmount)\n\n  internal view returns (uint256)\n\n  {\n\n    return _weiAmount.mul(rate);\n",
          "message": "Function 'Crowdsale._getTokenAmount' (TwoKeyEventSource.sol#620-624) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 620,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function _getTokenAmount(uint256 _weiAmount)\n",
          "message": "Parameter '_weiAmount' of Crowdsale._getTokenAmount (TwoKeyEventSource.sol#620) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 629,
          "vulnerability_to_line": 631,
          "vulnerability_code": "  function _forwardFunds() internal {\n\n    wallet.transfer(msg.value);\n",
          "message": "Function 'Crowdsale._forwardFunds' (TwoKeyEventSource.sol#629-631) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 680,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction buyTokens(address _beneficiary) public onlyAlive payable {\n",
          "message": "Parameter '_beneficiary' of TwoKeyUpgradableExchange.buyTokens (TwoKeyEventSource.sol#680) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 655,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction sellTokens(uint256 _tokenAmount) public onlyAlive payable {\n",
          "message": "Parameter '_tokenAmount' of TwoKeyUpgradableExchange.sellTokens (TwoKeyEventSource.sol#655) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 667,
          "vulnerability_to_line": 669,
          "vulnerability_code": "\tfunction _getWeiAmount(uint256 _tokenAmount) internal view returns (uint256) {\n\n\t    return _tokenAmount.div(rate);\n",
          "message": "Function 'TwoKeyUpgradableExchange._getWeiAmount' (TwoKeyEventSource.sol#667-669) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 667,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction _getWeiAmount(uint256 _tokenAmount) internal view returns (uint256) {\n",
          "message": "Parameter '_tokenAmount' of TwoKeyUpgradableExchange._getWeiAmount (TwoKeyEventSource.sol#667) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 671,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction upgrade(address _to) public onlyAlive onlyOwner {\n",
          "message": "Parameter '_to' of TwoKeyUpgradableExchange.upgrade (TwoKeyEventSource.sol#671) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 739,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction transferByAdmins(address _to, uint256 _tokens) external wasNotReplaced adminsVotingApproved {\n",
          "message": "Parameter '_to' of TwoKeyAdmin.transferByAdmins (TwoKeyEventSource.sol#739) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 739,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction transferByAdmins(address _to, uint256 _tokens) external wasNotReplaced adminsVotingApproved {\n",
          "message": "Parameter '_tokens' of TwoKeyAdmin.transferByAdmins (TwoKeyEventSource.sol#739) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 716,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tTwoKeyEconomy _economy,\n",
          "message": "Parameter '_economy' of TwoKeyAdmin. (TwoKeyEventSource.sol#716) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 717,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\taddress _electorateAdmins,\n",
          "message": "Parameter '_electorateAdmins' of TwoKeyAdmin. (TwoKeyEventSource.sol#717) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 718,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tTwoKeyUpgradableExchange _exchange) Ownable() Destructible() payable public {\n",
          "message": "Parameter '_exchange' of TwoKeyAdmin. (TwoKeyEventSource.sol#718) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 876,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _twoKeyAdminAddress) public {\n",
          "message": "Parameter '_twoKeyAdminAddress' of TwoKeyEventSource. (TwoKeyEventSource.sol#876) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 884,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addContract(address _contractAddress) public onlyAuthorizedSubadmins {\n",
          "message": "Parameter '_contractAddress' of TwoKeyEventSource.addContract (TwoKeyEventSource.sol#884) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 896,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function removeContract(address _contractAddress) public onlyAuthorizedSubadmins {\n",
          "message": "Parameter '_contractAddress' of TwoKeyEventSource.removeContract (TwoKeyEventSource.sol#896) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 907,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addAuthorizedAddress(address _newAddress) public onlyAdmin {\n",
          "message": "Parameter '_newAddress' of TwoKeyEventSource.addAuthorizedAddress (TwoKeyEventSource.sol#907) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 915,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function removeAuthorizedAddress(address _authorizedAddress) public onlyAdmin {\n",
          "message": "Parameter '_authorizedAddress' of TwoKeyEventSource.removeAuthorizedAddress (TwoKeyEventSource.sol#915) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 926,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addCampaignType(bytes _contractCode, CampaignType _campaignType) public onlyAdmin {\n",
          "message": "Parameter '_contractCode' of TwoKeyEventSource.addCampaignType (TwoKeyEventSource.sol#926) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 926,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addCampaignType(bytes _contractCode, CampaignType _campaignType) public onlyAdmin {\n",
          "message": "Parameter '_campaignType' of TwoKeyEventSource.addCampaignType (TwoKeyEventSource.sol#926) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 935,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function changeAdmin(address _newAdminAddress) public onlyAdmin {\n",
          "message": "Parameter '_newAdminAddress' of TwoKeyEventSource.changeAdmin (TwoKeyEventSource.sol#935) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 939,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function checkCanEmit(bytes _contractCode) public view returns (bool) {\n",
          "message": "Parameter '_contractCode' of TwoKeyEventSource.checkCanEmit (TwoKeyEventSource.sol#939) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 946,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function created(address _campaign, address _owner) public onlyAllowedContracts{\n",
          "message": "Parameter '_campaign' of TwoKeyEventSource.created (TwoKeyEventSource.sol#946) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 946,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function created(address _campaign, address _owner) public onlyAllowedContracts{\n",
          "message": "Parameter '_owner' of TwoKeyEventSource.created (TwoKeyEventSource.sol#946) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 952,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function joined(address _campaign, address _from, address _to) public onlyAllowedContracts {\n",
          "message": "Parameter '_campaign' of TwoKeyEventSource.joined (TwoKeyEventSource.sol#952) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 952,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function joined(address _campaign, address _from, address _to) public onlyAllowedContracts {\n",
          "message": "Parameter '_from' of TwoKeyEventSource.joined (TwoKeyEventSource.sol#952) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 952,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function joined(address _campaign, address _from, address _to) public onlyAllowedContracts {\n",
          "message": "Parameter '_to' of TwoKeyEventSource.joined (TwoKeyEventSource.sol#952) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 959,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function escrow(address _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts{\n",
          "message": "Parameter '_campaign' of TwoKeyEventSource.escrow (TwoKeyEventSource.sol#959) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 959,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function escrow(address _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts{\n",
          "message": "Parameter '_converter' of TwoKeyEventSource.escrow (TwoKeyEventSource.sol#959) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 959,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function escrow(address _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts{\n",
          "message": "Parameter '_tokenID' of TwoKeyEventSource.escrow (TwoKeyEventSource.sol#959) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 959,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function escrow(address _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts{\n",
          "message": "Parameter '_childContractID' of TwoKeyEventSource.escrow (TwoKeyEventSource.sol#959) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 959,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function escrow(address _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts{\n",
          "message": "Parameter '_indexOrAmount' of TwoKeyEventSource.escrow (TwoKeyEventSource.sol#959) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 959,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function escrow(address _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts{\n",
          "message": "Parameter '_type' of TwoKeyEventSource.escrow (TwoKeyEventSource.sol#959) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 965,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function rewarded(address _campaign, address _to, uint256 _amount) public onlyAllowedContracts {\n",
          "message": "Parameter '_campaign' of TwoKeyEventSource.rewarded (TwoKeyEventSource.sol#965) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 965,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function rewarded(address _campaign, address _to, uint256 _amount) public onlyAllowedContracts {\n",
          "message": "Parameter '_to' of TwoKeyEventSource.rewarded (TwoKeyEventSource.sol#965) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 965,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function rewarded(address _campaign, address _to, uint256 _amount) public onlyAllowedContracts {\n",
          "message": "Parameter '_amount' of TwoKeyEventSource.rewarded (TwoKeyEventSource.sol#965) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 971,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction fulfilled(address  _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts {\n",
          "message": "Parameter '_campaign' of TwoKeyEventSource.fulfilled (TwoKeyEventSource.sol#971) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 971,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction fulfilled(address  _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts {\n",
          "message": "Parameter '_converter' of TwoKeyEventSource.fulfilled (TwoKeyEventSource.sol#971) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 971,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction fulfilled(address  _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts {\n",
          "message": "Parameter '_tokenID' of TwoKeyEventSource.fulfilled (TwoKeyEventSource.sol#971) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 971,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction fulfilled(address  _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts {\n",
          "message": "Parameter '_childContractID' of TwoKeyEventSource.fulfilled (TwoKeyEventSource.sol#971) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 971,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction fulfilled(address  _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts {\n",
          "message": "Parameter '_indexOrAmount' of TwoKeyEventSource.fulfilled (TwoKeyEventSource.sol#971) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 971,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction fulfilled(address  _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts {\n",
          "message": "Parameter '_type' of TwoKeyEventSource.fulfilled (TwoKeyEventSource.sol#971) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 977,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction cancelled(address  _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts{\n",
          "message": "Parameter '_campaign' of TwoKeyEventSource.cancelled (TwoKeyEventSource.sol#977) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 977,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction cancelled(address  _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts{\n",
          "message": "Parameter '_converter' of TwoKeyEventSource.cancelled (TwoKeyEventSource.sol#977) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 977,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction cancelled(address  _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts{\n",
          "message": "Parameter '_tokenID' of TwoKeyEventSource.cancelled (TwoKeyEventSource.sol#977) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 977,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction cancelled(address  _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts{\n",
          "message": "Parameter '_childContractID' of TwoKeyEventSource.cancelled (TwoKeyEventSource.sol#977) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 977,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction cancelled(address  _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts{\n",
          "message": "Parameter '_indexOrAmount' of TwoKeyEventSource.cancelled (TwoKeyEventSource.sol#977) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 977,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction cancelled(address  _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts{\n",
          "message": "Parameter '_type' of TwoKeyEventSource.cancelled (TwoKeyEventSource.sol#977) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 986,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function checkIsAuthorized(address _subAdmin) public view returns (bool) {\n",
          "message": "Parameter '_subAdmin' of TwoKeyEventSource.checkIsAuthorized (TwoKeyEventSource.sol#986) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "    owner = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 233,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 795,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function at(address _addr) internal view returns (bytes o_code) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 154,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 176,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 339,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 351,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 389,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 433,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 636,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 688,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 786,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 814,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 188,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 450,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 795,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function at(address _addr) internal view returns (bytes o_code) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 757,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction() public payable {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 795,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function at(address _addr) internal view returns (bytes o_code) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 926,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addCampaignType(bytes _contractCode, CampaignType _campaignType) public onlyAdmin {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 939,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function checkCanEmit(bytes _contractCode) public view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 796,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 642,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress filler;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 709,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tTwoKeyEconomy economy;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 710,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress electorateAdmins;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 711,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tTwoKeyUpgradableExchange exchange;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 713,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tbool wasReplaced;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 836,
          "vulnerability_to_line": null,
          "vulnerability_code": "    TwoKeyAdmin twoKeyAdmin;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 841,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes32 => bool) canEmit;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 844,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes32 => CampaignType) codeToType;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 848,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => bool) authorizedSubadmins;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Transaction-Ordering Dependence (TOD)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 146,
          "vulnerability_to_line": null,
          "vulnerability_code": "    c = _a + _b;\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 191,
          "vulnerability_to_line": null,
          "vulnerability_code": "  string public name;\n",
          "message": null
        },
        {
          "name": "Transaction-Ordering Dependence (TOD)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 146,
          "vulnerability_to_line": null,
          "vulnerability_code": "    c = _a + _b;\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 356,
          "vulnerability_to_line": null,
          "vulnerability_code": "  string public name = 'TwoKeyEconomy';\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 926,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addCampaignType(bytes _contractCode, CampaignType _campaignType) public onlyAdmin {\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [
        "SYMBOLIC EXECUTION TIMEOUT",
        "exception (AttributeError: 'long' object has no attribute 'data')"
      ],
      "vulnerability_findings": [
        {
          "name": "Concurrency bug",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "Concurrency bug",
          "vulnerability_from_line": 736,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tnewAdminContract.transfer(address(this).balance);\n",
          "message": null
        },
        {
          "name": "Concurrency bug",
          "vulnerability_from_line": 759,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t\tnewAdmin.transfer(msg.value);\n",
          "message": null
        }
      ]
    }
  }
}