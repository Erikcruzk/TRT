{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 326,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract TwoKeyEconomy is StandardToken, Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 374,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Destructible is Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 640,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract TwoKeyUpgradableExchange is Crowdsale, Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 706,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract TwoKeyAdmin is Ownable, Destructible, AdminContract {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 1261,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract TwoKeyReg is Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1185,
          "vulnerability_to_line": null,
          "vulnerability_code": "        while (idx + 65 <= sig.length) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1189,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (idx + msg_len <= sig.length) {  // its  a < and not a <= because we dont want this to be the final iteration for the converter\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1240,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i = 0; i < influencers.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1241,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (i < weights.length) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "    owner = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor() Ownable() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 333,
          "vulnerability_to_line": null,
          "vulnerability_code": "    totalSupply_ = 1000000000000000000000000000;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 334,
          "vulnerability_to_line": null,
          "vulnerability_code": "    balances[msg.sender] = totalSupply_;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 335,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 487,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 488,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_rate > 0);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 489,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_wallet != address(0));\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 490,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_token != address(0));\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 491,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 492,
          "vulnerability_to_line": null,
          "vulnerability_code": "    rate = _rate;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 493,
          "vulnerability_to_line": null,
          "vulnerability_code": "    wallet = _wallet;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 494,
          "vulnerability_to_line": null,
          "vulnerability_code": "    token = _token;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 495,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 651,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tconstructor(uint256 _rate, address _wallet, ERC20 _token)\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 652,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tCrowdsale(_rate, _wallet, _token) Ownable() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 653,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t}\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 876,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _twoKeyAdminAddress) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 877,
          "vulnerability_to_line": null,
          "vulnerability_code": "        twoKeyAdmin = TwoKeyAdmin(_twoKeyAdminAddress);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 878,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1277,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(TwoKeyEventSource _eventSource) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1278,
          "vulnerability_to_line": null,
          "vulnerability_code": "    eventSource = _eventSource;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1279,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1240,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i = 0; i < influencers.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1112,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require (sig.length >= 65+idx, 'bad signature length');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1139,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(v==27 || v==28,'bad sig v');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1191,
          "vulnerability_to_line": null,
          "vulnerability_code": "                require(weights[count_influencers] > 0,'weight not defined (1..255)');  // 255 are used to indicate default (equal part) behaviour\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1221,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(idx == sig.length,'illegal message size');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1231,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(old_key != address(0),'no public link key');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1242,
          "vulnerability_to_line": null,
          "vulnerability_code": "                require (recoverHash(keccak256(abi.encodePacked(weights[i], keys[i], influencers[i])),sig,offsets[i]) == old_key, 'illegal signature');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1246,
          "vulnerability_to_line": null,
          "vulnerability_code": "                require (recoverHash(keccak256(abi.encodePacked(influencers[i])),sig,offsets[i]) == old_key, 'illegal last signature');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1283,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(name2owner[keccak256(abi.encodePacked(_name))] == 0 || name2owner[keccak256(abi.encodePacked(_name))] == _sender, \"name already assigned\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1307,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require (msg.sender == eth_address || msg.sender == owner, \"only owner or user can change name\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1326,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(plasma2ethereum[plasma_address] == address(0) || plasma2ethereum[plasma_address] == eth_address, \"cant change eth=>plasma\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1339,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require (msg.sender == eth_address || msg.sender == owner, \"only owner or user can change ethereum-plasma\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 750,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\trequire(to != address(0)  && amount > 0);\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1151,
          "vulnerability_to_line": null,
          "vulnerability_code": "            n_influencers++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1192,
          "vulnerability_to_line": null,
          "vulnerability_code": "                idx++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1219,
          "vulnerability_to_line": null,
          "vulnerability_code": "            count_influencers++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1240,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i = 0; i < influencers.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1307,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require (msg.sender == eth_address || msg.sender == owner, \"only owner or user can change name\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1339,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require (msg.sender == eth_address || msg.sender == owner, \"only owner or user can change ethereum-plasma\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "encode-packed-collision",
          "vulnerability_from_line": 1337,
          "vulnerability_to_line": null,
          "vulnerability_code": "      keccak256(abi.encodePacked(sig,note))));\n",
          "message": "abi.encodePacked hash collision with variable length arguments in setPlasma2EthereumAndNoteSigned()"
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_194"
      ],
      "vulnerability_findings": [
        {
          "name": "shadowing-state",
          "vulnerability_from_line": 327,
          "vulnerability_to_line": null,
          "vulnerability_code": "  string public name = 'TwoKeyEconomy';\n",
          "message": "TwoKeyEconomy.name (TwoKeyReg.sol#327) shadows:\n\t- StandardToken.name (TwoKeyReg.sol#162)\n"
        },
        {
          "name": "shadowing-state",
          "vulnerability_from_line": 328,
          "vulnerability_to_line": null,
          "vulnerability_code": "  string public symbol = '2Key';\n",
          "message": "TwoKeyEconomy.symbol (TwoKeyReg.sol#328) shadows:\n\t- StandardToken.symbol (TwoKeyReg.sol#163)\n"
        },
        {
          "name": "shadowing-state",
          "vulnerability_from_line": 329,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint8 public decimals = 18;\n",
          "message": "TwoKeyEconomy.decimals (TwoKeyReg.sol#329) shadows:\n\t- StandardToken.decimals (TwoKeyReg.sol#164)\n"
        },
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 712,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress public newAdmin;\n",
          "message": "TwoKeyAdmin.newAdmin (TwoKeyReg.sol#712) is never initialized. It is used in:\n\t- destroy (TwoKeyReg.sol#763-768)\n\t- fallback (TwoKeyReg.sol#757-761)\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 795,
          "vulnerability_to_line": 810,
          "vulnerability_code": "    function at(address _addr) internal view returns (bytes o_code) {\n\n        assembly {\n\n        // retrieve the size of the code, this needs assembly\n\n            let size := extcodesize(_addr)\n\n        // allocate output byte array - this could also be done without assembly\n\n        // by using o_code = new bytes(size)\n\n            o_code := mload(0x40)\n\n        // new \"memory end\" including padding\n\n            mstore(0x40, add(o_code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n\n        // store length in memory\n\n            mstore(o_code, size)\n\n        // actually retrieve the code, this needs assembly\n\n            extcodecopy(_addr, add(o_code, 0x20), 0, size)\n\n        }\n\n    }\n",
          "message": "GetCode.at (TwoKeyReg.sol#795-810) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 996,
          "vulnerability_to_line": 1024,
          "vulnerability_code": "    function params0(address c, bytes _method) public view returns (uint answer) {\n\n        // https://medium.com/@blockchain101/calling-the-function-of-another-contract-in-solidity-f9edfa921f4c\n\n        //    dc = c;\n\n        bytes4 sig = bytes4(keccak256(_method));\n\n        assembly {\n\n        // move pointer to free memory spot\n\n            let ptr := mload(0x40)\n\n        // put function sig at memory spot\n\n            mstore(ptr,sig)\n\n\n\n            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n\n            15000, // gas limit\n\n            c, // sload(dc_slot),  // to addr. append var to _slot to access storage variable\n\n            0, // not transfer any ether (comment if using staticcall)\n\n            ptr, // Inputs are stored at location ptr\n\n            0x04, // Inputs are 0 bytes long\n\n            ptr,  //Store output over input\n\n            0x20) //Outputs are 1 bytes long\n\n\n\n            if eq(result, 0) {\n\n                revert(0, 0)\n\n            }\n\n\n\n            answer := mload(ptr) // Assign output to answer var\n\n            mstore(0x40,add(ptr,0x24)) // Set storage pointer to new space\n\n        }\n\n    }\n\n\n",
          "message": "Call.params0 (TwoKeyReg.sol#996-1024) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 1024,
          "vulnerability_to_line": 1054,
          "vulnerability_code": "    function params1(address c, bytes _method, uint _val) public view returns (uint answer) {\n\n        // https://medium.com/@blockchain101/calling-the-function-of-another-contract-in-solidity-f9edfa921f4c\n\n        //    dc = c;\n\n        bytes4 sig = bytes4(keccak256(_method));\n\n        assembly {\n\n        // move pointer to free memory spot\n\n            let ptr := mload(0x40)\n\n        // put function sig at memory spot\n\n            mstore(ptr,sig)\n\n        // append argument after function sig\n\n            mstore(add(ptr,0x04), _val)\n\n\n\n            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n\n            15000, // gas limit\n\n            c, // sload(dc_slot),  // to addr. append var to _slot to access storage variable\n\n            0, // not transfer any ether (comment if using staticcall)\n\n            ptr, // Inputs are stored at location ptr\n\n            0x24, // Inputs are 0 bytes long\n\n            ptr,  //Store output over input\n\n            0x20) //Outputs are 1 bytes long\n\n\n\n            if eq(result, 0) {\n\n                revert(0, 0)\n\n            }\n\n\n\n            answer := mload(ptr) // Assign output to answer var\n\n            mstore(0x40,add(ptr,0x24)) // Set storage pointer to new space\n\n        }\n\n    }\n\n\n",
          "message": "Call.params1 (TwoKeyReg.sol#1024-1054) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 1054,
          "vulnerability_to_line": 1086,
          "vulnerability_code": "    function params2(address c, bytes _method, uint _val1, uint _val2) public view returns (uint answer) {\n\n        // https://medium.com/@blockchain101/calling-the-function-of-another-contract-in-solidity-f9edfa921f4c\n\n        //    dc = c;\n\n        bytes4 sig = bytes4(keccak256(_method));\n\n        assembly {\n\n        // move pointer to free memory spot\n\n            let ptr := mload(0x40)\n\n        // put function sig at memory spot\n\n            mstore(ptr,sig)\n\n        // append argument after function sig\n\n            mstore(add(ptr,0x04), _val1)\n\n            mstore(add(ptr,0x24), _val2)\n\n\n\n            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n\n            15000, // gas limit\n\n            c, // sload(dc_slot),  // to addr. append var to _slot to access storage variable\n\n            0, // not transfer any ether (comment if using staticcall)\n\n            ptr, // Inputs are stored at location ptr\n\n            0x44, // Inputs are 4 bytes for signature and 2 uint256\n\n            ptr,  //Store output over input\n\n            0x20) //Outputs are 1 uint long\n\n\n\n        // TODO cause revert\n\n        //            if eq(result, 0) {\n\n        //                revert(0, 0)\n\n        //            }\n\n\n\n            answer := mload(ptr) // Assign output to answer var\n\n            mstore(0x40,add(ptr,0x20)) // Set storage pointer to new space\n\n        }\n\n    }\n\n\n",
          "message": "Call.params2 (TwoKeyReg.sol#1054-1086) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 1086,
          "vulnerability_to_line": 1096,
          "vulnerability_code": "    function loadAddress(bytes sig, uint idx) public pure returns (address) {\n\n        address influencer;\n\n        idx += 20;\n\n        assembly\n\n        {\n\n            influencer := mload(add(sig, idx))\n\n        }\n\n        return influencer;\n\n    }\n\n\n",
          "message": "Call.loadAddress (TwoKeyReg.sol#1086-1096) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 1096,
          "vulnerability_to_line": 1106,
          "vulnerability_code": "    function loadUint8(bytes sig, uint idx) public pure returns (uint8) {\n\n        uint8 weight;\n\n        idx += 1;\n\n        assembly\n\n        {\n\n            weight := mload(add(sig, idx))\n\n        }\n\n        return weight;\n\n    }\n\n\n",
          "message": "Call.loadUint8 (TwoKeyReg.sol#1096-1106) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 1107,
          "vulnerability_to_line": 1144,
          "vulnerability_code": "    function recoverHash(bytes32 hash, bytes sig, uint idx) public pure returns (address) {\n\n        // same as recoverHash in utils/sign.js\n\n        // The signature format is a compact form of:\n\n        //   {bytes32 r}{bytes32 s}{uint8 v}\n\n        // Compact means, uint8 is not padded to 32 bytes.\n\n        require (sig.length >= 65+idx, 'bad signature length');\n\n        idx += 32;\n\n        bytes32 r;\n\n        assembly\n\n        {\n\n            r := mload(add(sig, idx))\n\n        }\n\n\n\n        idx += 32;\n\n        bytes32 s;\n\n        assembly\n\n        {\n\n            s := mload(add(sig, idx))\n\n        }\n\n\n\n        idx += 1;\n\n        uint8 v;\n\n        assembly\n\n        {\n\n            v := mload(add(sig, idx))\n\n        }\n\n        if (v >= 32) { // handle case when signature was made with ethereum web3.eth.sign or getSign which is for signing ethereum transactions\n\n            v -= 32;\n\n            bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\"; // 32 is the number of bytes in the following hash\n\n            hash = keccak256(abi.encodePacked(prefix, hash));\n\n        }\n\n        if (v <= 1) v += 27;\n\n        require(v==27 || v==28,'bad sig v');\n\n        return ecrecover(hash, v, r, s);\n\n\n\n    }\n\n\n",
          "message": "Call.recoverHash (TwoKeyReg.sol#1107-1144) is declared view but contains assembly code\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 728,
          "vulnerability_to_line": 737,
          "vulnerability_code": "\tfunction replaceOneself(address newAdminContract) external wasNotReplaced adminsVotingApproved {\n\n\t\tAdminContract adminContract = AdminContract(newAdminContract);\n\n\t\tuint balanceOfOldAdmin = economy.balanceOf(adminContract);\n\n\t\t// move to deploy\n\n\t\twasReplaced = true;\n\n\t\teconomy.transfer(newAdminContract, balanceOfOldAdmin);\n\n\t\teconomy.transferOwnership(newAdminContract);\n\n\t\texchange.transferOwnership(newAdminContract);\n\n\t\tnewAdminContract.transfer(address(this).balance);\n",
          "message": "TwoKeyAdmin.replaceOneself (TwoKeyReg.sol#728-737) does not use the value returned by external calls:\n\t-economy.transfer(newAdminContract,balanceOfOldAdmin) (TwoKeyReg.sol#733)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 739,
          "vulnerability_to_line": 741,
          "vulnerability_code": "\tfunction transferByAdmins(address _to, uint256 _tokens) external wasNotReplaced adminsVotingApproved {\n\n\t\teconomy.transfer(_to, _tokens);\n",
          "message": "TwoKeyAdmin.transferByAdmins (TwoKeyReg.sol#739-741) does not use the value returned by external calls:\n\t-economy.transfer(_to,_tokens) (TwoKeyReg.sol#740)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 728,
          "vulnerability_to_line": 737,
          "vulnerability_code": "\tfunction replaceOneself(address newAdminContract) external wasNotReplaced adminsVotingApproved {\n\n\t\tAdminContract adminContract = AdminContract(newAdminContract);\n\n\t\tuint balanceOfOldAdmin = economy.balanceOf(adminContract);\n\n\t\t// move to deploy\n\n\t\twasReplaced = true;\n\n\t\teconomy.transfer(newAdminContract, balanceOfOldAdmin);\n\n\t\teconomy.transferOwnership(newAdminContract);\n\n\t\texchange.transferOwnership(newAdminContract);\n\n\t\tnewAdminContract.transfer(address(this).balance);\n",
          "message": "Reentrancy in TwoKeyAdmin.replaceOneself (TwoKeyReg.sol#728-737):\n\tExternal calls:\n\t- balanceOfOldAdmin = economy.balanceOf(adminContract) (TwoKeyReg.sol#730)\n\tState variables written after the call(s):\n\t- wasReplaced (TwoKeyReg.sol#732)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 655,
          "vulnerability_to_line": 665,
          "vulnerability_code": "\tfunction sellTokens(uint256 _tokenAmount) public onlyAlive payable {\n\n\t\trequire(token.allowance(this, msg.sender) >= _tokenAmount);\n\n\t\trequire(token.transferFrom(msg.sender, this, _tokenAmount));\n\n\n\n\t\tuint256 weiAmount = _getWeiAmount(_tokenAmount);\n\n\t\trequire(weiAmount >= address(this).balance);\n\n\t    weiRaised = weiRaised.sub(weiAmount);\n\n\t    msg.sender.transfer(weiAmount);\n\n\n\n\t    emit TokenSell(msg.sender, wallet, weiAmount, _tokenAmount);\n",
          "message": "Reentrancy in TwoKeyUpgradableExchange.sellTokens (TwoKeyReg.sol#655-665):\n\tExternal calls:\n\t- require(bool)(token.allowance(this,msg.sender) >= _tokenAmount) (TwoKeyReg.sol#656)\n\t- require(bool)(token.transferFrom(msg.sender,this,_tokenAmount)) (TwoKeyReg.sol#657)\n\tState variables written after the call(s):\n\t- weiRaised (TwoKeyReg.sol#661)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 795,
          "vulnerability_to_line": 810,
          "vulnerability_code": "    function at(address _addr) internal view returns (bytes o_code) {\n\n        assembly {\n\n        // retrieve the size of the code, this needs assembly\n\n            let size := extcodesize(_addr)\n\n        // allocate output byte array - this could also be done without assembly\n\n        // by using o_code = new bytes(size)\n\n            o_code := mload(0x40)\n\n        // new \"memory end\" including padding\n\n            mstore(0x40, add(o_code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n\n        // store length in memory\n\n            mstore(o_code, size)\n\n        // actually retrieve the code, this needs assembly\n\n            extcodecopy(_addr, add(o_code, 0x20), 0, size)\n\n        }\n\n    }\n",
          "message": "GetCode.at uses assembly (TwoKeyReg.sol#795-810)\n\t- TwoKeyReg.sol#796-810\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 996,
          "vulnerability_to_line": 1024,
          "vulnerability_code": "    function params0(address c, bytes _method) public view returns (uint answer) {\n\n        // https://medium.com/@blockchain101/calling-the-function-of-another-contract-in-solidity-f9edfa921f4c\n\n        //    dc = c;\n\n        bytes4 sig = bytes4(keccak256(_method));\n\n        assembly {\n\n        // move pointer to free memory spot\n\n            let ptr := mload(0x40)\n\n        // put function sig at memory spot\n\n            mstore(ptr,sig)\n\n\n\n            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n\n            15000, // gas limit\n\n            c, // sload(dc_slot),  // to addr. append var to _slot to access storage variable\n\n            0, // not transfer any ether (comment if using staticcall)\n\n            ptr, // Inputs are stored at location ptr\n\n            0x04, // Inputs are 0 bytes long\n\n            ptr,  //Store output over input\n\n            0x20) //Outputs are 1 bytes long\n\n\n\n            if eq(result, 0) {\n\n                revert(0, 0)\n\n            }\n\n\n\n            answer := mload(ptr) // Assign output to answer var\n\n            mstore(0x40,add(ptr,0x24)) // Set storage pointer to new space\n\n        }\n\n    }\n\n\n",
          "message": "Call.params0 uses assembly (TwoKeyReg.sol#996-1024)\n\t- TwoKeyReg.sol#1000-1024\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 1024,
          "vulnerability_to_line": 1054,
          "vulnerability_code": "    function params1(address c, bytes _method, uint _val) public view returns (uint answer) {\n\n        // https://medium.com/@blockchain101/calling-the-function-of-another-contract-in-solidity-f9edfa921f4c\n\n        //    dc = c;\n\n        bytes4 sig = bytes4(keccak256(_method));\n\n        assembly {\n\n        // move pointer to free memory spot\n\n            let ptr := mload(0x40)\n\n        // put function sig at memory spot\n\n            mstore(ptr,sig)\n\n        // append argument after function sig\n\n            mstore(add(ptr,0x04), _val)\n\n\n\n            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n\n            15000, // gas limit\n\n            c, // sload(dc_slot),  // to addr. append var to _slot to access storage variable\n\n            0, // not transfer any ether (comment if using staticcall)\n\n            ptr, // Inputs are stored at location ptr\n\n            0x24, // Inputs are 0 bytes long\n\n            ptr,  //Store output over input\n\n            0x20) //Outputs are 1 bytes long\n\n\n\n            if eq(result, 0) {\n\n                revert(0, 0)\n\n            }\n\n\n\n            answer := mload(ptr) // Assign output to answer var\n\n            mstore(0x40,add(ptr,0x24)) // Set storage pointer to new space\n\n        }\n\n    }\n\n\n",
          "message": "Call.params1 uses assembly (TwoKeyReg.sol#1024-1054)\n\t- TwoKeyReg.sol#1028-1054\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 1054,
          "vulnerability_to_line": 1086,
          "vulnerability_code": "    function params2(address c, bytes _method, uint _val1, uint _val2) public view returns (uint answer) {\n\n        // https://medium.com/@blockchain101/calling-the-function-of-another-contract-in-solidity-f9edfa921f4c\n\n        //    dc = c;\n\n        bytes4 sig = bytes4(keccak256(_method));\n\n        assembly {\n\n        // move pointer to free memory spot\n\n            let ptr := mload(0x40)\n\n        // put function sig at memory spot\n\n            mstore(ptr,sig)\n\n        // append argument after function sig\n\n            mstore(add(ptr,0x04), _val1)\n\n            mstore(add(ptr,0x24), _val2)\n\n\n\n            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n\n            15000, // gas limit\n\n            c, // sload(dc_slot),  // to addr. append var to _slot to access storage variable\n\n            0, // not transfer any ether (comment if using staticcall)\n\n            ptr, // Inputs are stored at location ptr\n\n            0x44, // Inputs are 4 bytes for signature and 2 uint256\n\n            ptr,  //Store output over input\n\n            0x20) //Outputs are 1 uint long\n\n\n\n        // TODO cause revert\n\n        //            if eq(result, 0) {\n\n        //                revert(0, 0)\n\n        //            }\n\n\n\n            answer := mload(ptr) // Assign output to answer var\n\n            mstore(0x40,add(ptr,0x20)) // Set storage pointer to new space\n\n        }\n\n    }\n\n\n",
          "message": "Call.params2 uses assembly (TwoKeyReg.sol#1054-1086)\n\t- TwoKeyReg.sol#1058-1086\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 1086,
          "vulnerability_to_line": 1096,
          "vulnerability_code": "    function loadAddress(bytes sig, uint idx) public pure returns (address) {\n\n        address influencer;\n\n        idx += 20;\n\n        assembly\n\n        {\n\n            influencer := mload(add(sig, idx))\n\n        }\n\n        return influencer;\n\n    }\n\n\n",
          "message": "Call.loadAddress uses assembly (TwoKeyReg.sol#1086-1096)\n\t- TwoKeyReg.sol#1089-1093\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 1096,
          "vulnerability_to_line": 1106,
          "vulnerability_code": "    function loadUint8(bytes sig, uint idx) public pure returns (uint8) {\n\n        uint8 weight;\n\n        idx += 1;\n\n        assembly\n\n        {\n\n            weight := mload(add(sig, idx))\n\n        }\n\n        return weight;\n\n    }\n\n\n",
          "message": "Call.loadUint8 uses assembly (TwoKeyReg.sol#1096-1106)\n\t- TwoKeyReg.sol#1099-1103\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 1107,
          "vulnerability_to_line": 1144,
          "vulnerability_code": "    function recoverHash(bytes32 hash, bytes sig, uint idx) public pure returns (address) {\n\n        // same as recoverHash in utils/sign.js\n\n        // The signature format is a compact form of:\n\n        //   {bytes32 r}{bytes32 s}{uint8 v}\n\n        // Compact means, uint8 is not padded to 32 bytes.\n\n        require (sig.length >= 65+idx, 'bad signature length');\n\n        idx += 32;\n\n        bytes32 r;\n\n        assembly\n\n        {\n\n            r := mload(add(sig, idx))\n\n        }\n\n\n\n        idx += 32;\n\n        bytes32 s;\n\n        assembly\n\n        {\n\n            s := mload(add(sig, idx))\n\n        }\n\n\n\n        idx += 1;\n\n        uint8 v;\n\n        assembly\n\n        {\n\n            v := mload(add(sig, idx))\n\n        }\n\n        if (v >= 32) { // handle case when signature was made with ethereum web3.eth.sign or getSign which is for signing ethereum transactions\n\n            v -= 32;\n\n            bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\"; // 32 is the number of bytes in the following hash\n\n            hash = keccak256(abi.encodePacked(prefix, hash));\n\n        }\n\n        if (v <= 1) v += 27;\n\n        require(v==27 || v==28,'bad sig v');\n\n        return ecrecover(hash, v, r, s);\n\n\n\n    }\n\n\n",
          "message": "Call.recoverHash uses assembly (TwoKeyReg.sol#1107-1144)\n\t- TwoKeyReg.sol#1115-1120\n\t- TwoKeyReg.sol#1122-1127\n\t- TwoKeyReg.sol#1129-1133\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 164,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint8 public decimals;\n",
          "message": "StandardToken.decimals should be constant (TwoKeyReg.sol#164)\nStandardToken.name should be constant (TwoKeyReg.sol#162)\nStandardToken.symbol should be constant (TwoKeyReg.sol#163)\nTwoKeyAdmin.newAdmin should be constant (TwoKeyReg.sol#712)\nTwoKeyEconomy.decimals should be constant (TwoKeyReg.sol#329)\nTwoKeyEconomy.name should be constant (TwoKeyReg.sol#327)\nTwoKeyEconomy.symbol should be constant (TwoKeyReg.sol#328)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": 47,
          "vulnerability_code": "  function renounceOwnership() public onlyOwner {\n\n    emit OwnershipRenounced(owner);\n\n    owner = address(0);\n",
          "message": "Ownable.renounceOwnership (TwoKeyReg.sol#44-47) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": 55,
          "vulnerability_code": "  function transferOwnership(address _newOwner) public onlyOwner {\n\n    _transferOwnership(_newOwner);\n",
          "message": "Ownable.transferOwnership (TwoKeyReg.sol#53-55) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
          "message": "ERC20Basic.totalSupply (TwoKeyReg.sol#134) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": 280,
          "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return totalSupply_;\n",
          "message": "StandardToken.totalSupply (TwoKeyReg.sol#278-280) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 302,
          "vulnerability_to_line": 304,
          "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256) {\n\n    return balances[_owner];\n",
          "message": "StandardToken.balanceOf (TwoKeyReg.sol#302-304) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address _who) public view returns (uint256);\n",
          "message": "ERC20Basic.balanceOf (TwoKeyReg.sol#135) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool);\n",
          "message": "ERC20Basic.transfer (TwoKeyReg.sol#136) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 287,
          "vulnerability_to_line": 295,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n\n    require(_value <= balances[msg.sender]);\n\n    require(_to != address(0));\n\n\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    emit Transfer(msg.sender, _to, _value);\n\n    return true;\n",
          "message": "StandardToken.transfer (TwoKeyReg.sol#287-295) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": 225,
          "vulnerability_code": "  function allowance(\n\n    address _owner,\n\n    address _spender\n\n   )\n\n    public\n\n    view\n\n    returns (uint256)\n\n  {\n\n    return allowed[_owner][_spender];\n",
          "message": "StandardToken.allowance (TwoKeyReg.sol#216-225) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 137,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address _ocwner, address _spender) public view returns (uint256);\n",
          "message": "ERC20Basic.allowance (TwoKeyReg.sol#137) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address spender, uint tokens) public returns (bool success);\n",
          "message": "ERC20Basic.approve (TwoKeyReg.sol#138) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 204,
          "vulnerability_to_line": 208,
          "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n\n    allowed[msg.sender][_spender] = _value;\n\n    emit Approval(msg.sender, _spender, _value);\n\n    return true;\n",
          "message": "StandardToken.approve (TwoKeyReg.sol#204-208) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 139,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n",
          "message": "ERC20Basic.transferFrom (TwoKeyReg.sol#139) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 176,
          "vulnerability_to_line": 193,
          "vulnerability_code": "  function transferFrom(\n\n    address _from,\n\n    address _to,\n\n    uint256 _value\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(_value <= balances[_from]);\n\n    require(_value <= allowed[_from][msg.sender]);\n\n    require(_to != address(0));\n\n\n\n    balances[_from] = balances[_from].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n    emit Transfer(_from, _to, _value);\n\n    return true;\n",
          "message": "StandardToken.transferFrom (TwoKeyReg.sol#176-193) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 337,
          "vulnerability_to_line": 354,
          "vulnerability_code": "  function transferFrom(\n\n    address _from,\n\n    address _to,\n\n    uint256 _value\n\n  )\n\n  public\n\n  returns (bool)\n\n  {\n\n    require(_value <= balances[_from]);\n\n//    require(_value <= allowed[_from][msg.sender]);\n\n    require(_to != address(0));\n\n\n\n    balances[_from] = balances[_from].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n//    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n    emit Transfer(_from, _to, _value);\n\n    return true;\n",
          "message": "TwoKeyEconomy.transferFrom (TwoKeyReg.sol#337-354) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 236,
          "vulnerability_to_line": 247,
          "vulnerability_code": "  function increaseApproval(\n\n    address _spender,\n\n    uint256 _addedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    allowed[msg.sender][_spender] = (\n\n      allowed[msg.sender][_spender].add(_addedValue));\n\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
          "message": "StandardToken.increaseApproval (TwoKeyReg.sol#236-247) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 258,
          "vulnerability_to_line": 273,
          "vulnerability_code": "  function decreaseApproval(\n\n    address _spender,\n\n    uint256 _subtractedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    uint256 oldValue = allowed[msg.sender][_spender];\n\n    if (_subtractedValue >= oldValue) {\n\n      allowed[msg.sender][_spender] = 0;\n\n    } else {\n\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\n    }\n\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
          "message": "StandardToken.decreaseApproval (TwoKeyReg.sol#258-273) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 378,
          "vulnerability_to_line": 380,
          "vulnerability_code": "  function destroy() public onlyOwner {\n\n    selfdestruct(owner);\n",
          "message": "Destructible.destroy (TwoKeyReg.sol#378-380) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 763,
          "vulnerability_to_line": 768,
          "vulnerability_code": "\tfunction destroy() public adminsVotingApproved {\n\n\t\tif (wasReplaced)\n\n\t\t\tselfdestruct(owner);\n\n\t\telse\n\n\t\t\tselfdestruct(newAdmin);\n",
          "message": "TwoKeyAdmin.destroy (TwoKeyReg.sol#763-768) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 382,
          "vulnerability_to_line": 384,
          "vulnerability_code": "  function destroyAndSend(address _recipient) public onlyOwner {\n\n    selfdestruct(_recipient);\n",
          "message": "Destructible.destroyAndSend (TwoKeyReg.sol#382-384) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 655,
          "vulnerability_to_line": 665,
          "vulnerability_code": "\tfunction sellTokens(uint256 _tokenAmount) public onlyAlive payable {\n\n\t\trequire(token.allowance(this, msg.sender) >= _tokenAmount);\n\n\t\trequire(token.transferFrom(msg.sender, this, _tokenAmount));\n\n\n\n\t\tuint256 weiAmount = _getWeiAmount(_tokenAmount);\n\n\t\trequire(weiAmount >= address(this).balance);\n\n\t    weiRaised = weiRaised.sub(weiAmount);\n\n\t    msg.sender.transfer(weiAmount);\n\n\n\n\t    emit TokenSell(msg.sender, wallet, weiAmount, _tokenAmount);\n",
          "message": "TwoKeyUpgradableExchange.sellTokens (TwoKeyReg.sol#655-665) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 671,
          "vulnerability_to_line": 673,
          "vulnerability_code": "\tfunction upgrade(address _to) public onlyAlive onlyOwner {\n\n\t\tfiller = _to;\n",
          "message": "TwoKeyUpgradableExchange.upgrade (TwoKeyReg.sol#671-673) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 757,
          "vulnerability_to_line": 761,
          "vulnerability_code": "\tfunction() public payable {\n\n\t\tif (wasReplaced) {\n\n\t\t\tnewAdmin.transfer(msg.value);\n\n\t\t}\n",
          "message": "TwoKeyAdmin.fallback (TwoKeyReg.sol#757-761) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 884,
          "vulnerability_to_line": 892,
          "vulnerability_code": "    function addContract(address _contractAddress) public onlyAuthorizedSubadmins {\n\n        require(_contractAddress != address(0));\n\n        bytes memory _contractCode = GetCode.at(_contractAddress);\n\n        bytes32 cc = keccak256(abi.encodePacked(_contractCode));\n\n        emit Code(cc,2);\n\n        canEmit[cc] = true;\n\n    }\n\n\n",
          "message": "TwoKeyEventSource.addContract (TwoKeyReg.sol#884-892) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 896,
          "vulnerability_to_line": 904,
          "vulnerability_code": "    function removeContract(address _contractAddress) public onlyAuthorizedSubadmins {\n\n        require(_contractAddress != address(0));\n\n        bytes memory _contractCode = GetCode.at(_contractAddress);\n\n        bytes32 cc = keccak256(abi.encodePacked(_contractCode));\n\n        emit Code(cc,3);\n\n        canEmit[cc] = false;\n\n    }\n\n\n",
          "message": "TwoKeyEventSource.removeContract (TwoKeyReg.sol#896-904) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 907,
          "vulnerability_to_line": 912,
          "vulnerability_code": "    function addAuthorizedAddress(address _newAddress) public onlyAdmin {\n\n        require(_newAddress != address(0));\n\n        authorizedSubadmins[_newAddress] = true;\n\n    }\n\n\n",
          "message": "TwoKeyEventSource.addAuthorizedAddress (TwoKeyReg.sol#907-912) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 915,
          "vulnerability_to_line": 922,
          "vulnerability_code": "    function removeAuthorizedAddress(address _authorizedAddress) public onlyAdmin {\n\n        require(_authorizedAddress != address(0));\n\n        require(authorizedSubadmins[_authorizedAddress] == true);\n\n\n\n        authorizedSubadmins[_authorizedAddress] = false;\n\n    }\n\n\n",
          "message": "TwoKeyEventSource.removeAuthorizedAddress (TwoKeyReg.sol#915-922) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 926,
          "vulnerability_to_line": 932,
          "vulnerability_code": "    function addCampaignType(bytes _contractCode, CampaignType _campaignType) public onlyAdmin {\n\n        bytes32 cc = keccak256(abi.encodePacked(_contractCode));\n\n        require(canEmit[cc] == true); //Check if this validation is needed\n\n        codeToType[cc] = _campaignType;\n\n    }\n\n\n",
          "message": "TwoKeyEventSource.addCampaignType (TwoKeyReg.sol#926-932) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 935,
          "vulnerability_to_line": 939,
          "vulnerability_code": "    function changeAdmin(address _newAdminAddress) public onlyAdmin {\n\n        twoKeyAdmin = TwoKeyAdmin(_newAdminAddress);\n\n    }\n\n\n",
          "message": "TwoKeyEventSource.changeAdmin (TwoKeyReg.sol#935-939) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 939,
          "vulnerability_to_line": 944,
          "vulnerability_code": "    function checkCanEmit(bytes _contractCode) public view returns (bool) {\n\n        bytes32 cc = keccak256(abi.encodePacked(_contractCode));\n\n        return canEmit[cc];\n\n    }\n\n\n",
          "message": "TwoKeyEventSource.checkCanEmit (TwoKeyReg.sol#939-944) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 946,
          "vulnerability_to_line": 950,
          "vulnerability_code": "    function created(address _campaign, address _owner) public onlyAllowedContracts{\n\n    \temit Created(_campaign, _owner);\n\n    }\n\n\n",
          "message": "TwoKeyEventSource.created (TwoKeyReg.sol#946-950) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 952,
          "vulnerability_to_line": 957,
          "vulnerability_code": "    function joined(address _campaign, address _from, address _to) public onlyAllowedContracts {\n\n      activeUser[_to] = true;  // do we want to do it also for _from and created, escrow, rewarded, fulfilled\n\n    \temit Joined(_campaign, _from, _to);\n\n    }\n\n\n",
          "message": "TwoKeyEventSource.joined (TwoKeyReg.sol#952-957) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 959,
          "vulnerability_to_line": 963,
          "vulnerability_code": "    function escrow(address _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts{\n\n    \temit Escrow(_campaign, _converter, _tokenID, _childContractID, _indexOrAmount, _type);\n\n    }\n\n\n",
          "message": "TwoKeyEventSource.escrow (TwoKeyReg.sol#959-963) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 965,
          "vulnerability_to_line": 969,
          "vulnerability_code": "    function rewarded(address _campaign, address _to, uint256 _amount) public onlyAllowedContracts {\n\n    \temit Rewarded(_campaign, _to, _amount);\n\n\t}\n\n\n",
          "message": "TwoKeyEventSource.rewarded (TwoKeyReg.sol#965-969) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 971,
          "vulnerability_to_line": 975,
          "vulnerability_code": "\tfunction fulfilled(address  _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts {\n\n\t\temit Fulfilled(_campaign, _converter, _tokenID, _childContractID, _indexOrAmount, _type);\n\n\t}\n\n\n",
          "message": "TwoKeyEventSource.fulfilled (TwoKeyReg.sol#971-975) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 977,
          "vulnerability_to_line": 981,
          "vulnerability_code": "\tfunction cancelled(address  _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts{\n\n\t\temit Cancelled(_campaign, _converter, _tokenID, _childContractID, _indexOrAmount, _type);\n\n\t}\n\n\n",
          "message": "TwoKeyEventSource.cancelled (TwoKeyReg.sol#977-981) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 982,
          "vulnerability_to_line": 986,
          "vulnerability_code": "    function getAdmin() public view returns (address) {\n\n        return address(twoKeyAdmin);\n\n    }\n\n\n",
          "message": "TwoKeyEventSource.getAdmin (TwoKeyReg.sol#982-986) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 986,
          "vulnerability_to_line": 989,
          "vulnerability_code": "    function checkIsAuthorized(address _subAdmin) public view returns (bool) {\n\n        return authorizedSubadmins[_subAdmin];\n\n    }\n",
          "message": "TwoKeyEventSource.checkIsAuthorized (TwoKeyReg.sol#986-989) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 996,
          "vulnerability_to_line": 1024,
          "vulnerability_code": "    function params0(address c, bytes _method) public view returns (uint answer) {\n\n        // https://medium.com/@blockchain101/calling-the-function-of-another-contract-in-solidity-f9edfa921f4c\n\n        //    dc = c;\n\n        bytes4 sig = bytes4(keccak256(_method));\n\n        assembly {\n\n        // move pointer to free memory spot\n\n            let ptr := mload(0x40)\n\n        // put function sig at memory spot\n\n            mstore(ptr,sig)\n\n\n\n            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n\n            15000, // gas limit\n\n            c, // sload(dc_slot),  // to addr. append var to _slot to access storage variable\n\n            0, // not transfer any ether (comment if using staticcall)\n\n            ptr, // Inputs are stored at location ptr\n\n            0x04, // Inputs are 0 bytes long\n\n            ptr,  //Store output over input\n\n            0x20) //Outputs are 1 bytes long\n\n\n\n            if eq(result, 0) {\n\n                revert(0, 0)\n\n            }\n\n\n\n            answer := mload(ptr) // Assign output to answer var\n\n            mstore(0x40,add(ptr,0x24)) // Set storage pointer to new space\n\n        }\n\n    }\n\n\n",
          "message": "Call.params0 (TwoKeyReg.sol#996-1024) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1024,
          "vulnerability_to_line": 1054,
          "vulnerability_code": "    function params1(address c, bytes _method, uint _val) public view returns (uint answer) {\n\n        // https://medium.com/@blockchain101/calling-the-function-of-another-contract-in-solidity-f9edfa921f4c\n\n        //    dc = c;\n\n        bytes4 sig = bytes4(keccak256(_method));\n\n        assembly {\n\n        // move pointer to free memory spot\n\n            let ptr := mload(0x40)\n\n        // put function sig at memory spot\n\n            mstore(ptr,sig)\n\n        // append argument after function sig\n\n            mstore(add(ptr,0x04), _val)\n\n\n\n            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n\n            15000, // gas limit\n\n            c, // sload(dc_slot),  // to addr. append var to _slot to access storage variable\n\n            0, // not transfer any ether (comment if using staticcall)\n\n            ptr, // Inputs are stored at location ptr\n\n            0x24, // Inputs are 0 bytes long\n\n            ptr,  //Store output over input\n\n            0x20) //Outputs are 1 bytes long\n\n\n\n            if eq(result, 0) {\n\n                revert(0, 0)\n\n            }\n\n\n\n            answer := mload(ptr) // Assign output to answer var\n\n            mstore(0x40,add(ptr,0x24)) // Set storage pointer to new space\n\n        }\n\n    }\n\n\n",
          "message": "Call.params1 (TwoKeyReg.sol#1024-1054) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1054,
          "vulnerability_to_line": 1086,
          "vulnerability_code": "    function params2(address c, bytes _method, uint _val1, uint _val2) public view returns (uint answer) {\n\n        // https://medium.com/@blockchain101/calling-the-function-of-another-contract-in-solidity-f9edfa921f4c\n\n        //    dc = c;\n\n        bytes4 sig = bytes4(keccak256(_method));\n\n        assembly {\n\n        // move pointer to free memory spot\n\n            let ptr := mload(0x40)\n\n        // put function sig at memory spot\n\n            mstore(ptr,sig)\n\n        // append argument after function sig\n\n            mstore(add(ptr,0x04), _val1)\n\n            mstore(add(ptr,0x24), _val2)\n\n\n\n            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n\n            15000, // gas limit\n\n            c, // sload(dc_slot),  // to addr. append var to _slot to access storage variable\n\n            0, // not transfer any ether (comment if using staticcall)\n\n            ptr, // Inputs are stored at location ptr\n\n            0x44, // Inputs are 4 bytes for signature and 2 uint256\n\n            ptr,  //Store output over input\n\n            0x20) //Outputs are 1 uint long\n\n\n\n        // TODO cause revert\n\n        //            if eq(result, 0) {\n\n        //                revert(0, 0)\n\n        //            }\n\n\n\n            answer := mload(ptr) // Assign output to answer var\n\n            mstore(0x40,add(ptr,0x20)) // Set storage pointer to new space\n\n        }\n\n    }\n\n\n",
          "message": "Call.params2 (TwoKeyReg.sol#1054-1086) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1226,
          "vulnerability_to_line": 1252,
          "vulnerability_code": "    function recoverSig(bytes sig, address old_key, address last_address) public pure returns (address[], address[], uint8[]) {\n\n        // validate sig AND\n\n        // recover the information from the signature: influencers, public_link_keys, weights/cuts\n\n        // influencers may have one more address than the keys and weights arrays\n\n        //\n\n        require(old_key != address(0),'no public link key');\n\n\n\n        address[] memory influencers;\n\n        address[] memory keys;\n\n        uint8[] memory weights;\n\n        uint[] memory offsets;\n\n        (influencers, keys, weights, offsets) = recoverSigParts(sig, last_address);\n\n\n\n        // check if we received a valid signature\n\n        for(uint i = 0; i < influencers.length; i++) {\n\n            if (i < weights.length) {\n\n                require (recoverHash(keccak256(abi.encodePacked(weights[i], keys[i], influencers[i])),sig,offsets[i]) == old_key, 'illegal signature');\n\n                old_key = keys[i];\n\n            } else {\n\n                // signed message for the last step is the address of the converter\n\n                require (recoverHash(keccak256(abi.encodePacked(influencers[i])),sig,offsets[i]) == old_key, 'illegal last signature');\n\n            }\n\n        }\n\n\n\n        return (influencers, keys, weights);\n\n    }\n",
          "message": "Call.recoverSig (TwoKeyReg.sol#1226-1252) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1295,
          "vulnerability_to_line": 1299,
          "vulnerability_code": "  function addName(string _name, address _sender) onlyOwner public {\n\n    addNameInternal(_name, _sender);\n\n  }\n\n\n",
          "message": "TwoKeyReg.addName (TwoKeyReg.sol#1295-1299) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1299,
          "vulnerability_to_line": 1303,
          "vulnerability_code": "  function addNameByUser(string _name) public {\n\n    addNameInternal(_name, msg.sender);\n\n  }\n\n\n",
          "message": "TwoKeyReg.addNameByUser (TwoKeyReg.sol#1299-1303) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1303,
          "vulnerability_to_line": 1311,
          "vulnerability_code": "  function addNameSigned(string _name, bytes external_sig) public {\n\n    bytes32 hash = keccak256(abi.encodePacked(keccak256(abi.encodePacked(\"bytes binding to name\")),\n\n      keccak256(abi.encodePacked(_name))));\n\n    address eth_address = Call.recoverHash(hash,external_sig,0);\n\n    require (msg.sender == eth_address || msg.sender == owner, \"only owner or user can change name\");\n\n    addNameInternal(_name, eth_address);\n\n  }\n\n\n",
          "message": "TwoKeyReg.addNameSigned (TwoKeyReg.sol#1303-1311) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1316,
          "vulnerability_to_line": 1321,
          "vulnerability_code": "  function setNoteByUser(bytes note) public {\n\n    // note is a message you can store with sig. For example it could be the secret you used encrypted by you\n\n    setNoteInternal(note, msg.sender);\n\n  }\n\n\n",
          "message": "TwoKeyReg.setNoteByUser (TwoKeyReg.sol#1316-1321) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1331,
          "vulnerability_to_line": 1335,
          "vulnerability_code": "  function addPlasma2EthereumByUser(bytes sig) public {\n\n    addPlasma2EthereumInternal(sig, msg.sender);\n\n  }\n\n\n",
          "message": "TwoKeyReg.addPlasma2EthereumByUser (TwoKeyReg.sol#1331-1335) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1335,
          "vulnerability_to_line": 1344,
          "vulnerability_code": "  function setPlasma2EthereumAndNoteSigned(bytes sig, bytes note, bytes external_sig) public {\n\n    bytes32 hash = keccak256(abi.encodePacked(keccak256(abi.encodePacked(\"bytes binding to ethereum-plasma\")),\n\n      keccak256(abi.encodePacked(sig,note))));\n\n    address eth_address = Call.recoverHash(hash,external_sig,0);\n\n    require (msg.sender == eth_address || msg.sender == owner, \"only owner or user can change ethereum-plasma\");\n\n    addPlasma2EthereumInternal(sig, eth_address);\n\n    setNoteInternal(note, eth_address);\n\n  }\n\n\n",
          "message": "TwoKeyReg.setPlasma2EthereumAndNoteSigned (TwoKeyReg.sol#1335-1344) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1344,
          "vulnerability_to_line": 1347,
          "vulnerability_code": "  function getName2Owner(string _name) public view returns (address) {\n\n    return name2owner[keccak256(abi.encodePacked(_name))];\n\n  }\n",
          "message": "TwoKeyReg.getName2Owner (TwoKeyReg.sol#1344-1347) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1347,
          "vulnerability_to_line": 1350,
          "vulnerability_code": "  function getOwner2Name(address _sender) public view returns (string) {\n\n    return owner2name[_sender];\n\n  }\n",
          "message": "TwoKeyReg.getOwner2Name (TwoKeyReg.sol#1347-1350) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferOwnership(address _newOwner) public onlyOwner {\n",
          "message": "Parameter '_newOwner' of Ownable.transferOwnership (TwoKeyReg.sol#53) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": 65,
          "vulnerability_code": "  function _transferOwnership(address _newOwner) internal {\n\n    require(_newOwner != address(0));\n\n    emit OwnershipTransferred(owner, _newOwner);\n\n    owner = _newOwner;\n",
          "message": "Function 'Ownable._transferOwnership' (TwoKeyReg.sol#61-65) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function _transferOwnership(address _newOwner) internal {\n",
          "message": "Parameter '_newOwner' of Ownable._transferOwnership (TwoKeyReg.sol#61) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_a' of SafeMath.mul (TwoKeyReg.sol#82) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_b' of SafeMath.mul (TwoKeyReg.sol#82) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_a' of SafeMath.div (TwoKeyReg.sol#98) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_b' of SafeMath.div (TwoKeyReg.sol#98) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_a' of SafeMath.sub (TwoKeyReg.sol#108) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_b' of SafeMath.sub (TwoKeyReg.sol#108) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_a' of SafeMath.add (TwoKeyReg.sol#116) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_b' of SafeMath.add (TwoKeyReg.sol#116) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 302,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256) {\n",
          "message": "Parameter '_owner' of StandardToken.balanceOf (TwoKeyReg.sol#302) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 287,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_to' of StandardToken.transfer (TwoKeyReg.sol#287) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 287,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of StandardToken.transfer (TwoKeyReg.sol#287) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _owner,\n",
          "message": "Parameter '_owner' of StandardToken.allowance (TwoKeyReg.sol#217) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 218,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _spender\n",
          "message": "Parameter '_spender' of StandardToken.allowance (TwoKeyReg.sol#218) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 204,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_spender' of StandardToken.approve (TwoKeyReg.sol#204) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 204,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of StandardToken.approve (TwoKeyReg.sol#204) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 177,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _from,\n",
          "message": "Parameter '_from' of StandardToken.transferFrom (TwoKeyReg.sol#177) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 178,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _to,\n",
          "message": "Parameter '_to' of StandardToken.transferFrom (TwoKeyReg.sol#178) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 179,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of StandardToken.transferFrom (TwoKeyReg.sol#179) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 237,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _spender,\n",
          "message": "Parameter '_spender' of StandardToken.increaseApproval (TwoKeyReg.sol#237) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 238,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _addedValue\n",
          "message": "Parameter '_addedValue' of StandardToken.increaseApproval (TwoKeyReg.sol#238) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 259,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _spender,\n",
          "message": "Parameter '_spender' of StandardToken.decreaseApproval (TwoKeyReg.sol#259) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 260,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _subtractedValue\n",
          "message": "Parameter '_subtractedValue' of StandardToken.decreaseApproval (TwoKeyReg.sol#260) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 338,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _from,\n",
          "message": "Parameter '_from' of TwoKeyEconomy.transferFrom (TwoKeyReg.sol#338) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 339,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _to,\n",
          "message": "Parameter '_to' of TwoKeyEconomy.transferFrom (TwoKeyReg.sol#339) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 340,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of TwoKeyEconomy.transferFrom (TwoKeyReg.sol#340) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 382,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function destroyAndSend(address _recipient) public onlyOwner {\n",
          "message": "Parameter '_recipient' of Destructible.destroyAndSend (TwoKeyReg.sol#382) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 400,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ERC20Basic _token,\n",
          "message": "Parameter '_token' of SafeERC20.safeTransfer (TwoKeyReg.sol#400) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 401,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _to,\n",
          "message": "Parameter '_to' of SafeERC20.safeTransfer (TwoKeyReg.sol#401) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 402,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of SafeERC20.safeTransfer (TwoKeyReg.sol#402) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 410,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ERC20 _token,\n",
          "message": "Parameter '_token' of SafeERC20.safeTransferFrom (TwoKeyReg.sol#410) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 411,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _from,\n",
          "message": "Parameter '_from' of SafeERC20.safeTransferFrom (TwoKeyReg.sol#411) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 412,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _to,\n",
          "message": "Parameter '_to' of SafeERC20.safeTransferFrom (TwoKeyReg.sol#412) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 413,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of SafeERC20.safeTransferFrom (TwoKeyReg.sol#413) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 421,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ERC20 _token,\n",
          "message": "Parameter '_token' of SafeERC20.safeApprove (TwoKeyReg.sol#421) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 422,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _spender,\n",
          "message": "Parameter '_spender' of SafeERC20.safeApprove (TwoKeyReg.sol#422) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 423,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of SafeERC20.safeApprove (TwoKeyReg.sol#423) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 487,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n",
          "message": "Parameter '_rate' of Crowdsale. (TwoKeyReg.sol#487) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 487,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n",
          "message": "Parameter '_wallet' of Crowdsale. (TwoKeyReg.sol#487) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 487,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n",
          "message": "Parameter '_token' of Crowdsale. (TwoKeyReg.sol#487) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 512,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function buyTokens(address _beneficiary) public payable {\n",
          "message": "Parameter '_beneficiary' of Crowdsale.buyTokens (TwoKeyReg.sol#512) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 549,
          "vulnerability_to_line": 557,
          "vulnerability_code": "  function _preValidatePurchase(\n\n    address _beneficiary,\n\n    uint256 _weiAmount\n\n  )\n\n  internal\n\n  {\n\n    require(_beneficiary != address(0));\n\n    require(_weiAmount != 0);\n",
          "message": "Function 'Crowdsale._preValidatePurchase' (TwoKeyReg.sol#549-557) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 550,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _beneficiary,\n",
          "message": "Parameter '_beneficiary' of Crowdsale._preValidatePurchase (TwoKeyReg.sol#550) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 551,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _weiAmount\n",
          "message": "Parameter '_weiAmount' of Crowdsale._preValidatePurchase (TwoKeyReg.sol#551) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 564,
          "vulnerability_to_line": 571,
          "vulnerability_code": "  function _postValidatePurchase(\n\n    address _beneficiary,\n\n    uint256 _weiAmount\n\n  )\n\n  internal\n\n  {\n\n    // optional override\n",
          "message": "Function 'Crowdsale._postValidatePurchase' (TwoKeyReg.sol#564-571) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 578,
          "vulnerability_to_line": 585,
          "vulnerability_code": "  function _deliverTokens(\n\n    address _beneficiary,\n\n    uint256 _tokenAmount\n\n  )\n\n  internal\n\n  {\n\n    token.safeTransfer(_beneficiary, _tokenAmount);\n",
          "message": "Function 'Crowdsale._deliverTokens' (TwoKeyReg.sol#578-585) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 579,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _beneficiary,\n",
          "message": "Parameter '_beneficiary' of Crowdsale._deliverTokens (TwoKeyReg.sol#579) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 580,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _tokenAmount\n",
          "message": "Parameter '_tokenAmount' of Crowdsale._deliverTokens (TwoKeyReg.sol#580) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 592,
          "vulnerability_to_line": 599,
          "vulnerability_code": "  function _processPurchase(\n\n    address _beneficiary,\n\n    uint256 _tokenAmount\n\n  )\n\n  internal\n\n  {\n\n    _deliverTokens(_beneficiary, _tokenAmount);\n",
          "message": "Function 'Crowdsale._processPurchase' (TwoKeyReg.sol#592-599) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 593,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _beneficiary,\n",
          "message": "Parameter '_beneficiary' of Crowdsale._processPurchase (TwoKeyReg.sol#593) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 594,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _tokenAmount\n",
          "message": "Parameter '_tokenAmount' of Crowdsale._processPurchase (TwoKeyReg.sol#594) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 606,
          "vulnerability_to_line": 613,
          "vulnerability_code": "  function _updatePurchasingState(\n\n    address _beneficiary,\n\n    uint256 _weiAmount\n\n  )\n\n  internal\n\n  {\n\n    // optional override\n",
          "message": "Function 'Crowdsale._updatePurchasingState' (TwoKeyReg.sol#606-613) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 620,
          "vulnerability_to_line": 624,
          "vulnerability_code": "  function _getTokenAmount(uint256 _weiAmount)\n\n  internal view returns (uint256)\n\n  {\n\n    return _weiAmount.mul(rate);\n",
          "message": "Function 'Crowdsale._getTokenAmount' (TwoKeyReg.sol#620-624) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 620,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function _getTokenAmount(uint256 _weiAmount)\n",
          "message": "Parameter '_weiAmount' of Crowdsale._getTokenAmount (TwoKeyReg.sol#620) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 629,
          "vulnerability_to_line": 631,
          "vulnerability_code": "  function _forwardFunds() internal {\n\n    wallet.transfer(msg.value);\n",
          "message": "Function 'Crowdsale._forwardFunds' (TwoKeyReg.sol#629-631) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 680,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction buyTokens(address _beneficiary) public onlyAlive payable {\n",
          "message": "Parameter '_beneficiary' of TwoKeyUpgradableExchange.buyTokens (TwoKeyReg.sol#680) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 655,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction sellTokens(uint256 _tokenAmount) public onlyAlive payable {\n",
          "message": "Parameter '_tokenAmount' of TwoKeyUpgradableExchange.sellTokens (TwoKeyReg.sol#655) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 667,
          "vulnerability_to_line": 669,
          "vulnerability_code": "\tfunction _getWeiAmount(uint256 _tokenAmount) internal view returns (uint256) {\n\n\t    return _tokenAmount.div(rate);\n",
          "message": "Function 'TwoKeyUpgradableExchange._getWeiAmount' (TwoKeyReg.sol#667-669) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 667,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction _getWeiAmount(uint256 _tokenAmount) internal view returns (uint256) {\n",
          "message": "Parameter '_tokenAmount' of TwoKeyUpgradableExchange._getWeiAmount (TwoKeyReg.sol#667) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 671,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction upgrade(address _to) public onlyAlive onlyOwner {\n",
          "message": "Parameter '_to' of TwoKeyUpgradableExchange.upgrade (TwoKeyReg.sol#671) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 739,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction transferByAdmins(address _to, uint256 _tokens) external wasNotReplaced adminsVotingApproved {\n",
          "message": "Parameter '_to' of TwoKeyAdmin.transferByAdmins (TwoKeyReg.sol#739) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 739,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction transferByAdmins(address _to, uint256 _tokens) external wasNotReplaced adminsVotingApproved {\n",
          "message": "Parameter '_tokens' of TwoKeyAdmin.transferByAdmins (TwoKeyReg.sol#739) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 716,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tTwoKeyEconomy _economy,\n",
          "message": "Parameter '_economy' of TwoKeyAdmin. (TwoKeyReg.sol#716) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 717,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\taddress _electorateAdmins,\n",
          "message": "Parameter '_electorateAdmins' of TwoKeyAdmin. (TwoKeyReg.sol#717) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 718,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tTwoKeyUpgradableExchange _exchange) Ownable() Destructible() payable public {\n",
          "message": "Parameter '_exchange' of TwoKeyAdmin. (TwoKeyReg.sol#718) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 876,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _twoKeyAdminAddress) public {\n",
          "message": "Parameter '_twoKeyAdminAddress' of TwoKeyEventSource. (TwoKeyReg.sol#876) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 884,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addContract(address _contractAddress) public onlyAuthorizedSubadmins {\n",
          "message": "Parameter '_contractAddress' of TwoKeyEventSource.addContract (TwoKeyReg.sol#884) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 896,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function removeContract(address _contractAddress) public onlyAuthorizedSubadmins {\n",
          "message": "Parameter '_contractAddress' of TwoKeyEventSource.removeContract (TwoKeyReg.sol#896) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 907,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addAuthorizedAddress(address _newAddress) public onlyAdmin {\n",
          "message": "Parameter '_newAddress' of TwoKeyEventSource.addAuthorizedAddress (TwoKeyReg.sol#907) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 915,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function removeAuthorizedAddress(address _authorizedAddress) public onlyAdmin {\n",
          "message": "Parameter '_authorizedAddress' of TwoKeyEventSource.removeAuthorizedAddress (TwoKeyReg.sol#915) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 926,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addCampaignType(bytes _contractCode, CampaignType _campaignType) public onlyAdmin {\n",
          "message": "Parameter '_contractCode' of TwoKeyEventSource.addCampaignType (TwoKeyReg.sol#926) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 926,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addCampaignType(bytes _contractCode, CampaignType _campaignType) public onlyAdmin {\n",
          "message": "Parameter '_campaignType' of TwoKeyEventSource.addCampaignType (TwoKeyReg.sol#926) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 935,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function changeAdmin(address _newAdminAddress) public onlyAdmin {\n",
          "message": "Parameter '_newAdminAddress' of TwoKeyEventSource.changeAdmin (TwoKeyReg.sol#935) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 939,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function checkCanEmit(bytes _contractCode) public view returns (bool) {\n",
          "message": "Parameter '_contractCode' of TwoKeyEventSource.checkCanEmit (TwoKeyReg.sol#939) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 946,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function created(address _campaign, address _owner) public onlyAllowedContracts{\n",
          "message": "Parameter '_campaign' of TwoKeyEventSource.created (TwoKeyReg.sol#946) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 946,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function created(address _campaign, address _owner) public onlyAllowedContracts{\n",
          "message": "Parameter '_owner' of TwoKeyEventSource.created (TwoKeyReg.sol#946) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 952,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function joined(address _campaign, address _from, address _to) public onlyAllowedContracts {\n",
          "message": "Parameter '_campaign' of TwoKeyEventSource.joined (TwoKeyReg.sol#952) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 952,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function joined(address _campaign, address _from, address _to) public onlyAllowedContracts {\n",
          "message": "Parameter '_from' of TwoKeyEventSource.joined (TwoKeyReg.sol#952) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 952,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function joined(address _campaign, address _from, address _to) public onlyAllowedContracts {\n",
          "message": "Parameter '_to' of TwoKeyEventSource.joined (TwoKeyReg.sol#952) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 959,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function escrow(address _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts{\n",
          "message": "Parameter '_campaign' of TwoKeyEventSource.escrow (TwoKeyReg.sol#959) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 959,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function escrow(address _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts{\n",
          "message": "Parameter '_converter' of TwoKeyEventSource.escrow (TwoKeyReg.sol#959) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 959,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function escrow(address _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts{\n",
          "message": "Parameter '_tokenID' of TwoKeyEventSource.escrow (TwoKeyReg.sol#959) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 959,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function escrow(address _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts{\n",
          "message": "Parameter '_childContractID' of TwoKeyEventSource.escrow (TwoKeyReg.sol#959) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 959,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function escrow(address _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts{\n",
          "message": "Parameter '_indexOrAmount' of TwoKeyEventSource.escrow (TwoKeyReg.sol#959) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 959,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function escrow(address _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts{\n",
          "message": "Parameter '_type' of TwoKeyEventSource.escrow (TwoKeyReg.sol#959) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 965,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function rewarded(address _campaign, address _to, uint256 _amount) public onlyAllowedContracts {\n",
          "message": "Parameter '_campaign' of TwoKeyEventSource.rewarded (TwoKeyReg.sol#965) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 965,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function rewarded(address _campaign, address _to, uint256 _amount) public onlyAllowedContracts {\n",
          "message": "Parameter '_to' of TwoKeyEventSource.rewarded (TwoKeyReg.sol#965) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 965,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function rewarded(address _campaign, address _to, uint256 _amount) public onlyAllowedContracts {\n",
          "message": "Parameter '_amount' of TwoKeyEventSource.rewarded (TwoKeyReg.sol#965) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 971,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction fulfilled(address  _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts {\n",
          "message": "Parameter '_campaign' of TwoKeyEventSource.fulfilled (TwoKeyReg.sol#971) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 971,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction fulfilled(address  _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts {\n",
          "message": "Parameter '_converter' of TwoKeyEventSource.fulfilled (TwoKeyReg.sol#971) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 971,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction fulfilled(address  _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts {\n",
          "message": "Parameter '_tokenID' of TwoKeyEventSource.fulfilled (TwoKeyReg.sol#971) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 971,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction fulfilled(address  _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts {\n",
          "message": "Parameter '_childContractID' of TwoKeyEventSource.fulfilled (TwoKeyReg.sol#971) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 971,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction fulfilled(address  _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts {\n",
          "message": "Parameter '_indexOrAmount' of TwoKeyEventSource.fulfilled (TwoKeyReg.sol#971) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 971,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction fulfilled(address  _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts {\n",
          "message": "Parameter '_type' of TwoKeyEventSource.fulfilled (TwoKeyReg.sol#971) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 977,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction cancelled(address  _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts{\n",
          "message": "Parameter '_campaign' of TwoKeyEventSource.cancelled (TwoKeyReg.sol#977) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 977,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction cancelled(address  _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts{\n",
          "message": "Parameter '_converter' of TwoKeyEventSource.cancelled (TwoKeyReg.sol#977) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 977,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction cancelled(address  _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts{\n",
          "message": "Parameter '_tokenID' of TwoKeyEventSource.cancelled (TwoKeyReg.sol#977) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 977,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction cancelled(address  _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts{\n",
          "message": "Parameter '_childContractID' of TwoKeyEventSource.cancelled (TwoKeyReg.sol#977) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 977,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction cancelled(address  _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts{\n",
          "message": "Parameter '_indexOrAmount' of TwoKeyEventSource.cancelled (TwoKeyReg.sol#977) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 977,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction cancelled(address  _campaign, address _converter, uint256 _tokenID, address _childContractID, uint256 _indexOrAmount, CampaignType _type) public onlyAllowedContracts{\n",
          "message": "Parameter '_type' of TwoKeyEventSource.cancelled (TwoKeyReg.sol#977) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 986,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function checkIsAuthorized(address _subAdmin) public view returns (bool) {\n",
          "message": "Parameter '_subAdmin' of TwoKeyEventSource.checkIsAuthorized (TwoKeyReg.sol#986) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 996,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params0(address c, bytes _method) public view returns (uint answer) {\n",
          "message": "Parameter '_method' of Call.params0 (TwoKeyReg.sol#996) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1024,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params1(address c, bytes _method, uint _val) public view returns (uint answer) {\n",
          "message": "Parameter '_method' of Call.params1 (TwoKeyReg.sol#1024) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1054,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params2(address c, bytes _method, uint _val1, uint _val2) public view returns (uint answer) {\n",
          "message": "Parameter '_method' of Call.params2 (TwoKeyReg.sol#1054) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1159,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigParts(bytes sig, address last_address) private pure returns (address[], address[], uint8[], uint[]) {\n",
          "message": "Parameter 'last_address' of Call.recoverSigParts (TwoKeyReg.sol#1159) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1226,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSig(bytes sig, address old_key, address last_address) public pure returns (address[], address[], uint8[]) {\n",
          "message": "Parameter 'old_key' of Call.recoverSig (TwoKeyReg.sol#1226) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1226,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSig(bytes sig, address old_key, address last_address) public pure returns (address[], address[], uint8[]) {\n",
          "message": "Parameter 'last_address' of Call.recoverSig (TwoKeyReg.sol#1226) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1277,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(TwoKeyEventSource _eventSource) public {\n",
          "message": "Parameter '_eventSource' of TwoKeyReg. (TwoKeyReg.sol#1277) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1281,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addNameInternal(string _name, address _sender) private {\n",
          "message": "Parameter '_name' of TwoKeyReg.addNameInternal (TwoKeyReg.sol#1281) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1281,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addNameInternal(string _name, address _sender) private {\n",
          "message": "Parameter '_sender' of TwoKeyReg.addNameInternal (TwoKeyReg.sol#1281) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1295,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addName(string _name, address _sender) onlyOwner public {\n",
          "message": "Parameter '_name' of TwoKeyReg.addName (TwoKeyReg.sol#1295) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1295,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addName(string _name, address _sender) onlyOwner public {\n",
          "message": "Parameter '_sender' of TwoKeyReg.addName (TwoKeyReg.sol#1295) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1299,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addNameByUser(string _name) public {\n",
          "message": "Parameter '_name' of TwoKeyReg.addNameByUser (TwoKeyReg.sol#1299) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1303,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addNameSigned(string _name, bytes external_sig) public {\n",
          "message": "Parameter '_name' of TwoKeyReg.addNameSigned (TwoKeyReg.sol#1303) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1303,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addNameSigned(string _name, bytes external_sig) public {\n",
          "message": "Parameter 'external_sig' of TwoKeyReg.addNameSigned (TwoKeyReg.sol#1303) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1321,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addPlasma2EthereumInternal(bytes sig, address eth_address) private {\n",
          "message": "Parameter 'eth_address' of TwoKeyReg.addPlasma2EthereumInternal (TwoKeyReg.sol#1321) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1335,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setPlasma2EthereumAndNoteSigned(bytes sig, bytes note, bytes external_sig) public {\n",
          "message": "Parameter 'external_sig' of TwoKeyReg.setPlasma2EthereumAndNoteSigned (TwoKeyReg.sol#1335) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1344,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getName2Owner(string _name) public view returns (address) {\n",
          "message": "Parameter '_name' of TwoKeyReg.getName2Owner (TwoKeyReg.sol#1344) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1347,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getOwner2Name(address _sender) public view returns (string) {\n",
          "message": "Parameter '_sender' of TwoKeyReg.getOwner2Name (TwoKeyReg.sol#1347) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    owner = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 204,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 1240,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i = 0; i < influencers.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 1185,
          "vulnerability_to_line": null,
          "vulnerability_code": "        while (idx + 65 <= sig.length) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 795,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function at(address _addr) internal view returns (bytes o_code) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 996,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params0(address c, bytes _method) public view returns (uint answer) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 1024,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params1(address c, bytes _method, uint _val) public view returns (uint answer) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 1054,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params2(address c, bytes _method, uint _val1, uint _val2) public view returns (uint answer) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1240,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i = 0; i < influencers.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1185,
          "vulnerability_to_line": null,
          "vulnerability_code": "        while (idx + 65 <= sig.length) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 147,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 310,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 322,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 360,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 368,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 389,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 433,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 636,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 688,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 786,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 814,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 993,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1256,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 159,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 450,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 1086,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function loadAddress(bytes sig, uint idx) public pure returns (address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 1096,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function loadUint8(bytes sig, uint idx) public pure returns (uint8) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 1107,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverHash(bytes32 hash, bytes sig, uint idx) public pure returns (address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 795,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function at(address _addr) internal view returns (bytes o_code) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 996,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params0(address c, bytes _method) public view returns (uint answer) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 1024,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params1(address c, bytes _method, uint _val) public view returns (uint answer) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 1054,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params2(address c, bytes _method, uint _val1, uint _val2) public view returns (uint answer) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1144,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigMemory(bytes sig) private pure returns (address[], address[], uint8[], uint[], uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1159,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigParts(bytes sig, address last_address) private pure returns (address[], address[], uint8[], uint[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 757,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction() public payable {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 795,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function at(address _addr) internal view returns (bytes o_code) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 926,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addCampaignType(bytes _contractCode, CampaignType _campaignType) public onlyAdmin {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 939,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function checkCanEmit(bytes _contractCode) public view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 996,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params0(address c, bytes _method) public view returns (uint answer) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1024,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params1(address c, bytes _method, uint _val) public view returns (uint answer) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1054,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params2(address c, bytes _method, uint _val1, uint _val2) public view returns (uint answer) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1086,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function loadAddress(bytes sig, uint idx) public pure returns (address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1096,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function loadUint8(bytes sig, uint idx) public pure returns (uint8) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1107,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverHash(bytes32 hash, bytes sig, uint idx) public pure returns (address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1144,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigMemory(bytes sig) private pure returns (address[], address[], uint8[], uint[], uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1144,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigMemory(bytes sig) private pure returns (address[], address[], uint8[], uint[], uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1144,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigMemory(bytes sig) private pure returns (address[], address[], uint8[], uint[], uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1144,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigMemory(bytes sig) private pure returns (address[], address[], uint8[], uint[], uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1144,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigMemory(bytes sig) private pure returns (address[], address[], uint8[], uint[], uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1159,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigParts(bytes sig, address last_address) private pure returns (address[], address[], uint8[], uint[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1159,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigParts(bytes sig, address last_address) private pure returns (address[], address[], uint8[], uint[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1159,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigParts(bytes sig, address last_address) private pure returns (address[], address[], uint8[], uint[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1159,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigParts(bytes sig, address last_address) private pure returns (address[], address[], uint8[], uint[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1159,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSigParts(bytes sig, address last_address) private pure returns (address[], address[], uint8[], uint[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1226,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSig(bytes sig, address old_key, address last_address) public pure returns (address[], address[], uint8[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1226,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSig(bytes sig, address old_key, address last_address) public pure returns (address[], address[], uint8[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1226,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSig(bytes sig, address old_key, address last_address) public pure returns (address[], address[], uint8[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1226,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSig(bytes sig, address old_key, address last_address) public pure returns (address[], address[], uint8[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1281,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addNameInternal(string _name, address _sender) private {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1295,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addName(string _name, address _sender) onlyOwner public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1299,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addNameByUser(string _name) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1303,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addNameSigned(string _name, bytes external_sig) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1303,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addNameSigned(string _name, bytes external_sig) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1311,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setNoteInternal(bytes note, address me) private {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1316,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setNoteByUser(bytes note) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1321,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addPlasma2EthereumInternal(bytes sig, address eth_address) private {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1331,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addPlasma2EthereumByUser(bytes sig) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1335,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setPlasma2EthereumAndNoteSigned(bytes sig, bytes note, bytes external_sig) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1335,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setPlasma2EthereumAndNoteSigned(bytes sig, bytes note, bytes external_sig) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1335,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setPlasma2EthereumAndNoteSigned(bytes sig, bytes note, bytes external_sig) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1344,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getName2Owner(string _name) public view returns (address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1347,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getOwner2Name(address _sender) public view returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 796,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1000,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1028,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1058,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1089,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1099,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1115,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1122,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1129,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 642,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress filler;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 709,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tTwoKeyEconomy economy;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 710,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress electorateAdmins;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 711,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tTwoKeyUpgradableExchange exchange;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 713,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tbool wasReplaced;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 836,
          "vulnerability_to_line": null,
          "vulnerability_code": "    TwoKeyAdmin twoKeyAdmin;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 841,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes32 => bool) canEmit;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 844,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes32 => CampaignType) codeToType;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 848,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => bool) authorizedSubadmins;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1274,
          "vulnerability_to_line": null,
          "vulnerability_code": "  TwoKeyEventSource eventSource;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 1096,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function loadUint8(bytes sig, uint idx) public pure returns (uint8) {\n",
          "message": null
        },
        {
          "name": "Transaction-Ordering Dependence (TOD)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "    c = _a + _b;\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 162,
          "vulnerability_to_line": null,
          "vulnerability_code": "  string public name;\n",
          "message": null
        },
        {
          "name": "Transaction-Ordering Dependence (TOD)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "    c = _a + _b;\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 327,
          "vulnerability_to_line": null,
          "vulnerability_code": "  string public name = 'TwoKeyEconomy';\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 926,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addCampaignType(bytes _contractCode, CampaignType _campaignType) public onlyAdmin {\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 1316,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setNoteByUser(bytes note) public {\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 1262,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping(address => string) public owner2name;\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 996,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params0(address c, bytes _method) public view returns (uint answer) {\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 1024,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params1(address c, bytes _method, uint _val) public view returns (uint answer) {\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 1054,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function params2(address c, bytes _method, uint _val1, uint _val2) public view returns (uint answer) {\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 1226,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverSig(bytes sig, address old_key, address last_address) public pure returns (address[], address[], uint8[]) {\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 1006,
          "vulnerability_to_line": null,
          "vulnerability_code": "            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 1036,
          "vulnerability_to_line": null,
          "vulnerability_code": "            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 1067,
          "vulnerability_to_line": null,
          "vulnerability_code": "            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Unchecked return value from external call. (SWC 104)",
          "vulnerability_from_line": 1067,
          "vulnerability_to_line": null,
          "vulnerability_code": "            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n",
          "message": "The return value of a message call is not checked.\nExternal calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.\nClassification: SWC-104"
        },
        {
          "name": "Jump to an arbitrary instruction (SWC 127)",
          "vulnerability_from_line": 1107,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverHash(bytes32 hash, bytes sig, uint idx) public pure returns (address) {\n",
          "message": "The caller can redirect execution to arbitrary bytecode locations.\nIt is possible to redirect the control flow to arbitrary locations in the code. This may allow an attacker to bypass security controls or manipulate the business logic of the smart contract. Avoid using low-level-operations and assembly to prevent this issue.\nClassification: SWC-127"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 1185,
          "vulnerability_to_line": null,
          "vulnerability_code": "        while (idx + 65 <= sig.length) {\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [
        "DOCKER_TIMEOUT",
        "exception (AttributeError: 'long' object has no attribute 'data')"
      ],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1112,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require (sig.length >= 65+idx, 'bad signature length');\n",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 1147,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint n_influencers = (sig.length-21) / (65+msg_len);\n",
          "message": null
        },
        {
          "name": "Concurrency bug",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "Concurrency bug",
          "vulnerability_from_line": 736,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tnewAdminContract.transfer(address(this).balance);\n",
          "message": null
        },
        {
          "name": "Concurrency bug",
          "vulnerability_from_line": 759,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t\tnewAdmin.transfer(msg.value);\n",
          "message": null
        }
      ]
    }
  }
}