{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 326,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract TwoKeyEconomy is StandardToken, Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 279,
          "vulnerability_to_line": null,
          "vulnerability_code": "    owner = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 280,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor() Ownable() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 333,
          "vulnerability_to_line": null,
          "vulnerability_code": "    totalSupply_ = 1000000000000000000000000000;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 334,
          "vulnerability_to_line": null,
          "vulnerability_code": "    balances[msg.sender] = totalSupply_;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 335,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_49"
      ],
      "vulnerability_findings": [
        {
          "name": "shadowing-state",
          "vulnerability_from_line": 327,
          "vulnerability_to_line": null,
          "vulnerability_code": "  string public name = 'TwoKeyEconomy';\n",
          "message": "TwoKeyEconomy.name (TwoKeyEconomy.sol#327) shadows:\n\t- StandardToken.name (TwoKeyEconomy.sol#95)\n"
        },
        {
          "name": "shadowing-state",
          "vulnerability_from_line": 328,
          "vulnerability_to_line": null,
          "vulnerability_code": "  string public symbol = '2Key';\n",
          "message": "TwoKeyEconomy.symbol (TwoKeyEconomy.sol#328) shadows:\n\t- StandardToken.symbol (TwoKeyEconomy.sol#96)\n"
        },
        {
          "name": "shadowing-state",
          "vulnerability_from_line": 329,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint8 public decimals = 18;\n",
          "message": "TwoKeyEconomy.decimals (TwoKeyEconomy.sol#329) shadows:\n\t- StandardToken.decimals (TwoKeyEconomy.sol#97)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint8 public decimals;\n",
          "message": "StandardToken.decimals should be constant (TwoKeyEconomy.sol#97)\nStandardToken.name should be constant (TwoKeyEconomy.sol#95)\nStandardToken.symbol should be constant (TwoKeyEconomy.sol#96)\nTwoKeyEconomy.decimals should be constant (TwoKeyEconomy.sol#329)\nTwoKeyEconomy.name should be constant (TwoKeyEconomy.sol#327)\nTwoKeyEconomy.symbol should be constant (TwoKeyEconomy.sol#328)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
          "message": "ERC20Basic.totalSupply (TwoKeyEconomy.sol#67) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": 213,
          "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return totalSupply_;\n",
          "message": "StandardToken.totalSupply (TwoKeyEconomy.sol#211-213) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 235,
          "vulnerability_to_line": 237,
          "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256) {\n\n    return balances[_owner];\n",
          "message": "StandardToken.balanceOf (TwoKeyEconomy.sol#235-237) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address _who) public view returns (uint256);\n",
          "message": "ERC20Basic.balanceOf (TwoKeyEconomy.sol#68) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool);\n",
          "message": "ERC20Basic.transfer (TwoKeyEconomy.sol#69) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": 228,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n\n    require(_value <= balances[msg.sender]);\n\n    require(_to != address(0));\n\n\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    emit Transfer(msg.sender, _to, _value);\n\n    return true;\n",
          "message": "StandardToken.transfer (TwoKeyEconomy.sol#220-228) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": 158,
          "vulnerability_code": "  function allowance(\n\n    address _owner,\n\n    address _spender\n\n   )\n\n    public\n\n    view\n\n    returns (uint256)\n\n  {\n\n    return allowed[_owner][_spender];\n",
          "message": "StandardToken.allowance (TwoKeyEconomy.sol#149-158) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address _ocwner, address _spender) public view returns (uint256);\n",
          "message": "ERC20Basic.allowance (TwoKeyEconomy.sol#70) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 137,
          "vulnerability_to_line": 141,
          "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n\n    allowed[msg.sender][_spender] = _value;\n\n    emit Approval(msg.sender, _spender, _value);\n\n    return true;\n",
          "message": "StandardToken.approve (TwoKeyEconomy.sol#137-141) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address spender, uint tokens) public returns (bool success);\n",
          "message": "ERC20Basic.approve (TwoKeyEconomy.sol#71) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 337,
          "vulnerability_to_line": 354,
          "vulnerability_code": "  function transferFrom(\n\n    address _from,\n\n    address _to,\n\n    uint256 _value\n\n  )\n\n  public\n\n  returns (bool)\n\n  {\n\n    require(_value <= balances[_from]);\n\n//    require(_value <= allowed[_from][msg.sender]);\n\n    require(_to != address(0));\n\n\n\n    balances[_from] = balances[_from].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n//    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n    emit Transfer(_from, _to, _value);\n\n    return true;\n",
          "message": "TwoKeyEconomy.transferFrom (TwoKeyEconomy.sol#337-354) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n",
          "message": "ERC20Basic.transferFrom (TwoKeyEconomy.sol#72) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 109,
          "vulnerability_to_line": 126,
          "vulnerability_code": "  function transferFrom(\n\n    address _from,\n\n    address _to,\n\n    uint256 _value\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    require(_value <= balances[_from]);\n\n    require(_value <= allowed[_from][msg.sender]);\n\n    require(_to != address(0));\n\n\n\n    balances[_from] = balances[_from].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n    emit Transfer(_from, _to, _value);\n\n    return true;\n",
          "message": "StandardToken.transferFrom (TwoKeyEconomy.sol#109-126) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 169,
          "vulnerability_to_line": 180,
          "vulnerability_code": "  function increaseApproval(\n\n    address _spender,\n\n    uint256 _addedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    allowed[msg.sender][_spender] = (\n\n      allowed[msg.sender][_spender].add(_addedValue));\n\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
          "message": "StandardToken.increaseApproval (TwoKeyEconomy.sol#169-180) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 191,
          "vulnerability_to_line": 206,
          "vulnerability_code": "  function decreaseApproval(\n\n    address _spender,\n\n    uint256 _subtractedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    uint256 oldValue = allowed[msg.sender][_spender];\n\n    if (_subtractedValue >= oldValue) {\n\n      allowed[msg.sender][_spender] = 0;\n\n    } else {\n\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\n    }\n\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
          "message": "StandardToken.decreaseApproval (TwoKeyEconomy.sol#191-206) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 296,
          "vulnerability_to_line": 299,
          "vulnerability_code": "  function renounceOwnership() public onlyOwner {\n\n    emit OwnershipRenounced(owner);\n\n    owner = address(0);\n",
          "message": "Ownable.renounceOwnership (TwoKeyEconomy.sol#296-299) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 305,
          "vulnerability_to_line": 307,
          "vulnerability_code": "  function transferOwnership(address _newOwner) public onlyOwner {\n\n    _transferOwnership(_newOwner);\n",
          "message": "Ownable.transferOwnership (TwoKeyEconomy.sol#305-307) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_a' of SafeMath.mul (TwoKeyEconomy.sol#15) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_b' of SafeMath.mul (TwoKeyEconomy.sol#15) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_a' of SafeMath.div (TwoKeyEconomy.sol#31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_b' of SafeMath.div (TwoKeyEconomy.sol#31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_a' of SafeMath.sub (TwoKeyEconomy.sol#41) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_b' of SafeMath.sub (TwoKeyEconomy.sol#41) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_a' of SafeMath.add (TwoKeyEconomy.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_b' of SafeMath.add (TwoKeyEconomy.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 235,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256) {\n",
          "message": "Parameter '_owner' of StandardToken.balanceOf (TwoKeyEconomy.sol#235) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_to' of StandardToken.transfer (TwoKeyEconomy.sol#220) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of StandardToken.transfer (TwoKeyEconomy.sol#220) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _owner,\n",
          "message": "Parameter '_owner' of StandardToken.allowance (TwoKeyEconomy.sol#150) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _spender\n",
          "message": "Parameter '_spender' of StandardToken.allowance (TwoKeyEconomy.sol#151) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 137,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_spender' of StandardToken.approve (TwoKeyEconomy.sol#137) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 137,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of StandardToken.approve (TwoKeyEconomy.sol#137) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _from,\n",
          "message": "Parameter '_from' of StandardToken.transferFrom (TwoKeyEconomy.sol#110) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _to,\n",
          "message": "Parameter '_to' of StandardToken.transferFrom (TwoKeyEconomy.sol#111) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of StandardToken.transferFrom (TwoKeyEconomy.sol#112) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 170,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _spender,\n",
          "message": "Parameter '_spender' of StandardToken.increaseApproval (TwoKeyEconomy.sol#170) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 171,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _addedValue\n",
          "message": "Parameter '_addedValue' of StandardToken.increaseApproval (TwoKeyEconomy.sol#171) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 192,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _spender,\n",
          "message": "Parameter '_spender' of StandardToken.decreaseApproval (TwoKeyEconomy.sol#192) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 193,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _subtractedValue\n",
          "message": "Parameter '_subtractedValue' of StandardToken.decreaseApproval (TwoKeyEconomy.sol#193) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 305,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferOwnership(address _newOwner) public onlyOwner {\n",
          "message": "Parameter '_newOwner' of Ownable.transferOwnership (TwoKeyEconomy.sol#305) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 313,
          "vulnerability_to_line": 317,
          "vulnerability_code": "  function _transferOwnership(address _newOwner) internal {\n\n    require(_newOwner != address(0));\n\n    emit OwnershipTransferred(owner, _newOwner);\n\n    owner = _newOwner;\n",
          "message": "Function 'Ownable._transferOwnership' (TwoKeyEconomy.sol#313-317) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 313,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function _transferOwnership(address _newOwner) internal {\n",
          "message": "Parameter '_newOwner' of Ownable._transferOwnership (TwoKeyEconomy.sol#313) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 338,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _from,\n",
          "message": "Parameter '_from' of TwoKeyEconomy.transferFrom (TwoKeyEconomy.sol#338) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 339,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _to,\n",
          "message": "Parameter '_to' of TwoKeyEconomy.transferFrom (TwoKeyEconomy.sol#339) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 340,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of TwoKeyEconomy.transferFrom (TwoKeyEconomy.sol#340) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 298,
          "vulnerability_to_line": null,
          "vulnerability_code": "    owner = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 137,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 243,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 255,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 322,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 92,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "    c = _a + _b;\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "  string public name;\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "    c = _a + _b;\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 327,
          "vulnerability_to_line": null,
          "vulnerability_code": "  string public name = 'TwoKeyEconomy';\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 177,
          "vulnerability_to_line": null,
          "vulnerability_code": "      allowed[msg.sender][_spender].add(_addedValue));\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}