{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1218,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1231,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1242,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1561,
          "vulnerability_to_line": null,
          "vulnerability_code": "      (bool success, ) = config.getFairLaunchAddr().call(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1562,
          "vulnerability_to_line": null,
          "vulnerability_code": "        abi.encodeWithSelector(0xb5c5f672, positions[id].owner, fairLaunchPoolId, positions[id].debtShare)\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1563,
          "vulnerability_to_line": null,
          "vulnerability_code": "      );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 179,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 346,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 471,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 475,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 697,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(sender != address(0), \"ERC20: transfer from the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 698,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 717,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(0), \"ERC20: mint to the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 738,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(0), \"ERC20: burn from the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 761,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(owner != address(0), \"ERC20: approve from the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 762,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(spender != address(0), \"ERC20: approve to the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 881,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_notEntered, \"ReentrancyGuard: reentrant call\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1217,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(isContract(token), \"!contract\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1219,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(success && (data.length == 0 || abi.decode(data, (bool))), \"!safeTransfer\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1230,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(isContract(token), \"!not contract\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1232,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(success && (data.length == 0 || abi.decode(data, (bool))), \"!safeTransferFrom\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1241,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(isContract(token), \"!not contract\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1243,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(success && (data.length == 0 || abi.decode(data, (bool))), \"!safeApprove\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1249,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(success, \"!safeTransferETH\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1399,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(msg.sender == tx.origin, \"not eoa\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1406,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(config.whitelistedLiquidators(msg.sender), \"!whitelisted liquidator\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1413,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(token == config.getWrappedNativeAddr(), \"baseToken is not wNative\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1414,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(value == msg.value, \"value != msg.value\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1424,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(POSITION_ID != _NO_ID, \"not within execution scope\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1425,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(STRATEGY == msg.sender, \"not from the strategy\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1426,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_IN_EXEC_LOCK == _NOT_ENTERED, \"in exec lock\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1529,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(totalSupply() > 1e17, \"no tiny shares\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1537,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(totalSupply() > 1e17, \"no tiny shares\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1592,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(fairLaunchPoolId != uint256(-1), \"poolId not set\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1593,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(id != 0, \"no id 0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1599,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(id < nextPositionID, \"bad position id\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1600,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(pos.owner == msg.sender, \"!position owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1601,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(healthBefore != 0, \"!active position\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1605,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(config.approvedAddStrategies(STRATEGY), \"!approved strat\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1607,
          "vulnerability_to_line": null,
          "vulnerability_code": "    if (!goRogue) require(config.isWorkerStable(worker), \"worker !stable\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1608,
          "vulnerability_to_line": null,
          "vulnerability_code": "    else require(config.isWorkerReserveConsistent(worker), \"reserve !consistent\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1622,
          "vulnerability_to_line": null,
          "vulnerability_code": "    if (!goRogue) require(config.isWorkerStable(worker), \"worker !stable\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1623,
          "vulnerability_to_line": null,
          "vulnerability_code": "    else require(config.isWorkerReserveConsistent(worker), \"reserve !consistent\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1624,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(back == 0, \"back !0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1625,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(healthAfter > healthBefore, \"health !increase\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1627,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(debt.mul(10000) <= healthAfter.mul(killFactor.sub(100)), \"debtRatio > killFactor margin\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1650,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(fairLaunchPoolId != uint256(-1), \"poolId not set\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1660,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(id < nextPositionID, \"bad position id\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1661,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(pos.worker == worker, \"bad position worker\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1662,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(pos.owner == msg.sender, \"not position owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1670,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(config.isWorker(worker), \"not a worker\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1671,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(borrowAmount == 0 || config.acceptDebt(worker), \"worker not accept more debt\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1677,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(sendBEP20 <= SafeToken.myBalance(token), \"insufficient funds in the vault\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1687,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(debt >= config.minDebtSize(), \"too small debt size\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1690,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(health.mul(workFactor) >= debt.mul(10000), \"bad work factor\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1706,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(fairLaunchPoolId != uint256(-1), \"poolId not set\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1709,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(pos.debtShare > 0, \"no debt\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1715,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(health.mul(killFactor) < debt.mul(10000), \"can't liquidate\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 1219,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(success && (data.length == 0 || abi.decode(data, (bool))), \"!safeTransfer\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 1232,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(success && (data.length == 0 || abi.decode(data, (bool))), \"!safeTransferFrom\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 1243,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(success && (data.length == 0 || abi.decode(data, (bool))), \"!safeApprove\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 179,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 346,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 475,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 697,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(sender != address(0), \"ERC20: transfer from the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 698,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 738,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(0), \"ERC20: burn from the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 761,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(owner != address(0), \"ERC20: approve from the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 762,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(spender != address(0), \"ERC20: approve to the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 1218,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 1231,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 1242,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 1364,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address private constant _NO_ADDRESS = address(1);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 171,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _owner = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 719,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _beforeTokenTransfer(address(0), account, amount);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 740,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _beforeTokenTransfer(account, address(0), amount);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 623,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.4.24 <0.7.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.4.24 <0.7.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 189,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 267,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 420,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 481,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 800,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 832,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 997,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1281,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bool private initialized;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bool private initializing;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256[50] private ______gap;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256[50] private __gap;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 124,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address private _owner;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 184,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256[49] private __gap;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 515,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => uint256) private _balances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 517,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => mapping (address => uint256)) private _allowances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 519,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _totalSupply;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 521,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private _name;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 522,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private _symbol;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 523,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 private _decimals;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 795,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256[44] private __gap;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 851,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool private _notEntered;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 893,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256[49] private __gap;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 1361,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 private constant _NOT_ENTERED = 1;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 1362,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 private constant _ENTERED = 2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 1363,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 private constant _NO_ID = uint256(-1);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 1364,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address private constant _NO_ADDRESS = address(1);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 512,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 1343,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isConstructor() private view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 443,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 1252,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1036,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1042,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function burn(address to) external returns (uint amount0, uint amount1);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 1218,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 1231,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 1242,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 450,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly { codehash := extcodehash(account) }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 470,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1444,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function initialize(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 470,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 470,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 471,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 471,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 471,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 471,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 474,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = recipient.call{ value: amount }(\"\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 474,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = recipient.call{ value: amount }(\"\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 474,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = recipient.call{ value: amount }(\"\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1447,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string calldata _name,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1448,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string calldata _symbol,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1448,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string calldata _symbol,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1449,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 _decimals,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1450,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _debtToken\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1451,
          "vulnerability_to_line": null,
          "vulnerability_code": "  ) external initializer {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1452,
          "vulnerability_to_line": null,
          "vulnerability_code": "    OwnableUpgradeSafe.__Ownable_init();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1452,
          "vulnerability_to_line": null,
          "vulnerability_code": "    OwnableUpgradeSafe.__Ownable_init();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1453,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ReentrancyGuardUpgradeSafe.__ReentrancyGuard_init();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1453,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ReentrancyGuardUpgradeSafe.__ReentrancyGuard_init();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1454,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ERC20UpgradeSafe.__ERC20_init(_name, _symbol);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1454,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ERC20UpgradeSafe.__ERC20_init(_name, _symbol);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1455,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _setupDecimals(_decimals);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1457,
          "vulnerability_to_line": null,
          "vulnerability_code": "    nextPositionID = 1;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1458,
          "vulnerability_to_line": null,
          "vulnerability_code": "    config = _config;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1459,
          "vulnerability_to_line": null,
          "vulnerability_code": "    lastAccrueTime = now;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1460,
          "vulnerability_to_line": null,
          "vulnerability_code": "    token = _token;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1462,
          "vulnerability_to_line": null,
          "vulnerability_code": "    fairLaunchPoolId = uint256(-1);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1462,
          "vulnerability_to_line": null,
          "vulnerability_code": "    fairLaunchPoolId = uint256(-1);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1462,
          "vulnerability_to_line": null,
          "vulnerability_code": "    fairLaunchPoolId = uint256(-1);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1466,
          "vulnerability_to_line": null,
          "vulnerability_code": "    SafeToken.safeApprove(debtToken, config.getFairLaunchAddr(), uint256(-1));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1466,
          "vulnerability_to_line": null,
          "vulnerability_code": "    SafeToken.safeApprove(debtToken, config.getFairLaunchAddr(), uint256(-1));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1466,
          "vulnerability_to_line": null,
          "vulnerability_code": "    SafeToken.safeApprove(debtToken, config.getFairLaunchAddr(), uint256(-1));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1466,
          "vulnerability_to_line": null,
          "vulnerability_code": "    SafeToken.safeApprove(debtToken, config.getFairLaunchAddr(), uint256(-1));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1466,
          "vulnerability_to_line": null,
          "vulnerability_code": "    SafeToken.safeApprove(debtToken, config.getFairLaunchAddr(), uint256(-1));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1469,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _IN_EXEC_LOCK = _NOT_ENTERED;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1470,
          "vulnerability_to_line": null,
          "vulnerability_code": "    POSITION_ID = _NO_ID;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1471,
          "vulnerability_to_line": null,
          "vulnerability_code": "    STRATEGY = _NO_ADDRESS;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "Solc experienced a fatal error"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}