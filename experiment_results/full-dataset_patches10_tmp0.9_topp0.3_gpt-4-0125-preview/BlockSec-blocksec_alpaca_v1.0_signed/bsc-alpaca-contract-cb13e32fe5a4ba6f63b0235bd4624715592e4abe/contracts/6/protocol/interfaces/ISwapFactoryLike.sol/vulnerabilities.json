{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_12"
      ],
      "vulnerability_findings": [
        {
          "name": "solc-version",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function feeTo() external view returns (address);\n",
          "message": "Detected issues with version pragma in ISwapFactoryLike.sol:\n\t- pragma solidity0.6.6 (ISwapFactoryLike.sol#19): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function pairFees(address) external view returns (uint256);\n",
          "message": "Parameter '' of ISwapFactoryLike.pairFeeToRate (ISwapFactoryLike.sol#29) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getPair(address tokenA, address tokenB) external view returns (address pair);\n",
          "message": "Parameter '' of ISwapFactoryLike.pairFees (ISwapFactoryLike.sol#31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allPairsLength() external view returns (uint256);\n",
          "message": "Parameter '' of ISwapFactoryLike.allPairs (ISwapFactoryLike.sol#35) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addPair(address) external returns (bool);\n",
          "message": "Parameter '' of ISwapFactoryLike.setFeeTo (ISwapFactoryLike.sol#43) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": 45,
          "vulnerability_code": "  function addPair(address) external returns (bool);\n\n\n",
          "message": "Parameter '' of ISwapFactoryLike.setFeeToSetter (ISwapFactoryLike.sol#43-45) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function delPair(address) external returns (bool);\n",
          "message": "Parameter '' of ISwapFactoryLike.addPair (ISwapFactoryLike.sol#45) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getSupportListLength() external view returns (uint256);\n",
          "message": "Parameter '' of ISwapFactoryLike.delPair (ISwapFactoryLike.sol#47) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setPairFees(address pair, uint256 fee) external;\n",
          "message": "Parameter '' of ISwapFactoryLike.setFeeRateNumerator (ISwapFactoryLike.sol#55) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setPairFeeToRate(address pair, uint256 rate) external;\n",
          "message": "Parameter '' of ISwapFactoryLike.setDefaultFeeToRate (ISwapFactoryLike.sol#59) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getPairRate(address) external view returns (uint256);\n",
          "message": "Parameter '' of ISwapFactoryLike.getPairFees (ISwapFactoryLike.sol#63) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\n",
          "message": "Parameter '' of ISwapFactoryLike.getPairRate (ISwapFactoryLike.sol#65) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getReserves(address tokenA, address tokenB) external view returns (uint256 reserveA, uint256 reserveB);\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "execution failed"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "input files do not contain any valid contracts"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}