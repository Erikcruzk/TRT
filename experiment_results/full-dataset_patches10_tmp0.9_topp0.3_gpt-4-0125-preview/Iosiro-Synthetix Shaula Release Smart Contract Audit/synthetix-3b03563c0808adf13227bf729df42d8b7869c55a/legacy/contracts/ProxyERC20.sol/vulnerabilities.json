{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _owner) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_owner != address(0), \"Owner address cannot be 0\");\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "        owner = _owner;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit OwnerChanged(address(0), _owner);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _proxy, address _owner) public Owned(_owner) {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "        proxy = Proxy(_proxy);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit ProxyUpdated(_proxy);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 89,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 132,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _owner) public Owned(_owner) {}\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 231,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _owner) public Proxy(_owner) {}\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_owner != address(0), \"Owner address cannot be 0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == nominatedOwner, \"You must be nominated before you can accept ownership\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == owner, \"Only the contract owner may perform this action\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(Proxy(msg.sender) == proxy || Proxy(msg.sender) == integrationProxy, \"Only the proxy can call\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 120,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(messageSender == owner, \"Owner only function\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(Proxyable(msg.sender) == target, \"Must be proxy target\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (Proxy(msg.sender) != proxy && Proxy(msg.sender) != integrationProxy) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "            messageSender = msg.sender;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (Proxy(msg.sender) != proxy && Proxy(msg.sender) != integrationProxy) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": null,
          "vulnerability_code": "            messageSender = msg.sender;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 119,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == nominatedOwner, \"You must be nominated before you can accept ownership\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == owner, \"Only the contract owner may perform this action\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_34"
      ],
      "vulnerability_findings": [
        {
          "name": "locked-ether",
          "vulnerability_from_line": 179,
          "vulnerability_to_line": 214,
          "vulnerability_code": "    function() external payable {\n\n        if (useDELEGATECALL) {\n\n            assembly {\n\n                /* Copy call data into free memory region. */\n\n                let free_ptr := mload(0x40)\n\n                calldatacopy(free_ptr, 0, calldatasize)\n\n\n\n                /* Forward all gas and call data to the target contract. */\n\n                let result := delegatecall(gas, sload(target_slot), free_ptr, calldatasize, 0, 0)\n\n                returndatacopy(free_ptr, 0, returndatasize)\n\n\n\n                /* Revert if the call failed, otherwise return the result. */\n\n                if iszero(result) {\n\n                    revert(free_ptr, returndatasize)\n\n                }\n\n                return(free_ptr, returndatasize)\n\n            }\n\n        } else {\n\n            /* Here we are as above, but must send the messageSender explicitly\n\n             * since we are using CALL rather than DELEGATECALL. */\n\n            target.setMessageSender(msg.sender);\n\n            assembly {\n\n                let free_ptr := mload(0x40)\n\n                calldatacopy(free_ptr, 0, calldatasize)\n\n\n\n                /* We must explicitly forward ether to the underlying contract as well. */\n\n                let result := call(gas, sload(target_slot), callvalue, free_ptr, calldatasize, 0, 0)\n\n                returndatacopy(free_ptr, 0, returndatasize)\n\n\n\n                if iszero(result) {\n\n                    revert(free_ptr, returndatasize)\n\n                }\n\n                return(free_ptr, returndatasize)\n\n            }\n\n        }\n",
          "message": "Contract locking ether found in ProxyERC20.sol:\n\tContract ProxyERC20 has payable functions:\n\t - fallback (ProxyERC20.sol#179-214)\n\tBut does not have a function to withdraw the ether\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 286,
          "vulnerability_to_line": 295,
          "vulnerability_code": "    function transfer(address to, uint256 value) public returns (bool) {\n\n        // Mutable state call requires the proxy to tell the target who the msg.sender is.\n\n        target.setMessageSender(msg.sender);\n\n\n\n        // Forward the ERC20 call to the target contract\n\n        IERC20(target).transfer(to, value);\n\n\n\n        // Event emitting will occur via Synthetix.Proxy._emit()\n\n        return true;\n",
          "message": "ProxyERC20.transfer (ProxyERC20.sol#286-295) does not use the value returned by external calls:\n\t-IERC20(target).transfer(to,value) (ProxyERC20.sol#291)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 306,
          "vulnerability_to_line": 315,
          "vulnerability_code": "    function approve(address spender, uint256 value) public returns (bool) {\n\n        // Mutable state call requires the proxy to tell the target who the msg.sender is.\n\n        target.setMessageSender(msg.sender);\n\n\n\n        // Forward the ERC20 call to the target contract\n\n        IERC20(target).approve(spender, value);\n\n\n\n        // Event emitting will occur via Synthetix.Proxy._emit()\n\n        return true;\n",
          "message": "ProxyERC20.approve (ProxyERC20.sol#306-315) does not use the value returned by external calls:\n\t-IERC20(target).approve(spender,value) (ProxyERC20.sol#311)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 323,
          "vulnerability_to_line": 336,
          "vulnerability_code": "    function transferFrom(\n\n        address from,\n\n        address to,\n\n        uint256 value\n\n    ) public returns (bool) {\n\n        // Mutable state call requires the proxy to tell the target who the msg.sender is.\n\n        target.setMessageSender(msg.sender);\n\n\n\n        // Forward the ERC20 call to the target contract\n\n        IERC20(target).transferFrom(from, to, value);\n\n\n\n        // Event emitting will occur via Synthetix.Proxy._emit()\n\n        return true;\n",
          "message": "ProxyERC20.transferFrom (ProxyERC20.sol#323-336) does not use the value returned by external calls:\n\t-IERC20(target).transferFrom(from,to,value) (ProxyERC20.sol#332)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 265,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address owner) public view returns (uint256) {\n",
          "message": "ProxyERC20.balanceOf.owner (local variable @ ProxyERC20.sol#265) shadows:\n\t- Owned.owner (state variable @ ProxyERC20.sol#7)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 276,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address owner, address spender) public view returns (uint256) {\n",
          "message": "ProxyERC20.allowance.owner (local variable @ ProxyERC20.sol#276) shadows:\n\t- Owned.owner (state variable @ ProxyERC20.sol#7)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": 177,
          "vulnerability_code": "    function _emit(\n\n        bytes callData,\n\n        uint numTopics,\n\n        bytes32 topic1,\n\n        bytes32 topic2,\n\n        bytes32 topic3,\n\n        bytes32 topic4\n\n    ) external onlyTarget {\n\n        uint size = callData.length;\n\n        bytes memory _callData = callData;\n\n\n\n        assembly {\n\n            /* The first 32 bytes of callData contain its length (as specified by the abi).\n\n             * Length is assumed to be a uint256 and therefore maximum of 32 bytes\n\n             * in length. It is also leftpadded to be a multiple of 32 bytes.\n\n             * This means moving call_data across 32 bytes guarantees we correctly access\n\n             * the data itself. */\n\n            switch numTopics\n\n                case 0 {\n\n                    log0(add(_callData, 32), size)\n\n                }\n\n                case 1 {\n\n                    log1(add(_callData, 32), size, topic1)\n\n                }\n\n                case 2 {\n\n                    log2(add(_callData, 32), size, topic1, topic2)\n\n                }\n\n                case 3 {\n\n                    log3(add(_callData, 32), size, topic1, topic2, topic3)\n\n                }\n\n                case 4 {\n\n                    log4(add(_callData, 32), size, topic1, topic2, topic3, topic4)\n\n                }\n\n        }\n",
          "message": "Proxy._emit uses assembly (ProxyERC20.sol#143-177)\n\t- ProxyERC20.sol#154-177\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 179,
          "vulnerability_to_line": 214,
          "vulnerability_code": "    function() external payable {\n\n        if (useDELEGATECALL) {\n\n            assembly {\n\n                /* Copy call data into free memory region. */\n\n                let free_ptr := mload(0x40)\n\n                calldatacopy(free_ptr, 0, calldatasize)\n\n\n\n                /* Forward all gas and call data to the target contract. */\n\n                let result := delegatecall(gas, sload(target_slot), free_ptr, calldatasize, 0, 0)\n\n                returndatacopy(free_ptr, 0, returndatasize)\n\n\n\n                /* Revert if the call failed, otherwise return the result. */\n\n                if iszero(result) {\n\n                    revert(free_ptr, returndatasize)\n\n                }\n\n                return(free_ptr, returndatasize)\n\n            }\n\n        } else {\n\n            /* Here we are as above, but must send the messageSender explicitly\n\n             * since we are using CALL rather than DELEGATECALL. */\n\n            target.setMessageSender(msg.sender);\n\n            assembly {\n\n                let free_ptr := mload(0x40)\n\n                calldatacopy(free_ptr, 0, calldatasize)\n\n\n\n                /* We must explicitly forward ether to the underlying contract as well. */\n\n                let result := call(gas, sload(target_slot), callvalue, free_ptr, calldatasize, 0, 0)\n\n                returndatacopy(free_ptr, 0, returndatasize)\n\n\n\n                if iszero(result) {\n\n                    revert(free_ptr, returndatasize)\n\n                }\n\n                return(free_ptr, returndatasize)\n\n            }\n\n        }\n",
          "message": "Proxy.fallback uses assembly (ProxyERC20.sol#179-214)\n\t- ProxyERC20.sol#181-196\n\t- ProxyERC20.sol#200-213\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function totalSupply() public view returns (uint);\n",
          "message": "IERC20.totalSupply (ProxyERC20.sol#43) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 255,
          "vulnerability_to_line": 258,
          "vulnerability_code": "    function totalSupply() public view returns (uint256) {\n\n        // Immutable static call from target contract\n\n        return IERC20(target).totalSupply();\n",
          "message": "ProxyERC20.totalSupply (ProxyERC20.sol#255-258) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 265,
          "vulnerability_to_line": 268,
          "vulnerability_code": "    function balanceOf(address owner) public view returns (uint256) {\n\n        // Immutable static call from target contract\n\n        return IERC20(target).balanceOf(owner);\n",
          "message": "ProxyERC20.balanceOf (ProxyERC20.sol#265-268) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address owner) public view returns (uint);\n",
          "message": "IERC20.balanceOf (ProxyERC20.sol#45) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address owner, address spender) public view returns (uint);\n",
          "message": "IERC20.allowance (ProxyERC20.sol#47) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 276,
          "vulnerability_to_line": 279,
          "vulnerability_code": "    function allowance(address owner, address spender) public view returns (uint256) {\n\n        // Immutable static call from target contract\n\n        return IERC20(target).allowance(owner, spender);\n",
          "message": "ProxyERC20.allowance (ProxyERC20.sol#276-279) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 286,
          "vulnerability_to_line": 295,
          "vulnerability_code": "    function transfer(address to, uint256 value) public returns (bool) {\n\n        // Mutable state call requires the proxy to tell the target who the msg.sender is.\n\n        target.setMessageSender(msg.sender);\n\n\n\n        // Forward the ERC20 call to the target contract\n\n        IERC20(target).transfer(to, value);\n\n\n\n        // Event emitting will occur via Synthetix.Proxy._emit()\n\n        return true;\n",
          "message": "ProxyERC20.transfer (ProxyERC20.sol#286-295) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address to, uint value) public returns (bool);\n",
          "message": "IERC20.transfer (ProxyERC20.sol#49) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address spender, uint value) public returns (bool);\n",
          "message": "IERC20.approve (ProxyERC20.sol#51) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 306,
          "vulnerability_to_line": 315,
          "vulnerability_code": "    function approve(address spender, uint256 value) public returns (bool) {\n\n        // Mutable state call requires the proxy to tell the target who the msg.sender is.\n\n        target.setMessageSender(msg.sender);\n\n\n\n        // Forward the ERC20 call to the target contract\n\n        IERC20(target).approve(spender, value);\n\n\n\n        // Event emitting will occur via Synthetix.Proxy._emit()\n\n        return true;\n",
          "message": "ProxyERC20.approve (ProxyERC20.sol#306-315) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 323,
          "vulnerability_to_line": 336,
          "vulnerability_code": "    function transferFrom(\n\n        address from,\n\n        address to,\n\n        uint256 value\n\n    ) public returns (bool) {\n\n        // Mutable state call requires the proxy to tell the target who the msg.sender is.\n\n        target.setMessageSender(msg.sender);\n\n\n\n        // Forward the ERC20 call to the target contract\n\n        IERC20(target).transferFrom(from, to, value);\n\n\n\n        // Event emitting will occur via Synthetix.Proxy._emit()\n\n        return true;\n",
          "message": "ProxyERC20.transferFrom (ProxyERC20.sol#323-336) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": 57,
          "vulnerability_code": "    function transferFrom(\n\n        address from,\n\n        address to,\n\n        uint value\n",
          "message": "IERC20.transferFrom (ProxyERC20.sol#53-57) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 235,
          "vulnerability_to_line": 238,
          "vulnerability_code": "    function name() public view returns (string) {\n\n        // Immutable static call from target contract\n\n        return IERC20(target).name();\n",
          "message": "ProxyERC20.name (ProxyERC20.sol#235-238) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function name() public view returns (string);\n",
          "message": "IERC20.name (ProxyERC20.sol#60) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function symbol() public view returns (string);\n",
          "message": "IERC20.symbol (ProxyERC20.sol#62) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 240,
          "vulnerability_to_line": 243,
          "vulnerability_code": "    function symbol() public view returns (string) {\n\n        // Immutable static call from target contract\n\n        return IERC20(target).symbol();\n",
          "message": "ProxyERC20.symbol (ProxyERC20.sol#240-243) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 245,
          "vulnerability_to_line": 248,
          "vulnerability_code": "    function decimals() public view returns (uint8) {\n\n        // Immutable static call from target contract\n\n        return IERC20(target).decimals();\n",
          "message": "ProxyERC20.decimals (ProxyERC20.sol#245-248) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decimals() public view returns (uint8);\n",
          "message": "IERC20.decimals (ProxyERC20.sol#64) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _owner) public {\n",
          "message": "Parameter '_owner' of Owned. (ProxyERC20.sol#10) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function nominateNewOwner(address _owner) external onlyOwner {\n",
          "message": "Parameter '_owner' of Owned.nominateNewOwner (ProxyERC20.sol#16) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _proxy, address _owner) public Owned(_owner) {\n",
          "message": "Parameter '_proxy' of Proxyable. (ProxyERC20.sol#86) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setProxy(address _proxy) external onlyOwner {\n",
          "message": "Parameter '_proxy' of Proxyable.setProxy (ProxyERC20.sol#91) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setIntegrationProxy(address _integrationProxy) external onlyOwner {\n",
          "message": "Parameter '_integrationProxy' of Proxyable.setIntegrationProxy (ProxyERC20.sol#96) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": 122,
          "vulnerability_code": "    modifier optionalProxy_onlyOwner {\n\n        if (Proxy(msg.sender) != proxy && Proxy(msg.sender) != integrationProxy) {\n\n            messageSender = msg.sender;\n\n        }\n\n        require(messageSender == owner, \"Owner only function\");\n\n        _;\n",
          "message": "Modifier 'Proxyable.optionalProxy_onlyOwner' (ProxyERC20.sol#116-122) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTarget(Proxyable _target) external onlyOwner {\n",
          "message": "Parameter '_target' of Proxy.setTarget (ProxyERC20.sol#134) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": 177,
          "vulnerability_code": "    function _emit(\n\n        bytes callData,\n\n        uint numTopics,\n\n        bytes32 topic1,\n\n        bytes32 topic2,\n\n        bytes32 topic3,\n\n        bytes32 topic4\n\n    ) external onlyTarget {\n\n        uint size = callData.length;\n\n        bytes memory _callData = callData;\n\n\n\n        assembly {\n\n            /* The first 32 bytes of callData contain its length (as specified by the abi).\n\n             * Length is assumed to be a uint256 and therefore maximum of 32 bytes\n\n             * in length. It is also leftpadded to be a multiple of 32 bytes.\n\n             * This means moving call_data across 32 bytes guarantees we correctly access\n\n             * the data itself. */\n\n            switch numTopics\n\n                case 0 {\n\n                    log0(add(_callData, 32), size)\n\n                }\n\n                case 1 {\n\n                    log1(add(_callData, 32), size, topic1)\n\n                }\n\n                case 2 {\n\n                    log2(add(_callData, 32), size, topic1, topic2)\n\n                }\n\n                case 3 {\n\n                    log3(add(_callData, 32), size, topic1, topic2, topic3)\n\n                }\n\n                case 4 {\n\n                    log4(add(_callData, 32), size, topic1, topic2, topic3, topic4)\n\n                }\n\n        }\n",
          "message": "Function 'Proxy._emit' (ProxyERC20.sol#143-177) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "        nominatedOwner = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 306,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address spender, uint256 value) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Proxy is Owned {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setProxy(address _proxy) external onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setIntegrationProxy(address _integrationProxy) external onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTarget(Proxyable _target) external onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 139,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setUseDELEGATECALL(bool value) external onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function name() public view returns (string);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function symbol() public view returns (string);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 235,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function name() public view returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 240,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function symbol() public view returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 154,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 181,
          "vulnerability_to_line": null,
          "vulnerability_code": "            assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "            assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address messageSender;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 152,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _callData = callData;\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 152,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _callData = callData;\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 199,
          "vulnerability_to_line": null,
          "vulnerability_code": "            target.setMessageSender(msg.sender);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "                let result := call(gas, sload(target_slot), callvalue, free_ptr, calldatasize, 0, 0)\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "                let result := call(gas, sload(target_slot), callvalue, free_ptr, calldatasize, 0, 0)\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "                let result := call(gas, sload(target_slot), callvalue, free_ptr, calldatasize, 0, 0)\n",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "                let result := call(gas, sload(target_slot), callvalue, free_ptr, calldatasize, 0, 0)\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 199,
          "vulnerability_to_line": null,
          "vulnerability_code": "            target.setMessageSender(msg.sender);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "                let result := call(gas, sload(target_slot), callvalue, free_ptr, calldatasize, 0, 0)\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "                let result := call(gas, sload(target_slot), callvalue, free_ptr, calldatasize, 0, 0)\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "                let result := call(gas, sload(target_slot), callvalue, free_ptr, calldatasize, 0, 0)\n",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "                let result := call(gas, sload(target_slot), callvalue, free_ptr, calldatasize, 0, 0)\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 308,
          "vulnerability_to_line": null,
          "vulnerability_code": "        target.setMessageSender(msg.sender);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 311,
          "vulnerability_to_line": null,
          "vulnerability_code": "        IERC20(target).approve(spender, value);\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 311,
          "vulnerability_to_line": null,
          "vulnerability_code": "        IERC20(target).approve(spender, value);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 311,
          "vulnerability_to_line": null,
          "vulnerability_code": "        IERC20(target).approve(spender, value);\n",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 311,
          "vulnerability_to_line": null,
          "vulnerability_code": "        IERC20(target).approve(spender, value);\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 257,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return IERC20(target).totalSupply();\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 329,
          "vulnerability_to_line": null,
          "vulnerability_code": "        target.setMessageSender(msg.sender);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "        IERC20(target).transferFrom(from, to, value);\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "        IERC20(target).transferFrom(from, to, value);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "        IERC20(target).transferFrom(from, to, value);\n",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "        IERC20(target).transferFrom(from, to, value);\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 247,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return IERC20(target).decimals();\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 267,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return IERC20(target).balanceOf(owner);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 288,
          "vulnerability_to_line": null,
          "vulnerability_code": "        target.setMessageSender(msg.sender);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 291,
          "vulnerability_to_line": null,
          "vulnerability_code": "        IERC20(target).transfer(to, value);\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 291,
          "vulnerability_to_line": null,
          "vulnerability_code": "        IERC20(target).transfer(to, value);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 291,
          "vulnerability_to_line": null,
          "vulnerability_code": "        IERC20(target).transfer(to, value);\n",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 291,
          "vulnerability_to_line": null,
          "vulnerability_code": "        IERC20(target).transfer(to, value);\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return IERC20(target).allowance(owner, spender);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "                let result := call(gas, sload(target_slot), callvalue, free_ptr, calldatasize, 0, 0)\n",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "                let result := call(gas, sload(target_slot), callvalue, free_ptr, calldatasize, 0, 0)\n",
          "message": null
        }
      ]
    }
  }
}