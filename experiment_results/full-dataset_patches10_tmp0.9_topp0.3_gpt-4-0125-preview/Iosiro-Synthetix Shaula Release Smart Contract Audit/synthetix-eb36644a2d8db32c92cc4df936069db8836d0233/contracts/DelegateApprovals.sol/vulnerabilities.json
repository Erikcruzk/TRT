{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 327,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _delegatableFunctions.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _owner) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_owner != address(0), \"Owner address cannot be 0\");\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "        owner = _owner;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit OwnerChanged(address(0), _owner);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 92,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _associatedContract) internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": null,
          "vulnerability_code": "        // This contract is abstract, and thus cannot be instantiated directly\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(owner != address(0), \"Owner must be set\");\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "        associatedContract = _associatedContract;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit AssociatedContractUpdated(_associatedContract);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _owner, address _associatedContract) public Owned(_owner) State(_associatedContract) {}\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 267,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _owner, EternalStorage _eternalStorage) public Owned(_owner) {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 268,
          "vulnerability_to_line": null,
          "vulnerability_code": "        eternalStorage = _eternalStorage;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 269,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 327,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _delegatableFunctions.length; i++) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 328,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _withdrawApproval(_delegatableFunctions[i], msg.sender, delegate);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 327,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _delegatableFunctions.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_owner != address(0), \"Owner address cannot be 0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == nominatedOwner, \"You must be nominated before you can accept ownership\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == owner, \"Only the contract owner may perform this action\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(owner != address(0), \"Owner must be set\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == associatedContract, \"Only the associated contract can perform this action\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 373,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(delegate != address(0), \"Can't delegate to address(0)\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 391,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(_eternalStorage) != address(0), \"Can't set eternalStorage to address(0)\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 327,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _delegatableFunctions.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == nominatedOwner, \"You must be nominated before you can accept ownership\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == owner, \"Only the contract owner may perform this action\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == associatedContract, \"Only the associated contract can perform this action\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 391,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(_eternalStorage) != address(0), \"Can't set eternalStorage to address(0)\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_23"
      ],
      "vulnerability_findings": [
        {
          "name": "pragma",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": "Different versions of Solidity is used in DelegateApprovals.sol:\n\t- Version used: ['>=0.4.24', '^0.5.16']\n\t- DelegateApprovals.sol#3 declares pragma solidity^0.5.16\n\t- DelegateApprovals.sol#44 declares pragma solidity>=0.4.24\n\t- DelegateApprovals.sol#82 declares pragma solidity^0.5.16\n\t- DelegateApprovals.sol#122 declares pragma solidity^0.5.16\n\t- DelegateApprovals.sol#241 declares pragma solidity^0.5.16\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": "Detected issues with version pragma in DelegateApprovals.sol:\n\t- pragma solidity^0.5.16 (DelegateApprovals.sol#3): it allows old versions\n\t- pragma solidity^0.5.16 (DelegateApprovals.sol#82): it allows old versions\n\t- pragma solidity^0.5.16 (DelegateApprovals.sol#122): it allows old versions\n\t- pragma solidity^0.5.16 (DelegateApprovals.sol#241): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _owner) public {\n",
          "message": "Parameter '_owner' of Owned. (DelegateApprovals.sol#11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function nominateNewOwner(address _owner) external onlyOwner {\n",
          "message": "Parameter '_owner' of Owned.nominateNewOwner (DelegateApprovals.sol#17) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": 36,
          "vulnerability_code": "    function _onlyOwner() private view {\n\n        require(msg.sender == owner, \"Only the contract owner may perform this action\");\n",
          "message": "Function 'Owned._onlyOwner' (DelegateApprovals.sol#34-36) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 92,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _associatedContract) internal {\n",
          "message": "Parameter '_associatedContract' of State. (DelegateApprovals.sol#92) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setAssociatedContract(address _associatedContract) external onlyOwner {\n",
          "message": "Parameter '_associatedContract' of State.setAssociatedContract (DelegateApprovals.sol#103) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 139,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes32 => uint) internal UIntStorage;\n",
          "message": "Variable 'EternalStorage.UIntStorage' (DelegateApprovals.sol#139) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 140,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes32 => string) internal StringStorage;\n",
          "message": "Variable 'EternalStorage.StringStorage' (DelegateApprovals.sol#140) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes32 => address) internal AddressStorage;\n",
          "message": "Variable 'EternalStorage.AddressStorage' (DelegateApprovals.sol#141) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes32 => bytes) internal BytesStorage;\n",
          "message": "Variable 'EternalStorage.BytesStorage' (DelegateApprovals.sol#142) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes32 => bytes32) internal Bytes32Storage;\n",
          "message": "Variable 'EternalStorage.Bytes32Storage' (DelegateApprovals.sol#143) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 144,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes32 => bool) internal BooleanStorage;\n",
          "message": "Variable 'EternalStorage.BooleanStorage' (DelegateApprovals.sol#144) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 145,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes32 => int) internal IntStorage;\n",
          "message": "Variable 'EternalStorage.IntStorage' (DelegateApprovals.sol#145) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 267,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _owner, EternalStorage _eternalStorage) public Owned(_owner) {\n",
          "message": "Parameter '_eternalStorage' of DelegateApprovals. (DelegateApprovals.sol#267) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 276,
          "vulnerability_to_line": 282,
          "vulnerability_code": "    function _getKey(\n\n        bytes32 _action,\n\n        address _authoriser,\n\n        address _delegate\n\n    ) internal pure returns (bytes32) {\n\n        return keccak256(abi.encodePacked(_action, _authoriser, _delegate));\n",
          "message": "Function 'DelegateApprovals._getKey' (DelegateApprovals.sol#276-282) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 277,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32 _action,\n",
          "message": "Parameter '_action' of DelegateApprovals._getKey (DelegateApprovals.sol#277) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _authoriser,\n",
          "message": "Parameter '_authoriser' of DelegateApprovals._getKey (DelegateApprovals.sol#278) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 279,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _delegate\n",
          "message": "Parameter '_delegate' of DelegateApprovals._getKey (DelegateApprovals.sol#279) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 308,
          "vulnerability_to_line": 316,
          "vulnerability_code": "    function _checkApproval(\n\n        bytes32 action,\n\n        address authoriser,\n\n        address delegate\n\n    ) internal view returns (bool) {\n\n        if (approvedAll(authoriser, delegate)) return true;\n\n\n\n        return eternalStorage.getBooleanValue(_getKey(action, authoriser, delegate));\n",
          "message": "Function 'DelegateApprovals._checkApproval' (DelegateApprovals.sol#308-316) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 368,
          "vulnerability_to_line": 376,
          "vulnerability_code": "    function _setApproval(\n\n        bytes32 action,\n\n        address authoriser,\n\n        address delegate\n\n    ) internal {\n\n        require(delegate != address(0), \"Can't delegate to address(0)\");\n\n        eternalStorage.setBooleanValue(_getKey(action, authoriser, delegate), true);\n\n        emit Approval(authoriser, delegate, action);\n",
          "message": "Function 'DelegateApprovals._setApproval' (DelegateApprovals.sol#368-376) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 378,
          "vulnerability_to_line": 388,
          "vulnerability_code": "    function _withdrawApproval(\n\n        bytes32 action,\n\n        address authoriser,\n\n        address delegate\n\n    ) internal {\n\n        // Check approval is set otherwise skip deleting approval\n\n        if (eternalStorage.getBooleanValue(_getKey(action, authoriser, delegate))) {\n\n            eternalStorage.deleteBooleanValue(_getKey(action, authoriser, delegate));\n\n            emit WithdrawApproval(authoriser, delegate, action);\n\n        }\n",
          "message": "Function 'DelegateApprovals._withdrawApproval' (DelegateApprovals.sol#378-388) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 390,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setEternalStorage(EternalStorage _eternalStorage) external onlyOwner {\n",
          "message": "Parameter '_eternalStorage' of DelegateApprovals.setEternalStorage (DelegateApprovals.sol#390) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "        nominatedOwner = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 327,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _delegatableFunctions.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 327,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _delegatableFunctions.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setAssociatedContract(address _associatedContract) external onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 390,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setEternalStorage(EternalStorage _eternalStorage) external onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 122,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 241,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 256,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32[5] private _delegatableFunctions = [\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}