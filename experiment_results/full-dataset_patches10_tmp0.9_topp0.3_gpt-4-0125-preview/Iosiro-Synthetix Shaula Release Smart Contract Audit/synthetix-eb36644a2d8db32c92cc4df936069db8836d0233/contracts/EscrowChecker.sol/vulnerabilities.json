{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(ISynthetixEscrow _esc) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "        synthetix_escrow = _esc;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "            uint[2] memory pair = synthetix_escrow.getVestingScheduleEntry(account, i);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < schedules; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < schedules; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_6"
      ],
      "vulnerability_findings": [
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint[16] memory _result;\n",
          "message": "_result in EscrowChecker.checkAccountSchedule (EscrowChecker.sol#22) is a local variable never initialiazed\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "            uint[2] memory pair = synthetix_escrow.getVestingScheduleEntry(account, i);\n",
          "message": "EscrowChecker.checkAccountSchedule has external calls inside a loop:\n\t- pair = synthetix_escrow.getVestingScheduleEntry(account,i) (EscrowChecker.sol#25)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 30,
          "vulnerability_code": "    function checkAccountSchedule(address account) public view returns (uint[16] memory) {\n\n        uint[16] memory _result;\n\n        uint schedules = synthetix_escrow.numVestingEntries(account);\n\n        for (uint i = 0; i < schedules; i++) {\n\n            uint[2] memory pair = synthetix_escrow.getVestingScheduleEntry(account, i);\n\n            _result[i * 2] = pair[0];\n\n            _result[i * 2 + 1] = pair[1];\n\n        }\n\n        return _result;\n",
          "message": "EscrowChecker.checkAccountSchedule (EscrowChecker.sol#21-30) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": "Detected issues with version pragma in EscrowChecker.sol:\n\t- pragma solidity^0.5.16 (EscrowChecker.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(ISynthetixEscrow _esc) public {\n",
          "message": "Parameter '_esc' of EscrowChecker. (EscrowChecker.sol#17) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ISynthetixEscrow public synthetix_escrow;\n",
          "message": "Variable 'EscrowChecker.synthetix_escrow' (EscrowChecker.sol#15) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}