{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_9"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function totalSupply() public view returns (uint);\n",
          "message": "IERC20.totalSupply (IERC20.sol#7) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address owner) public view returns (uint);\n",
          "message": "IERC20.balanceOf (IERC20.sol#9) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address owner, address spender) public view returns (uint);\n",
          "message": "IERC20.allowance (IERC20.sol#11) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address to, uint value) public returns (bool);\n",
          "message": "IERC20.transfer (IERC20.sol#13) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address spender, uint value) public returns (bool);\n",
          "message": "IERC20.approve (IERC20.sol#15) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 21,
          "vulnerability_code": "    function transferFrom(\n\n        address from,\n\n        address to,\n\n        uint value\n",
          "message": "IERC20.transferFrom (IERC20.sol#17-21) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function name() public view returns (string);\n",
          "message": "IERC20.name (IERC20.sol#24) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function symbol() public view returns (string);\n",
          "message": "IERC20.symbol (IERC20.sol#26) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decimals() public view returns (uint8);\n",
          "message": "IERC20.decimals (IERC20.sol#28) should be declared external\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function name() public view returns (string);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function symbol() public view returns (string);\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "execution failed"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "input files do not contain any valid contracts"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}