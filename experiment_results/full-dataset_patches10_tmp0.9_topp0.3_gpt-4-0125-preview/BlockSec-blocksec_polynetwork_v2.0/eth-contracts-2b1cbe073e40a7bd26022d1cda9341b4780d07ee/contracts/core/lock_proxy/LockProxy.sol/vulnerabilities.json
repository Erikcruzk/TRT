{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1165,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1169,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1180,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1185,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1190,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 1253,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract LockProxy is Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 854,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i = 0; i < _signers.length; i++){\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 855,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint j = 0; j < _keepers.length; j++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor () internal { }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor () internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address msgSender = _msgSender();\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _owner = msgSender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit OwnershipTransferred(address(0), msgSender);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 854,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i = 0; i < _signers.length; i++){\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 855,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint j = 0; j < _keepers.length; j++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isOwner(), \"Ownable: caller is not the owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 1 <= buff.length && offset < offset + 1, \"Offset exceeds limit\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 148,
          "vulnerability_to_line": null,
          "vulnerability_code": "            revert(\"NextBool value error\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 159,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 1 <= buff.length && offset < offset + 1, \"NextByte, Offset exceeds maximum\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 1 <= buff.length && offset < offset + 1, \"NextUint8, Offset exceeds maximum\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 191,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 2 <= buff.length && offset < offset + 2, \"NextUint16, offset exceeds maximum\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 212,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 4 <= buff.length && offset < offset + 4, \"NextUint32, offset exceeds maximum\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 239,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 8 <= buff.length && offset < offset + 8, \"NextUint64, offset exceeds maximum\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 267,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 32 <= buff.length && offset < offset + 32, \"NextUint255, offset exceeds maximum\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 285,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(v <= 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, \"Value exceeds the range\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 297,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + len <= buff.length && offset < offset + len, \"NextVarBytes, offset exceeds maximum\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 356,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 32 <= buff.length && offset < offset + 32, \"NextHash, offset exceeds maximum\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 370,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 20 <= buff.length && offset < offset + 20, \"NextBytes20, offset exceeds maximum\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 386,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(value >= 0xFD && value <= 0xFFFF, \"NextUint16, value outside range\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 391,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(value > 0xFFFF && value <= 0xFFFFFFFF, \"NextVarUint, value outside range\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 396,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(value > 0xFFFFFFFF, \"NextVarUint, value outside range\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 401,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(value < 0xFD, \"NextVarUint, value outside range\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 552,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(v <= 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, \"Value exceeds uint255 range\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 607,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_bs.length == 32, \"bytes length is not 32.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 619,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_bs.length == 32, \"bytes length is not 32.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 624,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(value <= 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, \"Value exceeds the range\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 632,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_value <= 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, \"Value exceeds the range\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 652,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_bs.length == 20, \"bytes length does not match address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 870,
          "vulnerability_to_line": null,
          "vulnerability_code": "         require(key.length >= 67, \"key lenggh is too short\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1016,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1070,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1177,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1178,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1179,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1208,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(Utils.isContract(address(token)), \"SafeERC20: call to non-contract\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1212,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"SafeERC20: low-level call failed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1216,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1275,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_msgSender() == ieccmp.getEthCrossChainManager(), \"msgSender is not EthCrossChainManagerContract\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1306,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(amount != 0, \"amount cannot be zero!\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1309,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_transferToContract(fromAssetHash, amount), \"transfer asset from fromAddress to lock_proxy contract  failed!\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1312,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(toAssetHash.length != 0, \"empty illegal toAssetHash\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1326,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(toProxyHash.length != 0, \"empty illegal toProxyHash\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1327,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(eccm.crossChain(toChainId, toProxyHash, \"unlock\", txData), \"EthCrossChainManager crossChain executed error!\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1346,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(fromContractAddr.length != 0, \"from proxy contract address cannot be empty\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1347,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(Utils.equalStorage(proxyHashMap[fromChainId], fromContractAddr), \"From Proxy contract address error!\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1349,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(args.toAssetHash.length != 0, \"toAssetHash cannot be empty\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1352,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(args.toAddress.length != 0, \"toAddress cannot be empty\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1356,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_transferFromContract(toAssetHash, toAddress, args.amount), \"transfer asset from lock_proxy contract to toAddress failed!\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1376,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(msg.value != 0, \"transferred ether cannot be zero!\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1377,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(msg.value == amount, \"transferred ether is not equal to amount!\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1380,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(msg.value == 0, \"there should be no ether transfer!\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1382,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_transferERC20ToContract(fromAssetHash, _msgSender(), address(this), amount), \"transfer erc20 asset to lock_proxy contract failed!\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1393,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_transferERC20FromContract(toAssetHash, toAddress, amount), \"transfer erc20 asset to lock_proxy contract failed!\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 1 <= buff.length && offset < offset + 1, \"Offset exceeds limit\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 159,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 1 <= buff.length && offset < offset + 1, \"NextByte, Offset exceeds maximum\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 1 <= buff.length && offset < offset + 1, \"NextUint8, Offset exceeds maximum\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 191,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 2 <= buff.length && offset < offset + 2, \"NextUint16, offset exceeds maximum\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 212,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 4 <= buff.length && offset < offset + 4, \"NextUint32, offset exceeds maximum\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 239,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 8 <= buff.length && offset < offset + 8, \"NextUint64, offset exceeds maximum\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 267,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 32 <= buff.length && offset < offset + 32, \"NextUint255, offset exceeds maximum\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 297,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + len <= buff.length && offset < offset + len, \"NextVarBytes, offset exceeds maximum\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 356,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 32 <= buff.length && offset < offset + 32, \"NextHash, offset exceeds maximum\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 370,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 20 <= buff.length && offset < offset + 20, \"NextBytes20, offset exceeds maximum\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 386,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(value >= 0xFD && value <= 0xFFFF, \"NextUint16, value outside range\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 391,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(value > 0xFFFF && value <= 0xFFFFFFFF, \"NextVarUint, value outside range\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 854,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i = 0; i < _signers.length; i++){\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 855,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint j = 0; j < _keepers.length; j++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 857,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    m++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 1 <= buff.length && offset < offset + 1, \"NextUint8, Offset exceeds maximum\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 191,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 2 <= buff.length && offset < offset + 2, \"NextUint16, offset exceeds maximum\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 212,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 4 <= buff.length && offset < offset + 4, \"NextUint32, offset exceeds maximum\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 239,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 8 <= buff.length && offset < offset + 8, \"NextUint64, offset exceeds maximum\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 267,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 32 <= buff.length && offset < offset + 32, \"NextUint255, offset exceeds maximum\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 297,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + len <= buff.length && offset < offset + len, \"NextVarBytes, offset exceeds maximum\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 370,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 20 <= buff.length && offset < offset + 20, \"NextBytes20, offset exceeds maximum\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 652,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_bs.length == 20, \"bytes length does not match address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1070,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1177,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1178,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1179,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1216,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1275,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_msgSender() == ieccmp.getEthCrossChainManager(), \"msgSender is not EthCrossChainManagerContract\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1309,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_transferToContract(fromAssetHash, amount), \"transfer asset from fromAddress to lock_proxy contract  failed!\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1327,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(eccm.crossChain(toChainId, toProxyHash, \"unlock\", txData), \"EthCrossChainManager crossChain executed error!\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1346,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(fromContractAddr.length != 0, \"from proxy contract address cannot be empty\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1347,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(Utils.equalStorage(proxyHashMap[fromChainId], fromContractAddr), \"From Proxy contract address error!\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1356,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_transferFromContract(toAssetHash, toAddress, args.amount), \"transfer asset from lock_proxy contract to toAddress failed!\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1376,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(msg.value != 0, \"transferred ether cannot be zero!\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1377,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(msg.value == amount, \"transferred ether is not equal to amount!\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1380,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(msg.value == 0, \"there should be no ether transfer!\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1382,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_transferERC20ToContract(fromAssetHash, _msgSender(), address(this), amount), \"transfer erc20 asset to lock_proxy contract failed!\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1393,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_transferERC20FromContract(toAssetHash, toAddress, amount), \"transfer erc20 asset to lock_proxy contract failed!\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_103"
      ],
      "vulnerability_findings": [
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 1386,
          "vulnerability_to_line": 1396,
          "vulnerability_code": "    function _transferFromContract(address toAssetHash, address toAddress, uint256 amount) internal returns (bool) {\n\n        if (toAssetHash == address(0x0000000000000000000000000000000000000000)) {\n\n            // toAssetHash === address(0) denotes contract needs to unlock ether to toAddress\n\n            // convert toAddress from 'address' type to 'address payable' type, then actively transfer ether\n\n            address(uint160(toAddress)).transfer(amount);\n\n        } else {\n\n            // actively transfer amount of asset from msg.sender to lock_proxy contract \n\n            require(_transferERC20FromContract(toAssetHash, toAddress, amount), \"transfer erc20 asset to lock_proxy contract failed!\");\n\n        }\n\n        return true;\n",
          "message": "LockProxy._transferFromContract (LockProxy.sol#1386-1396) sends eth to arbitrary user\n\tDangerous calls:\n\t- address(uint160(toAddress)).transfer(amount) (LockProxy.sol#1390)\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": 151,
          "vulnerability_code": "    function NextBool(bytes memory buff, uint256 offset) internal pure returns(bool, uint256) {\n\n        require(offset + 1 <= buff.length && offset < offset + 1, \"Offset exceeds limit\");\n\n        // byte === bytes1\n\n        byte v;\n\n        assembly{\n\n            v := mload(add(add(buff, 0x20), offset))\n\n        }\n\n        bool value;\n\n        if (v == 0x01) {\n\n\t\t    value = true;\n\n    \t} else if (v == 0x00) {\n\n            value = false;\n\n        } else {\n\n            revert(\"NextBool value error\");\n\n        }\n\n        return (value, offset + 1);\n",
          "message": "ZeroCopySource.NextBool (LockProxy.sol#135-151) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": 165,
          "vulnerability_code": "    function NextByte(bytes memory buff, uint256 offset) internal pure returns (byte, uint256) {\n\n        require(offset + 1 <= buff.length && offset < offset + 1, \"NextByte, Offset exceeds maximum\");\n\n        byte v;\n\n        assembly{\n\n            v := mload(add(add(buff, 0x20), offset))\n\n        }\n\n        return (v, offset + 1);\n",
          "message": "ZeroCopySource.NextByte (LockProxy.sol#158-165) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": 183,
          "vulnerability_code": "    function NextUint8(bytes memory buff, uint256 offset) internal pure returns (uint8, uint256) {\n\n        require(offset + 1 <= buff.length && offset < offset + 1, \"NextUint8, Offset exceeds maximum\");\n\n        uint8 v;\n\n        assembly{\n\n            let tmpbytes := mload(0x40)\n\n            let bvalue := mload(add(add(buff, 0x20), offset))\n\n            mstore8(tmpbytes, byte(0, bvalue))\n\n            mstore(0x40, add(tmpbytes, 0x01))\n\n            v := mload(sub(tmpbytes, 0x1f))\n\n        }\n\n        return (v, offset + 1);\n",
          "message": "ZeroCopySource.NextUint8 (LockProxy.sol#172-183) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": 203,
          "vulnerability_code": "    function NextUint16(bytes memory buff, uint256 offset) internal pure returns (uint16, uint256) {\n\n        require(offset + 2 <= buff.length && offset < offset + 2, \"NextUint16, offset exceeds maximum\");\n\n        \n\n        uint16 v;\n\n        assembly {\n\n            let tmpbytes := mload(0x40)\n\n            let bvalue := mload(add(add(buff, 0x20), offset))\n\n            mstore8(tmpbytes, byte(0x01, bvalue))\n\n            mstore8(add(tmpbytes, 0x01), byte(0, bvalue))\n\n            mstore(0x40, add(tmpbytes, 0x02))\n\n            v := mload(sub(tmpbytes, 0x1e))\n\n        }\n\n        return (v, offset + 2);\n",
          "message": "ZeroCopySource.NextUint16 (LockProxy.sol#190-203) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": 231,
          "vulnerability_code": "    function NextUint32(bytes memory buff, uint256 offset) internal pure returns (uint32, uint256) {\n\n        require(offset + 4 <= buff.length && offset < offset + 4, \"NextUint32, offset exceeds maximum\");\n\n        uint32 v;\n\n        assembly {\n\n            let tmpbytes := mload(0x40)\n\n            let byteLen := 0x04\n\n            for {\n\n                let tindex := 0x00\n\n                let bindex := sub(byteLen, 0x01)\n\n                let bvalue := mload(add(add(buff, 0x20), offset))\n\n            } lt(tindex, byteLen) {\n\n                tindex := add(tindex, 0x01)\n\n                bindex := sub(bindex, 0x01)\n\n            }{\n\n                mstore8(add(tmpbytes, tindex), byte(bindex, bvalue))\n\n            }\n\n            mstore(0x40, add(tmpbytes, byteLen))\n\n            v := mload(sub(tmpbytes, sub(0x20, byteLen)))\n\n        }\n\n        return (v, offset + 4);\n",
          "message": "ZeroCopySource.NextUint32 (LockProxy.sol#211-231) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 238,
          "vulnerability_to_line": 258,
          "vulnerability_code": "    function NextUint64(bytes memory buff, uint256 offset) internal pure returns (uint64, uint256) {\n\n        require(offset + 8 <= buff.length && offset < offset + 8, \"NextUint64, offset exceeds maximum\");\n\n        uint64 v;\n\n        assembly {\n\n            let tmpbytes := mload(0x40)\n\n            let byteLen := 0x08\n\n            for {\n\n                let tindex := 0x00\n\n                let bindex := sub(byteLen, 0x01)\n\n                let bvalue := mload(add(add(buff, 0x20), offset))\n\n            } lt(tindex, byteLen) {\n\n                tindex := add(tindex, 0x01)\n\n                bindex := sub(bindex, 0x01)\n\n            }{\n\n                mstore8(add(tmpbytes, tindex), byte(bindex, bvalue))\n\n            }\n\n            mstore(0x40, add(tmpbytes, byteLen))\n\n            v := mload(sub(tmpbytes, sub(0x20, byteLen)))\n\n        }\n\n        return (v, offset + 8);\n",
          "message": "ZeroCopySource.NextUint64 (LockProxy.sol#238-258) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 266,
          "vulnerability_to_line": 287,
          "vulnerability_code": "    function NextUint255(bytes memory buff, uint256 offset) internal pure returns (uint256, uint256) {\n\n        require(offset + 32 <= buff.length && offset < offset + 32, \"NextUint255, offset exceeds maximum\");\n\n        uint256 v;\n\n        assembly {\n\n            let tmpbytes := mload(0x40)\n\n            let byteLen := 0x20\n\n            for {\n\n                let tindex := 0x00\n\n                let bindex := sub(byteLen, 0x01)\n\n                let bvalue := mload(add(add(buff, 0x20), offset))\n\n            } lt(tindex, byteLen) {\n\n                tindex := add(tindex, 0x01)\n\n                bindex := sub(bindex, 0x01)\n\n            }{\n\n                mstore8(add(tmpbytes, tindex), byte(bindex, bvalue))\n\n            }\n\n            mstore(0x40, add(tmpbytes, byteLen))\n\n            v := mload(tmpbytes)\n\n        }\n\n        require(v <= 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, \"Value exceeds the range\");\n\n        return (v, offset + 32);\n",
          "message": "ZeroCopySource.NextUint255 (LockProxy.sol#266-287) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": 349,
          "vulnerability_code": "    function NextVarBytes(bytes memory buff, uint256 offset) internal pure returns(bytes memory, uint256) {\n\n        uint len;\n\n        (len, offset) = NextVarUint(buff, offset);\n\n        require(offset + len <= buff.length && offset < offset + len, \"NextVarBytes, offset exceeds maximum\");\n\n        bytes memory tempBytes;\n\n        assembly{\n\n            switch iszero(len)\n\n            case 0 {\n\n                // Get a location of some free memory and store it in tempBytes as\n\n                // Solidity does for memory variables.\n\n                tempBytes := mload(0x40)\n\n\n\n                // The first word of the slice result is potentially a partial\n\n                // word read from the original array. To read it, we calculate\n\n                // the length of that partial word and start copying that many\n\n                // bytes into the array. The first word we copy will start with\n\n                // data we don't care about, but the last `lengthmod` bytes will\n\n                // land at the beginning of the contents of the new array. When\n\n                // we're done copying, we overwrite the full first word with\n\n                // the actual length of the slice.\n\n                let lengthmod := and(len, 31)\n\n\n\n                // The multiplication in the next line is necessary\n\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\n\n                // the following copy loop was copying the origin's length\n\n                // and then ending prematurely not copying everything it should.\n\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n\n                let end := add(mc, len)\n\n\n\n                for {\n\n                    // The multiplication in the next line has the same exact purpose\n\n                    // as the one above.\n\n                    let cc := add(add(add(buff, lengthmod), mul(0x20, iszero(lengthmod))), offset)\n\n                } lt(mc, end) {\n\n                    mc := add(mc, 0x20)\n\n                    cc := add(cc, 0x20)\n\n                } {\n\n                    mstore(mc, mload(cc))\n\n                }\n\n\n\n                mstore(tempBytes, len)\n\n\n\n                //update free-memory pointer\n\n                //allocating the array padded to 32 bytes like the compiler does now\n\n                mstore(0x40, and(add(mc, 31), not(31)))\n\n            }\n\n            //if we want a zero-length slice let's just return a zero-length array\n\n            default {\n\n                tempBytes := mload(0x40)\n\n\n\n                mstore(0x40, add(tempBytes, 0x20))\n\n            }\n\n        }\n\n\n\n        return (tempBytes, offset + len);\n",
          "message": "ZeroCopySource.NextVarBytes (LockProxy.sol#294-349) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 355,
          "vulnerability_to_line": 362,
          "vulnerability_code": "    function NextHash(bytes memory buff, uint256 offset) internal pure returns (bytes32 , uint256) {\n\n        require(offset + 32 <= buff.length && offset < offset + 32, \"NextHash, offset exceeds maximum\");\n\n        bytes32 v;\n\n        assembly {\n\n            v := mload(add(buff, add(offset, 0x20)))\n\n        }\n\n        return (v, offset + 32);\n",
          "message": "ZeroCopySource.NextHash (LockProxy.sol#355-362) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 369,
          "vulnerability_to_line": 376,
          "vulnerability_code": "    function NextBytes20(bytes memory buff, uint256 offset) internal pure returns (bytes20 , uint256) {\n\n        require(offset + 20 <= buff.length && offset < offset + 20, \"NextBytes20, offset exceeds maximum\");\n\n        bytes20 v;\n\n        assembly {\n\n            v := mload(add(buff, add(offset, 0x20)))\n\n        }\n\n        return (v, offset + 20);\n",
          "message": "ZeroCopySource.NextBytes20 (LockProxy.sol#369-376) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 430,
          "vulnerability_to_line": 447,
          "vulnerability_code": "    function WriteBool(bool b) internal pure returns (bytes memory) {\n\n        bytes memory buff;\n\n        assembly{\n\n            buff := mload(0x40)\n\n            mstore(buff, 1)\n\n            switch iszero(b)\n\n            case 1 {\n\n                mstore(add(buff, 0x20), shl(248, 0x00))\n\n                // mstore8(add(buff, 0x20), 0x00)\n\n            }\n\n            default {\n\n                mstore(add(buff, 0x20), shl(248, 0x01))\n\n                // mstore8(add(buff, 0x20), 0x01)\n\n            }\n\n            mstore(0x40, add(buff, 0x21))\n\n        }\n\n        return buff;\n",
          "message": "ZeroCopySink.WriteBool (LockProxy.sol#430-447) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 461,
          "vulnerability_to_line": 471,
          "vulnerability_code": "    function WriteUint8(uint8 v) internal pure returns (bytes memory) {\n\n        bytes memory buff;\n\n        assembly{\n\n            buff := mload(0x40)\n\n            mstore(buff, 1)\n\n            mstore(add(buff, 0x20), shl(248, v))\n\n            // mstore(add(buff, 0x20), byte(0x1f, v))\n\n            mstore(0x40, add(buff, 0x21))\n\n        }\n\n        return buff;\n",
          "message": "ZeroCopySink.WriteUint8 (LockProxy.sol#461-471) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 477,
          "vulnerability_to_line": 496,
          "vulnerability_code": "    function WriteUint16(uint16 v) internal pure returns (bytes memory) {\n\n        bytes memory buff;\n\n\n\n        assembly{\n\n            buff := mload(0x40)\n\n            let byteLen := 0x02\n\n            mstore(buff, byteLen)\n\n            for {\n\n                let mindex := 0x00\n\n                let vindex := 0x1f\n\n            } lt(mindex, byteLen) {\n\n                mindex := add(mindex, 0x01)\n\n                vindex := sub(vindex, 0x01)\n\n            }{\n\n                mstore8(add(add(buff, 0x20), mindex), byte(vindex, v))\n\n            }\n\n            mstore(0x40, add(buff, 0x22))\n\n        }\n\n        return buff;\n",
          "message": "ZeroCopySink.WriteUint16 (LockProxy.sol#477-496) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 502,
          "vulnerability_to_line": 520,
          "vulnerability_code": "    function WriteUint32(uint32 v) internal pure returns(bytes memory) {\n\n        bytes memory buff;\n\n        assembly{\n\n            buff := mload(0x40)\n\n            let byteLen := 0x04\n\n            mstore(buff, byteLen)\n\n            for {\n\n                let mindex := 0x00\n\n                let vindex := 0x1f\n\n            } lt(mindex, byteLen) {\n\n                mindex := add(mindex, 0x01)\n\n                vindex := sub(vindex, 0x01)\n\n            }{\n\n                mstore8(add(add(buff, 0x20), mindex), byte(vindex, v))\n\n            }\n\n            mstore(0x40, add(buff, 0x24))\n\n        }\n\n        return buff;\n",
          "message": "ZeroCopySink.WriteUint32 (LockProxy.sol#502-520) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 526,
          "vulnerability_to_line": 545,
          "vulnerability_code": "    function WriteUint64(uint64 v) internal pure returns(bytes memory) {\n\n        bytes memory buff;\n\n\n\n        assembly{\n\n            buff := mload(0x40)\n\n            let byteLen := 0x08\n\n            mstore(buff, byteLen)\n\n            for {\n\n                let mindex := 0x00\n\n                let vindex := 0x1f\n\n            } lt(mindex, byteLen) {\n\n                mindex := add(mindex, 0x01)\n\n                vindex := sub(vindex, 0x01)\n\n            }{\n\n                mstore8(add(add(buff, 0x20), mindex), byte(vindex, v))\n\n            }\n\n            mstore(0x40, add(buff, 0x28))\n\n        }\n\n        return buff;\n",
          "message": "ZeroCopySink.WriteUint64 (LockProxy.sol#526-545) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 551,
          "vulnerability_to_line": 571,
          "vulnerability_code": "    function WriteUint255(uint256 v) internal pure returns (bytes memory) {\n\n        require(v <= 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, \"Value exceeds uint255 range\");\n\n        bytes memory buff;\n\n\n\n        assembly{\n\n            buff := mload(0x40)\n\n            let byteLen := 0x20\n\n            mstore(buff, byteLen)\n\n            for {\n\n                let mindex := 0x00\n\n                let vindex := 0x1f\n\n            } lt(mindex, byteLen) {\n\n                mindex := add(mindex, 0x01)\n\n                vindex := sub(vindex, 0x01)\n\n            }{\n\n                mstore8(add(add(buff, 0x20), mindex), byte(vindex, v))\n\n            }\n\n            mstore(0x40, add(buff, 0x40))\n\n        }\n\n        return buff;\n",
          "message": "ZeroCopySink.WriteUint255 (LockProxy.sol#551-571) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 606,
          "vulnerability_to_line": 612,
          "vulnerability_code": "    function bytesToBytes32(bytes memory _bs) internal pure returns (bytes32 value) {\n\n        require(_bs.length == 32, \"bytes length is not 32.\");\n\n        assembly {\n\n            // load 32 bytes from memory starting from position _bs + 0x20 since the first 0x20 bytes stores _bs length\n\n            value := mload(add(_bs, 0x20))\n\n        }\n",
          "message": "Utils.bytesToBytes32 (LockProxy.sol#606-612) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 618,
          "vulnerability_to_line": 625,
          "vulnerability_code": "    function bytesToUint256(bytes memory _bs) internal pure returns (uint256 value) {\n\n        require(_bs.length == 32, \"bytes length is not 32.\");\n\n        assembly {\n\n            // load 32 bytes from memory starting from position _bs + 32\n\n            value := mload(add(_bs, 0x20))\n\n        }\n\n        require(value <= 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, \"Value exceeds the range\");\n",
          "message": "Utils.bytesToUint256 (LockProxy.sol#618-625) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 631,
          "vulnerability_to_line": 644,
          "vulnerability_code": "    function uint256ToBytes(uint256 _value) internal pure returns (bytes memory bs) {\n\n        require(_value <= 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, \"Value exceeds the range\");\n\n        assembly {\n\n            // Get a location of some free memory and store it in result as\n\n            // Solidity does for memory variables.\n\n            bs := mload(0x40)\n\n            // Put 0x20 at the first word, the length of bytes for uint256 value\n\n            mstore(bs, 0x20)\n\n            //In the next word, put value in bytes format to the next 32 bytes\n\n            mstore(add(bs, 0x20), _value)\n\n            // Update the free-memory pointer by padding our last write location to 32 bytes\n\n            mstore(0x40, add(bs, 0x40))\n\n        }\n",
          "message": "Utils.uint256ToBytes (LockProxy.sol#631-644) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 650,
          "vulnerability_to_line": 659,
          "vulnerability_code": "    function bytesToAddress(bytes memory _bs) internal pure returns (address addr)\n\n    {\n\n        require(_bs.length == 20, \"bytes length does not match address\");\n\n        assembly {\n\n            // for _bs, first word store _bs.length, second word store _bs.value\n\n            // load 32 bytes from mem[_bs+20], convert it into Uint160, meaning we take last 20 bytes as addr (address).\n\n            addr := mload(add(_bs, 0x14))\n\n        }\n\n\n",
          "message": "Utils.bytesToAddress (LockProxy.sol#650-659) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 665,
          "vulnerability_to_line": 677,
          "vulnerability_code": "    function addressToBytes(address _addr) internal pure returns (bytes memory bs){\n\n        assembly {\n\n            // Get a location of some free memory and store it in result as\n\n            // Solidity does for memory variables.\n\n            bs := mload(0x40)\n\n            // Put 20 (address byte length) at the first word, the length of bytes for uint256 value\n\n            mstore(bs, 0x14)\n\n            // logical shift left _a by 12 bytes, change _a from right-aligned to left-aligned\n\n            mstore(add(bs, 0x20), shl(96, _addr))\n\n            // Update the free-memory pointer by padding our last write location to 32 bytes\n\n            mstore(0x40, add(bs, 0x40))\n\n       }\n",
          "message": "Utils.addressToBytes (LockProxy.sol#665-677) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 702,
          "vulnerability_to_line": 772,
          "vulnerability_code": "    function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\n\n        bool success = true;\n\n\n\n        assembly {\n\n            // we know _preBytes_offset is 0\n\n            let fslot := sload(_preBytes_slot)\n\n            // Arrays of 31 bytes or less have an even value in their slot,\n\n            // while longer arrays have an odd value. The actual length is\n\n            // the slot divided by two for odd values, and the lowest order\n\n            // byte divided by two for even values.\n\n            // If the slot is even, bitwise and the slot with 255 and divide by\n\n            // two to get the length. If the slot is odd, bitwise and the slot\n\n            // with -1 and divide by two.\n\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n\n            let mlength := mload(_postBytes)\n\n\n\n            // if lengths don't match the arrays are not equal\n\n            switch eq(slength, mlength)\n\n            case 1 {\n\n                // fslot can contain both the length and contents of the array\n\n                // if slength < 32 bytes so let's prepare for that\n\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n\n                // slength != 0\n\n                if iszero(iszero(slength)) {\n\n                    switch lt(slength, 32)\n\n                    case 1 {\n\n                        // blank the last byte which is the length\n\n                        fslot := mul(div(fslot, 0x100), 0x100)\n\n\n\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\n\n                            // unsuccess:\n\n                            success := 0\n\n                        }\n\n                    }\n\n                    default {\n\n                        // cb is a circuit breaker in the for loop since there's\n\n                        //  no said feature for inline assembly loops\n\n                        // cb = 1 - don't breaker\n\n                        // cb = 0 - break\n\n                        let cb := 1\n\n\n\n                        // get the keccak hash to get the contents of the array\n\n                        mstore(0x0, _preBytes_slot)\n\n                        let sc := keccak256(0x0, 0x20)\n\n\n\n                        let mc := add(_postBytes, 0x20)\n\n                        let end := add(mc, mlength)\n\n\n\n                        // the next line is the loop condition:\n\n                        // while(uint(mc < end) + cb == 2)\n\n                        for {} eq(add(lt(mc, end), cb), 2) {\n\n                            sc := add(sc, 1)\n\n                            mc := add(mc, 0x20)\n\n                        } {\n\n                            if iszero(eq(sload(sc), mload(mc))) {\n\n                                // unsuccess:\n\n                                success := 0\n\n                                cb := 0\n\n                            }\n\n                        }\n\n                    }\n\n                }\n\n            }\n\n            default {\n\n                // unsuccess:\n\n                success := 0\n\n            }\n\n        }\n\n\n\n        return success;\n",
          "message": "Utils.equalStorage (LockProxy.sol#702-772) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 781,
          "vulnerability_to_line": 845,
          "vulnerability_code": "    function slice(\n\n        bytes memory _bytes,\n\n        uint _start,\n\n        uint _length\n\n    )\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        require(_bytes.length >= (_start + _length));\n\n\n\n        bytes memory tempBytes;\n\n\n\n        assembly {\n\n            switch iszero(_length)\n\n            case 0 {\n\n                // Get a location of some free memory and store it in tempBytes as\n\n                // Solidity does for memory variables.\n\n                tempBytes := mload(0x40)\n\n\n\n                // The first word of the slice result is potentially a partial\n\n                // word read from the original array. To read it, we calculate\n\n                // the length of that partial word and start copying that many\n\n                // bytes into the array. The first word we copy will start with\n\n                // data we don't care about, but the last `lengthmod` bytes will\n\n                // land at the beginning of the contents of the new array. When\n\n                // we're done copying, we overwrite the full first word with\n\n                // the actual length of the slice.\n\n                // lengthmod <= _length % 32\n\n                let lengthmod := and(_length, 31)\n\n\n\n                // The multiplication in the next line is necessary\n\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\n\n                // the following copy loop was copying the origin's length\n\n                // and then ending prematurely not copying everything it should.\n\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n\n                let end := add(mc, _length)\n\n\n\n                for {\n\n                    // The multiplication in the next line has the same exact purpose\n\n                    // as the one above.\n\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\n\n                } lt(mc, end) {\n\n                    mc := add(mc, 0x20)\n\n                    cc := add(cc, 0x20)\n\n                } {\n\n                    mstore(mc, mload(cc))\n\n                }\n\n\n\n                mstore(tempBytes, _length)\n\n\n\n                //update free-memory pointer\n\n                //allocating the array padded to 32 bytes like the compiler does now\n\n                mstore(0x40, and(add(mc, 31), not(31)))\n\n            }\n\n            //if we want a zero-length slice let's just return a zero-length array\n\n            default {\n\n                tempBytes := mload(0x40)\n\n\n\n                mstore(0x40, add(tempBytes, 0x20))\n\n            }\n\n        }\n\n\n\n        return tempBytes;\n",
          "message": "Utils.slice (LockProxy.sol#781-845) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 892,
          "vulnerability_to_line": 905,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        // This method relies in extcodesize, which returns 0 for contracts in\n\n        // construction, since the code is only stored at the end of the\n\n        // constructor execution.\n\n\n\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n\n        // for accounts without code, i.e. `keccak256('')`\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
          "message": "Utils.isContract (LockProxy.sol#892-905) is declared view but contains assembly code\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 1423,
          "vulnerability_to_line": null,
          "vulnerability_code": "        TxArgs memory args;\n",
          "message": "args in LockProxy._deserializeTxArgs (LockProxy.sol#1423) is a local variable never initialiazed\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": 151,
          "vulnerability_code": "    function NextBool(bytes memory buff, uint256 offset) internal pure returns(bool, uint256) {\n\n        require(offset + 1 <= buff.length && offset < offset + 1, \"Offset exceeds limit\");\n\n        // byte === bytes1\n\n        byte v;\n\n        assembly{\n\n            v := mload(add(add(buff, 0x20), offset))\n\n        }\n\n        bool value;\n\n        if (v == 0x01) {\n\n\t\t    value = true;\n\n    \t} else if (v == 0x00) {\n\n            value = false;\n\n        } else {\n\n            revert(\"NextBool value error\");\n\n        }\n\n        return (value, offset + 1);\n",
          "message": "ZeroCopySource.NextBool uses assembly (LockProxy.sol#135-151)\n\t- LockProxy.sol#139-141\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": 165,
          "vulnerability_code": "    function NextByte(bytes memory buff, uint256 offset) internal pure returns (byte, uint256) {\n\n        require(offset + 1 <= buff.length && offset < offset + 1, \"NextByte, Offset exceeds maximum\");\n\n        byte v;\n\n        assembly{\n\n            v := mload(add(add(buff, 0x20), offset))\n\n        }\n\n        return (v, offset + 1);\n",
          "message": "ZeroCopySource.NextByte uses assembly (LockProxy.sol#158-165)\n\t- LockProxy.sol#161-163\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": 183,
          "vulnerability_code": "    function NextUint8(bytes memory buff, uint256 offset) internal pure returns (uint8, uint256) {\n\n        require(offset + 1 <= buff.length && offset < offset + 1, \"NextUint8, Offset exceeds maximum\");\n\n        uint8 v;\n\n        assembly{\n\n            let tmpbytes := mload(0x40)\n\n            let bvalue := mload(add(add(buff, 0x20), offset))\n\n            mstore8(tmpbytes, byte(0, bvalue))\n\n            mstore(0x40, add(tmpbytes, 0x01))\n\n            v := mload(sub(tmpbytes, 0x1f))\n\n        }\n\n        return (v, offset + 1);\n",
          "message": "ZeroCopySource.NextUint8 uses assembly (LockProxy.sol#172-183)\n\t- LockProxy.sol#175-181\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": 203,
          "vulnerability_code": "    function NextUint16(bytes memory buff, uint256 offset) internal pure returns (uint16, uint256) {\n\n        require(offset + 2 <= buff.length && offset < offset + 2, \"NextUint16, offset exceeds maximum\");\n\n        \n\n        uint16 v;\n\n        assembly {\n\n            let tmpbytes := mload(0x40)\n\n            let bvalue := mload(add(add(buff, 0x20), offset))\n\n            mstore8(tmpbytes, byte(0x01, bvalue))\n\n            mstore8(add(tmpbytes, 0x01), byte(0, bvalue))\n\n            mstore(0x40, add(tmpbytes, 0x02))\n\n            v := mload(sub(tmpbytes, 0x1e))\n\n        }\n\n        return (v, offset + 2);\n",
          "message": "ZeroCopySource.NextUint16 uses assembly (LockProxy.sol#190-203)\n\t- LockProxy.sol#194-201\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": 231,
          "vulnerability_code": "    function NextUint32(bytes memory buff, uint256 offset) internal pure returns (uint32, uint256) {\n\n        require(offset + 4 <= buff.length && offset < offset + 4, \"NextUint32, offset exceeds maximum\");\n\n        uint32 v;\n\n        assembly {\n\n            let tmpbytes := mload(0x40)\n\n            let byteLen := 0x04\n\n            for {\n\n                let tindex := 0x00\n\n                let bindex := sub(byteLen, 0x01)\n\n                let bvalue := mload(add(add(buff, 0x20), offset))\n\n            } lt(tindex, byteLen) {\n\n                tindex := add(tindex, 0x01)\n\n                bindex := sub(bindex, 0x01)\n\n            }{\n\n                mstore8(add(tmpbytes, tindex), byte(bindex, bvalue))\n\n            }\n\n            mstore(0x40, add(tmpbytes, byteLen))\n\n            v := mload(sub(tmpbytes, sub(0x20, byteLen)))\n\n        }\n\n        return (v, offset + 4);\n",
          "message": "ZeroCopySource.NextUint32 uses assembly (LockProxy.sol#211-231)\n\t- LockProxy.sol#214-229\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 238,
          "vulnerability_to_line": 258,
          "vulnerability_code": "    function NextUint64(bytes memory buff, uint256 offset) internal pure returns (uint64, uint256) {\n\n        require(offset + 8 <= buff.length && offset < offset + 8, \"NextUint64, offset exceeds maximum\");\n\n        uint64 v;\n\n        assembly {\n\n            let tmpbytes := mload(0x40)\n\n            let byteLen := 0x08\n\n            for {\n\n                let tindex := 0x00\n\n                let bindex := sub(byteLen, 0x01)\n\n                let bvalue := mload(add(add(buff, 0x20), offset))\n\n            } lt(tindex, byteLen) {\n\n                tindex := add(tindex, 0x01)\n\n                bindex := sub(bindex, 0x01)\n\n            }{\n\n                mstore8(add(tmpbytes, tindex), byte(bindex, bvalue))\n\n            }\n\n            mstore(0x40, add(tmpbytes, byteLen))\n\n            v := mload(sub(tmpbytes, sub(0x20, byteLen)))\n\n        }\n\n        return (v, offset + 8);\n",
          "message": "ZeroCopySource.NextUint64 uses assembly (LockProxy.sol#238-258)\n\t- LockProxy.sol#241-256\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 266,
          "vulnerability_to_line": 287,
          "vulnerability_code": "    function NextUint255(bytes memory buff, uint256 offset) internal pure returns (uint256, uint256) {\n\n        require(offset + 32 <= buff.length && offset < offset + 32, \"NextUint255, offset exceeds maximum\");\n\n        uint256 v;\n\n        assembly {\n\n            let tmpbytes := mload(0x40)\n\n            let byteLen := 0x20\n\n            for {\n\n                let tindex := 0x00\n\n                let bindex := sub(byteLen, 0x01)\n\n                let bvalue := mload(add(add(buff, 0x20), offset))\n\n            } lt(tindex, byteLen) {\n\n                tindex := add(tindex, 0x01)\n\n                bindex := sub(bindex, 0x01)\n\n            }{\n\n                mstore8(add(tmpbytes, tindex), byte(bindex, bvalue))\n\n            }\n\n            mstore(0x40, add(tmpbytes, byteLen))\n\n            v := mload(tmpbytes)\n\n        }\n\n        require(v <= 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, \"Value exceeds the range\");\n\n        return (v, offset + 32);\n",
          "message": "ZeroCopySource.NextUint255 uses assembly (LockProxy.sol#266-287)\n\t- LockProxy.sol#269-284\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": 349,
          "vulnerability_code": "    function NextVarBytes(bytes memory buff, uint256 offset) internal pure returns(bytes memory, uint256) {\n\n        uint len;\n\n        (len, offset) = NextVarUint(buff, offset);\n\n        require(offset + len <= buff.length && offset < offset + len, \"NextVarBytes, offset exceeds maximum\");\n\n        bytes memory tempBytes;\n\n        assembly{\n\n            switch iszero(len)\n\n            case 0 {\n\n                // Get a location of some free memory and store it in tempBytes as\n\n                // Solidity does for memory variables.\n\n                tempBytes := mload(0x40)\n\n\n\n                // The first word of the slice result is potentially a partial\n\n                // word read from the original array. To read it, we calculate\n\n                // the length of that partial word and start copying that many\n\n                // bytes into the array. The first word we copy will start with\n\n                // data we don't care about, but the last `lengthmod` bytes will\n\n                // land at the beginning of the contents of the new array. When\n\n                // we're done copying, we overwrite the full first word with\n\n                // the actual length of the slice.\n\n                let lengthmod := and(len, 31)\n\n\n\n                // The multiplication in the next line is necessary\n\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\n\n                // the following copy loop was copying the origin's length\n\n                // and then ending prematurely not copying everything it should.\n\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n\n                let end := add(mc, len)\n\n\n\n                for {\n\n                    // The multiplication in the next line has the same exact purpose\n\n                    // as the one above.\n\n                    let cc := add(add(add(buff, lengthmod), mul(0x20, iszero(lengthmod))), offset)\n\n                } lt(mc, end) {\n\n                    mc := add(mc, 0x20)\n\n                    cc := add(cc, 0x20)\n\n                } {\n\n                    mstore(mc, mload(cc))\n\n                }\n\n\n\n                mstore(tempBytes, len)\n\n\n\n                //update free-memory pointer\n\n                //allocating the array padded to 32 bytes like the compiler does now\n\n                mstore(0x40, and(add(mc, 31), not(31)))\n\n            }\n\n            //if we want a zero-length slice let's just return a zero-length array\n\n            default {\n\n                tempBytes := mload(0x40)\n\n\n\n                mstore(0x40, add(tempBytes, 0x20))\n\n            }\n\n        }\n\n\n\n        return (tempBytes, offset + len);\n",
          "message": "ZeroCopySource.NextVarBytes uses assembly (LockProxy.sol#294-349)\n\t- LockProxy.sol#299-346\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 355,
          "vulnerability_to_line": 362,
          "vulnerability_code": "    function NextHash(bytes memory buff, uint256 offset) internal pure returns (bytes32 , uint256) {\n\n        require(offset + 32 <= buff.length && offset < offset + 32, \"NextHash, offset exceeds maximum\");\n\n        bytes32 v;\n\n        assembly {\n\n            v := mload(add(buff, add(offset, 0x20)))\n\n        }\n\n        return (v, offset + 32);\n",
          "message": "ZeroCopySource.NextHash uses assembly (LockProxy.sol#355-362)\n\t- LockProxy.sol#358-360\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 369,
          "vulnerability_to_line": 376,
          "vulnerability_code": "    function NextBytes20(bytes memory buff, uint256 offset) internal pure returns (bytes20 , uint256) {\n\n        require(offset + 20 <= buff.length && offset < offset + 20, \"NextBytes20, offset exceeds maximum\");\n\n        bytes20 v;\n\n        assembly {\n\n            v := mload(add(buff, add(offset, 0x20)))\n\n        }\n\n        return (v, offset + 20);\n",
          "message": "ZeroCopySource.NextBytes20 uses assembly (LockProxy.sol#369-376)\n\t- LockProxy.sol#372-374\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 430,
          "vulnerability_to_line": 447,
          "vulnerability_code": "    function WriteBool(bool b) internal pure returns (bytes memory) {\n\n        bytes memory buff;\n\n        assembly{\n\n            buff := mload(0x40)\n\n            mstore(buff, 1)\n\n            switch iszero(b)\n\n            case 1 {\n\n                mstore(add(buff, 0x20), shl(248, 0x00))\n\n                // mstore8(add(buff, 0x20), 0x00)\n\n            }\n\n            default {\n\n                mstore(add(buff, 0x20), shl(248, 0x01))\n\n                // mstore8(add(buff, 0x20), 0x01)\n\n            }\n\n            mstore(0x40, add(buff, 0x21))\n\n        }\n\n        return buff;\n",
          "message": "ZeroCopySink.WriteBool uses assembly (LockProxy.sol#430-447)\n\t- LockProxy.sol#432-445\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 461,
          "vulnerability_to_line": 471,
          "vulnerability_code": "    function WriteUint8(uint8 v) internal pure returns (bytes memory) {\n\n        bytes memory buff;\n\n        assembly{\n\n            buff := mload(0x40)\n\n            mstore(buff, 1)\n\n            mstore(add(buff, 0x20), shl(248, v))\n\n            // mstore(add(buff, 0x20), byte(0x1f, v))\n\n            mstore(0x40, add(buff, 0x21))\n\n        }\n\n        return buff;\n",
          "message": "ZeroCopySink.WriteUint8 uses assembly (LockProxy.sol#461-471)\n\t- LockProxy.sol#463-469\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 477,
          "vulnerability_to_line": 496,
          "vulnerability_code": "    function WriteUint16(uint16 v) internal pure returns (bytes memory) {\n\n        bytes memory buff;\n\n\n\n        assembly{\n\n            buff := mload(0x40)\n\n            let byteLen := 0x02\n\n            mstore(buff, byteLen)\n\n            for {\n\n                let mindex := 0x00\n\n                let vindex := 0x1f\n\n            } lt(mindex, byteLen) {\n\n                mindex := add(mindex, 0x01)\n\n                vindex := sub(vindex, 0x01)\n\n            }{\n\n                mstore8(add(add(buff, 0x20), mindex), byte(vindex, v))\n\n            }\n\n            mstore(0x40, add(buff, 0x22))\n\n        }\n\n        return buff;\n",
          "message": "ZeroCopySink.WriteUint16 uses assembly (LockProxy.sol#477-496)\n\t- LockProxy.sol#480-494\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 502,
          "vulnerability_to_line": 520,
          "vulnerability_code": "    function WriteUint32(uint32 v) internal pure returns(bytes memory) {\n\n        bytes memory buff;\n\n        assembly{\n\n            buff := mload(0x40)\n\n            let byteLen := 0x04\n\n            mstore(buff, byteLen)\n\n            for {\n\n                let mindex := 0x00\n\n                let vindex := 0x1f\n\n            } lt(mindex, byteLen) {\n\n                mindex := add(mindex, 0x01)\n\n                vindex := sub(vindex, 0x01)\n\n            }{\n\n                mstore8(add(add(buff, 0x20), mindex), byte(vindex, v))\n\n            }\n\n            mstore(0x40, add(buff, 0x24))\n\n        }\n\n        return buff;\n",
          "message": "ZeroCopySink.WriteUint32 uses assembly (LockProxy.sol#502-520)\n\t- LockProxy.sol#504-518\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 526,
          "vulnerability_to_line": 545,
          "vulnerability_code": "    function WriteUint64(uint64 v) internal pure returns(bytes memory) {\n\n        bytes memory buff;\n\n\n\n        assembly{\n\n            buff := mload(0x40)\n\n            let byteLen := 0x08\n\n            mstore(buff, byteLen)\n\n            for {\n\n                let mindex := 0x00\n\n                let vindex := 0x1f\n\n            } lt(mindex, byteLen) {\n\n                mindex := add(mindex, 0x01)\n\n                vindex := sub(vindex, 0x01)\n\n            }{\n\n                mstore8(add(add(buff, 0x20), mindex), byte(vindex, v))\n\n            }\n\n            mstore(0x40, add(buff, 0x28))\n\n        }\n\n        return buff;\n",
          "message": "ZeroCopySink.WriteUint64 uses assembly (LockProxy.sol#526-545)\n\t- LockProxy.sol#529-543\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 551,
          "vulnerability_to_line": 571,
          "vulnerability_code": "    function WriteUint255(uint256 v) internal pure returns (bytes memory) {\n\n        require(v <= 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, \"Value exceeds uint255 range\");\n\n        bytes memory buff;\n\n\n\n        assembly{\n\n            buff := mload(0x40)\n\n            let byteLen := 0x20\n\n            mstore(buff, byteLen)\n\n            for {\n\n                let mindex := 0x00\n\n                let vindex := 0x1f\n\n            } lt(mindex, byteLen) {\n\n                mindex := add(mindex, 0x01)\n\n                vindex := sub(vindex, 0x01)\n\n            }{\n\n                mstore8(add(add(buff, 0x20), mindex), byte(vindex, v))\n\n            }\n\n            mstore(0x40, add(buff, 0x40))\n\n        }\n\n        return buff;\n",
          "message": "ZeroCopySink.WriteUint255 uses assembly (LockProxy.sol#551-571)\n\t- LockProxy.sol#555-569\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 606,
          "vulnerability_to_line": 612,
          "vulnerability_code": "    function bytesToBytes32(bytes memory _bs) internal pure returns (bytes32 value) {\n\n        require(_bs.length == 32, \"bytes length is not 32.\");\n\n        assembly {\n\n            // load 32 bytes from memory starting from position _bs + 0x20 since the first 0x20 bytes stores _bs length\n\n            value := mload(add(_bs, 0x20))\n\n        }\n",
          "message": "Utils.bytesToBytes32 uses assembly (LockProxy.sol#606-612)\n\t- LockProxy.sol#608-611\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 618,
          "vulnerability_to_line": 625,
          "vulnerability_code": "    function bytesToUint256(bytes memory _bs) internal pure returns (uint256 value) {\n\n        require(_bs.length == 32, \"bytes length is not 32.\");\n\n        assembly {\n\n            // load 32 bytes from memory starting from position _bs + 32\n\n            value := mload(add(_bs, 0x20))\n\n        }\n\n        require(value <= 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, \"Value exceeds the range\");\n",
          "message": "Utils.bytesToUint256 uses assembly (LockProxy.sol#618-625)\n\t- LockProxy.sol#620-623\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 631,
          "vulnerability_to_line": 644,
          "vulnerability_code": "    function uint256ToBytes(uint256 _value) internal pure returns (bytes memory bs) {\n\n        require(_value <= 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, \"Value exceeds the range\");\n\n        assembly {\n\n            // Get a location of some free memory and store it in result as\n\n            // Solidity does for memory variables.\n\n            bs := mload(0x40)\n\n            // Put 0x20 at the first word, the length of bytes for uint256 value\n\n            mstore(bs, 0x20)\n\n            //In the next word, put value in bytes format to the next 32 bytes\n\n            mstore(add(bs, 0x20), _value)\n\n            // Update the free-memory pointer by padding our last write location to 32 bytes\n\n            mstore(0x40, add(bs, 0x40))\n\n        }\n",
          "message": "Utils.uint256ToBytes uses assembly (LockProxy.sol#631-644)\n\t- LockProxy.sol#633-643\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 650,
          "vulnerability_to_line": 659,
          "vulnerability_code": "    function bytesToAddress(bytes memory _bs) internal pure returns (address addr)\n\n    {\n\n        require(_bs.length == 20, \"bytes length does not match address\");\n\n        assembly {\n\n            // for _bs, first word store _bs.length, second word store _bs.value\n\n            // load 32 bytes from mem[_bs+20], convert it into Uint160, meaning we take last 20 bytes as addr (address).\n\n            addr := mload(add(_bs, 0x14))\n\n        }\n\n\n",
          "message": "Utils.bytesToAddress uses assembly (LockProxy.sol#650-659)\n\t- LockProxy.sol#653-657\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 665,
          "vulnerability_to_line": 677,
          "vulnerability_code": "    function addressToBytes(address _addr) internal pure returns (bytes memory bs){\n\n        assembly {\n\n            // Get a location of some free memory and store it in result as\n\n            // Solidity does for memory variables.\n\n            bs := mload(0x40)\n\n            // Put 20 (address byte length) at the first word, the length of bytes for uint256 value\n\n            mstore(bs, 0x14)\n\n            // logical shift left _a by 12 bytes, change _a from right-aligned to left-aligned\n\n            mstore(add(bs, 0x20), shl(96, _addr))\n\n            // Update the free-memory pointer by padding our last write location to 32 bytes\n\n            mstore(0x40, add(bs, 0x40))\n\n       }\n",
          "message": "Utils.addressToBytes uses assembly (LockProxy.sol#665-677)\n\t- LockProxy.sol#666-676\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 702,
          "vulnerability_to_line": 772,
          "vulnerability_code": "    function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\n\n        bool success = true;\n\n\n\n        assembly {\n\n            // we know _preBytes_offset is 0\n\n            let fslot := sload(_preBytes_slot)\n\n            // Arrays of 31 bytes or less have an even value in their slot,\n\n            // while longer arrays have an odd value. The actual length is\n\n            // the slot divided by two for odd values, and the lowest order\n\n            // byte divided by two for even values.\n\n            // If the slot is even, bitwise and the slot with 255 and divide by\n\n            // two to get the length. If the slot is odd, bitwise and the slot\n\n            // with -1 and divide by two.\n\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n\n            let mlength := mload(_postBytes)\n\n\n\n            // if lengths don't match the arrays are not equal\n\n            switch eq(slength, mlength)\n\n            case 1 {\n\n                // fslot can contain both the length and contents of the array\n\n                // if slength < 32 bytes so let's prepare for that\n\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n\n                // slength != 0\n\n                if iszero(iszero(slength)) {\n\n                    switch lt(slength, 32)\n\n                    case 1 {\n\n                        // blank the last byte which is the length\n\n                        fslot := mul(div(fslot, 0x100), 0x100)\n\n\n\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\n\n                            // unsuccess:\n\n                            success := 0\n\n                        }\n\n                    }\n\n                    default {\n\n                        // cb is a circuit breaker in the for loop since there's\n\n                        //  no said feature for inline assembly loops\n\n                        // cb = 1 - don't breaker\n\n                        // cb = 0 - break\n\n                        let cb := 1\n\n\n\n                        // get the keccak hash to get the contents of the array\n\n                        mstore(0x0, _preBytes_slot)\n\n                        let sc := keccak256(0x0, 0x20)\n\n\n\n                        let mc := add(_postBytes, 0x20)\n\n                        let end := add(mc, mlength)\n\n\n\n                        // the next line is the loop condition:\n\n                        // while(uint(mc < end) + cb == 2)\n\n                        for {} eq(add(lt(mc, end), cb), 2) {\n\n                            sc := add(sc, 1)\n\n                            mc := add(mc, 0x20)\n\n                        } {\n\n                            if iszero(eq(sload(sc), mload(mc))) {\n\n                                // unsuccess:\n\n                                success := 0\n\n                                cb := 0\n\n                            }\n\n                        }\n\n                    }\n\n                }\n\n            }\n\n            default {\n\n                // unsuccess:\n\n                success := 0\n\n            }\n\n        }\n\n\n\n        return success;\n",
          "message": "Utils.equalStorage uses assembly (LockProxy.sol#702-772)\n\t- LockProxy.sol#705-769\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 781,
          "vulnerability_to_line": 845,
          "vulnerability_code": "    function slice(\n\n        bytes memory _bytes,\n\n        uint _start,\n\n        uint _length\n\n    )\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        require(_bytes.length >= (_start + _length));\n\n\n\n        bytes memory tempBytes;\n\n\n\n        assembly {\n\n            switch iszero(_length)\n\n            case 0 {\n\n                // Get a location of some free memory and store it in tempBytes as\n\n                // Solidity does for memory variables.\n\n                tempBytes := mload(0x40)\n\n\n\n                // The first word of the slice result is potentially a partial\n\n                // word read from the original array. To read it, we calculate\n\n                // the length of that partial word and start copying that many\n\n                // bytes into the array. The first word we copy will start with\n\n                // data we don't care about, but the last `lengthmod` bytes will\n\n                // land at the beginning of the contents of the new array. When\n\n                // we're done copying, we overwrite the full first word with\n\n                // the actual length of the slice.\n\n                // lengthmod <= _length % 32\n\n                let lengthmod := and(_length, 31)\n\n\n\n                // The multiplication in the next line is necessary\n\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\n\n                // the following copy loop was copying the origin's length\n\n                // and then ending prematurely not copying everything it should.\n\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n\n                let end := add(mc, _length)\n\n\n\n                for {\n\n                    // The multiplication in the next line has the same exact purpose\n\n                    // as the one above.\n\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\n\n                } lt(mc, end) {\n\n                    mc := add(mc, 0x20)\n\n                    cc := add(cc, 0x20)\n\n                } {\n\n                    mstore(mc, mload(cc))\n\n                }\n\n\n\n                mstore(tempBytes, _length)\n\n\n\n                //update free-memory pointer\n\n                //allocating the array padded to 32 bytes like the compiler does now\n\n                mstore(0x40, and(add(mc, 31), not(31)))\n\n            }\n\n            //if we want a zero-length slice let's just return a zero-length array\n\n            default {\n\n                tempBytes := mload(0x40)\n\n\n\n                mstore(0x40, add(tempBytes, 0x20))\n\n            }\n\n        }\n\n\n\n        return tempBytes;\n",
          "message": "Utils.slice uses assembly (LockProxy.sol#781-845)\n\t- LockProxy.sol#794-842\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 892,
          "vulnerability_to_line": 905,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        // This method relies in extcodesize, which returns 0 for contracts in\n\n        // construction, since the code is only stored at the end of the\n\n        // constructor execution.\n\n\n\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n\n        // for accounts without code, i.e. `keccak256('')`\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
          "message": "Utils.isContract uses assembly (LockProxy.sol#892-905)\n\t- LockProxy.sol#903\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": 64,
          "vulnerability_code": "    function owner() public view returns (address) {\n\n        return _owner;\n",
          "message": "Ownable.owner (LockProxy.sol#62-64) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": 91,
          "vulnerability_code": "    function renounceOwnership() public onlyOwner {\n\n        emit OwnershipTransferred(_owner, address(0));\n\n        _owner = address(0);\n",
          "message": "Ownable.renounceOwnership (LockProxy.sol#88-91) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": 99,
          "vulnerability_code": "    function transferOwnership(address newOwner) public  onlyOwner {\n\n        _transferOwnership(newOwner);\n",
          "message": "Ownable.transferOwnership (LockProxy.sol#97-99) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1279,
          "vulnerability_to_line": 1282,
          "vulnerability_code": "    function setManagerProxy(address ethCCMProxyAddr) onlyOwner public {\n\n        managerProxyContract = ethCCMProxyAddr;\n\n        emit SetManagerProxyEvent(managerProxyContract);\n",
          "message": "LockProxy.setManagerProxy (LockProxy.sol#1279-1282) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1284,
          "vulnerability_to_line": 1288,
          "vulnerability_code": "    function bindProxyHash(uint64 toChainId, bytes memory targetProxyHash) onlyOwner public returns (bool) {\n\n        proxyHashMap[toChainId] = targetProxyHash;\n\n        emit BindProxyEvent(toChainId, targetProxyHash);\n\n        return true;\n",
          "message": "LockProxy.bindProxyHash (LockProxy.sol#1284-1288) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1290,
          "vulnerability_to_line": 1294,
          "vulnerability_code": "    function bindAssetHash(address fromAssetHash, uint64 toChainId, bytes memory toAssetHash) onlyOwner public returns (bool) {\n\n        assetHashMap[fromAssetHash][toChainId] = toAssetHash;\n\n        emit BindAssetEvent(fromAssetHash, toChainId, toAssetHash, getBalanceFor(fromAssetHash));\n\n        return true;\n",
          "message": "LockProxy.bindAssetHash (LockProxy.sol#1290-1294) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1305,
          "vulnerability_to_line": 1333,
          "vulnerability_code": "    function lock(address fromAssetHash, uint64 toChainId, bytes memory toAddress, uint256 amount) public payable returns (bool) {\n\n        require(amount != 0, \"amount cannot be zero!\");\n\n        \n\n        \n\n        require(_transferToContract(fromAssetHash, amount), \"transfer asset from fromAddress to lock_proxy contract  failed!\");\n\n        \n\n        bytes memory toAssetHash = assetHashMap[fromAssetHash][toChainId];\n\n        require(toAssetHash.length != 0, \"empty illegal toAssetHash\");\n\n\n\n        TxArgs memory txArgs = TxArgs({\n\n            toAssetHash: toAssetHash,\n\n            toAddress: toAddress,\n\n            amount: amount\n\n        });\n\n        bytes memory txData = _serializeTxArgs(txArgs);\n\n        \n\n        IEthCrossChainManagerProxy eccmp = IEthCrossChainManagerProxy(managerProxyContract);\n\n        address eccmAddr = eccmp.getEthCrossChainManager();\n\n        IEthCrossChainManager eccm = IEthCrossChainManager(eccmAddr);\n\n        \n\n        bytes memory toProxyHash = proxyHashMap[toChainId];\n\n        require(toProxyHash.length != 0, \"empty illegal toProxyHash\");\n\n        require(eccm.crossChain(toChainId, toProxyHash, \"unlock\", txData), \"EthCrossChainManager crossChain executed error!\");\n\n\n\n        emit LockEvent(fromAssetHash, _msgSender(), toChainId, toAssetHash, toAddress, amount);\n\n        \n\n        return true;\n\n\n",
          "message": "LockProxy.lock (LockProxy.sol#1305-1333) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1343,
          "vulnerability_to_line": 1360,
          "vulnerability_code": "    function unlock(bytes memory argsBs, bytes memory fromContractAddr, uint64 fromChainId) onlyManagerContract public returns (bool) {\n\n        TxArgs memory args = _deserializeTxArgs(argsBs);\n\n\n\n        require(fromContractAddr.length != 0, \"from proxy contract address cannot be empty\");\n\n        require(Utils.equalStorage(proxyHashMap[fromChainId], fromContractAddr), \"From Proxy contract address error!\");\n\n        \n\n        require(args.toAssetHash.length != 0, \"toAssetHash cannot be empty\");\n\n        address toAssetHash = Utils.bytesToAddress(args.toAssetHash);\n\n\n\n        require(args.toAddress.length != 0, \"toAddress cannot be empty\");\n\n        address toAddress = Utils.bytesToAddress(args.toAddress);\n\n        \n\n        \n\n        require(_transferFromContract(toAssetHash, toAddress, args.amount), \"transfer asset from lock_proxy contract to toAddress failed!\");\n\n        \n\n        emit UnlockEvent(toAssetHash, toAddress, args.amount);\n\n        return true;\n",
          "message": "LockProxy.unlock (LockProxy.sol#1343-1360) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": "Detected issues with version pragma in LockProxy.sol:\n\t- pragma solidity^0.5.0 (LockProxy.sol#3): it allows old versions\n\t- pragma solidity^0.5.0 (LockProxy.sol#34): it allows old versions\n\t- pragma solidity^0.5.0 (LockProxy.sol#113): it allows old versions\n\t- pragma solidity^0.5.0 (LockProxy.sol#409): it allows old versions\n\t- pragma solidity^0.5.0 (LockProxy.sol#597): it allows old versions\n\t- pragma solidity^0.5.0 (LockProxy.sol#910): it allows old versions\n\t- pragma solidity^0.5.0 (LockProxy.sol#989): it allows old versions\n\t- pragma solidity^0.5.0 (LockProxy.sol#1148): it allows old versions\n\t- pragma solidity^0.5.0 (LockProxy.sol#1223): it allows old versions\n\t- pragma solidity^0.5.0 (LockProxy.sol#1234): it allows old versions\n\t- pragma solidity^0.5.0 (LockProxy.sol#1245): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 1199,
          "vulnerability_to_line": 1218,
          "vulnerability_code": "    function callOptionalReturn(IERC20 token, bytes memory data) private {\n\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n\n        // we're implementing it ourselves.\n\n\n\n        // A Solidity high level call has three parts:\n\n        //  1. The target address is checked to verify it contains contract code\n\n        //  2. The call itself is made, and success asserted\n\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n\n        // solhint-disable-next-line max-line-length\n\n        require(Utils.isContract(address(token)), \"SafeERC20: call to non-contract\");\n\n\n\n        // solhint-disable-next-line avoid-low-level-calls\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n\n        require(success, \"SafeERC20: low-level call failed\");\n\n\n\n        if (returndata.length > 0) { // Return data is optional\n\n            // solhint-disable-next-line max-line-length\n\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n\n        }\n",
          "message": "Low level call in SafeERC20.callOptionalReturn (LockProxy.sol#1199-1218):\n\t-(success,returndata) = address(token).call(data) LockProxy.sol#1211\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": 24,
          "vulnerability_code": "    function _msgSender() internal view returns (address payable) {\n\n        return msg.sender;\n",
          "message": "Function 'Context._msgSender' (LockProxy.sol#22-24) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": 29,
          "vulnerability_code": "    function _msgData() internal view returns (bytes memory) {\n\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n\n        return msg.data;\n",
          "message": "Function 'Context._msgData' (LockProxy.sol#26-29) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": 108,
          "vulnerability_code": "    function _transferOwnership(address newOwner) internal {\n\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n\n        emit OwnershipTransferred(_owner, newOwner);\n\n        _owner = newOwner;\n",
          "message": "Function 'Ownable._transferOwnership' (LockProxy.sol#104-108) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": 151,
          "vulnerability_code": "    function NextBool(bytes memory buff, uint256 offset) internal pure returns(bool, uint256) {\n\n        require(offset + 1 <= buff.length && offset < offset + 1, \"Offset exceeds limit\");\n\n        // byte === bytes1\n\n        byte v;\n\n        assembly{\n\n            v := mload(add(add(buff, 0x20), offset))\n\n        }\n\n        bool value;\n\n        if (v == 0x01) {\n\n\t\t    value = true;\n\n    \t} else if (v == 0x00) {\n\n            value = false;\n\n        } else {\n\n            revert(\"NextBool value error\");\n\n        }\n\n        return (value, offset + 1);\n",
          "message": "Function 'ZeroCopySource.NextBool' (LockProxy.sol#135-151) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": 165,
          "vulnerability_code": "    function NextByte(bytes memory buff, uint256 offset) internal pure returns (byte, uint256) {\n\n        require(offset + 1 <= buff.length && offset < offset + 1, \"NextByte, Offset exceeds maximum\");\n\n        byte v;\n\n        assembly{\n\n            v := mload(add(add(buff, 0x20), offset))\n\n        }\n\n        return (v, offset + 1);\n",
          "message": "Function 'ZeroCopySource.NextByte' (LockProxy.sol#158-165) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": 183,
          "vulnerability_code": "    function NextUint8(bytes memory buff, uint256 offset) internal pure returns (uint8, uint256) {\n\n        require(offset + 1 <= buff.length && offset < offset + 1, \"NextUint8, Offset exceeds maximum\");\n\n        uint8 v;\n\n        assembly{\n\n            let tmpbytes := mload(0x40)\n\n            let bvalue := mload(add(add(buff, 0x20), offset))\n\n            mstore8(tmpbytes, byte(0, bvalue))\n\n            mstore(0x40, add(tmpbytes, 0x01))\n\n            v := mload(sub(tmpbytes, 0x1f))\n\n        }\n\n        return (v, offset + 1);\n",
          "message": "Function 'ZeroCopySource.NextUint8' (LockProxy.sol#172-183) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": 203,
          "vulnerability_code": "    function NextUint16(bytes memory buff, uint256 offset) internal pure returns (uint16, uint256) {\n\n        require(offset + 2 <= buff.length && offset < offset + 2, \"NextUint16, offset exceeds maximum\");\n\n        \n\n        uint16 v;\n\n        assembly {\n\n            let tmpbytes := mload(0x40)\n\n            let bvalue := mload(add(add(buff, 0x20), offset))\n\n            mstore8(tmpbytes, byte(0x01, bvalue))\n\n            mstore8(add(tmpbytes, 0x01), byte(0, bvalue))\n\n            mstore(0x40, add(tmpbytes, 0x02))\n\n            v := mload(sub(tmpbytes, 0x1e))\n\n        }\n\n        return (v, offset + 2);\n",
          "message": "Function 'ZeroCopySource.NextUint16' (LockProxy.sol#190-203) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": 231,
          "vulnerability_code": "    function NextUint32(bytes memory buff, uint256 offset) internal pure returns (uint32, uint256) {\n\n        require(offset + 4 <= buff.length && offset < offset + 4, \"NextUint32, offset exceeds maximum\");\n\n        uint32 v;\n\n        assembly {\n\n            let tmpbytes := mload(0x40)\n\n            let byteLen := 0x04\n\n            for {\n\n                let tindex := 0x00\n\n                let bindex := sub(byteLen, 0x01)\n\n                let bvalue := mload(add(add(buff, 0x20), offset))\n\n            } lt(tindex, byteLen) {\n\n                tindex := add(tindex, 0x01)\n\n                bindex := sub(bindex, 0x01)\n\n            }{\n\n                mstore8(add(tmpbytes, tindex), byte(bindex, bvalue))\n\n            }\n\n            mstore(0x40, add(tmpbytes, byteLen))\n\n            v := mload(sub(tmpbytes, sub(0x20, byteLen)))\n\n        }\n\n        return (v, offset + 4);\n",
          "message": "Function 'ZeroCopySource.NextUint32' (LockProxy.sol#211-231) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 238,
          "vulnerability_to_line": 258,
          "vulnerability_code": "    function NextUint64(bytes memory buff, uint256 offset) internal pure returns (uint64, uint256) {\n\n        require(offset + 8 <= buff.length && offset < offset + 8, \"NextUint64, offset exceeds maximum\");\n\n        uint64 v;\n\n        assembly {\n\n            let tmpbytes := mload(0x40)\n\n            let byteLen := 0x08\n\n            for {\n\n                let tindex := 0x00\n\n                let bindex := sub(byteLen, 0x01)\n\n                let bvalue := mload(add(add(buff, 0x20), offset))\n\n            } lt(tindex, byteLen) {\n\n                tindex := add(tindex, 0x01)\n\n                bindex := sub(bindex, 0x01)\n\n            }{\n\n                mstore8(add(tmpbytes, tindex), byte(bindex, bvalue))\n\n            }\n\n            mstore(0x40, add(tmpbytes, byteLen))\n\n            v := mload(sub(tmpbytes, sub(0x20, byteLen)))\n\n        }\n\n        return (v, offset + 8);\n",
          "message": "Function 'ZeroCopySource.NextUint64' (LockProxy.sol#238-258) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 266,
          "vulnerability_to_line": 287,
          "vulnerability_code": "    function NextUint255(bytes memory buff, uint256 offset) internal pure returns (uint256, uint256) {\n\n        require(offset + 32 <= buff.length && offset < offset + 32, \"NextUint255, offset exceeds maximum\");\n\n        uint256 v;\n\n        assembly {\n\n            let tmpbytes := mload(0x40)\n\n            let byteLen := 0x20\n\n            for {\n\n                let tindex := 0x00\n\n                let bindex := sub(byteLen, 0x01)\n\n                let bvalue := mload(add(add(buff, 0x20), offset))\n\n            } lt(tindex, byteLen) {\n\n                tindex := add(tindex, 0x01)\n\n                bindex := sub(bindex, 0x01)\n\n            }{\n\n                mstore8(add(tmpbytes, tindex), byte(bindex, bvalue))\n\n            }\n\n            mstore(0x40, add(tmpbytes, byteLen))\n\n            v := mload(tmpbytes)\n\n        }\n\n        require(v <= 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, \"Value exceeds the range\");\n\n        return (v, offset + 32);\n",
          "message": "Function 'ZeroCopySource.NextUint255' (LockProxy.sol#266-287) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": 349,
          "vulnerability_code": "    function NextVarBytes(bytes memory buff, uint256 offset) internal pure returns(bytes memory, uint256) {\n\n        uint len;\n\n        (len, offset) = NextVarUint(buff, offset);\n\n        require(offset + len <= buff.length && offset < offset + len, \"NextVarBytes, offset exceeds maximum\");\n\n        bytes memory tempBytes;\n\n        assembly{\n\n            switch iszero(len)\n\n            case 0 {\n\n                // Get a location of some free memory and store it in tempBytes as\n\n                // Solidity does for memory variables.\n\n                tempBytes := mload(0x40)\n\n\n\n                // The first word of the slice result is potentially a partial\n\n                // word read from the original array. To read it, we calculate\n\n                // the length of that partial word and start copying that many\n\n                // bytes into the array. The first word we copy will start with\n\n                // data we don't care about, but the last `lengthmod` bytes will\n\n                // land at the beginning of the contents of the new array. When\n\n                // we're done copying, we overwrite the full first word with\n\n                // the actual length of the slice.\n\n                let lengthmod := and(len, 31)\n\n\n\n                // The multiplication in the next line is necessary\n\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\n\n                // the following copy loop was copying the origin's length\n\n                // and then ending prematurely not copying everything it should.\n\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n\n                let end := add(mc, len)\n\n\n\n                for {\n\n                    // The multiplication in the next line has the same exact purpose\n\n                    // as the one above.\n\n                    let cc := add(add(add(buff, lengthmod), mul(0x20, iszero(lengthmod))), offset)\n\n                } lt(mc, end) {\n\n                    mc := add(mc, 0x20)\n\n                    cc := add(cc, 0x20)\n\n                } {\n\n                    mstore(mc, mload(cc))\n\n                }\n\n\n\n                mstore(tempBytes, len)\n\n\n\n                //update free-memory pointer\n\n                //allocating the array padded to 32 bytes like the compiler does now\n\n                mstore(0x40, and(add(mc, 31), not(31)))\n\n            }\n\n            //if we want a zero-length slice let's just return a zero-length array\n\n            default {\n\n                tempBytes := mload(0x40)\n\n\n\n                mstore(0x40, add(tempBytes, 0x20))\n\n            }\n\n        }\n\n\n\n        return (tempBytes, offset + len);\n",
          "message": "Function 'ZeroCopySource.NextVarBytes' (LockProxy.sol#294-349) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 355,
          "vulnerability_to_line": 362,
          "vulnerability_code": "    function NextHash(bytes memory buff, uint256 offset) internal pure returns (bytes32 , uint256) {\n\n        require(offset + 32 <= buff.length && offset < offset + 32, \"NextHash, offset exceeds maximum\");\n\n        bytes32 v;\n\n        assembly {\n\n            v := mload(add(buff, add(offset, 0x20)))\n\n        }\n\n        return (v, offset + 32);\n",
          "message": "Function 'ZeroCopySource.NextHash' (LockProxy.sol#355-362) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 369,
          "vulnerability_to_line": 376,
          "vulnerability_code": "    function NextBytes20(bytes memory buff, uint256 offset) internal pure returns (bytes20 , uint256) {\n\n        require(offset + 20 <= buff.length && offset < offset + 20, \"NextBytes20, offset exceeds maximum\");\n\n        bytes20 v;\n\n        assembly {\n\n            v := mload(add(buff, add(offset, 0x20)))\n\n        }\n\n        return (v, offset + 20);\n",
          "message": "Function 'ZeroCopySource.NextBytes20' (LockProxy.sol#369-376) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 378,
          "vulnerability_to_line": 404,
          "vulnerability_code": "    function NextVarUint(bytes memory buff, uint256 offset) internal pure returns(uint, uint256) {\n\n        byte v;\n\n        (v, offset) = NextByte(buff, offset);\n\n\n\n        uint value;\n\n        if (v == 0xFD) {\n\n            // return NextUint16(buff, offset);\n\n            (value, offset) = NextUint16(buff, offset);\n\n            require(value >= 0xFD && value <= 0xFFFF, \"NextUint16, value outside range\");\n\n            return (value, offset);\n\n        } else if (v == 0xFE) {\n\n            // return NextUint32(buff, offset);\n\n            (value, offset) = NextUint32(buff, offset);\n\n            require(value > 0xFFFF && value <= 0xFFFFFFFF, \"NextVarUint, value outside range\");\n\n            return (value, offset);\n\n        } else if (v == 0xFF) {\n\n            // return NextUint64(buff, offset);\n\n            (value, offset) = NextUint64(buff, offset);\n\n            require(value > 0xFFFFFFFF, \"NextVarUint, value outside range\");\n\n            return (value, offset);\n\n        } else{\n\n            // return (uint8(v), offset);\n\n            value = uint8(v);\n\n            require(value < 0xFD, \"NextVarUint, value outside range\");\n\n            return (value, offset);\n\n        }\n",
          "message": "Function 'ZeroCopySource.NextVarUint' (LockProxy.sol#378-404) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 430,
          "vulnerability_to_line": 447,
          "vulnerability_code": "    function WriteBool(bool b) internal pure returns (bytes memory) {\n\n        bytes memory buff;\n\n        assembly{\n\n            buff := mload(0x40)\n\n            mstore(buff, 1)\n\n            switch iszero(b)\n\n            case 1 {\n\n                mstore(add(buff, 0x20), shl(248, 0x00))\n\n                // mstore8(add(buff, 0x20), 0x00)\n\n            }\n\n            default {\n\n                mstore(add(buff, 0x20), shl(248, 0x01))\n\n                // mstore8(add(buff, 0x20), 0x01)\n\n            }\n\n            mstore(0x40, add(buff, 0x21))\n\n        }\n\n        return buff;\n",
          "message": "Function 'ZeroCopySink.WriteBool' (LockProxy.sol#430-447) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 453,
          "vulnerability_to_line": 455,
          "vulnerability_code": "    function WriteByte(byte b) internal pure returns (bytes memory) {\n\n        return WriteUint8(uint8(b));\n",
          "message": "Function 'ZeroCopySink.WriteByte' (LockProxy.sol#453-455) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 461,
          "vulnerability_to_line": 471,
          "vulnerability_code": "    function WriteUint8(uint8 v) internal pure returns (bytes memory) {\n\n        bytes memory buff;\n\n        assembly{\n\n            buff := mload(0x40)\n\n            mstore(buff, 1)\n\n            mstore(add(buff, 0x20), shl(248, v))\n\n            // mstore(add(buff, 0x20), byte(0x1f, v))\n\n            mstore(0x40, add(buff, 0x21))\n\n        }\n\n        return buff;\n",
          "message": "Function 'ZeroCopySink.WriteUint8' (LockProxy.sol#461-471) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 477,
          "vulnerability_to_line": 496,
          "vulnerability_code": "    function WriteUint16(uint16 v) internal pure returns (bytes memory) {\n\n        bytes memory buff;\n\n\n\n        assembly{\n\n            buff := mload(0x40)\n\n            let byteLen := 0x02\n\n            mstore(buff, byteLen)\n\n            for {\n\n                let mindex := 0x00\n\n                let vindex := 0x1f\n\n            } lt(mindex, byteLen) {\n\n                mindex := add(mindex, 0x01)\n\n                vindex := sub(vindex, 0x01)\n\n            }{\n\n                mstore8(add(add(buff, 0x20), mindex), byte(vindex, v))\n\n            }\n\n            mstore(0x40, add(buff, 0x22))\n\n        }\n\n        return buff;\n",
          "message": "Function 'ZeroCopySink.WriteUint16' (LockProxy.sol#477-496) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 502,
          "vulnerability_to_line": 520,
          "vulnerability_code": "    function WriteUint32(uint32 v) internal pure returns(bytes memory) {\n\n        bytes memory buff;\n\n        assembly{\n\n            buff := mload(0x40)\n\n            let byteLen := 0x04\n\n            mstore(buff, byteLen)\n\n            for {\n\n                let mindex := 0x00\n\n                let vindex := 0x1f\n\n            } lt(mindex, byteLen) {\n\n                mindex := add(mindex, 0x01)\n\n                vindex := sub(vindex, 0x01)\n\n            }{\n\n                mstore8(add(add(buff, 0x20), mindex), byte(vindex, v))\n\n            }\n\n            mstore(0x40, add(buff, 0x24))\n\n        }\n\n        return buff;\n",
          "message": "Function 'ZeroCopySink.WriteUint32' (LockProxy.sol#502-520) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 526,
          "vulnerability_to_line": 545,
          "vulnerability_code": "    function WriteUint64(uint64 v) internal pure returns(bytes memory) {\n\n        bytes memory buff;\n\n\n\n        assembly{\n\n            buff := mload(0x40)\n\n            let byteLen := 0x08\n\n            mstore(buff, byteLen)\n\n            for {\n\n                let mindex := 0x00\n\n                let vindex := 0x1f\n\n            } lt(mindex, byteLen) {\n\n                mindex := add(mindex, 0x01)\n\n                vindex := sub(vindex, 0x01)\n\n            }{\n\n                mstore8(add(add(buff, 0x20), mindex), byte(vindex, v))\n\n            }\n\n            mstore(0x40, add(buff, 0x28))\n\n        }\n\n        return buff;\n",
          "message": "Function 'ZeroCopySink.WriteUint64' (LockProxy.sol#526-545) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 551,
          "vulnerability_to_line": 571,
          "vulnerability_code": "    function WriteUint255(uint256 v) internal pure returns (bytes memory) {\n\n        require(v <= 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, \"Value exceeds uint255 range\");\n\n        bytes memory buff;\n\n\n\n        assembly{\n\n            buff := mload(0x40)\n\n            let byteLen := 0x20\n\n            mstore(buff, byteLen)\n\n            for {\n\n                let mindex := 0x00\n\n                let vindex := 0x1f\n\n            } lt(mindex, byteLen) {\n\n                mindex := add(mindex, 0x01)\n\n                vindex := sub(vindex, 0x01)\n\n            }{\n\n                mstore8(add(add(buff, 0x20), mindex), byte(vindex, v))\n\n            }\n\n            mstore(0x40, add(buff, 0x40))\n\n        }\n\n        return buff;\n",
          "message": "Function 'ZeroCopySink.WriteUint255' (LockProxy.sol#551-571) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 577,
          "vulnerability_to_line": 580,
          "vulnerability_code": "    function WriteVarBytes(bytes memory data) internal pure returns (bytes memory) {\n\n        uint64 l = uint64(data.length);\n\n        return abi.encodePacked(WriteVarUint(l), data);\n",
          "message": "Function 'ZeroCopySink.WriteVarBytes' (LockProxy.sol#577-580) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 582,
          "vulnerability_to_line": 592,
          "vulnerability_code": "    function WriteVarUint(uint64 v) internal pure returns (bytes memory) {\n\n        if (v < 0xFD){\n\n    \t\treturn WriteUint8(uint8(v));\n\n    \t} else if (v <= 0xFFFF) {\n\n    \t\treturn abi.encodePacked(WriteByte(0xFD), WriteUint16(uint16(v)));\n\n    \t} else if (v <= 0xFFFFFFFF) {\n\n            return abi.encodePacked(WriteByte(0xFE), WriteUint32(uint32(v)));\n\n    \t} else {\n\n    \t\treturn abi.encodePacked(WriteByte(0xFF), WriteUint64(uint64(v)));\n\n    \t}\n",
          "message": "Function 'ZeroCopySink.WriteVarUint' (LockProxy.sol#582-592) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 606,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function bytesToBytes32(bytes memory _bs) internal pure returns (bytes32 value) {\n",
          "message": "Parameter '_bs' of Utils.bytesToBytes32 (LockProxy.sol#606) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 618,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function bytesToUint256(bytes memory _bs) internal pure returns (uint256 value) {\n",
          "message": "Parameter '_bs' of Utils.bytesToUint256 (LockProxy.sol#618) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 631,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function uint256ToBytes(uint256 _value) internal pure returns (bytes memory bs) {\n",
          "message": "Parameter '_value' of Utils.uint256ToBytes (LockProxy.sol#631) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 650,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function bytesToAddress(bytes memory _bs) internal pure returns (address addr)\n",
          "message": "Parameter '_bs' of Utils.bytesToAddress (LockProxy.sol#650) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 683,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function hashLeaf(bytes memory _data) internal pure returns (bytes32 result)  {\n",
          "message": "Parameter '_data' of Utils.hashLeaf (LockProxy.sol#683) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 692,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function hashChildren(bytes32 _l, bytes32  _r) internal pure returns (bytes32 result)  {\n",
          "message": "Parameter '_l' of Utils.hashChildren (LockProxy.sol#692) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 692,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function hashChildren(bytes32 _l, bytes32  _r) internal pure returns (bytes32 result)  {\n",
          "message": "Parameter '_r' of Utils.hashChildren (LockProxy.sol#692) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 782,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _bytes,\n",
          "message": "Parameter '_bytes' of Utils.slice (LockProxy.sol#782) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 783,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _start,\n",
          "message": "Parameter '_start' of Utils.slice (LockProxy.sol#783) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 784,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _length\n",
          "message": "Parameter '_length' of Utils.slice (LockProxy.sol#784) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 852,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function containMAddresses(address[] memory _keepers, address[] memory _signers, uint _m) internal pure returns (bool){\n",
          "message": "Parameter '_keepers' of Utils.containMAddresses (LockProxy.sol#852) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 852,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function containMAddresses(address[] memory _keepers, address[] memory _signers, uint _m) internal pure returns (bool){\n",
          "message": "Parameter '_signers' of Utils.containMAddresses (LockProxy.sol#852) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 852,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function containMAddresses(address[] memory _keepers, address[] memory _signers, uint _m) internal pure returns (bool){\n",
          "message": "Parameter '_m' of Utils.containMAddresses (LockProxy.sol#852) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1372,
          "vulnerability_to_line": 1385,
          "vulnerability_code": "    function _transferToContract(address fromAssetHash, uint256 amount) internal returns (bool) {\n\n        if (fromAssetHash == address(0)) {\n\n            // fromAssetHash === address(0) denotes user choose to lock ether\n\n            // passively check if the received msg.value equals amount\n\n            require(msg.value != 0, \"transferred ether cannot be zero!\");\n\n            require(msg.value == amount, \"transferred ether is not equal to amount!\");\n\n        } else {\n\n            // make sure lockproxy contract will decline any received ether\n\n            require(msg.value == 0, \"there should be no ether transfer!\");\n\n            // actively transfer amount of asset from msg.sender to lock_proxy contract\n\n            require(_transferERC20ToContract(fromAssetHash, _msgSender(), address(this), amount), \"transfer erc20 asset to lock_proxy contract failed!\");\n\n        }\n\n        return true;\n",
          "message": "Function 'LockProxy._transferToContract' (LockProxy.sol#1372-1385) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1386,
          "vulnerability_to_line": 1396,
          "vulnerability_code": "    function _transferFromContract(address toAssetHash, address toAddress, uint256 amount) internal returns (bool) {\n\n        if (toAssetHash == address(0x0000000000000000000000000000000000000000)) {\n\n            // toAssetHash === address(0) denotes contract needs to unlock ether to toAddress\n\n            // convert toAddress from 'address' type to 'address payable' type, then actively transfer ether\n\n            address(uint160(toAddress)).transfer(amount);\n\n        } else {\n\n            // actively transfer amount of asset from msg.sender to lock_proxy contract \n\n            require(_transferERC20FromContract(toAssetHash, toAddress, amount), \"transfer erc20 asset to lock_proxy contract failed!\");\n\n        }\n\n        return true;\n",
          "message": "Function 'LockProxy._transferFromContract' (LockProxy.sol#1386-1396) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1399,
          "vulnerability_to_line": 1404,
          "vulnerability_code": "    function _transferERC20ToContract(address fromAssetHash, address fromAddress, address toAddress, uint256 amount) internal returns (bool) {\n\n         IERC20 erc20Token = IERC20(fromAssetHash);\n\n        //  require(erc20Token.transferFrom(fromAddress, toAddress, amount), \"trasnfer ERC20 Token failed!\");\n\n         erc20Token.safeTransferFrom(fromAddress, toAddress, amount);\n\n         return true;\n",
          "message": "Function 'LockProxy._transferERC20ToContract' (LockProxy.sol#1399-1404) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1405,
          "vulnerability_to_line": 1410,
          "vulnerability_code": "    function _transferERC20FromContract(address toAssetHash, address toAddress, uint256 amount) internal returns (bool) {\n\n         IERC20 erc20Token = IERC20(toAssetHash);\n\n        //  require(erc20Token.transfer(toAddress, amount), \"trasnfer ERC20 Token failed!\");\n\n         erc20Token.safeTransfer(toAddress, amount);\n\n         return true;\n",
          "message": "Function 'LockProxy._transferERC20FromContract' (LockProxy.sol#1405-1410) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1412,
          "vulnerability_to_line": 1420,
          "vulnerability_code": "    function _serializeTxArgs(TxArgs memory args) internal pure returns (bytes memory) {\n\n        bytes memory buff;\n\n        buff = abi.encodePacked(\n\n            ZeroCopySink.WriteVarBytes(args.toAssetHash),\n\n            ZeroCopySink.WriteVarBytes(args.toAddress),\n\n            ZeroCopySink.WriteUint255(args.amount)\n\n            );\n\n        return buff;\n",
          "message": "Function 'LockProxy._serializeTxArgs' (LockProxy.sol#1412-1420) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1422,
          "vulnerability_to_line": 1429,
          "vulnerability_code": "    function _deserializeTxArgs(bytes memory valueBs) internal pure returns (TxArgs memory) {\n\n        TxArgs memory args;\n\n        uint256 off = 0;\n\n        (args.toAssetHash, off) = ZeroCopySource.NextVarBytes(valueBs, off);\n\n        (args.toAddress, off) = ZeroCopySource.NextVarBytes(valueBs, off);\n\n        (args.amount, off) = ZeroCopySource.NextUint255(valueBs, off);\n\n        return args;\n",
          "message": "Function 'LockProxy._deserializeTxArgs' (LockProxy.sol#1422-1429) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 1265,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => bool) safeTransfer;\n",
          "message": "LockProxy.safeTransfer (LockProxy.sol#1265) is never used in LockProxy\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 1387,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (toAssetHash == address(0x0000000000000000000000000000000000000000)) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (v == 0x01) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 145,
          "vulnerability_to_line": null,
          "vulnerability_code": "    \t} else if (v == 0x00) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 383,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (v == 0xFD) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 386,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(value >= 0xFD && value <= 0xFFFF, \"NextUint16, value outside range\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 386,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(value >= 0xFD && value <= 0xFFFF, \"NextUint16, value outside range\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 388,
          "vulnerability_to_line": null,
          "vulnerability_code": "        } else if (v == 0xFE) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 391,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(value > 0xFFFF && value <= 0xFFFFFFFF, \"NextVarUint, value outside range\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 391,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(value > 0xFFFF && value <= 0xFFFFFFFF, \"NextVarUint, value outside range\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 393,
          "vulnerability_to_line": null,
          "vulnerability_code": "        } else if (v == 0xFF) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 396,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(value > 0xFFFFFFFF, \"NextVarUint, value outside range\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 401,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(value < 0xFD, \"NextVarUint, value outside range\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 583,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (v < 0xFD){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 585,
          "vulnerability_to_line": null,
          "vulnerability_code": "    \t} else if (v <= 0xFFFF) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 586,
          "vulnerability_to_line": null,
          "vulnerability_code": "    \t\treturn abi.encodePacked(WriteByte(0xFD), WriteUint16(uint16(v)));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 587,
          "vulnerability_to_line": null,
          "vulnerability_code": "    \t} else if (v <= 0xFFFFFFFF) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 588,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return abi.encodePacked(WriteByte(0xFE), WriteUint32(uint32(v)));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 590,
          "vulnerability_to_line": null,
          "vulnerability_code": "    \t\treturn abi.encodePacked(WriteByte(0xFF), WriteUint64(uint64(v)));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 693,
          "vulnerability_to_line": null,
          "vulnerability_code": "        result = sha256(abi.encodePacked(bytes1(0x01), _l, _r));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 873,
          "vulnerability_to_line": null,
          "vulnerability_code": "             newkey[2] = byte(0x02);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 875,
          "vulnerability_to_line": null,
          "vulnerability_code": "             newkey[2] = byte(0x03);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _owner = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 684,
          "vulnerability_to_line": null,
          "vulnerability_code": "        result = sha256(abi.encodePacked(byte(0x0), _data));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 854,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i = 0; i < _signers.length; i++){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 855,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint j = 0; j < _keepers.length; j++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 606,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function bytesToBytes32(bytes memory _bs) internal pure returns (bytes32 value) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 631,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function uint256ToBytes(uint256 _value) internal pure returns (bytes memory bs) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 650,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function bytesToAddress(bytes memory _bs) internal pure returns (address addr)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 665,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addressToBytes(address _addr) internal pure returns (bytes memory bs){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 854,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i = 0; i < _signers.length; i++){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 855,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint j = 0; j < _keepers.length; j++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_MSGVALUE_EQUALS_ZERO",
          "vulnerability_from_line": 1380,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(msg.value == 0, \"there should be no ether transfer!\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 1279,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setManagerProxy(address ethCCMProxyAddr) onlyOwner public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 409,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 597,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 910,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 989,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1148,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1223,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1234,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1245,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address private _owner;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 145,
          "vulnerability_to_line": null,
          "vulnerability_code": "    \t} else if (v == 0x00) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 1162,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 1254,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextBool(bytes memory buff, uint256 offset) internal pure returns(bool, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextByte(bytes memory buff, uint256 offset) internal pure returns (byte, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextUint8(bytes memory buff, uint256 offset) internal pure returns (uint8, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextUint16(bytes memory buff, uint256 offset) internal pure returns (uint16, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextUint32(bytes memory buff, uint256 offset) internal pure returns (uint32, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 238,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextUint64(bytes memory buff, uint256 offset) internal pure returns (uint64, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 266,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextUint255(bytes memory buff, uint256 offset) internal pure returns (uint256, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextVarBytes(bytes memory buff, uint256 offset) internal pure returns(bytes memory, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 355,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextHash(bytes memory buff, uint256 offset) internal pure returns (bytes32 , uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 369,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextBytes20(bytes memory buff, uint256 offset) internal pure returns (bytes20 , uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 430,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function WriteBool(bool b) internal pure returns (bytes memory) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 461,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function WriteUint8(uint8 v) internal pure returns (bytes memory) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 477,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function WriteUint16(uint16 v) internal pure returns (bytes memory) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 502,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function WriteUint32(uint32 v) internal pure returns(bytes memory) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 526,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function WriteUint64(uint64 v) internal pure returns(bytes memory) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 551,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function WriteUint255(uint256 v) internal pure returns (bytes memory) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 606,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function bytesToBytes32(bytes memory _bs) internal pure returns (bytes32 value) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 618,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function bytesToUint256(bytes memory _bs) internal pure returns (uint256 value) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 631,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function uint256ToBytes(uint256 _value) internal pure returns (bytes memory bs) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 650,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function bytesToAddress(bytes memory _bs) internal pure returns (address addr)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 665,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addressToBytes(address _addr) internal pure returns (bytes memory bs){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 781,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function slice(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 702,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 892,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextBool(bytes memory buff, uint256 offset) internal pure returns(bool, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextByte(bytes memory buff, uint256 offset) internal pure returns (byte, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextUint8(bytes memory buff, uint256 offset) internal pure returns (uint8, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextUint16(bytes memory buff, uint256 offset) internal pure returns (uint16, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextUint32(bytes memory buff, uint256 offset) internal pure returns (uint32, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 238,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextUint64(bytes memory buff, uint256 offset) internal pure returns (uint64, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 266,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextUint255(bytes memory buff, uint256 offset) internal pure returns (uint256, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextVarBytes(bytes memory buff, uint256 offset) internal pure returns(bytes memory, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 355,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextHash(bytes memory buff, uint256 offset) internal pure returns (bytes32 , uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 369,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextBytes20(bytes memory buff, uint256 offset) internal pure returns (bytes20 , uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 378,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextVarUint(bytes memory buff, uint256 offset) internal pure returns(uint, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 1165,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 1169,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 1180,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 1185,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 1190,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 1211,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, bytes memory returndata) = address(token).call(data);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 139,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly{\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 161,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly{\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 175,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly{\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 214,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 241,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 269,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 299,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly{\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 358,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 372,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 432,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly{\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 463,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly{\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 480,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly{\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 504,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly{\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 529,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly{\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 555,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly{\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 608,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 620,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 633,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 653,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 666,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 705,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 794,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 903,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly { codehash := extcodehash(account) }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1229,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function crossChain(uint64 _toChainId, bytes calldata _toContract, bytes calldata _method, bytes calldata _txData) external returns (bool);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1229,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function crossChain(uint64 _toChainId, bytes calldata _toContract, bytes calldata _method, bytes calldata _txData) external returns (bool);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1229,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function crossChain(uint64 _toChainId, bytes calldata _toContract, bytes calldata _method, bytes calldata _txData) external returns (bool);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1229,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function crossChain(uint64 _toChainId, bytes calldata _toContract, bytes calldata _method, bytes calldata _txData) external returns (bool);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1229,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function crossChain(uint64 _toChainId, bytes calldata _toContract, bytes calldata _method, bytes calldata _txData) external returns (bool);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1229,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function crossChain(uint64 _toChainId, bytes calldata _toContract, bytes calldata _method, bytes calldata _txData) external returns (bool);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1265,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => bool) safeTransfer;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}