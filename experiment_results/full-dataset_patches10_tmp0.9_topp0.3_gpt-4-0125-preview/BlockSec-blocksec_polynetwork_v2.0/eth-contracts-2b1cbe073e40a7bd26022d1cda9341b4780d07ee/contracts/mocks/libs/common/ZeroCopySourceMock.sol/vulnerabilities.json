{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 306,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i <= N; i++) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 306,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i <= N; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 1 <= buff.length && offset < offset + 1, \"Offset exceeds limit\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "            revert(\"NextBool value error\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 1 <= buff.length && offset < offset + 1, \"NextByte, Offset exceeds maximum\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 1 <= buff.length && offset < offset + 1, \"NextUint8, Offset exceeds maximum\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 2 <= buff.length && offset < offset + 2, \"NextUint16, offset exceeds maximum\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 4 <= buff.length && offset < offset + 4, \"NextUint32, offset exceeds maximum\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 8 <= buff.length && offset < offset + 8, \"NextUint64, offset exceeds maximum\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 32 <= buff.length && offset < offset + 32, \"NextUint255, offset exceeds maximum\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 175,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(v <= 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, \"Value exceeds the range\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 187,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + len <= buff.length && offset < offset + len, \"NextVarBytes, offset exceeds maximum\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 246,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 32 <= buff.length && offset < offset + 32, \"NextHash, offset exceeds maximum\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 260,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 20 <= buff.length && offset < offset + 20, \"NextBytes20, offset exceeds maximum\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 276,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(value >= 0xFD && value <= 0xFFFF, \"NextUint16, value outside range\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 281,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(value > 0xFFFF && value <= 0xFFFFFFFF, \"NextVarUint, value outside range\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 286,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(value > 0xFFFFFFFF, \"NextVarUint, value outside range\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 291,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(value < 0xFD, \"NextVarUint, value outside range\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 1 <= buff.length && offset < offset + 1, \"Offset exceeds limit\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 1 <= buff.length && offset < offset + 1, \"NextByte, Offset exceeds maximum\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 1 <= buff.length && offset < offset + 1, \"NextUint8, Offset exceeds maximum\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 2 <= buff.length && offset < offset + 2, \"NextUint16, offset exceeds maximum\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 4 <= buff.length && offset < offset + 4, \"NextUint32, offset exceeds maximum\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 8 <= buff.length && offset < offset + 8, \"NextUint64, offset exceeds maximum\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 32 <= buff.length && offset < offset + 32, \"NextUint255, offset exceeds maximum\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 187,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + len <= buff.length && offset < offset + len, \"NextVarBytes, offset exceeds maximum\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 246,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 32 <= buff.length && offset < offset + 32, \"NextHash, offset exceeds maximum\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 260,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 20 <= buff.length && offset < offset + 20, \"NextBytes20, offset exceeds maximum\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 276,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(value >= 0xFD && value <= 0xFFFF, \"NextUint16, value outside range\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 281,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(value > 0xFFFF && value <= 0xFFFFFFFF, \"NextVarUint, value outside range\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 306,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i <= N; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 1 <= buff.length && offset < offset + 1, \"NextUint8, Offset exceeds maximum\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 2 <= buff.length && offset < offset + 2, \"NextUint16, offset exceeds maximum\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 4 <= buff.length && offset < offset + 4, \"NextUint32, offset exceeds maximum\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 8 <= buff.length && offset < offset + 8, \"NextUint64, offset exceeds maximum\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 32 <= buff.length && offset < offset + 32, \"NextUint255, offset exceeds maximum\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 187,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + len <= buff.length && offset < offset + len, \"NextVarBytes, offset exceeds maximum\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 260,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(offset + 20 <= buff.length && offset < offset + 20, \"NextBytes20, offset exceeds maximum\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_78"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": 41,
          "vulnerability_code": "    function NextBool(bytes memory buff, uint256 offset) internal pure returns(bool, uint256) {\n\n        require(offset + 1 <= buff.length && offset < offset + 1, \"Offset exceeds limit\");\n\n        // byte === bytes1\n\n        byte v;\n\n        assembly{\n\n            v := mload(add(add(buff, 0x20), offset))\n\n        }\n\n        bool value;\n\n        if (v == 0x01) {\n\n\t\t    value = true;\n\n    \t} else if (v == 0x00) {\n\n            value = false;\n\n        } else {\n\n            revert(\"NextBool value error\");\n\n        }\n\n        return (value, offset + 1);\n",
          "message": "ZeroCopySource.NextBool (ZeroCopySourceMock.sol#25-41) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": 55,
          "vulnerability_code": "    function NextByte(bytes memory buff, uint256 offset) internal pure returns (byte, uint256) {\n\n        require(offset + 1 <= buff.length && offset < offset + 1, \"NextByte, Offset exceeds maximum\");\n\n        byte v;\n\n        assembly{\n\n            v := mload(add(add(buff, 0x20), offset))\n\n        }\n\n        return (v, offset + 1);\n",
          "message": "ZeroCopySource.NextByte (ZeroCopySourceMock.sol#48-55) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": 73,
          "vulnerability_code": "    function NextUint8(bytes memory buff, uint256 offset) internal pure returns (uint8, uint256) {\n\n        require(offset + 1 <= buff.length && offset < offset + 1, \"NextUint8, Offset exceeds maximum\");\n\n        uint8 v;\n\n        assembly{\n\n            let tmpbytes := mload(0x40)\n\n            let bvalue := mload(add(add(buff, 0x20), offset))\n\n            mstore8(tmpbytes, byte(0, bvalue))\n\n            mstore(0x40, add(tmpbytes, 0x01))\n\n            v := mload(sub(tmpbytes, 0x1f))\n\n        }\n\n        return (v, offset + 1);\n",
          "message": "ZeroCopySource.NextUint8 (ZeroCopySourceMock.sol#62-73) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": 93,
          "vulnerability_code": "    function NextUint16(bytes memory buff, uint256 offset) internal pure returns (uint16, uint256) {\n\n        require(offset + 2 <= buff.length && offset < offset + 2, \"NextUint16, offset exceeds maximum\");\n\n        \n\n        uint16 v;\n\n        assembly {\n\n            let tmpbytes := mload(0x40)\n\n            let bvalue := mload(add(add(buff, 0x20), offset))\n\n            mstore8(tmpbytes, byte(0x01, bvalue))\n\n            mstore8(add(tmpbytes, 0x01), byte(0, bvalue))\n\n            mstore(0x40, add(tmpbytes, 0x02))\n\n            v := mload(sub(tmpbytes, 0x1e))\n\n        }\n\n        return (v, offset + 2);\n",
          "message": "ZeroCopySource.NextUint16 (ZeroCopySourceMock.sol#80-93) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": 121,
          "vulnerability_code": "    function NextUint32(bytes memory buff, uint256 offset) internal pure returns (uint32, uint256) {\n\n        require(offset + 4 <= buff.length && offset < offset + 4, \"NextUint32, offset exceeds maximum\");\n\n        uint32 v;\n\n        assembly {\n\n            let tmpbytes := mload(0x40)\n\n            let byteLen := 0x04\n\n            for {\n\n                let tindex := 0x00\n\n                let bindex := sub(byteLen, 0x01)\n\n                let bvalue := mload(add(add(buff, 0x20), offset))\n\n            } lt(tindex, byteLen) {\n\n                tindex := add(tindex, 0x01)\n\n                bindex := sub(bindex, 0x01)\n\n            }{\n\n                mstore8(add(tmpbytes, tindex), byte(bindex, bvalue))\n\n            }\n\n            mstore(0x40, add(tmpbytes, byteLen))\n\n            v := mload(sub(tmpbytes, sub(0x20, byteLen)))\n\n        }\n\n        return (v, offset + 4);\n",
          "message": "ZeroCopySource.NextUint32 (ZeroCopySourceMock.sol#101-121) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": 148,
          "vulnerability_code": "    function NextUint64(bytes memory buff, uint256 offset) internal pure returns (uint64, uint256) {\n\n        require(offset + 8 <= buff.length && offset < offset + 8, \"NextUint64, offset exceeds maximum\");\n\n        uint64 v;\n\n        assembly {\n\n            let tmpbytes := mload(0x40)\n\n            let byteLen := 0x08\n\n            for {\n\n                let tindex := 0x00\n\n                let bindex := sub(byteLen, 0x01)\n\n                let bvalue := mload(add(add(buff, 0x20), offset))\n\n            } lt(tindex, byteLen) {\n\n                tindex := add(tindex, 0x01)\n\n                bindex := sub(bindex, 0x01)\n\n            }{\n\n                mstore8(add(tmpbytes, tindex), byte(bindex, bvalue))\n\n            }\n\n            mstore(0x40, add(tmpbytes, byteLen))\n\n            v := mload(sub(tmpbytes, sub(0x20, byteLen)))\n\n        }\n\n        return (v, offset + 8);\n",
          "message": "ZeroCopySource.NextUint64 (ZeroCopySourceMock.sol#128-148) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 156,
          "vulnerability_to_line": 177,
          "vulnerability_code": "    function NextUint255(bytes memory buff, uint256 offset) internal pure returns (uint256, uint256) {\n\n        require(offset + 32 <= buff.length && offset < offset + 32, \"NextUint255, offset exceeds maximum\");\n\n        uint256 v;\n\n        assembly {\n\n            let tmpbytes := mload(0x40)\n\n            let byteLen := 0x20\n\n            for {\n\n                let tindex := 0x00\n\n                let bindex := sub(byteLen, 0x01)\n\n                let bvalue := mload(add(add(buff, 0x20), offset))\n\n            } lt(tindex, byteLen) {\n\n                tindex := add(tindex, 0x01)\n\n                bindex := sub(bindex, 0x01)\n\n            }{\n\n                mstore8(add(tmpbytes, tindex), byte(bindex, bvalue))\n\n            }\n\n            mstore(0x40, add(tmpbytes, byteLen))\n\n            v := mload(tmpbytes)\n\n        }\n\n        require(v <= 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, \"Value exceeds the range\");\n\n        return (v, offset + 32);\n",
          "message": "ZeroCopySource.NextUint255 (ZeroCopySourceMock.sol#156-177) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 184,
          "vulnerability_to_line": 239,
          "vulnerability_code": "    function NextVarBytes(bytes memory buff, uint256 offset) internal pure returns(bytes memory, uint256) {\n\n        uint len;\n\n        (len, offset) = NextVarUint(buff, offset);\n\n        require(offset + len <= buff.length && offset < offset + len, \"NextVarBytes, offset exceeds maximum\");\n\n        bytes memory tempBytes;\n\n        assembly{\n\n            switch iszero(len)\n\n            case 0 {\n\n                // Get a location of some free memory and store it in tempBytes as\n\n                // Solidity does for memory variables.\n\n                tempBytes := mload(0x40)\n\n\n\n                // The first word of the slice result is potentially a partial\n\n                // word read from the original array. To read it, we calculate\n\n                // the length of that partial word and start copying that many\n\n                // bytes into the array. The first word we copy will start with\n\n                // data we don't care about, but the last `lengthmod` bytes will\n\n                // land at the beginning of the contents of the new array. When\n\n                // we're done copying, we overwrite the full first word with\n\n                // the actual length of the slice.\n\n                let lengthmod := and(len, 31)\n\n\n\n                // The multiplication in the next line is necessary\n\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\n\n                // the following copy loop was copying the origin's length\n\n                // and then ending prematurely not copying everything it should.\n\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n\n                let end := add(mc, len)\n\n\n\n                for {\n\n                    // The multiplication in the next line has the same exact purpose\n\n                    // as the one above.\n\n                    let cc := add(add(add(buff, lengthmod), mul(0x20, iszero(lengthmod))), offset)\n\n                } lt(mc, end) {\n\n                    mc := add(mc, 0x20)\n\n                    cc := add(cc, 0x20)\n\n                } {\n\n                    mstore(mc, mload(cc))\n\n                }\n\n\n\n                mstore(tempBytes, len)\n\n\n\n                //update free-memory pointer\n\n                //allocating the array padded to 32 bytes like the compiler does now\n\n                mstore(0x40, and(add(mc, 31), not(31)))\n\n            }\n\n            //if we want a zero-length slice let's just return a zero-length array\n\n            default {\n\n                tempBytes := mload(0x40)\n\n\n\n                mstore(0x40, add(tempBytes, 0x20))\n\n            }\n\n        }\n\n\n\n        return (tempBytes, offset + len);\n",
          "message": "ZeroCopySource.NextVarBytes (ZeroCopySourceMock.sol#184-239) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 245,
          "vulnerability_to_line": 252,
          "vulnerability_code": "    function NextHash(bytes memory buff, uint256 offset) internal pure returns (bytes32 , uint256) {\n\n        require(offset + 32 <= buff.length && offset < offset + 32, \"NextHash, offset exceeds maximum\");\n\n        bytes32 v;\n\n        assembly {\n\n            v := mload(add(buff, add(offset, 0x20)))\n\n        }\n\n        return (v, offset + 32);\n",
          "message": "ZeroCopySource.NextHash (ZeroCopySourceMock.sol#245-252) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 259,
          "vulnerability_to_line": 266,
          "vulnerability_code": "    function NextBytes20(bytes memory buff, uint256 offset) internal pure returns (bytes20 , uint256) {\n\n        require(offset + 20 <= buff.length && offset < offset + 20, \"NextBytes20, offset exceeds maximum\");\n\n        bytes20 v;\n\n        assembly {\n\n            v := mload(add(buff, add(offset, 0x20)))\n\n        }\n\n        return (v, offset + 20);\n",
          "message": "ZeroCopySource.NextBytes20 (ZeroCopySourceMock.sol#259-266) is declared view but contains assembly code\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": 41,
          "vulnerability_code": "    function NextBool(bytes memory buff, uint256 offset) internal pure returns(bool, uint256) {\n\n        require(offset + 1 <= buff.length && offset < offset + 1, \"Offset exceeds limit\");\n\n        // byte === bytes1\n\n        byte v;\n\n        assembly{\n\n            v := mload(add(add(buff, 0x20), offset))\n\n        }\n\n        bool value;\n\n        if (v == 0x01) {\n\n\t\t    value = true;\n\n    \t} else if (v == 0x00) {\n\n            value = false;\n\n        } else {\n\n            revert(\"NextBool value error\");\n\n        }\n\n        return (value, offset + 1);\n",
          "message": "ZeroCopySource.NextBool uses assembly (ZeroCopySourceMock.sol#25-41)\n\t- ZeroCopySourceMock.sol#29-31\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": 55,
          "vulnerability_code": "    function NextByte(bytes memory buff, uint256 offset) internal pure returns (byte, uint256) {\n\n        require(offset + 1 <= buff.length && offset < offset + 1, \"NextByte, Offset exceeds maximum\");\n\n        byte v;\n\n        assembly{\n\n            v := mload(add(add(buff, 0x20), offset))\n\n        }\n\n        return (v, offset + 1);\n",
          "message": "ZeroCopySource.NextByte uses assembly (ZeroCopySourceMock.sol#48-55)\n\t- ZeroCopySourceMock.sol#51-53\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": 73,
          "vulnerability_code": "    function NextUint8(bytes memory buff, uint256 offset) internal pure returns (uint8, uint256) {\n\n        require(offset + 1 <= buff.length && offset < offset + 1, \"NextUint8, Offset exceeds maximum\");\n\n        uint8 v;\n\n        assembly{\n\n            let tmpbytes := mload(0x40)\n\n            let bvalue := mload(add(add(buff, 0x20), offset))\n\n            mstore8(tmpbytes, byte(0, bvalue))\n\n            mstore(0x40, add(tmpbytes, 0x01))\n\n            v := mload(sub(tmpbytes, 0x1f))\n\n        }\n\n        return (v, offset + 1);\n",
          "message": "ZeroCopySource.NextUint8 uses assembly (ZeroCopySourceMock.sol#62-73)\n\t- ZeroCopySourceMock.sol#65-71\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": 93,
          "vulnerability_code": "    function NextUint16(bytes memory buff, uint256 offset) internal pure returns (uint16, uint256) {\n\n        require(offset + 2 <= buff.length && offset < offset + 2, \"NextUint16, offset exceeds maximum\");\n\n        \n\n        uint16 v;\n\n        assembly {\n\n            let tmpbytes := mload(0x40)\n\n            let bvalue := mload(add(add(buff, 0x20), offset))\n\n            mstore8(tmpbytes, byte(0x01, bvalue))\n\n            mstore8(add(tmpbytes, 0x01), byte(0, bvalue))\n\n            mstore(0x40, add(tmpbytes, 0x02))\n\n            v := mload(sub(tmpbytes, 0x1e))\n\n        }\n\n        return (v, offset + 2);\n",
          "message": "ZeroCopySource.NextUint16 uses assembly (ZeroCopySourceMock.sol#80-93)\n\t- ZeroCopySourceMock.sol#84-91\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": 121,
          "vulnerability_code": "    function NextUint32(bytes memory buff, uint256 offset) internal pure returns (uint32, uint256) {\n\n        require(offset + 4 <= buff.length && offset < offset + 4, \"NextUint32, offset exceeds maximum\");\n\n        uint32 v;\n\n        assembly {\n\n            let tmpbytes := mload(0x40)\n\n            let byteLen := 0x04\n\n            for {\n\n                let tindex := 0x00\n\n                let bindex := sub(byteLen, 0x01)\n\n                let bvalue := mload(add(add(buff, 0x20), offset))\n\n            } lt(tindex, byteLen) {\n\n                tindex := add(tindex, 0x01)\n\n                bindex := sub(bindex, 0x01)\n\n            }{\n\n                mstore8(add(tmpbytes, tindex), byte(bindex, bvalue))\n\n            }\n\n            mstore(0x40, add(tmpbytes, byteLen))\n\n            v := mload(sub(tmpbytes, sub(0x20, byteLen)))\n\n        }\n\n        return (v, offset + 4);\n",
          "message": "ZeroCopySource.NextUint32 uses assembly (ZeroCopySourceMock.sol#101-121)\n\t- ZeroCopySourceMock.sol#104-119\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": 148,
          "vulnerability_code": "    function NextUint64(bytes memory buff, uint256 offset) internal pure returns (uint64, uint256) {\n\n        require(offset + 8 <= buff.length && offset < offset + 8, \"NextUint64, offset exceeds maximum\");\n\n        uint64 v;\n\n        assembly {\n\n            let tmpbytes := mload(0x40)\n\n            let byteLen := 0x08\n\n            for {\n\n                let tindex := 0x00\n\n                let bindex := sub(byteLen, 0x01)\n\n                let bvalue := mload(add(add(buff, 0x20), offset))\n\n            } lt(tindex, byteLen) {\n\n                tindex := add(tindex, 0x01)\n\n                bindex := sub(bindex, 0x01)\n\n            }{\n\n                mstore8(add(tmpbytes, tindex), byte(bindex, bvalue))\n\n            }\n\n            mstore(0x40, add(tmpbytes, byteLen))\n\n            v := mload(sub(tmpbytes, sub(0x20, byteLen)))\n\n        }\n\n        return (v, offset + 8);\n",
          "message": "ZeroCopySource.NextUint64 uses assembly (ZeroCopySourceMock.sol#128-148)\n\t- ZeroCopySourceMock.sol#131-146\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 156,
          "vulnerability_to_line": 177,
          "vulnerability_code": "    function NextUint255(bytes memory buff, uint256 offset) internal pure returns (uint256, uint256) {\n\n        require(offset + 32 <= buff.length && offset < offset + 32, \"NextUint255, offset exceeds maximum\");\n\n        uint256 v;\n\n        assembly {\n\n            let tmpbytes := mload(0x40)\n\n            let byteLen := 0x20\n\n            for {\n\n                let tindex := 0x00\n\n                let bindex := sub(byteLen, 0x01)\n\n                let bvalue := mload(add(add(buff, 0x20), offset))\n\n            } lt(tindex, byteLen) {\n\n                tindex := add(tindex, 0x01)\n\n                bindex := sub(bindex, 0x01)\n\n            }{\n\n                mstore8(add(tmpbytes, tindex), byte(bindex, bvalue))\n\n            }\n\n            mstore(0x40, add(tmpbytes, byteLen))\n\n            v := mload(tmpbytes)\n\n        }\n\n        require(v <= 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, \"Value exceeds the range\");\n\n        return (v, offset + 32);\n",
          "message": "ZeroCopySource.NextUint255 uses assembly (ZeroCopySourceMock.sol#156-177)\n\t- ZeroCopySourceMock.sol#159-174\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 184,
          "vulnerability_to_line": 239,
          "vulnerability_code": "    function NextVarBytes(bytes memory buff, uint256 offset) internal pure returns(bytes memory, uint256) {\n\n        uint len;\n\n        (len, offset) = NextVarUint(buff, offset);\n\n        require(offset + len <= buff.length && offset < offset + len, \"NextVarBytes, offset exceeds maximum\");\n\n        bytes memory tempBytes;\n\n        assembly{\n\n            switch iszero(len)\n\n            case 0 {\n\n                // Get a location of some free memory and store it in tempBytes as\n\n                // Solidity does for memory variables.\n\n                tempBytes := mload(0x40)\n\n\n\n                // The first word of the slice result is potentially a partial\n\n                // word read from the original array. To read it, we calculate\n\n                // the length of that partial word and start copying that many\n\n                // bytes into the array. The first word we copy will start with\n\n                // data we don't care about, but the last `lengthmod` bytes will\n\n                // land at the beginning of the contents of the new array. When\n\n                // we're done copying, we overwrite the full first word with\n\n                // the actual length of the slice.\n\n                let lengthmod := and(len, 31)\n\n\n\n                // The multiplication in the next line is necessary\n\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\n\n                // the following copy loop was copying the origin's length\n\n                // and then ending prematurely not copying everything it should.\n\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n\n                let end := add(mc, len)\n\n\n\n                for {\n\n                    // The multiplication in the next line has the same exact purpose\n\n                    // as the one above.\n\n                    let cc := add(add(add(buff, lengthmod), mul(0x20, iszero(lengthmod))), offset)\n\n                } lt(mc, end) {\n\n                    mc := add(mc, 0x20)\n\n                    cc := add(cc, 0x20)\n\n                } {\n\n                    mstore(mc, mload(cc))\n\n                }\n\n\n\n                mstore(tempBytes, len)\n\n\n\n                //update free-memory pointer\n\n                //allocating the array padded to 32 bytes like the compiler does now\n\n                mstore(0x40, and(add(mc, 31), not(31)))\n\n            }\n\n            //if we want a zero-length slice let's just return a zero-length array\n\n            default {\n\n                tempBytes := mload(0x40)\n\n\n\n                mstore(0x40, add(tempBytes, 0x20))\n\n            }\n\n        }\n\n\n\n        return (tempBytes, offset + len);\n",
          "message": "ZeroCopySource.NextVarBytes uses assembly (ZeroCopySourceMock.sol#184-239)\n\t- ZeroCopySourceMock.sol#189-236\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 245,
          "vulnerability_to_line": 252,
          "vulnerability_code": "    function NextHash(bytes memory buff, uint256 offset) internal pure returns (bytes32 , uint256) {\n\n        require(offset + 32 <= buff.length && offset < offset + 32, \"NextHash, offset exceeds maximum\");\n\n        bytes32 v;\n\n        assembly {\n\n            v := mload(add(buff, add(offset, 0x20)))\n\n        }\n\n        return (v, offset + 32);\n",
          "message": "ZeroCopySource.NextHash uses assembly (ZeroCopySourceMock.sol#245-252)\n\t- ZeroCopySourceMock.sol#248-250\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 259,
          "vulnerability_to_line": 266,
          "vulnerability_code": "    function NextBytes20(bytes memory buff, uint256 offset) internal pure returns (bytes20 , uint256) {\n\n        require(offset + 20 <= buff.length && offset < offset + 20, \"NextBytes20, offset exceeds maximum\");\n\n        bytes20 v;\n\n        assembly {\n\n            v := mload(add(buff, add(offset, 0x20)))\n\n        }\n\n        return (v, offset + 20);\n",
          "message": "ZeroCopySource.NextBytes20 uses assembly (ZeroCopySourceMock.sol#259-266)\n\t- ZeroCopySourceMock.sol#262-264\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 302,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint N = 10;\n",
          "message": "ZeroCopySourceMock.N should be constant (ZeroCopySourceMock.sol#302)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 303,
          "vulnerability_to_line": 310,
          "vulnerability_code": "    function NextBool(bytes memory _b, uint256 _off) public returns (bool, uint256) {\n\n        bool res;\n\n        uint256 offset = 0;\n\n        for (uint i = 0; i <= N; i++) {\n\n            (res, offset) = ZeroCopySource.NextBool(_b, _off);\n\n        }\n\n        return ZeroCopySource.NextBool(_b, _off);\n",
          "message": "ZeroCopySourceMock.NextBool (ZeroCopySourceMock.sol#303-310) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 312,
          "vulnerability_to_line": 314,
          "vulnerability_code": "    function NextByte(bytes memory _b, uint256 _off) public returns (byte, uint256) {\n\n        return ZeroCopySource.NextByte(_b, _off);\n",
          "message": "ZeroCopySourceMock.NextByte (ZeroCopySourceMock.sol#312-314) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 316,
          "vulnerability_to_line": 318,
          "vulnerability_code": "    function NextUint8(bytes memory _b, uint256 _off) public returns (uint8, uint256) {\n\n        return ZeroCopySource.NextUint8(_b, _off);\n",
          "message": "ZeroCopySourceMock.NextUint8 (ZeroCopySourceMock.sol#316-318) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": 322,
          "vulnerability_code": "    function NextUint16(bytes memory _b, uint256 _off) public returns (uint16, uint256) {\n\n        return ZeroCopySource.NextUint16(_b, _off);\n",
          "message": "ZeroCopySourceMock.NextUint16 (ZeroCopySourceMock.sol#320-322) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 324,
          "vulnerability_to_line": 326,
          "vulnerability_code": "    function NextUint32(bytes memory _b, uint256 _off) public returns (uint32, uint256) {\n\n        return ZeroCopySource.NextUint32(_b, _off);\n",
          "message": "ZeroCopySourceMock.NextUint32 (ZeroCopySourceMock.sol#324-326) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 328,
          "vulnerability_to_line": 330,
          "vulnerability_code": "    function NextUint64(bytes memory _b, uint256 _off) public returns (uint64, uint256) {\n\n        return ZeroCopySource.NextUint64(_b, _off);\n",
          "message": "ZeroCopySourceMock.NextUint64 (ZeroCopySourceMock.sol#328-330) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": 334,
          "vulnerability_code": "    function NextVarBytes(bytes memory _b, uint256 _off) public returns (bytes memory, uint256) {\n\n        return ZeroCopySource.NextVarBytes(_b, _off);\n",
          "message": "ZeroCopySourceMock.NextVarBytes (ZeroCopySourceMock.sol#332-334) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 336,
          "vulnerability_to_line": 338,
          "vulnerability_code": "    function NextHash(bytes memory _b, uint256 _off) public returns (bytes32, uint256) {\n\n        return ZeroCopySource.NextHash(_b, _off);\n",
          "message": "ZeroCopySourceMock.NextHash (ZeroCopySourceMock.sol#336-338) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 344,
          "vulnerability_to_line": 346,
          "vulnerability_code": "    function NextBytes20(bytes memory _b, uint256 _off) public returns (bytes20, uint256) {\n\n        return ZeroCopySource.NextBytes20(_b, _off);\n",
          "message": "ZeroCopySourceMock.NextBytes20 (ZeroCopySourceMock.sol#344-346) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 348,
          "vulnerability_to_line": 350,
          "vulnerability_code": "    function NextUint255(bytes memory _b, uint256 _off) public returns (uint256, uint256) {\n\n        return ZeroCopySource.NextUint255(_b, _off);\n",
          "message": "ZeroCopySourceMock.NextUint255 (ZeroCopySourceMock.sol#348-350) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 351,
          "vulnerability_to_line": 353,
          "vulnerability_code": "    function NextVarUint(bytes memory _b, uint256 _off) public returns (uint, uint256) {\n\n        return ZeroCopySource.NextVarUint(_b, _off);\n",
          "message": "ZeroCopySourceMock.NextVarUint (ZeroCopySourceMock.sol#351-353) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": "Detected issues with version pragma in ZeroCopySourceMock.sol:\n\t- pragma solidity^0.5.0 (ZeroCopySourceMock.sol#3): it allows old versions\n\t- pragma solidity^0.5.0 (ZeroCopySourceMock.sol#299): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": 41,
          "vulnerability_code": "    function NextBool(bytes memory buff, uint256 offset) internal pure returns(bool, uint256) {\n\n        require(offset + 1 <= buff.length && offset < offset + 1, \"Offset exceeds limit\");\n\n        // byte === bytes1\n\n        byte v;\n\n        assembly{\n\n            v := mload(add(add(buff, 0x20), offset))\n\n        }\n\n        bool value;\n\n        if (v == 0x01) {\n\n\t\t    value = true;\n\n    \t} else if (v == 0x00) {\n\n            value = false;\n\n        } else {\n\n            revert(\"NextBool value error\");\n\n        }\n\n        return (value, offset + 1);\n",
          "message": "Function 'ZeroCopySource.NextBool' (ZeroCopySourceMock.sol#25-41) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": 55,
          "vulnerability_code": "    function NextByte(bytes memory buff, uint256 offset) internal pure returns (byte, uint256) {\n\n        require(offset + 1 <= buff.length && offset < offset + 1, \"NextByte, Offset exceeds maximum\");\n\n        byte v;\n\n        assembly{\n\n            v := mload(add(add(buff, 0x20), offset))\n\n        }\n\n        return (v, offset + 1);\n",
          "message": "Function 'ZeroCopySource.NextByte' (ZeroCopySourceMock.sol#48-55) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": 73,
          "vulnerability_code": "    function NextUint8(bytes memory buff, uint256 offset) internal pure returns (uint8, uint256) {\n\n        require(offset + 1 <= buff.length && offset < offset + 1, \"NextUint8, Offset exceeds maximum\");\n\n        uint8 v;\n\n        assembly{\n\n            let tmpbytes := mload(0x40)\n\n            let bvalue := mload(add(add(buff, 0x20), offset))\n\n            mstore8(tmpbytes, byte(0, bvalue))\n\n            mstore(0x40, add(tmpbytes, 0x01))\n\n            v := mload(sub(tmpbytes, 0x1f))\n\n        }\n\n        return (v, offset + 1);\n",
          "message": "Function 'ZeroCopySource.NextUint8' (ZeroCopySourceMock.sol#62-73) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": 93,
          "vulnerability_code": "    function NextUint16(bytes memory buff, uint256 offset) internal pure returns (uint16, uint256) {\n\n        require(offset + 2 <= buff.length && offset < offset + 2, \"NextUint16, offset exceeds maximum\");\n\n        \n\n        uint16 v;\n\n        assembly {\n\n            let tmpbytes := mload(0x40)\n\n            let bvalue := mload(add(add(buff, 0x20), offset))\n\n            mstore8(tmpbytes, byte(0x01, bvalue))\n\n            mstore8(add(tmpbytes, 0x01), byte(0, bvalue))\n\n            mstore(0x40, add(tmpbytes, 0x02))\n\n            v := mload(sub(tmpbytes, 0x1e))\n\n        }\n\n        return (v, offset + 2);\n",
          "message": "Function 'ZeroCopySource.NextUint16' (ZeroCopySourceMock.sol#80-93) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": 121,
          "vulnerability_code": "    function NextUint32(bytes memory buff, uint256 offset) internal pure returns (uint32, uint256) {\n\n        require(offset + 4 <= buff.length && offset < offset + 4, \"NextUint32, offset exceeds maximum\");\n\n        uint32 v;\n\n        assembly {\n\n            let tmpbytes := mload(0x40)\n\n            let byteLen := 0x04\n\n            for {\n\n                let tindex := 0x00\n\n                let bindex := sub(byteLen, 0x01)\n\n                let bvalue := mload(add(add(buff, 0x20), offset))\n\n            } lt(tindex, byteLen) {\n\n                tindex := add(tindex, 0x01)\n\n                bindex := sub(bindex, 0x01)\n\n            }{\n\n                mstore8(add(tmpbytes, tindex), byte(bindex, bvalue))\n\n            }\n\n            mstore(0x40, add(tmpbytes, byteLen))\n\n            v := mload(sub(tmpbytes, sub(0x20, byteLen)))\n\n        }\n\n        return (v, offset + 4);\n",
          "message": "Function 'ZeroCopySource.NextUint32' (ZeroCopySourceMock.sol#101-121) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": 148,
          "vulnerability_code": "    function NextUint64(bytes memory buff, uint256 offset) internal pure returns (uint64, uint256) {\n\n        require(offset + 8 <= buff.length && offset < offset + 8, \"NextUint64, offset exceeds maximum\");\n\n        uint64 v;\n\n        assembly {\n\n            let tmpbytes := mload(0x40)\n\n            let byteLen := 0x08\n\n            for {\n\n                let tindex := 0x00\n\n                let bindex := sub(byteLen, 0x01)\n\n                let bvalue := mload(add(add(buff, 0x20), offset))\n\n            } lt(tindex, byteLen) {\n\n                tindex := add(tindex, 0x01)\n\n                bindex := sub(bindex, 0x01)\n\n            }{\n\n                mstore8(add(tmpbytes, tindex), byte(bindex, bvalue))\n\n            }\n\n            mstore(0x40, add(tmpbytes, byteLen))\n\n            v := mload(sub(tmpbytes, sub(0x20, byteLen)))\n\n        }\n\n        return (v, offset + 8);\n",
          "message": "Function 'ZeroCopySource.NextUint64' (ZeroCopySourceMock.sol#128-148) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 156,
          "vulnerability_to_line": 177,
          "vulnerability_code": "    function NextUint255(bytes memory buff, uint256 offset) internal pure returns (uint256, uint256) {\n\n        require(offset + 32 <= buff.length && offset < offset + 32, \"NextUint255, offset exceeds maximum\");\n\n        uint256 v;\n\n        assembly {\n\n            let tmpbytes := mload(0x40)\n\n            let byteLen := 0x20\n\n            for {\n\n                let tindex := 0x00\n\n                let bindex := sub(byteLen, 0x01)\n\n                let bvalue := mload(add(add(buff, 0x20), offset))\n\n            } lt(tindex, byteLen) {\n\n                tindex := add(tindex, 0x01)\n\n                bindex := sub(bindex, 0x01)\n\n            }{\n\n                mstore8(add(tmpbytes, tindex), byte(bindex, bvalue))\n\n            }\n\n            mstore(0x40, add(tmpbytes, byteLen))\n\n            v := mload(tmpbytes)\n\n        }\n\n        require(v <= 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, \"Value exceeds the range\");\n\n        return (v, offset + 32);\n",
          "message": "Function 'ZeroCopySource.NextUint255' (ZeroCopySourceMock.sol#156-177) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 184,
          "vulnerability_to_line": 239,
          "vulnerability_code": "    function NextVarBytes(bytes memory buff, uint256 offset) internal pure returns(bytes memory, uint256) {\n\n        uint len;\n\n        (len, offset) = NextVarUint(buff, offset);\n\n        require(offset + len <= buff.length && offset < offset + len, \"NextVarBytes, offset exceeds maximum\");\n\n        bytes memory tempBytes;\n\n        assembly{\n\n            switch iszero(len)\n\n            case 0 {\n\n                // Get a location of some free memory and store it in tempBytes as\n\n                // Solidity does for memory variables.\n\n                tempBytes := mload(0x40)\n\n\n\n                // The first word of the slice result is potentially a partial\n\n                // word read from the original array. To read it, we calculate\n\n                // the length of that partial word and start copying that many\n\n                // bytes into the array. The first word we copy will start with\n\n                // data we don't care about, but the last `lengthmod` bytes will\n\n                // land at the beginning of the contents of the new array. When\n\n                // we're done copying, we overwrite the full first word with\n\n                // the actual length of the slice.\n\n                let lengthmod := and(len, 31)\n\n\n\n                // The multiplication in the next line is necessary\n\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\n\n                // the following copy loop was copying the origin's length\n\n                // and then ending prematurely not copying everything it should.\n\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n\n                let end := add(mc, len)\n\n\n\n                for {\n\n                    // The multiplication in the next line has the same exact purpose\n\n                    // as the one above.\n\n                    let cc := add(add(add(buff, lengthmod), mul(0x20, iszero(lengthmod))), offset)\n\n                } lt(mc, end) {\n\n                    mc := add(mc, 0x20)\n\n                    cc := add(cc, 0x20)\n\n                } {\n\n                    mstore(mc, mload(cc))\n\n                }\n\n\n\n                mstore(tempBytes, len)\n\n\n\n                //update free-memory pointer\n\n                //allocating the array padded to 32 bytes like the compiler does now\n\n                mstore(0x40, and(add(mc, 31), not(31)))\n\n            }\n\n            //if we want a zero-length slice let's just return a zero-length array\n\n            default {\n\n                tempBytes := mload(0x40)\n\n\n\n                mstore(0x40, add(tempBytes, 0x20))\n\n            }\n\n        }\n\n\n\n        return (tempBytes, offset + len);\n",
          "message": "Function 'ZeroCopySource.NextVarBytes' (ZeroCopySourceMock.sol#184-239) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 245,
          "vulnerability_to_line": 252,
          "vulnerability_code": "    function NextHash(bytes memory buff, uint256 offset) internal pure returns (bytes32 , uint256) {\n\n        require(offset + 32 <= buff.length && offset < offset + 32, \"NextHash, offset exceeds maximum\");\n\n        bytes32 v;\n\n        assembly {\n\n            v := mload(add(buff, add(offset, 0x20)))\n\n        }\n\n        return (v, offset + 32);\n",
          "message": "Function 'ZeroCopySource.NextHash' (ZeroCopySourceMock.sol#245-252) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 259,
          "vulnerability_to_line": 266,
          "vulnerability_code": "    function NextBytes20(bytes memory buff, uint256 offset) internal pure returns (bytes20 , uint256) {\n\n        require(offset + 20 <= buff.length && offset < offset + 20, \"NextBytes20, offset exceeds maximum\");\n\n        bytes20 v;\n\n        assembly {\n\n            v := mload(add(buff, add(offset, 0x20)))\n\n        }\n\n        return (v, offset + 20);\n",
          "message": "Function 'ZeroCopySource.NextBytes20' (ZeroCopySourceMock.sol#259-266) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 268,
          "vulnerability_to_line": 294,
          "vulnerability_code": "    function NextVarUint(bytes memory buff, uint256 offset) internal pure returns(uint, uint256) {\n\n        byte v;\n\n        (v, offset) = NextByte(buff, offset);\n\n\n\n        uint value;\n\n        if (v == 0xFD) {\n\n            // return NextUint16(buff, offset);\n\n            (value, offset) = NextUint16(buff, offset);\n\n            require(value >= 0xFD && value <= 0xFFFF, \"NextUint16, value outside range\");\n\n            return (value, offset);\n\n        } else if (v == 0xFE) {\n\n            // return NextUint32(buff, offset);\n\n            (value, offset) = NextUint32(buff, offset);\n\n            require(value > 0xFFFF && value <= 0xFFFFFFFF, \"NextVarUint, value outside range\");\n\n            return (value, offset);\n\n        } else if (v == 0xFF) {\n\n            // return NextUint64(buff, offset);\n\n            (value, offset) = NextUint64(buff, offset);\n\n            require(value > 0xFFFFFFFF, \"NextVarUint, value outside range\");\n\n            return (value, offset);\n\n        } else{\n\n            // return (uint8(v), offset);\n\n            value = uint8(v);\n\n            require(value < 0xFD, \"NextVarUint, value outside range\");\n\n            return (value, offset);\n\n        }\n",
          "message": "Function 'ZeroCopySource.NextVarUint' (ZeroCopySourceMock.sol#268-294) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 303,
          "vulnerability_to_line": 310,
          "vulnerability_code": "    function NextBool(bytes memory _b, uint256 _off) public returns (bool, uint256) {\n\n        bool res;\n\n        uint256 offset = 0;\n\n        for (uint i = 0; i <= N; i++) {\n\n            (res, offset) = ZeroCopySource.NextBool(_b, _off);\n\n        }\n\n        return ZeroCopySource.NextBool(_b, _off);\n",
          "message": "Function 'ZeroCopySourceMock.NextBool' (ZeroCopySourceMock.sol#303-310) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 303,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextBool(bytes memory _b, uint256 _off) public returns (bool, uint256) {\n",
          "message": "Parameter '_b' of ZeroCopySourceMock.NextBool (ZeroCopySourceMock.sol#303) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 303,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextBool(bytes memory _b, uint256 _off) public returns (bool, uint256) {\n",
          "message": "Parameter '_off' of ZeroCopySourceMock.NextBool (ZeroCopySourceMock.sol#303) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 312,
          "vulnerability_to_line": 314,
          "vulnerability_code": "    function NextByte(bytes memory _b, uint256 _off) public returns (byte, uint256) {\n\n        return ZeroCopySource.NextByte(_b, _off);\n",
          "message": "Function 'ZeroCopySourceMock.NextByte' (ZeroCopySourceMock.sol#312-314) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 312,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextByte(bytes memory _b, uint256 _off) public returns (byte, uint256) {\n",
          "message": "Parameter '_b' of ZeroCopySourceMock.NextByte (ZeroCopySourceMock.sol#312) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 312,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextByte(bytes memory _b, uint256 _off) public returns (byte, uint256) {\n",
          "message": "Parameter '_off' of ZeroCopySourceMock.NextByte (ZeroCopySourceMock.sol#312) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 316,
          "vulnerability_to_line": 318,
          "vulnerability_code": "    function NextUint8(bytes memory _b, uint256 _off) public returns (uint8, uint256) {\n\n        return ZeroCopySource.NextUint8(_b, _off);\n",
          "message": "Function 'ZeroCopySourceMock.NextUint8' (ZeroCopySourceMock.sol#316-318) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 316,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextUint8(bytes memory _b, uint256 _off) public returns (uint8, uint256) {\n",
          "message": "Parameter '_b' of ZeroCopySourceMock.NextUint8 (ZeroCopySourceMock.sol#316) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 316,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextUint8(bytes memory _b, uint256 _off) public returns (uint8, uint256) {\n",
          "message": "Parameter '_off' of ZeroCopySourceMock.NextUint8 (ZeroCopySourceMock.sol#316) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": 322,
          "vulnerability_code": "    function NextUint16(bytes memory _b, uint256 _off) public returns (uint16, uint256) {\n\n        return ZeroCopySource.NextUint16(_b, _off);\n",
          "message": "Function 'ZeroCopySourceMock.NextUint16' (ZeroCopySourceMock.sol#320-322) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextUint16(bytes memory _b, uint256 _off) public returns (uint16, uint256) {\n",
          "message": "Parameter '_b' of ZeroCopySourceMock.NextUint16 (ZeroCopySourceMock.sol#320) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextUint16(bytes memory _b, uint256 _off) public returns (uint16, uint256) {\n",
          "message": "Parameter '_off' of ZeroCopySourceMock.NextUint16 (ZeroCopySourceMock.sol#320) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 324,
          "vulnerability_to_line": 326,
          "vulnerability_code": "    function NextUint32(bytes memory _b, uint256 _off) public returns (uint32, uint256) {\n\n        return ZeroCopySource.NextUint32(_b, _off);\n",
          "message": "Function 'ZeroCopySourceMock.NextUint32' (ZeroCopySourceMock.sol#324-326) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 324,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextUint32(bytes memory _b, uint256 _off) public returns (uint32, uint256) {\n",
          "message": "Parameter '_b' of ZeroCopySourceMock.NextUint32 (ZeroCopySourceMock.sol#324) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 324,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextUint32(bytes memory _b, uint256 _off) public returns (uint32, uint256) {\n",
          "message": "Parameter '_off' of ZeroCopySourceMock.NextUint32 (ZeroCopySourceMock.sol#324) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 328,
          "vulnerability_to_line": 330,
          "vulnerability_code": "    function NextUint64(bytes memory _b, uint256 _off) public returns (uint64, uint256) {\n\n        return ZeroCopySource.NextUint64(_b, _off);\n",
          "message": "Function 'ZeroCopySourceMock.NextUint64' (ZeroCopySourceMock.sol#328-330) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 328,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextUint64(bytes memory _b, uint256 _off) public returns (uint64, uint256) {\n",
          "message": "Parameter '_b' of ZeroCopySourceMock.NextUint64 (ZeroCopySourceMock.sol#328) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 328,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextUint64(bytes memory _b, uint256 _off) public returns (uint64, uint256) {\n",
          "message": "Parameter '_off' of ZeroCopySourceMock.NextUint64 (ZeroCopySourceMock.sol#328) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": 334,
          "vulnerability_code": "    function NextVarBytes(bytes memory _b, uint256 _off) public returns (bytes memory, uint256) {\n\n        return ZeroCopySource.NextVarBytes(_b, _off);\n",
          "message": "Function 'ZeroCopySourceMock.NextVarBytes' (ZeroCopySourceMock.sol#332-334) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextVarBytes(bytes memory _b, uint256 _off) public returns (bytes memory, uint256) {\n",
          "message": "Parameter '_b' of ZeroCopySourceMock.NextVarBytes (ZeroCopySourceMock.sol#332) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextVarBytes(bytes memory _b, uint256 _off) public returns (bytes memory, uint256) {\n",
          "message": "Parameter '_off' of ZeroCopySourceMock.NextVarBytes (ZeroCopySourceMock.sol#332) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 336,
          "vulnerability_to_line": 338,
          "vulnerability_code": "    function NextHash(bytes memory _b, uint256 _off) public returns (bytes32, uint256) {\n\n        return ZeroCopySource.NextHash(_b, _off);\n",
          "message": "Function 'ZeroCopySourceMock.NextHash' (ZeroCopySourceMock.sol#336-338) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 336,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextHash(bytes memory _b, uint256 _off) public returns (bytes32, uint256) {\n",
          "message": "Parameter '_b' of ZeroCopySourceMock.NextHash (ZeroCopySourceMock.sol#336) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 336,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextHash(bytes memory _b, uint256 _off) public returns (bytes32, uint256) {\n",
          "message": "Parameter '_off' of ZeroCopySourceMock.NextHash (ZeroCopySourceMock.sol#336) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 344,
          "vulnerability_to_line": 346,
          "vulnerability_code": "    function NextBytes20(bytes memory _b, uint256 _off) public returns (bytes20, uint256) {\n\n        return ZeroCopySource.NextBytes20(_b, _off);\n",
          "message": "Function 'ZeroCopySourceMock.NextBytes20' (ZeroCopySourceMock.sol#344-346) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 344,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextBytes20(bytes memory _b, uint256 _off) public returns (bytes20, uint256) {\n",
          "message": "Parameter '_b' of ZeroCopySourceMock.NextBytes20 (ZeroCopySourceMock.sol#344) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 344,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextBytes20(bytes memory _b, uint256 _off) public returns (bytes20, uint256) {\n",
          "message": "Parameter '_off' of ZeroCopySourceMock.NextBytes20 (ZeroCopySourceMock.sol#344) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 348,
          "vulnerability_to_line": 350,
          "vulnerability_code": "    function NextUint255(bytes memory _b, uint256 _off) public returns (uint256, uint256) {\n\n        return ZeroCopySource.NextUint255(_b, _off);\n",
          "message": "Function 'ZeroCopySourceMock.NextUint255' (ZeroCopySourceMock.sol#348-350) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 348,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextUint255(bytes memory _b, uint256 _off) public returns (uint256, uint256) {\n",
          "message": "Parameter '_b' of ZeroCopySourceMock.NextUint255 (ZeroCopySourceMock.sol#348) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 348,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextUint255(bytes memory _b, uint256 _off) public returns (uint256, uint256) {\n",
          "message": "Parameter '_off' of ZeroCopySourceMock.NextUint255 (ZeroCopySourceMock.sol#348) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 351,
          "vulnerability_to_line": 353,
          "vulnerability_code": "    function NextVarUint(bytes memory _b, uint256 _off) public returns (uint, uint256) {\n\n        return ZeroCopySource.NextVarUint(_b, _off);\n",
          "message": "Function 'ZeroCopySourceMock.NextVarUint' (ZeroCopySourceMock.sol#351-353) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 351,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextVarUint(bytes memory _b, uint256 _off) public returns (uint, uint256) {\n",
          "message": "Parameter '_b' of ZeroCopySourceMock.NextVarUint (ZeroCopySourceMock.sol#351) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 351,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextVarUint(bytes memory _b, uint256 _off) public returns (uint, uint256) {\n",
          "message": "Parameter '_off' of ZeroCopySourceMock.NextVarUint (ZeroCopySourceMock.sol#351) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 302,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint N = 10;\n",
          "message": "Variable 'ZeroCopySourceMock.N' (ZeroCopySourceMock.sol#302) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (v == 0x01) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    \t} else if (v == 0x00) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 273,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (v == 0xFD) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 276,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(value >= 0xFD && value <= 0xFFFF, \"NextUint16, value outside range\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 276,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(value >= 0xFD && value <= 0xFFFF, \"NextUint16, value outside range\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": null,
          "vulnerability_code": "        } else if (v == 0xFE) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 281,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(value > 0xFFFF && value <= 0xFFFFFFFF, \"NextVarUint, value outside range\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 281,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(value > 0xFFFF && value <= 0xFFFFFFFF, \"NextVarUint, value outside range\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 283,
          "vulnerability_to_line": null,
          "vulnerability_code": "        } else if (v == 0xFF) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 286,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(value > 0xFFFFFFFF, \"NextVarUint, value outside range\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 291,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(value < 0xFD, \"NextVarUint, value outside range\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 306,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i <= N; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 299,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    \t} else if (v == 0x00) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextBool(bytes memory buff, uint256 offset) internal pure returns(bool, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextByte(bytes memory buff, uint256 offset) internal pure returns (byte, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextUint8(bytes memory buff, uint256 offset) internal pure returns (uint8, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextUint16(bytes memory buff, uint256 offset) internal pure returns (uint16, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextUint32(bytes memory buff, uint256 offset) internal pure returns (uint32, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextUint64(bytes memory buff, uint256 offset) internal pure returns (uint64, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 156,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextUint255(bytes memory buff, uint256 offset) internal pure returns (uint256, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 184,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextVarBytes(bytes memory buff, uint256 offset) internal pure returns(bytes memory, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 245,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextHash(bytes memory buff, uint256 offset) internal pure returns (bytes32 , uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 259,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextBytes20(bytes memory buff, uint256 offset) internal pure returns (bytes20 , uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextBool(bytes memory buff, uint256 offset) internal pure returns(bool, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextByte(bytes memory buff, uint256 offset) internal pure returns (byte, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextUint8(bytes memory buff, uint256 offset) internal pure returns (uint8, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextUint16(bytes memory buff, uint256 offset) internal pure returns (uint16, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextUint32(bytes memory buff, uint256 offset) internal pure returns (uint32, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextUint64(bytes memory buff, uint256 offset) internal pure returns (uint64, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 156,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextUint255(bytes memory buff, uint256 offset) internal pure returns (uint256, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 184,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextVarBytes(bytes memory buff, uint256 offset) internal pure returns(bytes memory, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 245,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextHash(bytes memory buff, uint256 offset) internal pure returns (bytes32 , uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 259,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextBytes20(bytes memory buff, uint256 offset) internal pure returns (bytes20 , uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 268,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextVarUint(bytes memory buff, uint256 offset) internal pure returns(uint, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 303,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextBool(bytes memory _b, uint256 _off) public returns (bool, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 312,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextByte(bytes memory _b, uint256 _off) public returns (byte, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 316,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextUint8(bytes memory _b, uint256 _off) public returns (uint8, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextUint16(bytes memory _b, uint256 _off) public returns (uint16, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 324,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextUint32(bytes memory _b, uint256 _off) public returns (uint32, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 328,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextUint64(bytes memory _b, uint256 _off) public returns (uint64, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextVarBytes(bytes memory _b, uint256 _off) public returns (bytes memory, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 336,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextHash(bytes memory _b, uint256 _off) public returns (bytes32, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 344,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextBytes20(bytes memory _b, uint256 _off) public returns (bytes20, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 348,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextUint255(bytes memory _b, uint256 _off) public returns (uint256, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 351,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function NextVarUint(bytes memory _b, uint256 _off) public returns (uint, uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly{\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly{\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly{\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 131,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 159,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 189,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly{\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 248,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 262,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 302,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint N = 10;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}