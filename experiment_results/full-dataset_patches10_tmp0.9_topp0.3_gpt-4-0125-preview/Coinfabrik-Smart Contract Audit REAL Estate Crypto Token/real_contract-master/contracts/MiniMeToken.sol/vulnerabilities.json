{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": null,
          "vulnerability_code": "           require((_to != 0) && (_to != address(this)));\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_73"
      ],
      "vulnerability_findings": [
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => Checkpoint[]) balances;\n",
          "message": "MiniMeToken.balances (MiniMeToken.sol#113) is never initialized. It is used in:\n\t- doTransfer (MiniMeToken.sol#206-244)\n\t- balanceOfAt (MiniMeToken.sol#323-344)\n\t- generateTokens (MiniMeToken.sol#416-426)\n\t- destroyTokens (MiniMeToken.sol#433-443)\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 507,
          "vulnerability_to_line": 514,
          "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n\n        uint size;\n\n        if (_addr == 0) return false;\n\n        assembly {\n\n            size := extcodesize(_addr)\n\n        }\n\n        return size>0;\n",
          "message": "MiniMeToken.isContract (MiniMeToken.sol#507-514) is declared view but contains assembly code\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 258,
          "vulnerability_to_line": 275,
          "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n\n        require(transfersEnabled);\n\n\n\n        // To change the approve amount you first have to reduce the addresses`\n\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\n\n        //  already 0 to mitigate the race condition described here:\n\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n\n\n\n        // Alerts the token controller of the approve function call\n\n        if (isContract(controller)) {\n\n            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\n\n        }\n\n\n\n        allowed[msg.sender][_spender] = _amount;\n\n        Approval(msg.sender, _spender, _amount);\n\n        return true;\n",
          "message": "Reentrancy in MiniMeToken.approve (MiniMeToken.sol#258-275):\n\tExternal calls:\n\t- require(bool)(TokenController(controller).onApprove(msg.sender,_spender,_amount)) (MiniMeToken.sol#269)\n\tState variables written after the call(s):\n\t- allowed (MiniMeToken.sol#272)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 537,
          "vulnerability_to_line": 547,
          "vulnerability_code": "    function claimTokens(address _token) onlyController {\n\n        if (_token == 0x0) {\n\n            controller.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        MiniMeToken token = MiniMeToken(_token);\n\n        uint balance = token.balanceOf(this);\n\n        token.transfer(controller, balance);\n\n        ClaimedTokens(_token, controller, balance);\n",
          "message": "MiniMeToken.claimTokens (MiniMeToken.sol#537-547) does not use the value returned by external calls:\n\t-token.transfer(controller,balance) (MiniMeToken.sol#545)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 474,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint min = 0;\n",
          "message": "MiniMeToken.getValueAt.min (local variable @ MiniMeToken.sol#474) shadows:\n\t- MiniMeToken.min (function @ MiniMeToken.sol#517-519)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 507,
          "vulnerability_to_line": 514,
          "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n\n        uint size;\n\n        if (_addr == 0) return false;\n\n        assembly {\n\n            size := extcodesize(_addr)\n\n        }\n\n        return size>0;\n",
          "message": "MiniMeToken.isContract uses assembly (MiniMeToken.sol#507-514)\n\t- MiniMeToken.sol#510-513\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string public version = 'MMT_0.1'; //An arbitrary versioning scheme\n",
          "message": "MiniMeToken.version should be constant (MiniMeToken.sol#84)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function proxyPayment(address _owner) payable returns(bool);\n",
          "message": "TokenController.proxyPayment (MiniMeToken.sol#36) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n",
          "message": "TokenController.onTransfer (MiniMeToken.sol#44) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": 53,
          "vulnerability_code": "    function onApprove(address _owner, address _spender, uint _amount)\n",
          "message": "TokenController.onApprove (MiniMeToken.sol#52-53) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": 69,
          "vulnerability_code": "    function changeController(address _newController) onlyController {\n\n        controller = _newController;\n",
          "message": "Controlled.changeController (MiniMeToken.sol#67-69) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n",
          "message": "ApproveAndCallFallBack.receiveApproval (MiniMeToken.sol#73) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": 175,
          "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n\n        require(transfersEnabled);\n\n        return doTransfer(msg.sender, _to, _amount);\n",
          "message": "MiniMeToken.transfer (MiniMeToken.sol#172-175) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": 198,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n\n    ) returns (bool success) {\n\n\n\n        // The controller of this contract can move tokens around at will,\n\n        //  this is important to recognize! Confirm that you trust the\n\n        //  controller of this contract, which in most situations should be\n\n        //  another open source smart contract or 0x0\n\n        if (msg.sender != controller) {\n\n            require(transfersEnabled);\n\n\n\n            // The standard ERC 20 transferFrom functionality\n\n            if (allowed[_from][msg.sender] < _amount) return false;\n\n            allowed[_from][msg.sender] -= _amount;\n\n        }\n\n        return doTransfer(_from, _to, _amount);\n",
          "message": "MiniMeToken.transferFrom (MiniMeToken.sol#183-198) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 282,
          "vulnerability_to_line": 285,
          "vulnerability_code": "    function allowance(address _owner, address _spender\n\n    ) constant returns (uint256 remaining) {\n\n        return allowed[_owner][_spender];\n",
          "message": "MiniMeToken.allowance (MiniMeToken.sol#282-285) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": 306,
          "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n\n    ) returns (bool success) {\n\n        require(approve(_spender, _amount));\n\n\n\n        ApproveAndCallFallBack(_spender).receiveApproval(\n\n            msg.sender,\n\n            _amount,\n\n            this,\n\n            _extraData\n\n        );\n\n\n\n        return true;\n",
          "message": "MiniMeToken.approveAndCall (MiniMeToken.sol#294-306) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 384,
          "vulnerability_to_line": 406,
          "vulnerability_code": "    function createCloneToken(\n\n        string _cloneTokenName,\n\n        uint8 _cloneDecimalUnits,\n\n        string _cloneTokenSymbol,\n\n        uint _snapshotBlock,\n\n        bool _transfersEnabled\n\n        ) returns(address) {\n\n        if (_snapshotBlock == 0) _snapshotBlock = block.number;\n\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n\n            this,\n\n            _snapshotBlock,\n\n            _cloneTokenName,\n\n            _cloneDecimalUnits,\n\n            _cloneTokenSymbol,\n\n            _transfersEnabled\n\n            );\n\n\n\n        cloneToken.changeController(msg.sender);\n\n\n\n        // An event to make the token easy to find on the blockchain\n\n        NewCloneToken(address(cloneToken), _snapshotBlock);\n\n        return address(cloneToken);\n",
          "message": "MiniMeToken.createCloneToken (MiniMeToken.sol#384-406) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 416,
          "vulnerability_to_line": 426,
          "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n\n    ) onlyController returns (bool) {\n\n        uint curTotalSupply = totalSupply();\n\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n\n        uint previousBalanceTo = balanceOf(_owner);\n\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n\n        Transfer(0, _owner, _amount);\n\n        return true;\n",
          "message": "MiniMeToken.generateTokens (MiniMeToken.sol#416-426) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 433,
          "vulnerability_to_line": 443,
          "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n\n    ) onlyController returns (bool) {\n\n        uint curTotalSupply = totalSupply();\n\n        require(curTotalSupply >= _amount);\n\n        uint previousBalanceFrom = balanceOf(_owner);\n\n        require(previousBalanceFrom >= _amount);\n\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n\n        Transfer(_owner, 0, _amount);\n\n        return true;\n",
          "message": "MiniMeToken.destroyTokens (MiniMeToken.sol#433-443) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 452,
          "vulnerability_to_line": 454,
          "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n\n        transfersEnabled = _transfersEnabled;\n",
          "message": "MiniMeToken.enableTransfers (MiniMeToken.sol#452-454) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 524,
          "vulnerability_to_line": 527,
          "vulnerability_code": "    function ()  payable {\n\n        require(isContract(controller));\n\n        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\n",
          "message": "MiniMeToken.fallback (MiniMeToken.sol#524-527) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 537,
          "vulnerability_to_line": 547,
          "vulnerability_code": "    function claimTokens(address _token) onlyController {\n\n        if (_token == 0x0) {\n\n            controller.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        MiniMeToken token = MiniMeToken(_token);\n\n        uint balance = token.balanceOf(this);\n\n        token.transfer(controller, balance);\n\n        ClaimedTokens(_token, controller, balance);\n",
          "message": "MiniMeToken.claimTokens (MiniMeToken.sol#537-547) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 583,
          "vulnerability_to_line": 603,
          "vulnerability_code": "    function createCloneToken(\n\n        address _parentToken,\n\n        uint _snapshotBlock,\n\n        string _tokenName,\n\n        uint8 _decimalUnits,\n\n        string _tokenSymbol,\n\n        bool _transfersEnabled\n\n    ) returns (MiniMeToken) {\n\n        MiniMeToken newToken = new MiniMeToken(\n\n            this,\n\n            _parentToken,\n\n            _snapshotBlock,\n\n            _tokenName,\n\n            _decimalUnits,\n\n            _tokenSymbol,\n\n            _transfersEnabled\n\n            );\n\n\n\n        newToken.changeController(msg.sender);\n\n        return newToken;\n",
          "message": "MiniMeTokenFactory.createCloneToken (MiniMeToken.sol#583-603) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.11;\n",
          "message": "Detected issues with version pragma in MiniMeToken.sol:\n\t- pragma solidity^0.4.11 (MiniMeToken.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Controlled() { controller = msg.sender;}\n",
          "message": "Function 'Controlled.Controlled' (MiniMeToken.sol#63) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function changeController(address _newController) onlyController {\n",
          "message": "Parameter '_newController' of Controlled.changeController (MiniMeToken.sol#67) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 144,
          "vulnerability_to_line": 161,
          "vulnerability_code": "    function MiniMeToken(\n\n        address _tokenFactory,\n\n        address _parentToken,\n\n        uint _parentSnapShotBlock,\n\n        string _tokenName,\n\n        uint8 _decimalUnits,\n\n        string _tokenSymbol,\n\n        bool _transfersEnabled\n\n    ) {\n\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\n\n        name = _tokenName;                                 // Set the name\n\n        decimals = _decimalUnits;                          // Set the decimals\n\n        symbol = _tokenSymbol;                             // Set the symbol\n\n        parentToken = MiniMeToken(_parentToken);\n\n        parentSnapShotBlock = _parentSnapShotBlock;\n\n        transfersEnabled = _transfersEnabled;\n\n        creationBlock = block.number;\n",
          "message": "Function 'MiniMeToken.MiniMeToken' (MiniMeToken.sol#144-161) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 145,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _tokenFactory,\n",
          "message": "Parameter '_tokenFactory' of MiniMeToken.MiniMeToken (MiniMeToken.sol#145) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 146,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _parentToken,\n",
          "message": "Parameter '_parentToken' of MiniMeToken.MiniMeToken (MiniMeToken.sol#146) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 147,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _parentSnapShotBlock,\n",
          "message": "Parameter '_parentSnapShotBlock' of MiniMeToken.MiniMeToken (MiniMeToken.sol#147) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 148,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _tokenName,\n",
          "message": "Parameter '_tokenName' of MiniMeToken.MiniMeToken (MiniMeToken.sol#148) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint8 _decimalUnits,\n",
          "message": "Parameter '_decimalUnits' of MiniMeToken.MiniMeToken (MiniMeToken.sol#149) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _tokenSymbol,\n",
          "message": "Parameter '_tokenSymbol' of MiniMeToken.MiniMeToken (MiniMeToken.sol#150) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool _transfersEnabled\n",
          "message": "Parameter '_transfersEnabled' of MiniMeToken.MiniMeToken (MiniMeToken.sol#151) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
          "message": "Parameter '_to' of MiniMeToken.transfer (MiniMeToken.sol#172) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
          "message": "Parameter '_amount' of MiniMeToken.transfer (MiniMeToken.sol#172) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
          "message": "Parameter '_from' of MiniMeToken.transferFrom (MiniMeToken.sol#183) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
          "message": "Parameter '_to' of MiniMeToken.transferFrom (MiniMeToken.sol#183) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
          "message": "Parameter '_amount' of MiniMeToken.transferFrom (MiniMeToken.sol#183) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 206,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
          "message": "Parameter '_from' of MiniMeToken.doTransfer (MiniMeToken.sol#206) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 206,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
          "message": "Parameter '_to' of MiniMeToken.doTransfer (MiniMeToken.sol#206) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 206,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
          "message": "Parameter '_amount' of MiniMeToken.doTransfer (MiniMeToken.sol#206) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 248,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
          "message": "Parameter '_owner' of MiniMeToken.balanceOf (MiniMeToken.sol#248) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 258,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
          "message": "Parameter '_spender' of MiniMeToken.approve (MiniMeToken.sol#258) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 258,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
          "message": "Parameter '_amount' of MiniMeToken.approve (MiniMeToken.sol#258) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 282,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender\n",
          "message": "Parameter '_owner' of MiniMeToken.allowance (MiniMeToken.sol#282) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 282,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender\n",
          "message": "Parameter '_spender' of MiniMeToken.allowance (MiniMeToken.sol#282) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
          "message": "Parameter '_spender' of MiniMeToken.approveAndCall (MiniMeToken.sol#294) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
          "message": "Parameter '_amount' of MiniMeToken.approveAndCall (MiniMeToken.sol#294) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
          "message": "Parameter '_extraData' of MiniMeToken.approveAndCall (MiniMeToken.sol#294) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 323,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
          "message": "Parameter '_owner' of MiniMeToken.balanceOfAt (MiniMeToken.sol#323) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 323,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
          "message": "Parameter '_blockNumber' of MiniMeToken.balanceOfAt (MiniMeToken.sol#323) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 349,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
          "message": "Parameter '_blockNumber' of MiniMeToken.totalSupplyAt (MiniMeToken.sol#349) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 385,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _cloneTokenName,\n",
          "message": "Parameter '_cloneTokenName' of MiniMeToken.createCloneToken (MiniMeToken.sol#385) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 386,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint8 _cloneDecimalUnits,\n",
          "message": "Parameter '_cloneDecimalUnits' of MiniMeToken.createCloneToken (MiniMeToken.sol#386) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 387,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _cloneTokenSymbol,\n",
          "message": "Parameter '_cloneTokenSymbol' of MiniMeToken.createCloneToken (MiniMeToken.sol#387) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 388,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _snapshotBlock,\n",
          "message": "Parameter '_snapshotBlock' of MiniMeToken.createCloneToken (MiniMeToken.sol#388) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 389,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool _transfersEnabled\n",
          "message": "Parameter '_transfersEnabled' of MiniMeToken.createCloneToken (MiniMeToken.sol#389) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 416,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
          "message": "Parameter '_owner' of MiniMeToken.generateTokens (MiniMeToken.sol#416) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 416,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
          "message": "Parameter '_amount' of MiniMeToken.generateTokens (MiniMeToken.sol#416) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 433,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
          "message": "Parameter '_owner' of MiniMeToken.destroyTokens (MiniMeToken.sol#433) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 433,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
          "message": "Parameter '_amount' of MiniMeToken.destroyTokens (MiniMeToken.sol#433) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 452,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n",
          "message": "Parameter '_transfersEnabled' of MiniMeToken.enableTransfers (MiniMeToken.sol#452) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 464,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n",
          "message": "Parameter '_block' of MiniMeToken.getValueAt (MiniMeToken.sol#464) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 491,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\n",
          "message": "Parameter '_value' of MiniMeToken.updateValueAtNow (MiniMeToken.sol#491) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 507,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n",
          "message": "Parameter '_addr' of MiniMeToken.isContract (MiniMeToken.sol#507) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 537,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function claimTokens(address _token) onlyController {\n",
          "message": "Parameter '_token' of MiniMeToken.claimTokens (MiniMeToken.sol#537) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 584,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _parentToken,\n",
          "message": "Parameter '_parentToken' of MiniMeTokenFactory.createCloneToken (MiniMeToken.sol#584) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 585,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _snapshotBlock,\n",
          "message": "Parameter '_snapshotBlock' of MiniMeTokenFactory.createCloneToken (MiniMeToken.sol#585) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 586,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _tokenName,\n",
          "message": "Parameter '_tokenName' of MiniMeTokenFactory.createCloneToken (MiniMeToken.sol#586) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 587,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint8 _decimalUnits,\n",
          "message": "Parameter '_decimalUnits' of MiniMeTokenFactory.createCloneToken (MiniMeToken.sol#587) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 588,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _tokenSymbol,\n",
          "message": "Parameter '_tokenSymbol' of MiniMeTokenFactory.createCloneToken (MiniMeToken.sol#588) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 589,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool _transfersEnabled\n",
          "message": "Parameter '_transfersEnabled' of MiniMeTokenFactory.createCloneToken (MiniMeToken.sol#589) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 495,
          "vulnerability_to_line": null,
          "vulnerability_code": "               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 248,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 282,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 310,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function totalSupply() constant returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 323,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 349,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 464,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 507,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 258,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 476,
          "vulnerability_to_line": null,
          "vulnerability_code": "        while (max > min) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract TokenController {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function proxyPayment(address _owner) payable returns(bool);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function onApprove(address _owner, address _spender, uint _amount)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Controlled() { controller = msg.sender;}\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function changeController(address _newController) onlyController {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 144,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function MiniMeToken(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 248,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 258,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 282,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 310,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function totalSupply() constant returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 323,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 349,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 384,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function createCloneToken(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 416,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 433,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 452,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 524,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ()  payable {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 537,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function claimTokens(address _token) onlyController {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 583,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function createCloneToken(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => Checkpoint[]) balances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => mapping (address => uint256)) allowed;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 119,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Checkpoint[] totalSupplyHistory;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 494,
          "vulnerability_to_line": null,
          "vulnerability_code": "        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string public name;                //The Token's name: e.g. DigixDAO Tokens\n",
          "message": null
        },
        {
          "name": "Transaction-Ordering Dependence (TOD)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 583,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function createCloneToken(\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Concurrency bug",
          "vulnerability_from_line": 526,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\n",
          "message": null
        },
        {
          "name": "Concurrency bug",
          "vulnerability_from_line": 539,
          "vulnerability_to_line": null,
          "vulnerability_code": "            controller.transfer(this.balance);\n",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 526,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 469,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 494,
          "vulnerability_to_line": null,
          "vulnerability_code": "        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 497,
          "vulnerability_to_line": null,
          "vulnerability_code": "               newCheckPoint.value = uint128(_value);\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 601,
          "vulnerability_to_line": null,
          "vulnerability_code": "        newToken.changeController(msg.sender);\n",
          "message": null
        }
      ]
    }
  }
}