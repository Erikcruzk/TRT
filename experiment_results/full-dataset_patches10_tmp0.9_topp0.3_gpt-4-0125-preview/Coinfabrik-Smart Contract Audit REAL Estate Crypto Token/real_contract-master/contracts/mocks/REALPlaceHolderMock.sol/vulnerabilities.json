{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": null,
          "vulnerability_code": "           require((_to != 0) && (_to != address(this)));\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 837,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(getBlockNumber() >= startBlock &&\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 838,
          "vulnerability_to_line": null,
          "vulnerability_code": "                getBlockNumber() <= endBlock &&\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 839,
          "vulnerability_to_line": null,
          "vulnerability_code": "                finalizedBlock == 0 &&\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 840,
          "vulnerability_to_line": null,
          "vulnerability_code": "                address(REAL) != 0x0);\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 911,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_limit > 0 && _limit <= maxGuaranteedLimit);\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "DOCKER_RECEIVED_SIGNAL_29"
      ],
      "vulnerability_findings": [
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => Checkpoint[]) balances;\n",
          "message": "MiniMeToken.balances (REALPlaceHolderMock.sol#113) is never initialized. It is used in:\n\t- doTransfer (REALPlaceHolderMock.sol#206-244)\n\t- balanceOfAt (REALPlaceHolderMock.sol#323-344)\n\t- generateTokens (REALPlaceHolderMock.sol#416-426)\n\t- destroyTokens (REALPlaceHolderMock.sol#433-443)\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 507,
          "vulnerability_to_line": 514,
          "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n\n        uint size;\n\n        if (_addr == 0) return false;\n\n        assembly {\n\n            size := extcodesize(_addr)\n\n        }\n\n        return size>0;\n",
          "message": "MiniMeToken.isContract (REALPlaceHolderMock.sol#507-514) is declared view but contains assembly code\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 258,
          "vulnerability_to_line": 275,
          "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n\n        require(transfersEnabled);\n\n\n\n        // To change the approve amount you first have to reduce the addresses`\n\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\n\n        //  already 0 to mitigate the race condition described here:\n\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n\n\n\n        // Alerts the token controller of the approve function call\n\n        if (isContract(controller)) {\n\n            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\n\n        }\n\n\n\n        allowed[msg.sender][_spender] = _amount;\n\n        Approval(msg.sender, _spender, _amount);\n\n        return true;\n",
          "message": "Reentrancy in MiniMeToken.approve (REALPlaceHolderMock.sol#258-275):\n\tExternal calls:\n\t- require(bool)(TokenController(controller).onApprove(msg.sender,_spender,_amount)) (REALPlaceHolderMock.sol#269)\n\tState variables written after the call(s):\n\t- allowed (REALPlaceHolderMock.sol#272)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 1372,
          "vulnerability_to_line": 1383,
          "vulnerability_code": "    function transferable(address _from) internal returns (bool) {\n\n        // Allow the exchanger to work from the beginning\n\n        if (activationTime == 0) {\n\n            uint256 f = contribution.finalizedTime();\n\n            if (f > 0) {\n\n                activationTime = f.add(1 weeks);\n\n            } else {\n\n                return false;\n\n            }\n\n        }\n\n        return (getTime() > activationTime) || (_from == owner);\n",
          "message": "Reentrancy in REALPlaceHolder.transferable (REALPlaceHolderMock.sol#1372-1383):\n\tExternal calls:\n\t- f = contribution.finalizedTime() (REALPlaceHolderMock.sol#1375)\n\tState variables written after the call(s):\n\t- activationTime (REALPlaceHolderMock.sol#1377)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 537,
          "vulnerability_to_line": 547,
          "vulnerability_code": "    function claimTokens(address _token) onlyController {\n\n        if (_token == 0x0) {\n\n            controller.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        MiniMeToken token = MiniMeToken(_token);\n\n        uint balance = token.balanceOf(this);\n\n        token.transfer(controller, balance);\n\n        ClaimedTokens(_token, controller, balance);\n",
          "message": "MiniMeToken.claimTokens (REALPlaceHolderMock.sol#537-547) does not use the value returned by external calls:\n\t-token.transfer(controller,balance) (REALPlaceHolderMock.sol#545)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 1261,
          "vulnerability_to_line": 1274,
          "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n\n        if (REAL.controller() == address(this)) {\n\n            REAL.claimTokens(_token);\n\n        }\n\n        if (_token == 0x0) {\n\n            owner.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        ERC20Token token = ERC20Token(_token);\n\n        uint256 balance = token.balanceOf(this);\n\n        token.transfer(owner, balance);\n\n        ClaimedTokens(_token, owner, balance);\n",
          "message": "REALCrowdsale.claimTokens (REALPlaceHolderMock.sol#1261-1274) does not use the value returned by external calls:\n\t-token.transfer(owner,balance) (REALPlaceHolderMock.sol#1272)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 1404,
          "vulnerability_to_line": 1417,
          "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n\n        if (real.controller() == address(this)) {\n\n            real.claimTokens(_token);\n\n        }\n\n        if (_token == 0x0) {\n\n            owner.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        ERC20Token token = ERC20Token(_token);\n\n        uint256 balance = token.balanceOf(this);\n\n        token.transfer(owner, balance);\n\n        ClaimedTokens(_token, owner, balance);\n",
          "message": "REALPlaceHolder.claimTokens (REALPlaceHolderMock.sol#1404-1417) does not use the value returned by external calls:\n\t-token.transfer(owner,balance) (REALPlaceHolderMock.sol#1415)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 474,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint min = 0;\n",
          "message": "MiniMeToken.getValueAt.min (local variable @ REALPlaceHolderMock.sol#474) shadows:\n\t- MiniMeToken.min (function @ REALPlaceHolderMock.sol#517-519)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 863,
          "vulnerability_to_line": 900,
          "vulnerability_code": "    function initialize(\n\n        address _real,\n\n        address _realController,\n\n        uint256 _startBlock,\n\n        uint256 _endBlock,\n\n        address _destEthTeam,\n\n        address _destTokensReserve,\n\n        address _destTokensTeam,\n\n        address _destTokensBounties\n\n    ) public onlyOwner {\n\n        // Initialize only once\n\n        require(address(REAL) == 0x0);\n\n\n\n        REAL = MiniMeToken(_real);\n\n        require(REAL.totalSupply() == 0);\n\n        require(REAL.controller() == address(this));\n\n        require(REAL.decimals() == 18);  // Same amount of decimals as ETH\n\n\n\n        require(_realController != 0x0);\n\n        realController = _realController;\n\n\n\n        require(_startBlock >= getBlockNumber());\n\n        require(_startBlock < _endBlock);\n\n        startBlock = _startBlock;\n\n        endBlock = _endBlock;\n\n\n\n        require(_destEthTeam != 0x0);\n\n        destEthTeam = _destEthTeam;\n\n\n\n        require(_destTokensReserve != 0x0);\n\n        destTokensReserve = _destTokensReserve;\n\n\n\n        require(_destTokensTeam != 0x0);\n\n        destTokensTeam = _destTokensTeam;\n\n\n\n        require(_destTokensBounties != 0x0);\n\n        destTokensBounties = _destTokensBounties;\n",
          "message": "Reentrancy in REALCrowdsale.initialize (REALPlaceHolderMock.sol#863-900):\n\tExternal calls:\n\t- require(bool)(REAL.totalSupply() == 0) (REALPlaceHolderMock.sol#877)\n\t- require(bool)(REAL.controller() == address(this)) (REALPlaceHolderMock.sol#878)\n\t- require(bool)(REAL.decimals() == 18) (REALPlaceHolderMock.sol#879)\n\tState variables written after the call(s):\n\t- destEthTeam (REALPlaceHolderMock.sol#890)\n\t- destTokensBounties (REALPlaceHolderMock.sol#899)\n\t- destTokensReserve (REALPlaceHolderMock.sol#893)\n\t- destTokensTeam (REALPlaceHolderMock.sol#896)\n\t- endBlock (REALPlaceHolderMock.sol#887)\n\t- realController (REALPlaceHolderMock.sol#882)\n\t- startBlock (REALPlaceHolderMock.sol#886)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 507,
          "vulnerability_to_line": 514,
          "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n\n        uint size;\n\n        if (_addr == 0) return false;\n\n        assembly {\n\n            size := extcodesize(_addr)\n\n        }\n\n        return size>0;\n",
          "message": "MiniMeToken.isContract uses assembly (REALPlaceHolderMock.sol#507-514)\n\t- REALPlaceHolderMock.sol#510-513\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 719,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public totalSupply;\n",
          "message": "ERC20Token.totalSupply should be constant (REALPlaceHolderMock.sol#719)\nMiniMeToken.version should be constant (REALPlaceHolderMock.sol#84)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1364,
          "vulnerability_to_line": 1366,
          "vulnerability_code": "    function onTransfer(address _from, address, uint256) public returns (bool) {\n\n      return transferable(_from);\n",
          "message": "REALPlaceHolder.onTransfer (REALPlaceHolderMock.sol#1364-1366) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n",
          "message": "TokenController.onTransfer (REALPlaceHolderMock.sol#44) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 944,
          "vulnerability_to_line": 946,
          "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n\n        return false;\n",
          "message": "REALCrowdsale.onTransfer (REALPlaceHolderMock.sol#944-946) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": 53,
          "vulnerability_code": "    function onApprove(address _owner, address _spender, uint _amount)\n",
          "message": "TokenController.onApprove (REALPlaceHolderMock.sol#52-53) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 948,
          "vulnerability_to_line": 950,
          "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n\n        return false;\n",
          "message": "REALCrowdsale.onApprove (REALPlaceHolderMock.sol#948-950) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1368,
          "vulnerability_to_line": 1370,
          "vulnerability_code": "    function onApprove(address _from, address, uint256) public returns (bool) {\n\n        return transferable(_from);\n",
          "message": "REALPlaceHolder.onApprove (REALPlaceHolderMock.sol#1368-1370) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": 69,
          "vulnerability_code": "    function changeController(address _newController) onlyController {\n\n        controller = _newController;\n",
          "message": "Controlled.changeController (REALPlaceHolderMock.sol#67-69) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n",
          "message": "ApproveAndCallFallBack.receiveApproval (REALPlaceHolderMock.sol#73) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": 175,
          "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n\n        require(transfersEnabled);\n\n        return doTransfer(msg.sender, _to, _amount);\n",
          "message": "MiniMeToken.transfer (REALPlaceHolderMock.sol#172-175) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": 198,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n\n    ) returns (bool success) {\n\n\n\n        // The controller of this contract can move tokens around at will,\n\n        //  this is important to recognize! Confirm that you trust the\n\n        //  controller of this contract, which in most situations should be\n\n        //  another open source smart contract or 0x0\n\n        if (msg.sender != controller) {\n\n            require(transfersEnabled);\n\n\n\n            // The standard ERC 20 transferFrom functionality\n\n            if (allowed[_from][msg.sender] < _amount) return false;\n\n            allowed[_from][msg.sender] -= _amount;\n\n        }\n\n        return doTransfer(_from, _to, _amount);\n",
          "message": "MiniMeToken.transferFrom (REALPlaceHolderMock.sol#183-198) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 282,
          "vulnerability_to_line": 285,
          "vulnerability_code": "    function allowance(address _owner, address _spender\n\n    ) constant returns (uint256 remaining) {\n\n        return allowed[_owner][_spender];\n",
          "message": "MiniMeToken.allowance (REALPlaceHolderMock.sol#282-285) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": 306,
          "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n\n    ) returns (bool success) {\n\n        require(approve(_spender, _amount));\n\n\n\n        ApproveAndCallFallBack(_spender).receiveApproval(\n\n            msg.sender,\n\n            _amount,\n\n            this,\n\n            _extraData\n\n        );\n\n\n\n        return true;\n",
          "message": "MiniMeToken.approveAndCall (REALPlaceHolderMock.sol#294-306) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 384,
          "vulnerability_to_line": 406,
          "vulnerability_code": "    function createCloneToken(\n\n        string _cloneTokenName,\n\n        uint8 _cloneDecimalUnits,\n\n        string _cloneTokenSymbol,\n\n        uint _snapshotBlock,\n\n        bool _transfersEnabled\n\n        ) returns(address) {\n\n        if (_snapshotBlock == 0) _snapshotBlock = block.number;\n\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n\n            this,\n\n            _snapshotBlock,\n\n            _cloneTokenName,\n\n            _cloneDecimalUnits,\n\n            _cloneTokenSymbol,\n\n            _transfersEnabled\n\n            );\n\n\n\n        cloneToken.changeController(msg.sender);\n\n\n\n        // An event to make the token easy to find on the blockchain\n\n        NewCloneToken(address(cloneToken), _snapshotBlock);\n\n        return address(cloneToken);\n",
          "message": "MiniMeToken.createCloneToken (REALPlaceHolderMock.sol#384-406) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 416,
          "vulnerability_to_line": 426,
          "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n\n    ) onlyController returns (bool) {\n\n        uint curTotalSupply = totalSupply();\n\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n\n        uint previousBalanceTo = balanceOf(_owner);\n\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n\n        Transfer(0, _owner, _amount);\n\n        return true;\n",
          "message": "MiniMeToken.generateTokens (REALPlaceHolderMock.sol#416-426) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 433,
          "vulnerability_to_line": 443,
          "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n\n    ) onlyController returns (bool) {\n\n        uint curTotalSupply = totalSupply();\n\n        require(curTotalSupply >= _amount);\n\n        uint previousBalanceFrom = balanceOf(_owner);\n\n        require(previousBalanceFrom >= _amount);\n\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n\n        Transfer(_owner, 0, _amount);\n\n        return true;\n",
          "message": "MiniMeToken.destroyTokens (REALPlaceHolderMock.sol#433-443) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 452,
          "vulnerability_to_line": 454,
          "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n\n        transfersEnabled = _transfersEnabled;\n",
          "message": "MiniMeToken.enableTransfers (REALPlaceHolderMock.sol#452-454) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 524,
          "vulnerability_to_line": 527,
          "vulnerability_code": "    function ()  payable {\n\n        require(isContract(controller));\n\n        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\n",
          "message": "MiniMeToken.fallback (REALPlaceHolderMock.sol#524-527) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 537,
          "vulnerability_to_line": 547,
          "vulnerability_code": "    function claimTokens(address _token) onlyController {\n\n        if (_token == 0x0) {\n\n            controller.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        MiniMeToken token = MiniMeToken(_token);\n\n        uint balance = token.balanceOf(this);\n\n        token.transfer(controller, balance);\n\n        ClaimedTokens(_token, controller, balance);\n",
          "message": "MiniMeToken.claimTokens (REALPlaceHolderMock.sol#537-547) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 583,
          "vulnerability_to_line": 603,
          "vulnerability_code": "    function createCloneToken(\n\n        address _parentToken,\n\n        uint _snapshotBlock,\n\n        string _tokenName,\n\n        uint8 _decimalUnits,\n\n        string _tokenSymbol,\n\n        bool _transfersEnabled\n\n    ) returns (MiniMeToken) {\n\n        MiniMeToken newToken = new MiniMeToken(\n\n            this,\n\n            _parentToken,\n\n            _snapshotBlock,\n\n            _tokenName,\n\n            _decimalUnits,\n\n            _tokenSymbol,\n\n            _transfersEnabled\n\n            );\n\n\n\n        newToken.changeController(msg.sender);\n\n        return newToken;\n",
          "message": "MiniMeTokenFactory.createCloneToken (REALPlaceHolderMock.sol#583-603) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 634,
          "vulnerability_to_line": 636,
          "vulnerability_code": "    function changeOwner(address _newOwner) onlyOwner {\n\n        newOwner = _newOwner;\n",
          "message": "Owned.changeOwner (REALPlaceHolderMock.sol#634-636) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 639,
          "vulnerability_to_line": 643,
          "vulnerability_code": "    function acceptOwnership() {\n\n        if (msg.sender == newOwner) {\n\n            owner = newOwner;\n\n        }\n",
          "message": "Owned.acceptOwnership (REALPlaceHolderMock.sol#639-643) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 723,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance);\n",
          "message": "ERC20Token.balanceOf (REALPlaceHolderMock.sol#723) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 729,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) returns (bool success);\n",
          "message": "ERC20Token.transfer (REALPlaceHolderMock.sol#729) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 736,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n",
          "message": "ERC20Token.transferFrom (REALPlaceHolderMock.sol#736) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 742,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) returns (bool success);\n",
          "message": "ERC20Token.approve (REALPlaceHolderMock.sol#742) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 747,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n",
          "message": "ERC20Token.allowance (REALPlaceHolderMock.sol#747) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 863,
          "vulnerability_to_line": 900,
          "vulnerability_code": "    function initialize(\n\n        address _real,\n\n        address _realController,\n\n        uint256 _startBlock,\n\n        uint256 _endBlock,\n\n        address _destEthTeam,\n\n        address _destTokensReserve,\n\n        address _destTokensTeam,\n\n        address _destTokensBounties\n\n    ) public onlyOwner {\n\n        // Initialize only once\n\n        require(address(REAL) == 0x0);\n\n\n\n        REAL = MiniMeToken(_real);\n\n        require(REAL.totalSupply() == 0);\n\n        require(REAL.controller() == address(this));\n\n        require(REAL.decimals() == 18);  // Same amount of decimals as ETH\n\n\n\n        require(_realController != 0x0);\n\n        realController = _realController;\n\n\n\n        require(_startBlock >= getBlockNumber());\n\n        require(_startBlock < _endBlock);\n\n        startBlock = _startBlock;\n\n        endBlock = _endBlock;\n\n\n\n        require(_destEthTeam != 0x0);\n\n        destEthTeam = _destEthTeam;\n\n\n\n        require(_destTokensReserve != 0x0);\n\n        destTokensReserve = _destTokensReserve;\n\n\n\n        require(_destTokensTeam != 0x0);\n\n        destTokensTeam = _destTokensTeam;\n\n\n\n        require(_destTokensBounties != 0x0);\n\n        destTokensBounties = _destTokensBounties;\n",
          "message": "REALCrowdsale.initialize (REALPlaceHolderMock.sol#863-900) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 909,
          "vulnerability_to_line": 915,
          "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n\n        require(getBlockNumber() < startBlock);\n\n        require(_limit > 0 && _limit <= maxGuaranteedLimit);\n\n        guaranteedBuyersLimit[_th] = _limit;\n\n        reservedGuaranteed = reservedGuaranteed + _limit;\n\n        GuaranteedAddress(_th, _limit);\n",
          "message": "REALCrowdsale.setGuaranteedAddress (REALPlaceHolderMock.sol#909-915) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 919,
          "vulnerability_to_line": 921,
          "vulnerability_code": "    function () public payable notPaused {\n\n        proxyPayment(msg.sender);\n",
          "message": "REALCrowdsale.fallback (REALPlaceHolderMock.sol#919-921) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1134,
          "vulnerability_to_line": 1207,
          "vulnerability_code": "    function finalize() public initialized {\n\n        require(getBlockNumber() >= startBlock);\n\n        require(msg.sender == owner || getBlockNumber() > endBlock);\n\n        require(finalizedBlock == 0);\n\n\n\n        // Allow premature finalization if final limit is reached\n\n        if (getBlockNumber() <= endBlock) {\n\n            require(totalNormalCollected >= fundingLimit);\n\n        }\n\n\n\n        finalizedBlock = getBlockNumber();\n\n        finalizedTime = now;\n\n\n\n        uint256 percentageToTeam = percent(20);\n\n\n\n        uint256 percentageToContributors = percent(51);\n\n\n\n        uint256 percentageToReserve = percent(15);\n\n\n\n        uint256 percentageToBounties = percent(14);\n\n\n\n\n\n        // REAL.totalSupply() -> Tokens minted during the contribution\n\n        //  totalTokens  -> Total tokens that should be after the allocation\n\n        //                   of devTokens and reserve\n\n        //  percentageToContributors -> Which percentage should go to the\n\n        //                               contribution participants\n\n        //                               (x per 10**18 format)\n\n        //  percent(100) -> 100% in (x per 10**18 format)\n\n        //\n\n        //                       percentageToContributors\n\n        //  REAL.totalSupply() = -------------------------- * totalTokens  =>\n\n        //                             percent(100)\n\n        //\n\n        //\n\n        //                            percent(100)\n\n        //  =>  totalTokens = ---------------------------- * REAL.totalSupply()\n\n        //                      percentageToContributors\n\n        //\n\n        uint256 totalTokens = REAL.totalSupply().mul(percent(100)).div(percentageToContributors);\n\n\n\n\n\n        //\n\n        //                    percentageToBounties\n\n        //  bountiesTokens = ----------------------- * totalTokens\n\n        //                      percentage(100)\n\n        //\n\n        assert(REAL.generateTokens(\n\n            destTokensBounties,\n\n            totalTokens.mul(percentageToBounties).div(percent(100))));\n\n\n\n        //\n\n        //                    percentageToReserve\n\n        //  reserveTokens = ----------------------- * totalTokens\n\n        //                      percentage(100)\n\n        //\n\n        assert(REAL.generateTokens(\n\n            destTokensReserve,\n\n            totalTokens.mul(percentageToReserve).div(percent(100))));\n\n\n\n\n\n        //\n\n        //                   percentageToTeam\n\n        //  teamTokens = ----------------------- * totalTokens\n\n        //                   percentage(100)\n\n        //\n\n        assert(REAL.generateTokens(\n\n            destTokensTeam,\n\n            totalTokens.mul(percentageToTeam).div(percent(100))));\n\n\n\n        REAL.changeController(realController);\n\n\n\n        Finalized();\n",
          "message": "REALCrowdsale.finalize (REALPlaceHolderMock.sol#1134-1207) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1233,
          "vulnerability_to_line": 1235,
          "vulnerability_code": "    function tokensIssued() public constant returns (uint256) {\n\n        return REAL.totalSupply();\n",
          "message": "REALCrowdsale.tokensIssued (REALPlaceHolderMock.sol#1233-1235) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1261,
          "vulnerability_to_line": 1274,
          "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n\n        if (REAL.controller() == address(this)) {\n\n            REAL.claimTokens(_token);\n\n        }\n\n        if (_token == 0x0) {\n\n            owner.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        ERC20Token token = ERC20Token(_token);\n\n        uint256 balance = token.balanceOf(this);\n\n        token.transfer(owner, balance);\n\n        ClaimedTokens(_token, owner, balance);\n",
          "message": "REALCrowdsale.claimTokens (REALPlaceHolderMock.sol#1261-1274) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1278,
          "vulnerability_to_line": 1280,
          "vulnerability_code": "    function pauseContribution() onlyOwner {\n\n        paused = true;\n",
          "message": "REALCrowdsale.pauseContribution (REALPlaceHolderMock.sol#1278-1280) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1283,
          "vulnerability_to_line": 1285,
          "vulnerability_code": "    function resumeContribution() onlyOwner {\n\n        paused = false;\n",
          "message": "REALCrowdsale.resumeContribution (REALPlaceHolderMock.sol#1283-1285) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1349,
          "vulnerability_to_line": 1352,
          "vulnerability_code": "    function changeController(address _newController) public onlyOwner {\n\n        real.changeController(_newController);\n\n        ControllerChanged(_newController);\n",
          "message": "REALPlaceHolder.changeController (REALPlaceHolderMock.sol#1349-1352) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1404,
          "vulnerability_to_line": 1417,
          "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n\n        if (real.controller() == address(this)) {\n\n            real.claimTokens(_token);\n\n        }\n\n        if (_token == 0x0) {\n\n            owner.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        ERC20Token token = ERC20Token(_token);\n\n        uint256 balance = token.balanceOf(this);\n\n        token.transfer(owner, balance);\n\n        ClaimedTokens(_token, owner, balance);\n",
          "message": "REALPlaceHolder.claimTokens (REALPlaceHolderMock.sol#1404-1417) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1443,
          "vulnerability_to_line": 1445,
          "vulnerability_code": "    function setMockedTime(uint _t) public {\n\n        mock_time = _t;\n",
          "message": "REALPlaceHolderMock.setMockedTime (REALPlaceHolderMock.sol#1443-1445) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.11;\n",
          "message": "Detected issues with version pragma in REALPlaceHolderMock.sol:\n\t- pragma solidity^0.4.11 (REALPlaceHolderMock.sol#3): it allows old versions\n\t- pragma solidity^0.4.11 (REALPlaceHolderMock.sol#608): it allows old versions\n\t- pragma solidity^0.4.11 (REALPlaceHolderMock.sol#648): it allows old versions\n\t- pragma solidity^0.4.11 (REALPlaceHolderMock.sol#706): it allows old versions\n\t- pragma solidity^0.4.11 (REALPlaceHolderMock.sol#755): it allows old versions\n\t- pragma solidity^0.4.11 (REALPlaceHolderMock.sol#1297): it allows old versions\n\t- pragma solidity^0.4.11 (REALPlaceHolderMock.sol#1426): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Controlled() { controller = msg.sender;}\n",
          "message": "Function 'Controlled.Controlled' (REALPlaceHolderMock.sol#63) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function changeController(address _newController) onlyController {\n",
          "message": "Parameter '_newController' of Controlled.changeController (REALPlaceHolderMock.sol#67) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 144,
          "vulnerability_to_line": 161,
          "vulnerability_code": "    function MiniMeToken(\n\n        address _tokenFactory,\n\n        address _parentToken,\n\n        uint _parentSnapShotBlock,\n\n        string _tokenName,\n\n        uint8 _decimalUnits,\n\n        string _tokenSymbol,\n\n        bool _transfersEnabled\n\n    ) {\n\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\n\n        name = _tokenName;                                 // Set the name\n\n        decimals = _decimalUnits;                          // Set the decimals\n\n        symbol = _tokenSymbol;                             // Set the symbol\n\n        parentToken = MiniMeToken(_parentToken);\n\n        parentSnapShotBlock = _parentSnapShotBlock;\n\n        transfersEnabled = _transfersEnabled;\n\n        creationBlock = block.number;\n",
          "message": "Function 'MiniMeToken.MiniMeToken' (REALPlaceHolderMock.sol#144-161) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 145,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _tokenFactory,\n",
          "message": "Parameter '_tokenFactory' of MiniMeToken.MiniMeToken (REALPlaceHolderMock.sol#145) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 146,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _parentToken,\n",
          "message": "Parameter '_parentToken' of MiniMeToken.MiniMeToken (REALPlaceHolderMock.sol#146) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 147,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _parentSnapShotBlock,\n",
          "message": "Parameter '_parentSnapShotBlock' of MiniMeToken.MiniMeToken (REALPlaceHolderMock.sol#147) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 148,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _tokenName,\n",
          "message": "Parameter '_tokenName' of MiniMeToken.MiniMeToken (REALPlaceHolderMock.sol#148) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint8 _decimalUnits,\n",
          "message": "Parameter '_decimalUnits' of MiniMeToken.MiniMeToken (REALPlaceHolderMock.sol#149) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _tokenSymbol,\n",
          "message": "Parameter '_tokenSymbol' of MiniMeToken.MiniMeToken (REALPlaceHolderMock.sol#150) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool _transfersEnabled\n",
          "message": "Parameter '_transfersEnabled' of MiniMeToken.MiniMeToken (REALPlaceHolderMock.sol#151) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
          "message": "Parameter '_to' of MiniMeToken.transfer (REALPlaceHolderMock.sol#172) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
          "message": "Parameter '_amount' of MiniMeToken.transfer (REALPlaceHolderMock.sol#172) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
          "message": "Parameter '_from' of MiniMeToken.transferFrom (REALPlaceHolderMock.sol#183) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
          "message": "Parameter '_to' of MiniMeToken.transferFrom (REALPlaceHolderMock.sol#183) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
          "message": "Parameter '_amount' of MiniMeToken.transferFrom (REALPlaceHolderMock.sol#183) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 206,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
          "message": "Parameter '_from' of MiniMeToken.doTransfer (REALPlaceHolderMock.sol#206) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 206,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
          "message": "Parameter '_to' of MiniMeToken.doTransfer (REALPlaceHolderMock.sol#206) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 206,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
          "message": "Parameter '_amount' of MiniMeToken.doTransfer (REALPlaceHolderMock.sol#206) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 248,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
          "message": "Parameter '_owner' of MiniMeToken.balanceOf (REALPlaceHolderMock.sol#248) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 258,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
          "message": "Parameter '_spender' of MiniMeToken.approve (REALPlaceHolderMock.sol#258) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 258,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
          "message": "Parameter '_amount' of MiniMeToken.approve (REALPlaceHolderMock.sol#258) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 282,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender\n",
          "message": "Parameter '_owner' of MiniMeToken.allowance (REALPlaceHolderMock.sol#282) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 282,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender\n",
          "message": "Parameter '_spender' of MiniMeToken.allowance (REALPlaceHolderMock.sol#282) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
          "message": "Parameter '_spender' of MiniMeToken.approveAndCall (REALPlaceHolderMock.sol#294) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
          "message": "Parameter '_amount' of MiniMeToken.approveAndCall (REALPlaceHolderMock.sol#294) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
          "message": "Parameter '_extraData' of MiniMeToken.approveAndCall (REALPlaceHolderMock.sol#294) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 323,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
          "message": "Parameter '_owner' of MiniMeToken.balanceOfAt (REALPlaceHolderMock.sol#323) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 323,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
          "message": "Parameter '_blockNumber' of MiniMeToken.balanceOfAt (REALPlaceHolderMock.sol#323) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 349,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
          "message": "Parameter '_blockNumber' of MiniMeToken.totalSupplyAt (REALPlaceHolderMock.sol#349) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 385,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _cloneTokenName,\n",
          "message": "Parameter '_cloneTokenName' of MiniMeToken.createCloneToken (REALPlaceHolderMock.sol#385) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 386,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint8 _cloneDecimalUnits,\n",
          "message": "Parameter '_cloneDecimalUnits' of MiniMeToken.createCloneToken (REALPlaceHolderMock.sol#386) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 387,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _cloneTokenSymbol,\n",
          "message": "Parameter '_cloneTokenSymbol' of MiniMeToken.createCloneToken (REALPlaceHolderMock.sol#387) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 388,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _snapshotBlock,\n",
          "message": "Parameter '_snapshotBlock' of MiniMeToken.createCloneToken (REALPlaceHolderMock.sol#388) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 389,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool _transfersEnabled\n",
          "message": "Parameter '_transfersEnabled' of MiniMeToken.createCloneToken (REALPlaceHolderMock.sol#389) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 416,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
          "message": "Parameter '_owner' of MiniMeToken.generateTokens (REALPlaceHolderMock.sol#416) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 416,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
          "message": "Parameter '_amount' of MiniMeToken.generateTokens (REALPlaceHolderMock.sol#416) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 433,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
          "message": "Parameter '_owner' of MiniMeToken.destroyTokens (REALPlaceHolderMock.sol#433) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 433,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
          "message": "Parameter '_amount' of MiniMeToken.destroyTokens (REALPlaceHolderMock.sol#433) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 452,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n",
          "message": "Parameter '_transfersEnabled' of MiniMeToken.enableTransfers (REALPlaceHolderMock.sol#452) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 464,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n",
          "message": "Parameter '_block' of MiniMeToken.getValueAt (REALPlaceHolderMock.sol#464) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 491,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\n",
          "message": "Parameter '_value' of MiniMeToken.updateValueAtNow (REALPlaceHolderMock.sol#491) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 507,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n",
          "message": "Parameter '_addr' of MiniMeToken.isContract (REALPlaceHolderMock.sol#507) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 537,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function claimTokens(address _token) onlyController {\n",
          "message": "Parameter '_token' of MiniMeToken.claimTokens (REALPlaceHolderMock.sol#537) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 584,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _parentToken,\n",
          "message": "Parameter '_parentToken' of MiniMeTokenFactory.createCloneToken (REALPlaceHolderMock.sol#584) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 585,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _snapshotBlock,\n",
          "message": "Parameter '_snapshotBlock' of MiniMeTokenFactory.createCloneToken (REALPlaceHolderMock.sol#585) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 586,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _tokenName,\n",
          "message": "Parameter '_tokenName' of MiniMeTokenFactory.createCloneToken (REALPlaceHolderMock.sol#586) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 587,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint8 _decimalUnits,\n",
          "message": "Parameter '_decimalUnits' of MiniMeTokenFactory.createCloneToken (REALPlaceHolderMock.sol#587) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 588,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _tokenSymbol,\n",
          "message": "Parameter '_tokenSymbol' of MiniMeTokenFactory.createCloneToken (REALPlaceHolderMock.sol#588) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 589,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool _transfersEnabled\n",
          "message": "Parameter '_transfersEnabled' of MiniMeTokenFactory.createCloneToken (REALPlaceHolderMock.sol#589) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 625,
          "vulnerability_to_line": 627,
          "vulnerability_code": "    function Owned() {\n\n        owner = msg.sender;\n",
          "message": "Function 'Owned.Owned' (REALPlaceHolderMock.sol#625-627) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 634,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function changeOwner(address _newOwner) onlyOwner {\n",
          "message": "Parameter '_newOwner' of Owned.changeOwner (REALPlaceHolderMock.sol#634) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 932,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function proxyPayment(address _th) public payable notPaused initialized contributionOpen returns (bool) {\n",
          "message": "Parameter '_th' of REALCrowdsale.proxyPayment (REALPlaceHolderMock.sol#932) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 944,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n",
          "message": "Parameter '' of REALCrowdsale.onTransfer (REALPlaceHolderMock.sol#944) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 944,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n",
          "message": "Parameter '_scope_0' of REALCrowdsale.onTransfer (REALPlaceHolderMock.sol#944) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 944,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n",
          "message": "Parameter '_scope_1' of REALCrowdsale.onTransfer (REALPlaceHolderMock.sol#944) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 948,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n",
          "message": "Parameter '' of REALCrowdsale.onApprove (REALPlaceHolderMock.sol#948) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 948,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n",
          "message": "Parameter '_scope_0' of REALCrowdsale.onApprove (REALPlaceHolderMock.sol#948) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 948,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n",
          "message": "Parameter '_scope_1' of REALCrowdsale.onApprove (REALPlaceHolderMock.sol#948) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 849,
          "vulnerability_to_line": 851,
          "vulnerability_code": "    function REALCrowdsale() {\n\n        paused = false;\n",
          "message": "Function 'REALCrowdsale.REALCrowdsale' (REALPlaceHolderMock.sol#849-851) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 864,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _real,\n",
          "message": "Parameter '_real' of REALCrowdsale.initialize (REALPlaceHolderMock.sol#864) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 865,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _realController,\n",
          "message": "Parameter '_realController' of REALCrowdsale.initialize (REALPlaceHolderMock.sol#865) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 866,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _startBlock,\n",
          "message": "Parameter '_startBlock' of REALCrowdsale.initialize (REALPlaceHolderMock.sol#866) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 867,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _endBlock,\n",
          "message": "Parameter '_endBlock' of REALCrowdsale.initialize (REALPlaceHolderMock.sol#867) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 868,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _destEthTeam,\n",
          "message": "Parameter '_destEthTeam' of REALCrowdsale.initialize (REALPlaceHolderMock.sol#868) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 869,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _destTokensReserve,\n",
          "message": "Parameter '_destTokensReserve' of REALCrowdsale.initialize (REALPlaceHolderMock.sol#869) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 870,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _destTokensTeam,\n",
          "message": "Parameter '_destTokensTeam' of REALCrowdsale.initialize (REALPlaceHolderMock.sol#870) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 871,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _destTokensBounties\n",
          "message": "Parameter '_destTokensBounties' of REALCrowdsale.initialize (REALPlaceHolderMock.sol#871) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 909,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n",
          "message": "Parameter '_th' of REALCrowdsale.setGuaranteedAddress (REALPlaceHolderMock.sol#909) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 909,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n",
          "message": "Parameter '_limit' of REALCrowdsale.setGuaranteedAddress (REALPlaceHolderMock.sol#909) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 952,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function buyNormal(address _th) internal {\n",
          "message": "Parameter '_th' of REALCrowdsale.buyNormal (REALPlaceHolderMock.sol#952) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 982,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function buyGuaranteed(address _th) internal {\n",
          "message": "Parameter '_th' of REALCrowdsale.buyGuaranteed (REALPlaceHolderMock.sol#982) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 997,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function doBuy(address _th, uint256 _toFund, bool _guaranteed) internal {\n",
          "message": "Parameter '_th' of REALCrowdsale.doBuy (REALPlaceHolderMock.sol#997) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 997,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function doBuy(address _th, uint256 _toFund, bool _guaranteed) internal {\n",
          "message": "Parameter '_toFund' of REALCrowdsale.doBuy (REALPlaceHolderMock.sol#997) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 997,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function doBuy(address _th, uint256 _toFund, bool _guaranteed) internal {\n",
          "message": "Parameter '_guaranteed' of REALCrowdsale.doBuy (REALPlaceHolderMock.sol#997) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1216,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isContract(address _sender) constant internal returns (bool) {\n",
          "message": "Parameter '_sender' of REALCrowdsale.isContract (REALPlaceHolderMock.sol#1216) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1261,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n",
          "message": "Parameter '_token' of REALCrowdsale.claimTokens (REALPlaceHolderMock.sol#1261) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 789,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 constant public fundingLimit = 100000 ether;\n",
          "message": "Constant 'REALCrowdsale.fundingLimit' (REALPlaceHolderMock.sol#789) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 790,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 constant public failSafeLimit = 200000 ether;\n",
          "message": "Constant 'REALCrowdsale.failSafeLimit' (REALPlaceHolderMock.sol#790) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 791,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 constant public maxGuaranteedLimit = 30000 ether;\n",
          "message": "Constant 'REALCrowdsale.maxGuaranteedLimit' (REALPlaceHolderMock.sol#791) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 792,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 constant public exchangeRate = 220;\n",
          "message": "Constant 'REALCrowdsale.exchangeRate' (REALPlaceHolderMock.sol#792) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 793,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 constant public maxGasPrice = 50000000000;\n",
          "message": "Constant 'REALCrowdsale.maxGasPrice' (REALPlaceHolderMock.sol#793) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 794,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 constant public maxCallFrequency = 100;\n",
          "message": "Constant 'REALCrowdsale.maxCallFrequency' (REALPlaceHolderMock.sol#794) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 796,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 constant public bonus1cap = 25000 ether;\n",
          "message": "Constant 'REALCrowdsale.bonus1cap' (REALPlaceHolderMock.sol#796) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 797,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 constant public bonus1 = 25;\n",
          "message": "Constant 'REALCrowdsale.bonus1' (REALPlaceHolderMock.sol#797) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 798,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 constant public bonus2cap = 50000 ether;\n",
          "message": "Constant 'REALCrowdsale.bonus2cap' (REALPlaceHolderMock.sol#798) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 799,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 constant public bonus2 = 20;\n",
          "message": "Constant 'REALCrowdsale.bonus2' (REALPlaceHolderMock.sol#799) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 800,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 constant public bonus3cap = 100000 ether;\n",
          "message": "Constant 'REALCrowdsale.bonus3cap' (REALPlaceHolderMock.sol#800) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 801,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 constant public bonus3 = 15;\n",
          "message": "Constant 'REALCrowdsale.bonus3' (REALPlaceHolderMock.sol#801) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 802,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 constant public bonus4cap = 150000 ether;\n",
          "message": "Constant 'REALCrowdsale.bonus4cap' (REALPlaceHolderMock.sol#802) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 803,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 constant public bonus4 = 5;\n",
          "message": "Constant 'REALCrowdsale.bonus4' (REALPlaceHolderMock.sol#803) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 805,
          "vulnerability_to_line": null,
          "vulnerability_code": "    MiniMeToken public REAL;\n",
          "message": "Variable 'REALCrowdsale.REAL' (REALPlaceHolderMock.sol#805) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1360,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function proxyPayment(address) public payable returns (bool) {\n",
          "message": "Parameter '' of REALPlaceHolder.proxyPayment (REALPlaceHolderMock.sol#1360) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1364,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function onTransfer(address _from, address, uint256) public returns (bool) {\n",
          "message": "Parameter '_from' of REALPlaceHolder.onTransfer (REALPlaceHolderMock.sol#1364) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1364,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function onTransfer(address _from, address, uint256) public returns (bool) {\n",
          "message": "Parameter '' of REALPlaceHolder.onTransfer (REALPlaceHolderMock.sol#1364) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1364,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function onTransfer(address _from, address, uint256) public returns (bool) {\n",
          "message": "Parameter '_scope_0' of REALPlaceHolder.onTransfer (REALPlaceHolderMock.sol#1364) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1368,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function onApprove(address _from, address, uint256) public returns (bool) {\n",
          "message": "Parameter '_from' of REALPlaceHolder.onApprove (REALPlaceHolderMock.sol#1368) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1368,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function onApprove(address _from, address, uint256) public returns (bool) {\n",
          "message": "Parameter '' of REALPlaceHolder.onApprove (REALPlaceHolderMock.sol#1368) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1368,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function onApprove(address _from, address, uint256) public returns (bool) {\n",
          "message": "Parameter '_scope_0' of REALPlaceHolder.onApprove (REALPlaceHolderMock.sol#1368) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1339,
          "vulnerability_to_line": 1343,
          "vulnerability_code": "    function REALPlaceHolder(address _owner, address _real, address _contribution) {\n\n        owner = _owner;\n\n        real = MiniMeToken(_real);\n\n        contribution = REALCrowdsale(_contribution);\n",
          "message": "Function 'REALPlaceHolder.REALPlaceHolder' (REALPlaceHolderMock.sol#1339-1343) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1339,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function REALPlaceHolder(address _owner, address _real, address _contribution) {\n",
          "message": "Parameter '_owner' of REALPlaceHolder.REALPlaceHolder (REALPlaceHolderMock.sol#1339) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1339,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function REALPlaceHolder(address _owner, address _real, address _contribution) {\n",
          "message": "Parameter '_real' of REALPlaceHolder.REALPlaceHolder (REALPlaceHolderMock.sol#1339) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1339,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function REALPlaceHolder(address _owner, address _real, address _contribution) {\n",
          "message": "Parameter '_contribution' of REALPlaceHolder.REALPlaceHolder (REALPlaceHolderMock.sol#1339) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1349,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function changeController(address _newController) public onlyOwner {\n",
          "message": "Parameter '_newController' of REALPlaceHolder.changeController (REALPlaceHolderMock.sol#1349) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1372,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferable(address _from) internal returns (bool) {\n",
          "message": "Parameter '_from' of REALPlaceHolder.transferable (REALPlaceHolderMock.sol#1372) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1404,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n",
          "message": "Parameter '_token' of REALPlaceHolder.claimTokens (REALPlaceHolderMock.sol#1404) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1434,
          "vulnerability_to_line": 1437,
          "vulnerability_code": "    function REALPlaceHolderMock(address _owner, address _real, address _contribution)\n\n            REALPlaceHolder(_owner, _real, _contribution) {\n\n        mock_time = now;\n",
          "message": "Function 'REALPlaceHolderMock.REALPlaceHolderMock' (REALPlaceHolderMock.sol#1434-1437) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1443,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMockedTime(uint _t) public {\n",
          "message": "Parameter '_t' of REALPlaceHolderMock.setMockedTime (REALPlaceHolderMock.sol#1443) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1432,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint mock_time;\n",
          "message": "Variable 'REALPlaceHolderMock.mock_time' (REALPlaceHolderMock.sol#1432) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 495,
          "vulnerability_to_line": null,
          "vulnerability_code": "               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 248,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 282,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 310,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function totalSupply() constant returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 323,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 349,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 464,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 507,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 679,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 683,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 687,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 691,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 723,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 747,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 1216,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isContract(address _sender) constant internal returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 1233,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function tokensIssued() public constant returns (uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 1238,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function totalCollected() public constant returns (uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 1248,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBlockNumber() internal constant returns (uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 258,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 476,
          "vulnerability_to_line": null,
          "vulnerability_code": "        while (max > min) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract TokenController {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 863,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function initialize(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 909,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 608,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 648,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 706,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 755,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1297,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1426,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 787,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 1329,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_TX_ORIGIN",
          "vulnerability_from_line": 1217,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return tx.origin != _sender;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 919,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function () public payable notPaused {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function proxyPayment(address _owner) payable returns(bool);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function onApprove(address _owner, address _spender, uint _amount)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Controlled() { controller = msg.sender;}\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function changeController(address _newController) onlyController {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 144,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function MiniMeToken(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 248,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 258,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 282,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 310,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function totalSupply() constant returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 323,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 349,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 384,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function createCloneToken(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 416,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 433,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 452,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 524,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ()  payable {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 537,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function claimTokens(address _token) onlyController {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 583,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function createCloneToken(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 625,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Owned() {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 634,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function changeOwner(address _newOwner) onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 639,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function acceptOwnership() {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 723,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 729,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) returns (bool success);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 736,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 742,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) returns (bool success);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 747,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 849,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function REALCrowdsale() {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1278,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function pauseContribution() onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1283,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function resumeContribution() onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1339,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function REALPlaceHolder(address _owner, address _real, address _contribution) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1434,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function REALPlaceHolderMock(address _owner, address _real, address _contribution)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => Checkpoint[]) balances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => mapping (address => uint256)) allowed;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 119,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Checkpoint[] totalSupplyHistory;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1432,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint mock_time;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 494,
          "vulnerability_to_line": null,
          "vulnerability_code": "        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string public name;                //The Token's name: e.g. DigixDAO Tokens\n",
          "message": null
        },
        {
          "name": "Transaction-Ordering Dependence (TOD)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 583,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function createCloneToken(\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 674,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint c = a + b;\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Concurrency bug",
          "vulnerability_from_line": 526,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\n",
          "message": null
        },
        {
          "name": "Concurrency bug",
          "vulnerability_from_line": 539,
          "vulnerability_to_line": null,
          "vulnerability_code": "            controller.transfer(this.balance);\n",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 526,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 469,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 494,
          "vulnerability_to_line": null,
          "vulnerability_code": "        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 497,
          "vulnerability_to_line": null,
          "vulnerability_code": "               newCheckPoint.value = uint128(_value);\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 601,
          "vulnerability_to_line": null,
          "vulnerability_code": "        newToken.changeController(msg.sender);\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 913,
          "vulnerability_to_line": null,
          "vulnerability_code": "        reservedGuaranteed = reservedGuaranteed + _limit;\n",
          "message": null
        },
        {
          "name": "Concurrency bug",
          "vulnerability_from_line": 1409,
          "vulnerability_to_line": null,
          "vulnerability_code": "            owner.transfer(this.balance);\n",
          "message": null
        },
        {
          "name": "Concurrency bug",
          "vulnerability_from_line": 1409,
          "vulnerability_to_line": null,
          "vulnerability_code": "            owner.transfer(this.balance);\n",
          "message": null
        }
      ]
    }
  }
}