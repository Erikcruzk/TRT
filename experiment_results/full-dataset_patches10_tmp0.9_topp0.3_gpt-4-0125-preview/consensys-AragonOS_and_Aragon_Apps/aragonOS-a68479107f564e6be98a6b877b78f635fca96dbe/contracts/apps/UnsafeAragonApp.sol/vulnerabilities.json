{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 518,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory calldata = abi.encodeWithSelector(sig, _script, _input, _blacklist);\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 291,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 292,
          "vulnerability_to_line": null,
          "vulnerability_code": "        // Immediately petrify base (non-proxy) instances of inherited contracts on deploy.\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 293,
          "vulnerability_to_line": null,
          "vulnerability_code": "        // This renders them uninitializable (and unusable without a proxy).\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": "        petrify();\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 751,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 752,
          "vulnerability_to_line": null,
          "vulnerability_code": "        // Removes auto petrifying; simulates a delete at INITIALIZATION_BLOCK_POSITION\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 753,
          "vulnerability_to_line": null,
          "vulnerability_code": "        INITIALIZATION_BLOCK_POSITION.setStorageUint256(0);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 754,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 144,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(a <= MAX_UINT64, ERROR_NUMBER_TOO_BIG);\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_90"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 13,
          "vulnerability_code": "    function getStorageBool(bytes32 position) internal view returns (bool data) {\n\n        assembly { data := sload(position) }\n",
          "message": "UnstructuredStorage.getStorageBool (UnsafeAragonApp.sol#11-13) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 17,
          "vulnerability_code": "    function getStorageAddress(bytes32 position) internal view returns (address data) {\n\n        assembly { data := sload(position) }\n",
          "message": "UnstructuredStorage.getStorageAddress (UnsafeAragonApp.sol#15-17) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": 21,
          "vulnerability_code": "    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\n\n        assembly { data := sload(position) }\n",
          "message": "UnstructuredStorage.getStorageBytes32 (UnsafeAragonApp.sol#19-21) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": 25,
          "vulnerability_code": "    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\n\n        assembly { data := sload(position) }\n",
          "message": "UnstructuredStorage.getStorageUint256 (UnsafeAragonApp.sol#23-25) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 363,
          "vulnerability_to_line": 371,
          "vulnerability_code": "    function isContract(address _target) internal view returns (bool) {\n\n        if (_target == address(0)) {\n\n            return false;\n\n        }\n\n\n\n        uint256 size;\n\n        assembly { size := extcodesize(_target) }\n\n        return size > 0;\n",
          "message": "IsContract.isContract (UnsafeAragonApp.sol#363-371) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 536,
          "vulnerability_to_line": 548,
          "vulnerability_code": "    function returnedDataDecoded() internal pure returns (bytes ret) {\n\n        assembly {\n\n            let size := returndatasize\n\n            switch size\n\n            case 0 {}\n\n            default {\n\n                ret := mload(0x40) // free mem ptr get\n\n                mstore(0x40, add(ret, add(size, 0x20))) // free mem ptr set\n\n                returndatacopy(ret, 0x20, sub(size, 0x20)) // copy return data\n\n            }\n\n        }\n\n        return ret;\n",
          "message": "EVMScriptRunner.returnedDataDecoded (UnsafeAragonApp.sol#536-548) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 702,
          "vulnerability_to_line": 721,
          "vulnerability_code": "    function canPerform(address _sender, bytes32 _role, uint256[] _params) public view returns (bool) {\n\n        if (!hasInitialized()) {\n\n            return false;\n\n        }\n\n\n\n        IKernel linkedKernel = kernel();\n\n        if (address(linkedKernel) == address(0)) {\n\n            return false;\n\n        }\n\n\n\n        bytes memory how; // no need to init memory as it is never used\n\n        if (_params.length > 0) {\n\n            uint256 byteLength = _params.length * 32;\n\n            assembly {\n\n                how := _params // forced casting\n\n                mstore(how, byteLength)\n\n            }\n\n        }\n\n        return linkedKernel.hasPermission(_sender, address(this), _role, how);\n",
          "message": "AragonApp.canPerform (UnsafeAragonApp.sol#702-721) is declared view but contains assembly code\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 394,
          "vulnerability_to_line": 405,
          "vulnerability_code": "    function transferToVault(address _token) external {\n\n        require(allowRecoverability(_token), ERROR_DISALLOWED);\n\n        address vault = getRecoveryVault();\n\n        require(isContract(vault), ERROR_VAULT_NOT_CONTRACT);\n\n\n\n        if (_token == ETH) {\n\n            vault.transfer(address(this).balance);\n\n        } else {\n\n            uint256 amount = ERC20(_token).balanceOf(this);\n\n            ERC20(_token).transfer(vault, amount);\n\n        }\n",
          "message": "VaultRecoverable.transferToVault (UnsafeAragonApp.sol#394-405) does not use the value returned by external calls:\n\t-ERC20(_token).transfer(vault,amount) (UnsafeAragonApp.sol#403)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 13,
          "vulnerability_code": "    function getStorageBool(bytes32 position) internal view returns (bool data) {\n\n        assembly { data := sload(position) }\n",
          "message": "UnstructuredStorage.getStorageBool uses assembly (UnsafeAragonApp.sol#11-13)\n\t- UnsafeAragonApp.sol#12-13\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 17,
          "vulnerability_code": "    function getStorageAddress(bytes32 position) internal view returns (address data) {\n\n        assembly { data := sload(position) }\n",
          "message": "UnstructuredStorage.getStorageAddress uses assembly (UnsafeAragonApp.sol#15-17)\n\t- UnsafeAragonApp.sol#16-17\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": 21,
          "vulnerability_code": "    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\n\n        assembly { data := sload(position) }\n",
          "message": "UnstructuredStorage.getStorageBytes32 uses assembly (UnsafeAragonApp.sol#19-21)\n\t- UnsafeAragonApp.sol#20-21\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": 25,
          "vulnerability_code": "    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\n\n        assembly { data := sload(position) }\n",
          "message": "UnstructuredStorage.getStorageUint256 uses assembly (UnsafeAragonApp.sol#23-25)\n\t- UnsafeAragonApp.sol#24-25\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": 29,
          "vulnerability_code": "    function setStorageBool(bytes32 position, bool data) internal {\n\n        assembly { sstore(position, data) }\n",
          "message": "UnstructuredStorage.setStorageBool uses assembly (UnsafeAragonApp.sol#27-29)\n\t- UnsafeAragonApp.sol#28-29\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": 33,
          "vulnerability_code": "    function setStorageAddress(bytes32 position, address data) internal {\n\n        assembly { sstore(position, data) }\n",
          "message": "UnstructuredStorage.setStorageAddress uses assembly (UnsafeAragonApp.sol#31-33)\n\t- UnsafeAragonApp.sol#32-33\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": 37,
          "vulnerability_code": "    function setStorageBytes32(bytes32 position, bytes32 data) internal {\n\n        assembly { sstore(position, data) }\n",
          "message": "UnstructuredStorage.setStorageBytes32 uses assembly (UnsafeAragonApp.sol#35-37)\n\t- UnsafeAragonApp.sol#36-37\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": 41,
          "vulnerability_code": "    function setStorageUint256(bytes32 position, uint256 data) internal {\n\n        assembly { sstore(position, data) }\n",
          "message": "UnstructuredStorage.setStorageUint256 uses assembly (UnsafeAragonApp.sol#39-41)\n\t- UnsafeAragonApp.sol#40-41\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 363,
          "vulnerability_to_line": 371,
          "vulnerability_code": "    function isContract(address _target) internal view returns (bool) {\n\n        if (_target == address(0)) {\n\n            return false;\n\n        }\n\n\n\n        uint256 size;\n\n        assembly { size := extcodesize(_target) }\n\n        return size > 0;\n",
          "message": "IsContract.isContract uses assembly (UnsafeAragonApp.sol#363-371)\n\t- UnsafeAragonApp.sol#369-370\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 536,
          "vulnerability_to_line": 548,
          "vulnerability_code": "    function returnedDataDecoded() internal pure returns (bytes ret) {\n\n        assembly {\n\n            let size := returndatasize\n\n            switch size\n\n            case 0 {}\n\n            default {\n\n                ret := mload(0x40) // free mem ptr get\n\n                mstore(0x40, add(ret, add(size, 0x20))) // free mem ptr set\n\n                returndatacopy(ret, 0x20, sub(size, 0x20)) // copy return data\n\n            }\n\n        }\n\n        return ret;\n",
          "message": "EVMScriptRunner.returnedDataDecoded uses assembly (UnsafeAragonApp.sol#536-548)\n\t- UnsafeAragonApp.sol#537-547\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 702,
          "vulnerability_to_line": 721,
          "vulnerability_code": "    function canPerform(address _sender, bytes32 _role, uint256[] _params) public view returns (bool) {\n\n        if (!hasInitialized()) {\n\n            return false;\n\n        }\n\n\n\n        IKernel linkedKernel = kernel();\n\n        if (address(linkedKernel) == address(0)) {\n\n            return false;\n\n        }\n\n\n\n        bytes memory how; // no need to init memory as it is never used\n\n        if (_params.length > 0) {\n\n            uint256 byteLength = _params.length * 32;\n\n            assembly {\n\n                how := _params // forced casting\n\n                mstore(how, byteLength)\n\n            }\n\n        }\n\n        return linkedKernel.hasPermission(_sender, address(this), _role, how);\n",
          "message": "AragonApp.canPerform uses assembly (UnsafeAragonApp.sol#702-721)\n\t- UnsafeAragonApp.sol#715-719\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\n",
          "message": "IACL.hasPermission (UnsafeAragonApp.sol#58) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function acl() public view returns (IACL);\n",
          "message": "IKernel.acl (UnsafeAragonApp.sol#90) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\n",
          "message": "IKernel.hasPermission (UnsafeAragonApp.sol#91) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setApp(bytes32 namespace, bytes32 appId, address app) public;\n",
          "message": "IKernel.setApp (UnsafeAragonApp.sol#93) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getApp(bytes32 namespace, bytes32 appId) public view returns (address);\n",
          "message": "IKernel.getApp (UnsafeAragonApp.sol#94) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 269,
          "vulnerability_to_line": 271,
          "vulnerability_code": "    function isPetrified() public view returns (bool) {\n\n        return getInitializationBlock() == PETRIFIED_BLOCK;\n",
          "message": "Petrifiable.isPetrified (UnsafeAragonApp.sol#269-271) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 310,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function totalSupply() public view returns (uint256);\n",
          "message": "ERC20.totalSupply (UnsafeAragonApp.sol#310) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 312,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _who) public view returns (uint256);\n",
          "message": "ERC20.balanceOf (UnsafeAragonApp.sol#312) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 314,
          "vulnerability_to_line": 315,
          "vulnerability_code": "    function allowance(address _owner, address _spender)\n",
          "message": "ERC20.allowance (UnsafeAragonApp.sol#314-315) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 317,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool);\n",
          "message": "ERC20.transfer (UnsafeAragonApp.sol#317) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 319,
          "vulnerability_to_line": 320,
          "vulnerability_code": "    function approve(address _spender, uint256 _value)\n",
          "message": "ERC20.approve (UnsafeAragonApp.sol#319-320) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 322,
          "vulnerability_to_line": 323,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value)\n",
          "message": "ERC20.transferFrom (UnsafeAragonApp.sol#322-323) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 456,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getScriptExecutor(bytes script) public view returns (IEVMScriptExecutor);\n",
          "message": "IEVMScriptRegistry.getScriptExecutor (UnsafeAragonApp.sol#456) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 507,
          "vulnerability_to_line": 526,
          "vulnerability_code": "    function runScript(bytes _script, bytes _input, address[] _blacklist)\n\n        internal\n\n        isInitialized\n\n        protectState\n\n        returns (bytes)\n\n    {\n\n        // TODO: Too much data flying around, maybe extracting spec id here is cheaper\n\n        IEVMScriptExecutor executor = getExecutor(_script);\n\n        require(address(executor) != address(0), ERROR_EXECUTOR_UNAVAILABLE);\n\n\n\n        bytes4 sig = executor.execScript.selector;\n\n        bytes memory calldata = abi.encodeWithSelector(sig, _script, _input, _blacklist);\n\n        require(address(executor).delegatecall(calldata), ERROR_EXECUTION_REVERTED);\n\n\n\n        bytes memory output = returnedDataDecoded();\n\n\n\n        emit ScriptResult(address(executor), _script, _input, output);\n\n\n\n        return output;\n",
          "message": "Low level call in EVMScriptRunner.runScript (UnsafeAragonApp.sol#507-526):\n\t-require(bool,string)(address(executor).delegatecall(calldata),ERROR_EXECUTION_REVERTED) UnsafeAragonApp.sol#519\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 124,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setKernel(IKernel _kernel) internal {\n",
          "message": "Parameter '_kernel' of AppStorage.setKernel (UnsafeAragonApp.sol#124) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setAppId(bytes32 _appId) internal {\n",
          "message": "Parameter '_appId' of AppStorage.setAppId (UnsafeAragonApp.sol#128) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function initializedAt(uint256 _blockNumber) internal onlyInit {\n",
          "message": "Parameter '_blockNumber' of Initializable.initializedAt (UnsafeAragonApp.sol#252) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 363,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isContract(address _target) internal view returns (bool) {\n",
          "message": "Parameter '_target' of IsContract.isContract (UnsafeAragonApp.sol#363) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 394,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferToVault(address _token) external {\n",
          "message": "Parameter '_token' of VaultRecoverable.transferToVault (UnsafeAragonApp.sol#394) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 503,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\n",
          "message": "Parameter '_script' of EVMScriptRunner.getExecutor (UnsafeAragonApp.sol#503) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 507,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function runScript(bytes _script, bytes _input, address[] _blacklist)\n",
          "message": "Parameter '_script' of EVMScriptRunner.runScript (UnsafeAragonApp.sol#507) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 507,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function runScript(bytes _script, bytes _input, address[] _blacklist)\n",
          "message": "Parameter '_input' of EVMScriptRunner.runScript (UnsafeAragonApp.sol#507) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 507,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function runScript(bytes _script, bytes _input, address[] _blacklist)\n",
          "message": "Parameter '_blacklist' of EVMScriptRunner.runScript (UnsafeAragonApp.sol#507) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 571,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(bytes32 _a) internal pure returns (uint256[] r) {\n",
          "message": "Parameter '_a' of ACLSyntaxSugar.arr (UnsafeAragonApp.sol#571) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 575,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\n",
          "message": "Parameter '_a' of ACLSyntaxSugar.arr (UnsafeAragonApp.sol#575) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 575,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\n",
          "message": "Parameter '_b' of ACLSyntaxSugar.arr (UnsafeAragonApp.sol#575) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 579,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(address _a) internal pure returns (uint256[] r) {\n",
          "message": "Parameter '_a' of ACLSyntaxSugar.arr (UnsafeAragonApp.sol#579) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 583,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(address _a, address _b) internal pure returns (uint256[] r) {\n",
          "message": "Parameter '_a' of ACLSyntaxSugar.arr (UnsafeAragonApp.sol#583) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 583,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(address _a, address _b) internal pure returns (uint256[] r) {\n",
          "message": "Parameter '_b' of ACLSyntaxSugar.arr (UnsafeAragonApp.sol#583) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 587,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\n",
          "message": "Parameter '_a' of ACLSyntaxSugar.arr (UnsafeAragonApp.sol#587) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 587,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\n",
          "message": "Parameter '_b' of ACLSyntaxSugar.arr (UnsafeAragonApp.sol#587) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 587,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\n",
          "message": "Parameter '_c' of ACLSyntaxSugar.arr (UnsafeAragonApp.sol#587) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 591,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(address _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\n",
          "message": "Parameter '_a' of ACLSyntaxSugar.arr (UnsafeAragonApp.sol#591) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 591,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(address _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\n",
          "message": "Parameter '_b' of ACLSyntaxSugar.arr (UnsafeAragonApp.sol#591) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 591,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(address _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\n",
          "message": "Parameter '_c' of ACLSyntaxSugar.arr (UnsafeAragonApp.sol#591) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 591,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(address _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\n",
          "message": "Parameter '_d' of ACLSyntaxSugar.arr (UnsafeAragonApp.sol#591) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 595,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\n",
          "message": "Parameter '_a' of ACLSyntaxSugar.arr (UnsafeAragonApp.sol#595) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 595,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\n",
          "message": "Parameter '_b' of ACLSyntaxSugar.arr (UnsafeAragonApp.sol#595) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 599,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\n",
          "message": "Parameter '_a' of ACLSyntaxSugar.arr (UnsafeAragonApp.sol#599) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 599,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\n",
          "message": "Parameter '_b' of ACLSyntaxSugar.arr (UnsafeAragonApp.sol#599) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 599,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\n",
          "message": "Parameter '_c' of ACLSyntaxSugar.arr (UnsafeAragonApp.sol#599) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 599,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\n",
          "message": "Parameter '_d' of ACLSyntaxSugar.arr (UnsafeAragonApp.sol#599) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 599,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\n",
          "message": "Parameter '_e' of ACLSyntaxSugar.arr (UnsafeAragonApp.sol#599) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 603,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\n",
          "message": "Parameter '_a' of ACLSyntaxSugar.arr (UnsafeAragonApp.sol#603) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 603,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\n",
          "message": "Parameter '_b' of ACLSyntaxSugar.arr (UnsafeAragonApp.sol#603) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 603,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\n",
          "message": "Parameter '_c' of ACLSyntaxSugar.arr (UnsafeAragonApp.sol#603) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 607,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\n",
          "message": "Parameter '_a' of ACLSyntaxSugar.arr (UnsafeAragonApp.sol#607) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 607,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\n",
          "message": "Parameter '_b' of ACLSyntaxSugar.arr (UnsafeAragonApp.sol#607) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 607,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\n",
          "message": "Parameter '_c' of ACLSyntaxSugar.arr (UnsafeAragonApp.sol#607) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 611,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(uint256 _a) internal pure returns (uint256[] r) {\n",
          "message": "Parameter '_a' of ACLSyntaxSugar.arr (UnsafeAragonApp.sol#611) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 616,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\n",
          "message": "Parameter '_a' of ACLSyntaxSugar.arr (UnsafeAragonApp.sol#616) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 616,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\n",
          "message": "Parameter '_b' of ACLSyntaxSugar.arr (UnsafeAragonApp.sol#616) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 622,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\n",
          "message": "Parameter '_a' of ACLSyntaxSugar.arr (UnsafeAragonApp.sol#622) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 622,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\n",
          "message": "Parameter '_b' of ACLSyntaxSugar.arr (UnsafeAragonApp.sol#622) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 622,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\n",
          "message": "Parameter '_c' of ACLSyntaxSugar.arr (UnsafeAragonApp.sol#622) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 629,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\n",
          "message": "Parameter '_a' of ACLSyntaxSugar.arr (UnsafeAragonApp.sol#629) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 629,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\n",
          "message": "Parameter '_b' of ACLSyntaxSugar.arr (UnsafeAragonApp.sol#629) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 629,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\n",
          "message": "Parameter '_c' of ACLSyntaxSugar.arr (UnsafeAragonApp.sol#629) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 629,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\n",
          "message": "Parameter '_d' of ACLSyntaxSugar.arr (UnsafeAragonApp.sol#629) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 637,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\n",
          "message": "Parameter '_a' of ACLSyntaxSugar.arr (UnsafeAragonApp.sol#637) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 637,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\n",
          "message": "Parameter '_b' of ACLSyntaxSugar.arr (UnsafeAragonApp.sol#637) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 637,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\n",
          "message": "Parameter '_c' of ACLSyntaxSugar.arr (UnsafeAragonApp.sol#637) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 637,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\n",
          "message": "Parameter '_d' of ACLSyntaxSugar.arr (UnsafeAragonApp.sol#637) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 637,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\n",
          "message": "Parameter '_e' of ACLSyntaxSugar.arr (UnsafeAragonApp.sol#637) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 649,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\n",
          "message": "Parameter '_x' of ACLHelpers.decodeParamOp (UnsafeAragonApp.sol#649) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 653,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\n",
          "message": "Parameter '_x' of ACLHelpers.decodeParamId (UnsafeAragonApp.sol#653) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 657,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\n",
          "message": "Parameter '_x' of ACLHelpers.decodeParamsList (UnsafeAragonApp.sol#657) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 702,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function canPerform(address _sender, bytes32 _role, uint256[] _params) public view returns (bool) {\n",
          "message": "Parameter '_sender' of AragonApp.canPerform (UnsafeAragonApp.sol#702) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 702,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function canPerform(address _sender, bytes32 _role, uint256[] _params) public view returns (bool) {\n",
          "message": "Parameter '_role' of AragonApp.canPerform (UnsafeAragonApp.sol#702) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 702,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function canPerform(address _sender, bytes32 _role, uint256[] _params) public view returns (bool) {\n",
          "message": "Parameter '_params' of AragonApp.canPerform (UnsafeAragonApp.sol#702) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32 internal constant PINNED_CODE_POSITION = 0xdee64df20d65e53d7f51cb6ab6d921a0a6a638a91e942e1d8d02df28e31c038e;\n",
          "message": "AppStorage.PINNED_CODE_POSITION (UnsafeAragonApp.sol#114) is never used in UnsafeAragonApp\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 350,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address public constant ETH = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 569,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr() internal pure returns (uint256[]) {}\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getStorageBool(bytes32 position) internal view returns (bool data) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getStorageAddress(bytes32 position) internal view returns (address data) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 204,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 263,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 288,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 302,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 344,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 359,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 380,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 426,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 440,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 465,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 491,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 565,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 670,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 739,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private constant ERROR_NUMBER_TOO_BIG = \"UINT64_NUMBER_TOO_BIG\";\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 213,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private constant ERROR_ALREADY_INITIALIZED = \"INIT_ALREADY_INITIALIZED\";\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 214,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private constant ERROR_NOT_INITIALIZED = \"INIT_NOT_INITIALIZED\";\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 386,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private constant ERROR_DISALLOWED = \"RECOVER_DISALLOWED\";\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 387,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private constant ERROR_VAULT_NOT_CONTRACT = \"RECOVER_VAULT_NOT_CONTRACT\";\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 497,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private constant ERROR_EXECUTOR_UNAVAILABLE = \"EVMRUN_EXECUTOR_UNAVAILABLE\";\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 498,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private constant ERROR_EXECUTION_REVERTED = \"EVMRUN_EXECUTION_REVERTED\";\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 499,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private constant ERROR_PROTECTED_STATE_MODIFIED = \"EVMRUN_PROTECTED_STATE_MODIFIED\";\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 682,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private constant ERROR_AUTH_FAILED = \"APP_AUTH_FAILED\";\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 536,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function returnedDataDecoded() internal pure returns (bytes ret) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getStorageBool(bytes32 position) internal view returns (bool data) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getStorageAddress(bytes32 position) internal view returns (address data) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 363,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isContract(address _target) internal view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 702,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function canPerform(address _sender, bytes32 _role, uint256[] _params) public view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 657,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 456,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getScriptExecutor(bytes script) public view returns (IEVMScriptExecutor);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 503,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 507,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function runScript(bytes _script, bytes _input, address[] _blacklist)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 507,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function runScript(bytes _script, bytes _input, address[] _blacklist)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 507,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function runScript(bytes _script, bytes _input, address[] _blacklist)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 511,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns (bytes)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 536,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function returnedDataDecoded() internal pure returns (bytes ret) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 569,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr() internal pure returns (uint256[]) {}\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 571,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(bytes32 _a) internal pure returns (uint256[] r) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 575,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 579,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(address _a) internal pure returns (uint256[] r) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 583,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(address _a, address _b) internal pure returns (uint256[] r) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 587,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 591,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(address _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 595,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 599,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 603,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 607,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 611,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(uint256 _a) internal pure returns (uint256[] r) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 616,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 622,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 629,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 637,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 702,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function canPerform(address _sender, bytes32 _role, uint256[] _params) public view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly { data := sload(position) }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly { data := sload(position) }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly { data := sload(position) }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly { data := sload(position) }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly { sstore(position, data) }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly { sstore(position, data) }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly { sstore(position, data) }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly { sstore(position, data) }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 537,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 715,
          "vulnerability_to_line": null,
          "vulnerability_code": "            assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 456,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getScriptExecutor(bytes script) public view returns (IEVMScriptExecutor);\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 702,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function canPerform(address _sender, bytes32 _role, uint256[] _params) public view returns (bool) {\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 503,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 702,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function canPerform(address _sender, bytes32 _role, uint256[] _params) public view returns (bool) {\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Dependence on predictable environment variable (SWC 120)",
          "vulnerability_from_line": 703,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (!hasInitialized()) {\n",
          "message": "A control flow decision is made based on The block.number environment variable.\nThe block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-120"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}