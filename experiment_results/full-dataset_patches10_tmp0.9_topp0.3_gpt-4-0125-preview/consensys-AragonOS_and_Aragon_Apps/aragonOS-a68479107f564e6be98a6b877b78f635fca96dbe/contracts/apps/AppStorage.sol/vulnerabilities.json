{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_22"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 13,
          "vulnerability_code": "    function getStorageBool(bytes32 position) internal view returns (bool data) {\n\n        assembly { data := sload(position) }\n",
          "message": "UnstructuredStorage.getStorageBool (AppStorage.sol#11-13) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 17,
          "vulnerability_code": "    function getStorageAddress(bytes32 position) internal view returns (address data) {\n\n        assembly { data := sload(position) }\n",
          "message": "UnstructuredStorage.getStorageAddress (AppStorage.sol#15-17) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": 21,
          "vulnerability_code": "    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\n\n        assembly { data := sload(position) }\n",
          "message": "UnstructuredStorage.getStorageBytes32 (AppStorage.sol#19-21) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": 25,
          "vulnerability_code": "    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\n\n        assembly { data := sload(position) }\n",
          "message": "UnstructuredStorage.getStorageUint256 (AppStorage.sol#23-25) is declared view but contains assembly code\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 13,
          "vulnerability_code": "    function getStorageBool(bytes32 position) internal view returns (bool data) {\n\n        assembly { data := sload(position) }\n",
          "message": "UnstructuredStorage.getStorageBool uses assembly (AppStorage.sol#11-13)\n\t- AppStorage.sol#12-13\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 17,
          "vulnerability_code": "    function getStorageAddress(bytes32 position) internal view returns (address data) {\n\n        assembly { data := sload(position) }\n",
          "message": "UnstructuredStorage.getStorageAddress uses assembly (AppStorage.sol#15-17)\n\t- AppStorage.sol#16-17\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": 21,
          "vulnerability_code": "    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\n\n        assembly { data := sload(position) }\n",
          "message": "UnstructuredStorage.getStorageBytes32 uses assembly (AppStorage.sol#19-21)\n\t- AppStorage.sol#20-21\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": 25,
          "vulnerability_code": "    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\n\n        assembly { data := sload(position) }\n",
          "message": "UnstructuredStorage.getStorageUint256 uses assembly (AppStorage.sol#23-25)\n\t- AppStorage.sol#24-25\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": 29,
          "vulnerability_code": "    function setStorageBool(bytes32 position, bool data) internal {\n\n        assembly { sstore(position, data) }\n",
          "message": "UnstructuredStorage.setStorageBool uses assembly (AppStorage.sol#27-29)\n\t- AppStorage.sol#28-29\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": 33,
          "vulnerability_code": "    function setStorageAddress(bytes32 position, address data) internal {\n\n        assembly { sstore(position, data) }\n",
          "message": "UnstructuredStorage.setStorageAddress uses assembly (AppStorage.sol#31-33)\n\t- AppStorage.sol#32-33\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": 37,
          "vulnerability_code": "    function setStorageBytes32(bytes32 position, bytes32 data) internal {\n\n        assembly { sstore(position, data) }\n",
          "message": "UnstructuredStorage.setStorageBytes32 uses assembly (AppStorage.sol#35-37)\n\t- AppStorage.sol#36-37\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": 41,
          "vulnerability_code": "    function setStorageUint256(bytes32 position, uint256 data) internal {\n\n        assembly { sstore(position, data) }\n",
          "message": "UnstructuredStorage.setStorageUint256 uses assembly (AppStorage.sol#39-41)\n\t- AppStorage.sol#40-41\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\n",
          "message": "IACL.hasPermission (AppStorage.sol#58) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function acl() public view returns (IACL);\n",
          "message": "IKernel.acl (AppStorage.sol#90) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\n",
          "message": "IKernel.hasPermission (AppStorage.sol#91) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setApp(bytes32 namespace, bytes32 appId, address app) public;\n",
          "message": "IKernel.setApp (AppStorage.sol#93) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getApp(bytes32 namespace, bytes32 appId) public view returns (address);\n",
          "message": "IKernel.getApp (AppStorage.sol#94) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": 118,
          "vulnerability_code": "    function kernel() public view returns (IKernel) {\n\n        return IKernel(KERNEL_POSITION.getStorageAddress());\n",
          "message": "AppStorage.kernel (AppStorage.sol#116-118) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 120,
          "vulnerability_to_line": 122,
          "vulnerability_code": "    function appId() public view returns (bytes32) {\n\n        return APP_ID_POSITION.getStorageBytes32();\n",
          "message": "AppStorage.appId (AppStorage.sol#120-122) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 124,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setKernel(IKernel _kernel) internal {\n",
          "message": "Parameter '_kernel' of AppStorage.setKernel (AppStorage.sol#124) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setAppId(bytes32 _appId) internal {\n",
          "message": "Parameter '_appId' of AppStorage.setAppId (AppStorage.sol#128) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32 internal constant PINNED_CODE_POSITION = 0xdee64df20d65e53d7f51cb6ab6d921a0a6a638a91e942e1d8d02df28e31c038e;\n",
          "message": "AppStorage.PINNED_CODE_POSITION (AppStorage.sol#114) is never used in AppStorage\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getStorageBool(bytes32 position) internal view returns (bool data) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getStorageAddress(bytes32 position) internal view returns (address data) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getStorageBool(bytes32 position) internal view returns (bool data) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getStorageAddress(bytes32 position) internal view returns (address data) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly { data := sload(position) }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly { data := sload(position) }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly { data := sload(position) }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly { data := sload(position) }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly { sstore(position, data) }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly { sstore(position, data) }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly { sstore(position, data) }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly { sstore(position, data) }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}