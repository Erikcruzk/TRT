{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_11"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": 74,
          "vulnerability_code": "    function isContract(address _target) internal view returns (bool) {\n\n        if (_target == address(0)) {\n\n            return false;\n\n        }\n\n\n\n        uint256 size;\n\n        assembly { size := extcodesize(_target) }\n\n        return size > 0;\n",
          "message": "IsContract.isContract (VaultRecoverable.sol#66-74) is declared view but contains assembly code\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": 124,
          "vulnerability_code": "    function transferToVault(address _token) external {\n\n        require(allowRecoverability(_token), ERROR_DISALLOWED);\n\n        address vault = getRecoveryVault();\n\n        require(isContract(vault), ERROR_VAULT_NOT_CONTRACT);\n\n\n\n        if (_token == ETH) {\n\n            vault.transfer(address(this).balance);\n\n        } else {\n\n            uint256 amount = ERC20(_token).balanceOf(this);\n\n            ERC20(_token).transfer(vault, amount);\n\n        }\n",
          "message": "VaultRecoverable.transferToVault (VaultRecoverable.sol#113-124) does not use the value returned by external calls:\n\t-ERC20(_token).transfer(vault,amount) (VaultRecoverable.sol#122)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": 74,
          "vulnerability_code": "    function isContract(address _target) internal view returns (bool) {\n\n        if (_target == address(0)) {\n\n            return false;\n\n        }\n\n\n\n        uint256 size;\n\n        assembly { size := extcodesize(_target) }\n\n        return size > 0;\n",
          "message": "IsContract.isContract uses assembly (VaultRecoverable.sol#66-74)\n\t- VaultRecoverable.sol#72-73\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function totalSupply() public view returns (uint256);\n",
          "message": "ERC20.totalSupply (VaultRecoverable.sol#13) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _who) public view returns (uint256);\n",
          "message": "ERC20.balanceOf (VaultRecoverable.sol#15) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 18,
          "vulnerability_code": "    function allowance(address _owner, address _spender)\n",
          "message": "ERC20.allowance (VaultRecoverable.sol#17-18) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool);\n",
          "message": "ERC20.transfer (VaultRecoverable.sol#20) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": 23,
          "vulnerability_code": "    function approve(address _spender, uint256 _value)\n",
          "message": "ERC20.approve (VaultRecoverable.sol#22-23) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": 26,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value)\n",
          "message": "ERC20.transferFrom (VaultRecoverable.sol#25-26) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isContract(address _target) internal view returns (bool) {\n",
          "message": "Parameter '_target' of IsContract.isContract (VaultRecoverable.sol#66) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferToVault(address _token) external {\n",
          "message": "Parameter '_token' of VaultRecoverable.transferToVault (VaultRecoverable.sol#113) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address public constant ETH = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private constant ERROR_DISALLOWED = \"RECOVER_DISALLOWED\";\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 106,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private constant ERROR_VAULT_NOT_CONTRACT = \"RECOVER_VAULT_NOT_CONTRACT\";\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isContract(address _target) internal view returns (bool) {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}