{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 518,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory calldata = abi.encodeWithSelector(sig, _script, _input, _blacklist);\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1171,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory checkCalldata = abi.encodeWithSelector(sig, _who, _where, _what, _how);\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1058,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint256 i = 0; i < _encodedParams.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1892,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < arrA.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1918,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < arrA.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1985,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < arrA.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 2011,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < arrA.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 2078,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < arrA.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 2104,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < arrA.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 2171,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < arrA.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 2197,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < arrA.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 2342,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < ba.length; i ++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 2940,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < params.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 291,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 292,
          "vulnerability_to_line": null,
          "vulnerability_code": "        // Immediately petrify base (non-proxy) instances of inherited contracts on deploy.\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 293,
          "vulnerability_to_line": null,
          "vulnerability_code": "        // This renders them uninitializable (and unusable without a proxy).\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": "        petrify();\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1058,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint256 i = 0; i < _encodedParams.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1892,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < arrA.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1918,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < arrA.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1985,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < arrA.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 2011,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < arrA.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 2078,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < arrA.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 2104,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < arrA.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 2171,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < arrA.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 2197,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < arrA.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 2342,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < ba.length; i ++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 2940,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < params.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 144,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(a <= MAX_UINT64, ERROR_NUMBER_TOO_BIG);\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 999,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (whoParams != NO_PERMISSION && evalParams(whoParams, _who, _where, _what, _how)) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1000,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return true;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1001,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1004,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (anyParams != NO_PERMISSION && evalParams(anyParams, ANY_ENTITY, _where, _what, _how)) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1005,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return true;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1006,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1140,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (r1 && Op(_param.op) == Op.OR) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1141,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return true;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1142,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1144,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (!r1 && Op(_param.op) == Op.AND) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1145,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return false;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1146,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1058,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint256 i = 0; i < _encodedParams.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1892,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < arrA.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1918,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < arrA.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1985,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < arrA.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 2011,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < arrA.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 2078,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < arrA.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 2104,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < arrA.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 2171,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < arrA.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 2197,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < arrA.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 2342,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < ba.length; i ++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 2377,
          "vulnerability_to_line": null,
          "vulnerability_code": "            size++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 2385,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (; j < size; j++)\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 2410,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint j = 0; j < i; j++)\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 2496,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < tl; i++)\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 2500,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < vl; i++)\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 2570,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < sl; i++)\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 2574,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < tl; i++)\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 2606,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < sl; i++)\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 2610,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < t0l; i++)\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 2614,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < t1l; i++)\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 2940,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < params.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 1260,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant ADDRESS_NULL = 0x0000000000000000000000000000000000000000;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 791,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address public constant BURN_ENTITY = address(1); // address(0) is already used as \"no permission manager\"\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 350,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address public constant ETH = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 912,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _setPermissionManager(address(0), _app, _role);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 2931,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool allow = _evalParam(paramHash, 0, address(0), address(0), bytes32(0), args);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 1263,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32 constant BYTES32_NULL = 0x0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_BALANCE_EQUALITY",
          "vulnerability_from_line": 2260,
          "vulnerability_to_line": null,
          "vulnerability_code": "        result = (a.balance == b);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_BALANCE_EQUALITY",
          "vulnerability_from_line": 2276,
          "vulnerability_to_line": null,
          "vulnerability_code": "        result = (a.balance != b);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_BALANCE_EQUALITY",
          "vulnerability_from_line": 2291,
          "vulnerability_to_line": null,
          "vulnerability_code": "        result = (a.balance == 0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_BALANCE_EQUALITY",
          "vulnerability_from_line": 2306,
          "vulnerability_to_line": null,
          "vulnerability_code": "        result = (a.balance != 0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 1058,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint256 i = 0; i < _encodedParams.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 1892,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < arrA.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 1918,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < arrA.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 1985,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < arrA.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 2011,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < arrA.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 2078,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < arrA.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 2104,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < arrA.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 2171,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < arrA.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 2197,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < arrA.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 2342,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < ba.length; i ++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 2940,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < params.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 569,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr() internal pure returns (uint256[]) {}\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 2653,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function canPerform(address, address, bytes32, uint256[]) external view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 2669,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function canPerform(address, address, bytes32, uint256[]) external view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getStorageBool(bytes32 position) internal view returns (bool data) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getStorageAddress(bytes32 position) internal view returns (address data) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 1940,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function lengthEqual(uint[] arr, uint length, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 1959,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function lengthNotEqual(uint[] arr, uint length, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 2033,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function lengthEqual(int[] arr, uint length, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 2052,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function lengthNotEqual(int[] arr, uint length, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 2126,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function lengthEqual(address[] arr, uint length, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 2145,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function lengthNotEqual(address[] arr, uint length, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 2219,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function lengthEqual(bytes32[] arr, uint length, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 2238,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function lengthNotEqual(bytes32[] arr, uint length, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1058,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint256 i = 0; i < _encodedParams.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1892,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < arrA.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1918,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < arrA.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1985,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < arrA.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 2011,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < arrA.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 2078,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < arrA.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 2104,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < arrA.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 2171,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < arrA.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 2197,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < arrA.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 2342,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < ba.length; i ++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 2496,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < tl; i++)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 2500,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < vl; i++)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 2570,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < sl; i++)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 2574,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < tl; i++)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 2606,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < sl; i++)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 2610,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < t0l; i++)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 2614,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < t1l; i++)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 2940,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < params.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 204,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 263,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 288,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 302,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 344,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 359,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 380,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 426,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 440,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 465,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 491,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 565,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 670,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 739,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1221,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.17;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private constant ERROR_NUMBER_TOO_BIG = \"UINT64_NUMBER_TOO_BIG\";\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 213,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private constant ERROR_ALREADY_INITIALIZED = \"INIT_ALREADY_INITIALIZED\";\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 214,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private constant ERROR_NOT_INITIALIZED = \"INIT_NOT_INITIALIZED\";\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 386,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private constant ERROR_DISALLOWED = \"RECOVER_DISALLOWED\";\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 387,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private constant ERROR_VAULT_NOT_CONTRACT = \"RECOVER_VAULT_NOT_CONTRACT\";\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 497,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private constant ERROR_EXECUTOR_UNAVAILABLE = \"EVMRUN_EXECUTOR_UNAVAILABLE\";\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 498,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private constant ERROR_EXECUTION_REVERTED = \"EVMRUN_EXECUTION_REVERTED\";\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 499,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private constant ERROR_PROTECTED_STATE_MODIFIED = \"EVMRUN_PROTECTED_STATE_MODIFIED\";\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 682,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private constant ERROR_AUTH_FAILED = \"APP_AUTH_FAILED\";\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 795,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private constant ERROR_AUTH_INIT_KERNEL = \"ACL_AUTH_INIT_KERNEL\";\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 796,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private constant ERROR_AUTH_NO_MANAGER = \"ACL_AUTH_NO_MANAGER\";\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 797,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private constant ERROR_EXISTENT_MANAGER = \"ACL_EXISTENT_MANAGER\";\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 536,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function returnedDataDecoded() internal pure returns (bytes ret) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getStorageBool(bytes32 position) internal view returns (bool data) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getStorageAddress(bytes32 position) internal view returns (address data) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 363,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isContract(address _target) internal view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 702,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function canPerform(address _sender, bytes32 _role, uint256[] _params) public view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 986,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function hasPermission(address _who, address _where, bytes32 _what, bytes memory _how) public view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 1167,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function checkOracle(IACLOracle _oracleAddr, address _who, address _where, bytes32 _what, uint256[] _how) internal view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 2669,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function canPerform(address, address, bytes32, uint256[]) external view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 657,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 456,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getScriptExecutor(bytes script) public view returns (IEVMScriptExecutor);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 503,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 507,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function runScript(bytes _script, bytes _input, address[] _blacklist)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 507,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function runScript(bytes _script, bytes _input, address[] _blacklist)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 507,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function runScript(bytes _script, bytes _input, address[] _blacklist)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 511,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns (bytes)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 536,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function returnedDataDecoded() internal pure returns (bytes ret) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 569,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr() internal pure returns (uint256[]) {}\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 571,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(bytes32 _a) internal pure returns (uint256[] r) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 575,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 579,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(address _a) internal pure returns (uint256[] r) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 583,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(address _a, address _b) internal pure returns (uint256[] r) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 587,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 591,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(address _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 595,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 599,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 603,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 607,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 611,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(uint256 _a) internal pure returns (uint256[] r) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 616,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 622,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 629,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 637,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 702,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function canPerform(address _sender, bytes32 _role, uint256[] _params) public view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 868,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function grantPermissionP(address _entity, address _app, bytes32 _role, uint256[] _params)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1021,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256[] _how\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1053,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _saveParams(uint256[] _encodedParams) internal returns (bytes32) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1074,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256[] _how\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1114,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _evalLogic(Param _param, bytes32 _paramsHash, address _who, address _where, bytes32 _what, uint256[] _how)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1114,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _evalLogic(Param _param, bytes32 _paramsHash, address _who, address _where, bytes32 _what, uint256[] _how)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1167,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function checkOracle(IACLOracle _oracleAddr, address _who, address _where, bytes32 _what, uint256[] _how) internal view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1292,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function fail(string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1310,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function equal(string a, string b, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1310,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function equal(string a, string b, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1310,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function equal(string a, string b, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1329,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function notEqual(string a, string b, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1329,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function notEqual(string a, string b, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1329,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function notEqual(string a, string b, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1347,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isEmpty(string str, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1347,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isEmpty(string str, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1365,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isNotEmpty(string str, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1365,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isNotEmpty(string str, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1386,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function equal(bytes32 a, bytes32 b, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1402,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function notEqual(bytes32 a, bytes32 b, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1417,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isZero(bytes32 bts, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1432,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isNotZero(bytes32 bts, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1450,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function equal(address a, address b, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1465,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function notEqual(address a, address b, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1480,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isZero(address addr, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1495,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isNotZero(address addr, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1512,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isTrue(bool b, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1527,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isFalse(bool b, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1543,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function equal(bool a, bool b, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1562,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function notEqual(bool a, bool b, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1583,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function equal(uint a, uint b, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1602,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function notEqual(uint a, uint b, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1621,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isAbove(uint a, uint b, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1640,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isAtLeast(uint a, uint b, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1659,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isBelow(uint a, uint b, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1678,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isAtMost(uint a, uint b, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1696,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isZero(uint number, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1714,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isNotZero(uint number, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1735,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function equal(int a, int b, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1754,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function notEqual(int a, int b, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1773,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isAbove(int a, int b, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1792,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isAtLeast(int a, int b, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1811,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isBelow(int a, int b, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1830,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isAtMost(int a, int b, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1848,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isZero(int number, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1866,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isNotZero(int number, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1889,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function equal(uint[] arrA, uint[] arrB, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1889,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function equal(uint[] arrA, uint[] arrB, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1889,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function equal(uint[] arrA, uint[] arrB, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1915,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function notEqual(uint[] arrA, uint[] arrB, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1915,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function notEqual(uint[] arrA, uint[] arrB, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1915,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function notEqual(uint[] arrA, uint[] arrB, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1940,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function lengthEqual(uint[] arr, uint length, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1940,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function lengthEqual(uint[] arr, uint length, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1959,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function lengthNotEqual(uint[] arr, uint length, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1959,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function lengthNotEqual(uint[] arr, uint length, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1982,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function equal(int[] arrA, int[] arrB, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1982,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function equal(int[] arrA, int[] arrB, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1982,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function equal(int[] arrA, int[] arrB, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2008,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function notEqual(int[] arrA, int[] arrB, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2008,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function notEqual(int[] arrA, int[] arrB, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2008,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function notEqual(int[] arrA, int[] arrB, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2033,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function lengthEqual(int[] arr, uint length, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2033,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function lengthEqual(int[] arr, uint length, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2052,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function lengthNotEqual(int[] arr, uint length, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2052,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function lengthNotEqual(int[] arr, uint length, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2075,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function equal(address[] arrA, address[] arrB, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2075,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function equal(address[] arrA, address[] arrB, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2075,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function equal(address[] arrA, address[] arrB, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2101,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function notEqual(address[] arrA, address[] arrB, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2101,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function notEqual(address[] arrA, address[] arrB, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2101,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function notEqual(address[] arrA, address[] arrB, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2126,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function lengthEqual(address[] arr, uint length, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2126,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function lengthEqual(address[] arr, uint length, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2145,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function lengthNotEqual(address[] arr, uint length, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2145,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function lengthNotEqual(address[] arr, uint length, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2168,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function equal(bytes32[] arrA, bytes32[] arrB, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2168,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function equal(bytes32[] arrA, bytes32[] arrB, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2168,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function equal(bytes32[] arrA, bytes32[] arrB, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2194,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function notEqual(bytes32[] arrA, bytes32[] arrB, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2194,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function notEqual(bytes32[] arrA, bytes32[] arrB, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2194,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function notEqual(bytes32[] arrA, bytes32[] arrB, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2219,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function lengthEqual(bytes32[] arr, uint length, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2219,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function lengthEqual(bytes32[] arr, uint length, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2238,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function lengthNotEqual(bytes32[] arr, uint length, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2238,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function lengthNotEqual(bytes32[] arr, uint length, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2259,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceEqual(address a, uint b, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2275,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceNotEqual(address a, uint b, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2290,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceIsZero(address a, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2305,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceIsNotZero(address a, string message) public returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2319,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _report(bool result, string message) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2336,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _stringsEqual(string a, string b) internal pure returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2336,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _stringsEqual(string a, string b) internal pure returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2358,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _itoa(int n, uint8 radix) internal pure returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2399,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _utoa(uint n, uint8 radix) internal pure returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2441,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _ltoa(bool val) internal pure returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2483,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _tag(string value, string tag) internal pure returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2483,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _tag(string value, string tag) internal pure returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2483,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _tag(string value, string tag) internal pure returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2515,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _tag(int value, string tag) internal pure returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2515,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _tag(int value, string tag) internal pure returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2529,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _tag(uint value, string tag) internal pure returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2529,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _tag(uint value, string tag) internal pure returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2543,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _tag(bool value, string tag) internal pure returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2543,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _tag(bool value, string tag) internal pure returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2557,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _appendTagged(string tagged, string str) internal pure returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2557,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _appendTagged(string tagged, string str) internal pure returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2557,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _appendTagged(string tagged, string str) internal pure returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2591,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _appendTagged(string tagged0, string tagged1, string str) internal pure returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2591,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _appendTagged(string tagged0, string tagged1, string str) internal pure returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2591,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _appendTagged(string tagged0, string tagged1, string str) internal pure returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 2591,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _appendTagged(string tagged0, string tagged1, string str) internal pure returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly { data := sload(position) }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly { data := sload(position) }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly { data := sload(position) }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly { data := sload(position) }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly { sstore(position, data) }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly { sstore(position, data) }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly { sstore(position, data) }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly { sstore(position, data) }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 537,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 715,
          "vulnerability_to_line": null,
          "vulnerability_code": "            assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 989,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1175,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1184,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly { size := returndatasize }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1190,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 2670,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 456,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getScriptExecutor(bytes script) public view returns (IEVMScriptExecutor);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1260,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant ADDRESS_NULL = 0x0000000000000000000000000000000000000000;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1263,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32 constant BYTES32_NULL = 0x0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1266,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string constant STRING_NULL = \"\";\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1268,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 constant ZERO = uint8(byte('0'));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1269,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 constant A = uint8(byte('a'));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1271,
          "vulnerability_to_line": null,
          "vulnerability_code": "    byte constant MINUS = byte('-');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2660,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool modifyState;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "Solc experienced a fatal error"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}