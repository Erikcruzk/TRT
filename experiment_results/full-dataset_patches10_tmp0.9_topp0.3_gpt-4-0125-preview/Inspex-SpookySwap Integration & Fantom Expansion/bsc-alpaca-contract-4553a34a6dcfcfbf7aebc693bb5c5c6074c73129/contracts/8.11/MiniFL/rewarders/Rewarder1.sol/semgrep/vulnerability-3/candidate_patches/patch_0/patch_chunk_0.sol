function beginMigration() external onlyOwner {
    require(isInitialized, "MiniFL: Wrong initialization status");
    require(migrator != address(0), "MiniFL: Migrator not set");
    require(paused(), "MiniFL: Contract not paused");
    require(block.timestamp - FINISH_MIGRATION_TIMESTAMP > 1 days, "MiniFL: Migration cooldown");
    require(IERC20(lpToken).balanceOf(address(this)) == 0, "MiniFL: Burn remaining LP tokens first");

    uint256 _len = rewarder.length();
    for (uint256 i = 0; i < _len; ++i) {
        address _rewarder = rewarder.rewarders(i);
        uint256 _pid = rewarder.rewarderPid(_rewarder);
        (IERC20Upgradeable _stakingToken, , , ) = masterChef.poolInfo(_pid);
        // Ensure the rewarder has no pending rewards
        require(IRewarder(_rewarder).pendingToken(_pid, address(this)) == 0, "MiniFL: Rewards not harvested");
        _stakingToken.safeApprove(_rewarder, 0);
        _stakingToken.safeApprove(migrator, type(uint256).max);
    }
    IERC20Upgradeable(rewardToken).safeApprove(migrator, type(uint256).max);

    isMigrating = true;
    emit LogBeginMigration();
}