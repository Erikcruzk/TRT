function beginMigration() external {
    require(msg.sender == governance, "not governance");
    require(isInitialized, "not initialized");

    address[] memory path = new address[](2);
    path[0] = address(token0);
    path[1] = address(token1);

    uint256 _token0Bal = IERC20(token0).balanceOf(address(this));
    uint256 _token1Bal = IERC20(token1).balanceOf(address(this));
    if (_token0Bal > 0 && _token1Bal > 0) {
        IERC20(token0).approve(address(router), _token0Bal);
        IERC20(token1).approve(address(router), _token1Bal);

        uint[] memory amounts = PancakeLibraryV2.getAmountsOut(factory, _token0Bal, path);
        uint amountToken = amounts[amounts.length - 1];

        (uint amountA, uint amountB, uint liquidity) = router.addLiquidity(
            token0,
            token1,
            _token0Bal,
            _token1Bal,
            0,
            0,
            address(this),
            now + 60
        );

        emit AddLiquidity(token0, token1, amountA, amountB, liquidity);
    }
}