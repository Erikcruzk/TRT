function optimalDeposit(
    uint256 amtA,
    uint256 amtB,
    uint256 resA,
    uint256 resB
) internal pure returns (uint256 swapAmt, bool isReversed) {
    if (amtA.mul(resB) >= amtB.mul(resA)) {
        uint256 a = 998;
        uint256 b = uint256(1998).mul(resA);
        uint256 c = (amtA.mul(resB)).sub(amtB.mul(resA)).mul(1000).div(amtB.add(resB)).mul(resA);
        uint256 d = a.mul(c).mul(4);
        uint256 e = AlpacaMath.sqrt(b.mul(b).add(d));
        uint256 numerator = e.sub(b);
        uint256 denominator = a.mul(2);
        swapAmt = numerator.div(denominator);
        isReversed = false;
    } else {
        uint256 _a = 998;
        uint256 _b = uint256(1998).mul(resB);
        uint256 _c = (amtB.mul(resA)).sub(amtA.mul(resB)).mul(1000).div(amtA.add(resA)).mul(resB);
        uint256 _d = _a.mul(_c).mul(4);
        uint256 _e = AlpacaMath.sqrt(_b.mul(_b).add(_d));
        uint256 _numerator = _e.sub(_b);
        uint256 _denominator = _a.mul(2);
        swapAmt = _numerator.div(_denominator);
        isReversed = true;
    }
}