{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_7"
      ],
      "vulnerability_findings": [
        {
          "name": "pragma",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.5.12;\n",
          "message": "Different versions of Solidity is used in ExposedUniformRandomNumber.sol:\n\t- Version used: ['0.5.12', '^0.5.12']\n\t- ExposedUniformRandomNumber.sol#21 declares pragma solidity0.5.12\n\t- ExposedUniformRandomNumber.sol#69 declares pragma solidity^0.5.12\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": 74,
          "vulnerability_code": "  function uniform(uint256 _entropy, uint256 _upperBound) public pure returns (uint256) {\n\n    return UniformRandomNumber.uniform(_entropy, _upperBound);\n",
          "message": "ExposedUniformRandomNumber.uniform (ExposedUniformRandomNumber.sol#72-74) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.5.12;\n",
          "message": "Detected issues with version pragma in ExposedUniformRandomNumber.sol:\n\t- pragma solidity0.5.12 (ExposedUniformRandomNumber.sol#21): it allows old versions\n\t- pragma solidity^0.5.12 (ExposedUniformRandomNumber.sol#69): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function uniform(uint256 _entropy, uint256 _upperBound) internal pure returns (uint256) {\n",
          "message": "Parameter '_entropy' of UniformRandomNumber.uniform (ExposedUniformRandomNumber.sol#33) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function uniform(uint256 _entropy, uint256 _upperBound) internal pure returns (uint256) {\n",
          "message": "Parameter '_upperBound' of UniformRandomNumber.uniform (ExposedUniformRandomNumber.sol#33) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function uniform(uint256 _entropy, uint256 _upperBound) public pure returns (uint256) {\n",
          "message": "Parameter '_entropy' of ExposedUniformRandomNumber.uniform (ExposedUniformRandomNumber.sol#72) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function uniform(uint256 _entropy, uint256 _upperBound) public pure returns (uint256) {\n",
          "message": "Parameter '_upperBound' of ExposedUniformRandomNumber.uniform (ExposedUniformRandomNumber.sol#72) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": null,
          "vulnerability_code": "    while (true) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.12;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 min = -_upperBound % _upperBound;\n",
          "message": "The arithmetic operator can underflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "UNKNOWN INSTRUCTION: SHR"
      ],
      "vulnerability_findings": []
    }
  }
}