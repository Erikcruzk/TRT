{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 2936,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < bytes(message).length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 4094,
          "vulnerability_to_line": null,
          "vulnerability_code": "                userAssetList.length--;\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 4595,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < assets.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 4853,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < allMarkets.length; i ++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 5178,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (j = 0; j < holders.length; j++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 5182,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < vTokens.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 5188,
          "vulnerability_to_line": null,
          "vulnerability_code": "                for (j = 0; j < holders.length; j++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 5195,
          "vulnerability_to_line": null,
          "vulnerability_code": "                for (j = 0; j < holders.length; j++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 5420,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < allMarkets_.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 5429,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < allMarkets_.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 5439,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < allMarkets_.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "inefficient-state-variable-increment",
          "vulnerability_from_line": 5378,
          "vulnerability_to_line": null,
          "vulnerability_code": "        blockNumber += blocks;\n",
          "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
        },
        {
          "name": "inefficient-state-variable-increment",
          "vulnerability_from_line": 5495,
          "vulnerability_to_line": null,
          "vulnerability_code": "        blockNumber += blocks;\n",
          "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 3340,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 isLocked = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 2801,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(ComptrollerInterface comptroller_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 2802,
          "vulnerability_to_line": null,
          "vulnerability_code": "                InterestRateModel interestRateModel_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 2803,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint initialExchangeRateMantissa_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 2804,
          "vulnerability_to_line": null,
          "vulnerability_code": "                string memory name_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 2805,
          "vulnerability_to_line": null,
          "vulnerability_code": "                string memory symbol_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 2806,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint8 decimals_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 2807,
          "vulnerability_to_line": null,
          "vulnerability_code": "                address payable admin_) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 2808,
          "vulnerability_to_line": null,
          "vulnerability_code": "        // Creator of the contract is admin during initialization\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 2809,
          "vulnerability_to_line": null,
          "vulnerability_code": "        admin = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 2810,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 3195,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 3196,
          "vulnerability_to_line": null,
          "vulnerability_code": "        // Set admin to caller\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 3197,
          "vulnerability_to_line": null,
          "vulnerability_code": "        admin = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 3198,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 3323,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 3324,
          "vulnerability_to_line": null,
          "vulnerability_code": "        owner = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 3325,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 3422,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address account) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 3423,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balances[account] = uint96(totalSupply);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 3424,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit Transfer(address(0), account, totalSupply);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 3425,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 3767,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 chainId_) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 3768,
          "vulnerability_to_line": null,
          "vulnerability_code": "        wards[msg.sender] = 1;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 3769,
          "vulnerability_to_line": null,
          "vulnerability_code": "        DOMAIN_SEPARATOR = keccak256(abi.encode(\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 3770,
          "vulnerability_to_line": null,
          "vulnerability_code": "            keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 3771,
          "vulnerability_to_line": null,
          "vulnerability_code": "            keccak256(bytes(name)),\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 3772,
          "vulnerability_to_line": null,
          "vulnerability_code": "            keccak256(bytes(version)),\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 3773,
          "vulnerability_to_line": null,
          "vulnerability_code": "            chainId_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 3774,
          "vulnerability_to_line": null,
          "vulnerability_code": "            address(this)\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 3775,
          "vulnerability_to_line": null,
          "vulnerability_code": "        ));\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 3776,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 3958,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 3959,
          "vulnerability_to_line": null,
          "vulnerability_code": "        admin = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 3960,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 5355,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() Comptroller() public {}\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 5458,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(ComptrollerInterface comptroller_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 5459,
          "vulnerability_to_line": null,
          "vulnerability_code": "                InterestRateModel interestRateModel_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 5460,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint initialExchangeRateMantissa,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 5461,
          "vulnerability_to_line": null,
          "vulnerability_code": "                string memory name_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 5462,
          "vulnerability_to_line": null,
          "vulnerability_code": "                string memory symbol_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 5463,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint8 decimals_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 5464,
          "vulnerability_to_line": null,
          "vulnerability_code": "                address payable admin_)\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 5465,
          "vulnerability_to_line": null,
          "vulnerability_code": "    VBNB(\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 5466,
          "vulnerability_to_line": null,
          "vulnerability_code": "    comptroller_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 5467,
          "vulnerability_to_line": null,
          "vulnerability_code": "    interestRateModel_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 5608,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(string memory name_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 5609,
          "vulnerability_to_line": null,
          "vulnerability_code": "                string memory symbol_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 5610,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint8 decimals_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 5611,
          "vulnerability_to_line": null,
          "vulnerability_code": "                address payable admin_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 5612,
          "vulnerability_to_line": null,
          "vulnerability_code": "                ComptrollerInterface comptroller_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 5613,
          "vulnerability_to_line": null,
          "vulnerability_code": "                InterestRateModel interestRateModel_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 5614,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint initialExchangeRateMantissa)\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 5615,
          "vulnerability_to_line": null,
          "vulnerability_code": "        VBNB(comptroller_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 5616,
          "vulnerability_to_line": null,
          "vulnerability_code": "               interestRateModel_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 5617,
          "vulnerability_to_line": null,
          "vulnerability_code": "               initialExchangeRateMantissa,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 3569,
          "vulnerability_to_line": null,
          "vulnerability_code": "            Checkpoint memory cp = checkpoints[account][center];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 4013,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < len; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 4595,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < assets.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 4853,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < allMarkets.length; i ++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 4895,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i = 0; i < numMarkets; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 5182,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < vTokens.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 5394,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < m; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 5402,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < m; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 5420,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < allMarkets_.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 5429,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < allMarkets_.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 5439,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < allMarkets_.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1357,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == admin, \"only admin may initialize the market\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1358,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(accrualBlockNumber == 0 && borrowIndex == 0, \"market may only be initialized once\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1362,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(initialExchangeRateMantissa > 0, \"initial exchange rate must be greater than zero.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1366,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(err == uint(Error.NO_ERROR), \"setting comptroller failed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1374,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(err == uint(Error.NO_ERROR), \"setting interest rate model failed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1518,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(mErr == MathError.NO_ERROR, \"balance could not be calculated\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1577,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(accrueInterest() == uint(Error.NO_ERROR), \"accrue interest failed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1587,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(accrueInterest() == uint(Error.NO_ERROR), \"accrue interest failed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1598,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(err == MathError.NO_ERROR, \"borrowBalanceStored: borrowBalanceStoredInternal failed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1644,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(accrueInterest() == uint(Error.NO_ERROR), \"accrue interest failed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1655,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(err == MathError.NO_ERROR, \"exchangeRateStored: exchangeRateStoredInternal failed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1727,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(borrowRateMantissa <= borrowRateMaxMantissa, \"borrow rate is absurdly high\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1731,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(mathErr == MathError.NO_ERROR, \"could not calculate block delta\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1861,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(vars.mathErr == MathError.NO_ERROR, \"MINT_EXCHANGE_CALCULATION_FAILED\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1869,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(vars.mathErr == MathError.NO_ERROR, \"MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1872,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(vars.mathErr == MathError.NO_ERROR, \"MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1939,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(redeemTokensIn == 0 || redeemAmountIn == 0, \"one of redeemTokensIn or redeemAmountIn must be zero\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2250,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(vars.mathErr == MathError.NO_ERROR, \"REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2253,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(vars.mathErr == MathError.NO_ERROR, \"REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2348,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(amountSeizeError == uint(Error.NO_ERROR), \"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2351,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(vTokenCollateral.balanceOf(borrower) >= seizeTokens, \"LIQUIDATE_SEIZE_TOO_MUCH\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2362,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(seizeError == uint(Error.NO_ERROR), \"token seizure failed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2511,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newComptroller.isComptroller(), \"marker method returned false\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2616,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(totalReservesNew >= totalReserves, \"add reserves unexpected overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2680,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(totalReservesNew <= totalReserves, \"reduce reserves unexpected underflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2734,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newInterestRateModel.isInterestRateModel(), \"marker method returned false\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2774,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_notEntered, \"re-entered\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2906,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(err == MathError.NO_ERROR, \"cash prior math error\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2918,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == from, \"sender mismatch\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2919,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.value == amount, \"value mismatch\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 3328,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == owner, \"Should be owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 3346,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isLocked == 0, \"Token is locked\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 3524,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(signatory != address(0), \"XVS::delegateBySig: invalid signature\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 3525,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(nonce == nonces[signatory]++, \"XVS::delegateBySig: invalid nonce\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 3526,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(now <= expiry, \"XVS::delegateBySig: signature expired\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 3548,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(blockNumber < block.number, \"XVS::getPriorVotes: not yet determined\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 3592,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(src != address(0), \"XVS::_transferTokens: cannot transfer from the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 3593,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(dst != address(0), \"XVS::_transferTokens: cannot transfer to the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 3736,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(wards[msg.sender] == 1, \"VAI/not-authorized\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 3756,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((z = x + y) >= x, \"VAI math error\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 3759,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((z = x - y) <= x, \"VAI math error\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 3785,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(balanceOf[src] >= wad, \"VAI/insufficient-balance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 3787,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(allowance[src][msg.sender] >= wad, \"VAI/insufficient-allowance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 3801,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(balanceOf[usr] >= wad, \"VAI/insufficient-balance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 3803,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(allowance[usr][msg.sender] >= wad, \"VAI/insufficient-allowance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 3842,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(holder != address(0), \"VAI/invalid-address-0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 3843,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(holder == ecrecover(digest, v, r, s), \"VAI/invalid-permit\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 3844,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(expiry == 0 || now <= expiry, \"VAI/permit-expired\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 3845,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(nonce == nonces[holder]++, \"VAI/invalid-nonce\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 3963,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!protocolPaused, \"protocol is paused\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 3968,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == admin, \"only admin can\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 3973,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(markets[address(vToken)].isListed, \"venus market is not listed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 3978,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == pauseGuardian || msg.sender == admin, \"only pause guardian and admin can\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 3979,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == admin || state == true, \"only admin can unpause\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4063,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(oErr == 0, \"getAccountSnapshot failed\"); // semi-opaque error code\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4118,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!mintGuardianPaused[vToken], \"mint is paused\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4204,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(redeemTokens != 0 || redeemAmount == 0, \"redeemTokens zero\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4216,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!borrowGuardianPaused[vToken], \"borrow is paused\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4224,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(msg.sender == vToken, \"sender must be vToken\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4242,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(nextTotalBorrows < borrowCap, \"market borrow cap reached\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4425,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!seizeGuardianPaused, \"seize is paused\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4484,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!transferGuardianPaused, \"transfer is paused\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4750,
          "vulnerability_to_line": null,
          "vulnerability_code": "    \trequire(msg.sender == admin, \"only admin can set close factor\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4854,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(allMarkets[i] != vToken, \"market already added\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4888,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == admin || msg.sender == borrowCapGuardian, \"only admin or borrow cap guardian can set borrow caps\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4893,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(numMarkets != 0 && numMarkets == numBorrowCaps, \"invalid input\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4960,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newTreasuryPercent < 1e18, \"treasury percent cap overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4978,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == unitroller.admin(), \"only unitroller admin can\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4979,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(unitroller._acceptImplementation() == 0, \"not authorized\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 5001,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(market.isListed == true, \"venus market is not listed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 5184,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(markets[address(vToken)].isListed, \"not listed market\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 5261,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(adminOrInitializing(), \"only admin can set venus speed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 5296,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!mintVAIGuardianPaused && !repayVAIGuardianPaused, \"VAI is paused\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 5475,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(failTransferToAddresses[to] == false, \"TOKEN_TRANSFER_OUT_FAILED\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 1358,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(accrualBlockNumber == 0 && borrowIndex == 0, \"market may only be initialized once\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 4893,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(numMarkets != 0 && numMarkets == numBorrowCaps, \"invalid input\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 5296,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!mintVAIGuardianPaused && !repayVAIGuardianPaused, \"VAI is paused\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3491,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (spender != src && spenderAllowance != uint96(-1)) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3492,
          "vulnerability_to_line": null,
          "vulnerability_code": "            uint96 newAllowance = sub96(spenderAllowance, amount, \"XVS::transferFrom: transfer amount exceeds spender allowance\");\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3493,
          "vulnerability_to_line": null,
          "vulnerability_code": "            allowances[src][spender] = newAllowance;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3494,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3495,
          "vulnerability_to_line": null,
          "vulnerability_code": "            emit Approval(src, spender, newAllowance);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3496,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3603,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (srcRep != dstRep && amount > 0) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3604,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (srcRep != address(0)) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3605,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint32 srcRepNum = numCheckpoints[srcRep];\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3606,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3607,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint96 srcRepNew = sub96(srcRepOld, amount, \"XVS::_moveVotes: vote amount underflows\");\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3608,
          "vulnerability_to_line": null,
          "vulnerability_code": "                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3609,
          "vulnerability_to_line": null,
          "vulnerability_code": "            }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3610,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3611,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (dstRep != address(0)) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3612,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint32 dstRepNum = numCheckpoints[dstRep];\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3623,
          "vulnerability_to_line": null,
          "vulnerability_code": "      if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3624,
          "vulnerability_to_line": null,
          "vulnerability_code": "          checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3625,
          "vulnerability_to_line": null,
          "vulnerability_code": "      } else {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3626,
          "vulnerability_to_line": null,
          "vulnerability_code": "          checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3627,
          "vulnerability_to_line": null,
          "vulnerability_code": "          numCheckpoints[delegatee] = nCheckpoints + 1;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3628,
          "vulnerability_to_line": null,
          "vulnerability_code": "      }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3786,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3787,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(allowance[src][msg.sender] >= wad, \"VAI/insufficient-allowance\");\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3788,
          "vulnerability_to_line": null,
          "vulnerability_code": "            allowance[src][msg.sender] = sub(allowance[src][msg.sender], wad);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3789,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3802,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (usr != msg.sender && allowance[usr][msg.sender] != uint(-1)) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3803,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(allowance[usr][msg.sender] >= wad, \"VAI/insufficient-allowance\");\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3804,
          "vulnerability_to_line": null,
          "vulnerability_code": "            allowance[usr][msg.sender] = sub(allowance[usr][msg.sender], wad);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3805,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4787,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (newCollateralFactorMantissa != 0 && oracle.getUnderlyingPrice(vToken) == 0) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4788,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return fail(Error.PRICE_ERROR, FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4789,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 5003,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (venusSupplyState[address(vToken)].index == 0 && venusSupplyState[address(vToken)].block == 0) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 5004,
          "vulnerability_to_line": null,
          "vulnerability_code": "                venusSupplyState[address(vToken)] = VenusMarketState({\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 5005,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    index: venusInitialIndex,\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 5006,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    block: safe32(getBlockNumber(), \"block number exceeds 32 bits\")\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 5007,
          "vulnerability_to_line": null,
          "vulnerability_code": "                });\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 5008,
          "vulnerability_to_line": null,
          "vulnerability_code": "            }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 5011,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (venusBorrowState[address(vToken)].index == 0 && venusBorrowState[address(vToken)].block == 0) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 5012,
          "vulnerability_to_line": null,
          "vulnerability_code": "                venusBorrowState[address(vToken)] = VenusMarketState({\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 5013,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    index: venusInitialIndex,\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 5014,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    block: safe32(getBlockNumber(), \"block number exceeds 32 bits\")\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 5015,
          "vulnerability_to_line": null,
          "vulnerability_code": "                });\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 5016,
          "vulnerability_to_line": null,
          "vulnerability_code": "            }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 5034,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (deltaBlocks > 0 && supplySpeed > 0) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 5035,
          "vulnerability_to_line": null,
          "vulnerability_code": "            uint supplyTokens = VToken(vToken).totalSupply();\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 5036,
          "vulnerability_to_line": null,
          "vulnerability_code": "            uint venusAccrued = mul_(deltaBlocks, supplySpeed);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 5037,
          "vulnerability_to_line": null,
          "vulnerability_code": "            Double memory ratio = supplyTokens > 0 ? fraction(venusAccrued, supplyTokens) : Double({mantissa: 0});\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 5038,
          "vulnerability_to_line": null,
          "vulnerability_code": "            Double memory index = add_(Double({mantissa: supplyState.index}), ratio);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 5039,
          "vulnerability_to_line": null,
          "vulnerability_code": "            venusSupplyState[vToken] = VenusMarketState({\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 5040,
          "vulnerability_to_line": null,
          "vulnerability_code": "                index: safe224(index.mantissa, \"new index overflows\"),\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 5041,
          "vulnerability_to_line": null,
          "vulnerability_code": "                block: safe32(blockNumber, \"block number overflows\")\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 5042,
          "vulnerability_to_line": null,
          "vulnerability_code": "            });\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 5043,
          "vulnerability_to_line": null,
          "vulnerability_code": "        } else if (deltaBlocks > 0) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 5057,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (deltaBlocks > 0 && borrowSpeed > 0) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 5058,
          "vulnerability_to_line": null,
          "vulnerability_code": "            uint borrowAmount = div_(VToken(vToken).totalBorrows(), marketBorrowIndex);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 5059,
          "vulnerability_to_line": null,
          "vulnerability_code": "            uint venusAccrued = mul_(deltaBlocks, borrowSpeed);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 5060,
          "vulnerability_to_line": null,
          "vulnerability_code": "            Double memory ratio = borrowAmount > 0 ? fraction(venusAccrued, borrowAmount) : Double({mantissa: 0});\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 5061,
          "vulnerability_to_line": null,
          "vulnerability_code": "            Double memory index = add_(Double({mantissa: borrowState.index}), ratio);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 5062,
          "vulnerability_to_line": null,
          "vulnerability_code": "            venusBorrowState[vToken] = VenusMarketState({\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 5063,
          "vulnerability_to_line": null,
          "vulnerability_code": "                index: safe224(index.mantissa, \"new index overflows\"),\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 5064,
          "vulnerability_to_line": null,
          "vulnerability_code": "                block: safe32(blockNumber, \"block number overflows\")\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 5065,
          "vulnerability_to_line": null,
          "vulnerability_code": "            });\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 5066,
          "vulnerability_to_line": null,
          "vulnerability_code": "        } else if (deltaBlocks > 0) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 5086,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (supplierIndex.mantissa == 0 && supplyIndex.mantissa > 0) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 5087,
          "vulnerability_to_line": null,
          "vulnerability_code": "            supplierIndex.mantissa = venusInitialIndex;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 5088,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 5213,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (amount > 0 && amount <= venusRemaining) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 5214,
          "vulnerability_to_line": null,
          "vulnerability_code": "            xvs.transfer(user, amount);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 5215,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return 0;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 5216,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 4094,
          "vulnerability_to_line": null,
          "vulnerability_code": "                userAssetList.length--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 2936,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < bytes(message).length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 3525,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(nonce == nonces[signatory]++, \"XVS::delegateBySig: invalid nonce\");\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 3845,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(nonce == nonces[holder]++, \"VAI/invalid-nonce\");\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 4013,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < len; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 4091,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (; i < len; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 4595,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < assets.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 4853,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < allMarkets.length; i ++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 4895,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i = 0; i < numMarkets; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 5178,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (j = 0; j < holders.length; j++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 5182,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < vTokens.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 5188,
          "vulnerability_to_line": null,
          "vulnerability_code": "                for (j = 0; j < holders.length; j++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 5195,
          "vulnerability_to_line": null,
          "vulnerability_code": "                for (j = 0; j < holders.length; j++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 5394,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < m; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 5396,
          "vulnerability_to_line": null,
          "vulnerability_code": "                n++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 5402,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < m; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 5420,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < allMarkets_.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 5429,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < allMarkets_.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 5439,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < allMarkets_.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1357,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == admin, \"only admin may initialize the market\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1358,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(accrualBlockNumber == 0 && borrowIndex == 0, \"market may only be initialized once\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1362,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(initialExchangeRateMantissa > 0, \"initial exchange rate must be greater than zero.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1374,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(err == uint(Error.NO_ERROR), \"setting interest rate model failed\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1598,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(err == MathError.NO_ERROR, \"borrowBalanceStored: borrowBalanceStoredInternal failed\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1655,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(err == MathError.NO_ERROR, \"exchangeRateStored: exchangeRateStoredInternal failed\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1869,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(vars.mathErr == MathError.NO_ERROR, \"MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1872,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(vars.mathErr == MathError.NO_ERROR, \"MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1939,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(redeemTokensIn == 0 || redeemAmountIn == 0, \"one of redeemTokensIn or redeemAmountIn must be zero\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 2250,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(vars.mathErr == MathError.NO_ERROR, \"REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 2253,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(vars.mathErr == MathError.NO_ERROR, \"REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 2348,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(amountSeizeError == uint(Error.NO_ERROR), \"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 2680,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(totalReservesNew <= totalReserves, \"reduce reserves unexpected underflow\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 3524,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(signatory != address(0), \"XVS::delegateBySig: invalid signature\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 3525,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(nonce == nonces[signatory]++, \"XVS::delegateBySig: invalid nonce\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 3526,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(now <= expiry, \"XVS::delegateBySig: signature expired\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 3548,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(blockNumber < block.number, \"XVS::getPriorVotes: not yet determined\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 3592,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(src != address(0), \"XVS::_transferTokens: cannot transfer from the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 3593,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(dst != address(0), \"XVS::_transferTokens: cannot transfer to the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 3978,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == pauseGuardian || msg.sender == admin, \"only pause guardian and admin can\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 4888,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == admin || msg.sender == borrowCapGuardian, \"only admin or borrow cap guardian can set borrow caps\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "compound-borrowfresh-reentrancy",
          "vulnerability_from_line": 2136,
          "vulnerability_to_line": null,
          "vulnerability_code": "        doTransferOut(borrower, borrowAmount);\n",
          "message": "Function borrowFresh() in Compound performs state update after doTransferOut()"
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_220"
      ],
      "vulnerability_findings": [
        {
          "name": "controlled-delegatecall",
          "vulnerability_from_line": 3298,
          "vulnerability_to_line": 3313,
          "vulnerability_code": "    function () external payable {\n\n        // delegate all other functions to current implementation\n\n        (bool success, ) = comptrollerImplementation.delegatecall(msg.data);\n\n\n\n        assembly {\n\n              let free_mem_ptr := mload(0x40)\n\n              returndatacopy(free_mem_ptr, 0, returndatasize)\n\n\n\n              switch success\n\n              case 0 { revert(free_mem_ptr, returndatasize) }\n\n              default { return(free_mem_ptr, returndatasize) }\n\n        }\n\n    }\n\n}\n\n\n",
          "message": "Unitroller.fallback (VBNBHarness.sol#3298-3313) uses delegatecall to a input-controlled function id\n\t(success) = comptrollerImplementation.delegatecall(msg.data) (VBNBHarness.sol#3300-3302)\n"
        },
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 3002,
          "vulnerability_to_line": 3004,
          "vulnerability_code": "    address public comptrollerImplementation;\n\n\n",
          "message": "UnitrollerAdminStorage.comptrollerImplementation (VBNBHarness.sol#3002-3004) is never initialized. It is used in:\n\t- adminOrInitializing (VBNBHarness.sol#4985-4989)\n"
        },
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 3069,
          "vulnerability_to_line": 3070,
          "vulnerability_code": "    bool public transferGuardianPaused;\n",
          "message": "ComptrollerV1Storage.transferGuardianPaused (VBNBHarness.sol#3069-3070) is never initialized. It is used in:\n\t- transferAllowed (VBNBHarness.sol#4482-4502)\n"
        },
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 3070,
          "vulnerability_to_line": 3071,
          "vulnerability_code": "    bool public seizeGuardianPaused;\n",
          "message": "ComptrollerV1Storage.seizeGuardianPaused (VBNBHarness.sol#3070-3071) is never initialized. It is used in:\n\t- seizeAllowed (VBNBHarness.sol#4418-4448)\n"
        },
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 3071,
          "vulnerability_to_line": 3072,
          "vulnerability_code": "    mapping(address => bool) public mintGuardianPaused;\n",
          "message": "ComptrollerV1Storage.mintGuardianPaused (VBNBHarness.sol#3071-3072) is never initialized. It is used in:\n\t- mintAllowed (VBNBHarness.sol#4116-4135)\n"
        },
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 3072,
          "vulnerability_to_line": 3074,
          "vulnerability_code": "    mapping(address => bool) public borrowGuardianPaused;\n\n\n",
          "message": "ComptrollerV1Storage.borrowGuardianPaused (VBNBHarness.sol#3072-3074) is never initialized. It is used in:\n\t- borrowAllowed (VBNBHarness.sol#4214-4262)\n"
        },
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 3086,
          "vulnerability_to_line": 3088,
          "vulnerability_code": "    uint public venusRate;\n\n\n",
          "message": "ComptrollerV1Storage.venusRate (VBNBHarness.sol#3086-3088) is never initialized. It is used in:\n\t- refreshVenusSpeeds (VBNBHarness.sol#5417-5447)\n"
        },
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 3118,
          "vulnerability_to_line": 3119,
          "vulnerability_code": "    bool public mintVAIGuardianPaused;\n",
          "message": "ComptrollerV1Storage.mintVAIGuardianPaused (VBNBHarness.sol#3118-3119) is never initialized. It is used in:\n\t- setMintedVAIOf (VBNBHarness.sol#5294-5307)\n"
        },
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 3119,
          "vulnerability_to_line": 3121,
          "vulnerability_code": "    bool public repayVAIGuardianPaused;\n\n\n",
          "message": "ComptrollerV1Storage.repayVAIGuardianPaused (VBNBHarness.sol#3119-3121) is never initialized. It is used in:\n\t- setMintedVAIOf (VBNBHarness.sol#5294-5307)\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 3654,
          "vulnerability_to_line": 3661,
          "vulnerability_code": "    function getChainId() internal pure returns (uint) {\n\n        uint256 chainId;\n\n        assembly { chainId := chainid() }\n\n        return chainId;\n\n    }\n\n}\n\n\n",
          "message": "XVS.getChainId (VBNBHarness.sol#3654-3661) is declared view but contains assembly code\n"
        },
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 1263,
          "vulnerability_to_line": 1324,
          "vulnerability_code": "interface EIP20NonStandardInterface {\n\n\n\n    /**\n\n     * @notice Get the total number of tokens in circulation\n\n     * @return The supply of tokens\n\n     */\n\n    function totalSupply() external view returns (uint256);\n\n\n\n    /**\n\n     * @notice Gets the balance of the specified address\n\n     * @param owner The address from which the balance will be retrieved\n\n     * @return The balance\n\n     */\n\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n\n\n    ///\n\n    /// !!!!!!!!!!!!!!\n\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the BEP-20 specification\n\n    /// !!!!!!!!!!!!!!\n\n    ///\n\n\n\n    /**\n\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n\n      * @param dst The address of the destination account\n\n      * @param amount The number of tokens to transfer\n\n      */\n\n    function transfer(address dst, uint256 amount) external;\n\n\n\n    ///\n\n    /// !!!!!!!!!!!!!!\n\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the BEP-20 specification\n\n    /// !!!!!!!!!!!!!!\n\n    ///\n\n\n\n    /**\n\n      * @notice Transfer `amount` tokens from `src` to `dst`\n\n      * @param src The address of the source account\n\n      * @param dst The address of the destination account\n\n      * @param amount The number of tokens to transfer\n\n      */\n\n    function transferFrom(address src, address dst, uint256 amount) external;\n\n\n\n    /**\n\n      * @notice Approve `spender` to transfer up to `amount` from `src`\n\n      * @dev This will overwrite the approval amount for `spender`\n\n      * @param spender The address of the account which may transfer tokens\n\n      * @param amount The number of tokens that are approved\n\n      * @return Whether or not the approval succeeded\n\n      */\n\n    function approve(address spender, uint256 amount) external returns (bool success);\n\n\n\n    /**\n\n      * @notice Get the current allowance from `owner` for `spender`\n\n      * @param owner The address of the account which owns the tokens to be spent\n\n      * @param spender The address of the account which may transfer tokens\n\n      * @return The number of tokens allowed to be spent\n\n      */\n\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n",
          "message": "EIP20NonStandardInterface (VBNBHarness.sol#1263-1324) has incorrect ERC20 function interface(s):\n\t-transfer (VBNBHarness.sol#1289)\n\t-transferFrom (VBNBHarness.sol#1303)\n"
        },
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 3620,
          "vulnerability_to_line": 3633,
          "vulnerability_code": "    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint96 oldVotes, uint96 newVotes) internal {\n\n      uint32 blockNumber = safe32(block.number, \"XVS::_writeCheckpoint: block number exceeds 32 bits\");\n\n\n\n      if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\n\n          checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n\n      } else {\n\n          checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\n\n          numCheckpoints[delegatee] = nCheckpoints + 1;\n\n      }\n\n\n\n      emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\n\n    }\n\n\n",
          "message": "XVS._writeCheckpoint (VBNBHarness.sol#3620-3633) uses a dangerous strict equality:\n\t- nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber\n"
        },
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 5309,
          "vulnerability_to_line": 5346,
          "vulnerability_code": "    function releaseToVault() public {\n\n        if(releaseStartBlock == 0 || getBlockNumber() < releaseStartBlock) {\n\n            return;\n\n        }\n\n\n\n        XVS xvs = XVS(getXVSAddress());\n\n\n\n        uint256 xvsBalance = xvs.balanceOf(address(this));\n\n        if(xvsBalance == 0) {\n\n            return;\n\n        }\n\n\n\n\n\n        uint256 actualAmount;\n\n        uint256 deltaBlocks = sub_(getBlockNumber(), releaseStartBlock);\n\n        // releaseAmount = venusVAIVaultRate * deltaBlocks\n\n        uint256 _releaseAmount = mul_(venusVAIVaultRate, deltaBlocks);\n\n\n\n        if (_releaseAmount < minReleaseAmount) {\n\n            return;\n\n        }\n\n\n\n        if (xvsBalance >= _releaseAmount) {\n\n            actualAmount = _releaseAmount;\n\n        } else {\n\n            actualAmount = xvsBalance;\n\n        }\n\n\n\n        releaseStartBlock = getBlockNumber();\n\n\n\n        xvs.transfer(vaiVaultAddress, actualAmount);\n\n        emit DistributedVAIVaultVenus(actualAmount);\n\n\n\n        IVAIVault(vaiVaultAddress).updatePendingRewards();\n\n    }\n\n}\n\n\n",
          "message": "Comptroller.releaseToVault (VBNBHarness.sol#5309-5346) uses a dangerous strict equality:\n\t- xvsBalance == 0\n"
        },
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 2904,
          "vulnerability_to_line": 2910,
          "vulnerability_code": "    function getCashPrior() internal view returns (uint) {\n\n        (MathError err, uint startingBalance) = subUInt(address(this).balance, msg.value);\n\n        require(err == MathError.NO_ERROR, \"cash prior math error\");\n\n        return startingBalance;\n\n    }\n\n\n",
          "message": "VBNB.getCashPrior (VBNBHarness.sol#2904-2910) uses a dangerous strict equality:\n\t- require(bool,string)(err == MathError.NO_ERROR,cash prior math error)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 2571,
          "vulnerability_to_line": 2583,
          "vulnerability_code": "    function _addReservesInternal(uint addAmount) internal nonReentrant returns (uint) {\n\n        uint error = accrueInterest();\n\n        if (error != uint(Error.NO_ERROR)) {\n\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\n\n            return fail(Error(error), FailureInfo.ADD_RESERVES_ACCRUE_INTEREST_FAILED);\n\n        }\n\n\n\n        // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\n\n        (error, ) = _addReservesFresh(addAmount);\n\n        return error;\n\n    }\n\n\n",
          "message": "Reentrancy in VToken._addReservesInternal (VBNBHarness.sol#2571-2583):\n\tExternal calls:\n\t- error = accrueInterest() (VBNBHarness.sol#2572-2573)\n\tState variables written after the call(s):\n\t- totalReserves (VBNBHarness.sol#2579-2580)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 2634,
          "vulnerability_to_line": 2644,
          "vulnerability_code": "    function _reduceReserves(uint reduceAmount) external nonReentrant returns (uint) {\n\n        uint error = accrueInterest();\n\n        if (error != uint(Error.NO_ERROR)) {\n\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\n\n            return fail(Error(error), FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED);\n\n        }\n\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\n\n        return _reduceReservesFresh(reduceAmount);\n\n    }\n\n\n",
          "message": "Reentrancy in VToken._reduceReserves (VBNBHarness.sol#2634-2644):\n\tExternal calls:\n\t- error = accrueInterest() (VBNBHarness.sol#2635-2636)\n\tState variables written after the call(s):\n\t- totalReserves (VBNBHarness.sol#2641-2642)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 2503,
          "vulnerability_to_line": 2522,
          "vulnerability_code": "    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint) {\n\n        // Check caller is admin\n\n        if (msg.sender != admin) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_COMPTROLLER_OWNER_CHECK);\n\n        }\n\n\n\n        ComptrollerInterface oldComptroller = comptroller;\n\n        // Ensure invoke comptroller.isComptroller() returns true\n\n        require(newComptroller.isComptroller(), \"marker method returned false\");\n\n\n\n        // Set market's comptroller to newComptroller\n\n        comptroller = newComptroller;\n\n\n\n        // Emit NewComptroller(oldComptroller, newComptroller)\n\n        emit NewComptroller(oldComptroller, newComptroller);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n",
          "message": "Reentrancy in VToken._setComptroller (VBNBHarness.sol#2503-2522):\n\tExternal calls:\n\t- require(bool,string)(newComptroller.isComptroller(),marker method returned false) (VBNBHarness.sol#2511-2512)\n\tState variables written after the call(s):\n\t- comptroller (VBNBHarness.sol#2514-2515)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 2699,
          "vulnerability_to_line": 2709,
          "vulnerability_code": "    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint) {\n\n        uint error = accrueInterest();\n\n        if (error != uint(Error.NO_ERROR)) {\n\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted change of interest rate model failed\n\n            return fail(Error(error), FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED);\n\n        }\n\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\n\n        return _setInterestRateModelFresh(newInterestRateModel);\n\n    }\n\n\n",
          "message": "Reentrancy in VToken._setInterestRateModel (VBNBHarness.sol#2699-2709):\n\tExternal calls:\n\t- error = accrueInterest() (VBNBHarness.sol#2700-2701)\n\t- _setInterestRateModelFresh(newInterestRateModel) (VBNBHarness.sol#2706-2707)\n\tState variables written after the call(s):\n\t- interestRateModel (VBNBHarness.sol#2706-2707)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 2715,
          "vulnerability_to_line": 2745,
          "vulnerability_code": "    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint) {\n\n\n\n        // Used to store old model for use in the event that is emitted on success\n\n        InterestRateModel oldInterestRateModel;\n\n\n\n        // Check caller is admin\n\n        if (msg.sender != admin) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_INTEREST_RATE_MODEL_OWNER_CHECK);\n\n        }\n\n\n\n        // We fail gracefully unless market's block number equals current block number\n\n        if (accrualBlockNumber != getBlockNumber()) {\n\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);\n\n        }\n\n\n\n        // Track the market's current interest rate model\n\n        oldInterestRateModel = interestRateModel;\n\n\n\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\n\n        require(newInterestRateModel.isInterestRateModel(), \"marker method returned false\");\n\n\n\n        // Set the interest rate model to newInterestRateModel\n\n        interestRateModel = newInterestRateModel;\n\n\n\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\n\n        emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n",
          "message": "Reentrancy in VToken._setInterestRateModelFresh (VBNBHarness.sol#2715-2745):\n\tExternal calls:\n\t- require(bool,string)(newInterestRateModel.isInterestRateModel(),marker method returned false) (VBNBHarness.sol#2734-2736)\n\tState variables written after the call(s):\n\t- interestRateModel (VBNBHarness.sol#2737-2739)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 2527,
          "vulnerability_to_line": 2537,
          "vulnerability_code": "    function _setReserveFactor(uint newReserveFactorMantissa) external nonReentrant returns (uint) {\n\n        uint error = accrueInterest();\n\n        if (error != uint(Error.NO_ERROR)) {\n\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reserve factor change failed.\n\n            return fail(Error(error), FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED);\n\n        }\n\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\n\n        return _setReserveFactorFresh(newReserveFactorMantissa);\n\n    }\n\n\n",
          "message": "Reentrancy in VToken._setReserveFactor (VBNBHarness.sol#2527-2537):\n\tExternal calls:\n\t- error = accrueInterest() (VBNBHarness.sol#2528-2529)\n\tState variables written after the call(s):\n\t- reserveFactorMantissa (VBNBHarness.sol#2534-2535)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 4831,
          "vulnerability_to_line": 4852,
          "vulnerability_code": "    function _supportMarket(VToken vToken) external returns (uint) {\n\n        if (msg.sender != admin) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_MARKET_OWNER_CHECK);\n\n        }\n\n\n\n        if (markets[address(vToken)].isListed) {\n\n            return fail(Error.MARKET_ALREADY_LISTED, FailureInfo.SUPPORT_MARKET_EXISTS);\n\n        }\n\n\n\n        vToken.isVToken(); // Sanity check to make sure its really a VToken\n\n\n\n        // Note that isVenus is not in active use anymore\n\n        markets[address(vToken)] = Market({isListed: true, isVenus: false, collateralFactorMantissa: 0});\n\n\n\n        _addMarketInternal(vToken);\n\n\n\n        emit MarketListed(vToken);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n",
          "message": "Reentrancy in Comptroller._supportMarket (VBNBHarness.sol#4831-4852):\n\tExternal calls:\n\t- vToken.isVToken() (VBNBHarness.sol#4840)\n\tState variables written after the call(s):\n\t- markets (VBNBHarness.sol#4843-4845)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 1709,
          "vulnerability_to_line": 1787,
          "vulnerability_code": "    function accrueInterest() public returns (uint) {\n\n        /* Remember the initial block number */\n\n        uint currentBlockNumber = getBlockNumber();\n\n        uint accrualBlockNumberPrior = accrualBlockNumber;\n\n\n\n        /* Short-circuit accumulating 0 interest */\n\n        if (accrualBlockNumberPrior == currentBlockNumber) {\n\n            return uint(Error.NO_ERROR);\n\n        }\n\n\n\n        /* Read the previous values out of storage */\n\n        uint cashPrior = getCashPrior();\n\n        uint borrowsPrior = totalBorrows;\n\n        uint reservesPrior = totalReserves;\n\n        uint borrowIndexPrior = borrowIndex;\n\n\n\n        /* Calculate the current borrow interest rate */\n\n        uint borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior, borrowsPrior, reservesPrior);\n\n        require(borrowRateMantissa <= borrowRateMaxMantissa, \"borrow rate is absurdly high\");\n\n\n\n        /* Calculate the number of blocks elapsed since the last accrual */\n\n        (MathError mathErr, uint blockDelta) = subUInt(currentBlockNumber, accrualBlockNumberPrior);\n\n        require(mathErr == MathError.NO_ERROR, \"could not calculate block delta\");\n\n\n\n        /*\n\n         * Calculate the interest accumulated into borrows and reserves and the new index:\n\n         *  simpleInterestFactor = borrowRate * blockDelta\n\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\n\n         *  totalBorrowsNew = interestAccumulated + totalBorrows\n\n         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\n\n         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\n\n         */\n\n\n\n        Exp memory simpleInterestFactor;\n\n        uint interestAccumulated;\n\n        uint totalBorrowsNew;\n\n        uint totalReservesNew;\n\n        uint borrowIndexNew;\n\n\n\n        (mathErr, simpleInterestFactor) = mulScalar(Exp({mantissa: borrowRateMantissa}), blockDelta);\n\n        if (mathErr != MathError.NO_ERROR) {\n\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED, uint(mathErr));\n\n        }\n\n\n\n        (mathErr, interestAccumulated) = mulScalarTruncate(simpleInterestFactor, borrowsPrior);\n\n        if (mathErr != MathError.NO_ERROR) {\n\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED, uint(mathErr));\n\n        }\n\n\n\n        (mathErr, totalBorrowsNew) = addUInt(interestAccumulated, borrowsPrior);\n\n        if (mathErr != MathError.NO_ERROR) {\n\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED, uint(mathErr));\n\n        }\n\n\n\n        (mathErr, totalReservesNew) = mulScalarTruncateAddUInt(Exp({mantissa: reserveFactorMantissa}), interestAccumulated, reservesPrior);\n\n        if (mathErr != MathError.NO_ERROR) {\n\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED, uint(mathErr));\n\n        }\n\n\n\n        (mathErr, borrowIndexNew) = mulScalarTruncateAddUInt(simpleInterestFactor, borrowIndexPrior, borrowIndexPrior);\n\n        if (mathErr != MathError.NO_ERROR) {\n\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED, uint(mathErr));\n\n        }\n\n\n\n        /////////////////////////\n\n        // EFFECTS & INTERACTIONS\n\n        // (No safe failures beyond this point)\n\n\n\n        /* We write the previously calculated values into storage */\n\n        accrualBlockNumber = currentBlockNumber;\n\n        borrowIndex = borrowIndexNew;\n\n        totalBorrows = totalBorrowsNew;\n\n        totalReserves = totalReservesNew;\n\n\n\n        /* We emit an AccrueInterest event */\n\n        emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\n\n\n\n        return uint(Error.NO_ERROR);\n",
          "message": "Reentrancy in VToken.accrueInterest (VBNBHarness.sol#1709-1787):\n\tExternal calls:\n\t- borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior,borrowsPrior,reservesPrior) (VBNBHarness.sol#1726)\n\tState variables written after the call(s):\n\t- accrualBlockNumber (VBNBHarness.sol#1778)\n\t- borrowIndex (VBNBHarness.sol#1779)\n\t- totalBorrows (VBNBHarness.sol#1780)\n\t- totalReserves (VBNBHarness.sol#1781)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 2065,
          "vulnerability_to_line": 2073,
          "vulnerability_code": "    function borrowInternal(uint borrowAmount) internal nonReentrant returns (uint) {\n\n        uint error = accrueInterest();\n\n        if (error != uint(Error.NO_ERROR)) {\n\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\n\n            return fail(Error(error), FailureInfo.BORROW_ACCRUE_INTEREST_FAILED);\n\n        }\n\n        // borrowFresh emits borrow-specific logs on errors, so we don't need to\n\n        return borrowFresh(msg.sender, borrowAmount);\n",
          "message": "Reentrancy in VToken.borrowInternal (VBNBHarness.sol#2065-2073):\n\tExternal calls:\n\t- error = accrueInterest() (VBNBHarness.sol#2066)\n\t- borrowFresh(msg.sender,borrowAmount) (VBNBHarness.sol#2072)\n\tState variables written after the call(s):\n\t- totalBorrows (VBNBHarness.sol#2072)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 5173,
          "vulnerability_to_line": 5204,
          "vulnerability_code": "    function claimVenus(address[] memory holders, VToken[] memory vTokens, bool borrowers, bool suppliers) public {\n\n        uint j;\n\n        if(address(vaiController) != address(0)) {\n\n            vaiController.updateVenusVAIMintIndex();\n\n        }\n\n        for (j = 0; j < holders.length; j++) {\n\n            distributeVAIMinterVenus(holders[j]);\n\n            venusAccrued[holders[j]] = grantXVSInternal(holders[j], venusAccrued[holders[j]]);\n\n        }\n\n        for (uint i = 0; i < vTokens.length; i++) {\n\n            VToken vToken = vTokens[i];\n\n            require(markets[address(vToken)].isListed, \"not listed market\");\n\n            if (borrowers) {\n\n                Exp memory borrowIndex = Exp({mantissa: vToken.borrowIndex()});\n\n                updateVenusBorrowIndex(address(vToken), borrowIndex);\n\n                for (j = 0; j < holders.length; j++) {\n\n                    distributeBorrowerVenus(address(vToken), holders[j], borrowIndex);\n\n                    venusAccrued[holders[j]] = grantXVSInternal(holders[j], venusAccrued[holders[j]]);\n\n                }\n\n            }\n\n            if (suppliers) {\n\n                updateVenusSupplyIndex(address(vToken));\n\n                for (j = 0; j < holders.length; j++) {\n\n                    distributeSupplierVenus(address(vToken), holders[j]);\n\n                    venusAccrued[holders[j]] = grantXVSInternal(holders[j], venusAccrued[holders[j]]);\n\n                }\n\n            }\n\n        }\n\n    }\n\n\n\n    /**\n",
          "message": "Reentrancy in Comptroller.claimVenus (VBNBHarness.sol#5173-5204):\n\tExternal calls:\n\t- vaiController.updateVenusVAIMintIndex() (VBNBHarness.sol#5176-5178)\n\t- borrowIndex = Exp(vToken.borrowIndex()) (VBNBHarness.sol#5186-5187)\n\t- updateVenusBorrowIndex(address(vToken),borrowIndex) (VBNBHarness.sol#5187-5188)\n\t- distributeBorrowerVenus(address(vToken),holders[j],borrowIndex) (VBNBHarness.sol#5189-5190)\n\t- venusAccrued[holders[j]] = grantXVSInternal(holders[j],venusAccrued[holders[j]]) (VBNBHarness.sol#5190-5191)\n\tState variables written after the call(s):\n\t- venusAccrued (VBNBHarness.sol#5190-5191)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 5173,
          "vulnerability_to_line": 5204,
          "vulnerability_code": "    function claimVenus(address[] memory holders, VToken[] memory vTokens, bool borrowers, bool suppliers) public {\n\n        uint j;\n\n        if(address(vaiController) != address(0)) {\n\n            vaiController.updateVenusVAIMintIndex();\n\n        }\n\n        for (j = 0; j < holders.length; j++) {\n\n            distributeVAIMinterVenus(holders[j]);\n\n            venusAccrued[holders[j]] = grantXVSInternal(holders[j], venusAccrued[holders[j]]);\n\n        }\n\n        for (uint i = 0; i < vTokens.length; i++) {\n\n            VToken vToken = vTokens[i];\n\n            require(markets[address(vToken)].isListed, \"not listed market\");\n\n            if (borrowers) {\n\n                Exp memory borrowIndex = Exp({mantissa: vToken.borrowIndex()});\n\n                updateVenusBorrowIndex(address(vToken), borrowIndex);\n\n                for (j = 0; j < holders.length; j++) {\n\n                    distributeBorrowerVenus(address(vToken), holders[j], borrowIndex);\n\n                    venusAccrued[holders[j]] = grantXVSInternal(holders[j], venusAccrued[holders[j]]);\n\n                }\n\n            }\n\n            if (suppliers) {\n\n                updateVenusSupplyIndex(address(vToken));\n\n                for (j = 0; j < holders.length; j++) {\n\n                    distributeSupplierVenus(address(vToken), holders[j]);\n\n                    venusAccrued[holders[j]] = grantXVSInternal(holders[j], venusAccrued[holders[j]]);\n\n                }\n\n            }\n\n        }\n\n    }\n\n\n\n    /**\n",
          "message": "Reentrancy in Comptroller.claimVenus (VBNBHarness.sol#5173-5204):\n\tExternal calls:\n\t- vaiController.updateVenusVAIMintIndex() (VBNBHarness.sol#5176-5178)\n\t- borrowIndex = Exp(vToken.borrowIndex()) (VBNBHarness.sol#5186-5187)\n\t- updateVenusBorrowIndex(address(vToken),borrowIndex) (VBNBHarness.sol#5187-5188)\n\t- updateVenusSupplyIndex(address(vToken)) (VBNBHarness.sol#5194-5195)\n\t- distributeSupplierVenus(address(vToken),holders[j]) (VBNBHarness.sol#5196-5197)\n\t- venusAccrued[holders[j]] = grantXVSInternal(holders[j],venusAccrued[holders[j]]) (VBNBHarness.sol#5197-5198)\n\tState variables written after the call(s):\n\t- venusAccrued (VBNBHarness.sol#5197-5198)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 2801,
          "vulnerability_to_line": 2818,
          "vulnerability_code": "    constructor(ComptrollerInterface comptroller_,\n\n                InterestRateModel interestRateModel_,\n\n                uint initialExchangeRateMantissa_,\n\n                string memory name_,\n\n                string memory symbol_,\n\n                uint8 decimals_,\n\n                address payable admin_) public {\n\n        // Creator of the contract is admin during initialization\n\n        admin = msg.sender;\n\n\n\n        initialize(comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_);\n\n\n\n        // Set the proper admin now that initialization is done\n\n        admin = admin_;\n\n    }\n\n\n\n\n",
          "message": "Reentrancy in VBNB.constructor (VBNBHarness.sol#2801-2818):\n\tExternal calls:\n\t- initialize(comptroller_,interestRateModel_,initialExchangeRateMantissa_,name_,symbol_,decimals_) (VBNBHarness.sol#2811-2813)\n\tState variables written after the call(s):\n\t- admin (VBNBHarness.sol#2814-2815)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 4059,
          "vulnerability_to_line": 4107,
          "vulnerability_code": "    function exitMarket(address vTokenAddress) external returns (uint) {\n\n        VToken vToken = VToken(vTokenAddress);\n\n        /* Get sender tokensHeld and amountOwed underlying from the vToken */\n\n        (uint oErr, uint tokensHeld, uint amountOwed, ) = vToken.getAccountSnapshot(msg.sender);\n\n        require(oErr == 0, \"getAccountSnapshot failed\"); // semi-opaque error code\n\n\n\n        /* Fail if the sender has a borrow balance */\n\n        if (amountOwed != 0) {\n\n            return fail(Error.NONZERO_BORROW_BALANCE, FailureInfo.EXIT_MARKET_BALANCE_OWED);\n\n        }\n\n\n\n        /* Fail if the sender is not permitted to redeem all of their tokens */\n\n        uint allowed = redeemAllowedInternal(vTokenAddress, msg.sender, tokensHeld);\n\n        if (allowed != 0) {\n\n            return failOpaque(Error.REJECTION, FailureInfo.EXIT_MARKET_REJECTION, allowed);\n\n        }\n\n\n\n        Market storage marketToExit = markets[address(vToken)];\n\n\n\n        /* Return true if the sender is not already \u2018in\u2019 the market */\n\n        if (!marketToExit.accountMembership[msg.sender]) {\n\n            return uint(Error.NO_ERROR);\n\n        }\n\n\n\n        /* Set vToken account membership to false */\n\n        delete marketToExit.accountMembership[msg.sender];\n\n\n\n        /* Delete vToken from the account\u2019s list of assets */\n\n        // In order to delete vToken, copy last item in list to location of item to be removed, reduce length by 1\n\n        VToken[] storage userAssetList = accountAssets[msg.sender];\n\n        uint len = userAssetList.length;\n\n        uint i;\n\n        for (; i < len; i++) {\n\n            if (userAssetList[i] == vToken) {\n\n                userAssetList[i] = userAssetList[len - 1];\n\n                userAssetList.length--;\n\n                break;\n\n            }\n\n        }\n\n\n\n        // We *must* have found the asset in the list or our redundant data structure is broken\n\n        assert(i < len);\n\n\n\n        emit MarketExited(vToken, msg.sender);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n",
          "message": "Reentrancy in Comptroller.exitMarket (VBNBHarness.sol#4059-4107):\n\tExternal calls:\n\t- (oErr,tokensHeld,amountOwed) = vToken.getAccountSnapshot(msg.sender) (VBNBHarness.sol#4062-4063)\n\t- allowed = redeemAllowedInternal(vTokenAddress,msg.sender,tokensHeld) (VBNBHarness.sol#4071-4072)\n\tState variables written after the call(s):\n\t- accountAssets (VBNBHarness.sol#4093-4094)\n\t- accountAssets (VBNBHarness.sol#4094-4095)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 1351,
          "vulnerability_to_line": 1382,
          "vulnerability_code": "    function initialize(ComptrollerInterface comptroller_,\n\n                        InterestRateModel interestRateModel_,\n\n                        uint initialExchangeRateMantissa_,\n\n                        string memory name_,\n\n                        string memory symbol_,\n\n                        uint8 decimals_) public {\n\n        require(msg.sender == admin, \"only admin may initialize the market\");\n\n        require(accrualBlockNumber == 0 && borrowIndex == 0, \"market may only be initialized once\");\n\n\n\n        // Set initial exchange rate\n\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\n\n        require(initialExchangeRateMantissa > 0, \"initial exchange rate must be greater than zero.\");\n\n\n\n        // Set the comptroller\n\n        uint err = _setComptroller(comptroller_);\n\n        require(err == uint(Error.NO_ERROR), \"setting comptroller failed\");\n\n\n\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\n\n        accrualBlockNumber = getBlockNumber();\n\n        borrowIndex = mantissaOne;\n\n\n\n        // Set the interest rate model (depends on block number / borrow index)\n\n        err = _setInterestRateModelFresh(interestRateModel_);\n\n        require(err == uint(Error.NO_ERROR), \"setting interest rate model failed\");\n\n\n\n        name = name_;\n\n        symbol = symbol_;\n\n        decimals = decimals_;\n\n\n\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\n\n        _notEntered = true;\n",
          "message": "Reentrancy in VToken.initialize (VBNBHarness.sol#1351-1382):\n\tExternal calls:\n\t- err = _setComptroller(comptroller_) (VBNBHarness.sol#1365)\n\tState variables written after the call(s):\n\t- accrualBlockNumber (VBNBHarness.sol#1369)\n\t- borrowIndex (VBNBHarness.sol#1370)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 2277,
          "vulnerability_to_line": 2292,
          "vulnerability_code": "    function liquidateBorrowInternal(address borrower, uint repayAmount, VTokenInterface vTokenCollateral) internal nonReentrant returns (uint, uint) {\n\n        uint error = accrueInterest();\n\n        if (error != uint(Error.NO_ERROR)) {\n\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\n\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED), 0);\n\n        }\n\n\n\n        error = vTokenCollateral.accrueInterest();\n\n        if (error != uint(Error.NO_ERROR)) {\n\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\n\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED), 0);\n\n        }\n\n\n\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\n\n        return liquidateBorrowFresh(msg.sender, borrower, repayAmount, vTokenCollateral);\n",
          "message": "Reentrancy in VToken.liquidateBorrowInternal (VBNBHarness.sol#2277-2292):\n\tExternal calls:\n\t- error = accrueInterest() (VBNBHarness.sol#2278)\n\t- error = vTokenCollateral.accrueInterest() (VBNBHarness.sol#2284)\n\t- liquidateBorrowFresh(msg.sender,borrower,repayAmount,vTokenCollateral) (VBNBHarness.sol#2291)\n\tState variables written after the call(s):\n\t- totalBorrows (VBNBHarness.sol#2291)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 1938,
          "vulnerability_to_line": 2058,
          "vulnerability_code": "    function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal returns (uint) {\n\n        require(redeemTokensIn == 0 || redeemAmountIn == 0, \"one of redeemTokensIn or redeemAmountIn must be zero\");\n\n\n\n        RedeemLocalVars memory vars;\n\n\n\n        /* exchangeRate = invoke Exchange Rate Stored() */\n\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\n\n        if (vars.mathErr != MathError.NO_ERROR) {\n\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr));\n\n        }\n\n\n\n        /* If redeemTokensIn > 0: */\n\n        if (redeemTokensIn > 0) {\n\n            /*\n\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\n\n             *  redeemTokens = redeemTokensIn\n\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\n\n             */\n\n            vars.redeemTokens = redeemTokensIn;\n\n\n\n            (vars.mathErr, vars.redeemAmount) = mulScalarTruncate(Exp({mantissa: vars.exchangeRateMantissa}), redeemTokensIn);\n\n            if (vars.mathErr != MathError.NO_ERROR) {\n\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED, uint(vars.mathErr));\n\n            }\n\n        } else {\n\n            /*\n\n             * We get the current exchange rate and calculate the amount to be redeemed:\n\n             *  redeemTokens = redeemAmountIn / exchangeRate\n\n             *  redeemAmount = redeemAmountIn\n\n             */\n\n\n\n            (vars.mathErr, vars.redeemTokens) = divScalarByExpTruncate(redeemAmountIn, Exp({mantissa: vars.exchangeRateMantissa}));\n\n            if (vars.mathErr != MathError.NO_ERROR) {\n\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED, uint(vars.mathErr));\n\n            }\n\n\n\n            vars.redeemAmount = redeemAmountIn;\n\n        }\n\n\n\n        /* Fail if redeem not allowed */\n\n        uint allowed = comptroller.redeemAllowed(address(this), redeemer, vars.redeemTokens);\n\n        if (allowed != 0) {\n\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REDEEM_COMPTROLLER_REJECTION, allowed);\n\n        }\n\n\n\n        /* Verify market's block number equals current block number */\n\n        if (accrualBlockNumber != getBlockNumber()) {\n\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDEEM_FRESHNESS_CHECK);\n\n        }\n\n\n\n        /*\n\n         * We calculate the new total supply and redeemer balance, checking for underflow:\n\n         *  totalSupplyNew = totalSupply - redeemTokens\n\n         *  accountTokensNew = accountTokens[redeemer] - redeemTokens\n\n         */\n\n        (vars.mathErr, vars.totalSupplyNew) = subUInt(totalSupply, vars.redeemTokens);\n\n        if (vars.mathErr != MathError.NO_ERROR) {\n\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED, uint(vars.mathErr));\n\n        }\n\n\n\n        (vars.mathErr, vars.accountTokensNew) = subUInt(accountTokens[redeemer], vars.redeemTokens);\n\n        if (vars.mathErr != MathError.NO_ERROR) {\n\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\n\n        }\n\n\n\n        /* Fail gracefully if protocol has insufficient cash */\n\n        if (getCashPrior() < vars.redeemAmount) {\n\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDEEM_TRANSFER_OUT_NOT_POSSIBLE);\n\n        }\n\n\n\n        /////////////////////////\n\n        // EFFECTS & INTERACTIONS\n\n        // (No safe failures beyond this point)\n\n\n\n        /*\n\n         * We invoke doTransferOut for the redeemer and the redeemAmount.\n\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\n\n         *  On success, the vToken has redeemAmount less of cash.\n\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\n\n         */\n\n\n\n        uint feeAmount;\n\n        uint remainedAmount;\n\n        if (IComptroller(address(comptroller)).treasuryPercent() != 0) {\n\n            (vars.mathErr, feeAmount) = mulUInt(vars.redeemAmount, IComptroller(address(comptroller)).treasuryPercent());\n\n            if (vars.mathErr != MathError.NO_ERROR) {\n\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_FEE_CALCULATION_FAILED, uint(vars.mathErr));\n\n            }\n\n\n\n            (vars.mathErr, feeAmount) = divUInt(feeAmount, 1e18);\n\n            if (vars.mathErr != MathError.NO_ERROR) {\n\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_FEE_CALCULATION_FAILED, uint(vars.mathErr));\n\n            }\n\n\n\n            (vars.mathErr, remainedAmount) = subUInt(vars.redeemAmount, feeAmount);\n\n            if (vars.mathErr != MathError.NO_ERROR) {\n\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_FEE_CALCULATION_FAILED, uint(vars.mathErr));\n\n            }\n\n\n\n            doTransferOut(address(uint160(IComptroller(address(comptroller)).treasuryAddress())), feeAmount);\n\n\n\n            emit RedeemFee(redeemer, feeAmount, vars.redeemTokens);\n\n        } else {\n\n            remainedAmount = vars.redeemAmount;\n\n        }\n\n\n\n        doTransferOut(redeemer, remainedAmount);\n\n\n\n        /* We write previously calculated values into storage */\n\n        totalSupply = vars.totalSupplyNew;\n\n        accountTokens[redeemer] = vars.accountTokensNew;\n\n\n\n        /* We emit a Transfer event, and a Redeem event */\n\n        emit Transfer(redeemer, address(this), vars.redeemTokens);\n\n        emit Redeem(redeemer, remainedAmount, vars.redeemTokens);\n\n\n\n        /* We call the defense hook */\n\n        comptroller.redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);\n\n\n\n        return uint(Error.NO_ERROR);\n",
          "message": "Reentrancy in VToken.redeemFresh (VBNBHarness.sol#1938-2058):\n\tExternal calls:\n\t- allowed = comptroller.redeemAllowed(address(this),redeemer,vars.redeemTokens) (VBNBHarness.sol#1978)\n\t- IComptroller(address(comptroller)).treasuryPercent() != 0 (VBNBHarness.sol#2021-2042)\n\t- (vars.mathErr,feeAmount) = mulUInt(vars.redeemAmount,IComptroller(address(comptroller)).treasuryPercent()) (VBNBHarness.sol#2022)\n\t- doTransferOut(address(uint160(IComptroller(address(comptroller)).treasuryAddress())),feeAmount) (VBNBHarness.sol#2037)\n\tState variables written after the call(s):\n\t- accountTokens (VBNBHarness.sol#2048)\n\t- totalSupply (VBNBHarness.sol#2047)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 5309,
          "vulnerability_to_line": 5346,
          "vulnerability_code": "    function releaseToVault() public {\n\n        if(releaseStartBlock == 0 || getBlockNumber() < releaseStartBlock) {\n\n            return;\n\n        }\n\n\n\n        XVS xvs = XVS(getXVSAddress());\n\n\n\n        uint256 xvsBalance = xvs.balanceOf(address(this));\n\n        if(xvsBalance == 0) {\n\n            return;\n\n        }\n\n\n\n\n\n        uint256 actualAmount;\n\n        uint256 deltaBlocks = sub_(getBlockNumber(), releaseStartBlock);\n\n        // releaseAmount = venusVAIVaultRate * deltaBlocks\n\n        uint256 _releaseAmount = mul_(venusVAIVaultRate, deltaBlocks);\n\n\n\n        if (_releaseAmount < minReleaseAmount) {\n\n            return;\n\n        }\n\n\n\n        if (xvsBalance >= _releaseAmount) {\n\n            actualAmount = _releaseAmount;\n\n        } else {\n\n            actualAmount = xvsBalance;\n\n        }\n\n\n\n        releaseStartBlock = getBlockNumber();\n\n\n\n        xvs.transfer(vaiVaultAddress, actualAmount);\n\n        emit DistributedVAIVaultVenus(actualAmount);\n\n\n\n        IVAIVault(vaiVaultAddress).updatePendingRewards();\n\n    }\n\n}\n\n\n",
          "message": "Reentrancy in Comptroller.releaseToVault (VBNBHarness.sol#5309-5346):\n\tExternal calls:\n\t- xvsBalance = xvs.balanceOf(address(this)) (VBNBHarness.sol#5316-5317)\n\tState variables written after the call(s):\n\t- releaseStartBlock (VBNBHarness.sol#5337-5339)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 2173,
          "vulnerability_to_line": 2181,
          "vulnerability_code": "    function repayBorrowBehalfInternal(address borrower, uint repayAmount) internal nonReentrant returns (uint, uint) {\n\n        uint error = accrueInterest();\n\n        if (error != uint(Error.NO_ERROR)) {\n\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\n\n            return (fail(Error(error), FailureInfo.REPAY_BEHALF_ACCRUE_INTEREST_FAILED), 0);\n\n        }\n\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\n\n        return repayBorrowFresh(msg.sender, borrower, repayAmount);\n",
          "message": "Reentrancy in VToken.repayBorrowBehalfInternal (VBNBHarness.sol#2173-2181):\n\tExternal calls:\n\t- error = accrueInterest() (VBNBHarness.sol#2174)\n\t- repayBorrowFresh(msg.sender,borrower,repayAmount) (VBNBHarness.sol#2180)\n\tState variables written after the call(s):\n\t- totalBorrows (VBNBHarness.sol#2180)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 2157,
          "vulnerability_to_line": 2165,
          "vulnerability_code": "    function repayBorrowInternal(uint repayAmount) internal nonReentrant returns (uint, uint) {\n\n        uint error = accrueInterest();\n\n        if (error != uint(Error.NO_ERROR)) {\n\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\n\n            return (fail(Error(error), FailureInfo.REPAY_BORROW_ACCRUE_INTEREST_FAILED), 0);\n\n        }\n\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\n\n        return repayBorrowFresh(msg.sender, msg.sender, repayAmount);\n",
          "message": "Reentrancy in VToken.repayBorrowInternal (VBNBHarness.sol#2157-2165):\n\tExternal calls:\n\t- error = accrueInterest() (VBNBHarness.sol#2158)\n\t- repayBorrowFresh(msg.sender,msg.sender,repayAmount) (VBNBHarness.sol#2164)\n\tState variables written after the call(s):\n\t- totalBorrows (VBNBHarness.sol#2164)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 4418,
          "vulnerability_to_line": 4448,
          "vulnerability_code": "    function seizeAllowed(\n\n        address vTokenCollateral,\n\n        address vTokenBorrowed,\n\n        address liquidator,\n\n        address borrower,\n\n        uint seizeTokens) external onlyProtocolAllowed returns (uint) {\n\n        // Pausing is a very serious situation - we revert to sound the alarms\n\n        require(!seizeGuardianPaused, \"seize is paused\");\n\n\n\n        // Shh - currently unused\n\n        seizeTokens;\n\n\n\n        // We've added VAIController as a borrowed token list check for seize\n\n        if (!markets[vTokenCollateral].isListed || !(markets[vTokenBorrowed].isListed || address(vTokenBorrowed) == address(vaiController))) {\n\n            return uint(Error.MARKET_NOT_LISTED);\n\n        }\n\n\n\n        if (VToken(vTokenCollateral).comptroller() != VToken(vTokenBorrowed).comptroller()) {\n\n            return uint(Error.COMPTROLLER_MISMATCH);\n\n        }\n\n\n\n        // Keep the flywheel moving\n\n        updateVenusSupplyIndex(vTokenCollateral);\n\n        distributeSupplierVenus(vTokenCollateral, borrower);\n\n        distributeSupplierVenus(vTokenCollateral, liquidator);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n\n    /**\n",
          "message": "Reentrancy in Comptroller.seizeAllowed (VBNBHarness.sol#4418-4448):\n\tExternal calls:\n\t- updateVenusSupplyIndex(vTokenCollateral) (VBNBHarness.sol#4440-4441)\n\t- distributeSupplierVenus(vTokenCollateral,borrower) (VBNBHarness.sol#4441-4442)\n\t- distributeSupplierVenus(vTokenCollateral,liquidator) (VBNBHarness.sol#4442-4444)\n\tState variables written after the call(s):\n\t- releaseStartBlock (VBNBHarness.sol#4442-4444)\n\t- venusAccrued (VBNBHarness.sol#4442-4444)\n\t- venusSupplierIndex (VBNBHarness.sol#4442-4444)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 4991,
          "vulnerability_to_line": 5026,
          "vulnerability_code": "    function setVenusSpeedInternal(VToken vToken, uint venusSpeed) internal {\n\n        uint currentVenusSpeed = venusSpeeds[address(vToken)];\n\n        if (currentVenusSpeed != 0) {\n\n            // note that XVS speed could be set to 0 to halt liquidity rewards for a market\n\n            Exp memory borrowIndex = Exp({mantissa: vToken.borrowIndex()});\n\n            updateVenusSupplyIndex(address(vToken));\n\n            updateVenusBorrowIndex(address(vToken), borrowIndex);\n\n        } else if (venusSpeed != 0) {\n\n            // Add the XVS market\n\n            Market storage market = markets[address(vToken)];\n\n            require(market.isListed == true, \"venus market is not listed\");\n\n\n\n            if (venusSupplyState[address(vToken)].index == 0 && venusSupplyState[address(vToken)].block == 0) {\n\n                venusSupplyState[address(vToken)] = VenusMarketState({\n\n                    index: venusInitialIndex,\n\n                    block: safe32(getBlockNumber(), \"block number exceeds 32 bits\")\n\n                });\n\n            }\n\n\n\n\n\n        if (venusBorrowState[address(vToken)].index == 0 && venusBorrowState[address(vToken)].block == 0) {\n\n                venusBorrowState[address(vToken)] = VenusMarketState({\n\n                    index: venusInitialIndex,\n\n                    block: safe32(getBlockNumber(), \"block number exceeds 32 bits\")\n\n                });\n\n            }\n\n        }\n\n\n\n        if (currentVenusSpeed != venusSpeed) {\n\n            venusSpeeds[address(vToken)] = venusSpeed;\n\n            emit VenusSpeedUpdated(vToken, venusSpeed);\n\n        }\n\n    }\n\n\n\n    /**\n",
          "message": "Reentrancy in Comptroller.setVenusSpeedInternal (VBNBHarness.sol#4991-5026):\n\tExternal calls:\n\t- borrowIndex = Exp(vToken.borrowIndex()) (VBNBHarness.sol#4995-4996)\n\t- updateVenusSupplyIndex(address(vToken)) (VBNBHarness.sol#4996-4997)\n\t- updateVenusBorrowIndex(address(vToken),borrowIndex) (VBNBHarness.sol#4997-4998)\n\tState variables written after the call(s):\n\t- venusSpeeds (VBNBHarness.sol#5020-5021)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 4482,
          "vulnerability_to_line": 4502,
          "vulnerability_code": "    function transferAllowed(address vToken, address src, address dst, uint transferTokens) external onlyProtocolAllowed returns (uint) {\n\n        // Pausing is a very serious situation - we revert to sound the alarms\n\n        require(!transferGuardianPaused, \"transfer is paused\");\n\n\n\n        // Currently the only consideration is whether or not\n\n        //  the src is allowed to redeem this many tokens\n\n        uint allowed = redeemAllowedInternal(vToken, src, transferTokens);\n\n        if (allowed != uint(Error.NO_ERROR)) {\n\n            return allowed;\n\n        }\n\n\n\n        // Keep the flywheel moving\n\n        updateVenusSupplyIndex(vToken);\n\n        distributeSupplierVenus(vToken, src);\n\n        distributeSupplierVenus(vToken, dst);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n\n    /**\n",
          "message": "Reentrancy in Comptroller.transferAllowed (VBNBHarness.sol#4482-4502):\n\tExternal calls:\n\t- allowed = redeemAllowedInternal(vToken,src,transferTokens) (VBNBHarness.sol#4488-4489)\n\t- updateVenusSupplyIndex(vToken) (VBNBHarness.sol#4494-4495)\n\t- distributeSupplierVenus(vToken,src) (VBNBHarness.sol#4495-4496)\n\t- distributeSupplierVenus(vToken,dst) (VBNBHarness.sol#4496-4498)\n\tState variables written after the call(s):\n\t- releaseStartBlock (VBNBHarness.sol#4496-4498)\n\t- venusAccrued (VBNBHarness.sol#4496-4498)\n\t- venusSupplierIndex (VBNBHarness.sol#4496-4498)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 5052,
          "vulnerability_to_line": 5072,
          "vulnerability_code": "    function updateVenusBorrowIndex(address vToken, Exp memory marketBorrowIndex) internal {\n\n        VenusMarketState storage borrowState = venusBorrowState[vToken];\n\n        uint borrowSpeed = venusSpeeds[vToken];\n\n        uint blockNumber = getBlockNumber();\n\n        uint deltaBlocks = sub_(blockNumber, uint(borrowState.block));\n\n        if (deltaBlocks > 0 && borrowSpeed > 0) {\n\n            uint borrowAmount = div_(VToken(vToken).totalBorrows(), marketBorrowIndex);\n\n            uint venusAccrued = mul_(deltaBlocks, borrowSpeed);\n\n            Double memory ratio = borrowAmount > 0 ? fraction(venusAccrued, borrowAmount) : Double({mantissa: 0});\n\n            Double memory index = add_(Double({mantissa: borrowState.index}), ratio);\n\n            venusBorrowState[vToken] = VenusMarketState({\n\n                index: safe224(index.mantissa, \"new index overflows\"),\n\n                block: safe32(blockNumber, \"block number overflows\")\n\n            });\n\n        } else if (deltaBlocks > 0) {\n\n            borrowState.block = safe32(blockNumber, \"block number overflows\");\n\n        }\n\n    }\n\n\n\n    /**\n",
          "message": "Reentrancy in Comptroller.updateVenusBorrowIndex (VBNBHarness.sol#5052-5072):\n\tExternal calls:\n\t- borrowAmount = div_(VToken(vToken).totalBorrows(),marketBorrowIndex) (VBNBHarness.sol#5058-5059)\n\tState variables written after the call(s):\n\t- venusBorrowState (VBNBHarness.sol#5062-5066)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 5029,
          "vulnerability_to_line": 5049,
          "vulnerability_code": "    function updateVenusSupplyIndex(address vToken) internal {\n\n        VenusMarketState storage supplyState = venusSupplyState[vToken];\n\n        uint supplySpeed = venusSpeeds[vToken];\n\n        uint blockNumber = getBlockNumber();\n\n        uint deltaBlocks = sub_(blockNumber, uint(supplyState.block));\n\n        if (deltaBlocks > 0 && supplySpeed > 0) {\n\n            uint supplyTokens = VToken(vToken).totalSupply();\n\n            uint venusAccrued = mul_(deltaBlocks, supplySpeed);\n\n            Double memory ratio = supplyTokens > 0 ? fraction(venusAccrued, supplyTokens) : Double({mantissa: 0});\n\n            Double memory index = add_(Double({mantissa: supplyState.index}), ratio);\n\n            venusSupplyState[vToken] = VenusMarketState({\n\n                index: safe224(index.mantissa, \"new index overflows\"),\n\n                block: safe32(blockNumber, \"block number overflows\")\n\n            });\n\n        } else if (deltaBlocks > 0) {\n\n            supplyState.block = safe32(blockNumber, \"block number overflows\");\n\n        }\n\n    }\n\n\n\n    /**\n",
          "message": "Reentrancy in Comptroller.updateVenusSupplyIndex (VBNBHarness.sol#5029-5049):\n\tExternal calls:\n\t- supplyTokens = VToken(vToken).totalSupply() (VBNBHarness.sol#5035-5036)\n\tState variables written after the call(s):\n\t- venusSupplyState (VBNBHarness.sol#5039-5043)\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 4091,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (; i < len; i++) {\n",
          "message": "i in Comptroller.exitMarket (VBNBHarness.sol#4091) is a local variable never initialiazed\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 2104,
          "vulnerability_to_line": null,
          "vulnerability_code": "        BorrowLocalVars memory vars;\n",
          "message": "vars in VToken.borrowFresh (VBNBHarness.sol#2104) is a local variable never initialiazed\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 1941,
          "vulnerability_to_line": null,
          "vulnerability_code": "        RedeemLocalVars memory vars;\n",
          "message": "vars in VToken.redeemFresh (VBNBHarness.sol#1941) is a local variable never initialiazed\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 1834,
          "vulnerability_to_line": null,
          "vulnerability_code": "        MintLocalVars memory vars;\n",
          "message": "vars in VToken.mintFresh (VBNBHarness.sol#1834) is a local variable never initialiazed\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 2592,
          "vulnerability_to_line": 2594,
          "vulnerability_code": "        uint actualAddAmount;\n\n\n",
          "message": "actualAddAmount in VToken._addReservesFresh (VBNBHarness.sol#2592-2594) is a local variable never initialiazed\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 2213,
          "vulnerability_to_line": null,
          "vulnerability_code": "        RepayBorrowLocalVars memory vars;\n",
          "message": "vars in VToken.repayBorrowFresh (VBNBHarness.sol#2213) is a local variable never initialiazed\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 4245,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (Error err, , uint shortfall) = getHypotheticalAccountLiquidityInternal(borrower, VToken(vToken), 0, borrowAmount);\n",
          "message": "err_scope_0 in Comptroller.borrowAllowed (VBNBHarness.sol#4245) is a local variable never initialiazed\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 4831,
          "vulnerability_to_line": 4852,
          "vulnerability_code": "    function _supportMarket(VToken vToken) external returns (uint) {\n\n        if (msg.sender != admin) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_MARKET_OWNER_CHECK);\n\n        }\n\n\n\n        if (markets[address(vToken)].isListed) {\n\n            return fail(Error.MARKET_ALREADY_LISTED, FailureInfo.SUPPORT_MARKET_EXISTS);\n\n        }\n\n\n\n        vToken.isVToken(); // Sanity check to make sure its really a VToken\n\n\n\n        // Note that isVenus is not in active use anymore\n\n        markets[address(vToken)] = Market({isListed: true, isVenus: false, collateralFactorMantissa: 0});\n\n\n\n        _addMarketInternal(vToken);\n\n\n\n        emit MarketListed(vToken);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n",
          "message": "Comptroller._supportMarket (VBNBHarness.sol#4831-4852) does not use the value returned by external calls:\n\t-vToken.isVToken() (VBNBHarness.sol#4840)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 5173,
          "vulnerability_to_line": 5204,
          "vulnerability_code": "    function claimVenus(address[] memory holders, VToken[] memory vTokens, bool borrowers, bool suppliers) public {\n\n        uint j;\n\n        if(address(vaiController) != address(0)) {\n\n            vaiController.updateVenusVAIMintIndex();\n\n        }\n\n        for (j = 0; j < holders.length; j++) {\n\n            distributeVAIMinterVenus(holders[j]);\n\n            venusAccrued[holders[j]] = grantXVSInternal(holders[j], venusAccrued[holders[j]]);\n\n        }\n\n        for (uint i = 0; i < vTokens.length; i++) {\n\n            VToken vToken = vTokens[i];\n\n            require(markets[address(vToken)].isListed, \"not listed market\");\n\n            if (borrowers) {\n\n                Exp memory borrowIndex = Exp({mantissa: vToken.borrowIndex()});\n\n                updateVenusBorrowIndex(address(vToken), borrowIndex);\n\n                for (j = 0; j < holders.length; j++) {\n\n                    distributeBorrowerVenus(address(vToken), holders[j], borrowIndex);\n\n                    venusAccrued[holders[j]] = grantXVSInternal(holders[j], venusAccrued[holders[j]]);\n\n                }\n\n            }\n\n            if (suppliers) {\n\n                updateVenusSupplyIndex(address(vToken));\n\n                for (j = 0; j < holders.length; j++) {\n\n                    distributeSupplierVenus(address(vToken), holders[j]);\n\n                    venusAccrued[holders[j]] = grantXVSInternal(holders[j], venusAccrued[holders[j]]);\n\n                }\n\n            }\n\n        }\n\n    }\n\n\n\n    /**\n",
          "message": "Comptroller.claimVenus (VBNBHarness.sol#5173-5204) does not use the value returned by external calls:\n\t-vaiController.updateVenusVAIMintIndex() (VBNBHarness.sol#5176-5178)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 5210,
          "vulnerability_to_line": 5220,
          "vulnerability_code": "    function grantXVSInternal(address user, uint amount) internal returns (uint) {\n\n        XVS xvs = XVS(getXVSAddress());\n\n        uint venusRemaining = xvs.balanceOf(address(this));\n\n        if (amount > 0 && amount <= venusRemaining) {\n\n            xvs.transfer(user, amount);\n\n            return 0;\n\n        }\n\n        return amount;\n\n    }\n\n\n",
          "message": "Comptroller.grantXVSInternal (VBNBHarness.sol#5210-5220) does not use the value returned by external calls:\n\t-xvs.transfer(user,amount) (VBNBHarness.sol#5214-5215)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 5309,
          "vulnerability_to_line": 5346,
          "vulnerability_code": "    function releaseToVault() public {\n\n        if(releaseStartBlock == 0 || getBlockNumber() < releaseStartBlock) {\n\n            return;\n\n        }\n\n\n\n        XVS xvs = XVS(getXVSAddress());\n\n\n\n        uint256 xvsBalance = xvs.balanceOf(address(this));\n\n        if(xvsBalance == 0) {\n\n            return;\n\n        }\n\n\n\n\n\n        uint256 actualAmount;\n\n        uint256 deltaBlocks = sub_(getBlockNumber(), releaseStartBlock);\n\n        // releaseAmount = venusVAIVaultRate * deltaBlocks\n\n        uint256 _releaseAmount = mul_(venusVAIVaultRate, deltaBlocks);\n\n\n\n        if (_releaseAmount < minReleaseAmount) {\n\n            return;\n\n        }\n\n\n\n        if (xvsBalance >= _releaseAmount) {\n\n            actualAmount = _releaseAmount;\n\n        } else {\n\n            actualAmount = xvsBalance;\n\n        }\n\n\n\n        releaseStartBlock = getBlockNumber();\n\n\n\n        xvs.transfer(vaiVaultAddress, actualAmount);\n\n        emit DistributedVAIVaultVenus(actualAmount);\n\n\n\n        IVAIVault(vaiVaultAddress).updatePendingRewards();\n\n    }\n\n}\n\n\n",
          "message": "Comptroller.releaseToVault (VBNBHarness.sol#5309-5346) does not use the value returned by external calls:\n\t-xvs.transfer(vaiVaultAddress,actualAmount) (VBNBHarness.sol#5339-5340)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 1129,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\n",
          "message": "Exponential.divScalarByExpTruncate.fraction (local variable @ VBNBHarness.sol#1129) shadows:\n\t- ExponentialNoError.fraction (function @ VBNBHarness.sol#1002-1004)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 5036,
          "vulnerability_to_line": 5037,
          "vulnerability_code": "            uint venusAccrued = mul_(deltaBlocks, supplySpeed);\n",
          "message": "Comptroller.updateVenusSupplyIndex.venusAccrued (local variable @ VBNBHarness.sol#5036-5037) shadows:\n\t- ComptrollerV1Storage.venusAccrued (state variable @ VBNBHarness.sol#3104-3106)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 5059,
          "vulnerability_to_line": 5060,
          "vulnerability_code": "            uint venusAccrued = mul_(deltaBlocks, borrowSpeed);\n",
          "message": "Comptroller.updateVenusBorrowIndex.venusAccrued (local variable @ VBNBHarness.sol#5059-5060) shadows:\n\t- ComptrollerV1Storage.venusAccrued (state variable @ VBNBHarness.sol#3104-3106)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 5460,
          "vulnerability_to_line": 5461,
          "vulnerability_code": "                uint initialExchangeRateMantissa,\n",
          "message": "VBNBHarness.constructor.initialExchangeRateMantissa (local variable @ VBNBHarness.sol#5460-5461) shadows:\n\t- VTokenStorage.initialExchangeRateMantissa (state variable @ VBNBHarness.sol#188)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 5614,
          "vulnerability_to_line": 5615,
          "vulnerability_code": "                uint initialExchangeRateMantissa)\n",
          "message": "VBNBScenario.constructor.initialExchangeRateMantissa (local variable @ VBNBHarness.sol#5614-5615) shadows:\n\t- VTokenStorage.initialExchangeRateMantissa (state variable @ VBNBHarness.sol#188)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 5432,
          "vulnerability_to_line": 5433,
          "vulnerability_code": "                Exp memory assetPrice = Exp({mantissa: oracle.getUnderlyingPrice(vToken)});\n",
          "message": "ComptrollerScenario.refreshVenusSpeeds has external calls inside a loop:\n\t- assetPrice = Exp(oracle.getUnderlyingPrice(vToken_scope_1)) (VBNBHarness.sol#5432-5433)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 5433,
          "vulnerability_to_line": 5434,
          "vulnerability_code": "                Exp memory utility = mul_(assetPrice, vToken.totalBorrows());\n",
          "message": "ComptrollerScenario.refreshVenusSpeeds has external calls inside a loop:\n\t- utility = mul_(assetPrice,vToken_scope_1.totalBorrows()) (VBNBHarness.sol#5433-5434)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 5422,
          "vulnerability_to_line": 5423,
          "vulnerability_code": "            Exp memory borrowIndex = Exp({mantissa: vToken.borrowIndex()});\n",
          "message": "ComptrollerScenario.refreshVenusSpeeds has external calls inside a loop:\n\t- borrowIndex = Exp(vToken.borrowIndex()) (VBNBHarness.sol#5422-5423)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 4831,
          "vulnerability_to_line": 4852,
          "vulnerability_code": "    function _supportMarket(VToken vToken) external returns (uint) {\n\n        if (msg.sender != admin) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_MARKET_OWNER_CHECK);\n\n        }\n\n\n\n        if (markets[address(vToken)].isListed) {\n\n            return fail(Error.MARKET_ALREADY_LISTED, FailureInfo.SUPPORT_MARKET_EXISTS);\n\n        }\n\n\n\n        vToken.isVToken(); // Sanity check to make sure its really a VToken\n\n\n\n        // Note that isVenus is not in active use anymore\n\n        markets[address(vToken)] = Market({isListed: true, isVenus: false, collateralFactorMantissa: 0});\n\n\n\n        _addMarketInternal(vToken);\n\n\n\n        emit MarketListed(vToken);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n",
          "message": "Reentrancy in Comptroller._supportMarket (VBNBHarness.sol#4831-4852):\n\tExternal calls:\n\t- vToken.isVToken() (VBNBHarness.sol#4840)\n\tState variables written after the call(s):\n\t- allMarkets (VBNBHarness.sol#4845-4847)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 2087,
          "vulnerability_to_line": 2150,
          "vulnerability_code": "    function borrowFresh(address payable borrower, uint borrowAmount) internal returns (uint) {\n\n        /* Fail if borrow not allowed */\n\n        uint allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);\n\n        if (allowed != 0) {\n\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.BORROW_COMPTROLLER_REJECTION, allowed);\n\n        }\n\n\n\n        /* Verify market's block number equals current block number */\n\n        if (accrualBlockNumber != getBlockNumber()) {\n\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.BORROW_FRESHNESS_CHECK);\n\n        }\n\n\n\n        /* Fail gracefully if protocol has insufficient underlying cash */\n\n        if (getCashPrior() < borrowAmount) {\n\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.BORROW_CASH_NOT_AVAILABLE);\n\n        }\n\n\n\n        BorrowLocalVars memory vars;\n\n\n\n        /*\n\n         * We calculate the new borrower and total borrow balances, failing on overflow:\n\n         *  accountBorrowsNew = accountBorrows + borrowAmount\n\n         *  totalBorrowsNew = totalBorrows + borrowAmount\n\n         */\n\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\n\n        if (vars.mathErr != MathError.NO_ERROR) {\n\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\n\n        }\n\n\n\n        (vars.mathErr, vars.accountBorrowsNew) = addUInt(vars.accountBorrows, borrowAmount);\n\n        if (vars.mathErr != MathError.NO_ERROR) {\n\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\n\n        }\n\n\n\n        (vars.mathErr, vars.totalBorrowsNew) = addUInt(totalBorrows, borrowAmount);\n\n        if (vars.mathErr != MathError.NO_ERROR) {\n\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\n\n        }\n\n\n\n        /////////////////////////\n\n        // EFFECTS & INTERACTIONS\n\n        // (No safe failures beyond this point)\n\n\n\n        /*\n\n         * We invoke doTransferOut for the borrower and the borrowAmount.\n\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\n\n         *  On success, the vToken borrowAmount less of cash.\n\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\n\n         */\n\n        doTransferOut(borrower, borrowAmount);\n\n\n\n        /* We write the previously calculated values into storage */\n\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\n\n        accountBorrows[borrower].interestIndex = borrowIndex;\n\n        totalBorrows = vars.totalBorrowsNew;\n\n\n\n        /* We emit a Borrow event */\n\n        emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\n\n\n\n        /* We call the defense hook */\n\n        comptroller.borrowVerify(address(this), borrower, borrowAmount);\n\n\n\n        return uint(Error.NO_ERROR);\n",
          "message": "Reentrancy in VToken.borrowFresh (VBNBHarness.sol#2087-2150):\n\tExternal calls:\n\t- allowed = comptroller.borrowAllowed(address(this),borrower,borrowAmount) (VBNBHarness.sol#2089)\n\tState variables written after the call(s):\n\t- accountBorrows (VBNBHarness.sol#2139)\n\t- accountBorrows (VBNBHarness.sol#2140)\n\t- totalBorrows (VBNBHarness.sol#2141)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 5173,
          "vulnerability_to_line": 5204,
          "vulnerability_code": "    function claimVenus(address[] memory holders, VToken[] memory vTokens, bool borrowers, bool suppliers) public {\n\n        uint j;\n\n        if(address(vaiController) != address(0)) {\n\n            vaiController.updateVenusVAIMintIndex();\n\n        }\n\n        for (j = 0; j < holders.length; j++) {\n\n            distributeVAIMinterVenus(holders[j]);\n\n            venusAccrued[holders[j]] = grantXVSInternal(holders[j], venusAccrued[holders[j]]);\n\n        }\n\n        for (uint i = 0; i < vTokens.length; i++) {\n\n            VToken vToken = vTokens[i];\n\n            require(markets[address(vToken)].isListed, \"not listed market\");\n\n            if (borrowers) {\n\n                Exp memory borrowIndex = Exp({mantissa: vToken.borrowIndex()});\n\n                updateVenusBorrowIndex(address(vToken), borrowIndex);\n\n                for (j = 0; j < holders.length; j++) {\n\n                    distributeBorrowerVenus(address(vToken), holders[j], borrowIndex);\n\n                    venusAccrued[holders[j]] = grantXVSInternal(holders[j], venusAccrued[holders[j]]);\n\n                }\n\n            }\n\n            if (suppliers) {\n\n                updateVenusSupplyIndex(address(vToken));\n\n                for (j = 0; j < holders.length; j++) {\n\n                    distributeSupplierVenus(address(vToken), holders[j]);\n\n                    venusAccrued[holders[j]] = grantXVSInternal(holders[j], venusAccrued[holders[j]]);\n\n                }\n\n            }\n\n        }\n\n    }\n\n\n\n    /**\n",
          "message": "Reentrancy in Comptroller.claimVenus (VBNBHarness.sol#5173-5204):\n\tExternal calls:\n\t- vaiController.updateVenusVAIMintIndex() (VBNBHarness.sol#5176-5178)\n\t- distributeVAIMinterVenus(holders[j]) (VBNBHarness.sol#5179-5180)\n\tState variables written after the call(s):\n\t- venusAccrued (VBNBHarness.sol#5179-5180)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 5104,
          "vulnerability_to_line": 5125,
          "vulnerability_code": "    function distributeBorrowerVenus(address vToken, address borrower, Exp memory marketBorrowIndex) internal {\n\n        if (address(vaiVaultAddress) != address(0)) {\n\n            releaseToVault();\n\n        }\n\n\n\n        VenusMarketState storage borrowState = venusBorrowState[vToken];\n\n        Double memory borrowIndex = Double({mantissa: borrowState.index});\n\n        Double memory borrowerIndex = Double({mantissa: venusBorrowerIndex[vToken][borrower]});\n\n        venusBorrowerIndex[vToken][borrower] = borrowIndex.mantissa;\n\n\n\n        if (borrowerIndex.mantissa > 0) {\n\n            Double memory deltaIndex = sub_(borrowIndex, borrowerIndex);\n\n            uint borrowerAmount = div_(VToken(vToken).borrowBalanceStored(borrower), marketBorrowIndex);\n\n            uint borrowerDelta = mul_(borrowerAmount, deltaIndex);\n\n            uint borrowerAccrued = add_(venusAccrued[borrower], borrowerDelta);\n\n            venusAccrued[borrower] = borrowerAccrued;\n\n            emit DistributedBorrowerVenus(VToken(vToken), borrower, borrowerDelta, borrowIndex.mantissa);\n\n        }\n\n    }\n\n\n\n    /**\n",
          "message": "Reentrancy in Comptroller.distributeBorrowerVenus (VBNBHarness.sol#5104-5125):\n\tExternal calls:\n\t- releaseToVault() (VBNBHarness.sol#5106-5109)\n\tState variables written after the call(s):\n\t- venusBorrowerIndex (VBNBHarness.sol#5112-5114)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 5104,
          "vulnerability_to_line": 5125,
          "vulnerability_code": "    function distributeBorrowerVenus(address vToken, address borrower, Exp memory marketBorrowIndex) internal {\n\n        if (address(vaiVaultAddress) != address(0)) {\n\n            releaseToVault();\n\n        }\n\n\n\n        VenusMarketState storage borrowState = venusBorrowState[vToken];\n\n        Double memory borrowIndex = Double({mantissa: borrowState.index});\n\n        Double memory borrowerIndex = Double({mantissa: venusBorrowerIndex[vToken][borrower]});\n\n        venusBorrowerIndex[vToken][borrower] = borrowIndex.mantissa;\n\n\n\n        if (borrowerIndex.mantissa > 0) {\n\n            Double memory deltaIndex = sub_(borrowIndex, borrowerIndex);\n\n            uint borrowerAmount = div_(VToken(vToken).borrowBalanceStored(borrower), marketBorrowIndex);\n\n            uint borrowerDelta = mul_(borrowerAmount, deltaIndex);\n\n            uint borrowerAccrued = add_(venusAccrued[borrower], borrowerDelta);\n\n            venusAccrued[borrower] = borrowerAccrued;\n\n            emit DistributedBorrowerVenus(VToken(vToken), borrower, borrowerDelta, borrowIndex.mantissa);\n\n        }\n\n    }\n\n\n\n    /**\n",
          "message": "Reentrancy in Comptroller.distributeBorrowerVenus (VBNBHarness.sol#5104-5125):\n\tExternal calls:\n\t- releaseToVault() (VBNBHarness.sol#5106-5109)\n\t- borrowerAmount = div_(VToken(vToken).borrowBalanceStored(borrower),marketBorrowIndex) (VBNBHarness.sol#5116-5117)\n\tState variables written after the call(s):\n\t- venusAccrued (VBNBHarness.sol#5119-5120)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 5076,
          "vulnerability_to_line": 5099,
          "vulnerability_code": "    function distributeSupplierVenus(address vToken, address supplier) internal {\n\n        if (address(vaiVaultAddress) != address(0)) {\n\n            releaseToVault();\n\n        }\n\n\n\n        VenusMarketState storage supplyState = venusSupplyState[vToken];\n\n        Double memory supplyIndex = Double({mantissa: supplyState.index});\n\n        Double memory supplierIndex = Double({mantissa: venusSupplierIndex[vToken][supplier]});\n\n        venusSupplierIndex[vToken][supplier] = supplyIndex.mantissa;\n\n\n\n        if (supplierIndex.mantissa == 0 && supplyIndex.mantissa > 0) {\n\n            supplierIndex.mantissa = venusInitialIndex;\n\n        }\n\n\n\n        Double memory deltaIndex = sub_(supplyIndex, supplierIndex);\n\n        uint supplierTokens = VToken(vToken).balanceOf(supplier);\n\n        uint supplierDelta = mul_(supplierTokens, deltaIndex);\n\n        uint supplierAccrued = add_(venusAccrued[supplier], supplierDelta);\n\n        venusAccrued[supplier] = supplierAccrued;\n\n        emit DistributedSupplierVenus(VToken(vToken), supplier, supplierDelta, supplyIndex.mantissa);\n\n    }\n\n\n\n    /**\n",
          "message": "Reentrancy in Comptroller.distributeSupplierVenus (VBNBHarness.sol#5076-5099):\n\tExternal calls:\n\t- releaseToVault() (VBNBHarness.sol#5078-5081)\n\tState variables written after the call(s):\n\t- venusSupplierIndex (VBNBHarness.sol#5084-5086)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 5076,
          "vulnerability_to_line": 5099,
          "vulnerability_code": "    function distributeSupplierVenus(address vToken, address supplier) internal {\n\n        if (address(vaiVaultAddress) != address(0)) {\n\n            releaseToVault();\n\n        }\n\n\n\n        VenusMarketState storage supplyState = venusSupplyState[vToken];\n\n        Double memory supplyIndex = Double({mantissa: supplyState.index});\n\n        Double memory supplierIndex = Double({mantissa: venusSupplierIndex[vToken][supplier]});\n\n        venusSupplierIndex[vToken][supplier] = supplyIndex.mantissa;\n\n\n\n        if (supplierIndex.mantissa == 0 && supplyIndex.mantissa > 0) {\n\n            supplierIndex.mantissa = venusInitialIndex;\n\n        }\n\n\n\n        Double memory deltaIndex = sub_(supplyIndex, supplierIndex);\n\n        uint supplierTokens = VToken(vToken).balanceOf(supplier);\n\n        uint supplierDelta = mul_(supplierTokens, deltaIndex);\n\n        uint supplierAccrued = add_(venusAccrued[supplier], supplierDelta);\n\n        venusAccrued[supplier] = supplierAccrued;\n\n        emit DistributedSupplierVenus(VToken(vToken), supplier, supplierDelta, supplyIndex.mantissa);\n\n    }\n\n\n\n    /**\n",
          "message": "Reentrancy in Comptroller.distributeSupplierVenus (VBNBHarness.sol#5076-5099):\n\tExternal calls:\n\t- releaseToVault() (VBNBHarness.sol#5078-5081)\n\t- supplierTokens = VToken(vToken).balanceOf(supplier) (VBNBHarness.sol#5091-5092)\n\tState variables written after the call(s):\n\t- venusAccrued (VBNBHarness.sol#5094-5095)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 5129,
          "vulnerability_to_line": 5148,
          "vulnerability_code": "    function distributeVAIMinterVenus(address vaiMinter) public {\n\n        if (address(vaiVaultAddress) != address(0)) {\n\n            releaseToVault();\n\n        }\n\n\n\n        if (address(vaiController) != address(0)) {\n\n            uint vaiMinterAccrued;\n\n            uint vaiMinterDelta;\n\n            uint vaiMintIndexMantissa;\n\n            uint err;\n\n            (err, vaiMinterAccrued, vaiMinterDelta, vaiMintIndexMantissa) = vaiController.calcDistributeVAIMinterVenus(vaiMinter);\n\n            if (err == uint(Error.NO_ERROR)) {\n\n                venusAccrued[vaiMinter] = vaiMinterAccrued;\n\n                emit DistributedVAIMinterVenus(vaiMinter, vaiMinterDelta, vaiMintIndexMantissa);\n\n            }\n\n        }\n\n    }\n\n\n\n    /**\n",
          "message": "Reentrancy in Comptroller.distributeVAIMinterVenus (VBNBHarness.sol#5129-5148):\n\tExternal calls:\n\t- releaseToVault() (VBNBHarness.sol#5131-5134)\n\t- (err,vaiMinterAccrued,vaiMinterDelta,vaiMintIndexMantissa) = vaiController.calcDistributeVAIMinterVenus(vaiMinter) (VBNBHarness.sol#5139-5140)\n\tState variables written after the call(s):\n\t- venusAccrued (VBNBHarness.sol#5141-5142)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1351,
          "vulnerability_to_line": 1382,
          "vulnerability_code": "    function initialize(ComptrollerInterface comptroller_,\n\n                        InterestRateModel interestRateModel_,\n\n                        uint initialExchangeRateMantissa_,\n\n                        string memory name_,\n\n                        string memory symbol_,\n\n                        uint8 decimals_) public {\n\n        require(msg.sender == admin, \"only admin may initialize the market\");\n\n        require(accrualBlockNumber == 0 && borrowIndex == 0, \"market may only be initialized once\");\n\n\n\n        // Set initial exchange rate\n\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\n\n        require(initialExchangeRateMantissa > 0, \"initial exchange rate must be greater than zero.\");\n\n\n\n        // Set the comptroller\n\n        uint err = _setComptroller(comptroller_);\n\n        require(err == uint(Error.NO_ERROR), \"setting comptroller failed\");\n\n\n\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\n\n        accrualBlockNumber = getBlockNumber();\n\n        borrowIndex = mantissaOne;\n\n\n\n        // Set the interest rate model (depends on block number / borrow index)\n\n        err = _setInterestRateModelFresh(interestRateModel_);\n\n        require(err == uint(Error.NO_ERROR), \"setting interest rate model failed\");\n\n\n\n        name = name_;\n\n        symbol = symbol_;\n\n        decimals = decimals_;\n\n\n\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\n\n        _notEntered = true;\n",
          "message": "Reentrancy in VToken.initialize (VBNBHarness.sol#1351-1382):\n\tExternal calls:\n\t- err = _setComptroller(comptroller_) (VBNBHarness.sol#1365)\n\t- err = _setInterestRateModelFresh(interestRateModel_) (VBNBHarness.sol#1373)\n\tState variables written after the call(s):\n\t- _notEntered (VBNBHarness.sol#1381)\n\t- decimals (VBNBHarness.sol#1378)\n\t- name (VBNBHarness.sol#1376)\n\t- symbol (VBNBHarness.sol#1377)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1822,
          "vulnerability_to_line": 1886,
          "vulnerability_code": "    function mintFresh(address minter, uint mintAmount) internal returns (uint, uint) {\n\n        /* Fail if mint not allowed */\n\n        uint allowed = comptroller.mintAllowed(address(this), minter, mintAmount);\n\n        if (allowed != 0) {\n\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\n\n        }\n\n\n\n        /* Verify market's block number equals current block number */\n\n        if (accrualBlockNumber != getBlockNumber()) {\n\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);\n\n        }\n\n\n\n        MintLocalVars memory vars;\n\n\n\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\n\n        if (vars.mathErr != MathError.NO_ERROR) {\n\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr)), 0);\n\n        }\n\n\n\n        /////////////////////////\n\n        // EFFECTS & INTERACTIONS\n\n        // (No safe failures beyond this point)\n\n\n\n        /*\n\n         *  We call `doTransferIn` for the minter and the mintAmount.\n\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\n\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\n\n         *  side-effects occurred. The function returns the amount actually transferred,\n\n         *  in case of a fee. On success, the vToken holds an additional `actualMintAmount`\n\n         *  of cash.\n\n         */\n\n        vars.actualMintAmount = doTransferIn(minter, mintAmount);\n\n\n\n        /*\n\n         * We get the current exchange rate and calculate the number of vTokens to be minted:\n\n         *  mintTokens = actualMintAmount / exchangeRate\n\n         */\n\n\n\n        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(vars.actualMintAmount, Exp({mantissa: vars.exchangeRateMantissa}));\n\n        require(vars.mathErr == MathError.NO_ERROR, \"MINT_EXCHANGE_CALCULATION_FAILED\");\n\n\n\n        /*\n\n         * We calculate the new total supply of vTokens and minter token balance, checking for overflow:\n\n         *  totalSupplyNew = totalSupply + mintTokens\n\n         *  accountTokensNew = accountTokens[minter] + mintTokens\n\n         */\n\n        (vars.mathErr, vars.totalSupplyNew) = addUInt(totalSupply, vars.mintTokens);\n\n        require(vars.mathErr == MathError.NO_ERROR, \"MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED\");\n\n\n\n        (vars.mathErr, vars.accountTokensNew) = addUInt(accountTokens[minter], vars.mintTokens);\n\n        require(vars.mathErr == MathError.NO_ERROR, \"MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED\");\n\n\n\n        /* We write previously calculated values into storage */\n\n        totalSupply = vars.totalSupplyNew;\n\n        accountTokens[minter] = vars.accountTokensNew;\n\n\n\n        /* We emit a Mint event, and a Transfer event */\n\n        emit Mint(minter, vars.actualMintAmount, vars.mintTokens);\n\n        emit Transfer(address(this), minter, vars.mintTokens);\n\n\n\n        /* We call the defense hook */\n\n        comptroller.mintVerify(address(this), minter, vars.actualMintAmount, vars.mintTokens);\n\n\n\n        return (uint(Error.NO_ERROR), vars.actualMintAmount);\n",
          "message": "Reentrancy in VToken.mintFresh (VBNBHarness.sol#1822-1886):\n\tExternal calls:\n\t- allowed = comptroller.mintAllowed(address(this),minter,mintAmount) (VBNBHarness.sol#1824)\n\tState variables written after the call(s):\n\t- accountTokens (VBNBHarness.sol#1876)\n\t- totalSupply (VBNBHarness.sol#1875)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 2201,
          "vulnerability_to_line": 2267,
          "vulnerability_code": "    function repayBorrowFresh(address payer, address borrower, uint repayAmount) internal returns (uint, uint) {\n\n        /* Fail if repayBorrow not allowed */\n\n        uint allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\n\n        if (allowed != 0) {\n\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION, allowed), 0);\n\n        }\n\n\n\n        /* Verify market's block number equals current block number */\n\n        if (accrualBlockNumber != getBlockNumber()) {\n\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.REPAY_BORROW_FRESHNESS_CHECK), 0);\n\n        }\n\n\n\n        RepayBorrowLocalVars memory vars;\n\n\n\n        /* We remember the original borrowerIndex for verification purposes */\n\n        vars.borrowerIndex = accountBorrows[borrower].interestIndex;\n\n\n\n        /* We fetch the amount the borrower owes, with accumulated interest */\n\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\n\n        if (vars.mathErr != MathError.NO_ERROR) {\n\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr)), 0);\n\n        }\n\n\n\n        /* If repayAmount == -1, repayAmount = accountBorrows */\n\n        if (repayAmount == uint(-1)) {\n\n            vars.repayAmount = vars.accountBorrows;\n\n        } else {\n\n            vars.repayAmount = repayAmount;\n\n        }\n\n\n\n        /////////////////////////\n\n        // EFFECTS & INTERACTIONS\n\n        // (No safe failures beyond this point)\n\n\n\n        /*\n\n         * We call doTransferIn for the payer and the repayAmount\n\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\n\n         *  On success, the vToken holds an additional repayAmount of cash.\n\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\n\n         *   it returns the amount actually transferred, in case of a fee.\n\n         */\n\n        vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount);\n\n\n\n        /*\n\n         * We calculate the new borrower and total borrow balances, failing on underflow:\n\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\n\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\n\n         */\n\n        (vars.mathErr, vars.accountBorrowsNew) = subUInt(vars.accountBorrows, vars.actualRepayAmount);\n\n        require(vars.mathErr == MathError.NO_ERROR, \"REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED\");\n\n\n\n        (vars.mathErr, vars.totalBorrowsNew) = subUInt(totalBorrows, vars.actualRepayAmount);\n\n        require(vars.mathErr == MathError.NO_ERROR, \"REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED\");\n\n\n\n        /* We write the previously calculated values into storage */\n\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\n\n        accountBorrows[borrower].interestIndex = borrowIndex;\n\n        totalBorrows = vars.totalBorrowsNew;\n\n\n\n        /* We emit a RepayBorrow event */\n\n        emit RepayBorrow(payer, borrower, vars.actualRepayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\n\n\n\n        /* We call the defense hook */\n\n        comptroller.repayBorrowVerify(address(this), payer, borrower, vars.actualRepayAmount, vars.borrowerIndex);\n\n\n\n        return (uint(Error.NO_ERROR), vars.actualRepayAmount);\n",
          "message": "Reentrancy in VToken.repayBorrowFresh (VBNBHarness.sol#2201-2267):\n\tExternal calls:\n\t- allowed = comptroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (VBNBHarness.sol#2203)\n\tState variables written after the call(s):\n\t- accountBorrows (VBNBHarness.sol#2256)\n\t- accountBorrows (VBNBHarness.sol#2257)\n\t- totalBorrows (VBNBHarness.sol#2258)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 2396,
          "vulnerability_to_line": 2442,
          "vulnerability_code": "    function seizeInternal(address seizerToken, address liquidator, address borrower, uint seizeTokens) internal returns (uint) {\n\n        /* Fail if seize not allowed */\n\n        uint allowed = comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens);\n\n        if (allowed != 0) {\n\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION, allowed);\n\n        }\n\n\n\n        /* Fail if borrower = liquidator */\n\n        if (borrower == liquidator) {\n\n            return fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER);\n\n        }\n\n\n\n        MathError mathErr;\n\n        uint borrowerTokensNew;\n\n        uint liquidatorTokensNew;\n\n\n\n        /*\n\n         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\n\n         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\n\n         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\n\n         */\n\n        (mathErr, borrowerTokensNew) = subUInt(accountTokens[borrower], seizeTokens);\n\n        if (mathErr != MathError.NO_ERROR) {\n\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED, uint(mathErr));\n\n        }\n\n\n\n        (mathErr, liquidatorTokensNew) = addUInt(accountTokens[liquidator], seizeTokens);\n\n        if (mathErr != MathError.NO_ERROR) {\n\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED, uint(mathErr));\n\n        }\n\n\n\n        /////////////////////////\n\n        // EFFECTS & INTERACTIONS\n\n        // (No safe failures beyond this point)\n\n\n\n        /* We write the previously calculated values into storage */\n\n        accountTokens[borrower] = borrowerTokensNew;\n\n        accountTokens[liquidator] = liquidatorTokensNew;\n\n\n\n        /* Emit a Transfer event */\n\n        emit Transfer(borrower, liquidator, seizeTokens);\n\n\n\n        /* We call the defense hook */\n\n        comptroller.seizeVerify(address(this), seizerToken, liquidator, borrower, seizeTokens);\n\n\n\n        return uint(Error.NO_ERROR);\n",
          "message": "Reentrancy in VToken.seizeInternal (VBNBHarness.sol#2396-2442):\n\tExternal calls:\n\t- allowed = comptroller.seizeAllowed(address(this),seizerToken,liquidator,borrower,seizeTokens) (VBNBHarness.sol#2398)\n\tState variables written after the call(s):\n\t- accountTokens (VBNBHarness.sol#2432)\n\t- accountTokens (VBNBHarness.sol#2433)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1393,
          "vulnerability_to_line": 1452,
          "vulnerability_code": "    function transferTokens(address spender, address src, address dst, uint tokens) internal returns (uint) {\n\n        /* Fail if transfer not allowed */\n\n        uint allowed = comptroller.transferAllowed(address(this), src, dst, tokens);\n\n        if (allowed != 0) {\n\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.TRANSFER_COMPTROLLER_REJECTION, allowed);\n\n        }\n\n\n\n        /* Do not allow self-transfers */\n\n        if (src == dst) {\n\n            return fail(Error.BAD_INPUT, FailureInfo.TRANSFER_NOT_ALLOWED);\n\n        }\n\n\n\n        /* Get the allowance, infinite for the account owner */\n\n        uint startingAllowance = 0;\n\n        if (spender == src) {\n\n            startingAllowance = uint(-1);\n\n        } else {\n\n            startingAllowance = transferAllowances[src][spender];\n\n        }\n\n\n\n        /* Do the calculations, checking for {under,over}flow */\n\n        MathError mathErr;\n\n        uint allowanceNew;\n\n        uint srvTokensNew;\n\n        uint dstTokensNew;\n\n\n\n        (mathErr, allowanceNew) = subUInt(startingAllowance, tokens);\n\n        if (mathErr != MathError.NO_ERROR) {\n\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ALLOWED);\n\n        }\n\n\n\n        (mathErr, srvTokensNew) = subUInt(accountTokens[src], tokens);\n\n        if (mathErr != MathError.NO_ERROR) {\n\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ENOUGH);\n\n        }\n\n\n\n        (mathErr, dstTokensNew) = addUInt(accountTokens[dst], tokens);\n\n        if (mathErr != MathError.NO_ERROR) {\n\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_TOO_MUCH);\n\n        }\n\n\n\n        /////////////////////////\n\n        // EFFECTS & INTERACTIONS\n\n        // (No safe failures beyond this point)\n\n\n\n        accountTokens[src] = srvTokensNew;\n\n        accountTokens[dst] = dstTokensNew;\n\n\n\n        /* Eat some of the allowance (if necessary) */\n\n        if (startingAllowance != uint(-1)) {\n\n            transferAllowances[src][spender] = allowanceNew;\n\n        }\n\n\n\n        /* We emit a Transfer event */\n\n        emit Transfer(src, dst, tokens);\n\n\n\n        comptroller.transferVerify(address(this), src, dst, tokens);\n\n\n\n        return uint(Error.NO_ERROR);\n",
          "message": "Reentrancy in VToken.transferTokens (VBNBHarness.sol#1393-1452):\n\tExternal calls:\n\t- allowed = comptroller.transferAllowed(address(this),src,dst,tokens) (VBNBHarness.sol#1395)\n\tState variables written after the call(s):\n\t- accountTokens (VBNBHarness.sol#1438)\n\t- accountTokens (VBNBHarness.sol#1439)\n\t- transferAllowances (VBNBHarness.sol#1443)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 3298,
          "vulnerability_to_line": 3313,
          "vulnerability_code": "    function () external payable {\n\n        // delegate all other functions to current implementation\n\n        (bool success, ) = comptrollerImplementation.delegatecall(msg.data);\n\n\n\n        assembly {\n\n              let free_mem_ptr := mload(0x40)\n\n              returndatacopy(free_mem_ptr, 0, returndatasize)\n\n\n\n              switch success\n\n              case 0 { revert(free_mem_ptr, returndatasize) }\n\n              default { return(free_mem_ptr, returndatasize) }\n\n        }\n\n    }\n\n}\n\n\n",
          "message": "Unitroller.fallback uses assembly (VBNBHarness.sol#3298-3313)\n\t- VBNBHarness.sol#3302-3313\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 3654,
          "vulnerability_to_line": 3661,
          "vulnerability_code": "    function getChainId() internal pure returns (uint) {\n\n        uint256 chainId;\n\n        assembly { chainId := chainid() }\n\n        return chainId;\n\n    }\n\n}\n\n\n",
          "message": "XVS.getChainId uses assembly (VBNBHarness.sol#3654-3661)\n\t- VBNBHarness.sol#3656-3657\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 3068,
          "vulnerability_to_line": 3069,
          "vulnerability_code": "    bool public _borrowGuardianPaused;\n",
          "message": "ComptrollerV1Storage._borrowGuardianPaused should be constant (VBNBHarness.sol#3068-3069)\nComptrollerV1Storage._mintGuardianPaused should be constant (VBNBHarness.sol#3067-3068)\nComptrollerV1Storage.mintVAIGuardianPaused should be constant (VBNBHarness.sol#3118-3119)\nComptrollerV1Storage.repayVAIGuardianPaused should be constant (VBNBHarness.sol#3119-3121)\nComptrollerV1Storage.seizeGuardianPaused should be constant (VBNBHarness.sol#3070-3071)\nComptrollerV1Storage.transferGuardianPaused should be constant (VBNBHarness.sol#3069-3070)\nComptrollerV1Storage.venusRate should be constant (VBNBHarness.sol#3086-3088)\nVBNBScenario.reserveFactor should be constant (VBNBHarness.sol#5606-5608)\nVBep20Storage.underlying should be constant (VBNBHarness.sol#379)\nVDelegationStorage.implementation should be constant (VBNBHarness.sol#404)\n"
        },
        {
          "name": "pragma",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": "Different versions of Solidity is used in VBNBHarness.sol:\n\t- Version used: ['>=0.5.16', '^0.5.16']\n\t- VBNBHarness.sol#3 declares pragma solidity^0.5.16\n\t- VBNBHarness.sol#97 declares pragma solidity^0.5.16\n\t- VBNBHarness.sol#130 declares pragma solidity^0.5.16\n\t- VBNBHarness.sol#438 declares pragma solidity^0.5.16\n\t- VBNBHarness.sol#723 declares pragma solidity^0.5.16\n\t- VBNBHarness.sol#811 declares pragma solidity^0.5.16\n\t- VBNBHarness.sol#1009 declares pragma solidity^0.5.16\n\t- VBNBHarness.sol#1192 declares pragma solidity^0.5.16\n\t- VBNBHarness.sol#1256 declares pragma solidity^0.5.16\n\t- VBNBHarness.sol#1328 declares pragma solidity^0.5.16\n\t- VBNBHarness.sol#2783-2786 declares pragma solidity^0.5.16\n\t- VBNBHarness.sol#2952-2954 declares pragma solidity^0.5.16\n\t- VBNBHarness.sol#2969-2971 declares pragma solidity^0.5.16\n\t- VBNBHarness.sol#2984-2988 declares pragma solidity^0.5.16\n\t- VBNBHarness.sol#3165-3168 declares pragma solidity^0.5.16\n\t- VBNBHarness.sol#3315-3317 declares pragma solidity^0.5.16\n\t- VBNBHarness.sol#3678-3680 declares pragma solidity>=0.5.16\n\t- VBNBHarness.sol#3728-3730 declares pragma solidity>=0.5.16\n\t- VBNBHarness.sol#3854-3863 declares pragma solidity^0.5.16\n\t- VBNBHarness.sol#5348-5350 declares pragma solidity^0.5.16\n\t- VBNBHarness.sol#5449-5452 declares pragma solidity^0.5.16\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 372,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint);\n",
          "message": "VTokenInterface._setInterestRateModel (VBNBHarness.sol#372) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 2699,
          "vulnerability_to_line": 2709,
          "vulnerability_code": "    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint) {\n\n        uint error = accrueInterest();\n\n        if (error != uint(Error.NO_ERROR)) {\n\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted change of interest rate model failed\n\n            return fail(Error(error), FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED);\n\n        }\n\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\n\n        return _setInterestRateModelFresh(newInterestRateModel);\n\n    }\n\n\n",
          "message": "VToken._setInterestRateModel (VBNBHarness.sol#2699-2709) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 419,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) public;\n",
          "message": "VDelegatorInterface._setImplementation (VBNBHarness.sol#419) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 428,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _becomeImplementation(bytes memory data) public;\n",
          "message": "VDelegateInterface._becomeImplementation (VBNBHarness.sol#428) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 433,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _resignImplementation() public;\n",
          "message": "VDelegateInterface._resignImplementation (VBNBHarness.sol#433) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 2972,
          "vulnerability_to_line": 2973,
          "vulnerability_code": "    function getVAIAddress() public view returns (address);\n",
          "message": "VAIControllerInterface.getVAIAddress (VBNBHarness.sol#2972-2973) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 2973,
          "vulnerability_to_line": 2974,
          "vulnerability_code": "    function getMintableVAI(address minter) public view returns (uint, uint);\n",
          "message": "VAIControllerInterface.getMintableVAI (VBNBHarness.sol#2973-2974) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 3201,
          "vulnerability_to_line": 3216,
          "vulnerability_code": "    function _setPendingImplementation(address newPendingImplementation) public returns (uint) {\n\n\n\n        if (msg.sender != admin) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_IMPLEMENTATION_OWNER_CHECK);\n\n        }\n\n\n\n        address oldPendingImplementation = pendingComptrollerImplementation;\n\n\n\n        pendingComptrollerImplementation = newPendingImplementation;\n\n\n\n        emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n",
          "message": "Unitroller._setPendingImplementation (VBNBHarness.sol#3201-3216) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 3221,
          "vulnerability_to_line": 3242,
          "vulnerability_code": "    function _acceptImplementation() public returns (uint) {\n\n        // Check caller is pendingImplementation and pendingImplementation \u2260 address(0)\n\n        if (msg.sender != pendingComptrollerImplementation || pendingComptrollerImplementation == address(0)) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK);\n\n        }\n\n\n\n        // Save current values for inclusion in log\n\n        address oldImplementation = comptrollerImplementation;\n\n        address oldPendingImplementation = pendingComptrollerImplementation;\n\n\n\n        comptrollerImplementation = pendingComptrollerImplementation;\n\n\n\n        pendingComptrollerImplementation = address(0);\n\n\n\n        emit NewImplementation(oldImplementation, comptrollerImplementation);\n\n        emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n\n\n",
          "message": "Unitroller._acceptImplementation (VBNBHarness.sol#3221-3242) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 3248,
          "vulnerability_to_line": 3266,
          "vulnerability_code": "    function _setPendingAdmin(address newPendingAdmin) public returns (uint) {\n\n        // Check caller = admin\n\n        if (msg.sender != admin) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\n\n        }\n\n\n\n        // Save current value, if any, for inclusion in log\n\n        address oldPendingAdmin = pendingAdmin;\n\n\n\n        // Store pendingAdmin with value newPendingAdmin\n\n        pendingAdmin = newPendingAdmin;\n\n\n\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\n\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n",
          "message": "Unitroller._setPendingAdmin (VBNBHarness.sol#3248-3266) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 3271,
          "vulnerability_to_line": 3294,
          "vulnerability_code": "    function _acceptAdmin() public returns (uint) {\n\n        // Check caller is pendingAdmin and pendingAdmin \u2260 address(0)\n\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\n\n        }\n\n\n\n        // Save current values for inclusion in log\n\n        address oldAdmin = admin;\n\n        address oldPendingAdmin = pendingAdmin;\n\n\n\n        // Store admin with value pendingAdmin\n\n        admin = pendingAdmin;\n\n\n\n        // Clear the pending value\n\n        pendingAdmin = address(0);\n\n\n\n        emit NewAdmin(oldAdmin, admin);\n\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n\n    /**\n",
          "message": "Unitroller._acceptAdmin (VBNBHarness.sol#3271-3294) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 3332,
          "vulnerability_to_line": 3338,
          "vulnerability_code": "    function transferOwnership(address newOwner) public onlyOwner {\n\n        owner = newOwner;\n\n        emit OwnershipTransferred(owner, newOwner);\n\n    }\n\n}\n\n\n",
          "message": "Owned.transferOwnership (VBNBHarness.sol#3332-3338) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 3350,
          "vulnerability_to_line": 3356,
          "vulnerability_code": "    function freeze() public onlyOwner {\n\n        isLocked = 1;\n\n\n\n        emit Freezed();\n\n    }\n\n\n",
          "message": "Tokenlock.freeze (VBNBHarness.sol#3350-3356) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 3356,
          "vulnerability_to_line": 3363,
          "vulnerability_code": "    function unfreeze() public onlyOwner {\n\n        isLocked = 0;\n\n\n\n        emit UnFreezed();\n\n    }\n\n}\n\n\n",
          "message": "Tokenlock.unfreeze (VBNBHarness.sol#3356-3363) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 3506,
          "vulnerability_to_line": 3511,
          "vulnerability_code": "    function delegate(address delegatee) public validLock {\n\n        return _delegate(msg.sender, delegatee);\n\n    }\n\n\n\n    /**\n",
          "message": "XVS.delegate (VBNBHarness.sol#3506-3511) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 3519,
          "vulnerability_to_line": 3531,
          "vulnerability_code": "    function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public validLock {\n\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\n\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\n\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n\n        address signatory = ecrecover(digest, v, r, s);\n\n        require(signatory != address(0), \"XVS::delegateBySig: invalid signature\");\n\n        require(nonce == nonces[signatory]++, \"XVS::delegateBySig: invalid nonce\");\n\n        require(now <= expiry, \"XVS::delegateBySig: signature expired\");\n\n        return _delegate(signatory, delegatee);\n\n    }\n\n\n\n    /**\n",
          "message": "XVS.delegateBySig (VBNBHarness.sol#3519-3531) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 3547,
          "vulnerability_to_line": 3581,
          "vulnerability_code": "    function getPriorVotes(address account, uint blockNumber) public view returns (uint96) {\n\n        require(blockNumber < block.number, \"XVS::getPriorVotes: not yet determined\");\n\n\n\n        uint32 nCheckpoints = numCheckpoints[account];\n\n        if (nCheckpoints == 0) {\n\n            return 0;\n\n        }\n\n\n\n        // First check most recent balance\n\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\n\n            return checkpoints[account][nCheckpoints - 1].votes;\n\n        }\n\n\n\n        // Next check implicit zero balance\n\n        if (checkpoints[account][0].fromBlock > blockNumber) {\n\n            return 0;\n\n        }\n\n\n\n        uint32 lower = 0;\n\n        uint32 upper = nCheckpoints - 1;\n\n        while (upper > lower) {\n\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n\n            Checkpoint memory cp = checkpoints[account][center];\n\n            if (cp.fromBlock == blockNumber) {\n\n                return cp.votes;\n\n            } else if (cp.fromBlock < blockNumber) {\n\n                lower = center;\n\n            } else {\n\n                upper = center - 1;\n\n            }\n\n        }\n\n        return checkpoints[account][lower].votes;\n\n    }\n\n\n",
          "message": "XVS.getPriorVotes (VBNBHarness.sol#3547-3581) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 4547,
          "vulnerability_to_line": 4554,
          "vulnerability_code": "    function getAccountLiquidity(address account) public view returns (uint, uint, uint) {\n\n        (Error err, uint liquidity, uint shortfall) = getHypotheticalAccountLiquidityInternal(account, VToken(0), 0, 0);\n\n\n\n        return (uint(err), liquidity, shortfall);\n\n    }\n\n\n\n    /**\n",
          "message": "Comptroller.getAccountLiquidity (VBNBHarness.sol#4547-4554) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 4563,
          "vulnerability_to_line": 4573,
          "vulnerability_code": "    function getHypotheticalAccountLiquidity(\n\n        address account,\n\n        address vTokenModify,\n\n        uint redeemTokens,\n\n        uint borrowAmount) public view returns (uint, uint, uint) {\n\n        (Error err, uint liquidity, uint shortfall) = getHypotheticalAccountLiquidityInternal(account, VToken(vTokenModify), redeemTokens, borrowAmount);\n\n        return (uint(err), liquidity, shortfall);\n\n    }\n\n\n\n    /**\n",
          "message": "Comptroller.getHypotheticalAccountLiquidity (VBNBHarness.sol#4563-4573) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 4724,
          "vulnerability_to_line": 4743,
          "vulnerability_code": "    function _setPriceOracle(PriceOracle newOracle) public returns (uint) {\n\n        // Check caller is admin\n\n        if (msg.sender != admin) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK);\n\n        }\n\n\n\n        // Track the old oracle for the comptroller\n\n        PriceOracle oldOracle = oracle;\n\n\n\n        // Set comptroller's oracle to newOracle\n\n        oracle = newOracle;\n\n\n\n        // Emit NewPriceOracle(oldOracle, newOracle)\n\n        emit NewPriceOracle(oldOracle, newOracle);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n\n    /**\n",
          "message": "Comptroller._setPriceOracle (VBNBHarness.sol#4724-4743) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 4864,
          "vulnerability_to_line": 4882,
          "vulnerability_code": "    function _setPauseGuardian(address newPauseGuardian) public returns (uint) {\n\n        if (msg.sender != admin) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PAUSE_GUARDIAN_OWNER_CHECK);\n\n        }\n\n\n\n        // Save current value for inclusion in log\n\n        address oldPauseGuardian = pauseGuardian;\n\n\n\n        // Store pauseGuardian with value newPauseGuardian\n\n        pauseGuardian = newPauseGuardian;\n\n\n\n        // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)\n\n        emit NewPauseGuardian(oldPauseGuardian, newPauseGuardian);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n\n    /**\n",
          "message": "Comptroller._setPauseGuardian (VBNBHarness.sol#4864-4882) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 4919,
          "vulnerability_to_line": 4926,
          "vulnerability_code": "    function _setProtocolPaused(bool state) public validPauseState(state) returns(bool) {\n\n        protocolPaused = state;\n\n        emit ActionProtocolPaused(state);\n\n        return state;\n\n    }\n\n\n\n    /**\n",
          "message": "Comptroller._setProtocolPaused (VBNBHarness.sol#4919-4926) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 4977,
          "vulnerability_to_line": 4983,
          "vulnerability_code": "    function _become(Unitroller unitroller) public {\n\n        require(msg.sender == unitroller.admin(), \"only unitroller admin can\");\n\n        require(unitroller._acceptImplementation() == 0, \"not authorized\");\n\n    }\n\n\n\n    /**\n",
          "message": "Comptroller._become (VBNBHarness.sol#4977-4983) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5151,
          "vulnerability_to_line": 5156,
          "vulnerability_code": "    function claimVenus(address holder) public {\n\n        return claimVenus(holder, allMarkets);\n\n    }\n\n\n\n    /**\n",
          "message": "Comptroller.claimVenus (VBNBHarness.sol#5151-5156) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5226,
          "vulnerability_to_line": 5233,
          "vulnerability_code": "    function _setVenusVAIRate(uint venusVAIRate_) public onlyAdmin {\n\n        uint oldVAIRate = venusVAIRate;\n\n        venusVAIRate = venusVAIRate_;\n\n        emit NewVenusVAIRate(oldVAIRate, venusVAIRate_);\n\n    }\n\n\n\n    /**\n",
          "message": "Comptroller._setVenusVAIRate (VBNBHarness.sol#5226-5233) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5236,
          "vulnerability_to_line": 5243,
          "vulnerability_code": "    function _setVenusVAIVaultRate(uint venusVAIVaultRate_) public onlyAdmin {\n\n        uint oldVenusVAIVaultRate = venusVAIVaultRate;\n\n        venusVAIVaultRate = venusVAIVaultRate_;\n\n        emit NewVenusVAIVaultRate(oldVenusVAIVaultRate, venusVAIVaultRate_);\n\n    }\n\n\n\n    /**\n",
          "message": "Comptroller._setVenusVAIVaultRate (VBNBHarness.sol#5236-5243) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5248,
          "vulnerability_to_line": 5256,
          "vulnerability_code": "    function _setVAIVaultInfo(address vault_, uint256 releaseStartBlock_, uint256 minReleaseAmount_) public onlyAdmin {\n\n        vaiVaultAddress = vault_;\n\n        releaseStartBlock = releaseStartBlock_;\n\n        minReleaseAmount = minReleaseAmount_;\n\n        emit NewVAIVaultInfo(vault_, releaseStartBlock_, minReleaseAmount_);\n\n    }\n\n\n\n    /**\n",
          "message": "Comptroller._setVAIVaultInfo (VBNBHarness.sol#5248-5256) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5260,
          "vulnerability_to_line": 5266,
          "vulnerability_code": "    function _setVenusSpeed(VToken vToken, uint venusSpeed) public {\n\n        require(adminOrInitializing(), \"only admin can set venus speed\");\n\n        setVenusSpeedInternal(vToken, venusSpeed);\n\n    }\n\n\n\n    /**\n",
          "message": "Comptroller._setVenusSpeed (VBNBHarness.sol#5260-5266) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5270,
          "vulnerability_to_line": 5274,
          "vulnerability_code": "    function getAllMarkets() public view returns (VToken[] memory) {\n\n        return allMarkets;\n\n    }\n\n\n",
          "message": "Comptroller.getAllMarkets (VBNBHarness.sol#5270-5274) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5357,
          "vulnerability_to_line": 5361,
          "vulnerability_code": "    function setXVSAddress(address xvsAddress_) public {\n\n        xvsAddress = xvsAddress_;\n\n    }\n\n\n",
          "message": "ComptrollerScenario.setXVSAddress (VBNBHarness.sol#5357-5361) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5365,
          "vulnerability_to_line": 5369,
          "vulnerability_code": "    function setVAIAddress(address vaiAddress_) public {\n\n        vaiAddress = vaiAddress_;\n\n    }\n\n\n",
          "message": "ComptrollerScenario.setVAIAddress (VBNBHarness.sol#5365-5369) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5369,
          "vulnerability_to_line": 5373,
          "vulnerability_code": "    function getVAIAddress() public view returns (address) {\n\n        return vaiAddress;\n\n    }\n\n\n",
          "message": "ComptrollerScenario.getVAIAddress (VBNBHarness.sol#5369-5373) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5373,
          "vulnerability_to_line": 5377,
          "vulnerability_code": "    function membershipLength(VToken vToken) public view returns (uint) {\n\n        return accountAssets[address(vToken)].length;\n\n    }\n\n\n",
          "message": "ComptrollerScenario.membershipLength (VBNBHarness.sol#5373-5377) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5377,
          "vulnerability_to_line": 5383,
          "vulnerability_code": "    function fastForward(uint blocks) public returns (uint) {\n\n        blockNumber += blocks;\n\n\n\n        return blockNumber;\n\n    }\n\n\n",
          "message": "ComptrollerScenario.fastForward (VBNBHarness.sol#5377-5383) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5383,
          "vulnerability_to_line": 5387,
          "vulnerability_code": "    function setBlockNumber(uint number) public {\n\n        blockNumber = number;\n\n    }\n\n\n",
          "message": "ComptrollerScenario.setBlockNumber (VBNBHarness.sol#5383-5387) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5391,
          "vulnerability_to_line": 5410,
          "vulnerability_code": "    function getVenusMarkets() public view returns (address[] memory) {\n\n        uint m = allMarkets.length;\n\n        uint n = 0;\n\n        for (uint i = 0; i < m; i++) {\n\n            if (markets[address(allMarkets[i])].isVenus) {\n\n                n++;\n\n            }\n\n        }\n\n\n\n        address[] memory venusMarkets = new address[](n);\n\n        uint k = 0;\n\n        for (uint i = 0; i < m; i++) {\n\n            if (markets[address(allMarkets[i])].isVenus) {\n\n                venusMarkets[k++] = address(allMarkets[i]);\n\n            }\n\n        }\n\n        return venusMarkets;\n\n    }\n\n\n",
          "message": "ComptrollerScenario.getVenusMarkets (VBNBHarness.sol#5391-5410) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5410,
          "vulnerability_to_line": 5415,
          "vulnerability_code": "    function unlist(VToken vToken) public {\n\n        markets[address(vToken)].isListed = false;\n\n    }\n\n\n\n    /**\n",
          "message": "ComptrollerScenario.unlist (VBNBHarness.sol#5410-5415) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5417,
          "vulnerability_to_line": 5447,
          "vulnerability_code": "    function refreshVenusSpeeds() public {\n\n        VToken[] memory allMarkets_ = allMarkets;\n\n\n\n        for (uint i = 0; i < allMarkets_.length; i++) {\n\n            VToken vToken = allMarkets_[i];\n\n            Exp memory borrowIndex = Exp({mantissa: vToken.borrowIndex()});\n\n            updateVenusSupplyIndex(address(vToken));\n\n            updateVenusBorrowIndex(address(vToken), borrowIndex);\n\n        }\n\n\n\n        Exp memory totalUtility = Exp({mantissa: 0});\n\n        Exp[] memory utilities = new Exp[](allMarkets_.length);\n\n        for (uint i = 0; i < allMarkets_.length; i++) {\n\n            VToken vToken = allMarkets_[i];\n\n            if (venusSpeeds[address(vToken)] > 0) {\n\n                Exp memory assetPrice = Exp({mantissa: oracle.getUnderlyingPrice(vToken)});\n\n                Exp memory utility = mul_(assetPrice, vToken.totalBorrows());\n\n                utilities[i] = utility;\n\n                totalUtility = add_(totalUtility, utility);\n\n            }\n\n        }\n\n\n\n        for (uint i = 0; i < allMarkets_.length; i++) {\n\n            VToken vToken = allMarkets[i];\n\n            uint newSpeed = totalUtility.mantissa > 0 ? mul_(venusRate, div_(utilities[i], totalUtility)) : 0;\n\n            setVenusSpeedInternal(vToken, newSpeed);\n\n        }\n\n    }\n\n}\n\n\n",
          "message": "ComptrollerScenario.refreshVenusSpeeds (VBNBHarness.sol#5417-5447) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5490,
          "vulnerability_to_line": 5494,
          "vulnerability_code": "    function harnessSetBlockNumber(uint newBlockNumber) public {\n\n        blockNumber = newBlockNumber;\n\n    }\n\n\n",
          "message": "VBNBHarness.harnessSetBlockNumber (VBNBHarness.sol#5490-5494) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5494,
          "vulnerability_to_line": 5498,
          "vulnerability_code": "    function harnessFastForward(uint blocks) public {\n\n        blockNumber += blocks;\n\n    }\n\n\n",
          "message": "VBNBHarness.harnessFastForward (VBNBHarness.sol#5494-5498) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5502,
          "vulnerability_to_line": 5506,
          "vulnerability_code": "    function harnessSetAccrualBlockNumber(uint _accrualblockNumber) public {\n\n        accrualBlockNumber = _accrualblockNumber;\n\n    }\n\n\n",
          "message": "VBNBHarness.harnessSetAccrualBlockNumber (VBNBHarness.sol#5502-5506) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5506,
          "vulnerability_to_line": 5510,
          "vulnerability_code": "    function harnessSetTotalSupply(uint totalSupply_) public {\n\n        totalSupply = totalSupply_;\n\n    }\n\n\n",
          "message": "VBNBHarness.harnessSetTotalSupply (VBNBHarness.sol#5506-5510) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5510,
          "vulnerability_to_line": 5514,
          "vulnerability_code": "    function harnessSetTotalBorrows(uint totalBorrows_) public {\n\n        totalBorrows = totalBorrows_;\n\n    }\n\n\n",
          "message": "VBNBHarness.harnessSetTotalBorrows (VBNBHarness.sol#5510-5514) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5514,
          "vulnerability_to_line": 5518,
          "vulnerability_code": "    function harnessSetTotalReserves(uint totalReserves_) public {\n\n        totalReserves = totalReserves_;\n\n    }\n\n\n",
          "message": "VBNBHarness.harnessSetTotalReserves (VBNBHarness.sol#5514-5518) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5518,
          "vulnerability_to_line": 5524,
          "vulnerability_code": "    function harnessExchangeRateDetails(uint _totalSupply, uint _totalBorrows, uint _totalReserves) public {\n\n        totalSupply = _totalSupply;\n\n        totalBorrows = _totalBorrows;\n\n        totalReserves = _totalReserves;\n\n    }\n\n\n",
          "message": "VBNBHarness.harnessExchangeRateDetails (VBNBHarness.sol#5518-5524) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5524,
          "vulnerability_to_line": 5528,
          "vulnerability_code": "    function harnessSetExchangeRate(uint exchangeRate) public {\n\n        harnessExchangeRate = exchangeRate;\n\n    }\n\n\n",
          "message": "VBNBHarness.harnessSetExchangeRate (VBNBHarness.sol#5524-5528) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5528,
          "vulnerability_to_line": 5532,
          "vulnerability_code": "    function harnessSetFailTransferToAddress(address _to, bool _fail) public {\n\n        failTransferToAddresses[_to] = _fail;\n\n    }\n\n\n",
          "message": "VBNBHarness.harnessSetFailTransferToAddress (VBNBHarness.sol#5528-5532) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5532,
          "vulnerability_to_line": 5537,
          "vulnerability_code": "    function harnessMintFresh(address account, uint mintAmount) public returns (uint) {\n\n        (uint err,) = super.mintFresh(account, mintAmount);\n\n        return err;\n\n    }\n\n\n",
          "message": "VBNBHarness.harnessMintFresh (VBNBHarness.sol#5532-5537) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5537,
          "vulnerability_to_line": 5541,
          "vulnerability_code": "    function harnessRedeemFresh(address payable account, uint vTokenAmount, uint underlyingAmount) public returns (uint) {\n\n        return super.redeemFresh(account, vTokenAmount, underlyingAmount);\n\n    }\n\n\n",
          "message": "VBNBHarness.harnessRedeemFresh (VBNBHarness.sol#5537-5541) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5541,
          "vulnerability_to_line": 5546,
          "vulnerability_code": "    function harnessAccountBorrows(address account) public view returns (uint principal, uint interestIndex) {\n\n        BorrowSnapshot memory snapshot = accountBorrows[account];\n\n        return (snapshot.principal, snapshot.interestIndex);\n\n    }\n\n\n",
          "message": "VBNBHarness.harnessAccountBorrows (VBNBHarness.sol#5541-5546) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5546,
          "vulnerability_to_line": 5550,
          "vulnerability_code": "    function harnessSetAccountBorrows(address account, uint principal, uint interestIndex) public {\n\n        accountBorrows[account] = BorrowSnapshot({principal: principal, interestIndex: interestIndex});\n\n    }\n\n\n",
          "message": "VBNBHarness.harnessSetAccountBorrows (VBNBHarness.sol#5546-5550) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5550,
          "vulnerability_to_line": 5554,
          "vulnerability_code": "    function harnessSetBorrowIndex(uint borrowIndex_) public {\n\n        borrowIndex = borrowIndex_;\n\n    }\n\n\n",
          "message": "VBNBHarness.harnessSetBorrowIndex (VBNBHarness.sol#5550-5554) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5554,
          "vulnerability_to_line": 5558,
          "vulnerability_code": "    function harnessBorrowFresh(address payable account, uint borrowAmount) public returns (uint) {\n\n        return borrowFresh(account, borrowAmount);\n\n    }\n\n\n",
          "message": "VBNBHarness.harnessBorrowFresh (VBNBHarness.sol#5554-5558) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5558,
          "vulnerability_to_line": 5563,
          "vulnerability_code": "    function harnessRepayBorrowFresh(address payer, address account, uint repayBorrowAmount) public payable returns (uint) {\n\n        (uint err,) = repayBorrowFresh(payer, account, repayBorrowAmount);\n\n        return err;\n\n    }\n\n\n",
          "message": "VBNBHarness.harnessRepayBorrowFresh (VBNBHarness.sol#5558-5563) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5563,
          "vulnerability_to_line": 5568,
          "vulnerability_code": "    function harnessLiquidateBorrowFresh(address liquidator, address borrower, uint repayAmount, VToken vTokenCollateral) public returns (uint) {\n\n        (uint err,) = liquidateBorrowFresh(liquidator, borrower, repayAmount, vTokenCollateral);\n\n        return err;\n\n    }\n\n\n",
          "message": "VBNBHarness.harnessLiquidateBorrowFresh (VBNBHarness.sol#5563-5568) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5568,
          "vulnerability_to_line": 5572,
          "vulnerability_code": "    function harnessReduceReservesFresh(uint amount) public returns (uint) {\n\n        return _reduceReservesFresh(amount);\n\n    }\n\n\n",
          "message": "VBNBHarness.harnessReduceReservesFresh (VBNBHarness.sol#5568-5572) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5572,
          "vulnerability_to_line": 5576,
          "vulnerability_code": "    function harnessSetReserves(uint amount) public {\n\n        totalReserves = amount;\n\n    }\n\n\n",
          "message": "VBNBHarness.harnessSetReserves (VBNBHarness.sol#5572-5576) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5576,
          "vulnerability_to_line": 5580,
          "vulnerability_code": "    function harnessSetReserveFactorFresh(uint newReserveFactorMantissa) public returns (uint) {\n\n        return _setReserveFactorFresh(newReserveFactorMantissa);\n\n    }\n\n\n",
          "message": "VBNBHarness.harnessSetReserveFactorFresh (VBNBHarness.sol#5576-5580) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5580,
          "vulnerability_to_line": 5584,
          "vulnerability_code": "    function harnessSetInterestRateModelFresh(InterestRateModel newInterestRateModel) public returns (uint) {\n\n        return _setInterestRateModelFresh(newInterestRateModel);\n\n    }\n\n\n",
          "message": "VBNBHarness.harnessSetInterestRateModelFresh (VBNBHarness.sol#5580-5584) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5584,
          "vulnerability_to_line": 5588,
          "vulnerability_code": "    function harnessSetInterestRateModel(address newInterestRateModelAddress) public {\n\n        interestRateModel = InterestRateModel(newInterestRateModelAddress);\n\n    }\n\n\n",
          "message": "VBNBHarness.harnessSetInterestRateModel (VBNBHarness.sol#5584-5588) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5588,
          "vulnerability_to_line": 5592,
          "vulnerability_code": "    function harnessGetCashPrior() public payable returns (uint) {\n\n        return getCashPrior();\n\n    }\n\n\n",
          "message": "VBNBHarness.harnessGetCashPrior (VBNBHarness.sol#5588-5592) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5592,
          "vulnerability_to_line": 5596,
          "vulnerability_code": "    function harnessDoTransferIn(address from, uint amount) public payable returns (uint) {\n\n        return doTransferIn(from, amount);\n\n    }\n\n\n",
          "message": "VBNBHarness.harnessDoTransferIn (VBNBHarness.sol#5592-5596) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5596,
          "vulnerability_to_line": 5600,
          "vulnerability_code": "    function harnessDoTransferOut(address payable to, uint amount) public payable {\n\n        return doTransferOut(to, amount);\n\n    }\n\n\n",
          "message": "VBNBHarness.harnessDoTransferOut (VBNBHarness.sol#5596-5600) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5624,
          "vulnerability_to_line": 5628,
          "vulnerability_code": "    function setTotalBorrows(uint totalBorrows_) public {\n\n        totalBorrows = totalBorrows_;\n\n    }\n\n\n",
          "message": "VBNBScenario.setTotalBorrows (VBNBHarness.sol#5624-5628) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5628,
          "vulnerability_to_line": 5632,
          "vulnerability_code": "    function setTotalReserves(uint totalReserves_) public {\n\n        totalReserves = totalReserves_;\n\n    }\n\n\n",
          "message": "VBNBScenario.setTotalReserves (VBNBHarness.sol#5628-5632) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5632,
          "vulnerability_to_line": 5636,
          "vulnerability_code": "    function donate() public payable {\n\n        // no-op\n\n    }\n\n\n",
          "message": "VBNBScenario.donate (VBNBHarness.sol#5632-5636) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": "Detected issues with version pragma in VBNBHarness.sol:\n\t- pragma solidity^0.5.16 (VBNBHarness.sol#3): it allows old versions\n\t- pragma solidity^0.5.16 (VBNBHarness.sol#97): it allows old versions\n\t- pragma solidity^0.5.16 (VBNBHarness.sol#130): it allows old versions\n\t- pragma solidity^0.5.16 (VBNBHarness.sol#438): it allows old versions\n\t- pragma solidity^0.5.16 (VBNBHarness.sol#723): it allows old versions\n\t- pragma solidity^0.5.16 (VBNBHarness.sol#811): it allows old versions\n\t- pragma solidity^0.5.16 (VBNBHarness.sol#1009): it allows old versions\n\t- pragma solidity^0.5.16 (VBNBHarness.sol#1192): it allows old versions\n\t- pragma solidity^0.5.16 (VBNBHarness.sol#1256): it allows old versions\n\t- pragma solidity^0.5.16 (VBNBHarness.sol#1328): it allows old versions\n\t- pragma solidity^0.5.16 (VBNBHarness.sol#2783-2786): it allows old versions\n\t- pragma solidity^0.5.16 (VBNBHarness.sol#2952-2954): it allows old versions\n\t- pragma solidity^0.5.16 (VBNBHarness.sol#2969-2971): it allows old versions\n\t- pragma solidity^0.5.16 (VBNBHarness.sol#2984-2988): it allows old versions\n\t- pragma solidity^0.5.16 (VBNBHarness.sol#3165-3168): it allows old versions\n\t- pragma solidity^0.5.16 (VBNBHarness.sol#3315-3317): it allows old versions\n\t- pragma solidity>=0.5.16 (VBNBHarness.sol#3678-3680): it allows old versions\n\t- pragma solidity>=0.5.16 (VBNBHarness.sol#3728-3730): it allows old versions\n\t- pragma solidity^0.5.16 (VBNBHarness.sol#3854-3863): it allows old versions\n\t- pragma solidity^0.5.16 (VBNBHarness.sol#5348-5350): it allows old versions\n\t- pragma solidity^0.5.16 (VBNBHarness.sol#5449-5452): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 3298,
          "vulnerability_to_line": 3313,
          "vulnerability_code": "    function () external payable {\n\n        // delegate all other functions to current implementation\n\n        (bool success, ) = comptrollerImplementation.delegatecall(msg.data);\n\n\n\n        assembly {\n\n              let free_mem_ptr := mload(0x40)\n\n              returndatacopy(free_mem_ptr, 0, returndatasize)\n\n\n\n              switch success\n\n              case 0 { revert(free_mem_ptr, returndatasize) }\n\n              default { return(free_mem_ptr, returndatasize) }\n\n        }\n\n    }\n\n}\n\n\n",
          "message": "Low level call in Unitroller.fallback (VBNBHarness.sol#3298-3313):\n\t-(success) = comptrollerImplementation.delegatecall(msg.data) VBNBHarness.sol#3300-3302\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool public constant isComptroller = true;\n",
          "message": "Constant 'ComptrollerInterfaceG1.isComptroller' (VBNBHarness.sol#7) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool public constant isInterestRateModel = true;\n",
          "message": "Constant 'InterestRateModel.isInterestRateModel' (VBNBHarness.sol#105) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 137,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool internal _notEntered;\n",
          "message": "Variable 'VTokenStorage._notEntered' (VBNBHarness.sol#137) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint internal constant borrowRateMaxMantissa = 0.0005e16;\n",
          "message": "Constant 'VTokenStorage.borrowRateMaxMantissa' (VBNBHarness.sol#158) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 163,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint internal constant reserveFactorMaxMantissa = 1e18;\n",
          "message": "Constant 'VTokenStorage.reserveFactorMaxMantissa' (VBNBHarness.sol#163) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 367,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\n",
          "message": "Function 'VTokenInterface._setPendingAdmin' (VBNBHarness.sol#367) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 368,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _acceptAdmin() external returns (uint);\n",
          "message": "Function 'VTokenInterface._acceptAdmin' (VBNBHarness.sol#368) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 369,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint);\n",
          "message": "Function 'VTokenInterface._setComptroller' (VBNBHarness.sol#369) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 370,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint);\n",
          "message": "Function 'VTokenInterface._setReserveFactor' (VBNBHarness.sol#370) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 371,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _reduceReserves(uint reduceAmount) external returns (uint);\n",
          "message": "Function 'VTokenInterface._reduceReserves' (VBNBHarness.sol#371) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 372,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint);\n",
          "message": "Function 'VTokenInterface._setInterestRateModel' (VBNBHarness.sol#372) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 250,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool public constant isVToken = true;\n",
          "message": "Constant 'VTokenInterface.isVToken' (VBNBHarness.sol#250) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 397,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _addReserves(uint addAmount) external returns (uint);\n",
          "message": "Function 'VBep20Interface._addReserves' (VBNBHarness.sol#397) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 419,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) public;\n",
          "message": "Function 'VDelegatorInterface._setImplementation' (VBNBHarness.sol#419) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 428,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _becomeImplementation(bytes memory data) public;\n",
          "message": "Function 'VDelegateInterface._becomeImplementation' (VBNBHarness.sol#428) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 433,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _resignImplementation() public;\n",
          "message": "Function 'VDelegateInterface._resignImplementation' (VBNBHarness.sol#433) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 846,
          "vulnerability_to_line": 849,
          "vulnerability_code": "    function mul_ScalarTruncate(Exp memory a, uint scalar) pure internal returns (uint) {\n\n        Exp memory product = mul_(a, scalar);\n\n        return truncate(product);\n",
          "message": "Function 'ExponentialNoError.mul_ScalarTruncate' (VBNBHarness.sol#846-849) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 854,
          "vulnerability_to_line": 857,
          "vulnerability_code": "    function mul_ScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (uint) {\n\n        Exp memory product = mul_(a, scalar);\n\n        return add_(truncate(product), addend);\n",
          "message": "Function 'ExponentialNoError.mul_ScalarTruncateAddUInt' (VBNBHarness.sol#854-857) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 821,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant expScale = 1e18;\n",
          "message": "Constant 'ExponentialNoError.expScale' (VBNBHarness.sol#821) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 822,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant doubleScale = 1e36;\n",
          "message": "Constant 'ExponentialNoError.doubleScale' (VBNBHarness.sol#822) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 823,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant halfExpScale = expScale/2;\n",
          "message": "Constant 'ExponentialNoError.halfExpScale' (VBNBHarness.sol#823) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 824,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant mantissaOne = expScale;\n",
          "message": "Constant 'ExponentialNoError.mantissaOne' (VBNBHarness.sol#824) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2453,
          "vulnerability_to_line": 2469,
          "vulnerability_code": "    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint) {\n\n        // Check caller = admin\n\n        if (msg.sender != admin) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\n\n        }\n\n\n\n        // Save current value, if any, for inclusion in log\n\n        address oldPendingAdmin = pendingAdmin;\n\n\n\n        // Store pendingAdmin with value newPendingAdmin\n\n        pendingAdmin = newPendingAdmin;\n\n\n\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\n\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\n\n\n\n        return uint(Error.NO_ERROR);\n",
          "message": "Function 'VToken._setPendingAdmin' (VBNBHarness.sol#2453-2469) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2476,
          "vulnerability_to_line": 2498,
          "vulnerability_code": "    function _acceptAdmin() external returns (uint) {\n\n        // Check caller is pendingAdmin and pendingAdmin \u2260 address(0)\n\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\n\n        }\n\n\n\n        // Save current values for inclusion in log\n\n        address oldAdmin = admin;\n\n        address oldPendingAdmin = pendingAdmin;\n\n\n\n        // Store admin with value pendingAdmin\n\n        admin = pendingAdmin;\n\n\n\n        // Clear the pending value\n\n        pendingAdmin = address(0);\n\n\n\n        emit NewAdmin(oldAdmin, admin);\n\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n",
          "message": "Function 'VToken._acceptAdmin' (VBNBHarness.sol#2476-2498) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2503,
          "vulnerability_to_line": 2522,
          "vulnerability_code": "    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint) {\n\n        // Check caller is admin\n\n        if (msg.sender != admin) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_COMPTROLLER_OWNER_CHECK);\n\n        }\n\n\n\n        ComptrollerInterface oldComptroller = comptroller;\n\n        // Ensure invoke comptroller.isComptroller() returns true\n\n        require(newComptroller.isComptroller(), \"marker method returned false\");\n\n\n\n        // Set market's comptroller to newComptroller\n\n        comptroller = newComptroller;\n\n\n\n        // Emit NewComptroller(oldComptroller, newComptroller)\n\n        emit NewComptroller(oldComptroller, newComptroller);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n",
          "message": "Function 'VToken._setComptroller' (VBNBHarness.sol#2503-2522) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2527,
          "vulnerability_to_line": 2537,
          "vulnerability_code": "    function _setReserveFactor(uint newReserveFactorMantissa) external nonReentrant returns (uint) {\n\n        uint error = accrueInterest();\n\n        if (error != uint(Error.NO_ERROR)) {\n\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reserve factor change failed.\n\n            return fail(Error(error), FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED);\n\n        }\n\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\n\n        return _setReserveFactorFresh(newReserveFactorMantissa);\n\n    }\n\n\n",
          "message": "Function 'VToken._setReserveFactor' (VBNBHarness.sol#2527-2537) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2634,
          "vulnerability_to_line": 2644,
          "vulnerability_code": "    function _reduceReserves(uint reduceAmount) external nonReentrant returns (uint) {\n\n        uint error = accrueInterest();\n\n        if (error != uint(Error.NO_ERROR)) {\n\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\n\n            return fail(Error(error), FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED);\n\n        }\n\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\n\n        return _reduceReservesFresh(reduceAmount);\n\n    }\n\n\n",
          "message": "Function 'VToken._reduceReserves' (VBNBHarness.sol#2634-2644) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2699,
          "vulnerability_to_line": 2709,
          "vulnerability_code": "    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint) {\n\n        uint error = accrueInterest();\n\n        if (error != uint(Error.NO_ERROR)) {\n\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted change of interest rate model failed\n\n            return fail(Error(error), FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED);\n\n        }\n\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\n\n        return _setInterestRateModelFresh(newInterestRateModel);\n\n    }\n\n\n",
          "message": "Function 'VToken._setInterestRateModel' (VBNBHarness.sol#2699-2709) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2542,
          "vulnerability_to_line": 2566,
          "vulnerability_code": "    function _setReserveFactorFresh(uint newReserveFactorMantissa) internal returns (uint) {\n\n        // Check caller is admin\n\n        if (msg.sender != admin) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_RESERVE_FACTOR_ADMIN_CHECK);\n\n        }\n\n\n\n        // Verify market's block number equals current block number\n\n        if (accrualBlockNumber != getBlockNumber()) {\n\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK);\n\n        }\n\n\n\n        // Check newReserveFactor \u2264 maxReserveFactor\n\n        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\n\n            return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);\n\n        }\n\n\n\n        uint oldReserveFactorMantissa = reserveFactorMantissa;\n\n        reserveFactorMantissa = newReserveFactorMantissa;\n\n\n\n        emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n",
          "message": "Function 'VToken._setReserveFactorFresh' (VBNBHarness.sol#2542-2566) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2571,
          "vulnerability_to_line": 2583,
          "vulnerability_code": "    function _addReservesInternal(uint addAmount) internal nonReentrant returns (uint) {\n\n        uint error = accrueInterest();\n\n        if (error != uint(Error.NO_ERROR)) {\n\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\n\n            return fail(Error(error), FailureInfo.ADD_RESERVES_ACCRUE_INTEREST_FAILED);\n\n        }\n\n\n\n        // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\n\n        (error, ) = _addReservesFresh(addAmount);\n\n        return error;\n\n    }\n\n\n",
          "message": "Function 'VToken._addReservesInternal' (VBNBHarness.sol#2571-2583) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2589,
          "vulnerability_to_line": 2629,
          "vulnerability_code": "    function _addReservesFresh(uint addAmount) internal returns (uint, uint) {\n\n        // totalReserves + actualAddAmount\n\n        uint totalReservesNew;\n\n        uint actualAddAmount;\n\n\n\n        // We fail gracefully unless market's block number equals current block number\n\n        if (accrualBlockNumber != getBlockNumber()) {\n\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.ADD_RESERVES_FRESH_CHECK), actualAddAmount);\n\n        }\n\n\n\n        /////////////////////////\n\n        // EFFECTS & INTERACTIONS\n\n        // (No safe failures beyond this point)\n\n\n\n        /*\n\n         * We call doTransferIn for the caller and the addAmount\n\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\n\n         *  On success, the vToken holds an additional addAmount of cash.\n\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\n\n         *  it returns the amount actually transferred, in case of a fee.\n\n         */\n\n\n\n        actualAddAmount = doTransferIn(msg.sender, addAmount);\n\n\n\n        totalReservesNew = totalReserves + actualAddAmount;\n\n\n\n        /* Revert on overflow */\n\n        require(totalReservesNew >= totalReserves, \"add reserves unexpected overflow\");\n\n\n\n        // Store reserves[n+1] = reserves[n] + actualAddAmount\n\n        totalReserves = totalReservesNew;\n\n\n\n        /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\n\n        emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\n\n\n\n        /* Return (NO_ERROR, actualAddAmount) */\n\n        return (uint(Error.NO_ERROR), actualAddAmount);\n\n    }\n\n\n\n\n",
          "message": "Function 'VToken._addReservesFresh' (VBNBHarness.sol#2589-2629) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2650,
          "vulnerability_to_line": 2693,
          "vulnerability_code": "    function _reduceReservesFresh(uint reduceAmount) internal returns (uint) {\n\n        // totalReserves - reduceAmount\n\n        uint totalReservesNew;\n\n\n\n        // Check caller is admin\n\n        if (msg.sender != admin) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.REDUCE_RESERVES_ADMIN_CHECK);\n\n        }\n\n\n\n        // We fail gracefully unless market's block number equals current block number\n\n        if (accrualBlockNumber != getBlockNumber()) {\n\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);\n\n        }\n\n\n\n        // Fail gracefully if protocol has insufficient underlying cash\n\n        if (getCashPrior() < reduceAmount) {\n\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);\n\n        }\n\n\n\n        // Check reduceAmount \u2264 reserves[n] (totalReserves)\n\n        if (reduceAmount > totalReserves) {\n\n            return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);\n\n        }\n\n\n\n        /////////////////////////\n\n        // EFFECTS & INTERACTIONS\n\n        // (No safe failures beyond this point)\n\n\n\n        totalReservesNew = totalReserves - reduceAmount;\n\n        // We checked reduceAmount <= totalReserves above, so this should never revert.\n\n        require(totalReservesNew <= totalReserves, \"reduce reserves unexpected underflow\");\n\n\n\n        // Store reserves[n+1] = reserves[n] - reduceAmount\n\n        totalReserves = totalReservesNew;\n\n\n\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\n\n        doTransferOut(admin, reduceAmount);\n\n\n\n        emit ReservesReduced(admin, reduceAmount, totalReservesNew);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n",
          "message": "Function 'VToken._reduceReservesFresh' (VBNBHarness.sol#2650-2693) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2715,
          "vulnerability_to_line": 2745,
          "vulnerability_code": "    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint) {\n\n\n\n        // Used to store old model for use in the event that is emitted on success\n\n        InterestRateModel oldInterestRateModel;\n\n\n\n        // Check caller is admin\n\n        if (msg.sender != admin) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_INTEREST_RATE_MODEL_OWNER_CHECK);\n\n        }\n\n\n\n        // We fail gracefully unless market's block number equals current block number\n\n        if (accrualBlockNumber != getBlockNumber()) {\n\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);\n\n        }\n\n\n\n        // Track the market's current interest rate model\n\n        oldInterestRateModel = interestRateModel;\n\n\n\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\n\n        require(newInterestRateModel.isInterestRateModel(), \"marker method returned false\");\n\n\n\n        // Set the interest rate model to newInterestRateModel\n\n        interestRateModel = newInterestRateModel;\n\n\n\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\n\n        emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n",
          "message": "Function 'VToken._setInterestRateModelFresh' (VBNBHarness.sol#2715-2745) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2956,
          "vulnerability_to_line": 2958,
          "vulnerability_code": "    bool public constant isPriceOracle = true;\n\n\n",
          "message": "Constant 'PriceOracle.isPriceOracle' (VBNBHarness.sol#2956-2958) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2977,
          "vulnerability_to_line": 2978,
          "vulnerability_code": "    function _initializeVenusVAIState(uint blockNumber) external returns (uint);\n",
          "message": "Function 'VAIControllerInterface._initializeVenusVAIState' (VBNBHarness.sol#2977-2978) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3067,
          "vulnerability_to_line": 3068,
          "vulnerability_code": "    bool public _mintGuardianPaused;\n",
          "message": "Variable 'ComptrollerV1Storage._mintGuardianPaused' (VBNBHarness.sol#3067-3068) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3068,
          "vulnerability_to_line": 3069,
          "vulnerability_code": "    bool public _borrowGuardianPaused;\n",
          "message": "Variable 'ComptrollerV1Storage._borrowGuardianPaused' (VBNBHarness.sol#3068-3069) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3201,
          "vulnerability_to_line": 3216,
          "vulnerability_code": "    function _setPendingImplementation(address newPendingImplementation) public returns (uint) {\n\n\n\n        if (msg.sender != admin) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_IMPLEMENTATION_OWNER_CHECK);\n\n        }\n\n\n\n        address oldPendingImplementation = pendingComptrollerImplementation;\n\n\n\n        pendingComptrollerImplementation = newPendingImplementation;\n\n\n\n        emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n",
          "message": "Function 'Unitroller._setPendingImplementation' (VBNBHarness.sol#3201-3216) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3221,
          "vulnerability_to_line": 3242,
          "vulnerability_code": "    function _acceptImplementation() public returns (uint) {\n\n        // Check caller is pendingImplementation and pendingImplementation \u2260 address(0)\n\n        if (msg.sender != pendingComptrollerImplementation || pendingComptrollerImplementation == address(0)) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK);\n\n        }\n\n\n\n        // Save current values for inclusion in log\n\n        address oldImplementation = comptrollerImplementation;\n\n        address oldPendingImplementation = pendingComptrollerImplementation;\n\n\n\n        comptrollerImplementation = pendingComptrollerImplementation;\n\n\n\n        pendingComptrollerImplementation = address(0);\n\n\n\n        emit NewImplementation(oldImplementation, comptrollerImplementation);\n\n        emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n\n\n",
          "message": "Function 'Unitroller._acceptImplementation' (VBNBHarness.sol#3221-3242) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3248,
          "vulnerability_to_line": 3266,
          "vulnerability_code": "    function _setPendingAdmin(address newPendingAdmin) public returns (uint) {\n\n        // Check caller = admin\n\n        if (msg.sender != admin) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\n\n        }\n\n\n\n        // Save current value, if any, for inclusion in log\n\n        address oldPendingAdmin = pendingAdmin;\n\n\n\n        // Store pendingAdmin with value newPendingAdmin\n\n        pendingAdmin = newPendingAdmin;\n\n\n\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\n\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n",
          "message": "Function 'Unitroller._setPendingAdmin' (VBNBHarness.sol#3248-3266) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3271,
          "vulnerability_to_line": 3294,
          "vulnerability_code": "    function _acceptAdmin() public returns (uint) {\n\n        // Check caller is pendingAdmin and pendingAdmin \u2260 address(0)\n\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\n\n        }\n\n\n\n        // Save current values for inclusion in log\n\n        address oldAdmin = admin;\n\n        address oldPendingAdmin = pendingAdmin;\n\n\n\n        // Store admin with value pendingAdmin\n\n        admin = pendingAdmin;\n\n\n\n        // Clear the pending value\n\n        pendingAdmin = address(0);\n\n\n\n        emit NewAdmin(oldAdmin, admin);\n\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n\n    /**\n",
          "message": "Function 'Unitroller._acceptAdmin' (VBNBHarness.sol#3271-3294) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3581,
          "vulnerability_to_line": 3591,
          "vulnerability_code": "    function _delegate(address delegator, address delegatee) internal {\n\n        address currentDelegate = delegates[delegator];\n\n        uint96 delegatorBalance = balances[delegator];\n\n        delegates[delegator] = delegatee;\n\n\n\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\n\n\n\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\n\n    }\n\n\n",
          "message": "Function 'XVS._delegate' (VBNBHarness.sol#3581-3591) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3591,
          "vulnerability_to_line": 3602,
          "vulnerability_code": "    function _transferTokens(address src, address dst, uint96 amount) internal {\n\n        require(src != address(0), \"XVS::_transferTokens: cannot transfer from the zero address\");\n\n        require(dst != address(0), \"XVS::_transferTokens: cannot transfer to the zero address\");\n\n\n\n        balances[src] = sub96(balances[src], amount, \"XVS::_transferTokens: transfer amount exceeds balance\");\n\n        balances[dst] = add96(balances[dst], amount, \"XVS::_transferTokens: transfer amount overflows\");\n\n        emit Transfer(src, dst, amount);\n\n\n\n        _moveDelegates(delegates[src], delegates[dst], amount);\n\n    }\n\n\n",
          "message": "Function 'XVS._transferTokens' (VBNBHarness.sol#3591-3602) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3602,
          "vulnerability_to_line": 3620,
          "vulnerability_code": "    function _moveDelegates(address srcRep, address dstRep, uint96 amount) internal {\n\n        if (srcRep != dstRep && amount > 0) {\n\n            if (srcRep != address(0)) {\n\n                uint32 srcRepNum = numCheckpoints[srcRep];\n\n                uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\n\n                uint96 srcRepNew = sub96(srcRepOld, amount, \"XVS::_moveVotes: vote amount underflows\");\n\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\n\n            }\n\n\n\n            if (dstRep != address(0)) {\n\n                uint32 dstRepNum = numCheckpoints[dstRep];\n\n                uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\n\n                uint96 dstRepNew = add96(dstRepOld, amount, \"XVS::_moveVotes: vote amount overflows\");\n\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\n\n            }\n\n        }\n\n    }\n\n\n",
          "message": "Function 'XVS._moveDelegates' (VBNBHarness.sol#3602-3620) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3620,
          "vulnerability_to_line": 3633,
          "vulnerability_code": "    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint96 oldVotes, uint96 newVotes) internal {\n\n      uint32 blockNumber = safe32(block.number, \"XVS::_writeCheckpoint: block number exceeds 32 bits\");\n\n\n\n      if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\n\n          checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n\n      } else {\n\n          checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\n\n          numCheckpoints[delegatee] = nCheckpoints + 1;\n\n      }\n\n\n\n      emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\n\n    }\n\n\n",
          "message": "Function 'XVS._writeCheckpoint' (VBNBHarness.sol#3620-3633) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3374,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public constant totalSupply = 30000000e18; // 30 million XVS\n",
          "message": "Constant 'XVS.totalSupply' (VBNBHarness.sol#3374) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3743,
          "vulnerability_to_line": 3744,
          "vulnerability_code": "    string  public constant version  = \"1\";\n",
          "message": "Constant 'VAI.version' (VBNBHarness.sol#3743-3744) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3763,
          "vulnerability_to_line": 3764,
          "vulnerability_code": "    bytes32 public DOMAIN_SEPARATOR;\n",
          "message": "Variable 'VAI.DOMAIN_SEPARATOR' (VBNBHarness.sol#3763-3764) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4724,
          "vulnerability_to_line": 4743,
          "vulnerability_code": "    function _setPriceOracle(PriceOracle newOracle) public returns (uint) {\n\n        // Check caller is admin\n\n        if (msg.sender != admin) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK);\n\n        }\n\n\n\n        // Track the old oracle for the comptroller\n\n        PriceOracle oldOracle = oracle;\n\n\n\n        // Set comptroller's oracle to newOracle\n\n        oracle = newOracle;\n\n\n\n        // Emit NewPriceOracle(oldOracle, newOracle)\n\n        emit NewPriceOracle(oldOracle, newOracle);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n\n    /**\n",
          "message": "Function 'Comptroller._setPriceOracle' (VBNBHarness.sol#4724-4743) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4748,
          "vulnerability_to_line": 4760,
          "vulnerability_code": "    function _setCloseFactor(uint newCloseFactorMantissa) external returns (uint) {\n\n        // Check caller is admin\n\n    \trequire(msg.sender == admin, \"only admin can set close factor\");\n\n\n\n        uint oldCloseFactorMantissa = closeFactorMantissa;\n\n        closeFactorMantissa = newCloseFactorMantissa;\n\n        emit NewCloseFactor(oldCloseFactorMantissa, newCloseFactorMantissa);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n\n    /**\n",
          "message": "Function 'Comptroller._setCloseFactor' (VBNBHarness.sol#4748-4760) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4766,
          "vulnerability_to_line": 4802,
          "vulnerability_code": "    function _setCollateralFactor(VToken vToken, uint newCollateralFactorMantissa) external returns (uint) {\n\n        // Check caller is admin\n\n        if (msg.sender != admin) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_COLLATERAL_FACTOR_OWNER_CHECK);\n\n        }\n\n\n\n        // Verify market is listed\n\n        Market storage market = markets[address(vToken)];\n\n        if (!market.isListed) {\n\n            return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS);\n\n        }\n\n\n\n        Exp memory newCollateralFactorExp = Exp({mantissa: newCollateralFactorMantissa});\n\n\n\n        // Check collateral factor <= 0.9\n\n        Exp memory highLimit = Exp({mantissa: collateralFactorMaxMantissa});\n\n        if (lessThanExp(highLimit, newCollateralFactorExp)) {\n\n            return fail(Error.INVALID_COLLATERAL_FACTOR, FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION);\n\n        }\n\n\n\n        // If collateral factor != 0, fail if price == 0\n\n        if (newCollateralFactorMantissa != 0 && oracle.getUnderlyingPrice(vToken) == 0) {\n\n            return fail(Error.PRICE_ERROR, FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE);\n\n        }\n\n\n\n        // Set market's collateral factor to new collateral factor, remember old value\n\n        uint oldCollateralFactorMantissa = market.collateralFactorMantissa;\n\n        market.collateralFactorMantissa = newCollateralFactorMantissa;\n\n\n\n        // Emit event with asset, old collateral factor, and new collateral factor\n\n        emit NewCollateralFactor(vToken, oldCollateralFactorMantissa, newCollateralFactorMantissa);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n\n    /**\n",
          "message": "Function 'Comptroller._setCollateralFactor' (VBNBHarness.sol#4766-4802) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4807,
          "vulnerability_to_line": 4826,
          "vulnerability_code": "    function _setLiquidationIncentive(uint newLiquidationIncentiveMantissa) external returns (uint) {\n\n        // Check caller is admin\n\n        if (msg.sender != admin) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK);\n\n        }\n\n\n\n        // Save current value for use in log\n\n        uint oldLiquidationIncentiveMantissa = liquidationIncentiveMantissa;\n\n\n\n        // Set liquidation incentive to new incentive\n\n        liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\n\n\n\n        // Emit event with old incentive, new incentive\n\n        emit NewLiquidationIncentive(oldLiquidationIncentiveMantissa, newLiquidationIncentiveMantissa);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n\n    /**\n",
          "message": "Function 'Comptroller._setLiquidationIncentive' (VBNBHarness.sol#4807-4826) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4831,
          "vulnerability_to_line": 4852,
          "vulnerability_code": "    function _supportMarket(VToken vToken) external returns (uint) {\n\n        if (msg.sender != admin) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_MARKET_OWNER_CHECK);\n\n        }\n\n\n\n        if (markets[address(vToken)].isListed) {\n\n            return fail(Error.MARKET_ALREADY_LISTED, FailureInfo.SUPPORT_MARKET_EXISTS);\n\n        }\n\n\n\n        vToken.isVToken(); // Sanity check to make sure its really a VToken\n\n\n\n        // Note that isVenus is not in active use anymore\n\n        markets[address(vToken)] = Market({isListed: true, isVenus: false, collateralFactorMantissa: 0});\n\n\n\n        _addMarketInternal(vToken);\n\n\n\n        emit MarketListed(vToken);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n",
          "message": "Function 'Comptroller._supportMarket' (VBNBHarness.sol#4831-4852) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4852,
          "vulnerability_to_line": 4860,
          "vulnerability_code": "    function _addMarketInternal(VToken vToken) internal {\n\n        for (uint i = 0; i < allMarkets.length; i ++) {\n\n            require(allMarkets[i] != vToken, \"market already added\");\n\n        }\n\n        allMarkets.push(vToken);\n\n    }\n\n\n\n    /**\n",
          "message": "Function 'Comptroller._addMarketInternal' (VBNBHarness.sol#4852-4860) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4864,
          "vulnerability_to_line": 4882,
          "vulnerability_code": "    function _setPauseGuardian(address newPauseGuardian) public returns (uint) {\n\n        if (msg.sender != admin) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PAUSE_GUARDIAN_OWNER_CHECK);\n\n        }\n\n\n\n        // Save current value for inclusion in log\n\n        address oldPauseGuardian = pauseGuardian;\n\n\n\n        // Store pauseGuardian with value newPauseGuardian\n\n        pauseGuardian = newPauseGuardian;\n\n\n\n        // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)\n\n        emit NewPauseGuardian(oldPauseGuardian, newPauseGuardian);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n\n    /**\n",
          "message": "Function 'Comptroller._setPauseGuardian' (VBNBHarness.sol#4864-4882) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4887,
          "vulnerability_to_line": 4902,
          "vulnerability_code": "    function _setMarketBorrowCaps(VToken[] calldata vTokens, uint[] calldata newBorrowCaps) external {\n\n        require(msg.sender == admin || msg.sender == borrowCapGuardian, \"only admin or borrow cap guardian can set borrow caps\");\n\n\n\n        uint numMarkets = vTokens.length;\n\n        uint numBorrowCaps = newBorrowCaps.length;\n\n\n\n        require(numMarkets != 0 && numMarkets == numBorrowCaps, \"invalid input\");\n\n\n\n        for(uint i = 0; i < numMarkets; i++) {\n\n            borrowCaps[address(vTokens[i])] = newBorrowCaps[i];\n\n            emit NewBorrowCap(vTokens[i], newBorrowCaps[i]);\n\n        }\n\n    }\n\n\n\n    /**\n",
          "message": "Function 'Comptroller._setMarketBorrowCaps' (VBNBHarness.sol#4887-4902) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4905,
          "vulnerability_to_line": 4917,
          "vulnerability_code": "    function _setBorrowCapGuardian(address newBorrowCapGuardian) external onlyAdmin {\n\n        // Save current value for inclusion in log\n\n        address oldBorrowCapGuardian = borrowCapGuardian;\n\n\n\n        // Store borrowCapGuardian with value newBorrowCapGuardian\n\n        borrowCapGuardian = newBorrowCapGuardian;\n\n\n\n        // Emit NewBorrowCapGuardian(OldBorrowCapGuardian, NewBorrowCapGuardian)\n\n        emit NewBorrowCapGuardian(oldBorrowCapGuardian, newBorrowCapGuardian);\n\n    }\n\n\n\n    /**\n",
          "message": "Function 'Comptroller._setBorrowCapGuardian' (VBNBHarness.sol#4905-4917) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4919,
          "vulnerability_to_line": 4926,
          "vulnerability_code": "    function _setProtocolPaused(bool state) public validPauseState(state) returns(bool) {\n\n        protocolPaused = state;\n\n        emit ActionProtocolPaused(state);\n\n        return state;\n\n    }\n\n\n\n    /**\n",
          "message": "Function 'Comptroller._setProtocolPaused' (VBNBHarness.sol#4919-4926) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4930,
          "vulnerability_to_line": 4941,
          "vulnerability_code": "    function _setVAIController(VAIControllerInterface vaiController_) external returns (uint) {\n\n        // Check caller is admin\n\n        if (msg.sender != admin) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_VAICONTROLLER_OWNER_CHECK);\n\n        }\n\n\n\n        VAIControllerInterface oldRate = vaiController;\n\n        vaiController = vaiController_;\n\n        emit NewVAIController(oldRate, vaiController_);\n\n    }\n\n\n",
          "message": "Function 'Comptroller._setVAIController' (VBNBHarness.sol#4930-4941) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4941,
          "vulnerability_to_line": 4954,
          "vulnerability_code": "    function _setVAIMintRate(uint newVAIMintRate) external returns (uint) {\n\n        // Check caller is admin\n\n        if (msg.sender != admin) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_VAI_MINT_RATE_CHECK);\n\n        }\n\n\n\n        uint oldVAIMintRate = vaiMintRate;\n\n        vaiMintRate = newVAIMintRate;\n\n        emit NewVAIMintRate(oldVAIMintRate, newVAIMintRate);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n",
          "message": "Function 'Comptroller._setVAIMintRate' (VBNBHarness.sol#4941-4954) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4954,
          "vulnerability_to_line": 4977,
          "vulnerability_code": "    function _setTreasuryData(address newTreasuryGuardian, address newTreasuryAddress, uint newTreasuryPercent) external returns (uint) {\n\n        // Check caller is admin\n\n        if (!(msg.sender == admin || msg.sender == treasuryGuardian)) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_TREASURY_OWNER_CHECK);\n\n        }\n\n\n\n        require(newTreasuryPercent < 1e18, \"treasury percent cap overflow\");\n\n\n\n        address oldTreasuryGuardian = treasuryGuardian;\n\n        address oldTreasuryAddress = treasuryAddress;\n\n        uint oldTreasuryPercent = treasuryPercent;\n\n\n\n        treasuryGuardian = newTreasuryGuardian;\n\n        treasuryAddress = newTreasuryAddress;\n\n        treasuryPercent = newTreasuryPercent;\n\n\n\n        emit NewTreasuryGuardian(oldTreasuryGuardian, newTreasuryGuardian);\n\n        emit NewTreasuryAddress(oldTreasuryAddress, newTreasuryAddress);\n\n        emit NewTreasuryPercent(oldTreasuryPercent, newTreasuryPercent);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n",
          "message": "Function 'Comptroller._setTreasuryData' (VBNBHarness.sol#4954-4977) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4977,
          "vulnerability_to_line": 4983,
          "vulnerability_code": "    function _become(Unitroller unitroller) public {\n\n        require(msg.sender == unitroller.admin(), \"only unitroller admin can\");\n\n        require(unitroller._acceptImplementation() == 0, \"not authorized\");\n\n    }\n\n\n\n    /**\n",
          "message": "Function 'Comptroller._become' (VBNBHarness.sol#4977-4983) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 5226,
          "vulnerability_to_line": 5233,
          "vulnerability_code": "    function _setVenusVAIRate(uint venusVAIRate_) public onlyAdmin {\n\n        uint oldVAIRate = venusVAIRate;\n\n        venusVAIRate = venusVAIRate_;\n\n        emit NewVenusVAIRate(oldVAIRate, venusVAIRate_);\n\n    }\n\n\n\n    /**\n",
          "message": "Function 'Comptroller._setVenusVAIRate' (VBNBHarness.sol#5226-5233) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 5236,
          "vulnerability_to_line": 5243,
          "vulnerability_code": "    function _setVenusVAIVaultRate(uint venusVAIVaultRate_) public onlyAdmin {\n\n        uint oldVenusVAIVaultRate = venusVAIVaultRate;\n\n        venusVAIVaultRate = venusVAIVaultRate_;\n\n        emit NewVenusVAIVaultRate(oldVenusVAIVaultRate, venusVAIVaultRate_);\n\n    }\n\n\n\n    /**\n",
          "message": "Function 'Comptroller._setVenusVAIVaultRate' (VBNBHarness.sol#5236-5243) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 5248,
          "vulnerability_to_line": 5256,
          "vulnerability_code": "    function _setVAIVaultInfo(address vault_, uint256 releaseStartBlock_, uint256 minReleaseAmount_) public onlyAdmin {\n\n        vaiVaultAddress = vault_;\n\n        releaseStartBlock = releaseStartBlock_;\n\n        minReleaseAmount = minReleaseAmount_;\n\n        emit NewVAIVaultInfo(vault_, releaseStartBlock_, minReleaseAmount_);\n\n    }\n\n\n\n    /**\n",
          "message": "Function 'Comptroller._setVAIVaultInfo' (VBNBHarness.sol#5248-5256) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 5260,
          "vulnerability_to_line": 5266,
          "vulnerability_code": "    function _setVenusSpeed(VToken vToken, uint venusSpeed) public {\n\n        require(adminOrInitializing(), \"only admin can set venus speed\");\n\n        setVenusSpeedInternal(vToken, venusSpeed);\n\n    }\n\n\n\n    /**\n",
          "message": "Function 'Comptroller._setVenusSpeed' (VBNBHarness.sol#5260-5266) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3947,
          "vulnerability_to_line": 3949,
          "vulnerability_code": "    uint224 public constant venusInitialIndex = 1e36;\n\n\n",
          "message": "Constant 'Comptroller.venusInitialIndex' (VBNBHarness.sol#3947-3949) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3950,
          "vulnerability_to_line": 3951,
          "vulnerability_code": "    uint internal constant closeFactorMinMantissa = 0.05e18; // 0.05\n",
          "message": "Constant 'Comptroller.closeFactorMinMantissa' (VBNBHarness.sol#3950-3951) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3953,
          "vulnerability_to_line": 3955,
          "vulnerability_code": "    uint internal constant closeFactorMaxMantissa = 0.9e18; // 0.9\n\n\n",
          "message": "Constant 'Comptroller.closeFactorMaxMantissa' (VBNBHarness.sol#3953-3955) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3956,
          "vulnerability_to_line": 3958,
          "vulnerability_code": "    uint internal constant collateralFactorMaxMantissa = 0.9e18; // 0.9\n\n\n",
          "message": "Constant 'Comptroller.collateralFactorMaxMantissa' (VBNBHarness.sol#3956-3958) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 5502,
          "vulnerability_to_line": 5503,
          "vulnerability_code": "    function harnessSetAccrualBlockNumber(uint _accrualblockNumber) public {\n",
          "message": "Parameter '_accrualblockNumber' of VBNBHarness.harnessSetAccrualBlockNumber (VBNBHarness.sol#5502-5503) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 5518,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function harnessExchangeRateDetails(uint _totalSupply, uint _totalBorrows, uint _totalReserves) public {\n",
          "message": "Parameter '_totalSupply' of VBNBHarness.harnessExchangeRateDetails (VBNBHarness.sol#5518) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 5518,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function harnessExchangeRateDetails(uint _totalSupply, uint _totalBorrows, uint _totalReserves) public {\n",
          "message": "Parameter '_totalBorrows' of VBNBHarness.harnessExchangeRateDetails (VBNBHarness.sol#5518) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 5518,
          "vulnerability_to_line": 5519,
          "vulnerability_code": "    function harnessExchangeRateDetails(uint _totalSupply, uint _totalBorrows, uint _totalReserves) public {\n",
          "message": "Parameter '_totalReserves' of VBNBHarness.harnessExchangeRateDetails (VBNBHarness.sol#5518-5519) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 5528,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function harnessSetFailTransferToAddress(address _to, bool _fail) public {\n",
          "message": "Parameter '_to' of VBNBHarness.harnessSetFailTransferToAddress (VBNBHarness.sol#5528) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 5528,
          "vulnerability_to_line": 5529,
          "vulnerability_code": "    function harnessSetFailTransferToAddress(address _to, bool _fail) public {\n",
          "message": "Parameter '_fail' of VBNBHarness.harnessSetFailTransferToAddress (VBNBHarness.sol#5528-5529) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 823,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant halfExpScale = expScale/2;\n",
          "message": "ExponentialNoError.halfExpScale (VBNBHarness.sol#823) is never used in ComptrollerScenario\nExponentialNoError.mantissaOne (VBNBHarness.sol#824) is never used in ComptrollerScenario\nComptroller.closeFactorMinMantissa (VBNBHarness.sol#3950-3951) is never used in ComptrollerScenario\nComptroller.closeFactorMaxMantissa (VBNBHarness.sol#3953-3955) is never used in ComptrollerScenario\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 5606,
          "vulnerability_to_line": 5608,
          "vulnerability_code": "    uint reserveFactor;\n\n\n",
          "message": "VBNBScenario.reserveFactor (VBNBHarness.sol#5606-5608) is never used in VBNBScenario\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 5283,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return 0xcF6BB5389c92Bdda8a3747Ddb454cB7a64626C63;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 3233,
          "vulnerability_to_line": null,
          "vulnerability_code": "        pendingComptrollerImplementation = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 3285,
          "vulnerability_to_line": null,
          "vulnerability_code": "        pendingAdmin = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 4094,
          "vulnerability_to_line": null,
          "vulnerability_code": "                userAssetList.length--;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 1483,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address spender, uint256 amount) external returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 3444,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address spender, uint rawAmount) external validLock returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 4595,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < assets.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 4853,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < allMarkets.length; i ++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 5178,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (j = 0; j < holders.length; j++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 5182,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < vTokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 5188,
          "vulnerability_to_line": null,
          "vulnerability_code": "                for (j = 0; j < holders.length; j++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 5195,
          "vulnerability_to_line": null,
          "vulnerability_code": "                for (j = 0; j < holders.length; j++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 5420,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < allMarkets_.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 5429,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < allMarkets_.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 5439,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < allMarkets_.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 4013,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < len; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 4595,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < assets.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 4853,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < allMarkets.length; i ++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 4895,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i = 0; i < numMarkets; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 5178,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (j = 0; j < holders.length; j++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 5182,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < vTokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 5188,
          "vulnerability_to_line": null,
          "vulnerability_code": "                for (j = 0; j < holders.length; j++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 5195,
          "vulnerability_to_line": null,
          "vulnerability_code": "                for (j = 0; j < holders.length; j++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 5394,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < m; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 5402,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < m; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 5420,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < allMarkets_.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 5429,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < allMarkets_.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 5439,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < allMarkets_.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 3567,
          "vulnerability_to_line": null,
          "vulnerability_code": "        while (upper > lower) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 246,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract VTokenInterface is VTokenStorage {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 2790,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract VBNB is VToken {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 3173,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Unitroller is UnitrollerAdminStorage, ComptrollerErrorReporter {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 5452,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract VBNBHarness is VBNB {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 5605,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract VBNBScenario is VBNB {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 130,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 438,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 723,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 811,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1009,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1192,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1256,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1328,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 2783,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 2952,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 2969,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 2984,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3165,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3315,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3678,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3728,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3854,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 5348,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 5449,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 3654,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getChainId() internal pure returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint repayAmount) external view returns (uint, uint);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 79,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint repayAmount) external view returns (uint, uint);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 352,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 746,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 763,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 774,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 785,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 798,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1025,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getExp(uint num, uint denom) internal pure returns (MathError, Exp memory) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1042,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1051,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function subExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1060,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mulScalar(Exp memory a, uint scalar) internal pure returns (MathError, Exp memory) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1072,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mulScalarTruncate(Exp memory a, uint scalar) internal pure returns (MathError, uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1084,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mulScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) internal pure returns (MathError, uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1096,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function divScalar(Exp memory a, uint scalar) internal pure returns (MathError, Exp memory) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1108,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function divScalarByExp(uint scalar, Exp memory divisor) internal pure returns (MathError, Exp memory) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1128,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function divScalarByExpTruncate(uint scalar, Exp memory divisor) internal pure returns (MathError, uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1140,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mulExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1165,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mulExp(uint a, uint b) internal pure returns (MathError, Exp memory) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1172,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mulExp3(Exp memory a, Exp memory b, Exp memory c) internal pure returns (MathError, Exp memory) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1185,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function divExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1528,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1607,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function borrowBalanceStoredInternal(address account) internal view returns (MathError, uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1664,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function exchangeRateStoredInternal() internal view returns (MathError, uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1795,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mintInternal(uint mintAmount) internal nonReentrant returns (uint, uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1822,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mintFresh(address minter, uint mintAmount) internal returns (uint, uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 2973,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getMintableVAI(address minter) public view returns (uint, uint);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 2979,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function calcDistributeVAIMinterVenus(address vaiMinter) external returns(uint, uint, uint, uint);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 4547,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAccountLiquidity(address account) public view returns (uint, uint, uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 4567,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint borrowAmount) public view returns (uint, uint, uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 4588,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint borrowAmount) internal view returns (Error, uint, uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 4652,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function liquidateCalculateSeizeTokens(address vTokenBorrowed, address vTokenCollateral, uint actualRepayAmount) external view returns (uint, uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 4688,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function liquidateVAICalculateSeizeTokens(address vTokenCollateral, uint actualRepayAmount) external view returns (uint, uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 3300,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = comptrollerImplementation.delegatecall(msg.data);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 3302,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 3656,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly { chainId := chainid() }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 3691,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 367,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1938,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2801,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(ComptrollerInterface comptroller_,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 5458,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(ComptrollerInterface comptroller_,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 5608,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(string memory name_,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 367,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 821,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant expScale = 1e18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 822,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant doubleScale = 1e36;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 823,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant halfExpScale = expScale/2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 824,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant mantissaOne = expScale;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1938,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1938,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1938,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1938,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1939,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(redeemTokensIn == 0 || redeemAmountIn == 0, \"one of redeemTokensIn or redeemAmountIn must be zero\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1941,
          "vulnerability_to_line": null,
          "vulnerability_code": "        RedeemLocalVars memory vars;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1944,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1944,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1944,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1944,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1945,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (vars.mathErr != MathError.NO_ERROR) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1945,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (vars.mathErr != MathError.NO_ERROR) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1946,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1946,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1946,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1946,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1946,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2811,
          "vulnerability_to_line": null,
          "vulnerability_code": "        initialize(comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2811,
          "vulnerability_to_line": null,
          "vulnerability_code": "        initialize(comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2811,
          "vulnerability_to_line": null,
          "vulnerability_code": "        initialize(comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2811,
          "vulnerability_to_line": null,
          "vulnerability_code": "        initialize(comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2814,
          "vulnerability_to_line": null,
          "vulnerability_code": "        admin = admin_;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 3340,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 isLocked = 0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 5453,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint harnessExchangeRate;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 5464,
          "vulnerability_to_line": null,
          "vulnerability_code": "                address payable admin_)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 5465,
          "vulnerability_to_line": null,
          "vulnerability_code": "    VBNB(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 5468,
          "vulnerability_to_line": null,
          "vulnerability_code": "    initialExchangeRateMantissa,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 5470,
          "vulnerability_to_line": null,
          "vulnerability_code": "    symbol_,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 5606,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint reserveFactor;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 5611,
          "vulnerability_to_line": null,
          "vulnerability_code": "                address payable admin_,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 5612,
          "vulnerability_to_line": null,
          "vulnerability_code": "                ComptrollerInterface comptroller_,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 5613,
          "vulnerability_to_line": null,
          "vulnerability_code": "                InterestRateModel interestRateModel_,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 5614,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint initialExchangeRateMantissa)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 5615,
          "vulnerability_to_line": null,
          "vulnerability_code": "        VBNB(comptroller_,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 5616,
          "vulnerability_to_line": null,
          "vulnerability_code": "               interestRateModel_,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 5618,
          "vulnerability_to_line": null,
          "vulnerability_code": "               name_,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 5620,
          "vulnerability_to_line": null,
          "vulnerability_code": "               decimals_,\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}