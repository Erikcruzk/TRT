{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "inefficient-state-variable-increment",
          "vulnerability_from_line": 414,
          "vulnerability_to_line": null,
          "vulnerability_code": "        totalSupply_ += value;\n",
          "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 206,
          "vulnerability_to_line": null,
          "vulnerability_code": "        totalSupply = _initialAmount;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 207,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balanceOf[msg.sender] = _initialAmount;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 208,
          "vulnerability_to_line": null,
          "vulnerability_code": "        name = _tokenName;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 209,
          "vulnerability_to_line": null,
          "vulnerability_code": "        symbol = _tokenSymbol;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 210,
          "vulnerability_to_line": null,
          "vulnerability_code": "        decimals = _decimalUnits;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 250,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 251,
          "vulnerability_to_line": null,
          "vulnerability_code": "        totalSupply = _initialAmount;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balanceOf[msg.sender] = _initialAmount;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 253,
          "vulnerability_to_line": null,
          "vulnerability_code": "        name = _tokenName;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 254,
          "vulnerability_to_line": null,
          "vulnerability_code": "        symbol = _tokenSymbol;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 255,
          "vulnerability_to_line": null,
          "vulnerability_code": "        decimals = _decimalUnits;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 256,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 285,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 286,
          "vulnerability_to_line": null,
          "vulnerability_code": "        StandardToken(_initialAmount, _tokenName, _decimalUnits, _tokenSymbol) {}\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 334,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 335,
          "vulnerability_to_line": null,
          "vulnerability_code": "        StandardToken(_initialAmount, _tokenName, _decimalUnits, _tokenSymbol) {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 336,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 351,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 352,
          "vulnerability_to_line": null,
          "vulnerability_code": "        NonStandardToken(_initialAmount, _tokenName, _decimalUnits, _tokenSymbol) {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 353,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 383,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol, bytes memory _reEntryCallData, string memory _reEntryFun) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 384,
          "vulnerability_to_line": null,
          "vulnerability_code": "        totalSupply_ = _initialAmount;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 385,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balanceOf_[msg.sender] = _initialAmount;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 386,
          "vulnerability_to_line": null,
          "vulnerability_code": "        name = _tokenName;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 387,
          "vulnerability_to_line": null,
          "vulnerability_code": "        symbol = _tokenSymbol;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 388,
          "vulnerability_to_line": null,
          "vulnerability_code": "        decimals = _decimalUnits;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 389,
          "vulnerability_to_line": null,
          "vulnerability_code": "        reEntryCallData = _reEntryCallData;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 390,
          "vulnerability_to_line": null,
          "vulnerability_code": "        reEntryFun = _reEntryFun;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 391,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 474,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 475,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _initialAmount,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 476,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string memory _tokenName,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 477,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint8 _decimalUnits,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 478,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string memory _tokenSymbol,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 479,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _basisPointFee,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 480,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _owner\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 481,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) FaucetToken(_initialAmount, _tokenName, _decimalUnits, _tokenSymbol) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 482,
          "vulnerability_to_line": null,
          "vulnerability_code": "        basisPointFee = _basisPointFee;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 483,
          "vulnerability_to_line": null,
          "vulnerability_code": "        owner = _owner;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 447,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(spender != address(0), \"sender should be valid address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 448,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(owner != address(0), \"owner should be valid address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 454,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(dst != address(0), \"dst should be valid address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_48"
      ],
      "vulnerability_findings": [
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 185,
          "vulnerability_to_line": 188,
          "vulnerability_code": "contract BEP20NS is BEP20Base {\n\n    function transfer(address to, uint256 value) external;\n\n    function transferFrom(address from, address to, uint256 value) external;\n",
          "message": "BEP20NS (FeeToken.sol#185-188) has incorrect ERC20 function interface(s):\n\t-transfer (FeeToken.sol#186)\n\t-transferFrom (FeeToken.sol#187)\n"
        },
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 240,
          "vulnerability_to_line": 276,
          "vulnerability_code": "contract NonStandardToken is BEP20NS {\n\n    using SafeMath for uint256;\n\n\n\n    string public name;\n\n    uint8 public decimals;\n\n    string public symbol;\n\n    uint256 public totalSupply;\n\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    mapping(address => uint256) public balanceOf;\n\n\n\n    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n\n        totalSupply = _initialAmount;\n\n        balanceOf[msg.sender] = _initialAmount;\n\n        name = _tokenName;\n\n        symbol = _tokenSymbol;\n\n        decimals = _decimalUnits;\n\n    }\n\n\n\n    function transfer(address dst, uint256 amount) external {\n\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(amount, \"Insufficient balance\");\n\n        balanceOf[dst] = balanceOf[dst].add(amount, \"Balance overflow\");\n\n        emit Transfer(msg.sender, dst, amount);\n\n    }\n\n\n\n    function transferFrom(address src, address dst, uint256 amount) external {\n\n        allowance[src][msg.sender] = allowance[src][msg.sender].sub(amount, \"Insufficient allowance\");\n\n        balanceOf[src] = balanceOf[src].sub(amount, \"Insufficient balance\");\n\n        balanceOf[dst] = balanceOf[dst].add(amount, \"Balance overflow\");\n\n        emit Transfer(src, dst, amount);\n\n    }\n\n\n\n    function approve(address _spender, uint256 amount) external returns (bool) {\n\n        allowance[msg.sender][_spender] = amount;\n\n        emit Approval(msg.sender, _spender, amount);\n\n        return true;\n\n    }\n",
          "message": "NonStandardToken (FeeToken.sol#240-276) has incorrect ERC20 function interface(s):\n\t-transfer (FeeToken.sol#258-262)\n\t-transferFrom (FeeToken.sol#264-269)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 288,
          "vulnerability_to_line": 290,
          "vulnerability_code": "    function harnessSetFailTransferFromAddress(address src, bool _fail) public {\n\n        failTransferFromAddresses[src] = _fail;\n",
          "message": "BEP20Harness.harnessSetFailTransferFromAddress (FeeToken.sol#288-290) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 292,
          "vulnerability_to_line": 294,
          "vulnerability_code": "    function harnessSetFailTransferToAddress(address dst, bool _fail) public {\n\n        failTransferToAddresses[dst] = _fail;\n",
          "message": "BEP20Harness.harnessSetFailTransferToAddress (FeeToken.sol#292-294) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 296,
          "vulnerability_to_line": 298,
          "vulnerability_code": "    function harnessSetBalance(address _account, uint _amount) public {\n\n        balanceOf[_account] = _amount;\n",
          "message": "BEP20Harness.harnessSetBalance (FeeToken.sol#296-298) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 338,
          "vulnerability_to_line": 342,
          "vulnerability_code": "    function allocateTo(address _owner, uint256 value) public {\n\n        balanceOf[_owner] += value;\n\n        totalSupply += value;\n\n        emit Transfer(address(this), _owner, value);\n",
          "message": "FaucetToken.allocateTo (FeeToken.sol#338-342) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 355,
          "vulnerability_to_line": 359,
          "vulnerability_code": "    function allocateTo(address _owner, uint256 value) public {\n\n        balanceOf[_owner] += value;\n\n        totalSupply += value;\n\n        emit Transfer(address(this), _owner, value);\n",
          "message": "FaucetNonStandardToken.allocateTo (FeeToken.sol#355-359) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 412,
          "vulnerability_to_line": 416,
          "vulnerability_code": "    function allocateTo(address _owner, uint256 value) public {\n\n        balanceOf_[_owner] += value;\n\n        totalSupply_ += value;\n\n        emit Transfer(address(this), _owner, value);\n",
          "message": "FaucetTokenReEntrantHarness.allocateTo (FeeToken.sol#412-416) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 418,
          "vulnerability_to_line": 420,
          "vulnerability_code": "    function totalSupply() public reEnter(\"totalSupply\") returns (uint256) {\n\n        return totalSupply_;\n",
          "message": "FaucetTokenReEntrantHarness.totalSupply (FeeToken.sol#418-420) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 422,
          "vulnerability_to_line": 424,
          "vulnerability_code": "    function allowance(address owner, address spender) public reEnter(\"allowance\") returns (uint256 remaining) {\n\n        return allowance_[owner][spender];\n",
          "message": "FaucetTokenReEntrantHarness.allowance (FeeToken.sol#422-424) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 426,
          "vulnerability_to_line": 429,
          "vulnerability_code": "    function approve(address spender, uint256 amount) public reEnter(\"approve\") returns (bool success) {\n\n        _approve(msg.sender, spender, amount);\n\n        return true;\n",
          "message": "FaucetTokenReEntrantHarness.approve (FeeToken.sol#426-429) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 431,
          "vulnerability_to_line": 433,
          "vulnerability_code": "    function balanceOf(address owner) public reEnter(\"balanceOf\") returns (uint256 balance) {\n\n        return balanceOf_[owner];\n",
          "message": "FaucetTokenReEntrantHarness.balanceOf (FeeToken.sol#431-433) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 435,
          "vulnerability_to_line": 438,
          "vulnerability_code": "    function transfer(address dst, uint256 amount) public reEnter(\"transfer\") returns (bool success) {\n\n        _transfer(msg.sender, dst, amount);\n\n        return true;\n",
          "message": "FaucetTokenReEntrantHarness.transfer (FeeToken.sol#435-438) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 440,
          "vulnerability_to_line": 444,
          "vulnerability_code": "    function transferFrom(address src, address dst, uint256 amount) public reEnter(\"transferFrom\") returns (bool success) {\n\n        _transfer(src, dst, amount);\n\n        _approve(src, msg.sender, allowance_[src][msg.sender].sub(amount));\n\n        return true;\n",
          "message": "FaucetTokenReEntrantHarness.transferFrom (FeeToken.sol#440-444) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 300,
          "vulnerability_to_line": 309,
          "vulnerability_code": "    function transfer(address dst, uint256 amount) external returns (bool success) {\n\n        // Added for testing purposes\n\n        if (failTransferToAddresses[dst]) {\n\n            return false;\n\n        }\n\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(amount, \"Insufficient balance\");\n\n        balanceOf[dst] = balanceOf[dst].add(amount, \"Balance overflow\");\n\n        emit Transfer(msg.sender, dst, amount);\n\n        return true;\n",
          "message": "BEP20Harness.transfer (FeeToken.sol#300-309) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 213,
          "vulnerability_to_line": 218,
          "vulnerability_code": "    function transfer(address dst, uint256 amount) external returns (bool) {\n\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(amount, \"Insufficient balance\");\n\n        balanceOf[dst] = balanceOf[dst].add(amount, \"Balance overflow\");\n\n        emit Transfer(msg.sender, dst, amount);\n\n        return true;\n",
          "message": "StandardToken.transfer (FeeToken.sol#213-218) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 486,
          "vulnerability_to_line": 494,
          "vulnerability_code": "    function transfer(address dst, uint amount) public returns (bool) {\n\n        uint fee = amount.mul(basisPointFee).div(10000);\n\n        uint net = amount.sub(fee);\n\n        balanceOf[owner] = balanceOf[owner].add(fee);\n\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(amount);\n\n        balanceOf[dst] = balanceOf[dst].add(net);\n\n        emit Transfer(msg.sender, dst, amount);\n\n        return true;\n",
          "message": "FeeToken.transfer (FeeToken.sol#486-494) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": 226,
          "vulnerability_code": "    function transferFrom(address src, address dst, uint256 amount) external returns (bool) {\n\n        allowance[src][msg.sender] = allowance[src][msg.sender].sub(amount, \"Insufficient allowance\");\n\n        balanceOf[src] = balanceOf[src].sub(amount, \"Insufficient balance\");\n\n        balanceOf[dst] = balanceOf[dst].add(amount, \"Balance overflow\");\n\n        emit Transfer(src, dst, amount);\n\n        return true;\n",
          "message": "StandardToken.transferFrom (FeeToken.sol#220-226) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 311,
          "vulnerability_to_line": 321,
          "vulnerability_code": "    function transferFrom(address src, address dst, uint256 amount) external returns (bool success) {\n\n        // Added for testing purposes\n\n        if (failTransferFromAddresses[src]) {\n\n            return false;\n\n        }\n\n        allowance[src][msg.sender] = allowance[src][msg.sender].sub(amount, \"Insufficient allowance\");\n\n        balanceOf[src] = balanceOf[src].sub(amount, \"Insufficient balance\");\n\n        balanceOf[dst] = balanceOf[dst].add(amount, \"Balance overflow\");\n\n        emit Transfer(src, dst, amount);\n\n        return true;\n",
          "message": "BEP20Harness.transferFrom (FeeToken.sol#311-321) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 496,
          "vulnerability_to_line": 505,
          "vulnerability_code": "    function transferFrom(address src, address dst, uint amount) public returns (bool) {\n\n        uint fee = amount.mul(basisPointFee).div(10000);\n\n        uint net = amount.sub(fee);\n\n        balanceOf[owner] = balanceOf[owner].add(fee);\n\n        balanceOf[src] = balanceOf[src].sub(amount);\n\n        balanceOf[dst] = balanceOf[dst].add(net);\n\n        allowance[src][msg.sender] = allowance[src][msg.sender].sub(amount);\n\n        emit Transfer(src, dst, amount);\n\n        return true;\n",
          "message": "FeeToken.transferFrom (FeeToken.sol#496-505) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": "Detected issues with version pragma in FeeToken.sol:\n\t- pragma solidity^0.5.16 (FeeToken.sol#3): it allows old versions\n\t- pragma solidity^0.5.16 (FeeToken.sol#169): it allows old versions\n\t- pragma solidity^0.5.16 (FeeToken.sol#326): it allows old versions\n\t- pragma solidity^0.5.16 (FeeToken.sol#463): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 amount) external returns (bool) {\n",
          "message": "Parameter '_spender' of StandardToken.approve (FeeToken.sol#228) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Parameter '_initialAmount' of StandardToken. (FeeToken.sol#205) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Parameter '_tokenName' of StandardToken. (FeeToken.sol#205) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Parameter '_decimalUnits' of StandardToken. (FeeToken.sol#205) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Parameter '_tokenSymbol' of StandardToken. (FeeToken.sol#205) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 271,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 amount) external returns (bool) {\n",
          "message": "Parameter '_spender' of NonStandardToken.approve (FeeToken.sol#271) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 250,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Parameter '_initialAmount' of NonStandardToken. (FeeToken.sol#250) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 250,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Parameter '_tokenName' of NonStandardToken. (FeeToken.sol#250) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 250,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Parameter '_decimalUnits' of NonStandardToken. (FeeToken.sol#250) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 250,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Parameter '_tokenSymbol' of NonStandardToken. (FeeToken.sol#250) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 288,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function harnessSetFailTransferFromAddress(address src, bool _fail) public {\n",
          "message": "Parameter '_fail' of BEP20Harness.harnessSetFailTransferFromAddress (FeeToken.sol#288) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 292,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function harnessSetFailTransferToAddress(address dst, bool _fail) public {\n",
          "message": "Parameter '_fail' of BEP20Harness.harnessSetFailTransferToAddress (FeeToken.sol#292) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 296,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function harnessSetBalance(address _account, uint _amount) public {\n",
          "message": "Parameter '_account' of BEP20Harness.harnessSetBalance (FeeToken.sol#296) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 296,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function harnessSetBalance(address _account, uint _amount) public {\n",
          "message": "Parameter '_amount' of BEP20Harness.harnessSetBalance (FeeToken.sol#296) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 338,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allocateTo(address _owner, uint256 value) public {\n",
          "message": "Parameter '_owner' of FaucetToken.allocateTo (FeeToken.sol#338) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 355,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allocateTo(address _owner, uint256 value) public {\n",
          "message": "Parameter '_owner' of FaucetNonStandardToken.allocateTo (FeeToken.sol#355) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 383,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol, bytes memory _reEntryCallData, string memory _reEntryFun) public {\n",
          "message": "Parameter '_initialAmount' of FaucetTokenReEntrantHarness. (FeeToken.sol#383) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 383,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol, bytes memory _reEntryCallData, string memory _reEntryFun) public {\n",
          "message": "Parameter '_tokenName' of FaucetTokenReEntrantHarness. (FeeToken.sol#383) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 383,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol, bytes memory _reEntryCallData, string memory _reEntryFun) public {\n",
          "message": "Parameter '_decimalUnits' of FaucetTokenReEntrantHarness. (FeeToken.sol#383) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 383,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol, bytes memory _reEntryCallData, string memory _reEntryFun) public {\n",
          "message": "Parameter '_tokenSymbol' of FaucetTokenReEntrantHarness. (FeeToken.sol#383) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 383,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol, bytes memory _reEntryCallData, string memory _reEntryFun) public {\n",
          "message": "Parameter '_reEntryCallData' of FaucetTokenReEntrantHarness. (FeeToken.sol#383) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 383,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol, bytes memory _reEntryCallData, string memory _reEntryFun) public {\n",
          "message": "Parameter '_reEntryFun' of FaucetTokenReEntrantHarness. (FeeToken.sol#383) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 412,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allocateTo(address _owner, uint256 value) public {\n",
          "message": "Parameter '_owner' of FaucetTokenReEntrantHarness.allocateTo (FeeToken.sol#412) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 446,
          "vulnerability_to_line": 451,
          "vulnerability_code": "    function _approve(address owner, address spender, uint256 amount) internal {\n\n        require(spender != address(0), \"sender should be valid address\");\n\n        require(owner != address(0), \"owner should be valid address\");\n\n        allowance_[owner][spender] = amount;\n\n        emit Approval(owner, spender, amount);\n",
          "message": "Function 'FaucetTokenReEntrantHarness._approve' (FeeToken.sol#446-451) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 453,
          "vulnerability_to_line": 458,
          "vulnerability_code": "    function _transfer(address src, address dst, uint256 amount) internal {\n\n        require(dst != address(0), \"dst should be valid address\");\n\n        balanceOf_[src] = balanceOf_[src].sub(amount);\n\n        balanceOf_[dst] = balanceOf_[dst].add(amount);\n\n        emit Transfer(src, dst, amount);\n",
          "message": "Function 'FaucetTokenReEntrantHarness._transfer' (FeeToken.sol#453-458) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 479,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _basisPointFee,\n",
          "message": "Parameter '_basisPointFee' of FeeToken. (FeeToken.sol#479) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 480,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _owner\n",
          "message": "Parameter '_owner' of FeeToken. (FeeToken.sol#480) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 amount) external returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 271,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 amount) external returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 426,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address spender, uint256 amount) public reEnter(\"approve\") returns (bool success) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 169,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 326,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 463,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 196,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 241,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 368,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 398,
          "vulnerability_to_line": null,
          "vulnerability_code": "            assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 376,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 totalSupply_;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 377,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => mapping (address => uint256)) allowance_;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 378,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => uint256) balanceOf_;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}