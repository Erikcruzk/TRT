{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 349,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract BEP20BitcoinCash is Context, IBEP20, Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor () internal { }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 298,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor () internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 299,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address msgSender = _msgSender();\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 300,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _owner = msgSender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 301,
          "vulnerability_to_line": null,
          "vulnerability_code": "    emit OwnershipTransferred(address(0), msgSender);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 302,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 361,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 362,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _name = \"Litecoin Token\";\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 363,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _symbol = \"LTC\";\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 364,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _decimals = 18;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 365,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _totalSupply = 210000 * 10**18;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 366,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _balances[msg.sender] = _totalSupply;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 367,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 368,
          "vulnerability_to_line": null,
          "vulnerability_code": "    emit Transfer(address(0), msg.sender, _totalSupply);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 369,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 154,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(c >= a, \"SafeMath: addition overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 206,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 315,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 343,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 535,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(sender != address(0), \"BEP20: transfer from the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 536,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(recipient != address(0), \"BEP20: transfer to the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 553,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(account != address(0), \"BEP20: mint to the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 572,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(account != address(0), \"BEP20: burn from the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 593,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(owner != address(0), \"BEP20: approve from the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 594,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(spender != address(0), \"BEP20: approve to the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 206,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 343,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 535,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(sender != address(0), \"BEP20: transfer from the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 536,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(recipient != address(0), \"BEP20: transfer to the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 572,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(account != address(0), \"BEP20: burn from the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 593,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(owner != address(0), \"BEP20: approve from the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 594,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(spender != address(0), \"BEP20: approve to the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_20"
      ],
      "vulnerability_findings": [
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 429,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address owner, address spender) external view returns (uint256) {\n",
          "message": "BEP20BitcoinCash.allowance.owner (local variable @ BEP20BitcoinCash.sol#429) shadows:\n\t- Ownable.owner (function @ BEP20BitcoinCash.sol#307-309)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 592,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function _approve(address owner, address spender, uint256 amount) internal {\n",
          "message": "BEP20BitcoinCash._approve.owner (local variable @ BEP20BitcoinCash.sol#592) shadows:\n\t- Ownable.owner (function @ BEP20BitcoinCash.sol#307-309)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 326,
          "vulnerability_to_line": 329,
          "vulnerability_code": "  function renounceOwnership() public onlyOwner {\n\n    emit OwnershipTransferred(_owner, address(0));\n\n    _owner = address(0);\n",
          "message": "Ownable.renounceOwnership (BEP20BitcoinCash.sol#326-329) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 335,
          "vulnerability_to_line": 337,
          "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    _transferOwnership(newOwner);\n",
          "message": "Ownable.transferOwnership (BEP20BitcoinCash.sol#335-337) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 475,
          "vulnerability_to_line": 478,
          "vulnerability_code": "  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n\n    return true;\n",
          "message": "BEP20BitcoinCash.increaseAllowance (BEP20BitcoinCash.sol#475-478) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 494,
          "vulnerability_to_line": 497,
          "vulnerability_code": "  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\n\n    return true;\n",
          "message": "BEP20BitcoinCash.decreaseAllowance (BEP20BitcoinCash.sol#494-497) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 507,
          "vulnerability_to_line": 510,
          "vulnerability_code": "  function mint(uint256 amount) public onlyOwner returns (bool) {\n\n    _mint(_msgSender(), amount);\n\n    return true;\n",
          "message": "BEP20BitcoinCash.mint (BEP20BitcoinCash.sol#507-510) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 515,
          "vulnerability_to_line": 518,
          "vulnerability_code": "  function burn(uint256 amount) public returns (bool) {\n\n    _burn(_msgSender(), amount);\n\n    return true;\n",
          "message": "BEP20BitcoinCash.burn (BEP20BitcoinCash.sol#515-518) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.5.16;\n",
          "message": "Detected issues with version pragma in BEP20BitcoinCash.sol:\n\t- pragma solidity0.5.16 (BEP20BitcoinCash.sol#11): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 119,
          "vulnerability_to_line": 121,
          "vulnerability_code": "  function _msgSender() internal view returns (address payable) {\n\n    return msg.sender;\n",
          "message": "Function 'Context._msgSender' (BEP20BitcoinCash.sol#119-121) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": 126,
          "vulnerability_code": "  function _msgData() internal view returns (bytes memory) {\n\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n\n    return msg.data;\n",
          "message": "Function 'Context._msgData' (BEP20BitcoinCash.sol#123-126) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 342,
          "vulnerability_to_line": 346,
          "vulnerability_code": "  function _transferOwnership(address newOwner) internal {\n\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n\n    emit OwnershipTransferred(_owner, newOwner);\n\n    _owner = newOwner;\n",
          "message": "Function 'Ownable._transferOwnership' (BEP20BitcoinCash.sol#342-346) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 534,
          "vulnerability_to_line": 541,
          "vulnerability_code": "  function _transfer(address sender, address recipient, uint256 amount) internal {\n\n    require(sender != address(0), \"BEP20: transfer from the zero address\");\n\n    require(recipient != address(0), \"BEP20: transfer to the zero address\");\n\n\n\n    _balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\");\n\n    _balances[recipient] = _balances[recipient].add(amount);\n\n    emit Transfer(sender, recipient, amount);\n",
          "message": "Function 'BEP20BitcoinCash._transfer' (BEP20BitcoinCash.sol#534-541) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 552,
          "vulnerability_to_line": 558,
          "vulnerability_code": "  function _mint(address account, uint256 amount) internal {\n\n    require(account != address(0), \"BEP20: mint to the zero address\");\n\n\n\n    _totalSupply = _totalSupply.add(amount);\n\n    _balances[account] = _balances[account].add(amount);\n\n    emit Transfer(address(0), account, amount);\n",
          "message": "Function 'BEP20BitcoinCash._mint' (BEP20BitcoinCash.sol#552-558) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 571,
          "vulnerability_to_line": 577,
          "vulnerability_code": "  function _burn(address account, uint256 amount) internal {\n\n    require(account != address(0), \"BEP20: burn from the zero address\");\n\n\n\n    _balances[account] = _balances[account].sub(amount, \"BEP20: burn amount exceeds balance\");\n\n    _totalSupply = _totalSupply.sub(amount);\n\n    emit Transfer(account, address(0), amount);\n",
          "message": "Function 'BEP20BitcoinCash._burn' (BEP20BitcoinCash.sol#571-577) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 592,
          "vulnerability_to_line": 598,
          "vulnerability_code": "  function _approve(address owner, address spender, uint256 amount) internal {\n\n    require(owner != address(0), \"BEP20: approve from the zero address\");\n\n    require(spender != address(0), \"BEP20: approve to the zero address\");\n\n\n\n    _allowances[owner][spender] = amount;\n\n    emit Approval(owner, spender, amount);\n",
          "message": "Function 'BEP20BitcoinCash._approve' (BEP20BitcoinCash.sol#592-598) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 606,
          "vulnerability_to_line": 609,
          "vulnerability_code": "  function _burnFrom(address account, uint256 amount) internal {\n\n    _burn(account, amount);\n\n    _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"BEP20: burn amount exceeds allowance\"));\n",
          "message": "Function 'BEP20BitcoinCash._burnFrom' (BEP20BitcoinCash.sol#606-609) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 357,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint8 public _decimals;\n",
          "message": "Variable 'BEP20BitcoinCash._decimals' (BEP20BitcoinCash.sol#357) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 358,
          "vulnerability_to_line": null,
          "vulnerability_code": "  string public _symbol;\n",
          "message": "Variable 'BEP20BitcoinCash._symbol' (BEP20BitcoinCash.sol#358) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 359,
          "vulnerability_to_line": null,
          "vulnerability_code": "  string public _name;\n",
          "message": "Variable 'BEP20BitcoinCash._name' (BEP20BitcoinCash.sol#359) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 328,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _owner = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 291,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address private _owner;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 352,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping (address => uint256) private _balances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 354,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping (address => mapping (address => uint256)) private _allowances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 356,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 private _totalSupply;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 350,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}