{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_account != address(0), \"Account cannot be zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(size > 0, \"Account code size cannot be zero\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_4"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": 20,
          "vulnerability_code": "    function checkContract(address _account) internal view {\n\n        require(_account != address(0), \"Account cannot be zero address\");\n\n\n\n        uint256 size;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { size := extcodesize(_account) }\n\n        require(size > 0, \"Account code size cannot be zero\");\n",
          "message": "CheckContract.checkContract (CheckContract.sol#13-20) is declared view but contains assembly code\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": 20,
          "vulnerability_code": "    function checkContract(address _account) internal view {\n\n        require(_account != address(0), \"Account cannot be zero address\");\n\n\n\n        uint256 size;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { size := extcodesize(_account) }\n\n        require(size > 0, \"Account code size cannot be zero\");\n",
          "message": "CheckContract.checkContract uses assembly (CheckContract.sol#13-20)\n\t- CheckContract.sol#18\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.6.11;\n",
          "message": "Detected issues with version pragma in CheckContract.sol:\n\t- pragma solidity0.6.11 (CheckContract.sol#5): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function checkContract(address _account) internal view {\n",
          "message": "Parameter '_account' of CheckContract.checkContract (CheckContract.sol#13) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function checkContract(address _account) internal view {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}