{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 608,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 609,
          "vulnerability_to_line": null,
          "vulnerability_code": "            state.validFactories[_factory],\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 610,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Core.create: Invalid or disabled factory address\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 611,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 608,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 609,
          "vulnerability_to_line": null,
          "vulnerability_code": "            state.validFactories[_factory],\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 610,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Core.create: Invalid or disabled factory address\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 611,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_14"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 595,
          "vulnerability_to_line": 641,
          "vulnerability_code": "    function create(\n\n        address _factory,\n\n        address[] _components,\n\n        uint256[] _units,\n\n        uint256 _naturalUnit,\n\n        bytes32 _name,\n\n        bytes32 _symbol,\n\n        bytes _callData\n\n    )\n\n        external\n\n        returns (address)\n\n    {\n\n        // Verify Factory is linked to Core\n\n        require(\n\n            state.validFactories[_factory],\n\n            \"Core.create: Invalid or disabled factory address\"\n\n        );\n\n\n\n        // Create the Set\n\n        address newSetTokenAddress = ISetFactory(_factory).create(\n\n            _components,\n\n            _units,\n\n            _naturalUnit,\n\n            _name,\n\n            _symbol,\n\n            _callData\n\n        );\n\n\n\n        // Add Set to the mapping of tracked Sets\n\n        state.validSets[newSetTokenAddress] = true;\n\n\n\n        // Add Set to the array of tracked Sets\n\n        state.setTokens.push(newSetTokenAddress);\n\n\n\n        // Emit Set Token creation log\n\n        emit SetTokenCreated(\n\n            newSetTokenAddress,\n\n            _factory,\n\n            _components,\n\n            _units,\n\n            _naturalUnit,\n\n            _name,\n\n            _symbol\n\n        );\n\n\n\n        return newSetTokenAddress;\n",
          "message": "Reentrancy in CoreFactory.create (CoreFactory.sol#595-641):\n\tExternal calls:\n\t- newSetTokenAddress = ISetFactory(_factory).create(_components,_units,_naturalUnit,_name,_symbol,_callData) (CoreFactory.sol#614-621)\n\tState variables written after the call(s):\n\t- state (CoreFactory.sol#624)\n\t- state (CoreFactory.sol#627)\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 333,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint8 _exchangeId\n",
          "message": "Parameter '_exchangeId' of CoreState.exchanges (CoreFactory.sol#333) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 388,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _factory\n",
          "message": "Parameter '_factory' of CoreState.validFactories (CoreFactory.sol#388) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 404,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _module\n",
          "message": "Parameter '_module' of CoreState.validModules (CoreFactory.sol#404) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 420,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _set\n",
          "message": "Parameter '_set' of CoreState.validSets (CoreFactory.sol#420) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 436,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _set\n",
          "message": "Parameter '_set' of CoreState.disabledSets (CoreFactory.sol#436) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 465,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _priceLibrary\n",
          "message": "Parameter '_priceLibrary' of CoreState.validPriceLibraries (CoreFactory.sol#465) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 596,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _factory,\n",
          "message": "Parameter '_factory' of CoreFactory.create (CoreFactory.sol#596) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 597,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] _components,\n",
          "message": "Parameter '_components' of CoreFactory.create (CoreFactory.sol#597) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 598,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256[] _units,\n",
          "message": "Parameter '_units' of CoreFactory.create (CoreFactory.sol#598) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 599,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _naturalUnit,\n",
          "message": "Parameter '_naturalUnit' of CoreFactory.create (CoreFactory.sol#599) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 600,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32 _name,\n",
          "message": "Parameter '_name' of CoreFactory.create (CoreFactory.sol#600) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 601,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32 _symbol,\n",
          "message": "Parameter '_symbol' of CoreFactory.create (CoreFactory.sol#601) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 602,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes _callData\n",
          "message": "Parameter '_callData' of CoreFactory.create (CoreFactory.sol#602) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 614,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address newSetTokenAddress = ISetFactory(_factory).create(\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "// File: ../sc_datasets/DAppSCAN/Trail_of_Bits-setprotocol/set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/core/interfaces/ITransferProxy.sol\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 450,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTokens()\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 455,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return state.setTokens;\n",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 614,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address newSetTokenAddress = ISetFactory(_factory).create(\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 450,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTokens()\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 455,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return state.setTokens;\n",
          "message": null
        }
      ]
    }
  }
}