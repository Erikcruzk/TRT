{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_1"
      ],
      "vulnerability_findings": [
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": 112,
          "vulnerability_code": "interface ISetToken {\n\n\n\n    /* ============ External Functions ============ */\n\n\n\n    /*\n\n     * Get natural unit of Set\n\n     *\n\n     * @return  uint256       Natural unit of Set\n\n     */\n\n    function naturalUnit()\n\n        external\n\n        view\n\n        returns (uint256);\n\n\n\n    /*\n\n     * Get addresses of all components in the Set\n\n     *\n\n     * @return  componentAddresses       Array of component tokens\n\n     */\n\n    function getComponents()\n\n        external\n\n        view\n\n        returns(address[]);\n\n\n\n    /*\n\n     * Get units of all tokens in Set\n\n     *\n\n     * @return  units       Array of component units\n\n     */\n\n    function getUnits()\n\n        external\n\n        view\n\n        returns(uint256[]);\n\n\n\n    /*\n\n     * Checks to make sure token is component of Set\n\n     *\n\n     * @param  _tokenAddress     Address of token being checked\n\n     * @return  bool             True if token is component of Set\n\n     */\n\n    function tokenIsComponent(\n\n        address _tokenAddress\n\n    )\n\n        external\n\n        view\n\n        returns (bool);\n\n\n\n    /*\n\n     * Mint set token for given address.\n\n     * Can only be called by authorized contracts.\n\n     *\n\n     * @param  _issuer      The address of the issuing account\n\n     * @param  _quantity    The number of sets to attribute to issuer\n\n     */\n\n    function mint(\n\n        address _issuer,\n\n        uint256 _quantity\n\n    )\n\n        external;\n\n\n\n    /*\n\n     * Burn set token for given address\n\n     * Can only be called by authorized contracts\n\n     *\n\n     * @param  _from        The address of the redeeming account\n\n     * @param  _quantity    The number of sets to burn from redeemer\n\n     */\n\n    function burn(\n\n        address _from,\n\n        uint256 _quantity\n\n    )\n\n        external;\n\n\n\n    /**\n\n    * Transfer token for a specified address\n\n    *\n\n    * @param to The address to transfer to.\n\n    * @param value The amount to be transferred.\n\n    */\n\n    function transfer(\n\n        address to,\n\n        uint256 value\n\n    )\n\n        external;\n",
          "message": "ISetToken (ISetToken.sol#28-112) has incorrect ERC20 function interface(s):\n\t-transfer (ISetToken.sol#107-111)\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "execution failed"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "input files do not contain any valid contracts"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}