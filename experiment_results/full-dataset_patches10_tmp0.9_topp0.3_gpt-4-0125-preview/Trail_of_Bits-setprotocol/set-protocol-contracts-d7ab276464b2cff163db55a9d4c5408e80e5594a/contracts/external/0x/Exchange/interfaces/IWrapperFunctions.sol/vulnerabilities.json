{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_13"
      ],
      "vulnerability_findings": [
        {
          "name": "constable-states",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32 public EIP712_DOMAIN_HASH;\n",
          "message": "LibEIP712.EIP712_DOMAIN_HASH should be constant (IWrapperFunctions.sol#43)\n"
        },
        {
          "name": "pragma",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.4.25;\n",
          "message": "Different versions of Solidity is used in IWrapperFunctions.sol:\n\t- Version used: ['0.4.25', 'ABIEncoderV2']\n\t- IWrapperFunctions.sol#21 declares pragma solidity0.4.25\n\t- IWrapperFunctions.sol#66 declares pragma solidity0.4.25\n\t- IWrapperFunctions.sol#144 declares pragma solidity0.4.25\n\t- IWrapperFunctions.sol#182 declares pragma solidity0.4.25\n\t- IWrapperFunctions.sol#183 declares pragma experimentalABIEncoderV2\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 191,
          "vulnerability_to_line": 197,
          "vulnerability_code": "    function fillOrKillOrder(\n\n        LibOrder.Order memory order,\n\n        uint256 takerAssetFillAmount,\n\n        bytes memory signature\n\n    )\n\n        public\n",
          "message": "IWrapperFunctions.fillOrKillOrder (IWrapperFunctions.sol#191-197) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": 211,
          "vulnerability_code": "    function fillOrderNoThrow(\n\n        LibOrder.Order memory order,\n\n        uint256 takerAssetFillAmount,\n\n        bytes memory signature\n\n    )\n\n        public\n",
          "message": "IWrapperFunctions.fillOrderNoThrow (IWrapperFunctions.sol#205-211) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 218,
          "vulnerability_to_line": 224,
          "vulnerability_code": "    function batchFillOrders(\n\n        LibOrder.Order[] memory orders,\n\n        uint256[] memory takerAssetFillAmounts,\n\n        bytes[] memory signatures\n\n    )\n\n        public\n",
          "message": "IWrapperFunctions.batchFillOrders (IWrapperFunctions.sol#218-224) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 231,
          "vulnerability_to_line": 237,
          "vulnerability_code": "    function batchFillOrKillOrders(\n\n        LibOrder.Order[] memory orders,\n\n        uint256[] memory takerAssetFillAmounts,\n\n        bytes[] memory signatures\n\n    )\n\n        public\n",
          "message": "IWrapperFunctions.batchFillOrKillOrders (IWrapperFunctions.sol#231-237) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 245,
          "vulnerability_to_line": 251,
          "vulnerability_code": "    function batchFillOrdersNoThrow(\n\n        LibOrder.Order[] memory orders,\n\n        uint256[] memory takerAssetFillAmounts,\n\n        bytes[] memory signatures\n\n    )\n\n        public\n",
          "message": "IWrapperFunctions.batchFillOrdersNoThrow (IWrapperFunctions.sol#245-251) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 258,
          "vulnerability_to_line": 264,
          "vulnerability_code": "    function marketSellOrders(\n\n        LibOrder.Order[] memory orders,\n\n        uint256 takerAssetFillAmount,\n\n        bytes[] memory signatures\n\n    )\n\n        public\n",
          "message": "IWrapperFunctions.marketSellOrders (IWrapperFunctions.sol#258-264) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 272,
          "vulnerability_to_line": 278,
          "vulnerability_code": "    function marketSellOrdersNoThrow(\n\n        LibOrder.Order[] memory orders,\n\n        uint256 takerAssetFillAmount,\n\n        bytes[] memory signatures\n\n    )\n\n        public\n",
          "message": "IWrapperFunctions.marketSellOrdersNoThrow (IWrapperFunctions.sol#272-278) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 285,
          "vulnerability_to_line": 291,
          "vulnerability_code": "    function marketBuyOrders(\n\n        LibOrder.Order[] memory orders,\n\n        uint256 makerAssetFillAmount,\n\n        bytes[] memory signatures\n\n    )\n\n        public\n",
          "message": "IWrapperFunctions.marketBuyOrders (IWrapperFunctions.sol#285-291) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 299,
          "vulnerability_to_line": 305,
          "vulnerability_code": "    function marketBuyOrdersNoThrow(\n\n        LibOrder.Order[] memory orders,\n\n        uint256 makerAssetFillAmount,\n\n        bytes[] memory signatures\n\n    )\n\n        public\n",
          "message": "IWrapperFunctions.marketBuyOrdersNoThrow (IWrapperFunctions.sol#299-305) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 309,
          "vulnerability_to_line": 310,
          "vulnerability_code": "    function batchCancelOrders(LibOrder.Order[] memory orders)\n",
          "message": "IWrapperFunctions.batchCancelOrders (IWrapperFunctions.sol#309-310) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32 public EIP712_DOMAIN_HASH;\n",
          "message": "Variable 'LibEIP712.EIP712_DOMAIN_HASH' (IWrapperFunctions.sol#43) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string constant EIP191_HEADER = \"\\x19\\x01\";\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string constant EIP712_DOMAIN_NAME = \"0x Protocol\";\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string constant EIP712_DOMAIN_VERSION = \"2\";\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32 constant EIP712_ORDER_SCHEMA_HASH = keccak256(abi.encodePacked(\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32 public constant EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(abi.encodePacked(\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32 public constant EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(abi.encodePacked(\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}