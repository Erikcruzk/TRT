{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_6"
      ],
      "vulnerability_findings": [
        {
          "name": "constable-states",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32 public EIP712_DOMAIN_HASH;\n",
          "message": "LibEIP712.EIP712_DOMAIN_HASH should be constant (IExchangeCore.sol#43)\n"
        },
        {
          "name": "pragma",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.4.25;\n",
          "message": "Different versions of Solidity is used in IExchangeCore.sol:\n\t- Version used: ['0.4.25', 'ABIEncoderV2']\n\t- IExchangeCore.sol#21 declares pragma solidity0.4.25\n\t- IExchangeCore.sol#66 declares pragma solidity0.4.25\n\t- IExchangeCore.sol#144 declares pragma solidity0.4.25\n\t- IExchangeCore.sol#182 declares pragma solidity0.4.25\n\t- IExchangeCore.sol#183 declares pragma experimentalABIEncoderV2\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 199,
          "vulnerability_to_line": 205,
          "vulnerability_code": "    function fillOrder(\n\n        LibOrder.Order memory order,\n\n        uint256 takerAssetFillAmount,\n\n        bytes memory signature\n\n    )\n\n        public\n",
          "message": "IExchangeCore.fillOrder (IExchangeCore.sol#199-205) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 209,
          "vulnerability_to_line": 210,
          "vulnerability_code": "    function cancelOrder(LibOrder.Order memory order)\n",
          "message": "IExchangeCore.cancelOrder (IExchangeCore.sol#209-210) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": 219,
          "vulnerability_code": "    function getOrderInfo(LibOrder.Order memory order)\n\n        public\n\n        view\n",
          "message": "IExchangeCore.getOrderInfo (IExchangeCore.sol#216-219) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32 public EIP712_DOMAIN_HASH;\n",
          "message": "Variable 'LibEIP712.EIP712_DOMAIN_HASH' (IExchangeCore.sol#43) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string constant EIP191_HEADER = \"\\x19\\x01\";\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string constant EIP712_DOMAIN_NAME = \"0x Protocol\";\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string constant EIP712_DOMAIN_VERSION = \"2\";\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32 constant EIP712_ORDER_SCHEMA_HASH = keccak256(abi.encodePacked(\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32 public constant EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(abi.encodePacked(\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32 public constant EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(abi.encodePacked(\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}