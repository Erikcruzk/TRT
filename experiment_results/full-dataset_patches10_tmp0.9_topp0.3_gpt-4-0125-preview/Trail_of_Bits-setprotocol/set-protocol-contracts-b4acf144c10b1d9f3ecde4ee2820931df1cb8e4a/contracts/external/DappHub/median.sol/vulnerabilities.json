{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "        owner = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit LogSetOwner(msg.sender);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 302,
          "vulnerability_to_line": null,
          "vulnerability_code": "            address signer = recover(val_[i], age_[i], v[i], r[i], s[i], wat);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 304,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(orcl[signer], \"Signature by invalid oracle\");\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 307,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(age_[i] > uint256(age), \"Stale message\");\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 300,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < l; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 315,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint j = 0; j < i; j++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 274,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(val > 0, \"Invalid price feed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(l >= min, \"Not enough signed messages\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(l % 2 != 0, \"Need odd number of messages\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 304,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(orcl[signer], \"Signature by invalid oracle\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 307,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(age_[i] > uint256(age), \"Stale message\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 316,
          "vulnerability_to_line": null,
          "vulnerability_code": "                require(signers[j] != signer, \"Oracle already signed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 330,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(a != address(0x0), \"No oracle 0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 339,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(min_ > 0, \"Minimum valid oracles cannot be 0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 300,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < l; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 315,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint j = 0; j < i; j++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 339,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(min_ > 0, \"Minimum valid oracles cannot be 0\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_13"
      ],
      "vulnerability_findings": [
        {
          "name": "timestamp",
          "vulnerability_from_line": 289,
          "vulnerability_to_line": 327,
          "vulnerability_code": "    function poke(\n\n        uint256[] calldata val_, uint256[] calldata age_,\n\n        uint8[] calldata v, bytes32[] calldata r, bytes32[] calldata s) external\n\n    {\n\n        uint256 l = val_.length;\n\n        require(l >= min, \"Not enough signed messages\");\n\n        require(l % 2 != 0, \"Need odd number of messages\");\n\n\n\n        // Array to store signer addresses, to check for uniqueness later\n\n        address[] memory signers = new address[](l);\n\n\n\n        for (uint i = 0; i < l; i++) {\n\n            // Validate the values were signed by an authorized oracle\n\n            address signer = recover(val_[i], age_[i], v[i], r[i], s[i], wat);\n\n            // Check that signer is an oracle\n\n            require(orcl[signer], \"Signature by invalid oracle\");\n\n\n\n            // Price feed age greater than last medianizer age\n\n            require(age_[i] > uint256(age), \"Stale message\");\n\n\n\n            // Check for ordered values (TODO: better out of bounds check?)\n\n            if ((i + 1) < l) {\n\n                // require(val_[i] <= val_[i + 1], \"Messages not in order\");\n\n            }\n\n\n\n            // Check for uniqueness (TODO: is this the best we can do?)\n\n            for (uint j = 0; j < i; j++) {\n\n                require(signers[j] != signer, \"Oracle already signed\");\n\n            }\n\n            signers[i] = signer;\n\n        }\n\n\n\n        // Write the value and timestamp to storage\n\n        // require(med_ == val_[(l - 1) / 2], \"Sanity check fail\");\n\n        val = uint128(val_[(l - 1) / 2]);\n\n        age = uint48(block.timestamp);\n\n\n\n        emit LogPrice(val, age); // some event\n",
          "message": "Median.poke (median.sol#289-327) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(age_[i] > uint256(age),Stale message) (median.sol#307)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 265,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32 public wat = \"ETHUSD\";\n",
          "message": "Median.wat should be constant (median.sol#265)\n"
        },
        {
          "name": "pragma",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.5.4;\n",
          "message": "Different versions of Solidity is used in median.sol:\n\t- Version used: ['0.5.4', '^0.5.4']\n\t- median.sol#16 declares pragma solidity0.5.4\n\t- median.sol#89 declares pragma solidity0.5.4\n\t- median.sol#138 declares pragma solidity0.5.4\n\t- median.sol#227 declares pragma solidity^0.5.4\n\t- median.sol#258 declares pragma solidity0.5.4\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": 21,
          "vulnerability_code": "    function canCall(\n\n        address src, address dst, bytes4 sig\n",
          "message": "DSAuthority.canCall (median.sol#19-21) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": 44,
          "vulnerability_code": "    function setOwner(address owner_)\n\n        public\n\n        auth\n\n    {\n\n        owner = owner_;\n\n        emit LogSetOwner(owner);\n",
          "message": "DSAuth.setOwner (median.sol#38-44) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": 52,
          "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n\n        public\n\n        auth\n\n    {\n\n        authority = authority_;\n\n        emit LogSetAuthority(address(authority));\n",
          "message": "DSAuth.setAuthority (median.sol#46-52) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 273,
          "vulnerability_to_line": 276,
          "vulnerability_code": "    function read() public view returns (bytes32) {\n\n        require(val > 0, \"Invalid price feed\");\n\n        return bytes32(uint256(val));\n",
          "message": "Median.read (median.sol#273-276) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": 280,
          "vulnerability_code": "    function peek() public view returns (bytes32,bool) {\n\n        return (bytes32(uint256(val)), val > 0);\n",
          "message": "Median.peek (median.sol#278-280) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 329,
          "vulnerability_to_line": 332,
          "vulnerability_code": "    function lift(address a) public auth {\n\n        require(a != address(0x0), \"No oracle 0\");\n\n        orcl[a] = true;\n",
          "message": "Median.lift (median.sol#329-332) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 334,
          "vulnerability_to_line": 336,
          "vulnerability_code": "    function drop(address a) public auth {\n\n        orcl[a] = false;\n",
          "message": "Median.drop (median.sol#334-336) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 338,
          "vulnerability_to_line": 341,
          "vulnerability_code": "    function setMin(uint256 min_) public auth {\n\n        require(min_ > 0, \"Minimum valid oracles cannot be 0\");\n\n        min = min_;\n",
          "message": "Median.setMin (median.sol#338-341) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.5.4;\n",
          "message": "Detected issues with version pragma in median.sol:\n\t- pragma solidity0.5.4 (median.sol#16): it allows old versions\n\t- pragma solidity0.5.4 (median.sol#89): it allows old versions\n\t- pragma solidity0.5.4 (median.sol#138): it allows old versions\n\t- pragma solidity^0.5.4 (median.sol#227): it allows old versions\n\t- pragma solidity0.5.4 (median.sol#258): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 233,
          "vulnerability_to_line": 235,
          "vulnerability_code": "    function S(string memory s) internal pure returns (bytes4) {\n\n        return bytes4(keccak256(abi.encodePacked(s)));\n",
          "message": "Function 'DSThing.S' (median.sol#233-235) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 227,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.4;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function peek() public view returns (bytes32,bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 289,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function poke(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 164,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant WAD = 10 ** 18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 165,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant RAY = 10 ** 27;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 262,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint128        val;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 290,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256[] calldata val_, uint256[] calldata age_,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 291,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint8[] calldata v, bytes32[] calldata r, bytes32[] calldata s) external\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 291,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint8[] calldata v, bytes32[] calldata r, bytes32[] calldata s) external\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 291,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint8[] calldata v, bytes32[] calldata r, bytes32[] calldata s) external\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 291,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint8[] calldata v, bytes32[] calldata r, bytes32[] calldata s) external\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 291,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint8[] calldata v, bytes32[] calldata r, bytes32[] calldata s) external\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 293,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 l = val_.length;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(l >= min, \"Not enough signed messages\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(l >= min, \"Not enough signed messages\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(l % 2 != 0, \"Need odd number of messages\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 298,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] memory signers = new address[](l);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 300,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < l; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 300,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < l; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 300,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < l; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 302,
          "vulnerability_to_line": null,
          "vulnerability_code": "            address signer = recover(val_[i], age_[i], v[i], r[i], s[i], wat);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 304,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(orcl[signer], \"Signature by invalid oracle\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 304,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(orcl[signer], \"Signature by invalid oracle\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 307,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(age_[i] > uint256(age), \"Stale message\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 307,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(age_[i] > uint256(age), \"Stale message\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 307,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(age_[i] > uint256(age), \"Stale message\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 310,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if ((i + 1) < l) {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [
        "UNKNOWN INSTRUCTION: STATICCALL"
      ],
      "vulnerability_findings": [
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 263,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint48  public age;\n",
          "message": null
        }
      ]
    }
  }
}