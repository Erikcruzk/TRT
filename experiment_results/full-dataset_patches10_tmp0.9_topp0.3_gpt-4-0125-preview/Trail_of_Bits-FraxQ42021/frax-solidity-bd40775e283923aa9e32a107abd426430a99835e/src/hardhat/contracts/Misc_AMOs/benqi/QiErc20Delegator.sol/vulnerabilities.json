{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 529,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address underlying_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 530,
          "vulnerability_to_line": null,
          "vulnerability_code": "                ComptrollerInterface comptroller_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 531,
          "vulnerability_to_line": null,
          "vulnerability_code": "                InterestRateModel interestRateModel_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 532,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint initialExchangeRateMantissa_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 533,
          "vulnerability_to_line": null,
          "vulnerability_code": "                string memory name_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 534,
          "vulnerability_to_line": null,
          "vulnerability_code": "                string memory symbol_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 535,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint8 decimals_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 536,
          "vulnerability_to_line": null,
          "vulnerability_code": "                address payable admin_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 537,
          "vulnerability_to_line": null,
          "vulnerability_code": "                address implementation_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 538,
          "vulnerability_to_line": null,
          "vulnerability_code": "                bytes memory becomeImplementationData) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 566,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == admin, \"QiErc20Delegator::_setImplementation: Caller must be admin\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 977,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.value == 0,\"QiErc20Delegator:fallback: cannot send value to fallback\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 566,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == admin, \"QiErc20Delegator::_setImplementation: Caller must be admin\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 977,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.value == 0,\"QiErc20Delegator:fallback: cannot send value to fallback\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_55"
      ],
      "vulnerability_findings": [
        {
          "name": "controlled-delegatecall",
          "vulnerability_from_line": 935,
          "vulnerability_to_line": 943,
          "vulnerability_code": "    function delegateTo(address callee, bytes memory data) internal returns (bytes memory) {\n\n        (bool success, bytes memory returnData) = callee.delegatecall(data);\n\n        assembly {\n\n            if eq(success, 0) {\n\n                revert(add(returnData, 0x20), returndatasize)\n\n            }\n\n        }\n\n        return returnData;\n",
          "message": "QiErc20Delegator.delegateTo (QiErc20Delegator.sol#935-943) uses delegatecall to a input-controlled function id\n\t(success,returnData) = callee.delegatecall(data) (QiErc20Delegator.sol#936)\n"
        },
        {
          "name": "controlled-delegatecall",
          "vulnerability_from_line": 976,
          "vulnerability_to_line": 990,
          "vulnerability_code": "    function () external payable {\n\n        require(msg.value == 0,\"QiErc20Delegator:fallback: cannot send value to fallback\");\n\n\n\n        // delegate all other functions to current implementation\n\n        (bool success, ) = implementation.delegatecall(msg.data);\n\n\n\n        assembly {\n\n            let free_mem_ptr := mload(0x40)\n\n            returndatacopy(free_mem_ptr, 0, returndatasize)\n\n\n\n            switch success\n\n            case 0 { revert(free_mem_ptr, returndatasize) }\n\n            default { return(free_mem_ptr, returndatasize) }\n\n        }\n",
          "message": "QiErc20Delegator.fallback (QiErc20Delegator.sol#976-990) uses delegatecall to a input-controlled function id\n\t(success) = implementation.delegatecall(msg.data) (QiErc20Delegator.sol#980)\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 962,
          "vulnerability_to_line": 970,
          "vulnerability_code": "    function delegateToViewImplementation(bytes memory data) public view returns (bytes memory) {\n\n        (bool success, bytes memory returnData) = address(this).staticcall(abi.encodeWithSignature(\"delegateToImplementation(bytes)\", data));\n\n        assembly {\n\n            if eq(success, 0) {\n\n                revert(add(returnData, 0x20), returndatasize)\n\n            }\n\n        }\n\n        return abi.decode(returnData, (bytes));\n",
          "message": "QiErc20Delegator.delegateToViewImplementation (QiErc20Delegator.sol#962-970) is declared view but contains assembly code\n"
        },
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 121,
          "vulnerability_to_line": 183,
          "vulnerability_code": "interface EIP20NonStandardInterface {\n\n\n\n    /**\n\n     * @notice Get the total number of tokens in circulation\n\n     * @return The supply of tokens\n\n     */\n\n    function totalSupply() external view returns (uint256);\n\n\n\n    /**\n\n     * @notice Gets the balance of the specified address\n\n     * @param owner The address from which the balance will be retrieved\n\n     * @return The balance\n\n     */\n\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n\n\n    ///\n\n    /// !!!!!!!!!!!!!!\n\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\n\n    /// !!!!!!!!!!!!!!\n\n    ///\n\n\n\n    /**\n\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n\n      * @param dst The address of the destination account\n\n      * @param amount The number of tokens to transfer\n\n      */\n\n    function transfer(address dst, uint256 amount) external;\n\n\n\n    ///\n\n    /// !!!!!!!!!!!!!!\n\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\n\n    /// !!!!!!!!!!!!!!\n\n    ///\n\n\n\n    /**\n\n      * @notice Transfer `amount` tokens from `src` to `dst`\n\n      * @param src The address of the source account\n\n      * @param dst The address of the destination account\n\n      * @param amount The number of tokens to transfer\n\n      */\n\n    function transferFrom(address src, address dst, uint256 amount) external;\n\n\n\n    /**\n\n      * @notice Approve `spender` to transfer up to `amount` from `src`\n\n      * @dev This will overwrite the approval amount for `spender`\n\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n\n      * @param spender The address of the account which may transfer tokens\n\n      * @param amount The number of tokens that are approved\n\n      * @return Whether or not the approval succeeded\n\n      */\n\n    function approve(address spender, uint256 amount) external returns (bool success);\n\n\n\n    /**\n\n      * @notice Get the current allowance from `owner` for `spender`\n\n      * @param owner The address of the account which owns the tokens to be spent\n\n      * @param spender The address of the account which may transfer tokens\n\n      * @return The number of tokens allowed to be spent\n\n      */\n\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n",
          "message": "EIP20NonStandardInterface (QiErc20Delegator.sol#121-183) has incorrect ERC20 function interface(s):\n\t-transfer (QiErc20Delegator.sol#147)\n\t-transferFrom (QiErc20Delegator.sol#161)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 565,
          "vulnerability_to_line": 578,
          "vulnerability_code": "    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) public {\n\n        require(msg.sender == admin, \"QiErc20Delegator::_setImplementation: Caller must be admin\");\n\n\n\n        if (allowResign) {\n\n            delegateToImplementation(abi.encodeWithSignature(\"_resignImplementation()\"));\n\n        }\n\n\n\n        address oldImplementation = implementation;\n\n        implementation = implementation_;\n\n\n\n        delegateToImplementation(abi.encodeWithSignature(\"_becomeImplementation(bytes)\", becomeImplementationData));\n\n\n\n        emit NewImplementation(oldImplementation, implementation);\n",
          "message": "Reentrancy in QiErc20Delegator._setImplementation (QiErc20Delegator.sol#565-578):\n\tExternal calls:\n\t- delegateToImplementation(abi.encodeWithSignature(_resignImplementation())) (QiErc20Delegator.sol#569)\n\tState variables written after the call(s):\n\t- implementation (QiErc20Delegator.sol#573)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 529,
          "vulnerability_to_line": 557,
          "vulnerability_code": "    constructor(address underlying_,\n\n                ComptrollerInterface comptroller_,\n\n                InterestRateModel interestRateModel_,\n\n                uint initialExchangeRateMantissa_,\n\n                string memory name_,\n\n                string memory symbol_,\n\n                uint8 decimals_,\n\n                address payable admin_,\n\n                address implementation_,\n\n                bytes memory becomeImplementationData) public {\n\n        // Creator of the contract is admin during initialization\n\n        admin = msg.sender;\n\n\n\n        // First delegate gets to initialize the delegator (i.e. storage contract)\n\n        delegateTo(implementation_, abi.encodeWithSignature(\"initialize(address,address,address,uint256,string,string,uint8)\",\n\n                                                            underlying_,\n\n                                                            comptroller_,\n\n                                                            interestRateModel_,\n\n                                                            initialExchangeRateMantissa_,\n\n                                                            name_,\n\n                                                            symbol_,\n\n                                                            decimals_));\n\n\n\n        // New implementations always get set via the settor (post-initialize)\n\n        _setImplementation(implementation_, false, becomeImplementationData);\n\n\n\n        // Set the proper admin now that initialization is done\n\n        admin = admin_;\n",
          "message": "Reentrancy in QiErc20Delegator.constructor (QiErc20Delegator.sol#529-557):\n\tExternal calls:\n\t- delegateTo(implementation_,abi.encodeWithSignature(initialize(address,address,address,uint256,string,string,uint8),underlying_,comptroller_,interestRateModel_,initialExchangeRateMantissa_,name_,symbol_,decimals_)) (QiErc20Delegator.sol#543-550)\n\t- _setImplementation(implementation_,false,becomeImplementationData) (QiErc20Delegator.sol#553)\n\tState variables written after the call(s):\n\t- admin (QiErc20Delegator.sol#556)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 935,
          "vulnerability_to_line": 943,
          "vulnerability_code": "    function delegateTo(address callee, bytes memory data) internal returns (bytes memory) {\n\n        (bool success, bytes memory returnData) = callee.delegatecall(data);\n\n        assembly {\n\n            if eq(success, 0) {\n\n                revert(add(returnData, 0x20), returndatasize)\n\n            }\n\n        }\n\n        return returnData;\n",
          "message": "QiErc20Delegator.delegateTo uses assembly (QiErc20Delegator.sol#935-943)\n\t- QiErc20Delegator.sol#937-941\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 962,
          "vulnerability_to_line": 970,
          "vulnerability_code": "    function delegateToViewImplementation(bytes memory data) public view returns (bytes memory) {\n\n        (bool success, bytes memory returnData) = address(this).staticcall(abi.encodeWithSignature(\"delegateToImplementation(bytes)\", data));\n\n        assembly {\n\n            if eq(success, 0) {\n\n                revert(add(returnData, 0x20), returndatasize)\n\n            }\n\n        }\n\n        return abi.decode(returnData, (bytes));\n",
          "message": "QiErc20Delegator.delegateToViewImplementation uses assembly (QiErc20Delegator.sol#962-970)\n\t- QiErc20Delegator.sol#964-968\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 976,
          "vulnerability_to_line": 990,
          "vulnerability_code": "    function () external payable {\n\n        require(msg.value == 0,\"QiErc20Delegator:fallback: cannot send value to fallback\");\n\n\n\n        // delegate all other functions to current implementation\n\n        (bool success, ) = implementation.delegatecall(msg.data);\n\n\n\n        assembly {\n\n            let free_mem_ptr := mload(0x40)\n\n            returndatacopy(free_mem_ptr, 0, returndatasize)\n\n\n\n            switch success\n\n            case 0 { revert(free_mem_ptr, returndatasize) }\n\n            default { return(free_mem_ptr, returndatasize) }\n\n        }\n",
          "message": "QiErc20Delegator.fallback uses assembly (QiErc20Delegator.sol#976-990)\n\t- QiErc20Delegator.sol#982-989\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 445,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address public underlying;\n",
          "message": "QiErc20Storage.underlying should be constant (QiErc20Delegator.sol#445)\nQiTokenStorage._notEntered should be constant (QiErc20Delegator.sol#196)\nQiTokenStorage.accrualBlockTimestamp should be constant (QiErc20Delegator.sol#257)\nQiTokenStorage.borrowIndex should be constant (QiErc20Delegator.sol#262)\nQiTokenStorage.decimals should be constant (QiErc20Delegator.sol#211)\nQiTokenStorage.initialExchangeRateMantissa should be constant (QiErc20Delegator.sol#247)\nQiTokenStorage.name should be constant (QiErc20Delegator.sol#201)\nQiTokenStorage.pendingAdmin should be constant (QiErc20Delegator.sol#232)\nQiTokenStorage.protocolSeizeShareMantissa should be constant (QiErc20Delegator.sol#307)\nQiTokenStorage.reserveFactorMantissa should be constant (QiErc20Delegator.sol#252)\nQiTokenStorage.symbol should be constant (QiErc20Delegator.sol#206)\nQiTokenStorage.totalBorrows should be constant (QiErc20Delegator.sol#267)\nQiTokenStorage.totalReserves should be constant (QiErc20Delegator.sol#272)\nQiTokenStorage.totalSupply should be constant (QiErc20Delegator.sol#277)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 778,
          "vulnerability_to_line": 781,
          "vulnerability_code": "    function borrowBalanceStored(address account) public view returns (uint) {\n\n        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\"borrowBalanceStored(address)\", account));\n\n        return abi.decode(data, (uint));\n",
          "message": "QiErc20Delegator.borrowBalanceStored (QiErc20Delegator.sol#778-781) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 422,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function borrowBalanceStored(address account) public view returns (uint);\n",
          "message": "QiTokenInterface.borrowBalanceStored (QiErc20Delegator.sol#422) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 423,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function exchangeRateCurrent() public returns (uint);\n",
          "message": "QiTokenInterface.exchangeRateCurrent (QiErc20Delegator.sol#423) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 787,
          "vulnerability_to_line": 790,
          "vulnerability_code": "    function exchangeRateCurrent() public returns (uint) {\n\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"exchangeRateCurrent()\"));\n\n        return abi.decode(data, (uint));\n",
          "message": "QiErc20Delegator.exchangeRateCurrent (QiErc20Delegator.sol#787-790) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 797,
          "vulnerability_to_line": 800,
          "vulnerability_code": "    function exchangeRateStored() public view returns (uint) {\n\n        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\"exchangeRateStored()\"));\n\n        return abi.decode(data, (uint));\n",
          "message": "QiErc20Delegator.exchangeRateStored (QiErc20Delegator.sol#797-800) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 424,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function exchangeRateStored() public view returns (uint);\n",
          "message": "QiTokenInterface.exchangeRateStored (QiErc20Delegator.sol#424) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 426,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function accrueInterest() public returns (uint);\n",
          "message": "QiTokenInterface.accrueInterest (QiErc20Delegator.sol#426) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 816,
          "vulnerability_to_line": 819,
          "vulnerability_code": "    function accrueInterest() public returns (uint) {\n\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"accrueInterest()\"));\n\n        return abi.decode(data, (uint));\n",
          "message": "QiErc20Delegator.accrueInterest (QiErc20Delegator.sol#816-819) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 434,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint);\n",
          "message": "QiTokenInterface._setComptroller (QiErc20Delegator.sol#434) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 862,
          "vulnerability_to_line": 865,
          "vulnerability_code": "    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint) {\n\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"_setComptroller(address)\", newComptroller));\n\n        return abi.decode(data, (uint));\n",
          "message": "QiErc20Delegator._setComptroller (QiErc20Delegator.sol#862-865) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 437,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint);\n",
          "message": "QiTokenInterface._setInterestRateModel (QiErc20Delegator.sol#437) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 913,
          "vulnerability_to_line": 916,
          "vulnerability_code": "    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint) {\n\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"_setInterestRateModel(address)\", newInterestRateModel));\n\n        return abi.decode(data, (uint));\n",
          "message": "QiErc20Delegator._setInterestRateModel (QiErc20Delegator.sol#913-916) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 495,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _becomeImplementation(bytes memory data) public;\n",
          "message": "QiDelegateInterface._becomeImplementation (QiErc20Delegator.sol#495) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 500,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _resignImplementation() public;\n",
          "message": "QiDelegateInterface._resignImplementation (QiErc20Delegator.sol#500) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.17;\n",
          "message": "Detected issues with version pragma in QiErc20Delegator.sol:\n\t- pragma solidity^0.5.17 (QiErc20Delegator.sol#4): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 935,
          "vulnerability_to_line": 943,
          "vulnerability_code": "    function delegateTo(address callee, bytes memory data) internal returns (bytes memory) {\n\n        (bool success, bytes memory returnData) = callee.delegatecall(data);\n\n        assembly {\n\n            if eq(success, 0) {\n\n                revert(add(returnData, 0x20), returndatasize)\n\n            }\n\n        }\n\n        return returnData;\n",
          "message": "Low level call in QiErc20Delegator.delegateTo (QiErc20Delegator.sol#935-943):\n\t-(success,returnData) = callee.delegatecall(data) QiErc20Delegator.sol#936\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 962,
          "vulnerability_to_line": 970,
          "vulnerability_code": "    function delegateToViewImplementation(bytes memory data) public view returns (bytes memory) {\n\n        (bool success, bytes memory returnData) = address(this).staticcall(abi.encodeWithSignature(\"delegateToImplementation(bytes)\", data));\n\n        assembly {\n\n            if eq(success, 0) {\n\n                revert(add(returnData, 0x20), returndatasize)\n\n            }\n\n        }\n\n        return abi.decode(returnData, (bytes));\n",
          "message": "Low level call in QiErc20Delegator.delegateToViewImplementation (QiErc20Delegator.sol#962-970):\n\t-(success,returnData) = address(this).staticcall(abi.encodeWithSignature(delegateToImplementation(bytes),data)) QiErc20Delegator.sol#963\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 976,
          "vulnerability_to_line": 990,
          "vulnerability_code": "    function () external payable {\n\n        require(msg.value == 0,\"QiErc20Delegator:fallback: cannot send value to fallback\");\n\n\n\n        // delegate all other functions to current implementation\n\n        (bool success, ) = implementation.delegatecall(msg.data);\n\n\n\n        assembly {\n\n            let free_mem_ptr := mload(0x40)\n\n            returndatacopy(free_mem_ptr, 0, returndatasize)\n\n\n\n            switch success\n\n            case 0 { revert(free_mem_ptr, returndatasize) }\n\n            default { return(free_mem_ptr, returndatasize) }\n\n        }\n",
          "message": "Low level call in QiErc20Delegator.fallback (QiErc20Delegator.sol#976-990):\n\t-(success) = implementation.delegatecall(msg.data) QiErc20Delegator.sol#980\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool public constant isComptroller = true;\n",
          "message": "Constant 'ComptrollerInterface.isComptroller' (QiErc20Delegator.sol#8) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool public constant isInterestRateModel = true;\n",
          "message": "Constant 'InterestRateModel.isInterestRateModel' (QiErc20Delegator.sol#88) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 196,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool internal _notEntered;\n",
          "message": "Variable 'QiTokenStorage._notEntered' (QiErc20Delegator.sol#196) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint internal constant borrowRateMaxMantissa = 0.0005e16;\n",
          "message": "Constant 'QiTokenStorage.borrowRateMaxMantissa' (QiErc20Delegator.sol#217) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 222,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint internal constant reserveFactorMaxMantissa = 1e18;\n",
          "message": "Constant 'QiTokenStorage.reserveFactorMaxMantissa' (QiErc20Delegator.sol#222) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 432,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\n",
          "message": "Function 'QiTokenInterface._setPendingAdmin' (QiErc20Delegator.sol#432) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 433,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _acceptAdmin() external returns (uint);\n",
          "message": "Function 'QiTokenInterface._acceptAdmin' (QiErc20Delegator.sol#433) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 434,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint);\n",
          "message": "Function 'QiTokenInterface._setComptroller' (QiErc20Delegator.sol#434) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 435,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint);\n",
          "message": "Function 'QiTokenInterface._setReserveFactor' (QiErc20Delegator.sol#435) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 436,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _reduceReserves(uint reduceAmount) external returns (uint);\n",
          "message": "Function 'QiTokenInterface._reduceReserves' (QiErc20Delegator.sol#436) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 437,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint);\n",
          "message": "Function 'QiTokenInterface._setInterestRateModel' (QiErc20Delegator.sol#437) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 438,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setProtocolSeizeShare(uint newProtocolSeizeShareMantissa) external returns (uint);\n",
          "message": "Function 'QiTokenInterface._setProtocolSeizeShare' (QiErc20Delegator.sol#438) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 315,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool public constant isQiToken = true;\n",
          "message": "Constant 'QiTokenInterface.isQiToken' (QiErc20Delegator.sol#315) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 464,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _addReserves(uint addAmount) external returns (uint);\n",
          "message": "Function 'QiErc20Interface._addReserves' (QiErc20Delegator.sol#464) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 486,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) public;\n",
          "message": "Function 'QiDelegatorInterface._setImplementation' (QiErc20Delegator.sol#486) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 495,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _becomeImplementation(bytes memory data) public;\n",
          "message": "Function 'QiDelegateInterface._becomeImplementation' (QiErc20Delegator.sol#495) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 500,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _resignImplementation() public;\n",
          "message": "Function 'QiDelegateInterface._resignImplementation' (QiErc20Delegator.sol#500) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 852,
          "vulnerability_to_line": 855,
          "vulnerability_code": "    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint) {\n\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"_setPendingAdmin(address)\", newPendingAdmin));\n\n        return abi.decode(data, (uint));\n",
          "message": "Function 'QiErc20Delegator._setPendingAdmin' (QiErc20Delegator.sol#852-855) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 882,
          "vulnerability_to_line": 885,
          "vulnerability_code": "    function _acceptAdmin() external returns (uint) {\n\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"_acceptAdmin()\"));\n\n        return abi.decode(data, (uint));\n",
          "message": "Function 'QiErc20Delegator._acceptAdmin' (QiErc20Delegator.sol#882-885) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 862,
          "vulnerability_to_line": 865,
          "vulnerability_code": "    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint) {\n\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"_setComptroller(address)\", newComptroller));\n\n        return abi.decode(data, (uint));\n",
          "message": "Function 'QiErc20Delegator._setComptroller' (QiErc20Delegator.sol#862-865) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 872,
          "vulnerability_to_line": 875,
          "vulnerability_code": "    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint) {\n\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"_setReserveFactor(uint256)\", newReserveFactorMantissa));\n\n        return abi.decode(data, (uint));\n",
          "message": "Function 'QiErc20Delegator._setReserveFactor' (QiErc20Delegator.sol#872-875) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 902,
          "vulnerability_to_line": 905,
          "vulnerability_code": "    function _reduceReserves(uint reduceAmount) external returns (uint) {\n\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"_reduceReserves(uint256)\", reduceAmount));\n\n        return abi.decode(data, (uint));\n",
          "message": "Function 'QiErc20Delegator._reduceReserves' (QiErc20Delegator.sol#902-905) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 913,
          "vulnerability_to_line": 916,
          "vulnerability_code": "    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint) {\n\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"_setInterestRateModel(address)\", newInterestRateModel));\n\n        return abi.decode(data, (uint));\n",
          "message": "Function 'QiErc20Delegator._setInterestRateModel' (QiErc20Delegator.sol#913-916) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 923,
          "vulnerability_to_line": 926,
          "vulnerability_code": "    function _setProtocolSeizeShare(uint newProtocolSeizeShareMantissa) external returns (uint) {\n\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"_setProtocolSeizeShare(uint256)\", newProtocolSeizeShareMantissa));\n\n        return abi.decode(data, (uint));\n",
          "message": "Function 'QiErc20Delegator._setProtocolSeizeShare' (QiErc20Delegator.sol#923-926) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 892,
          "vulnerability_to_line": 895,
          "vulnerability_code": "    function _addReserves(uint addAmount) external returns (uint) {\n\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"_addReserves(uint256)\", addAmount));\n\n        return abi.decode(data, (uint));\n",
          "message": "Function 'QiErc20Delegator._addReserves' (QiErc20Delegator.sol#892-895) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 565,
          "vulnerability_to_line": 578,
          "vulnerability_code": "    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) public {\n\n        require(msg.sender == admin, \"QiErc20Delegator::_setImplementation: Caller must be admin\");\n\n\n\n        if (allowResign) {\n\n            delegateToImplementation(abi.encodeWithSignature(\"_resignImplementation()\"));\n\n        }\n\n\n\n        address oldImplementation = implementation;\n\n        implementation = implementation_;\n\n\n\n        delegateToImplementation(abi.encodeWithSignature(\"_becomeImplementation(bytes)\", becomeImplementationData));\n\n\n\n        emit NewImplementation(oldImplementation, implementation);\n",
          "message": "Function 'QiErc20Delegator._setImplementation' (QiErc20Delegator.sol#565-578) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 196,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool internal _notEntered;\n",
          "message": "QiTokenStorage._notEntered (QiErc20Delegator.sol#196) is never used in QiErc20Delegator\nQiTokenStorage.borrowRateMaxMantissa (QiErc20Delegator.sol#217) is never used in QiErc20Delegator\nQiTokenStorage.reserveFactorMaxMantissa (QiErc20Delegator.sol#222) is never used in QiErc20Delegator\nQiTokenStorage.initialExchangeRateMantissa (QiErc20Delegator.sol#247) is never used in QiErc20Delegator\nQiTokenStorage.accountTokens (QiErc20Delegator.sol#282) is never used in QiErc20Delegator\nQiTokenStorage.transferAllowances (QiErc20Delegator.sol#287) is never used in QiErc20Delegator\nQiTokenStorage.accountBorrows (QiErc20Delegator.sol#302) is never used in QiErc20Delegator\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 311,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract QiTokenInterface is QiTokenStorage {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 515,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract QiErc20Delegator is QiTokenInterface, QiErc20Interface, QiDelegatorInterface {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.17;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint repayAmount) external view returns (uint, uint);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 417,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 432,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 529,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address underlying_,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 432,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 536,
          "vulnerability_to_line": null,
          "vulnerability_code": "                address payable admin_,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 537,
          "vulnerability_to_line": null,
          "vulnerability_code": "                address implementation_,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 538,
          "vulnerability_to_line": null,
          "vulnerability_code": "                bytes memory becomeImplementationData) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 540,
          "vulnerability_to_line": null,
          "vulnerability_code": "        admin = msg.sender;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 540,
          "vulnerability_to_line": null,
          "vulnerability_code": "        admin = msg.sender;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 543,
          "vulnerability_to_line": null,
          "vulnerability_code": "        delegateTo(implementation_, abi.encodeWithSignature(\"initialize(address,address,address,uint256,string,string,uint8)\",\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 543,
          "vulnerability_to_line": null,
          "vulnerability_code": "        delegateTo(implementation_, abi.encodeWithSignature(\"initialize(address,address,address,uint256,string,string,uint8)\",\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 543,
          "vulnerability_to_line": null,
          "vulnerability_code": "        delegateTo(implementation_, abi.encodeWithSignature(\"initialize(address,address,address,uint256,string,string,uint8)\",\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 545,
          "vulnerability_to_line": null,
          "vulnerability_code": "                                                            comptroller_,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 547,
          "vulnerability_to_line": null,
          "vulnerability_code": "                                                            initialExchangeRateMantissa_,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 549,
          "vulnerability_to_line": null,
          "vulnerability_code": "                                                            symbol_,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 553,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _setImplementation(implementation_, false, becomeImplementationData);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 553,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _setImplementation(implementation_, false, becomeImplementationData);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 556,
          "vulnerability_to_line": null,
          "vulnerability_code": "        admin = admin_;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}