{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_5"
      ],
      "vulnerability_findings": [
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address owner, address spender) external view returns (uint256);\n",
          "message": "ISaddleD4_LP.allowance.owner (local variable @ ISaddleD4_LP.sol#7) shadows:\n\t- ISaddleD4_LP.owner (function @ ISaddleD4_LP.sol#18)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function initialize(string memory name, string memory symbol) external returns (bool);\n",
          "message": "ISaddleD4_LP.initialize.name (local variable @ ISaddleD4_LP.sol#15) shadows:\n\t- ISaddleD4_LP.name (function @ ISaddleD4_LP.sol#17)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function initialize(string memory name, string memory symbol) external returns (bool);\n",
          "message": "ISaddleD4_LP.initialize.symbol (local variable @ ISaddleD4_LP.sol#15) shadows:\n\t- ISaddleD4_LP.symbol (function @ ISaddleD4_LP.sol#20)\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.6.11;\n",
          "message": "Detected issues with version pragma in ISaddleD4_LP.sol:\n\t- pragma solidity>=0.6.11 (ISaddleD4_LP.sol#4): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": 25,
          "vulnerability_code": "interface ISaddleD4_LP {\n\n  function allowance(address owner, address spender) external view returns (uint256);\n\n  function approve(address spender, uint256 amount) external returns (bool);\n\n  function balanceOf(address account) external view returns (uint256);\n\n  function burn(uint256 amount) external;\n\n  function burnFrom(address account, uint256 amount) external;\n\n  function decimals() external view returns (uint8);\n\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\n\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\n\n  function initialize(string memory name, string memory symbol) external returns (bool);\n\n  function mint(address recipient, uint256 amount) external;\n\n  function name() external view returns (string memory);\n\n  function owner() external view returns (address);\n\n  function renounceOwnership() external;\n\n  function symbol() external view returns (string memory);\n\n  function totalSupply() external view returns (uint256);\n\n  function transfer(address recipient, uint256 amount) external returns (bool);\n\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n  function transferOwnership(address newOwner) external;\n",
          "message": "Contract 'ISaddleD4_LP' (ISaddleD4_LP.sol#6-25) is not in CapWords\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.6.11;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "execution failed"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "input files do not contain any valid contracts"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}