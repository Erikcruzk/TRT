{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_17"
      ],
      "vulnerability_findings": [
        {
          "name": "solc-version",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.6.11;\n",
          "message": "Detected issues with version pragma in IFraxGaugeFXSRewardsDistributor.sol:\n\t- pragma solidity>=0.6.11 (IFraxGaugeFXSRewardsDistributor.sol#4): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function curator_address() external view returns(address);\n",
          "message": "Function 'IFraxGaugeFXSRewardsDistributor.curator_address' (IFraxGaugeFXSRewardsDistributor.sol#8) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function currentReward(address gauge_address) external view returns(uint256 reward_amount);\n",
          "message": "Parameter 'gauge_address' of IFraxGaugeFXSRewardsDistributor.currentReward (IFraxGaugeFXSRewardsDistributor.sol#9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function distributeReward(address gauge_address) external returns(uint256 weeks_elapsed, uint256 reward_tally);\n",
          "message": "Parameter 'gauge_address' of IFraxGaugeFXSRewardsDistributor.distributeReward (IFraxGaugeFXSRewardsDistributor.sol#10) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function gauge_whitelist(address) external view returns(bool);\n",
          "message": "Function 'IFraxGaugeFXSRewardsDistributor.gauge_whitelist' (IFraxGaugeFXSRewardsDistributor.sol#12) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function gauge_whitelist(address) external view returns(bool);\n",
          "message": "Parameter '' of IFraxGaugeFXSRewardsDistributor.gauge_whitelist (IFraxGaugeFXSRewardsDistributor.sol#12) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function is_middleman(address) external view returns(bool);\n",
          "message": "Function 'IFraxGaugeFXSRewardsDistributor.is_middleman' (IFraxGaugeFXSRewardsDistributor.sol#13) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function is_middleman(address) external view returns(bool);\n",
          "message": "Parameter '' of IFraxGaugeFXSRewardsDistributor.is_middleman (IFraxGaugeFXSRewardsDistributor.sol#13) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function last_time_gauge_paid(address) external view returns(uint256);\n",
          "message": "Function 'IFraxGaugeFXSRewardsDistributor.last_time_gauge_paid' (IFraxGaugeFXSRewardsDistributor.sol#14) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function last_time_gauge_paid(address) external view returns(uint256);\n",
          "message": "Parameter '' of IFraxGaugeFXSRewardsDistributor.last_time_gauge_paid (IFraxGaugeFXSRewardsDistributor.sol#14) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setCurator(address _new_curator_address) external;\n",
          "message": "Parameter '_new_curator_address' of IFraxGaugeFXSRewardsDistributor.setCurator (IFraxGaugeFXSRewardsDistributor.sol#19) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setGaugeController(address _gauge_controller_address) external;\n",
          "message": "Parameter '_gauge_controller_address' of IFraxGaugeFXSRewardsDistributor.setGaugeController (IFraxGaugeFXSRewardsDistributor.sol#20) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setGaugeState(address _gauge_address, bool _is_middleman, bool _is_active) external;\n",
          "message": "Parameter '_gauge_address' of IFraxGaugeFXSRewardsDistributor.setGaugeState (IFraxGaugeFXSRewardsDistributor.sol#21) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setGaugeState(address _gauge_address, bool _is_middleman, bool _is_active) external;\n",
          "message": "Parameter '_is_middleman' of IFraxGaugeFXSRewardsDistributor.setGaugeState (IFraxGaugeFXSRewardsDistributor.sol#21) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setGaugeState(address _gauge_address, bool _is_middleman, bool _is_active) external;\n",
          "message": "Parameter '_is_active' of IFraxGaugeFXSRewardsDistributor.setGaugeState (IFraxGaugeFXSRewardsDistributor.sol#21) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setTimelock(address _new_timelock) external;\n",
          "message": "Parameter '_new_timelock' of IFraxGaugeFXSRewardsDistributor.setTimelock (IFraxGaugeFXSRewardsDistributor.sol#22) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function timelock_address() external view returns(address);\n",
          "message": "Function 'IFraxGaugeFXSRewardsDistributor.timelock_address' (IFraxGaugeFXSRewardsDistributor.sol#23) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.6.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function distributeReward(address gauge_address) external returns(uint256 weeks_elapsed, uint256 reward_tally);\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "execution failed"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "input files do not contain any valid contracts"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}