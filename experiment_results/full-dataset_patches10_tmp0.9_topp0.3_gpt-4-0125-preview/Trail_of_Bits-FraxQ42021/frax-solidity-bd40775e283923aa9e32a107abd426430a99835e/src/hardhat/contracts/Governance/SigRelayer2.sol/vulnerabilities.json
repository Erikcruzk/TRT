{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tfor (uint i = 0; i < s1.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tfor (uint i = 0; i < s2.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tfor (uint i = 0; i < s1.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tfor (uint i = 0; i < s2.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tconstructor (address governorBravo_, address compToken_) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tgovernorBravo = governorBravo_;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tcompToken = compToken_;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\towner = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t}\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t\tcompToken.call(abi.encodeWithSignature(\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\", sig.delegatee, sig.nonce, sig.expiry, sig.v, sig.r, sig.s));\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t\tgovernorBravo.call(abi.encodeWithSignature(\"castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)\", sig.proposalId,sig.support,sig.v,sig.r,sig.s));\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t\tcompToken.call(abi.encodeWithSignature(\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\", sig.delegatee, sig.nonce, sig.expiry, sig.v, sig.r, sig.s));\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t\tgovernorBravo.call(abi.encodeWithSignature(\"castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)\", sig.proposalId,sig.support,sig.v,sig.r,sig.s));\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tfor (uint i = 0; i < s1.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tfor (uint i = 0; i < s2.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tfor (uint i = 0; i < s1.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tfor (uint i = 0; i < s2.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t    require(signatory != address(0), \"invalid signature\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t    require(now <= expiry, \"signature expired\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t    require(signatory != address(0), \"invalid signature\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tfor (uint i = 0; i < s1.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tfor (uint i = 0; i < s2.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tfor (uint i = 0; i < s1.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tfor (uint i = 0; i < s2.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_17"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": 109,
          "vulnerability_code": "  \tfunction getChainId() internal pure returns (uint) {\n\n        uint256 chainId;\n\n        assembly { chainId := chainid() }\n\n        return chainId;\n",
          "message": "SigRelayer2.getChainId (SigRelayer2.sol#105-109) is declared view but contains assembly code\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": 23,
          "vulnerability_code": "\tmodifier discountGST2 {\n\n\t\tuint256 gasStart = gasleft();\n\n\t\t_;\n\n\t\tuint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\n\n\t\tuint gas_left = gasleft();\n\n\t\tuint maxtokens = (gas_left - 27710) / 7020;\n\n\t\tuint tokens = (gasSpent + 14154) / 41130;\n\n\t\tif(tokens > maxtokens) tokens = maxtokens;\n\n\t\tGasToken(0x0000000000b3F879cb30FE243b4Dfee438691c04).freeFromUpTo(msg.sender, tokens);\n",
          "message": "SigRelayer2.discountGST2 (SigRelayer2.sol#14-23) does not use the value returned by external calls:\n\t-GasToken(0x0000000000b3F879cb30FE243b4Dfee438691c04).freeFromUpTo(msg.sender,tokens) (SigRelayer2.sol#22)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t\tgovernorBravo.call(abi.encodeWithSignature(\"castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)\", sig.proposalId,sig.support,sig.v,sig.r,sig.s));\n",
          "message": "SigRelayer2.relayBySigsGST has external calls inside a loop:\n\t- governorBravo.call(abi.encodeWithSignature(castVoteBySig(uint256,uint8,uint8,bytes32,bytes32),sig_scope_1.proposalId,sig_scope_1.support,sig_scope_1.v,sig_scope_1.r,sig_scope_1.s)) (SigRelayer2.sol#54)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t\tcompToken.call(abi.encodeWithSignature(\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\", sig.delegatee, sig.nonce, sig.expiry, sig.v, sig.r, sig.s));\n",
          "message": "SigRelayer2.relayBySigsGST has external calls inside a loop:\n\t- compToken.call(abi.encodeWithSignature(delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32),sig.delegatee,sig.nonce,sig.expiry,sig.v,sig.r,sig.s)) (SigRelayer2.sol#50)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t\tgovernorBravo.call(abi.encodeWithSignature(\"castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)\", sig.proposalId,sig.support,sig.v,sig.r,sig.s));\n",
          "message": "SigRelayer2.relayBySigs has external calls inside a loop:\n\t- governorBravo.call(abi.encodeWithSignature(castVoteBySig(uint256,uint8,uint8,bytes32,bytes32),sig_scope_1.proposalId,sig_scope_1.support,sig_scope_1.v,sig_scope_1.r,sig_scope_1.s)) (SigRelayer2.sol#65)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t\tcompToken.call(abi.encodeWithSignature(\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\", sig.delegatee, sig.nonce, sig.expiry, sig.v, sig.r, sig.s));\n",
          "message": "SigRelayer2.relayBySigs has external calls inside a loop:\n\t- compToken.call(abi.encodeWithSignature(delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32),sig.delegatee,sig.nonce,sig.expiry,sig.v,sig.r,sig.s)) (SigRelayer2.sol#61)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": 109,
          "vulnerability_code": "  \tfunction getChainId() internal pure returns (uint) {\n\n        uint256 chainId;\n\n        assembly { chainId := chainid() }\n\n        return chainId;\n",
          "message": "SigRelayer2.getChainId uses assembly (SigRelayer2.sol#105-109)\n\t- SigRelayer2.sol#107\n"
        },
        {
          "name": "pragma",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.11;\n",
          "message": "Different versions of Solidity is used in SigRelayer2.sol:\n\t- Version used: ['ABIEncoderV2', '^0.6.11']\n\t- SigRelayer2.sol#7 declares pragma solidity^0.6.11\n\t- SigRelayer2.sol#8 declares pragma experimentalABIEncoderV2\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": 44,
          "vulnerability_code": "\tfunction setGovernorBravo(address governorBravo_) public  {\n\n\t\trequire(msg.sender == owner);\n\n\t\tgovernorBravo = governorBravo_;\n",
          "message": "SigRelayer2.setGovernorBravo (SigRelayer2.sol#41-44) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": 56,
          "vulnerability_code": "\tfunction relayBySigsGST(DelegationSig[] memory s1, VoteSig[] memory s2) public discountGST2 {\n\n\t\tfor (uint i = 0; i < s1.length; i++) {\n\n\t\t\tDelegationSig memory sig = s1[i];\n\n\t\t\tcompToken.call(abi.encodeWithSignature(\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\", sig.delegatee, sig.nonce, sig.expiry, sig.v, sig.r, sig.s));\n\n\t\t}\n\n\t\tfor (uint i = 0; i < s2.length; i++) {\n\n\t\t\tVoteSig memory sig = s2[i];\n\n\t\t\tgovernorBravo.call(abi.encodeWithSignature(\"castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)\", sig.proposalId,sig.support,sig.v,sig.r,sig.s));\n\n\t\t}\n",
          "message": "SigRelayer2.relayBySigsGST (SigRelayer2.sol#47-56) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": 67,
          "vulnerability_code": "\tfunction relayBySigs(DelegationSig[] memory s1, VoteSig[] memory s2) public {\n\n\t\tfor (uint i = 0; i < s1.length; i++) {\n\n\t\t\tDelegationSig memory sig = s1[i];\n\n\t\t\tcompToken.call(abi.encodeWithSignature(\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\", sig.delegatee, sig.nonce, sig.expiry, sig.v, sig.r, sig.s));\n\n\t\t}\n\n\t\tfor (uint i = 0; i < s2.length; i++) {\n\n\t\t\tVoteSig memory sig = s2[i];\n\n\t\t\tgovernorBravo.call(abi.encodeWithSignature(\"castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)\", sig.proposalId,sig.support,sig.v,sig.r,sig.s));\n\n\t\t}\n",
          "message": "SigRelayer2.relayBySigs (SigRelayer2.sol#58-67) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": 77,
          "vulnerability_code": "\tfunction signatoryFromDelegateSig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public view returns (address) {\n\n\t    bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), compToken));\n\n\t    bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\n\n\t    bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n\n\t    address signatory = ecrecover(digest, v, r, s);\n\n\t    require(signatory != address(0), \"invalid signature\");\n\n\t    require(now <= expiry, \"signature expired\");\n\n\t    return signatory;\n",
          "message": "SigRelayer2.signatoryFromDelegateSig (SigRelayer2.sol#69-77) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 79,
          "vulnerability_to_line": 86,
          "vulnerability_code": "\tfunction signatoryFromVoteSig(uint proposalId, uint8 support, uint8 v, bytes32 r, bytes32 s) public view returns (address) {\n\n\t    bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name2)), getChainId(), governorBravo));\n\n\t    bytes32 structHash = keccak256(abi.encode(BALLOT_TYPEHASH, proposalId, support));\n\n\t    bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n\n\t    address signatory = ecrecover(digest, v, r, s);\n\n\t    require(signatory != address(0), \"invalid signature\");\n\n\t    return signatory;\n",
          "message": "SigRelayer2.signatoryFromVoteSig (SigRelayer2.sol#79-86) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.11;\n",
          "message": "Detected issues with version pragma in SigRelayer2.sol:\n\t- pragma solidity^0.6.11 (SigRelayer2.sol#7): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": 56,
          "vulnerability_code": "\tfunction relayBySigsGST(DelegationSig[] memory s1, VoteSig[] memory s2) public discountGST2 {\n\n\t\tfor (uint i = 0; i < s1.length; i++) {\n\n\t\t\tDelegationSig memory sig = s1[i];\n\n\t\t\tcompToken.call(abi.encodeWithSignature(\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\", sig.delegatee, sig.nonce, sig.expiry, sig.v, sig.r, sig.s));\n\n\t\t}\n\n\t\tfor (uint i = 0; i < s2.length; i++) {\n\n\t\t\tVoteSig memory sig = s2[i];\n\n\t\t\tgovernorBravo.call(abi.encodeWithSignature(\"castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)\", sig.proposalId,sig.support,sig.v,sig.r,sig.s));\n\n\t\t}\n",
          "message": "Low level call in SigRelayer2.relayBySigsGST (SigRelayer2.sol#47-56):\n\t-compToken.call(abi.encodeWithSignature(delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32),sig.delegatee,sig.nonce,sig.expiry,sig.v,sig.r,sig.s)) SigRelayer2.sol#50\n\t-governorBravo.call(abi.encodeWithSignature(castVoteBySig(uint256,uint8,uint8,bytes32,bytes32),sig_scope_1.proposalId,sig_scope_1.support,sig_scope_1.v,sig_scope_1.r,sig_scope_1.s)) SigRelayer2.sol#54\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": 67,
          "vulnerability_code": "\tfunction relayBySigs(DelegationSig[] memory s1, VoteSig[] memory s2) public {\n\n\t\tfor (uint i = 0; i < s1.length; i++) {\n\n\t\t\tDelegationSig memory sig = s1[i];\n\n\t\t\tcompToken.call(abi.encodeWithSignature(\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\", sig.delegatee, sig.nonce, sig.expiry, sig.v, sig.r, sig.s));\n\n\t\t}\n\n\t\tfor (uint i = 0; i < s2.length; i++) {\n\n\t\t\tVoteSig memory sig = s2[i];\n\n\t\t\tgovernorBravo.call(abi.encodeWithSignature(\"castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)\", sig.proposalId,sig.support,sig.v,sig.r,sig.s));\n\n\t\t}\n",
          "message": "Low level call in SigRelayer2.relayBySigs (SigRelayer2.sol#58-67):\n\t-compToken.call(abi.encodeWithSignature(delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32),sig.delegatee,sig.nonce,sig.expiry,sig.v,sig.r,sig.s)) SigRelayer2.sol#61\n\t-governorBravo.call(abi.encodeWithSignature(castVoteBySig(uint256,uint8,uint8,bytes32,bytes32),sig_scope_1.proposalId,sig_scope_1.support,sig_scope_1.v,sig_scope_1.r,sig_scope_1.s)) SigRelayer2.sol#65\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tstring public constant name2 = \"Compound Governor Bravo\";\n",
          "message": "Constant 'SigRelayer2.name2' (SigRelayer2.sol#29) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tGasToken(0x0000000000b3F879cb30FE243b4Dfee438691c04).freeFromUpTo(msg.sender, tokens);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tfor (uint i = 0; i < s1.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tfor (uint i = 0; i < s2.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tfor (uint i = 0; i < s1.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tfor (uint i = 0; i < s2.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tfor (uint i = 0; i < s1.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tfor (uint i = 0; i < s2.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tfor (uint i = 0; i < s1.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tfor (uint i = 0; i < s2.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction setGovernorBravo(address governorBravo_) public  {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "  \tfunction getChainId() internal pure returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t\tcompToken.call(abi.encodeWithSignature(\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\", sig.delegatee, sig.nonce, sig.expiry, sig.v, sig.r, sig.s));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t\tgovernorBravo.call(abi.encodeWithSignature(\"castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)\", sig.proposalId,sig.support,sig.v,sig.r,sig.s));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t\tcompToken.call(abi.encodeWithSignature(\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\", sig.delegatee, sig.nonce, sig.expiry, sig.v, sig.r, sig.s));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t\tgovernorBravo.call(abi.encodeWithSignature(\"castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)\", sig.proposalId,sig.support,sig.v,sig.r,sig.s));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly { chainId := chainid() }\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}