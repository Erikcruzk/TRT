{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _txns.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _txns.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < n_txns; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _txns.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _txns.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < n_txns; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_15"
      ],
      "vulnerability_findings": [
        {
          "name": "calls-loop",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "      (bool success, bytes memory resp) = _txns[i].dest.call(_txns[i].data);\n",
          "message": "TxnAggregator.executeTxns has external calls inside a loop:\n\t- (success,resp) = _txns[i].dest.call(_txns[i].data) (TxnAggregator.sol#36)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "      (bool success, bytes memory resp) = _contract.call(_txns[i]);\n",
          "message": "TxnAggregator.singleContract_executeTxns has external calls inside a loop:\n\t- (success,resp) = _contract.call(_txns[i]) (TxnAggregator.sol#57)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "      (success, responses[i]) = _txns[i].dest.staticcall(_txns[i].data);\n",
          "message": "TxnAggregator.viewTxns has external calls inside a loop:\n\t- (success,responses[i]) = _txns[i].dest.staticcall(_txns[i].data) (TxnAggregator.sol#85)\n"
        },
        {
          "name": "pragma",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": "Different versions of Solidity is used in TxnAggregator.sol:\n\t- Version used: ['ABIEncoderV2', '^0.5.16']\n\t- TxnAggregator.sol#3 declares pragma solidity^0.5.16\n\t- TxnAggregator.sol#4 declares pragma experimentalABIEncoderV2\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": "Detected issues with version pragma in TxnAggregator.sol:\n\t- pragma solidity^0.5.16 (TxnAggregator.sol#3): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": 46,
          "vulnerability_code": "  function executeTxns(ContractCall[] calldata _txns, bool _revert) external {\n\n    // Execute all txns\n\n    for (uint256 i = 0; i < _txns.length; i++) {\n\n      (bool success, bytes memory resp) = _txns[i].dest.call(_txns[i].data);\n\n      if (!success) {\n\n        // Will either revert on error or log it\n\n        if (_revert) {\n\n          revert(string(resp));\n\n        } else {\n\n          emit Error(i, resp);\n\n        }\n\n      }\n\n    }\n",
          "message": "Low level call in TxnAggregator.executeTxns (TxnAggregator.sol#33-46):\n\t-(success,resp) = _txns[i].dest.call(_txns[i].data) TxnAggregator.sol#36\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": 67,
          "vulnerability_code": "  function singleContract_executeTxns(address _contract, bytes[] calldata _txns, bool _revert) external {\n\n    // Execute all txns\n\n    for (uint256 i = 0; i < _txns.length; i++) {\n\n      (bool success, bytes memory resp) = _contract.call(_txns[i]);\n\n      if (!success) {\n\n        // Will either revert on error or log it\n\n        if (_revert) {\n\n          revert(string(resp));\n\n        } else {\n\n          emit Error(i, resp);\n\n        }\n\n      }\n\n    }\n",
          "message": "Low level call in TxnAggregator.singleContract_executeTxns (TxnAggregator.sol#54-67):\n\t-(success,resp) = _contract.call(_txns[i]) TxnAggregator.sol#57\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": 87,
          "vulnerability_code": "  function viewTxns(ContractCall[] calldata _txns) external view returns (bytes[] memory) {\n\n    // Declaration\n\n    bool success;\n\n    uint256 n_txns = _txns.length;\n\n    bytes[] memory responses = new bytes[](n_txns);\n\n\n\n    // Execute all txns\n\n    for (uint256 i = 0; i < n_txns; i++) {\n\n      (success, responses[i]) = _txns[i].dest.staticcall(_txns[i].data);\n\n    }\n",
          "message": "Low level call in TxnAggregator.viewTxns (TxnAggregator.sol#77-87):\n\t-(success,responses[i]) = _txns[i].dest.staticcall(_txns[i].data) TxnAggregator.sol#85\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function executeTxns(ContractCall[] calldata _txns, bool _revert) external {\n",
          "message": "Parameter '_txns' of TxnAggregator.executeTxns (TxnAggregator.sol#33) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function executeTxns(ContractCall[] calldata _txns, bool _revert) external {\n",
          "message": "Parameter '_revert' of TxnAggregator.executeTxns (TxnAggregator.sol#33) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": 67,
          "vulnerability_code": "  function singleContract_executeTxns(address _contract, bytes[] calldata _txns, bool _revert) external {\n\n    // Execute all txns\n\n    for (uint256 i = 0; i < _txns.length; i++) {\n\n      (bool success, bytes memory resp) = _contract.call(_txns[i]);\n\n      if (!success) {\n\n        // Will either revert on error or log it\n\n        if (_revert) {\n\n          revert(string(resp));\n\n        } else {\n\n          emit Error(i, resp);\n\n        }\n\n      }\n\n    }\n",
          "message": "Function 'TxnAggregator.singleContract_executeTxns' (TxnAggregator.sol#54-67) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function singleContract_executeTxns(address _contract, bytes[] calldata _txns, bool _revert) external {\n",
          "message": "Parameter '_contract' of TxnAggregator.singleContract_executeTxns (TxnAggregator.sol#54) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function singleContract_executeTxns(address _contract, bytes[] calldata _txns, bool _revert) external {\n",
          "message": "Parameter '_txns' of TxnAggregator.singleContract_executeTxns (TxnAggregator.sol#54) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function singleContract_executeTxns(address _contract, bytes[] calldata _txns, bool _revert) external {\n",
          "message": "Parameter '_revert' of TxnAggregator.singleContract_executeTxns (TxnAggregator.sol#54) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function viewTxns(ContractCall[] calldata _txns) external view returns (bytes[] memory) {\n",
          "message": "Parameter '_txns' of TxnAggregator.viewTxns (TxnAggregator.sol#77) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _txns.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _txns.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "      (bool success, bytes memory resp) = _txns[i].dest.call(_txns[i].data);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "      (bool success, bytes memory resp) = _contract.call(_txns[i]);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function singleContract_executeTxns(address _contract, bytes[] calldata _txns, bool _revert) external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function singleContract_executeTxns(address _contract, bytes[] calldata _txns, bool _revert) external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function singleContract_executeTxns(address _contract, bytes[] calldata _txns, bool _revert) external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _txns.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _txns.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _txns.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "      (bool success, bytes memory resp) = _contract.call(_txns[i]);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "      (bool success, bytes memory resp) = _contract.call(_txns[i]);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "      if (!success) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (_revert) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "          revert(string(resp));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "          revert(string(resp));\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "Traceback (most recent call last):\n  File \"/usr/local/lib/python3"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}