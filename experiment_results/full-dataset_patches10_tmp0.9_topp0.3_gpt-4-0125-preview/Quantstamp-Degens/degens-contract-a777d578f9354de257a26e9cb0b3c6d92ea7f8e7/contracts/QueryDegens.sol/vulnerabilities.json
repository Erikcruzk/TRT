{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < orders.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < accounts.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint j = 0; j < tokens.length; j++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < orders.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < accounts.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint j = 0; j < tokens.length; j++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < orders.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < accounts.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint j = 0; j < tokens.length; j++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_10"
      ],
      "vulnerability_findings": [
        {
          "name": "calls-loop",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "            (available[i], filled[i]) = degens.testOrder(orders[i]);\n",
          "message": "QueryDegens.testOrderBatch has external calls inside a loop:\n\t- (available[i],filled[i]) = degens.testOrder(orders[i]) (QueryDegens.sol#24)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "                output[curr++] = IERC20Token(tokens[j]).balanceOf(accounts[i]);\n",
          "message": "QueryDegens.tokenBalancesAndApprovals has external calls inside a loop:\n\t- output[curr ++] = IERC20Token(tokens[j]).balanceOf(accounts[i]) (QueryDegens.sol#36)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "                output[curr++] = IERC20Token(tokens[j]).allowance(accounts[i], degensAddress);\n",
          "message": "QueryDegens.tokenBalancesAndApprovals has external calls inside a loop:\n\t- output[curr ++] = IERC20Token(tokens[j]).allowance(accounts[i],degensAddress) (QueryDegens.sol#37)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address tokenOwner) public view returns (uint balance);\n",
          "message": "IERC20Token.balanceOf (QueryDegens.sol#6) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n",
          "message": "IERC20Token.allowance (QueryDegens.sol#7) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address to, uint tokens) public returns (bool success);\n",
          "message": "IERC20Token.transfer (QueryDegens.sol#8) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n",
          "message": "IERC20Token.transferFrom (QueryDegens.sol#9) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 28,
          "vulnerability_code": "    function testOrderBatch(address degensAddress, uint[4][] memory orders) public view returns (uint[] memory, uint[] memory) {\n\n        DegensInterface degens = DegensInterface(degensAddress);\n\n\n\n        uint[] memory available = new uint[](orders.length);\n\n        uint[] memory filled = new uint[](orders.length);\n\n        \n\n        for (uint i = 0; i < orders.length; i++) {\n\n            (available[i], filled[i]) = degens.testOrder(orders[i]);\n\n        }\n\n\n\n        return (available, filled);\n",
          "message": "QueryDegens.testOrderBatch (QueryDegens.sol#17-28) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": 42,
          "vulnerability_code": "    function tokenBalancesAndApprovals(address degensAddress, address[] memory accounts, address[] memory tokens) public view returns (uint[] memory) {\n\n        uint[] memory output = new uint[](accounts.length * tokens.length * 2);\n\n\n\n        uint curr = 0;\n\n        for (uint i = 0; i < accounts.length; i++) {\n\n            for (uint j = 0; j < tokens.length; j++) {\n\n                output[curr++] = IERC20Token(tokens[j]).balanceOf(accounts[i]);\n\n                output[curr++] = IERC20Token(tokens[j]).allowance(accounts[i], degensAddress);\n\n            }\n\n        }\n\n\n\n        return output;\n",
          "message": "QueryDegens.tokenBalancesAndApprovals (QueryDegens.sol#30-42) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.10;\n",
          "message": "Detected issues with version pragma in QueryDegens.sol:\n\t- pragma solidity^0.5.10 (QueryDegens.sol#3): it allows old versions\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < orders.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < accounts.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint j = 0; j < tokens.length; j++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < orders.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < accounts.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint j = 0; j < tokens.length; j++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.10;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function testOrder(uint[4] calldata packed) external view returns(uint256, uint256);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function testOrderBatch(address degensAddress, uint[4][] memory orders) public view returns (uint[] memory, uint[] memory) {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}