{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 347,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Kaoya is Context, IBEP20, Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 297,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor () public  {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 298,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address msgSender = _msgSender();\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 299,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _owner = msgSender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 300,
          "vulnerability_to_line": null,
          "vulnerability_code": "    emit OwnershipTransferred(address(0), msgSender);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 301,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 153,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(c >= a, \"SafeMath: addition overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 314,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 365,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(!initialized, \"FiatToken: contract is already initialized\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 538,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(sender != address(0), \"BEP20: transfer from the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 539,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(recipient != address(0), \"BEP20: transfer to the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 556,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(account != address(0), \"BEP20: mint to the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 575,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(account != address(0), \"BEP20: burn from the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 596,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(owner != address(0), \"BEP20: approve from the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 597,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(spender != address(0), \"BEP20: approve to the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 365,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(!initialized, \"FiatToken: contract is already initialized\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 538,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(sender != address(0), \"BEP20: transfer from the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 539,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(recipient != address(0), \"BEP20: transfer to the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 575,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(account != address(0), \"BEP20: burn from the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 596,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(owner != address(0), \"BEP20: approve from the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 597,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(spender != address(0), \"BEP20: approve to the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_23"
      ],
      "vulnerability_findings": [
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 432,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address owner, address spender) external override view returns (uint256) {\n",
          "message": "Kaoya.allowance.owner (local variable @ Kaoya.sol#432) shadows:\n\t- Ownable.owner (function @ Kaoya.sol#306-308)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 363,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint totalSupply\n",
          "message": "Kaoya.initialize.totalSupply (local variable @ Kaoya.sol#363) shadows:\n\t- Kaoya.totalSupply (function @ Kaoya.sol#405-407)\n\t- IBEP20.totalSupply (function @ Kaoya.sol#17)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 595,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function _approve(address owner, address spender, uint256 amount) internal {\n",
          "message": "Kaoya._approve.owner (local variable @ Kaoya.sol#595) shadows:\n\t- Ownable.owner (function @ Kaoya.sol#306-308)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 325,
          "vulnerability_to_line": 328,
          "vulnerability_code": "  function renounceOwnership() public onlyOwner {\n\n    emit OwnershipTransferred(_owner, address(0));\n\n    _owner = address(0);\n",
          "message": "Ownable.renounceOwnership (Kaoya.sol#325-328) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 334,
          "vulnerability_to_line": 336,
          "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    _transferOwnership(newOwner);\n",
          "message": "Ownable.transferOwnership (Kaoya.sol#334-336) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 359,
          "vulnerability_to_line": 373,
          "vulnerability_code": "  function initialize(\n\n    string memory tokenName,\n\n    string memory tokenSymbol,\n\n    uint8 tokenDecimals,\n\n    uint totalSupply\n\n  ) public {\n\n    require(!initialized, \"FiatToken: contract is already initialized\");\n\n    _name = tokenName;\n\n    _symbol = tokenSymbol;\n\n    _decimals = tokenDecimals;\n\n    _totalSupply = totalSupply;\n\n    _balances[msg.sender] = _totalSupply;\n\n    _owner = msg.sender;\n\n    initialized = true;\n",
          "message": "Kaoya.initialize (Kaoya.sol#359-373) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 478,
          "vulnerability_to_line": 481,
          "vulnerability_code": "  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n\n    return true;\n",
          "message": "Kaoya.increaseAllowance (Kaoya.sol#478-481) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 497,
          "vulnerability_to_line": 500,
          "vulnerability_code": "  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\n\n    return true;\n",
          "message": "Kaoya.decreaseAllowance (Kaoya.sol#497-500) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 510,
          "vulnerability_to_line": 513,
          "vulnerability_code": "  function mint(uint256 amount) public onlyOwner returns (bool) {\n\n    _mint(_msgSender(), amount);\n\n    return true;\n",
          "message": "Kaoya.mint (Kaoya.sol#510-513) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 518,
          "vulnerability_to_line": 521,
          "vulnerability_code": "  function burn(uint256 amount) public returns (bool) {\n\n    _burn(_msgSender(), amount);\n\n    return true;\n",
          "message": "Kaoya.burn (Kaoya.sol#518-521) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.6.12;\n",
          "message": "Detected issues with version pragma in Kaoya.sol:\n\t- pragma solidity0.6.12 (Kaoya.sol#11): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": 120,
          "vulnerability_code": "  function _msgSender() internal view returns (address payable) {\n\n    return payable(msg.sender);\n",
          "message": "Function 'Context._msgSender' (Kaoya.sol#118-120) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 122,
          "vulnerability_to_line": 125,
          "vulnerability_code": "  function _msgData() internal view returns (bytes memory) {\n\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n\n    return msg.data;\n",
          "message": "Function 'Context._msgData' (Kaoya.sol#122-125) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 341,
          "vulnerability_to_line": 344,
          "vulnerability_code": "  function _transferOwnership(address newOwner) internal {\n\n    emit OwnershipTransferred(_owner, newOwner);\n\n    _owner = newOwner;\n",
          "message": "Function 'Ownable._transferOwnership' (Kaoya.sol#341-344) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 290,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address internal _owner;\n",
          "message": "Variable 'Ownable._owner' (Kaoya.sol#290) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 537,
          "vulnerability_to_line": 544,
          "vulnerability_code": "  function _transfer(address sender, address recipient, uint256 amount) internal {\n\n    require(sender != address(0), \"BEP20: transfer from the zero address\");\n\n    require(recipient != address(0), \"BEP20: transfer to the zero address\");\n\n\n\n    _balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\");\n\n    _balances[recipient] = _balances[recipient].add(amount);\n\n    emit Transfer(sender, recipient, amount);\n",
          "message": "Function 'Kaoya._transfer' (Kaoya.sol#537-544) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 555,
          "vulnerability_to_line": 561,
          "vulnerability_code": "  function _mint(address account, uint256 amount) internal {\n\n    require(account != address(0), \"BEP20: mint to the zero address\");\n\n\n\n    _totalSupply = _totalSupply.add(amount);\n\n    _balances[account] = _balances[account].add(amount);\n\n    emit Transfer(address(0), account, amount);\n",
          "message": "Function 'Kaoya._mint' (Kaoya.sol#555-561) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 574,
          "vulnerability_to_line": 580,
          "vulnerability_code": "  function _burn(address account, uint256 amount) internal {\n\n    require(account != address(0), \"BEP20: burn from the zero address\");\n\n\n\n    _balances[account] = _balances[account].sub(amount, \"BEP20: burn amount exceeds balance\");\n\n    _totalSupply = _totalSupply.sub(amount);\n\n    emit Transfer(account, address(0), amount);\n",
          "message": "Function 'Kaoya._burn' (Kaoya.sol#574-580) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 595,
          "vulnerability_to_line": 601,
          "vulnerability_code": "  function _approve(address owner, address spender, uint256 amount) internal {\n\n    require(owner != address(0), \"BEP20: approve from the zero address\");\n\n    require(spender != address(0), \"BEP20: approve to the zero address\");\n\n\n\n    _allowances[owner][spender] = amount;\n\n    emit Approval(owner, spender, amount);\n",
          "message": "Function 'Kaoya._approve' (Kaoya.sol#595-601) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 609,
          "vulnerability_to_line": 612,
          "vulnerability_code": "  function _burnFrom(address account, uint256 amount) internal {\n\n    _burn(account, amount);\n\n    _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"BEP20: burn amount exceeds allowance\"));\n",
          "message": "Function 'Kaoya._burnFrom' (Kaoya.sol#609-612) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 355,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint8 public _decimals;\n",
          "message": "Variable 'Kaoya._decimals' (Kaoya.sol#355) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 356,
          "vulnerability_to_line": null,
          "vulnerability_code": "  string public _symbol;\n",
          "message": "Variable 'Kaoya._symbol' (Kaoya.sol#356) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 357,
          "vulnerability_to_line": null,
          "vulnerability_code": "  string public _name;\n",
          "message": "Variable 'Kaoya._name' (Kaoya.sol#357) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 327,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _owner = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 350,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping (address => uint256) private _balances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 352,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping (address => mapping (address => uint256)) private _allowances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 354,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 private _totalSupply;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 348,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}