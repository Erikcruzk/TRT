{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 2800,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < bytes(message).length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 4200,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < assets.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 4411,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < allMarkets.length; i ++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 4525,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < allMarkets.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 4751,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < holders.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 4755,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < cTokens.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 4761,
          "vulnerability_to_line": null,
          "vulnerability_code": "                for (uint j = 0; j < holders.length; j++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 4767,
          "vulnerability_to_line": null,
          "vulnerability_code": "                for (uint j = 0; j < holders.length; j++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 4862,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < cTokens.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "inefficient-state-variable-increment",
          "vulnerability_from_line": 4974,
          "vulnerability_to_line": null,
          "vulnerability_code": "        blockNumber += blocks;\n",
          "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
        },
        {
          "name": "inefficient-state-variable-increment",
          "vulnerability_from_line": 5058,
          "vulnerability_to_line": null,
          "vulnerability_code": "        blockNumber += blocks;\n",
          "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 2665,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(ComptrollerInterface comptroller_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 2666,
          "vulnerability_to_line": null,
          "vulnerability_code": "                InterestRateModel interestRateModel_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 2667,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint initialExchangeRateMantissa_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 2668,
          "vulnerability_to_line": null,
          "vulnerability_code": "                string memory name_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 2669,
          "vulnerability_to_line": null,
          "vulnerability_code": "                string memory symbol_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 2670,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint8 decimals_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 2671,
          "vulnerability_to_line": null,
          "vulnerability_code": "                address payable admin_) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 2672,
          "vulnerability_to_line": null,
          "vulnerability_code": "        // Creator of the contract is admin during initialization\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 2673,
          "vulnerability_to_line": null,
          "vulnerability_code": "        admin = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 2674,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 3035,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 3036,
          "vulnerability_to_line": null,
          "vulnerability_code": "        // Set admin to caller\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 3037,
          "vulnerability_to_line": null,
          "vulnerability_code": "        admin = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 3038,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 3217,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address account) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 3218,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balances[account] = uint96(totalSupply);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 3219,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit Transfer(address(0), account, totalSupply);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 3220,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 3555,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 3556,
          "vulnerability_to_line": null,
          "vulnerability_code": "        admin = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 3557,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 4959,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() Comptroller() public {}\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 5021,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(ComptrollerInterface comptroller_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 5022,
          "vulnerability_to_line": null,
          "vulnerability_code": "                InterestRateModel interestRateModel_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 5023,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint initialExchangeRateMantissa,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 5024,
          "vulnerability_to_line": null,
          "vulnerability_code": "                string memory name_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 5025,
          "vulnerability_to_line": null,
          "vulnerability_code": "                string memory symbol_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 5026,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint8 decimals_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 5027,
          "vulnerability_to_line": null,
          "vulnerability_code": "                address payable admin_)\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 5028,
          "vulnerability_to_line": null,
          "vulnerability_code": "    CEther(\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 5029,
          "vulnerability_to_line": null,
          "vulnerability_code": "    comptroller_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 5030,
          "vulnerability_to_line": null,
          "vulnerability_code": "    interestRateModel_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 5171,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(string memory name_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 5172,
          "vulnerability_to_line": null,
          "vulnerability_code": "                string memory symbol_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 5173,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint8 decimals_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 5174,
          "vulnerability_to_line": null,
          "vulnerability_code": "                address payable admin_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 5175,
          "vulnerability_to_line": null,
          "vulnerability_code": "                ComptrollerInterface comptroller_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 5176,
          "vulnerability_to_line": null,
          "vulnerability_code": "                InterestRateModel interestRateModel_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 5177,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint initialExchangeRateMantissa)\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 5178,
          "vulnerability_to_line": null,
          "vulnerability_code": "        CEther(comptroller_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 5179,
          "vulnerability_to_line": null,
          "vulnerability_code": "               interestRateModel_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 5180,
          "vulnerability_to_line": null,
          "vulnerability_code": "               initialExchangeRateMantissa,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 3365,
          "vulnerability_to_line": null,
          "vulnerability_code": "            Checkpoint memory cp = checkpoints[account][center];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 3591,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < len; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 3671,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < len; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 4200,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < assets.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 4411,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < allMarkets.length; i ++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 4432,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i = 0; i < numMarkets; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 4525,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < allMarkets.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 4751,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < holders.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 4755,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < cTokens.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 4761,
          "vulnerability_to_line": null,
          "vulnerability_code": "                for (uint j = 0; j < holders.length; j++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 4767,
          "vulnerability_to_line": null,
          "vulnerability_code": "                for (uint j = 0; j < holders.length; j++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 4862,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < cTokens.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 4989,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < m; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 4997,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < m; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1247,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == admin, \"only admin may initialize the market\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1248,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(accrualBlockNumber == 0 && borrowIndex == 0, \"market may only be initialized once\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1252,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(initialExchangeRateMantissa > 0, \"initial exchange rate must be greater than zero.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1256,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(err == uint(Error.NO_ERROR), \"setting comptroller failed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1264,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(err == uint(Error.NO_ERROR), \"setting interest rate model failed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1408,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(mErr == MathError.NO_ERROR, \"balance could not be calculated\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1467,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(accrueInterest() == uint(Error.NO_ERROR), \"accrue interest failed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1477,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(accrueInterest() == uint(Error.NO_ERROR), \"accrue interest failed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1488,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(err == MathError.NO_ERROR, \"borrowBalanceStored: borrowBalanceStoredInternal failed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1534,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(accrueInterest() == uint(Error.NO_ERROR), \"accrue interest failed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1545,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(err == MathError.NO_ERROR, \"exchangeRateStored: exchangeRateStoredInternal failed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1617,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(borrowRateMantissa <= borrowRateMaxMantissa, \"borrow rate is absurdly high\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1621,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(mathErr == MathError.NO_ERROR, \"could not calculate block delta\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1751,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(vars.mathErr == MathError.NO_ERROR, \"MINT_EXCHANGE_CALCULATION_FAILED\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1759,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(vars.mathErr == MathError.NO_ERROR, \"MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1762,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(vars.mathErr == MathError.NO_ERROR, \"MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1829,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(redeemTokensIn == 0 || redeemAmountIn == 0, \"one of redeemTokensIn or redeemAmountIn must be zero\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2114,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(vars.mathErr == MathError.NO_ERROR, \"REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2117,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(vars.mathErr == MathError.NO_ERROR, \"REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2212,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(amountSeizeError == uint(Error.NO_ERROR), \"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2215,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(cTokenCollateral.balanceOf(borrower) >= seizeTokens, \"LIQUIDATE_SEIZE_TOO_MUCH\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2226,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(seizeError == uint(Error.NO_ERROR), \"token seizure failed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2375,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newComptroller.isComptroller(), \"marker method returned false\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2480,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(totalReservesNew >= totalReserves, \"add reserves unexpected overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2544,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(totalReservesNew <= totalReserves, \"reduce reserves unexpected underflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2598,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newInterestRateModel.isInterestRateModel(), \"marker method returned false\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2638,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_notEntered, \"re-entered\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2782,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == from, \"sender mismatch\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2783,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.value == amount, \"value mismatch\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 3320,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(signatory != address(0), \"Comp::delegateBySig: invalid signature\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 3321,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(nonce == nonces[signatory]++, \"Comp::delegateBySig: invalid nonce\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 3322,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(now <= expiry, \"Comp::delegateBySig: signature expired\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 3344,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(blockNumber < block.number, \"Comp::getPriorVotes: not yet determined\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 3388,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(src != address(0), \"Comp::_transferTokens: cannot transfer from the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 3389,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(dst != address(0), \"Comp::_transferTokens: cannot transfer to the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 3643,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(oErr == 0, \"exitMarket: getAccountSnapshot failed\"); // semi-opaque error code\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 3702,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!mintGuardianPaused[cToken], \"mint is paused\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 3797,
          "vulnerability_to_line": null,
          "vulnerability_code": "            revert(\"redeemTokens zero\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 3810,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!borrowGuardianPaused[cToken], \"borrow is paused\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 3818,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(msg.sender == cToken, \"sender must be cToken\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 3840,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(nextTotalBorrows < borrowCap, \"market borrow cap reached\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4019,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!seizeGuardianPaused, \"seize is paused\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4078,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!transferGuardianPaused, \"transfer is paused\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4317,
          "vulnerability_to_line": null,
          "vulnerability_code": "    \trequire(msg.sender == admin, \"only admin can set close factor\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4412,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(allMarkets[i] != CToken(cToken), \"market already added\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4425,
          "vulnerability_to_line": null,
          "vulnerability_code": "    \trequire(msg.sender == admin || msg.sender == borrowCapGuardian, \"only admin or borrow cap guardian can set borrow caps\"); \n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4430,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(numMarkets != 0 && numMarkets == numBorrowCaps, \"invalid input\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4443,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == admin, \"only admin can set borrow cap guardian\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4478,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(markets[address(cToken)].isListed, \"cannot pause a market that is not listed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4479,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == pauseGuardian || msg.sender == admin, \"only pause guardian and admin can pause\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4480,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == admin || state == true, \"only admin can unpause\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4488,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(markets[address(cToken)].isListed, \"cannot pause a market that is not listed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4489,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == pauseGuardian || msg.sender == admin, \"only pause guardian and admin can pause\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4490,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == admin || state == true, \"only admin can unpause\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4498,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == pauseGuardian || msg.sender == admin, \"only pause guardian and admin can pause\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4499,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == admin || state == true, \"only admin can unpause\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4507,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == pauseGuardian || msg.sender == admin, \"only pause guardian and admin can pause\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4508,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == admin || state == true, \"only admin can unpause\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4516,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == unitroller.admin(), \"only unitroller admin can change brains\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4517,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(unitroller._acceptImplementation() == 0, \"change not authorized\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4523,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == comptrollerImplementation, \"only brains can become itself\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4757,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(markets[address(cToken)].isListed, \"market must be listed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4801,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(adminOrInitializing(), \"only admin can grant comp\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4814,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(adminOrInitializing(), \"only admin can set comp speed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4824,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(adminOrInitializing(), \"only admin can set comp speed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4843,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(adminOrInitializing(), \"only admin can change vesting period\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4844,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(vestingPeriod_ > 0, \"vesting period cannot be 0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4860,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(adminOrInitializing(), \"only admin can add comp market\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4869,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(market.isListed == true, \"comp market is not listed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4870,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(market.isComped == false, \"comp market already added\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4895,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == admin, \"only admin can drop comp market\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 4898,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(market.isComped == true, \"market is not a comp market\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 5038,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(failTransferToAddresses[to] == false, \"TOKEN_TRANSFER_OUT_FAILED\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 1248,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(accrualBlockNumber == 0 && borrowIndex == 0, \"market may only be initialized once\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 4430,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(numMarkets != 0 && numMarkets == numBorrowCaps, \"invalid input\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3287,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (spender != src && spenderAllowance != uint96(-1)) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3288,
          "vulnerability_to_line": null,
          "vulnerability_code": "            uint96 newAllowance = sub96(spenderAllowance, amount, \"Comp::transferFrom: transfer amount exceeds spender allowance\");\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3289,
          "vulnerability_to_line": null,
          "vulnerability_code": "            allowances[src][spender] = newAllowance;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3290,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3291,
          "vulnerability_to_line": null,
          "vulnerability_code": "            emit Approval(src, spender, newAllowance);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3292,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3399,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (srcRep != dstRep && amount > 0) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3400,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (srcRep != address(0)) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3401,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint32 srcRepNum = numCheckpoints[srcRep];\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3402,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3403,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint96 srcRepNew = sub96(srcRepOld, amount, \"Comp::_moveVotes: vote amount underflows\");\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3404,
          "vulnerability_to_line": null,
          "vulnerability_code": "                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3405,
          "vulnerability_to_line": null,
          "vulnerability_code": "            }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3406,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3407,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (dstRep != address(0)) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3408,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint32 dstRepNum = numCheckpoints[dstRep];\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3419,
          "vulnerability_to_line": null,
          "vulnerability_code": "      if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3420,
          "vulnerability_to_line": null,
          "vulnerability_code": "          checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3421,
          "vulnerability_to_line": null,
          "vulnerability_code": "      } else {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3422,
          "vulnerability_to_line": null,
          "vulnerability_code": "          checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3423,
          "vulnerability_to_line": null,
          "vulnerability_code": "          numCheckpoints[delegatee] = nCheckpoints + 1;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3424,
          "vulnerability_to_line": null,
          "vulnerability_code": "      }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3796,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (redeemTokens == 0 && redeemAmount > 0) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3797,
          "vulnerability_to_line": null,
          "vulnerability_code": "            revert(\"redeemTokens zero\");\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3798,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4346,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (newCollateralFactorMantissa != 0 && oracle.getUnderlyingPrice(cToken) == 0) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4347,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return fail(Error.PRICE_ERROR, FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4348,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4581,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (deltaBlocks > 0 && compSpeed > 0) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4582,
          "vulnerability_to_line": null,
          "vulnerability_code": "            uint marketSize;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4583,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (isSupply) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4584,
          "vulnerability_to_line": null,
          "vulnerability_code": "                marketSize = CToken(cToken).totalSupply();\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4585,
          "vulnerability_to_line": null,
          "vulnerability_code": "            } else {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4586,
          "vulnerability_to_line": null,
          "vulnerability_code": "                marketSize = div_(CToken(cToken).totalBorrows(), marketBorrowIndex);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4587,
          "vulnerability_to_line": null,
          "vulnerability_code": "            }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4588,
          "vulnerability_to_line": null,
          "vulnerability_code": "            uint compAccrued;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4589,
          "vulnerability_to_line": null,
          "vulnerability_code": "            Double memory ratio;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4590,
          "vulnerability_to_line": null,
          "vulnerability_code": "            Double memory index;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4649,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (holderIndex.mantissa == 0 && marketIndex.mantissa > 0) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4650,
          "vulnerability_to_line": null,
          "vulnerability_code": "                holderIndex.mantissa = compInitialIndex;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4651,
          "vulnerability_to_line": null,
          "vulnerability_code": "            }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4715,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (deltaBlocks > 0 && compSpeed > 0) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4716,
          "vulnerability_to_line": null,
          "vulnerability_code": "            uint newAccrued = mul_(deltaBlocks, compSpeed);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4717,
          "vulnerability_to_line": null,
          "vulnerability_code": "            uint contributorAccrued = add_(compAccrued[contributor], newAccrued);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4718,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4719,
          "vulnerability_to_line": null,
          "vulnerability_code": "            compAccrued[contributor] = contributorAccrued;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4720,
          "vulnerability_to_line": null,
          "vulnerability_code": "            lastContributorBlock[contributor] = blockNumber;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4721,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4875,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (compSupplyState[cToken].index == 0 && compSupplyState[cToken].block == 0) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4876,
          "vulnerability_to_line": null,
          "vulnerability_code": "            compSupplyState[cToken] = CompMarketState({\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4877,
          "vulnerability_to_line": null,
          "vulnerability_code": "                index: compInitialIndex,\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4878,
          "vulnerability_to_line": null,
          "vulnerability_code": "                block: safe32(getBlockNumber(), \"block number exceeds 32 bits\")\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4879,
          "vulnerability_to_line": null,
          "vulnerability_code": "            });\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4880,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4882,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (compBorrowState[cToken].index == 0 && compBorrowState[cToken].block == 0) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4883,
          "vulnerability_to_line": null,
          "vulnerability_code": "            compBorrowState[cToken] = CompMarketState({\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4884,
          "vulnerability_to_line": null,
          "vulnerability_code": "                index: compInitialIndex,\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4885,
          "vulnerability_to_line": null,
          "vulnerability_code": "                block: safe32(getBlockNumber(), \"block number exceeds 32 bits\")\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4886,
          "vulnerability_to_line": null,
          "vulnerability_code": "            });\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4887,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 3684,
          "vulnerability_to_line": null,
          "vulnerability_code": "        storedList.length--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 2800,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < bytes(message).length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 3321,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(nonce == nonces[signatory]++, \"Comp::delegateBySig: invalid nonce\");\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 3591,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < len; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 3671,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < len; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 4200,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < assets.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 4411,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < allMarkets.length; i ++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 4432,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i = 0; i < numMarkets; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 4525,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < allMarkets.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 4751,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < holders.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 4755,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < cTokens.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 4761,
          "vulnerability_to_line": null,
          "vulnerability_code": "                for (uint j = 0; j < holders.length; j++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 4767,
          "vulnerability_to_line": null,
          "vulnerability_code": "                for (uint j = 0; j < holders.length; j++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 4862,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < cTokens.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 4989,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < m; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 4991,
          "vulnerability_to_line": null,
          "vulnerability_code": "                n++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 4997,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < m; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1247,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == admin, \"only admin may initialize the market\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1248,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(accrualBlockNumber == 0 && borrowIndex == 0, \"market may only be initialized once\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1252,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(initialExchangeRateMantissa > 0, \"initial exchange rate must be greater than zero.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1264,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(err == uint(Error.NO_ERROR), \"setting interest rate model failed\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1488,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(err == MathError.NO_ERROR, \"borrowBalanceStored: borrowBalanceStoredInternal failed\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1545,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(err == MathError.NO_ERROR, \"exchangeRateStored: exchangeRateStoredInternal failed\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1759,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(vars.mathErr == MathError.NO_ERROR, \"MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1762,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(vars.mathErr == MathError.NO_ERROR, \"MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1829,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(redeemTokensIn == 0 || redeemAmountIn == 0, \"one of redeemTokensIn or redeemAmountIn must be zero\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 2114,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(vars.mathErr == MathError.NO_ERROR, \"REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 2117,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(vars.mathErr == MathError.NO_ERROR, \"REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 2212,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(amountSeizeError == uint(Error.NO_ERROR), \"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 2544,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(totalReservesNew <= totalReserves, \"reduce reserves unexpected underflow\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 3320,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(signatory != address(0), \"Comp::delegateBySig: invalid signature\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 3321,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(nonce == nonces[signatory]++, \"Comp::delegateBySig: invalid nonce\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 3322,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(now <= expiry, \"Comp::delegateBySig: signature expired\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 3344,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(blockNumber < block.number, \"Comp::getPriorVotes: not yet determined\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 3388,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(src != address(0), \"Comp::_transferTokens: cannot transfer from the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 3389,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(dst != address(0), \"Comp::_transferTokens: cannot transfer to the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 3643,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(oErr == 0, \"exitMarket: getAccountSnapshot failed\"); // semi-opaque error code\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 4425,
          "vulnerability_to_line": null,
          "vulnerability_code": "    \trequire(msg.sender == admin || msg.sender == borrowCapGuardian, \"only admin or borrow cap guardian can set borrow caps\"); \n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 4443,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == admin, \"only admin can set borrow cap guardian\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 4478,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(markets[address(cToken)].isListed, \"cannot pause a market that is not listed\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 4479,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == pauseGuardian || msg.sender == admin, \"only pause guardian and admin can pause\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 4488,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(markets[address(cToken)].isListed, \"cannot pause a market that is not listed\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 4489,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == pauseGuardian || msg.sender == admin, \"only pause guardian and admin can pause\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 4498,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == pauseGuardian || msg.sender == admin, \"only pause guardian and admin can pause\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 4507,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == pauseGuardian || msg.sender == admin, \"only pause guardian and admin can pause\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 4516,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == unitroller.admin(), \"only unitroller admin can change brains\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 4843,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(adminOrInitializing(), \"only admin can change vesting period\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "compound-borrowfresh-reentrancy",
          "vulnerability_from_line": 2000,
          "vulnerability_to_line": null,
          "vulnerability_code": "        doTransferOut(borrower, borrowAmount);\n",
          "message": "Function borrowFresh() in Compound performs state update after doTransferOut()"
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_204"
      ],
      "vulnerability_findings": [
        {
          "name": "controlled-delegatecall",
          "vulnerability_from_line": 3138,
          "vulnerability_to_line": 3153,
          "vulnerability_code": "    function () payable external {\n\n        // delegate all other functions to current implementation\n\n        (bool success, ) = comptrollerImplementation.delegatecall(msg.data);\n\n\n\n        assembly {\n\n              let free_mem_ptr := mload(0x40)\n\n              returndatacopy(free_mem_ptr, 0, returndatasize)\n\n\n\n              switch success\n\n              case 0 { revert(free_mem_ptr, returndatasize) }\n\n              default { return(free_mem_ptr, returndatasize) }\n\n        }\n\n    }\n\n}\n\n\n",
          "message": "Unitroller.fallback (CEtherHarness.sol#3138-3153) uses delegatecall to a input-controlled function id\n\t(success) = comptrollerImplementation.delegatecall(msg.data) (CEtherHarness.sol#3140-3142)\n"
        },
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 2850,
          "vulnerability_to_line": 2852,
          "vulnerability_code": "    address public comptrollerImplementation;\n\n\n",
          "message": "UnitrollerAdminStorage.comptrollerImplementation (CEtherHarness.sol#2850-2852) is never initialized. It is used in:\n\t- _becomeG6 (CEtherHarness.sol#4522-4535)\n\t- adminOrInitializing (CEtherHarness.sol#4537-4541)\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 3450,
          "vulnerability_to_line": 3457,
          "vulnerability_code": "    function getChainId() internal pure returns (uint) {\n\n        uint256 chainId;\n\n        assembly { chainId := chainid() }\n\n        return chainId;\n\n    }\n\n}\n\n\n",
          "message": "Comp.getChainId (CEtherHarness.sol#3450-3457) is declared view but contains assembly code\n"
        },
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 1152,
          "vulnerability_to_line": 1214,
          "vulnerability_code": "interface EIP20NonStandardInterface {\n\n\n\n    /**\n\n     * @notice Get the total number of tokens in circulation\n\n     * @return The supply of tokens\n\n     */\n\n    function totalSupply() external view returns (uint256);\n\n\n\n    /**\n\n     * @notice Gets the balance of the specified address\n\n     * @param owner The address from which the balance will be retrieved\n\n     * @return The balance\n\n     */\n\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n\n\n    ///\n\n    /// !!!!!!!!!!!!!!\n\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\n\n    /// !!!!!!!!!!!!!!\n\n    ///\n\n\n\n    /**\n\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n\n      * @param dst The address of the destination account\n\n      * @param amount The number of tokens to transfer\n\n      */\n\n    function transfer(address dst, uint256 amount) external;\n\n\n\n    ///\n\n    /// !!!!!!!!!!!!!!\n\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\n\n    /// !!!!!!!!!!!!!!\n\n    ///\n\n\n\n    /**\n\n      * @notice Transfer `amount` tokens from `src` to `dst`\n\n      * @param src The address of the source account\n\n      * @param dst The address of the destination account\n\n      * @param amount The number of tokens to transfer\n\n      */\n\n    function transferFrom(address src, address dst, uint256 amount) external;\n\n\n\n    /**\n\n      * @notice Approve `spender` to transfer up to `amount` from `src`\n\n      * @dev This will overwrite the approval amount for `spender`\n\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n\n      * @param spender The address of the account which may transfer tokens\n\n      * @param amount The number of tokens that are approved\n\n      * @return Whether or not the approval succeeded\n\n      */\n\n    function approve(address spender, uint256 amount) external returns (bool success);\n\n\n\n    /**\n\n      * @notice Get the current allowance from `owner` for `spender`\n\n      * @param owner The address of the account which owns the tokens to be spent\n\n      * @param spender The address of the account which may transfer tokens\n\n      * @return The number of tokens allowed to be spent\n\n      */\n\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n",
          "message": "EIP20NonStandardInterface (CEtherHarness.sol#1152-1214) has incorrect ERC20 function interface(s):\n\t-transfer (CEtherHarness.sol#1178)\n\t-transferFrom (CEtherHarness.sol#1192)\n"
        },
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 3416,
          "vulnerability_to_line": 3429,
          "vulnerability_code": "    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint96 oldVotes, uint96 newVotes) internal {\n\n      uint32 blockNumber = safe32(block.number, \"Comp::_writeCheckpoint: block number exceeds 32 bits\");\n\n\n\n      if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\n\n          checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n\n      } else {\n\n          checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\n\n          numCheckpoints[delegatee] = nCheckpoints + 1;\n\n      }\n\n\n\n      emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\n\n    }\n\n\n",
          "message": "Comp._writeCheckpoint (CEtherHarness.sol#3416-3429) uses a dangerous strict equality:\n\t- nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber\n"
        },
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 2768,
          "vulnerability_to_line": 2774,
          "vulnerability_code": "    function getCashPrior() internal view returns (uint) {\n\n        (MathError err, uint startingBalance) = subUInt(address(this).balance, msg.value);\n\n        require(err == MathError.NO_ERROR);\n\n        return startingBalance;\n\n    }\n\n\n",
          "message": "CEther.getCashPrior (CEtherHarness.sol#2768-2774) uses a dangerous strict equality:\n\t- require(bool)(err == MathError.NO_ERROR)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 2435,
          "vulnerability_to_line": 2447,
          "vulnerability_code": "    function _addReservesInternal(uint addAmount) internal nonReentrant returns (uint) {\n\n        uint error = accrueInterest();\n\n        if (error != uint(Error.NO_ERROR)) {\n\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\n\n            return fail(Error(error), FailureInfo.ADD_RESERVES_ACCRUE_INTEREST_FAILED);\n\n        }\n\n\n\n        // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\n\n        (error, ) = _addReservesFresh(addAmount);\n\n        return error;\n\n    }\n\n\n",
          "message": "Reentrancy in CToken._addReservesInternal (CEtherHarness.sol#2435-2447):\n\tExternal calls:\n\t- error = accrueInterest() (CEtherHarness.sol#2436-2437)\n\tState variables written after the call(s):\n\t- totalReserves (CEtherHarness.sol#2443-2444)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 2498,
          "vulnerability_to_line": 2508,
          "vulnerability_code": "    function _reduceReserves(uint reduceAmount) external nonReentrant returns (uint) {\n\n        uint error = accrueInterest();\n\n        if (error != uint(Error.NO_ERROR)) {\n\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\n\n            return fail(Error(error), FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED);\n\n        }\n\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\n\n        return _reduceReservesFresh(reduceAmount);\n\n    }\n\n\n",
          "message": "Reentrancy in CToken._reduceReserves (CEtherHarness.sol#2498-2508):\n\tExternal calls:\n\t- error = accrueInterest() (CEtherHarness.sol#2499-2500)\n\tState variables written after the call(s):\n\t- totalReserves (CEtherHarness.sol#2505-2506)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 2367,
          "vulnerability_to_line": 2386,
          "vulnerability_code": "    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint) {\n\n        // Check caller is admin\n\n        if (msg.sender != admin) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_COMPTROLLER_OWNER_CHECK);\n\n        }\n\n\n\n        ComptrollerInterface oldComptroller = comptroller;\n\n        // Ensure invoke comptroller.isComptroller() returns true\n\n        require(newComptroller.isComptroller(), \"marker method returned false\");\n\n\n\n        // Set market's comptroller to newComptroller\n\n        comptroller = newComptroller;\n\n\n\n        // Emit NewComptroller(oldComptroller, newComptroller)\n\n        emit NewComptroller(oldComptroller, newComptroller);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n",
          "message": "Reentrancy in CToken._setComptroller (CEtherHarness.sol#2367-2386):\n\tExternal calls:\n\t- require(bool,string)(newComptroller.isComptroller(),marker method returned false) (CEtherHarness.sol#2375-2376)\n\tState variables written after the call(s):\n\t- comptroller (CEtherHarness.sol#2378-2379)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 2563,
          "vulnerability_to_line": 2573,
          "vulnerability_code": "    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint) {\n\n        uint error = accrueInterest();\n\n        if (error != uint(Error.NO_ERROR)) {\n\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted change of interest rate model failed\n\n            return fail(Error(error), FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED);\n\n        }\n\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\n\n        return _setInterestRateModelFresh(newInterestRateModel);\n\n    }\n\n\n",
          "message": "Reentrancy in CToken._setInterestRateModel (CEtherHarness.sol#2563-2573):\n\tExternal calls:\n\t- error = accrueInterest() (CEtherHarness.sol#2564-2565)\n\t- _setInterestRateModelFresh(newInterestRateModel) (CEtherHarness.sol#2570-2571)\n\tState variables written after the call(s):\n\t- interestRateModel (CEtherHarness.sol#2570-2571)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 2579,
          "vulnerability_to_line": 2609,
          "vulnerability_code": "    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint) {\n\n\n\n        // Used to store old model for use in the event that is emitted on success\n\n        InterestRateModel oldInterestRateModel;\n\n\n\n        // Check caller is admin\n\n        if (msg.sender != admin) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_INTEREST_RATE_MODEL_OWNER_CHECK);\n\n        }\n\n\n\n        // We fail gracefully unless market's block number equals current block number\n\n        if (accrualBlockNumber != getBlockNumber()) {\n\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);\n\n        }\n\n\n\n        // Track the market's current interest rate model\n\n        oldInterestRateModel = interestRateModel;\n\n\n\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\n\n        require(newInterestRateModel.isInterestRateModel(), \"marker method returned false\");\n\n\n\n        // Set the interest rate model to newInterestRateModel\n\n        interestRateModel = newInterestRateModel;\n\n\n\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\n\n        emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n",
          "message": "Reentrancy in CToken._setInterestRateModelFresh (CEtherHarness.sol#2579-2609):\n\tExternal calls:\n\t- require(bool,string)(newInterestRateModel.isInterestRateModel(),marker method returned false) (CEtherHarness.sol#2598-2600)\n\tState variables written after the call(s):\n\t- interestRateModel (CEtherHarness.sol#2601-2603)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 2391,
          "vulnerability_to_line": 2401,
          "vulnerability_code": "    function _setReserveFactor(uint newReserveFactorMantissa) external nonReentrant returns (uint) {\n\n        uint error = accrueInterest();\n\n        if (error != uint(Error.NO_ERROR)) {\n\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reserve factor change failed.\n\n            return fail(Error(error), FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED);\n\n        }\n\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\n\n        return _setReserveFactorFresh(newReserveFactorMantissa);\n\n    }\n\n\n",
          "message": "Reentrancy in CToken._setReserveFactor (CEtherHarness.sol#2391-2401):\n\tExternal calls:\n\t- error = accrueInterest() (CEtherHarness.sol#2392-2393)\n\tState variables written after the call(s):\n\t- reserveFactorMantissa (CEtherHarness.sol#2398-2399)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 4390,
          "vulnerability_to_line": 4410,
          "vulnerability_code": "    function _supportMarket(CToken cToken) external returns (uint) {\n\n        if (msg.sender != admin) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_MARKET_OWNER_CHECK);\n\n        }\n\n\n\n        if (markets[address(cToken)].isListed) {\n\n            return fail(Error.MARKET_ALREADY_LISTED, FailureInfo.SUPPORT_MARKET_EXISTS);\n\n        }\n\n\n\n        cToken.isCToken(); // Sanity check to make sure its really a CToken\n\n\n\n        markets[address(cToken)] = Market({isListed: true, isComped: false, collateralFactorMantissa: 0});\n\n\n\n        _addMarketInternal(address(cToken));\n\n\n\n        emit MarketListed(cToken);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n",
          "message": "Reentrancy in Comptroller._supportMarket (CEtherHarness.sol#4390-4410):\n\tExternal calls:\n\t- cToken.isCToken() (CEtherHarness.sol#4399)\n\tState variables written after the call(s):\n\t- markets (CEtherHarness.sol#4401-4403)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 1599,
          "vulnerability_to_line": 1677,
          "vulnerability_code": "    function accrueInterest() public returns (uint) {\n\n        /* Remember the initial block number */\n\n        uint currentBlockNumber = getBlockNumber();\n\n        uint accrualBlockNumberPrior = accrualBlockNumber;\n\n\n\n        /* Short-circuit accumulating 0 interest */\n\n        if (accrualBlockNumberPrior == currentBlockNumber) {\n\n            return uint(Error.NO_ERROR);\n\n        }\n\n\n\n        /* Read the previous values out of storage */\n\n        uint cashPrior = getCashPrior();\n\n        uint borrowsPrior = totalBorrows;\n\n        uint reservesPrior = totalReserves;\n\n        uint borrowIndexPrior = borrowIndex;\n\n\n\n        /* Calculate the current borrow interest rate */\n\n        uint borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior, borrowsPrior, reservesPrior);\n\n        require(borrowRateMantissa <= borrowRateMaxMantissa, \"borrow rate is absurdly high\");\n\n\n\n        /* Calculate the number of blocks elapsed since the last accrual */\n\n        (MathError mathErr, uint blockDelta) = subUInt(currentBlockNumber, accrualBlockNumberPrior);\n\n        require(mathErr == MathError.NO_ERROR, \"could not calculate block delta\");\n\n\n\n        /*\n\n         * Calculate the interest accumulated into borrows and reserves and the new index:\n\n         *  simpleInterestFactor = borrowRate * blockDelta\n\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\n\n         *  totalBorrowsNew = interestAccumulated + totalBorrows\n\n         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\n\n         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\n\n         */\n\n\n\n        Exp memory simpleInterestFactor;\n\n        uint interestAccumulated;\n\n        uint totalBorrowsNew;\n\n        uint totalReservesNew;\n\n        uint borrowIndexNew;\n\n\n\n        (mathErr, simpleInterestFactor) = mulScalar(Exp({mantissa: borrowRateMantissa}), blockDelta);\n\n        if (mathErr != MathError.NO_ERROR) {\n\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED, uint(mathErr));\n\n        }\n\n\n\n        (mathErr, interestAccumulated) = mulScalarTruncate(simpleInterestFactor, borrowsPrior);\n\n        if (mathErr != MathError.NO_ERROR) {\n\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED, uint(mathErr));\n\n        }\n\n\n\n        (mathErr, totalBorrowsNew) = addUInt(interestAccumulated, borrowsPrior);\n\n        if (mathErr != MathError.NO_ERROR) {\n\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED, uint(mathErr));\n\n        }\n\n\n\n        (mathErr, totalReservesNew) = mulScalarTruncateAddUInt(Exp({mantissa: reserveFactorMantissa}), interestAccumulated, reservesPrior);\n\n        if (mathErr != MathError.NO_ERROR) {\n\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED, uint(mathErr));\n\n        }\n\n\n\n        (mathErr, borrowIndexNew) = mulScalarTruncateAddUInt(simpleInterestFactor, borrowIndexPrior, borrowIndexPrior);\n\n        if (mathErr != MathError.NO_ERROR) {\n\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED, uint(mathErr));\n\n        }\n\n\n\n        /////////////////////////\n\n        // EFFECTS & INTERACTIONS\n\n        // (No safe failures beyond this point)\n\n\n\n        /* We write the previously calculated values into storage */\n\n        accrualBlockNumber = currentBlockNumber;\n\n        borrowIndex = borrowIndexNew;\n\n        totalBorrows = totalBorrowsNew;\n\n        totalReserves = totalReservesNew;\n\n\n\n        /* We emit an AccrueInterest event */\n\n        emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\n\n\n\n        return uint(Error.NO_ERROR);\n",
          "message": "Reentrancy in CToken.accrueInterest (CEtherHarness.sol#1599-1677):\n\tExternal calls:\n\t- borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior,borrowsPrior,reservesPrior) (CEtherHarness.sol#1616)\n\tState variables written after the call(s):\n\t- accrualBlockNumber (CEtherHarness.sol#1668)\n\t- borrowIndex (CEtherHarness.sol#1669)\n\t- totalBorrows (CEtherHarness.sol#1670)\n\t- totalReserves (CEtherHarness.sol#1671)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 1929,
          "vulnerability_to_line": 1937,
          "vulnerability_code": "    function borrowInternal(uint borrowAmount) internal nonReentrant returns (uint) {\n\n        uint error = accrueInterest();\n\n        if (error != uint(Error.NO_ERROR)) {\n\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\n\n            return fail(Error(error), FailureInfo.BORROW_ACCRUE_INTEREST_FAILED);\n\n        }\n\n        // borrowFresh emits borrow-specific logs on errors, so we don't need to\n\n        return borrowFresh(msg.sender, borrowAmount);\n",
          "message": "Reentrancy in CToken.borrowInternal (CEtherHarness.sol#1929-1937):\n\tExternal calls:\n\t- error = accrueInterest() (CEtherHarness.sol#1930)\n\t- borrowFresh(msg.sender,borrowAmount) (CEtherHarness.sol#1936)\n\tState variables written after the call(s):\n\t- totalBorrows (CEtherHarness.sol#1936)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 2665,
          "vulnerability_to_line": 2682,
          "vulnerability_code": "    constructor(ComptrollerInterface comptroller_,\n\n                InterestRateModel interestRateModel_,\n\n                uint initialExchangeRateMantissa_,\n\n                string memory name_,\n\n                string memory symbol_,\n\n                uint8 decimals_,\n\n                address payable admin_) public {\n\n        // Creator of the contract is admin during initialization\n\n        admin = msg.sender;\n\n\n\n        initialize(comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_);\n\n\n\n        // Set the proper admin now that initialization is done\n\n        admin = admin_;\n\n    }\n\n\n\n\n",
          "message": "Reentrancy in CEther.constructor (CEtherHarness.sol#2665-2682):\n\tExternal calls:\n\t- initialize(comptroller_,interestRateModel_,initialExchangeRateMantissa_,name_,symbol_,decimals_) (CEtherHarness.sol#2675-2677)\n\tState variables written after the call(s):\n\t- admin (CEtherHarness.sol#2678-2679)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 4641,
          "vulnerability_to_line": 4708,
          "vulnerability_code": "    function distributeMarketComp(address cToken, address holder, bool distribute, CompMarketState storage marketState, CompMarketState storage vestingState, bool isSupply,\n\n            Exp memory marketBorrowIndex) internal {\n\n        Double memory marketIndex = Double({mantissa: marketState.index});\n\n        Double memory holderIndex;\n\n        if (isSupply) {\n\n            holderIndex = Double({mantissa: compSupplierIndex[cToken][holder]});\n\n            compSupplierIndex[cToken][holder] = marketIndex.mantissa;\n\n\n\n            if (holderIndex.mantissa == 0 && marketIndex.mantissa > 0) {\n\n                holderIndex.mantissa = compInitialIndex;\n\n            }\n\n        } else {\n\n            holderIndex = Double({mantissa: compBorrowerIndex[cToken][holder]});\n\n            compBorrowerIndex[cToken][holder] = marketIndex.mantissa;\n\n        }\n\n\n\n        // Accrue vested COMP\n\n        uint holderAccrued = compAccrued[holder];\n\n        if (lastVestingBlock > vestingBlock[holder]) {\n\n            vestingBlock[holder] = lastVestingBlock;\n\n\n\n            holderAccrued = add_(holderAccrued, compVesting[holder]);\n\n            compVesting[holder] = 0;\n\n        }\n\n\n\n        Double memory marketVestingIndex = holderIndex;\n\n        if (vestingState.index > holderIndex.mantissa) {\n\n            marketVestingIndex = Double({mantissa: vestingState.index});\n\n        }\n\n\n\n        if (isSupply || holderIndex.mantissa > 0) {\n\n            // Accrue COMP that was earned leading up to vesting event\n\n            Double memory deltaIndex;\n\n            uint holderDelta;\n\n            uint holderHoldings;\n\n            if (isSupply) {\n\n                holderHoldings = CToken(cToken).balanceOf(holder);\n\n            } else {\n\n                holderHoldings = div_(CToken(cToken).borrowBalanceStored(holder), marketBorrowIndex);\n\n            }\n\n\n\n            if (marketVestingIndex.mantissa > holderIndex.mantissa) {\n\n                deltaIndex = sub_(marketVestingIndex, holderIndex);\n\n                holderDelta = mul_(holderHoldings, deltaIndex);\n\n                holderAccrued = add_(holderAccrued, holderDelta);\n\n            }\n\n\n\n            // Vest any new COMP earned after vesting event\n\n            deltaIndex = sub_(marketIndex, marketVestingIndex);\n\n            holderDelta = mul_(holderHoldings, deltaIndex);\n\n            compVesting[holder] = add_(compVesting[holder], holderDelta);\n\n        }\n\n\n\n        uint compDelta = holderAccrued - compAccrued[holder];\n\n        if (distribute) {\n\n            compAccrued[holder] = grantCompInternal(holder, holderAccrued);\n\n        } else {\n\n            compAccrued[holder] = holderAccrued;\n\n        }\n\n        if (isSupply) {\n\n            emit DistributedSupplierComp(CToken(cToken), holder, compDelta, marketIndex.mantissa);\n\n        } else {\n\n            emit DistributedBorrowerComp(CToken(cToken), holder, compDelta, marketIndex.mantissa);\n\n        }\n\n    }\n\n\n\n    /**\n",
          "message": "Reentrancy in Comptroller.distributeMarketComp (CEtherHarness.sol#4641-4708):\n\tExternal calls:\n\t- holderHoldings = CToken(cToken).balanceOf(holder) (CEtherHarness.sol#4677-4678)\n\t- holderHoldings = div_(CToken(cToken).borrowBalanceStored(holder),marketBorrowIndex) (CEtherHarness.sol#4679-4681)\n\tState variables written after the call(s):\n\t- compAccrued (CEtherHarness.sol#4698-4700)\n\t- compVesting (CEtherHarness.sol#4691-4694)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 4641,
          "vulnerability_to_line": 4708,
          "vulnerability_code": "    function distributeMarketComp(address cToken, address holder, bool distribute, CompMarketState storage marketState, CompMarketState storage vestingState, bool isSupply,\n\n            Exp memory marketBorrowIndex) internal {\n\n        Double memory marketIndex = Double({mantissa: marketState.index});\n\n        Double memory holderIndex;\n\n        if (isSupply) {\n\n            holderIndex = Double({mantissa: compSupplierIndex[cToken][holder]});\n\n            compSupplierIndex[cToken][holder] = marketIndex.mantissa;\n\n\n\n            if (holderIndex.mantissa == 0 && marketIndex.mantissa > 0) {\n\n                holderIndex.mantissa = compInitialIndex;\n\n            }\n\n        } else {\n\n            holderIndex = Double({mantissa: compBorrowerIndex[cToken][holder]});\n\n            compBorrowerIndex[cToken][holder] = marketIndex.mantissa;\n\n        }\n\n\n\n        // Accrue vested COMP\n\n        uint holderAccrued = compAccrued[holder];\n\n        if (lastVestingBlock > vestingBlock[holder]) {\n\n            vestingBlock[holder] = lastVestingBlock;\n\n\n\n            holderAccrued = add_(holderAccrued, compVesting[holder]);\n\n            compVesting[holder] = 0;\n\n        }\n\n\n\n        Double memory marketVestingIndex = holderIndex;\n\n        if (vestingState.index > holderIndex.mantissa) {\n\n            marketVestingIndex = Double({mantissa: vestingState.index});\n\n        }\n\n\n\n        if (isSupply || holderIndex.mantissa > 0) {\n\n            // Accrue COMP that was earned leading up to vesting event\n\n            Double memory deltaIndex;\n\n            uint holderDelta;\n\n            uint holderHoldings;\n\n            if (isSupply) {\n\n                holderHoldings = CToken(cToken).balanceOf(holder);\n\n            } else {\n\n                holderHoldings = div_(CToken(cToken).borrowBalanceStored(holder), marketBorrowIndex);\n\n            }\n\n\n\n            if (marketVestingIndex.mantissa > holderIndex.mantissa) {\n\n                deltaIndex = sub_(marketVestingIndex, holderIndex);\n\n                holderDelta = mul_(holderHoldings, deltaIndex);\n\n                holderAccrued = add_(holderAccrued, holderDelta);\n\n            }\n\n\n\n            // Vest any new COMP earned after vesting event\n\n            deltaIndex = sub_(marketIndex, marketVestingIndex);\n\n            holderDelta = mul_(holderHoldings, deltaIndex);\n\n            compVesting[holder] = add_(compVesting[holder], holderDelta);\n\n        }\n\n\n\n        uint compDelta = holderAccrued - compAccrued[holder];\n\n        if (distribute) {\n\n            compAccrued[holder] = grantCompInternal(holder, holderAccrued);\n\n        } else {\n\n            compAccrued[holder] = holderAccrued;\n\n        }\n\n        if (isSupply) {\n\n            emit DistributedSupplierComp(CToken(cToken), holder, compDelta, marketIndex.mantissa);\n\n        } else {\n\n            emit DistributedBorrowerComp(CToken(cToken), holder, compDelta, marketIndex.mantissa);\n\n        }\n\n    }\n\n\n\n    /**\n",
          "message": "Reentrancy in Comptroller.distributeMarketComp (CEtherHarness.sol#4641-4708):\n\tExternal calls:\n\t- holderHoldings = CToken(cToken).balanceOf(holder) (CEtherHarness.sol#4677-4678)\n\t- holderHoldings = div_(CToken(cToken).borrowBalanceStored(holder),marketBorrowIndex) (CEtherHarness.sol#4679-4681)\n\t- compAccrued[holder] = grantCompInternal(holder,holderAccrued) (CEtherHarness.sol#4696-4697)\n\tState variables written after the call(s):\n\t- compAccrued (CEtherHarness.sol#4696-4697)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 3639,
          "vulnerability_to_line": 3691,
          "vulnerability_code": "    function exitMarket(address cTokenAddress) external returns (uint) {\n\n        CToken cToken = CToken(cTokenAddress);\n\n        /* Get sender tokensHeld and amountOwed underlying from the cToken */\n\n        (uint oErr, uint tokensHeld, uint amountOwed, ) = cToken.getAccountSnapshot(msg.sender);\n\n        require(oErr == 0, \"exitMarket: getAccountSnapshot failed\"); // semi-opaque error code\n\n\n\n        /* Fail if the sender has a borrow balance */\n\n        if (amountOwed != 0) {\n\n            return fail(Error.NONZERO_BORROW_BALANCE, FailureInfo.EXIT_MARKET_BALANCE_OWED);\n\n        }\n\n\n\n        /* Fail if the sender is not permitted to redeem all of their tokens */\n\n        uint allowed = redeemAllowedInternal(cTokenAddress, msg.sender, tokensHeld);\n\n        if (allowed != 0) {\n\n            return failOpaque(Error.REJECTION, FailureInfo.EXIT_MARKET_REJECTION, allowed);\n\n        }\n\n\n\n        Market storage marketToExit = markets[address(cToken)];\n\n\n\n        /* Return true if the sender is not already \u2018in\u2019 the market */\n\n        if (!marketToExit.accountMembership[msg.sender]) {\n\n            return uint(Error.NO_ERROR);\n\n        }\n\n\n\n        /* Set cToken account membership to false */\n\n        delete marketToExit.accountMembership[msg.sender];\n\n\n\n        /* Delete cToken from the account\u2019s list of assets */\n\n        // load into memory for faster iteration\n\n        CToken[] memory userAssetList = accountAssets[msg.sender];\n\n        uint len = userAssetList.length;\n\n        uint assetIndex = len;\n\n        for (uint i = 0; i < len; i++) {\n\n            if (userAssetList[i] == cToken) {\n\n                assetIndex = i;\n\n                break;\n\n            }\n\n        }\n\n\n\n        // We *must* have found the asset in the list or our redundant data structure is broken\n\n        assert(assetIndex < len);\n\n\n\n        // copy last item in list to location of item to be removed, reduce length by 1\n\n        CToken[] storage storedList = accountAssets[msg.sender];\n\n        storedList[assetIndex] = storedList[storedList.length - 1];\n\n        storedList.length--;\n\n\n\n        emit MarketExited(cToken, msg.sender);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n",
          "message": "Reentrancy in Comptroller.exitMarket (CEtherHarness.sol#3639-3691):\n\tExternal calls:\n\t- (oErr,tokensHeld,amountOwed) = cToken.getAccountSnapshot(msg.sender) (CEtherHarness.sol#3642-3643)\n\t- allowed = redeemAllowedInternal(cTokenAddress,msg.sender,tokensHeld) (CEtherHarness.sol#3651-3652)\n\tState variables written after the call(s):\n\t- accountAssets (CEtherHarness.sol#3683-3684)\n\t- accountAssets (CEtherHarness.sol#3684-3686)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 1241,
          "vulnerability_to_line": 1272,
          "vulnerability_code": "    function initialize(ComptrollerInterface comptroller_,\n\n                        InterestRateModel interestRateModel_,\n\n                        uint initialExchangeRateMantissa_,\n\n                        string memory name_,\n\n                        string memory symbol_,\n\n                        uint8 decimals_) public {\n\n        require(msg.sender == admin, \"only admin may initialize the market\");\n\n        require(accrualBlockNumber == 0 && borrowIndex == 0, \"market may only be initialized once\");\n\n\n\n        // Set initial exchange rate\n\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\n\n        require(initialExchangeRateMantissa > 0, \"initial exchange rate must be greater than zero.\");\n\n\n\n        // Set the comptroller\n\n        uint err = _setComptroller(comptroller_);\n\n        require(err == uint(Error.NO_ERROR), \"setting comptroller failed\");\n\n\n\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\n\n        accrualBlockNumber = getBlockNumber();\n\n        borrowIndex = mantissaOne;\n\n\n\n        // Set the interest rate model (depends on block number / borrow index)\n\n        err = _setInterestRateModelFresh(interestRateModel_);\n\n        require(err == uint(Error.NO_ERROR), \"setting interest rate model failed\");\n\n\n\n        name = name_;\n\n        symbol = symbol_;\n\n        decimals = decimals_;\n\n\n\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\n\n        _notEntered = true;\n",
          "message": "Reentrancy in CToken.initialize (CEtherHarness.sol#1241-1272):\n\tExternal calls:\n\t- err = _setComptroller(comptroller_) (CEtherHarness.sol#1255)\n\tState variables written after the call(s):\n\t- accrualBlockNumber (CEtherHarness.sol#1259)\n\t- borrowIndex (CEtherHarness.sol#1260)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 2141,
          "vulnerability_to_line": 2156,
          "vulnerability_code": "    function liquidateBorrowInternal(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal nonReentrant returns (uint, uint) {\n\n        uint error = accrueInterest();\n\n        if (error != uint(Error.NO_ERROR)) {\n\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\n\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED), 0);\n\n        }\n\n\n\n        error = cTokenCollateral.accrueInterest();\n\n        if (error != uint(Error.NO_ERROR)) {\n\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\n\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED), 0);\n\n        }\n\n\n\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\n\n        return liquidateBorrowFresh(msg.sender, borrower, repayAmount, cTokenCollateral);\n",
          "message": "Reentrancy in CToken.liquidateBorrowInternal (CEtherHarness.sol#2141-2156):\n\tExternal calls:\n\t- error = accrueInterest() (CEtherHarness.sol#2142)\n\t- error = cTokenCollateral.accrueInterest() (CEtherHarness.sol#2148)\n\t- liquidateBorrowFresh(msg.sender,borrower,repayAmount,cTokenCollateral) (CEtherHarness.sol#2155)\n\tState variables written after the call(s):\n\t- totalBorrows (CEtherHarness.sol#2155)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 1828,
          "vulnerability_to_line": 1922,
          "vulnerability_code": "    function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal returns (uint) {\n\n        require(redeemTokensIn == 0 || redeemAmountIn == 0, \"one of redeemTokensIn or redeemAmountIn must be zero\");\n\n\n\n        RedeemLocalVars memory vars;\n\n\n\n        /* exchangeRate = invoke Exchange Rate Stored() */\n\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\n\n        if (vars.mathErr != MathError.NO_ERROR) {\n\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr));\n\n        }\n\n\n\n        /* If redeemTokensIn > 0: */\n\n        if (redeemTokensIn > 0) {\n\n            /*\n\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\n\n             *  redeemTokens = redeemTokensIn\n\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\n\n             */\n\n            vars.redeemTokens = redeemTokensIn;\n\n\n\n            (vars.mathErr, vars.redeemAmount) = mulScalarTruncate(Exp({mantissa: vars.exchangeRateMantissa}), redeemTokensIn);\n\n            if (vars.mathErr != MathError.NO_ERROR) {\n\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED, uint(vars.mathErr));\n\n            }\n\n        } else {\n\n            /*\n\n             * We get the current exchange rate and calculate the amount to be redeemed:\n\n             *  redeemTokens = redeemAmountIn / exchangeRate\n\n             *  redeemAmount = redeemAmountIn\n\n             */\n\n\n\n            (vars.mathErr, vars.redeemTokens) = divScalarByExpTruncate(redeemAmountIn, Exp({mantissa: vars.exchangeRateMantissa}));\n\n            if (vars.mathErr != MathError.NO_ERROR) {\n\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED, uint(vars.mathErr));\n\n            }\n\n\n\n            vars.redeemAmount = redeemAmountIn;\n\n        }\n\n\n\n        /* Fail if redeem not allowed */\n\n        uint allowed = comptroller.redeemAllowed(address(this), redeemer, vars.redeemTokens);\n\n        if (allowed != 0) {\n\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REDEEM_COMPTROLLER_REJECTION, allowed);\n\n        }\n\n\n\n        /* Verify market's block number equals current block number */\n\n        if (accrualBlockNumber != getBlockNumber()) {\n\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDEEM_FRESHNESS_CHECK);\n\n        }\n\n\n\n        /*\n\n         * We calculate the new total supply and redeemer balance, checking for underflow:\n\n         *  totalSupplyNew = totalSupply - redeemTokens\n\n         *  accountTokensNew = accountTokens[redeemer] - redeemTokens\n\n         */\n\n        (vars.mathErr, vars.totalSupplyNew) = subUInt(totalSupply, vars.redeemTokens);\n\n        if (vars.mathErr != MathError.NO_ERROR) {\n\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED, uint(vars.mathErr));\n\n        }\n\n\n\n        (vars.mathErr, vars.accountTokensNew) = subUInt(accountTokens[redeemer], vars.redeemTokens);\n\n        if (vars.mathErr != MathError.NO_ERROR) {\n\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\n\n        }\n\n\n\n        /* Fail gracefully if protocol has insufficient cash */\n\n        if (getCashPrior() < vars.redeemAmount) {\n\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDEEM_TRANSFER_OUT_NOT_POSSIBLE);\n\n        }\n\n\n\n        /////////////////////////\n\n        // EFFECTS & INTERACTIONS\n\n        // (No safe failures beyond this point)\n\n\n\n        /*\n\n         * We invoke doTransferOut for the redeemer and the redeemAmount.\n\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\n\n         *  On success, the cToken has redeemAmount less of cash.\n\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\n\n         */\n\n        doTransferOut(redeemer, vars.redeemAmount);\n\n\n\n        /* We write previously calculated values into storage */\n\n        totalSupply = vars.totalSupplyNew;\n\n        accountTokens[redeemer] = vars.accountTokensNew;\n\n\n\n        /* We emit a Transfer event, and a Redeem event */\n\n        emit Transfer(redeemer, address(this), vars.redeemTokens);\n\n        emit Redeem(redeemer, vars.redeemAmount, vars.redeemTokens);\n\n\n\n        /* We call the defense hook */\n\n        comptroller.redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);\n\n\n\n        return uint(Error.NO_ERROR);\n",
          "message": "Reentrancy in CToken.redeemFresh (CEtherHarness.sol#1828-1922):\n\tExternal calls:\n\t- allowed = comptroller.redeemAllowed(address(this),redeemer,vars.redeemTokens) (CEtherHarness.sol#1868)\n\tState variables written after the call(s):\n\t- totalSupply (CEtherHarness.sol#1911)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 2037,
          "vulnerability_to_line": 2045,
          "vulnerability_code": "    function repayBorrowBehalfInternal(address borrower, uint repayAmount) internal nonReentrant returns (uint, uint) {\n\n        uint error = accrueInterest();\n\n        if (error != uint(Error.NO_ERROR)) {\n\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\n\n            return (fail(Error(error), FailureInfo.REPAY_BEHALF_ACCRUE_INTEREST_FAILED), 0);\n\n        }\n\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\n\n        return repayBorrowFresh(msg.sender, borrower, repayAmount);\n",
          "message": "Reentrancy in CToken.repayBorrowBehalfInternal (CEtherHarness.sol#2037-2045):\n\tExternal calls:\n\t- error = accrueInterest() (CEtherHarness.sol#2038)\n\t- repayBorrowFresh(msg.sender,borrower,repayAmount) (CEtherHarness.sol#2044)\n\tState variables written after the call(s):\n\t- totalBorrows (CEtherHarness.sol#2044)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 2021,
          "vulnerability_to_line": 2029,
          "vulnerability_code": "    function repayBorrowInternal(uint repayAmount) internal nonReentrant returns (uint, uint) {\n\n        uint error = accrueInterest();\n\n        if (error != uint(Error.NO_ERROR)) {\n\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\n\n            return (fail(Error(error), FailureInfo.REPAY_BORROW_ACCRUE_INTEREST_FAILED), 0);\n\n        }\n\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\n\n        return repayBorrowFresh(msg.sender, msg.sender, repayAmount);\n",
          "message": "Reentrancy in CToken.repayBorrowInternal (CEtherHarness.sol#2021-2029):\n\tExternal calls:\n\t- error = accrueInterest() (CEtherHarness.sol#2022)\n\t- repayBorrowFresh(msg.sender,msg.sender,repayAmount) (CEtherHarness.sol#2028)\n\tState variables written after the call(s):\n\t- totalBorrows (CEtherHarness.sol#2028)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 4012,
          "vulnerability_to_line": 4042,
          "vulnerability_code": "    function seizeAllowed(\n\n        address cTokenCollateral,\n\n        address cTokenBorrowed,\n\n        address liquidator,\n\n        address borrower,\n\n        uint seizeTokens) external returns (uint) {\n\n        // Pausing is a very serious situation - we revert to sound the alarms\n\n        require(!seizeGuardianPaused, \"seize is paused\");\n\n\n\n        // Shh - currently unused\n\n        seizeTokens;\n\n\n\n        if (!markets[cTokenCollateral].isListed || !markets[cTokenBorrowed].isListed) {\n\n            return uint(Error.MARKET_NOT_LISTED);\n\n        }\n\n\n\n        if (CToken(cTokenCollateral).comptroller() != CToken(cTokenBorrowed).comptroller()) {\n\n            return uint(Error.COMPTROLLER_MISMATCH);\n\n        }\n\n\n\n        // Keep the flywheel moving\n\n        updateLastVestingBlockInternal();\n\n        updateCompSupplyIndex(cTokenCollateral);\n\n        distributeSupplierComp(cTokenCollateral, borrower, false);\n\n        distributeSupplierComp(cTokenCollateral, liquidator, false);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n\n    /**\n",
          "message": "Reentrancy in Comptroller.seizeAllowed (CEtherHarness.sol#4012-4042):\n\tExternal calls:\n\t- updateCompSupplyIndex(cTokenCollateral) (CEtherHarness.sol#4034-4035)\n\t- distributeSupplierComp(cTokenCollateral,borrower,false) (CEtherHarness.sol#4035-4036)\n\t- distributeSupplierComp(cTokenCollateral,liquidator,false) (CEtherHarness.sol#4036-4038)\n\tState variables written after the call(s):\n\t- compAccrued (CEtherHarness.sol#4036-4038)\n\t- compBorrowerIndex (CEtherHarness.sol#4036-4038)\n\t- compSupplierIndex (CEtherHarness.sol#4036-4038)\n\t- compVesting (CEtherHarness.sol#4036-4038)\n\t- vestingBlock (CEtherHarness.sol#4036-4038)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 4076,
          "vulnerability_to_line": 4097,
          "vulnerability_code": "    function transferAllowed(address cToken, address src, address dst, uint transferTokens) external returns (uint) {\n\n        // Pausing is a very serious situation - we revert to sound the alarms\n\n        require(!transferGuardianPaused, \"transfer is paused\");\n\n\n\n        // Currently the only consideration is whether or not\n\n        //  the src is allowed to redeem this many tokens\n\n        uint allowed = redeemAllowedInternal(cToken, src, transferTokens);\n\n        if (allowed != uint(Error.NO_ERROR)) {\n\n            return allowed;\n\n        }\n\n\n\n        // Keep the flywheel moving\n\n        updateLastVestingBlockInternal();\n\n        updateCompSupplyIndex(cToken);\n\n        distributeSupplierComp(cToken, src, false);\n\n        distributeSupplierComp(cToken, dst, false);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n\n    /**\n",
          "message": "Reentrancy in Comptroller.transferAllowed (CEtherHarness.sol#4076-4097):\n\tExternal calls:\n\t- allowed = redeemAllowedInternal(cToken,src,transferTokens) (CEtherHarness.sol#4082-4083)\n\t- updateCompSupplyIndex(cToken) (CEtherHarness.sol#4089-4090)\n\t- distributeSupplierComp(cToken,src,false) (CEtherHarness.sol#4090-4091)\n\t- distributeSupplierComp(cToken,dst,false) (CEtherHarness.sol#4091-4093)\n\tState variables written after the call(s):\n\t- compAccrued (CEtherHarness.sol#4091-4093)\n\t- compBorrowerIndex (CEtherHarness.sol#4091-4093)\n\t- compSupplierIndex (CEtherHarness.sol#4091-4093)\n\t- compVesting (CEtherHarness.sol#4091-4093)\n\t- vestingBlock (CEtherHarness.sol#4091-4093)\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 1968,
          "vulnerability_to_line": null,
          "vulnerability_code": "        BorrowLocalVars memory vars;\n",
          "message": "vars in CToken.borrowFresh (CEtherHarness.sol#1968) is a local variable never initialiazed\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 3843,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (Error err, , uint shortfall) = getHypotheticalAccountLiquidityInternal(borrower, CToken(cToken), 0, borrowAmount);\n",
          "message": "err_scope_0 in Comptroller.borrowAllowed (CEtherHarness.sol#3843) is a local variable never initialiazed\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 1831,
          "vulnerability_to_line": null,
          "vulnerability_code": "        RedeemLocalVars memory vars;\n",
          "message": "vars in CToken.redeemFresh (CEtherHarness.sol#1831) is a local variable never initialiazed\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 2456,
          "vulnerability_to_line": 2458,
          "vulnerability_code": "        uint actualAddAmount;\n\n\n",
          "message": "actualAddAmount in CToken._addReservesFresh (CEtherHarness.sol#2456-2458) is a local variable never initialiazed\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 1724,
          "vulnerability_to_line": null,
          "vulnerability_code": "        MintLocalVars memory vars;\n",
          "message": "vars in CToken.mintFresh (CEtherHarness.sol#1724) is a local variable never initialiazed\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 2077,
          "vulnerability_to_line": null,
          "vulnerability_code": "        RepayBorrowLocalVars memory vars;\n",
          "message": "vars in CToken.repayBorrowFresh (CEtherHarness.sol#2077) is a local variable never initialiazed\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 4390,
          "vulnerability_to_line": 4410,
          "vulnerability_code": "    function _supportMarket(CToken cToken) external returns (uint) {\n\n        if (msg.sender != admin) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_MARKET_OWNER_CHECK);\n\n        }\n\n\n\n        if (markets[address(cToken)].isListed) {\n\n            return fail(Error.MARKET_ALREADY_LISTED, FailureInfo.SUPPORT_MARKET_EXISTS);\n\n        }\n\n\n\n        cToken.isCToken(); // Sanity check to make sure its really a CToken\n\n\n\n        markets[address(cToken)] = Market({isListed: true, isComped: false, collateralFactorMantissa: 0});\n\n\n\n        _addMarketInternal(address(cToken));\n\n\n\n        emit MarketListed(cToken);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n",
          "message": "Comptroller._supportMarket (CEtherHarness.sol#4390-4410) does not use the value returned by external calls:\n\t-cToken.isCToken() (CEtherHarness.sol#4399)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 4781,
          "vulnerability_to_line": 4791,
          "vulnerability_code": "    function grantCompInternal(address user, uint amount) internal returns (uint) {\n\n        Comp comp = Comp(getCompAddress());\n\n        uint compRemaining = comp.balanceOf(address(this));\n\n        if (amount <= compRemaining) {\n\n            comp.transfer(user, amount);\n\n            return 0;\n\n        }\n\n        return amount;\n\n    }\n\n\n",
          "message": "Comptroller.grantCompInternal (CEtherHarness.sol#4781-4791) does not use the value returned by external calls:\n\t-comp.transfer(user,amount) (CEtherHarness.sol#4785-4786)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 859,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\n",
          "message": "Exponential.divScalarByExpTruncate.fraction (local variable @ CEtherHarness.sol#859) shadows:\n\t- Exponential.fraction (function @ CEtherHarness.sol#1073-1075)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 4588,
          "vulnerability_to_line": 4589,
          "vulnerability_code": "            uint compAccrued;\n",
          "message": "Comptroller.updateCompMarketIndex.compAccrued (local variable @ CEtherHarness.sol#4588-4589) shadows:\n\t- ComptrollerV3Storage.compAccrued (state variable @ CEtherHarness.sol#2958-2961)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 4922,
          "vulnerability_to_line": 4923,
          "vulnerability_code": "        uint vestingBlock = add_(sub_(blockNumber, currentBlockOffset), vestingOffset);\n",
          "message": "Comptroller.lastVestingBlockBeforeInternal.vestingBlock (local variable @ CEtherHarness.sol#4922-4923) shadows:\n\t- ComptrollerV5Storage.vestingBlock (state variable @ CEtherHarness.sol#2989-2991)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 5023,
          "vulnerability_to_line": 5024,
          "vulnerability_code": "                uint initialExchangeRateMantissa,\n",
          "message": "CEtherHarness.constructor.initialExchangeRateMantissa (local variable @ CEtherHarness.sol#5023-5024) shadows:\n\t- CTokenStorage.initialExchangeRateMantissa (state variable @ CEtherHarness.sol#168)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 5177,
          "vulnerability_to_line": 5178,
          "vulnerability_code": "                uint initialExchangeRateMantissa)\n",
          "message": "CEtherScenario.constructor.initialExchangeRateMantissa (local variable @ CEtherHarness.sol#5177-5178) shadows:\n\t- CTokenStorage.initialExchangeRateMantissa (state variable @ CEtherHarness.sol#168)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 4390,
          "vulnerability_to_line": 4410,
          "vulnerability_code": "    function _supportMarket(CToken cToken) external returns (uint) {\n\n        if (msg.sender != admin) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_MARKET_OWNER_CHECK);\n\n        }\n\n\n\n        if (markets[address(cToken)].isListed) {\n\n            return fail(Error.MARKET_ALREADY_LISTED, FailureInfo.SUPPORT_MARKET_EXISTS);\n\n        }\n\n\n\n        cToken.isCToken(); // Sanity check to make sure its really a CToken\n\n\n\n        markets[address(cToken)] = Market({isListed: true, isComped: false, collateralFactorMantissa: 0});\n\n\n\n        _addMarketInternal(address(cToken));\n\n\n\n        emit MarketListed(cToken);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n",
          "message": "Reentrancy in Comptroller._supportMarket (CEtherHarness.sol#4390-4410):\n\tExternal calls:\n\t- cToken.isCToken() (CEtherHarness.sol#4399)\n\tState variables written after the call(s):\n\t- allMarkets (CEtherHarness.sol#4403-4405)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 3808,
          "vulnerability_to_line": 3861,
          "vulnerability_code": "    function borrowAllowed(address cToken, address borrower, uint borrowAmount) external returns (uint) {\n\n        // Pausing is a very serious situation - we revert to sound the alarms\n\n        require(!borrowGuardianPaused[cToken], \"borrow is paused\");\n\n\n\n        if (!markets[cToken].isListed) {\n\n            return uint(Error.MARKET_NOT_LISTED);\n\n        }\n\n\n\n        if (!markets[cToken].accountMembership[borrower]) {\n\n            // only cTokens may call borrowAllowed if borrower not in market\n\n            require(msg.sender == cToken, \"sender must be cToken\");\n\n\n\n            // attempt to add borrower to the market\n\n            Error err = addToMarketInternal(CToken(msg.sender), borrower);\n\n            if (err != Error.NO_ERROR) {\n\n                return uint(err);\n\n            }\n\n\n\n            // it should be impossible to break the important invariant\n\n            assert(markets[cToken].accountMembership[borrower]);\n\n        }\n\n\n\n        if (oracle.getUnderlyingPrice(CToken(cToken)) == 0) {\n\n            return uint(Error.PRICE_ERROR);\n\n        }\n\n\n\n\n\n        uint borrowCap = borrowCaps[cToken];\n\n        // Borrow cap of 0 corresponds to unlimited borrowing\n\n        if (borrowCap != 0) {\n\n            uint totalBorrows = CToken(cToken).totalBorrows();\n\n            uint nextTotalBorrows = add_(totalBorrows, borrowAmount);\n\n            require(nextTotalBorrows < borrowCap, \"market borrow cap reached\");\n\n        }\n\n\n\n        (Error err, , uint shortfall) = getHypotheticalAccountLiquidityInternal(borrower, CToken(cToken), 0, borrowAmount);\n\n        if (err != Error.NO_ERROR) {\n\n            return uint(err);\n\n        }\n\n        if (shortfall > 0) {\n\n            return uint(Error.INSUFFICIENT_LIQUIDITY);\n\n        }\n\n\n\n        // Keep the flywheel moving\n\n        Exp memory borrowIndex = Exp({mantissa: CToken(cToken).borrowIndex()});\n\n        updateLastVestingBlockInternal();\n\n        updateCompBorrowIndex(cToken, borrowIndex);\n\n        distributeBorrowerComp(cToken, borrower, borrowIndex, false);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n\n    /**\n",
          "message": "Reentrancy in Comptroller.borrowAllowed (CEtherHarness.sol#3808-3861):\n\tExternal calls:\n\t- totalBorrows = CToken(cToken).totalBorrows() (CEtherHarness.sol#3838-3839)\n\t- (err,shortfall) = getHypotheticalAccountLiquidityInternal(borrower,CToken(cToken),0,borrowAmount) (CEtherHarness.sol#3843-3844)\n\t- borrowIndex = Exp(CToken(cToken).borrowIndex()) (CEtherHarness.sol#3852-3853)\n\tState variables written after the call(s):\n\t- lastVestingBlock (CEtherHarness.sol#3853-3854)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1951,
          "vulnerability_to_line": 2014,
          "vulnerability_code": "    function borrowFresh(address payable borrower, uint borrowAmount) internal returns (uint) {\n\n        /* Fail if borrow not allowed */\n\n        uint allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);\n\n        if (allowed != 0) {\n\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.BORROW_COMPTROLLER_REJECTION, allowed);\n\n        }\n\n\n\n        /* Verify market's block number equals current block number */\n\n        if (accrualBlockNumber != getBlockNumber()) {\n\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.BORROW_FRESHNESS_CHECK);\n\n        }\n\n\n\n        /* Fail gracefully if protocol has insufficient underlying cash */\n\n        if (getCashPrior() < borrowAmount) {\n\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.BORROW_CASH_NOT_AVAILABLE);\n\n        }\n\n\n\n        BorrowLocalVars memory vars;\n\n\n\n        /*\n\n         * We calculate the new borrower and total borrow balances, failing on overflow:\n\n         *  accountBorrowsNew = accountBorrows + borrowAmount\n\n         *  totalBorrowsNew = totalBorrows + borrowAmount\n\n         */\n\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\n\n        if (vars.mathErr != MathError.NO_ERROR) {\n\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\n\n        }\n\n\n\n        (vars.mathErr, vars.accountBorrowsNew) = addUInt(vars.accountBorrows, borrowAmount);\n\n        if (vars.mathErr != MathError.NO_ERROR) {\n\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\n\n        }\n\n\n\n        (vars.mathErr, vars.totalBorrowsNew) = addUInt(totalBorrows, borrowAmount);\n\n        if (vars.mathErr != MathError.NO_ERROR) {\n\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\n\n        }\n\n\n\n        /////////////////////////\n\n        // EFFECTS & INTERACTIONS\n\n        // (No safe failures beyond this point)\n\n\n\n        /*\n\n         * We invoke doTransferOut for the borrower and the borrowAmount.\n\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\n\n         *  On success, the cToken borrowAmount less of cash.\n\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\n\n         */\n\n        doTransferOut(borrower, borrowAmount);\n\n\n\n        /* We write the previously calculated values into storage */\n\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\n\n        accountBorrows[borrower].interestIndex = borrowIndex;\n\n        totalBorrows = vars.totalBorrowsNew;\n\n\n\n        /* We emit a Borrow event */\n\n        emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\n\n\n\n        /* We call the defense hook */\n\n        comptroller.borrowVerify(address(this), borrower, borrowAmount);\n\n\n\n        return uint(Error.NO_ERROR);\n",
          "message": "Reentrancy in CToken.borrowFresh (CEtherHarness.sol#1951-2014):\n\tExternal calls:\n\t- allowed = comptroller.borrowAllowed(address(this),borrower,borrowAmount) (CEtherHarness.sol#1953)\n\tState variables written after the call(s):\n\t- accountBorrows (CEtherHarness.sol#2003)\n\t- accountBorrows (CEtherHarness.sol#2004)\n\t- totalBorrows (CEtherHarness.sol#2005)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1241,
          "vulnerability_to_line": 1272,
          "vulnerability_code": "    function initialize(ComptrollerInterface comptroller_,\n\n                        InterestRateModel interestRateModel_,\n\n                        uint initialExchangeRateMantissa_,\n\n                        string memory name_,\n\n                        string memory symbol_,\n\n                        uint8 decimals_) public {\n\n        require(msg.sender == admin, \"only admin may initialize the market\");\n\n        require(accrualBlockNumber == 0 && borrowIndex == 0, \"market may only be initialized once\");\n\n\n\n        // Set initial exchange rate\n\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\n\n        require(initialExchangeRateMantissa > 0, \"initial exchange rate must be greater than zero.\");\n\n\n\n        // Set the comptroller\n\n        uint err = _setComptroller(comptroller_);\n\n        require(err == uint(Error.NO_ERROR), \"setting comptroller failed\");\n\n\n\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\n\n        accrualBlockNumber = getBlockNumber();\n\n        borrowIndex = mantissaOne;\n\n\n\n        // Set the interest rate model (depends on block number / borrow index)\n\n        err = _setInterestRateModelFresh(interestRateModel_);\n\n        require(err == uint(Error.NO_ERROR), \"setting interest rate model failed\");\n\n\n\n        name = name_;\n\n        symbol = symbol_;\n\n        decimals = decimals_;\n\n\n\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\n\n        _notEntered = true;\n",
          "message": "Reentrancy in CToken.initialize (CEtherHarness.sol#1241-1272):\n\tExternal calls:\n\t- err = _setComptroller(comptroller_) (CEtherHarness.sol#1255)\n\t- err = _setInterestRateModelFresh(interestRateModel_) (CEtherHarness.sol#1263)\n\tState variables written after the call(s):\n\t- _notEntered (CEtherHarness.sol#1271)\n\t- decimals (CEtherHarness.sol#1268)\n\t- name (CEtherHarness.sol#1266)\n\t- symbol (CEtherHarness.sol#1267)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1712,
          "vulnerability_to_line": 1776,
          "vulnerability_code": "    function mintFresh(address minter, uint mintAmount) internal returns (uint, uint) {\n\n        /* Fail if mint not allowed */\n\n        uint allowed = comptroller.mintAllowed(address(this), minter, mintAmount);\n\n        if (allowed != 0) {\n\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\n\n        }\n\n\n\n        /* Verify market's block number equals current block number */\n\n        if (accrualBlockNumber != getBlockNumber()) {\n\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);\n\n        }\n\n\n\n        MintLocalVars memory vars;\n\n\n\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\n\n        if (vars.mathErr != MathError.NO_ERROR) {\n\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr)), 0);\n\n        }\n\n\n\n        /////////////////////////\n\n        // EFFECTS & INTERACTIONS\n\n        // (No safe failures beyond this point)\n\n\n\n        /*\n\n         *  We call `doTransferIn` for the minter and the mintAmount.\n\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\n\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\n\n         *  side-effects occurred. The function returns the amount actually transferred,\n\n         *  in case of a fee. On success, the cToken holds an additional `actualMintAmount`\n\n         *  of cash.\n\n         */\n\n        vars.actualMintAmount = doTransferIn(minter, mintAmount);\n\n\n\n        /*\n\n         * We get the current exchange rate and calculate the number of cTokens to be minted:\n\n         *  mintTokens = actualMintAmount / exchangeRate\n\n         */\n\n\n\n        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(vars.actualMintAmount, Exp({mantissa: vars.exchangeRateMantissa}));\n\n        require(vars.mathErr == MathError.NO_ERROR, \"MINT_EXCHANGE_CALCULATION_FAILED\");\n\n\n\n        /*\n\n         * We calculate the new total supply of cTokens and minter token balance, checking for overflow:\n\n         *  totalSupplyNew = totalSupply + mintTokens\n\n         *  accountTokensNew = accountTokens[minter] + mintTokens\n\n         */\n\n        (vars.mathErr, vars.totalSupplyNew) = addUInt(totalSupply, vars.mintTokens);\n\n        require(vars.mathErr == MathError.NO_ERROR, \"MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED\");\n\n\n\n        (vars.mathErr, vars.accountTokensNew) = addUInt(accountTokens[minter], vars.mintTokens);\n\n        require(vars.mathErr == MathError.NO_ERROR, \"MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED\");\n\n\n\n        /* We write previously calculated values into storage */\n\n        totalSupply = vars.totalSupplyNew;\n\n        accountTokens[minter] = vars.accountTokensNew;\n\n\n\n        /* We emit a Mint event, and a Transfer event */\n\n        emit Mint(minter, vars.actualMintAmount, vars.mintTokens);\n\n        emit Transfer(address(this), minter, vars.mintTokens);\n\n\n\n        /* We call the defense hook */\n\n        comptroller.mintVerify(address(this), minter, vars.actualMintAmount, vars.mintTokens);\n\n\n\n        return (uint(Error.NO_ERROR), vars.actualMintAmount);\n",
          "message": "Reentrancy in CToken.mintFresh (CEtherHarness.sol#1712-1776):\n\tExternal calls:\n\t- allowed = comptroller.mintAllowed(address(this),minter,mintAmount) (CEtherHarness.sol#1714)\n\tState variables written after the call(s):\n\t- accountTokens (CEtherHarness.sol#1766)\n\t- totalSupply (CEtherHarness.sol#1765)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 3747,
          "vulnerability_to_line": 3761,
          "vulnerability_code": "    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) external returns (uint) {\n\n        uint allowed = redeemAllowedInternal(cToken, redeemer, redeemTokens);\n\n        if (allowed != uint(Error.NO_ERROR)) {\n\n            return allowed;\n\n        }\n\n\n\n        // Keep the flywheel moving\n\n        updateLastVestingBlockInternal();\n\n        updateCompSupplyIndex(cToken);\n\n        distributeSupplierComp(cToken, redeemer, false);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n",
          "message": "Reentrancy in Comptroller.redeemAllowed (CEtherHarness.sol#3747-3761):\n\tExternal calls:\n\t- allowed = redeemAllowedInternal(cToken,redeemer,redeemTokens) (CEtherHarness.sol#3748-3749)\n\tState variables written after the call(s):\n\t- lastVestingBlock (CEtherHarness.sol#3754-3755)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1828,
          "vulnerability_to_line": 1922,
          "vulnerability_code": "    function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal returns (uint) {\n\n        require(redeemTokensIn == 0 || redeemAmountIn == 0, \"one of redeemTokensIn or redeemAmountIn must be zero\");\n\n\n\n        RedeemLocalVars memory vars;\n\n\n\n        /* exchangeRate = invoke Exchange Rate Stored() */\n\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\n\n        if (vars.mathErr != MathError.NO_ERROR) {\n\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr));\n\n        }\n\n\n\n        /* If redeemTokensIn > 0: */\n\n        if (redeemTokensIn > 0) {\n\n            /*\n\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\n\n             *  redeemTokens = redeemTokensIn\n\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\n\n             */\n\n            vars.redeemTokens = redeemTokensIn;\n\n\n\n            (vars.mathErr, vars.redeemAmount) = mulScalarTruncate(Exp({mantissa: vars.exchangeRateMantissa}), redeemTokensIn);\n\n            if (vars.mathErr != MathError.NO_ERROR) {\n\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED, uint(vars.mathErr));\n\n            }\n\n        } else {\n\n            /*\n\n             * We get the current exchange rate and calculate the amount to be redeemed:\n\n             *  redeemTokens = redeemAmountIn / exchangeRate\n\n             *  redeemAmount = redeemAmountIn\n\n             */\n\n\n\n            (vars.mathErr, vars.redeemTokens) = divScalarByExpTruncate(redeemAmountIn, Exp({mantissa: vars.exchangeRateMantissa}));\n\n            if (vars.mathErr != MathError.NO_ERROR) {\n\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED, uint(vars.mathErr));\n\n            }\n\n\n\n            vars.redeemAmount = redeemAmountIn;\n\n        }\n\n\n\n        /* Fail if redeem not allowed */\n\n        uint allowed = comptroller.redeemAllowed(address(this), redeemer, vars.redeemTokens);\n\n        if (allowed != 0) {\n\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REDEEM_COMPTROLLER_REJECTION, allowed);\n\n        }\n\n\n\n        /* Verify market's block number equals current block number */\n\n        if (accrualBlockNumber != getBlockNumber()) {\n\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDEEM_FRESHNESS_CHECK);\n\n        }\n\n\n\n        /*\n\n         * We calculate the new total supply and redeemer balance, checking for underflow:\n\n         *  totalSupplyNew = totalSupply - redeemTokens\n\n         *  accountTokensNew = accountTokens[redeemer] - redeemTokens\n\n         */\n\n        (vars.mathErr, vars.totalSupplyNew) = subUInt(totalSupply, vars.redeemTokens);\n\n        if (vars.mathErr != MathError.NO_ERROR) {\n\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED, uint(vars.mathErr));\n\n        }\n\n\n\n        (vars.mathErr, vars.accountTokensNew) = subUInt(accountTokens[redeemer], vars.redeemTokens);\n\n        if (vars.mathErr != MathError.NO_ERROR) {\n\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\n\n        }\n\n\n\n        /* Fail gracefully if protocol has insufficient cash */\n\n        if (getCashPrior() < vars.redeemAmount) {\n\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDEEM_TRANSFER_OUT_NOT_POSSIBLE);\n\n        }\n\n\n\n        /////////////////////////\n\n        // EFFECTS & INTERACTIONS\n\n        // (No safe failures beyond this point)\n\n\n\n        /*\n\n         * We invoke doTransferOut for the redeemer and the redeemAmount.\n\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\n\n         *  On success, the cToken has redeemAmount less of cash.\n\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\n\n         */\n\n        doTransferOut(redeemer, vars.redeemAmount);\n\n\n\n        /* We write previously calculated values into storage */\n\n        totalSupply = vars.totalSupplyNew;\n\n        accountTokens[redeemer] = vars.accountTokensNew;\n\n\n\n        /* We emit a Transfer event, and a Redeem event */\n\n        emit Transfer(redeemer, address(this), vars.redeemTokens);\n\n        emit Redeem(redeemer, vars.redeemAmount, vars.redeemTokens);\n\n\n\n        /* We call the defense hook */\n\n        comptroller.redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);\n\n\n\n        return uint(Error.NO_ERROR);\n",
          "message": "Reentrancy in CToken.redeemFresh (CEtherHarness.sol#1828-1922):\n\tExternal calls:\n\t- allowed = comptroller.redeemAllowed(address(this),redeemer,vars.redeemTokens) (CEtherHarness.sol#1868)\n\tState variables written after the call(s):\n\t- accountTokens (CEtherHarness.sol#1912)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 3886,
          "vulnerability_to_line": 3910,
          "vulnerability_code": "    function repayBorrowAllowed(\n\n        address cToken,\n\n        address payer,\n\n        address borrower,\n\n        uint repayAmount) external returns (uint) {\n\n        // Shh - currently unused\n\n        payer;\n\n        borrower;\n\n        repayAmount;\n\n\n\n        if (!markets[cToken].isListed) {\n\n            return uint(Error.MARKET_NOT_LISTED);\n\n        }\n\n\n\n        // Keep the flywheel moving\n\n        Exp memory borrowIndex = Exp({mantissa: CToken(cToken).borrowIndex()});\n\n        updateLastVestingBlockInternal();\n\n        updateCompBorrowIndex(cToken, borrowIndex);\n\n        distributeBorrowerComp(cToken, borrower, borrowIndex, false);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n\n    /**\n",
          "message": "Reentrancy in Comptroller.repayBorrowAllowed (CEtherHarness.sol#3886-3910):\n\tExternal calls:\n\t- borrowIndex = Exp(CToken(cToken).borrowIndex()) (CEtherHarness.sol#3901-3902)\n\tState variables written after the call(s):\n\t- lastVestingBlock (CEtherHarness.sol#3902-3903)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 2065,
          "vulnerability_to_line": 2131,
          "vulnerability_code": "    function repayBorrowFresh(address payer, address borrower, uint repayAmount) internal returns (uint, uint) {\n\n        /* Fail if repayBorrow not allowed */\n\n        uint allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\n\n        if (allowed != 0) {\n\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION, allowed), 0);\n\n        }\n\n\n\n        /* Verify market's block number equals current block number */\n\n        if (accrualBlockNumber != getBlockNumber()) {\n\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.REPAY_BORROW_FRESHNESS_CHECK), 0);\n\n        }\n\n\n\n        RepayBorrowLocalVars memory vars;\n\n\n\n        /* We remember the original borrowerIndex for verification purposes */\n\n        vars.borrowerIndex = accountBorrows[borrower].interestIndex;\n\n\n\n        /* We fetch the amount the borrower owes, with accumulated interest */\n\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\n\n        if (vars.mathErr != MathError.NO_ERROR) {\n\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr)), 0);\n\n        }\n\n\n\n        /* If repayAmount == -1, repayAmount = accountBorrows */\n\n        if (repayAmount == uint(-1)) {\n\n            vars.repayAmount = vars.accountBorrows;\n\n        } else {\n\n            vars.repayAmount = repayAmount;\n\n        }\n\n\n\n        /////////////////////////\n\n        // EFFECTS & INTERACTIONS\n\n        // (No safe failures beyond this point)\n\n\n\n        /*\n\n         * We call doTransferIn for the payer and the repayAmount\n\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\n\n         *  On success, the cToken holds an additional repayAmount of cash.\n\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\n\n         *   it returns the amount actually transferred, in case of a fee.\n\n         */\n\n        vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount);\n\n\n\n        /*\n\n         * We calculate the new borrower and total borrow balances, failing on underflow:\n\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\n\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\n\n         */\n\n        (vars.mathErr, vars.accountBorrowsNew) = subUInt(vars.accountBorrows, vars.actualRepayAmount);\n\n        require(vars.mathErr == MathError.NO_ERROR, \"REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED\");\n\n\n\n        (vars.mathErr, vars.totalBorrowsNew) = subUInt(totalBorrows, vars.actualRepayAmount);\n\n        require(vars.mathErr == MathError.NO_ERROR, \"REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED\");\n\n\n\n        /* We write the previously calculated values into storage */\n\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\n\n        accountBorrows[borrower].interestIndex = borrowIndex;\n\n        totalBorrows = vars.totalBorrowsNew;\n\n\n\n        /* We emit a RepayBorrow event */\n\n        emit RepayBorrow(payer, borrower, vars.actualRepayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\n\n\n\n        /* We call the defense hook */\n\n        comptroller.repayBorrowVerify(address(this), payer, borrower, vars.actualRepayAmount, vars.borrowerIndex);\n\n\n\n        return (uint(Error.NO_ERROR), vars.actualRepayAmount);\n",
          "message": "Reentrancy in CToken.repayBorrowFresh (CEtherHarness.sol#2065-2131):\n\tExternal calls:\n\t- allowed = comptroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (CEtherHarness.sol#2067)\n\tState variables written after the call(s):\n\t- accountBorrows (CEtherHarness.sol#2120)\n\t- accountBorrows (CEtherHarness.sol#2121)\n\t- totalBorrows (CEtherHarness.sol#2122)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 2260,
          "vulnerability_to_line": 2306,
          "vulnerability_code": "    function seizeInternal(address seizerToken, address liquidator, address borrower, uint seizeTokens) internal returns (uint) {\n\n        /* Fail if seize not allowed */\n\n        uint allowed = comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens);\n\n        if (allowed != 0) {\n\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION, allowed);\n\n        }\n\n\n\n        /* Fail if borrower = liquidator */\n\n        if (borrower == liquidator) {\n\n            return fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER);\n\n        }\n\n\n\n        MathError mathErr;\n\n        uint borrowerTokensNew;\n\n        uint liquidatorTokensNew;\n\n\n\n        /*\n\n         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\n\n         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\n\n         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\n\n         */\n\n        (mathErr, borrowerTokensNew) = subUInt(accountTokens[borrower], seizeTokens);\n\n        if (mathErr != MathError.NO_ERROR) {\n\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED, uint(mathErr));\n\n        }\n\n\n\n        (mathErr, liquidatorTokensNew) = addUInt(accountTokens[liquidator], seizeTokens);\n\n        if (mathErr != MathError.NO_ERROR) {\n\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED, uint(mathErr));\n\n        }\n\n\n\n        /////////////////////////\n\n        // EFFECTS & INTERACTIONS\n\n        // (No safe failures beyond this point)\n\n\n\n        /* We write the previously calculated values into storage */\n\n        accountTokens[borrower] = borrowerTokensNew;\n\n        accountTokens[liquidator] = liquidatorTokensNew;\n\n\n\n        /* Emit a Transfer event */\n\n        emit Transfer(borrower, liquidator, seizeTokens);\n\n\n\n        /* We call the defense hook */\n\n        comptroller.seizeVerify(address(this), seizerToken, liquidator, borrower, seizeTokens);\n\n\n\n        return uint(Error.NO_ERROR);\n",
          "message": "Reentrancy in CToken.seizeInternal (CEtherHarness.sol#2260-2306):\n\tExternal calls:\n\t- allowed = comptroller.seizeAllowed(address(this),seizerToken,liquidator,borrower,seizeTokens) (CEtherHarness.sol#2262)\n\tState variables written after the call(s):\n\t- accountTokens (CEtherHarness.sol#2296)\n\t- accountTokens (CEtherHarness.sol#2297)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 4076,
          "vulnerability_to_line": 4097,
          "vulnerability_code": "    function transferAllowed(address cToken, address src, address dst, uint transferTokens) external returns (uint) {\n\n        // Pausing is a very serious situation - we revert to sound the alarms\n\n        require(!transferGuardianPaused, \"transfer is paused\");\n\n\n\n        // Currently the only consideration is whether or not\n\n        //  the src is allowed to redeem this many tokens\n\n        uint allowed = redeemAllowedInternal(cToken, src, transferTokens);\n\n        if (allowed != uint(Error.NO_ERROR)) {\n\n            return allowed;\n\n        }\n\n\n\n        // Keep the flywheel moving\n\n        updateLastVestingBlockInternal();\n\n        updateCompSupplyIndex(cToken);\n\n        distributeSupplierComp(cToken, src, false);\n\n        distributeSupplierComp(cToken, dst, false);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n\n    /**\n",
          "message": "Reentrancy in Comptroller.transferAllowed (CEtherHarness.sol#4076-4097):\n\tExternal calls:\n\t- allowed = redeemAllowedInternal(cToken,src,transferTokens) (CEtherHarness.sol#4082-4083)\n\tState variables written after the call(s):\n\t- lastVestingBlock (CEtherHarness.sol#4088-4089)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1283,
          "vulnerability_to_line": 1342,
          "vulnerability_code": "    function transferTokens(address spender, address src, address dst, uint tokens) internal returns (uint) {\n\n        /* Fail if transfer not allowed */\n\n        uint allowed = comptroller.transferAllowed(address(this), src, dst, tokens);\n\n        if (allowed != 0) {\n\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.TRANSFER_COMPTROLLER_REJECTION, allowed);\n\n        }\n\n\n\n        /* Do not allow self-transfers */\n\n        if (src == dst) {\n\n            return fail(Error.BAD_INPUT, FailureInfo.TRANSFER_NOT_ALLOWED);\n\n        }\n\n\n\n        /* Get the allowance, infinite for the account owner */\n\n        uint startingAllowance = 0;\n\n        if (spender == src) {\n\n            startingAllowance = uint(-1);\n\n        } else {\n\n            startingAllowance = transferAllowances[src][spender];\n\n        }\n\n\n\n        /* Do the calculations, checking for {under,over}flow */\n\n        MathError mathErr;\n\n        uint allowanceNew;\n\n        uint srcTokensNew;\n\n        uint dstTokensNew;\n\n\n\n        (mathErr, allowanceNew) = subUInt(startingAllowance, tokens);\n\n        if (mathErr != MathError.NO_ERROR) {\n\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ALLOWED);\n\n        }\n\n\n\n        (mathErr, srcTokensNew) = subUInt(accountTokens[src], tokens);\n\n        if (mathErr != MathError.NO_ERROR) {\n\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ENOUGH);\n\n        }\n\n\n\n        (mathErr, dstTokensNew) = addUInt(accountTokens[dst], tokens);\n\n        if (mathErr != MathError.NO_ERROR) {\n\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_TOO_MUCH);\n\n        }\n\n\n\n        /////////////////////////\n\n        // EFFECTS & INTERACTIONS\n\n        // (No safe failures beyond this point)\n\n\n\n        accountTokens[src] = srcTokensNew;\n\n        accountTokens[dst] = dstTokensNew;\n\n\n\n        /* Eat some of the allowance (if necessary) */\n\n        if (startingAllowance != uint(-1)) {\n\n            transferAllowances[src][spender] = allowanceNew;\n\n        }\n\n\n\n        /* We emit a Transfer event */\n\n        emit Transfer(src, dst, tokens);\n\n\n\n        comptroller.transferVerify(address(this), src, dst, tokens);\n\n\n\n        return uint(Error.NO_ERROR);\n",
          "message": "Reentrancy in CToken.transferTokens (CEtherHarness.sol#1283-1342):\n\tExternal calls:\n\t- allowed = comptroller.transferAllowed(address(this),src,dst,tokens) (CEtherHarness.sol#1285)\n\tState variables written after the call(s):\n\t- accountTokens (CEtherHarness.sol#1328)\n\t- accountTokens (CEtherHarness.sol#1329)\n\t- transferAllowances (CEtherHarness.sol#1333)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 3138,
          "vulnerability_to_line": 3153,
          "vulnerability_code": "    function () payable external {\n\n        // delegate all other functions to current implementation\n\n        (bool success, ) = comptrollerImplementation.delegatecall(msg.data);\n\n\n\n        assembly {\n\n              let free_mem_ptr := mload(0x40)\n\n              returndatacopy(free_mem_ptr, 0, returndatasize)\n\n\n\n              switch success\n\n              case 0 { revert(free_mem_ptr, returndatasize) }\n\n              default { return(free_mem_ptr, returndatasize) }\n\n        }\n\n    }\n\n}\n\n\n",
          "message": "Unitroller.fallback uses assembly (CEtherHarness.sol#3138-3153)\n\t- CEtherHarness.sol#3142-3153\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 3450,
          "vulnerability_to_line": 3457,
          "vulnerability_code": "    function getChainId() internal pure returns (uint) {\n\n        uint256 chainId;\n\n        assembly { chainId := chainid() }\n\n        return chainId;\n\n    }\n\n}\n\n\n",
          "message": "Comp.getChainId uses assembly (CEtherHarness.sol#3450-3457)\n\t- CEtherHarness.sol#3452-3453\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 379,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address public implementation;\n",
          "message": "CDelegationStorage.implementation should be constant (CEtherHarness.sol#379)\nCErc20Storage.underlying should be constant (CEtherHarness.sol#354)\nCEtherScenario.reserveFactor should be constant (CEtherHarness.sol#5169-5171)\nComptrollerV2Storage._borrowGuardianPaused should be constant (CEtherHarness.sol#2920-2921)\nComptrollerV2Storage._mintGuardianPaused should be constant (CEtherHarness.sol#2919-2920)\nComptrollerV3Storage.compRate should be constant (CEtherHarness.sol#2940-2942)\n"
        },
        {
          "name": "pragma",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": "Different versions of Solidity is used in CEtherHarness.sol:\n\t- Version used: ['ABIEncoderV2', '^0.5.16']\n\t- CEtherHarness.sol#3 declares pragma solidity^0.5.16\n\t- CEtherHarness.sol#77 declares pragma solidity^0.5.16\n\t- CEtherHarness.sol#110 declares pragma solidity^0.5.16\n\t- CEtherHarness.sol#413 declares pragma solidity^0.5.16\n\t- CEtherHarness.sol#623 declares pragma solidity^0.5.16\n\t- CEtherHarness.sol#711 declares pragma solidity^0.5.16\n\t- CEtherHarness.sol#1080 declares pragma solidity^0.5.16\n\t- CEtherHarness.sol#1145 declares pragma solidity^0.5.16\n\t- CEtherHarness.sol#1218 declares pragma solidity^0.5.16\n\t- CEtherHarness.sol#2647-2650 declares pragma solidity^0.5.16\n\t- CEtherHarness.sol#2816-2818 declares pragma solidity^0.5.16\n\t- CEtherHarness.sol#2833-2836 declares pragma solidity^0.5.16\n\t- CEtherHarness.sol#3005-3008 declares pragma solidity^0.5.16\n\t- CEtherHarness.sol#3155-3156 declares pragma solidity^0.5.16\n\t- CEtherHarness.sol#3156-3158 declares pragma experimentalABIEncoderV2\n\t- CEtherHarness.sol#3460-3469 declares pragma solidity^0.5.16\n\t- CEtherHarness.sol#4953-4955 declares pragma solidity^0.5.16\n\t- CEtherHarness.sol#5012-5015 declares pragma solidity^0.5.16\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 347,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint);\n",
          "message": "CTokenInterface._setInterestRateModel (CEtherHarness.sol#347) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 2563,
          "vulnerability_to_line": 2573,
          "vulnerability_code": "    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint) {\n\n        uint error = accrueInterest();\n\n        if (error != uint(Error.NO_ERROR)) {\n\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted change of interest rate model failed\n\n            return fail(Error(error), FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED);\n\n        }\n\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\n\n        return _setInterestRateModelFresh(newInterestRateModel);\n\n    }\n\n\n",
          "message": "CToken._setInterestRateModel (CEtherHarness.sol#2563-2573) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 394,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) public;\n",
          "message": "CDelegatorInterface._setImplementation (CEtherHarness.sol#394) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 403,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _becomeImplementation(bytes memory data) public;\n",
          "message": "CDelegateInterface._becomeImplementation (CEtherHarness.sol#403) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 408,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _resignImplementation() public;\n",
          "message": "CDelegateInterface._resignImplementation (CEtherHarness.sol#408) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 3041,
          "vulnerability_to_line": 3056,
          "vulnerability_code": "    function _setPendingImplementation(address newPendingImplementation) public returns (uint) {\n\n\n\n        if (msg.sender != admin) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_IMPLEMENTATION_OWNER_CHECK);\n\n        }\n\n\n\n        address oldPendingImplementation = pendingComptrollerImplementation;\n\n\n\n        pendingComptrollerImplementation = newPendingImplementation;\n\n\n\n        emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n",
          "message": "Unitroller._setPendingImplementation (CEtherHarness.sol#3041-3056) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 3061,
          "vulnerability_to_line": 3082,
          "vulnerability_code": "    function _acceptImplementation() public returns (uint) {\n\n        // Check caller is pendingImplementation and pendingImplementation \u2260 address(0)\n\n        if (msg.sender != pendingComptrollerImplementation || pendingComptrollerImplementation == address(0)) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK);\n\n        }\n\n\n\n        // Save current values for inclusion in log\n\n        address oldImplementation = comptrollerImplementation;\n\n        address oldPendingImplementation = pendingComptrollerImplementation;\n\n\n\n        comptrollerImplementation = pendingComptrollerImplementation;\n\n\n\n        pendingComptrollerImplementation = address(0);\n\n\n\n        emit NewImplementation(oldImplementation, comptrollerImplementation);\n\n        emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n\n\n",
          "message": "Unitroller._acceptImplementation (CEtherHarness.sol#3061-3082) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 3088,
          "vulnerability_to_line": 3106,
          "vulnerability_code": "    function _setPendingAdmin(address newPendingAdmin) public returns (uint) {\n\n        // Check caller = admin\n\n        if (msg.sender != admin) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\n\n        }\n\n\n\n        // Save current value, if any, for inclusion in log\n\n        address oldPendingAdmin = pendingAdmin;\n\n\n\n        // Store pendingAdmin with value newPendingAdmin\n\n        pendingAdmin = newPendingAdmin;\n\n\n\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\n\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n",
          "message": "Unitroller._setPendingAdmin (CEtherHarness.sol#3088-3106) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 3111,
          "vulnerability_to_line": 3134,
          "vulnerability_code": "    function _acceptAdmin() public returns (uint) {\n\n        // Check caller is pendingAdmin and pendingAdmin \u2260 address(0)\n\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\n\n        }\n\n\n\n        // Save current values for inclusion in log\n\n        address oldAdmin = admin;\n\n        address oldPendingAdmin = pendingAdmin;\n\n\n\n        // Store admin with value pendingAdmin\n\n        admin = pendingAdmin;\n\n\n\n        // Clear the pending value\n\n        pendingAdmin = address(0);\n\n\n\n        emit NewAdmin(oldAdmin, admin);\n\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n\n    /**\n",
          "message": "Unitroller._acceptAdmin (CEtherHarness.sol#3111-3134) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 3302,
          "vulnerability_to_line": 3307,
          "vulnerability_code": "    function delegate(address delegatee) public {\n\n        return _delegate(msg.sender, delegatee);\n\n    }\n\n\n\n    /**\n",
          "message": "Comp.delegate (CEtherHarness.sol#3302-3307) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 3315,
          "vulnerability_to_line": 3327,
          "vulnerability_code": "    function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public {\n\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\n\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\n\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n\n        address signatory = ecrecover(digest, v, r, s);\n\n        require(signatory != address(0), \"Comp::delegateBySig: invalid signature\");\n\n        require(nonce == nonces[signatory]++, \"Comp::delegateBySig: invalid nonce\");\n\n        require(now <= expiry, \"Comp::delegateBySig: signature expired\");\n\n        return _delegate(signatory, delegatee);\n\n    }\n\n\n\n    /**\n",
          "message": "Comp.delegateBySig (CEtherHarness.sol#3315-3327) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 3343,
          "vulnerability_to_line": 3377,
          "vulnerability_code": "    function getPriorVotes(address account, uint blockNumber) public view returns (uint96) {\n\n        require(blockNumber < block.number, \"Comp::getPriorVotes: not yet determined\");\n\n\n\n        uint32 nCheckpoints = numCheckpoints[account];\n\n        if (nCheckpoints == 0) {\n\n            return 0;\n\n        }\n\n\n\n        // First check most recent balance\n\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\n\n            return checkpoints[account][nCheckpoints - 1].votes;\n\n        }\n\n\n\n        // Next check implicit zero balance\n\n        if (checkpoints[account][0].fromBlock > blockNumber) {\n\n            return 0;\n\n        }\n\n\n\n        uint32 lower = 0;\n\n        uint32 upper = nCheckpoints - 1;\n\n        while (upper > lower) {\n\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n\n            Checkpoint memory cp = checkpoints[account][center];\n\n            if (cp.fromBlock == blockNumber) {\n\n                return cp.votes;\n\n            } else if (cp.fromBlock < blockNumber) {\n\n                lower = center;\n\n            } else {\n\n                upper = center - 1;\n\n            }\n\n        }\n\n        return checkpoints[account][lower].votes;\n\n    }\n\n\n",
          "message": "Comp.getPriorVotes (CEtherHarness.sol#3343-3377) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\n",
          "message": "ComptrollerInterface.enterMarkets (CEtherHarness.sol#11) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 3587,
          "vulnerability_to_line": 3601,
          "vulnerability_code": "    function enterMarkets(address[] memory cTokens) public returns (uint[] memory) {\n\n        uint len = cTokens.length;\n\n\n\n        uint[] memory results = new uint[](len);\n\n        for (uint i = 0; i < len; i++) {\n\n            CToken cToken = CToken(cTokens[i]);\n\n\n\n            results[i] = uint(addToMarketInternal(cToken, msg.sender));\n\n        }\n\n\n\n        return results;\n\n    }\n\n\n\n    /**\n",
          "message": "Comptroller.enterMarkets (CEtherHarness.sol#3587-3601) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 4142,
          "vulnerability_to_line": 4149,
          "vulnerability_code": "    function getAccountLiquidity(address account) public view returns (uint, uint, uint) {\n\n        (Error err, uint liquidity, uint shortfall) = getHypotheticalAccountLiquidityInternal(account, CToken(0), 0, 0);\n\n\n\n        return (uint(err), liquidity, shortfall);\n\n    }\n\n\n\n    /**\n",
          "message": "Comptroller.getAccountLiquidity (CEtherHarness.sol#4142-4149) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 4168,
          "vulnerability_to_line": 4178,
          "vulnerability_code": "    function getHypotheticalAccountLiquidity(\n\n        address account,\n\n        address cTokenModify,\n\n        uint redeemTokens,\n\n        uint borrowAmount) public view returns (uint, uint, uint) {\n\n        (Error err, uint liquidity, uint shortfall) = getHypotheticalAccountLiquidityInternal(account, CToken(cTokenModify), redeemTokens, borrowAmount);\n\n        return (uint(err), liquidity, shortfall);\n\n    }\n\n\n\n    /**\n",
          "message": "Comptroller.getHypotheticalAccountLiquidity (CEtherHarness.sol#4168-4178) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 4291,
          "vulnerability_to_line": 4310,
          "vulnerability_code": "    function _setPriceOracle(PriceOracle newOracle) public returns (uint) {\n\n        // Check caller is admin\n\n        if (msg.sender != admin) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK);\n\n        }\n\n\n\n        // Track the old oracle for the comptroller\n\n        PriceOracle oldOracle = oracle;\n\n\n\n        // Set comptroller's oracle to newOracle\n\n        oracle = newOracle;\n\n\n\n        // Emit NewPriceOracle(oldOracle, newOracle)\n\n        emit NewPriceOracle(oldOracle, newOracle);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n\n    /**\n",
          "message": "Comptroller._setPriceOracle (CEtherHarness.sol#4291-4310) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 4460,
          "vulnerability_to_line": 4477,
          "vulnerability_code": "    function _setPauseGuardian(address newPauseGuardian) public returns (uint) {\n\n        if (msg.sender != admin) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PAUSE_GUARDIAN_OWNER_CHECK);\n\n        }\n\n\n\n        // Save current value for inclusion in log\n\n        address oldPauseGuardian = pauseGuardian;\n\n\n\n        // Store pauseGuardian with value newPauseGuardian\n\n        pauseGuardian = newPauseGuardian;\n\n\n\n        // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)\n\n        emit NewPauseGuardian(oldPauseGuardian, pauseGuardian);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n",
          "message": "Comptroller._setPauseGuardian (CEtherHarness.sol#4460-4477) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 4477,
          "vulnerability_to_line": 4487,
          "vulnerability_code": "    function _setMintPaused(CToken cToken, bool state) public returns (bool) {\n\n        require(markets[address(cToken)].isListed, \"cannot pause a market that is not listed\");\n\n        require(msg.sender == pauseGuardian || msg.sender == admin, \"only pause guardian and admin can pause\");\n\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\n\n\n\n        mintGuardianPaused[address(cToken)] = state;\n\n        emit ActionPaused(cToken, \"Mint\", state);\n\n        return state;\n\n    }\n\n\n",
          "message": "Comptroller._setMintPaused (CEtherHarness.sol#4477-4487) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 4487,
          "vulnerability_to_line": 4497,
          "vulnerability_code": "    function _setBorrowPaused(CToken cToken, bool state) public returns (bool) {\n\n        require(markets[address(cToken)].isListed, \"cannot pause a market that is not listed\");\n\n        require(msg.sender == pauseGuardian || msg.sender == admin, \"only pause guardian and admin can pause\");\n\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\n\n\n\n        borrowGuardianPaused[address(cToken)] = state;\n\n        emit ActionPaused(cToken, \"Borrow\", state);\n\n        return state;\n\n    }\n\n\n",
          "message": "Comptroller._setBorrowPaused (CEtherHarness.sol#4487-4497) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 4497,
          "vulnerability_to_line": 4506,
          "vulnerability_code": "    function _setTransferPaused(bool state) public returns (bool) {\n\n        require(msg.sender == pauseGuardian || msg.sender == admin, \"only pause guardian and admin can pause\");\n\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\n\n\n\n        transferGuardianPaused = state;\n\n        emit ActionPaused(\"Transfer\", state);\n\n        return state;\n\n    }\n\n\n",
          "message": "Comptroller._setTransferPaused (CEtherHarness.sol#4497-4506) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 4506,
          "vulnerability_to_line": 4515,
          "vulnerability_code": "    function _setSeizePaused(bool state) public returns (bool) {\n\n        require(msg.sender == pauseGuardian || msg.sender == admin, \"only pause guardian and admin can pause\");\n\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\n\n\n\n        seizeGuardianPaused = state;\n\n        emit ActionPaused(\"Seize\", state);\n\n        return state;\n\n    }\n\n\n",
          "message": "Comptroller._setSeizePaused (CEtherHarness.sol#4506-4515) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 4515,
          "vulnerability_to_line": 4522,
          "vulnerability_code": "    function _become(Unitroller unitroller, uint vestingPeriod_) public {\n\n        require(msg.sender == unitroller.admin(), \"only unitroller admin can change brains\");\n\n        require(unitroller._acceptImplementation() == 0, \"change not authorized\");\n\n\n\n        Comptroller(address(unitroller))._becomeG6(vestingPeriod_);\n\n    }\n\n\n",
          "message": "Comptroller._become (CEtherHarness.sol#4515-4522) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 4522,
          "vulnerability_to_line": 4535,
          "vulnerability_code": "    function _becomeG6(uint vestingPeriod_) public {\n\n        require(msg.sender == comptrollerImplementation, \"only brains can become itself\");\n\n\n\n        for (uint i = 0; i < allMarkets.length; i++) {\n\n            address cToken = address(allMarkets[i]);\n\n            compSupplyVestingState[cToken] = compSupplyState[cToken];\n\n            compBorrowVestingState[cToken] = compBorrowState[cToken];\n\n        }\n\n\n\n        _setVestingPeriod(vestingPeriod_);\n\n    }\n\n\n\n    /**\n",
          "message": "Comptroller._becomeG6 (CEtherHarness.sol#4522-4535) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 4728,
          "vulnerability_to_line": 4733,
          "vulnerability_code": "    function claimComp(address holder) public {\n\n        return claimComp(holder, allMarkets);\n\n    }\n\n\n\n    /**\n",
          "message": "Comptroller.claimComp (CEtherHarness.sol#4728-4733) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 4800,
          "vulnerability_to_line": 4809,
          "vulnerability_code": "    function _grantComp(address recipient, uint amount) public returns (uint) {\n\n        require(adminOrInitializing(), \"only admin can grant comp\");\n\n        uint amountLeft = grantCompInternal(recipient, amount);\n\n        if (amountLeft == 0) {\n\n            emit CompGranted(recipient, amount);\n\n        }\n\n    }\n\n\n\n    /**\n",
          "message": "Comptroller._grantComp (CEtherHarness.sol#4800-4809) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 4813,
          "vulnerability_to_line": 4819,
          "vulnerability_code": "    function _setCompSpeed(CToken cToken, uint compSpeed) public {\n\n        require(adminOrInitializing(), \"only admin can set comp speed\");\n\n        setCompSpeedInternal(cToken, compSpeed);\n\n    }\n\n\n\n    /**\n",
          "message": "Comptroller._setCompSpeed (CEtherHarness.sol#4813-4819) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 4823,
          "vulnerability_to_line": 4839,
          "vulnerability_code": "    function _setContributorCompSpeed(address contributor, uint compSpeed) public {\n\n        require(adminOrInitializing(), \"only admin can set comp speed\");\n\n\n\n        // note that COMP speed could be set to 0 to halt liquidity rewards for a contributor\n\n        updateContributorRewards(contributor);\n\n        if (compSpeed == 0) {\n\n            // release storage\n\n            delete lastContributorBlock[contributor];\n\n        }\n\n        lastContributorBlock[contributor] = getBlockNumber();\n\n        compContributorSpeeds[contributor] = compSpeed;\n\n        \n\n        emit ContributorCompSpeedUpdated(contributor, compSpeed);\n\n    }\n\n\n\n    /**\n",
          "message": "Comptroller._setContributorCompSpeed (CEtherHarness.sol#4823-4839) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 4859,
          "vulnerability_to_line": 4867,
          "vulnerability_code": "    function _addCompMarkets(address[] memory cTokens) public {\n\n        require(adminOrInitializing(), \"only admin can add comp market\");\n\n\n\n        for (uint i = 0; i < cTokens.length; i++) {\n\n            _addCompMarketInternal(cTokens[i]);\n\n        }\n\n    }\n\n\n",
          "message": "Comptroller._addCompMarkets (CEtherHarness.sol#4859-4867) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 4894,
          "vulnerability_to_line": 4907,
          "vulnerability_code": "    function _dropCompMarket(address cToken) public {\n\n        require(msg.sender == admin, \"only admin can drop comp market\");\n\n\n\n        Market storage market = markets[cToken];\n\n        require(market.isComped == true, \"market is not a comp market\");\n\n\n\n        market.isComped = false;\n\n        emit MarketComped(CToken(cToken), false);\n\n\n\n        setCompSpeedInternal(CToken(cToken), 0);\n\n    }\n\n\n\n    /**\n",
          "message": "Comptroller._dropCompMarket (CEtherHarness.sol#4894-4907) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 4934,
          "vulnerability_to_line": 4938,
          "vulnerability_code": "    function getAllMarkets() public view returns (CToken[] memory) {\n\n        return allMarkets;\n\n    }\n\n\n",
          "message": "Comptroller.getAllMarkets (CEtherHarness.sol#4934-4938) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 4961,
          "vulnerability_to_line": 4965,
          "vulnerability_code": "    function setCompAddress(address compAddress_) public {\n\n        compAddress = compAddress_;\n\n    }\n\n\n",
          "message": "ComptrollerScenario.setCompAddress (CEtherHarness.sol#4961-4965) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 4969,
          "vulnerability_to_line": 4973,
          "vulnerability_code": "    function membershipLength(CToken cToken) public view returns (uint) {\n\n        return accountAssets[address(cToken)].length;\n\n    }\n\n\n",
          "message": "ComptrollerScenario.membershipLength (CEtherHarness.sol#4969-4973) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 4973,
          "vulnerability_to_line": 4978,
          "vulnerability_code": "    function fastForward(uint blocks) public returns (uint) {\n\n        blockNumber += blocks;\n\n        return blockNumber;\n\n    }\n\n\n",
          "message": "ComptrollerScenario.fastForward (CEtherHarness.sol#4973-4978) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 4978,
          "vulnerability_to_line": 4982,
          "vulnerability_code": "    function setBlockNumber(uint number) public {\n\n        blockNumber = number;\n\n    }\n\n\n",
          "message": "ComptrollerScenario.setBlockNumber (CEtherHarness.sol#4978-4982) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 4986,
          "vulnerability_to_line": 5005,
          "vulnerability_code": "    function getCompMarkets() public view returns (address[] memory) {\n\n        uint m = allMarkets.length;\n\n        uint n = 0;\n\n        for (uint i = 0; i < m; i++) {\n\n            if (markets[address(allMarkets[i])].isComped) {\n\n                n++;\n\n            }\n\n        }\n\n\n\n        address[] memory compMarkets = new address[](n);\n\n        uint k = 0;\n\n        for (uint i = 0; i < m; i++) {\n\n            if (markets[address(allMarkets[i])].isComped) {\n\n                compMarkets[k++] = address(allMarkets[i]);\n\n            }\n\n        }\n\n        return compMarkets;\n\n    }\n\n\n",
          "message": "ComptrollerScenario.getCompMarkets (CEtherHarness.sol#4986-5005) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5005,
          "vulnerability_to_line": 5010,
          "vulnerability_code": "    function unlist(CToken cToken) public {\n\n        markets[address(cToken)].isListed = false;\n\n    }\n\n}\n\n\n",
          "message": "ComptrollerScenario.unlist (CEtherHarness.sol#5005-5010) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5053,
          "vulnerability_to_line": 5057,
          "vulnerability_code": "    function harnessSetBlockNumber(uint newBlockNumber) public {\n\n        blockNumber = newBlockNumber;\n\n    }\n\n\n",
          "message": "CEtherHarness.harnessSetBlockNumber (CEtherHarness.sol#5053-5057) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5057,
          "vulnerability_to_line": 5061,
          "vulnerability_code": "    function harnessFastForward(uint blocks) public {\n\n        blockNumber += blocks;\n\n    }\n\n\n",
          "message": "CEtherHarness.harnessFastForward (CEtherHarness.sol#5057-5061) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5065,
          "vulnerability_to_line": 5069,
          "vulnerability_code": "    function harnessSetAccrualBlockNumber(uint _accrualblockNumber) public {\n\n        accrualBlockNumber = _accrualblockNumber;\n\n    }\n\n\n",
          "message": "CEtherHarness.harnessSetAccrualBlockNumber (CEtherHarness.sol#5065-5069) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5069,
          "vulnerability_to_line": 5073,
          "vulnerability_code": "    function harnessSetTotalSupply(uint totalSupply_) public {\n\n        totalSupply = totalSupply_;\n\n    }\n\n\n",
          "message": "CEtherHarness.harnessSetTotalSupply (CEtherHarness.sol#5069-5073) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5073,
          "vulnerability_to_line": 5077,
          "vulnerability_code": "    function harnessSetTotalBorrows(uint totalBorrows_) public {\n\n        totalBorrows = totalBorrows_;\n\n    }\n\n\n",
          "message": "CEtherHarness.harnessSetTotalBorrows (CEtherHarness.sol#5073-5077) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5077,
          "vulnerability_to_line": 5081,
          "vulnerability_code": "    function harnessSetTotalReserves(uint totalReserves_) public {\n\n        totalReserves = totalReserves_;\n\n    }\n\n\n",
          "message": "CEtherHarness.harnessSetTotalReserves (CEtherHarness.sol#5077-5081) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5081,
          "vulnerability_to_line": 5087,
          "vulnerability_code": "    function harnessExchangeRateDetails(uint _totalSupply, uint _totalBorrows, uint _totalReserves) public {\n\n        totalSupply = _totalSupply;\n\n        totalBorrows = _totalBorrows;\n\n        totalReserves = _totalReserves;\n\n    }\n\n\n",
          "message": "CEtherHarness.harnessExchangeRateDetails (CEtherHarness.sol#5081-5087) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5087,
          "vulnerability_to_line": 5091,
          "vulnerability_code": "    function harnessSetExchangeRate(uint exchangeRate) public {\n\n        harnessExchangeRate = exchangeRate;\n\n    }\n\n\n",
          "message": "CEtherHarness.harnessSetExchangeRate (CEtherHarness.sol#5087-5091) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5091,
          "vulnerability_to_line": 5095,
          "vulnerability_code": "    function harnessSetFailTransferToAddress(address _to, bool _fail) public {\n\n        failTransferToAddresses[_to] = _fail;\n\n    }\n\n\n",
          "message": "CEtherHarness.harnessSetFailTransferToAddress (CEtherHarness.sol#5091-5095) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5095,
          "vulnerability_to_line": 5100,
          "vulnerability_code": "    function harnessMintFresh(address account, uint mintAmount) public returns (uint) {\n\n        (uint err,) = super.mintFresh(account, mintAmount);\n\n        return err;\n\n    }\n\n\n",
          "message": "CEtherHarness.harnessMintFresh (CEtherHarness.sol#5095-5100) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5100,
          "vulnerability_to_line": 5104,
          "vulnerability_code": "    function harnessRedeemFresh(address payable account, uint cTokenAmount, uint underlyingAmount) public returns (uint) {\n\n        return super.redeemFresh(account, cTokenAmount, underlyingAmount);\n\n    }\n\n\n",
          "message": "CEtherHarness.harnessRedeemFresh (CEtherHarness.sol#5100-5104) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5104,
          "vulnerability_to_line": 5109,
          "vulnerability_code": "    function harnessAccountBorrows(address account) public view returns (uint principal, uint interestIndex) {\n\n        BorrowSnapshot memory snapshot = accountBorrows[account];\n\n        return (snapshot.principal, snapshot.interestIndex);\n\n    }\n\n\n",
          "message": "CEtherHarness.harnessAccountBorrows (CEtherHarness.sol#5104-5109) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5109,
          "vulnerability_to_line": 5113,
          "vulnerability_code": "    function harnessSetAccountBorrows(address account, uint principal, uint interestIndex) public {\n\n        accountBorrows[account] = BorrowSnapshot({principal: principal, interestIndex: interestIndex});\n\n    }\n\n\n",
          "message": "CEtherHarness.harnessSetAccountBorrows (CEtherHarness.sol#5109-5113) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5113,
          "vulnerability_to_line": 5117,
          "vulnerability_code": "    function harnessSetBorrowIndex(uint borrowIndex_) public {\n\n        borrowIndex = borrowIndex_;\n\n    }\n\n\n",
          "message": "CEtherHarness.harnessSetBorrowIndex (CEtherHarness.sol#5113-5117) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5117,
          "vulnerability_to_line": 5121,
          "vulnerability_code": "    function harnessBorrowFresh(address payable account, uint borrowAmount) public returns (uint) {\n\n        return borrowFresh(account, borrowAmount);\n\n    }\n\n\n",
          "message": "CEtherHarness.harnessBorrowFresh (CEtherHarness.sol#5117-5121) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5121,
          "vulnerability_to_line": 5126,
          "vulnerability_code": "    function harnessRepayBorrowFresh(address payer, address account, uint repayBorrowAmount) public payable returns (uint) {\n\n        (uint err,) = repayBorrowFresh(payer, account, repayBorrowAmount);\n\n        return err;\n\n    }\n\n\n",
          "message": "CEtherHarness.harnessRepayBorrowFresh (CEtherHarness.sol#5121-5126) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5126,
          "vulnerability_to_line": 5131,
          "vulnerability_code": "    function harnessLiquidateBorrowFresh(address liquidator, address borrower, uint repayAmount, CToken cTokenCollateral) public returns (uint) {\n\n        (uint err,) = liquidateBorrowFresh(liquidator, borrower, repayAmount, cTokenCollateral);\n\n        return err;\n\n    }\n\n\n",
          "message": "CEtherHarness.harnessLiquidateBorrowFresh (CEtherHarness.sol#5126-5131) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5131,
          "vulnerability_to_line": 5135,
          "vulnerability_code": "    function harnessReduceReservesFresh(uint amount) public returns (uint) {\n\n        return _reduceReservesFresh(amount);\n\n    }\n\n\n",
          "message": "CEtherHarness.harnessReduceReservesFresh (CEtherHarness.sol#5131-5135) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5135,
          "vulnerability_to_line": 5139,
          "vulnerability_code": "    function harnessSetReserves(uint amount) public {\n\n        totalReserves = amount;\n\n    }\n\n\n",
          "message": "CEtherHarness.harnessSetReserves (CEtherHarness.sol#5135-5139) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5139,
          "vulnerability_to_line": 5143,
          "vulnerability_code": "    function harnessSetReserveFactorFresh(uint newReserveFactorMantissa) public returns (uint) {\n\n        return _setReserveFactorFresh(newReserveFactorMantissa);\n\n    }\n\n\n",
          "message": "CEtherHarness.harnessSetReserveFactorFresh (CEtherHarness.sol#5139-5143) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5143,
          "vulnerability_to_line": 5147,
          "vulnerability_code": "    function harnessSetInterestRateModelFresh(InterestRateModel newInterestRateModel) public returns (uint) {\n\n        return _setInterestRateModelFresh(newInterestRateModel);\n\n    }\n\n\n",
          "message": "CEtherHarness.harnessSetInterestRateModelFresh (CEtherHarness.sol#5143-5147) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5147,
          "vulnerability_to_line": 5151,
          "vulnerability_code": "    function harnessSetInterestRateModel(address newInterestRateModelAddress) public {\n\n        interestRateModel = InterestRateModel(newInterestRateModelAddress);\n\n    }\n\n\n",
          "message": "CEtherHarness.harnessSetInterestRateModel (CEtherHarness.sol#5147-5151) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5151,
          "vulnerability_to_line": 5155,
          "vulnerability_code": "    function harnessGetCashPrior() public payable returns (uint) {\n\n        return getCashPrior();\n\n    }\n\n\n",
          "message": "CEtherHarness.harnessGetCashPrior (CEtherHarness.sol#5151-5155) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5155,
          "vulnerability_to_line": 5159,
          "vulnerability_code": "    function harnessDoTransferIn(address from, uint amount) public payable returns (uint) {\n\n        return doTransferIn(from, amount);\n\n    }\n\n\n",
          "message": "CEtherHarness.harnessDoTransferIn (CEtherHarness.sol#5155-5159) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5159,
          "vulnerability_to_line": 5163,
          "vulnerability_code": "    function harnessDoTransferOut(address payable to, uint amount) public payable {\n\n        return doTransferOut(to, amount);\n\n    }\n\n\n",
          "message": "CEtherHarness.harnessDoTransferOut (CEtherHarness.sol#5159-5163) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5187,
          "vulnerability_to_line": 5191,
          "vulnerability_code": "    function setTotalBorrows(uint totalBorrows_) public {\n\n        totalBorrows = totalBorrows_;\n\n    }\n\n\n",
          "message": "CEtherScenario.setTotalBorrows (CEtherHarness.sol#5187-5191) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5191,
          "vulnerability_to_line": 5195,
          "vulnerability_code": "    function setTotalReserves(uint totalReserves_) public {\n\n        totalReserves = totalReserves_;\n\n    }\n\n\n",
          "message": "CEtherScenario.setTotalReserves (CEtherHarness.sol#5191-5195) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 5195,
          "vulnerability_to_line": 5199,
          "vulnerability_code": "    function donate() public payable {\n\n        // no-op\n\n    }\n\n\n",
          "message": "CEtherScenario.donate (CEtherHarness.sol#5195-5199) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": "Detected issues with version pragma in CEtherHarness.sol:\n\t- pragma solidity^0.5.16 (CEtherHarness.sol#3): it allows old versions\n\t- pragma solidity^0.5.16 (CEtherHarness.sol#77): it allows old versions\n\t- pragma solidity^0.5.16 (CEtherHarness.sol#110): it allows old versions\n\t- pragma solidity^0.5.16 (CEtherHarness.sol#413): it allows old versions\n\t- pragma solidity^0.5.16 (CEtherHarness.sol#623): it allows old versions\n\t- pragma solidity^0.5.16 (CEtherHarness.sol#711): it allows old versions\n\t- pragma solidity^0.5.16 (CEtherHarness.sol#1080): it allows old versions\n\t- pragma solidity^0.5.16 (CEtherHarness.sol#1145): it allows old versions\n\t- pragma solidity^0.5.16 (CEtherHarness.sol#1218): it allows old versions\n\t- pragma solidity^0.5.16 (CEtherHarness.sol#2647-2650): it allows old versions\n\t- pragma solidity^0.5.16 (CEtherHarness.sol#2816-2818): it allows old versions\n\t- pragma solidity^0.5.16 (CEtherHarness.sol#2833-2836): it allows old versions\n\t- pragma solidity^0.5.16 (CEtherHarness.sol#3005-3008): it allows old versions\n\t- pragma solidity^0.5.16 (CEtherHarness.sol#3155-3156): it allows old versions\n\t- pragma solidity^0.5.16 (CEtherHarness.sol#3460-3469): it allows old versions\n\t- pragma solidity^0.5.16 (CEtherHarness.sol#4953-4955): it allows old versions\n\t- pragma solidity^0.5.16 (CEtherHarness.sol#5012-5015): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 3138,
          "vulnerability_to_line": 3153,
          "vulnerability_code": "    function () payable external {\n\n        // delegate all other functions to current implementation\n\n        (bool success, ) = comptrollerImplementation.delegatecall(msg.data);\n\n\n\n        assembly {\n\n              let free_mem_ptr := mload(0x40)\n\n              returndatacopy(free_mem_ptr, 0, returndatasize)\n\n\n\n              switch success\n\n              case 0 { revert(free_mem_ptr, returndatasize) }\n\n              default { return(free_mem_ptr, returndatasize) }\n\n        }\n\n    }\n\n}\n\n\n",
          "message": "Low level call in Unitroller.fallback (CEtherHarness.sol#3138-3153):\n\t-(success) = comptrollerImplementation.delegatecall(msg.data) CEtherHarness.sol#3140-3142\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool public constant isComptroller = true;\n",
          "message": "Constant 'ComptrollerInterface.isComptroller' (CEtherHarness.sol#7) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool public constant isInterestRateModel = true;\n",
          "message": "Constant 'InterestRateModel.isInterestRateModel' (CEtherHarness.sol#85) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool internal _notEntered;\n",
          "message": "Variable 'CTokenStorage._notEntered' (CEtherHarness.sol#117) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint internal constant borrowRateMaxMantissa = 0.0005e16;\n",
          "message": "Constant 'CTokenStorage.borrowRateMaxMantissa' (CEtherHarness.sol#138) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint internal constant reserveFactorMaxMantissa = 1e18;\n",
          "message": "Constant 'CTokenStorage.reserveFactorMaxMantissa' (CEtherHarness.sol#143) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 342,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\n",
          "message": "Function 'CTokenInterface._setPendingAdmin' (CEtherHarness.sol#342) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 343,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _acceptAdmin() external returns (uint);\n",
          "message": "Function 'CTokenInterface._acceptAdmin' (CEtherHarness.sol#343) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 344,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint);\n",
          "message": "Function 'CTokenInterface._setComptroller' (CEtherHarness.sol#344) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 345,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint);\n",
          "message": "Function 'CTokenInterface._setReserveFactor' (CEtherHarness.sol#345) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 346,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _reduceReserves(uint reduceAmount) external returns (uint);\n",
          "message": "Function 'CTokenInterface._reduceReserves' (CEtherHarness.sol#346) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 347,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint);\n",
          "message": "Function 'CTokenInterface._setInterestRateModel' (CEtherHarness.sol#347) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 230,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool public constant isCToken = true;\n",
          "message": "Constant 'CTokenInterface.isCToken' (CEtherHarness.sol#230) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 372,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _addReserves(uint addAmount) external returns (uint);\n",
          "message": "Function 'CErc20Interface._addReserves' (CEtherHarness.sol#372) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 394,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) public;\n",
          "message": "Function 'CDelegatorInterface._setImplementation' (CEtherHarness.sol#394) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 403,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _becomeImplementation(bytes memory data) public;\n",
          "message": "Function 'CDelegateInterface._becomeImplementation' (CEtherHarness.sol#403) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 408,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _resignImplementation() public;\n",
          "message": "Function 'CDelegateInterface._resignImplementation' (CEtherHarness.sol#408) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 810,
          "vulnerability_to_line": 813,
          "vulnerability_code": "    function mul_ScalarTruncate(Exp memory a, uint scalar) pure internal returns (uint) {\n\n        Exp memory product = mul_(a, scalar);\n\n        return truncate(product);\n",
          "message": "Function 'Exponential.mul_ScalarTruncate' (CEtherHarness.sol#810-813) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 818,
          "vulnerability_to_line": 821,
          "vulnerability_code": "    function mul_ScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (uint) {\n\n        Exp memory product = mul_(a, scalar);\n\n        return add_(truncate(product), addend);\n",
          "message": "Function 'Exponential.mul_ScalarTruncateAddUInt' (CEtherHarness.sol#818-821) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 721,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant expScale = 1e18;\n",
          "message": "Constant 'Exponential.expScale' (CEtherHarness.sol#721) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 722,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant doubleScale = 1e36;\n",
          "message": "Constant 'Exponential.doubleScale' (CEtherHarness.sol#722) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 723,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant halfExpScale = expScale/2;\n",
          "message": "Constant 'Exponential.halfExpScale' (CEtherHarness.sol#723) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 724,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant mantissaOne = expScale;\n",
          "message": "Constant 'Exponential.mantissaOne' (CEtherHarness.sol#724) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2317,
          "vulnerability_to_line": 2333,
          "vulnerability_code": "    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint) {\n\n        // Check caller = admin\n\n        if (msg.sender != admin) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\n\n        }\n\n\n\n        // Save current value, if any, for inclusion in log\n\n        address oldPendingAdmin = pendingAdmin;\n\n\n\n        // Store pendingAdmin with value newPendingAdmin\n\n        pendingAdmin = newPendingAdmin;\n\n\n\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\n\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\n\n\n\n        return uint(Error.NO_ERROR);\n",
          "message": "Function 'CToken._setPendingAdmin' (CEtherHarness.sol#2317-2333) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2340,
          "vulnerability_to_line": 2362,
          "vulnerability_code": "    function _acceptAdmin() external returns (uint) {\n\n        // Check caller is pendingAdmin and pendingAdmin \u2260 address(0)\n\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\n\n        }\n\n\n\n        // Save current values for inclusion in log\n\n        address oldAdmin = admin;\n\n        address oldPendingAdmin = pendingAdmin;\n\n\n\n        // Store admin with value pendingAdmin\n\n        admin = pendingAdmin;\n\n\n\n        // Clear the pending value\n\n        pendingAdmin = address(0);\n\n\n\n        emit NewAdmin(oldAdmin, admin);\n\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n",
          "message": "Function 'CToken._acceptAdmin' (CEtherHarness.sol#2340-2362) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2367,
          "vulnerability_to_line": 2386,
          "vulnerability_code": "    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint) {\n\n        // Check caller is admin\n\n        if (msg.sender != admin) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_COMPTROLLER_OWNER_CHECK);\n\n        }\n\n\n\n        ComptrollerInterface oldComptroller = comptroller;\n\n        // Ensure invoke comptroller.isComptroller() returns true\n\n        require(newComptroller.isComptroller(), \"marker method returned false\");\n\n\n\n        // Set market's comptroller to newComptroller\n\n        comptroller = newComptroller;\n\n\n\n        // Emit NewComptroller(oldComptroller, newComptroller)\n\n        emit NewComptroller(oldComptroller, newComptroller);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n",
          "message": "Function 'CToken._setComptroller' (CEtherHarness.sol#2367-2386) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2391,
          "vulnerability_to_line": 2401,
          "vulnerability_code": "    function _setReserveFactor(uint newReserveFactorMantissa) external nonReentrant returns (uint) {\n\n        uint error = accrueInterest();\n\n        if (error != uint(Error.NO_ERROR)) {\n\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reserve factor change failed.\n\n            return fail(Error(error), FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED);\n\n        }\n\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\n\n        return _setReserveFactorFresh(newReserveFactorMantissa);\n\n    }\n\n\n",
          "message": "Function 'CToken._setReserveFactor' (CEtherHarness.sol#2391-2401) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2498,
          "vulnerability_to_line": 2508,
          "vulnerability_code": "    function _reduceReserves(uint reduceAmount) external nonReentrant returns (uint) {\n\n        uint error = accrueInterest();\n\n        if (error != uint(Error.NO_ERROR)) {\n\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\n\n            return fail(Error(error), FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED);\n\n        }\n\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\n\n        return _reduceReservesFresh(reduceAmount);\n\n    }\n\n\n",
          "message": "Function 'CToken._reduceReserves' (CEtherHarness.sol#2498-2508) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2563,
          "vulnerability_to_line": 2573,
          "vulnerability_code": "    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint) {\n\n        uint error = accrueInterest();\n\n        if (error != uint(Error.NO_ERROR)) {\n\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted change of interest rate model failed\n\n            return fail(Error(error), FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED);\n\n        }\n\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\n\n        return _setInterestRateModelFresh(newInterestRateModel);\n\n    }\n\n\n",
          "message": "Function 'CToken._setInterestRateModel' (CEtherHarness.sol#2563-2573) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2406,
          "vulnerability_to_line": 2430,
          "vulnerability_code": "    function _setReserveFactorFresh(uint newReserveFactorMantissa) internal returns (uint) {\n\n        // Check caller is admin\n\n        if (msg.sender != admin) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_RESERVE_FACTOR_ADMIN_CHECK);\n\n        }\n\n\n\n        // Verify market's block number equals current block number\n\n        if (accrualBlockNumber != getBlockNumber()) {\n\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK);\n\n        }\n\n\n\n        // Check newReserveFactor \u2264 maxReserveFactor\n\n        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\n\n            return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);\n\n        }\n\n\n\n        uint oldReserveFactorMantissa = reserveFactorMantissa;\n\n        reserveFactorMantissa = newReserveFactorMantissa;\n\n\n\n        emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n",
          "message": "Function 'CToken._setReserveFactorFresh' (CEtherHarness.sol#2406-2430) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2435,
          "vulnerability_to_line": 2447,
          "vulnerability_code": "    function _addReservesInternal(uint addAmount) internal nonReentrant returns (uint) {\n\n        uint error = accrueInterest();\n\n        if (error != uint(Error.NO_ERROR)) {\n\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\n\n            return fail(Error(error), FailureInfo.ADD_RESERVES_ACCRUE_INTEREST_FAILED);\n\n        }\n\n\n\n        // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\n\n        (error, ) = _addReservesFresh(addAmount);\n\n        return error;\n\n    }\n\n\n",
          "message": "Function 'CToken._addReservesInternal' (CEtherHarness.sol#2435-2447) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2453,
          "vulnerability_to_line": 2493,
          "vulnerability_code": "    function _addReservesFresh(uint addAmount) internal returns (uint, uint) {\n\n        // totalReserves + actualAddAmount\n\n        uint totalReservesNew;\n\n        uint actualAddAmount;\n\n\n\n        // We fail gracefully unless market's block number equals current block number\n\n        if (accrualBlockNumber != getBlockNumber()) {\n\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.ADD_RESERVES_FRESH_CHECK), actualAddAmount);\n\n        }\n\n\n\n        /////////////////////////\n\n        // EFFECTS & INTERACTIONS\n\n        // (No safe failures beyond this point)\n\n\n\n        /*\n\n         * We call doTransferIn for the caller and the addAmount\n\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\n\n         *  On success, the cToken holds an additional addAmount of cash.\n\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\n\n         *  it returns the amount actually transferred, in case of a fee.\n\n         */\n\n\n\n        actualAddAmount = doTransferIn(msg.sender, addAmount);\n\n\n\n        totalReservesNew = totalReserves + actualAddAmount;\n\n\n\n        /* Revert on overflow */\n\n        require(totalReservesNew >= totalReserves, \"add reserves unexpected overflow\");\n\n\n\n        // Store reserves[n+1] = reserves[n] + actualAddAmount\n\n        totalReserves = totalReservesNew;\n\n\n\n        /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\n\n        emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\n\n\n\n        /* Return (NO_ERROR, actualAddAmount) */\n\n        return (uint(Error.NO_ERROR), actualAddAmount);\n\n    }\n\n\n\n\n",
          "message": "Function 'CToken._addReservesFresh' (CEtherHarness.sol#2453-2493) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2514,
          "vulnerability_to_line": 2557,
          "vulnerability_code": "    function _reduceReservesFresh(uint reduceAmount) internal returns (uint) {\n\n        // totalReserves - reduceAmount\n\n        uint totalReservesNew;\n\n\n\n        // Check caller is admin\n\n        if (msg.sender != admin) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.REDUCE_RESERVES_ADMIN_CHECK);\n\n        }\n\n\n\n        // We fail gracefully unless market's block number equals current block number\n\n        if (accrualBlockNumber != getBlockNumber()) {\n\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);\n\n        }\n\n\n\n        // Fail gracefully if protocol has insufficient underlying cash\n\n        if (getCashPrior() < reduceAmount) {\n\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);\n\n        }\n\n\n\n        // Check reduceAmount \u2264 reserves[n] (totalReserves)\n\n        if (reduceAmount > totalReserves) {\n\n            return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);\n\n        }\n\n\n\n        /////////////////////////\n\n        // EFFECTS & INTERACTIONS\n\n        // (No safe failures beyond this point)\n\n\n\n        totalReservesNew = totalReserves - reduceAmount;\n\n        // We checked reduceAmount <= totalReserves above, so this should never revert.\n\n        require(totalReservesNew <= totalReserves, \"reduce reserves unexpected underflow\");\n\n\n\n        // Store reserves[n+1] = reserves[n] - reduceAmount\n\n        totalReserves = totalReservesNew;\n\n\n\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\n\n        doTransferOut(admin, reduceAmount);\n\n\n\n        emit ReservesReduced(admin, reduceAmount, totalReservesNew);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n",
          "message": "Function 'CToken._reduceReservesFresh' (CEtherHarness.sol#2514-2557) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2579,
          "vulnerability_to_line": 2609,
          "vulnerability_code": "    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint) {\n\n\n\n        // Used to store old model for use in the event that is emitted on success\n\n        InterestRateModel oldInterestRateModel;\n\n\n\n        // Check caller is admin\n\n        if (msg.sender != admin) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_INTEREST_RATE_MODEL_OWNER_CHECK);\n\n        }\n\n\n\n        // We fail gracefully unless market's block number equals current block number\n\n        if (accrualBlockNumber != getBlockNumber()) {\n\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);\n\n        }\n\n\n\n        // Track the market's current interest rate model\n\n        oldInterestRateModel = interestRateModel;\n\n\n\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\n\n        require(newInterestRateModel.isInterestRateModel(), \"marker method returned false\");\n\n\n\n        // Set the interest rate model to newInterestRateModel\n\n        interestRateModel = newInterestRateModel;\n\n\n\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\n\n        emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n",
          "message": "Function 'CToken._setInterestRateModelFresh' (CEtherHarness.sol#2579-2609) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2820,
          "vulnerability_to_line": 2822,
          "vulnerability_code": "    bool public constant isPriceOracle = true;\n\n\n",
          "message": "Constant 'PriceOracle.isPriceOracle' (CEtherHarness.sol#2820-2822) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2919,
          "vulnerability_to_line": 2920,
          "vulnerability_code": "    bool public _mintGuardianPaused;\n",
          "message": "Variable 'ComptrollerV2Storage._mintGuardianPaused' (CEtherHarness.sol#2919-2920) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2920,
          "vulnerability_to_line": 2921,
          "vulnerability_code": "    bool public _borrowGuardianPaused;\n",
          "message": "Variable 'ComptrollerV2Storage._borrowGuardianPaused' (CEtherHarness.sol#2920-2921) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3041,
          "vulnerability_to_line": 3056,
          "vulnerability_code": "    function _setPendingImplementation(address newPendingImplementation) public returns (uint) {\n\n\n\n        if (msg.sender != admin) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_IMPLEMENTATION_OWNER_CHECK);\n\n        }\n\n\n\n        address oldPendingImplementation = pendingComptrollerImplementation;\n\n\n\n        pendingComptrollerImplementation = newPendingImplementation;\n\n\n\n        emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n",
          "message": "Function 'Unitroller._setPendingImplementation' (CEtherHarness.sol#3041-3056) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3061,
          "vulnerability_to_line": 3082,
          "vulnerability_code": "    function _acceptImplementation() public returns (uint) {\n\n        // Check caller is pendingImplementation and pendingImplementation \u2260 address(0)\n\n        if (msg.sender != pendingComptrollerImplementation || pendingComptrollerImplementation == address(0)) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK);\n\n        }\n\n\n\n        // Save current values for inclusion in log\n\n        address oldImplementation = comptrollerImplementation;\n\n        address oldPendingImplementation = pendingComptrollerImplementation;\n\n\n\n        comptrollerImplementation = pendingComptrollerImplementation;\n\n\n\n        pendingComptrollerImplementation = address(0);\n\n\n\n        emit NewImplementation(oldImplementation, comptrollerImplementation);\n\n        emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n\n\n",
          "message": "Function 'Unitroller._acceptImplementation' (CEtherHarness.sol#3061-3082) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3088,
          "vulnerability_to_line": 3106,
          "vulnerability_code": "    function _setPendingAdmin(address newPendingAdmin) public returns (uint) {\n\n        // Check caller = admin\n\n        if (msg.sender != admin) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\n\n        }\n\n\n\n        // Save current value, if any, for inclusion in log\n\n        address oldPendingAdmin = pendingAdmin;\n\n\n\n        // Store pendingAdmin with value newPendingAdmin\n\n        pendingAdmin = newPendingAdmin;\n\n\n\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\n\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n",
          "message": "Function 'Unitroller._setPendingAdmin' (CEtherHarness.sol#3088-3106) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3111,
          "vulnerability_to_line": 3134,
          "vulnerability_code": "    function _acceptAdmin() public returns (uint) {\n\n        // Check caller is pendingAdmin and pendingAdmin \u2260 address(0)\n\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\n\n        }\n\n\n\n        // Save current values for inclusion in log\n\n        address oldAdmin = admin;\n\n        address oldPendingAdmin = pendingAdmin;\n\n\n\n        // Store admin with value pendingAdmin\n\n        admin = pendingAdmin;\n\n\n\n        // Clear the pending value\n\n        pendingAdmin = address(0);\n\n\n\n        emit NewAdmin(oldAdmin, admin);\n\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n\n    /**\n",
          "message": "Function 'Unitroller._acceptAdmin' (CEtherHarness.sol#3111-3134) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3377,
          "vulnerability_to_line": 3387,
          "vulnerability_code": "    function _delegate(address delegator, address delegatee) internal {\n\n        address currentDelegate = delegates[delegator];\n\n        uint96 delegatorBalance = balances[delegator];\n\n        delegates[delegator] = delegatee;\n\n\n\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\n\n\n\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\n\n    }\n\n\n",
          "message": "Function 'Comp._delegate' (CEtherHarness.sol#3377-3387) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3387,
          "vulnerability_to_line": 3398,
          "vulnerability_code": "    function _transferTokens(address src, address dst, uint96 amount) internal {\n\n        require(src != address(0), \"Comp::_transferTokens: cannot transfer from the zero address\");\n\n        require(dst != address(0), \"Comp::_transferTokens: cannot transfer to the zero address\");\n\n\n\n        balances[src] = sub96(balances[src], amount, \"Comp::_transferTokens: transfer amount exceeds balance\");\n\n        balances[dst] = add96(balances[dst], amount, \"Comp::_transferTokens: transfer amount overflows\");\n\n        emit Transfer(src, dst, amount);\n\n\n\n        _moveDelegates(delegates[src], delegates[dst], amount);\n\n    }\n\n\n",
          "message": "Function 'Comp._transferTokens' (CEtherHarness.sol#3387-3398) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3398,
          "vulnerability_to_line": 3416,
          "vulnerability_code": "    function _moveDelegates(address srcRep, address dstRep, uint96 amount) internal {\n\n        if (srcRep != dstRep && amount > 0) {\n\n            if (srcRep != address(0)) {\n\n                uint32 srcRepNum = numCheckpoints[srcRep];\n\n                uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\n\n                uint96 srcRepNew = sub96(srcRepOld, amount, \"Comp::_moveVotes: vote amount underflows\");\n\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\n\n            }\n\n\n\n            if (dstRep != address(0)) {\n\n                uint32 dstRepNum = numCheckpoints[dstRep];\n\n                uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\n\n                uint96 dstRepNew = add96(dstRepOld, amount, \"Comp::_moveVotes: vote amount overflows\");\n\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\n\n            }\n\n        }\n\n    }\n\n\n",
          "message": "Function 'Comp._moveDelegates' (CEtherHarness.sol#3398-3416) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3416,
          "vulnerability_to_line": 3429,
          "vulnerability_code": "    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint96 oldVotes, uint96 newVotes) internal {\n\n      uint32 blockNumber = safe32(block.number, \"Comp::_writeCheckpoint: block number exceeds 32 bits\");\n\n\n\n      if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\n\n          checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n\n      } else {\n\n          checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\n\n          numCheckpoints[delegatee] = nCheckpoints + 1;\n\n      }\n\n\n\n      emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\n\n    }\n\n\n",
          "message": "Function 'Comp._writeCheckpoint' (CEtherHarness.sol#3416-3429) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3169,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public constant totalSupply = 10000000e18; // 10 million Comp\n",
          "message": "Constant 'Comp.totalSupply' (CEtherHarness.sol#3169) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4291,
          "vulnerability_to_line": 4310,
          "vulnerability_code": "    function _setPriceOracle(PriceOracle newOracle) public returns (uint) {\n\n        // Check caller is admin\n\n        if (msg.sender != admin) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK);\n\n        }\n\n\n\n        // Track the old oracle for the comptroller\n\n        PriceOracle oldOracle = oracle;\n\n\n\n        // Set comptroller's oracle to newOracle\n\n        oracle = newOracle;\n\n\n\n        // Emit NewPriceOracle(oldOracle, newOracle)\n\n        emit NewPriceOracle(oldOracle, newOracle);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n\n    /**\n",
          "message": "Function 'Comptroller._setPriceOracle' (CEtherHarness.sol#4291-4310) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4315,
          "vulnerability_to_line": 4327,
          "vulnerability_code": "    function _setCloseFactor(uint newCloseFactorMantissa) external returns (uint) {\n\n        // Check caller is admin\n\n    \trequire(msg.sender == admin, \"only admin can set close factor\");\n\n\n\n        uint oldCloseFactorMantissa = closeFactorMantissa;\n\n        closeFactorMantissa = newCloseFactorMantissa;\n\n        emit NewCloseFactor(oldCloseFactorMantissa, closeFactorMantissa);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n\n    /**\n",
          "message": "Function 'Comptroller._setCloseFactor' (CEtherHarness.sol#4315-4327) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4333,
          "vulnerability_to_line": 4361,
          "vulnerability_code": "    function _setCollateralFactor(CToken cToken, uint newCollateralFactorMantissa) external returns (uint) {\n\n        // Check caller is admin\n\n        if (msg.sender != admin) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_COLLATERAL_FACTOR_OWNER_CHECK);\n\n        }\n\n\n\n        // Verify market is listed\n\n        Market storage market = markets[address(cToken)];\n\n        if (!market.isListed) {\n\n            return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS);\n\n        }\n\n\n\n        // If collateral factor != 0, fail if price == 0\n\n        if (newCollateralFactorMantissa != 0 && oracle.getUnderlyingPrice(cToken) == 0) {\n\n            return fail(Error.PRICE_ERROR, FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE);\n\n        }\n\n\n\n        // Set market's collateral factor to new collateral factor, remember old value\n\n        uint oldCollateralFactorMantissa = market.collateralFactorMantissa;\n\n        market.collateralFactorMantissa = newCollateralFactorMantissa;\n\n\n\n        // Emit event with asset, old collateral factor, and new collateral factor\n\n        emit NewCollateralFactor(cToken, oldCollateralFactorMantissa, newCollateralFactorMantissa);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n\n    /**\n",
          "message": "Function 'Comptroller._setCollateralFactor' (CEtherHarness.sol#4333-4361) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4366,
          "vulnerability_to_line": 4385,
          "vulnerability_code": "    function _setLiquidationIncentive(uint newLiquidationIncentiveMantissa) external returns (uint) {\n\n        // Check caller is admin\n\n        if (msg.sender != admin) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK);\n\n        }\n\n\n\n        // Save current value for use in log\n\n        uint oldLiquidationIncentiveMantissa = liquidationIncentiveMantissa;\n\n\n\n        // Set liquidation incentive to new incentive\n\n        liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\n\n\n\n        // Emit event with old incentive, new incentive\n\n        emit NewLiquidationIncentive(oldLiquidationIncentiveMantissa, newLiquidationIncentiveMantissa);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n\n    /**\n",
          "message": "Function 'Comptroller._setLiquidationIncentive' (CEtherHarness.sol#4366-4385) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4390,
          "vulnerability_to_line": 4410,
          "vulnerability_code": "    function _supportMarket(CToken cToken) external returns (uint) {\n\n        if (msg.sender != admin) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_MARKET_OWNER_CHECK);\n\n        }\n\n\n\n        if (markets[address(cToken)].isListed) {\n\n            return fail(Error.MARKET_ALREADY_LISTED, FailureInfo.SUPPORT_MARKET_EXISTS);\n\n        }\n\n\n\n        cToken.isCToken(); // Sanity check to make sure its really a CToken\n\n\n\n        markets[address(cToken)] = Market({isListed: true, isComped: false, collateralFactorMantissa: 0});\n\n\n\n        _addMarketInternal(address(cToken));\n\n\n\n        emit MarketListed(cToken);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n",
          "message": "Function 'Comptroller._supportMarket' (CEtherHarness.sol#4390-4410) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4410,
          "vulnerability_to_line": 4419,
          "vulnerability_code": "    function _addMarketInternal(address cToken) internal {\n\n        for (uint i = 0; i < allMarkets.length; i ++) {\n\n            require(allMarkets[i] != CToken(cToken), \"market already added\");\n\n        }\n\n        allMarkets.push(CToken(cToken));\n\n    }\n\n\n\n\n\n    /**\n",
          "message": "Function 'Comptroller._addMarketInternal' (CEtherHarness.sol#4410-4419) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4424,
          "vulnerability_to_line": 4439,
          "vulnerability_code": "    function _setMarketBorrowCaps(CToken[] calldata cTokens, uint[] calldata newBorrowCaps) external {\n\n    \trequire(msg.sender == admin || msg.sender == borrowCapGuardian, \"only admin or borrow cap guardian can set borrow caps\"); \n\n\n\n        uint numMarkets = cTokens.length;\n\n        uint numBorrowCaps = newBorrowCaps.length;\n\n\n\n        require(numMarkets != 0 && numMarkets == numBorrowCaps, \"invalid input\");\n\n\n\n        for(uint i = 0; i < numMarkets; i++) {\n\n            borrowCaps[address(cTokens[i])] = newBorrowCaps[i];\n\n            emit NewBorrowCap(cTokens[i], newBorrowCaps[i]);\n\n        }\n\n    }\n\n\n\n    /**\n",
          "message": "Function 'Comptroller._setMarketBorrowCaps' (CEtherHarness.sol#4424-4439) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4442,
          "vulnerability_to_line": 4456,
          "vulnerability_code": "    function _setBorrowCapGuardian(address newBorrowCapGuardian) external {\n\n        require(msg.sender == admin, \"only admin can set borrow cap guardian\");\n\n\n\n        // Save current value for inclusion in log\n\n        address oldBorrowCapGuardian = borrowCapGuardian;\n\n\n\n        // Store borrowCapGuardian with value newBorrowCapGuardian\n\n        borrowCapGuardian = newBorrowCapGuardian;\n\n\n\n        // Emit NewBorrowCapGuardian(OldBorrowCapGuardian, NewBorrowCapGuardian)\n\n        emit NewBorrowCapGuardian(oldBorrowCapGuardian, newBorrowCapGuardian);\n\n    }\n\n\n\n    /**\n",
          "message": "Function 'Comptroller._setBorrowCapGuardian' (CEtherHarness.sol#4442-4456) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4460,
          "vulnerability_to_line": 4477,
          "vulnerability_code": "    function _setPauseGuardian(address newPauseGuardian) public returns (uint) {\n\n        if (msg.sender != admin) {\n\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PAUSE_GUARDIAN_OWNER_CHECK);\n\n        }\n\n\n\n        // Save current value for inclusion in log\n\n        address oldPauseGuardian = pauseGuardian;\n\n\n\n        // Store pauseGuardian with value newPauseGuardian\n\n        pauseGuardian = newPauseGuardian;\n\n\n\n        // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)\n\n        emit NewPauseGuardian(oldPauseGuardian, pauseGuardian);\n\n\n\n        return uint(Error.NO_ERROR);\n\n    }\n\n\n",
          "message": "Function 'Comptroller._setPauseGuardian' (CEtherHarness.sol#4460-4477) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4477,
          "vulnerability_to_line": 4487,
          "vulnerability_code": "    function _setMintPaused(CToken cToken, bool state) public returns (bool) {\n\n        require(markets[address(cToken)].isListed, \"cannot pause a market that is not listed\");\n\n        require(msg.sender == pauseGuardian || msg.sender == admin, \"only pause guardian and admin can pause\");\n\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\n\n\n\n        mintGuardianPaused[address(cToken)] = state;\n\n        emit ActionPaused(cToken, \"Mint\", state);\n\n        return state;\n\n    }\n\n\n",
          "message": "Function 'Comptroller._setMintPaused' (CEtherHarness.sol#4477-4487) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4487,
          "vulnerability_to_line": 4497,
          "vulnerability_code": "    function _setBorrowPaused(CToken cToken, bool state) public returns (bool) {\n\n        require(markets[address(cToken)].isListed, \"cannot pause a market that is not listed\");\n\n        require(msg.sender == pauseGuardian || msg.sender == admin, \"only pause guardian and admin can pause\");\n\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\n\n\n\n        borrowGuardianPaused[address(cToken)] = state;\n\n        emit ActionPaused(cToken, \"Borrow\", state);\n\n        return state;\n\n    }\n\n\n",
          "message": "Function 'Comptroller._setBorrowPaused' (CEtherHarness.sol#4487-4497) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4497,
          "vulnerability_to_line": 4506,
          "vulnerability_code": "    function _setTransferPaused(bool state) public returns (bool) {\n\n        require(msg.sender == pauseGuardian || msg.sender == admin, \"only pause guardian and admin can pause\");\n\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\n\n\n\n        transferGuardianPaused = state;\n\n        emit ActionPaused(\"Transfer\", state);\n\n        return state;\n\n    }\n\n\n",
          "message": "Function 'Comptroller._setTransferPaused' (CEtherHarness.sol#4497-4506) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4506,
          "vulnerability_to_line": 4515,
          "vulnerability_code": "    function _setSeizePaused(bool state) public returns (bool) {\n\n        require(msg.sender == pauseGuardian || msg.sender == admin, \"only pause guardian and admin can pause\");\n\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\n\n\n\n        seizeGuardianPaused = state;\n\n        emit ActionPaused(\"Seize\", state);\n\n        return state;\n\n    }\n\n\n",
          "message": "Function 'Comptroller._setSeizePaused' (CEtherHarness.sol#4506-4515) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4515,
          "vulnerability_to_line": 4522,
          "vulnerability_code": "    function _become(Unitroller unitroller, uint vestingPeriod_) public {\n\n        require(msg.sender == unitroller.admin(), \"only unitroller admin can change brains\");\n\n        require(unitroller._acceptImplementation() == 0, \"change not authorized\");\n\n\n\n        Comptroller(address(unitroller))._becomeG6(vestingPeriod_);\n\n    }\n\n\n",
          "message": "Function 'Comptroller._become' (CEtherHarness.sol#4515-4522) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4522,
          "vulnerability_to_line": 4535,
          "vulnerability_code": "    function _becomeG6(uint vestingPeriod_) public {\n\n        require(msg.sender == comptrollerImplementation, \"only brains can become itself\");\n\n\n\n        for (uint i = 0; i < allMarkets.length; i++) {\n\n            address cToken = address(allMarkets[i]);\n\n            compSupplyVestingState[cToken] = compSupplyState[cToken];\n\n            compBorrowVestingState[cToken] = compBorrowState[cToken];\n\n        }\n\n\n\n        _setVestingPeriod(vestingPeriod_);\n\n    }\n\n\n\n    /**\n",
          "message": "Function 'Comptroller._becomeG6' (CEtherHarness.sol#4522-4535) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4800,
          "vulnerability_to_line": 4809,
          "vulnerability_code": "    function _grantComp(address recipient, uint amount) public returns (uint) {\n\n        require(adminOrInitializing(), \"only admin can grant comp\");\n\n        uint amountLeft = grantCompInternal(recipient, amount);\n\n        if (amountLeft == 0) {\n\n            emit CompGranted(recipient, amount);\n\n        }\n\n    }\n\n\n\n    /**\n",
          "message": "Function 'Comptroller._grantComp' (CEtherHarness.sol#4800-4809) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4813,
          "vulnerability_to_line": 4819,
          "vulnerability_code": "    function _setCompSpeed(CToken cToken, uint compSpeed) public {\n\n        require(adminOrInitializing(), \"only admin can set comp speed\");\n\n        setCompSpeedInternal(cToken, compSpeed);\n\n    }\n\n\n\n    /**\n",
          "message": "Function 'Comptroller._setCompSpeed' (CEtherHarness.sol#4813-4819) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4823,
          "vulnerability_to_line": 4839,
          "vulnerability_code": "    function _setContributorCompSpeed(address contributor, uint compSpeed) public {\n\n        require(adminOrInitializing(), \"only admin can set comp speed\");\n\n\n\n        // note that COMP speed could be set to 0 to halt liquidity rewards for a contributor\n\n        updateContributorRewards(contributor);\n\n        if (compSpeed == 0) {\n\n            // release storage\n\n            delete lastContributorBlock[contributor];\n\n        }\n\n        lastContributorBlock[contributor] = getBlockNumber();\n\n        compContributorSpeeds[contributor] = compSpeed;\n\n        \n\n        emit ContributorCompSpeedUpdated(contributor, compSpeed);\n\n    }\n\n\n\n    /**\n",
          "message": "Function 'Comptroller._setContributorCompSpeed' (CEtherHarness.sol#4823-4839) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4842,
          "vulnerability_to_line": 4856,
          "vulnerability_code": "    function _setVestingPeriod(uint vestingPeriod_) public {\n\n        require(adminOrInitializing(), \"only admin can change vesting period\");\n\n        require(vestingPeriod_ > 0, \"vesting period cannot be 0\");\n\n\n\n        uint oldVestingPeriod = vestingPeriod;\n\n        vestingPeriod = vestingPeriod_;\n\n        emit NewVestingPeriod(oldVestingPeriod, vestingPeriod_);\n\n\n\n        // Change vesting offset to current block - this has the side effect of vesting all COMP\n\n        uint blockNumber = getBlockNumber();\n\n        lastVestingBlock = blockNumber;\n\n    }\n\n\n\n    /**\n",
          "message": "Function 'Comptroller._setVestingPeriod' (CEtherHarness.sol#4842-4856) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4859,
          "vulnerability_to_line": 4867,
          "vulnerability_code": "    function _addCompMarkets(address[] memory cTokens) public {\n\n        require(adminOrInitializing(), \"only admin can add comp market\");\n\n\n\n        for (uint i = 0; i < cTokens.length; i++) {\n\n            _addCompMarketInternal(cTokens[i]);\n\n        }\n\n    }\n\n\n",
          "message": "Function 'Comptroller._addCompMarkets' (CEtherHarness.sol#4859-4867) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4867,
          "vulnerability_to_line": 4891,
          "vulnerability_code": "    function _addCompMarketInternal(address cToken) internal {\n\n        Market storage market = markets[cToken];\n\n        require(market.isListed == true, \"comp market is not listed\");\n\n        require(market.isComped == false, \"comp market already added\");\n\n\n\n        market.isComped = true;\n\n        emit MarketComped(CToken(cToken), true);\n\n\n\n        if (compSupplyState[cToken].index == 0 && compSupplyState[cToken].block == 0) {\n\n            compSupplyState[cToken] = CompMarketState({\n\n                index: compInitialIndex,\n\n                block: safe32(getBlockNumber(), \"block number exceeds 32 bits\")\n\n            });\n\n        }\n\n\n\n        if (compBorrowState[cToken].index == 0 && compBorrowState[cToken].block == 0) {\n\n            compBorrowState[cToken] = CompMarketState({\n\n                index: compInitialIndex,\n\n                block: safe32(getBlockNumber(), \"block number exceeds 32 bits\")\n\n            });\n\n        }\n\n    }\n\n\n\n    /**\n",
          "message": "Function 'Comptroller._addCompMarketInternal' (CEtherHarness.sol#4867-4891) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4894,
          "vulnerability_to_line": 4907,
          "vulnerability_code": "    function _dropCompMarket(address cToken) public {\n\n        require(msg.sender == admin, \"only admin can drop comp market\");\n\n\n\n        Market storage market = markets[cToken];\n\n        require(market.isComped == true, \"market is not a comp market\");\n\n\n\n        market.isComped = false;\n\n        emit MarketComped(CToken(cToken), false);\n\n\n\n        setCompSpeedInternal(CToken(cToken), 0);\n\n    }\n\n\n\n    /**\n",
          "message": "Function 'Comptroller._dropCompMarket' (CEtherHarness.sol#4894-4907) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3535,
          "vulnerability_to_line": 3537,
          "vulnerability_code": "    uint public constant compClaimThreshold = 0.001e18;\n\n\n",
          "message": "Constant 'Comptroller.compClaimThreshold' (CEtherHarness.sol#3535-3537) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3538,
          "vulnerability_to_line": 3540,
          "vulnerability_code": "    uint224 public constant compInitialIndex = 1e36;\n\n\n",
          "message": "Constant 'Comptroller.compInitialIndex' (CEtherHarness.sol#3538-3540) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3541,
          "vulnerability_to_line": 3542,
          "vulnerability_code": "    uint internal constant closeFactorMinMantissa = 0.05e18; // 0.05\n",
          "message": "Constant 'Comptroller.closeFactorMinMantissa' (CEtherHarness.sol#3541-3542) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3544,
          "vulnerability_to_line": 3546,
          "vulnerability_code": "    uint internal constant closeFactorMaxMantissa = 0.9e18; // 0.9\n\n\n",
          "message": "Constant 'Comptroller.closeFactorMaxMantissa' (CEtherHarness.sol#3544-3546) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3547,
          "vulnerability_to_line": 3549,
          "vulnerability_code": "    uint internal constant collateralFactorMaxMantissa = 0.9e18; // 0.9\n\n\n",
          "message": "Constant 'Comptroller.collateralFactorMaxMantissa' (CEtherHarness.sol#3547-3549) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3550,
          "vulnerability_to_line": 3552,
          "vulnerability_code": "    uint internal constant liquidationIncentiveMinMantissa = 1.0e18; // 1.0\n\n\n",
          "message": "Constant 'Comptroller.liquidationIncentiveMinMantissa' (CEtherHarness.sol#3550-3552) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3553,
          "vulnerability_to_line": 3555,
          "vulnerability_code": "    uint internal constant liquidationIncentiveMaxMantissa = 1.5e18; // 1.5\n\n\n",
          "message": "Constant 'Comptroller.liquidationIncentiveMaxMantissa' (CEtherHarness.sol#3553-3555) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 5065,
          "vulnerability_to_line": 5066,
          "vulnerability_code": "    function harnessSetAccrualBlockNumber(uint _accrualblockNumber) public {\n",
          "message": "Parameter '_accrualblockNumber' of CEtherHarness.harnessSetAccrualBlockNumber (CEtherHarness.sol#5065-5066) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 5081,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function harnessExchangeRateDetails(uint _totalSupply, uint _totalBorrows, uint _totalReserves) public {\n",
          "message": "Parameter '_totalSupply' of CEtherHarness.harnessExchangeRateDetails (CEtherHarness.sol#5081) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 5081,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function harnessExchangeRateDetails(uint _totalSupply, uint _totalBorrows, uint _totalReserves) public {\n",
          "message": "Parameter '_totalBorrows' of CEtherHarness.harnessExchangeRateDetails (CEtherHarness.sol#5081) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 5081,
          "vulnerability_to_line": 5082,
          "vulnerability_code": "    function harnessExchangeRateDetails(uint _totalSupply, uint _totalBorrows, uint _totalReserves) public {\n",
          "message": "Parameter '_totalReserves' of CEtherHarness.harnessExchangeRateDetails (CEtherHarness.sol#5081-5082) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 5091,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function harnessSetFailTransferToAddress(address _to, bool _fail) public {\n",
          "message": "Parameter '_to' of CEtherHarness.harnessSetFailTransferToAddress (CEtherHarness.sol#5091) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 5091,
          "vulnerability_to_line": 5092,
          "vulnerability_code": "    function harnessSetFailTransferToAddress(address _to, bool _fail) public {\n",
          "message": "Parameter '_fail' of CEtherHarness.harnessSetFailTransferToAddress (CEtherHarness.sol#5091-5092) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 724,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant mantissaOne = expScale;\n",
          "message": "Exponential.mantissaOne (CEtherHarness.sol#724) is never used in ComptrollerScenario\nComptroller.closeFactorMinMantissa (CEtherHarness.sol#3541-3542) is never used in ComptrollerScenario\nComptroller.closeFactorMaxMantissa (CEtherHarness.sol#3544-3546) is never used in ComptrollerScenario\nComptroller.collateralFactorMaxMantissa (CEtherHarness.sol#3547-3549) is never used in ComptrollerScenario\nComptroller.liquidationIncentiveMinMantissa (CEtherHarness.sol#3550-3552) is never used in ComptrollerScenario\nComptroller.liquidationIncentiveMaxMantissa (CEtherHarness.sol#3553-3555) is never used in ComptrollerScenario\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 5169,
          "vulnerability_to_line": 5171,
          "vulnerability_code": "    uint reserveFactor;\n\n\n",
          "message": "CEtherScenario.reserveFactor (CEtherHarness.sol#5169-5171) is never used in CEtherScenario\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 4947,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return 0xc00e94Cb662C3520282E6f5717214004A7f26888;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 3073,
          "vulnerability_to_line": null,
          "vulnerability_code": "        pendingComptrollerImplementation = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 3125,
          "vulnerability_to_line": null,
          "vulnerability_code": "        pendingAdmin = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 3684,
          "vulnerability_to_line": null,
          "vulnerability_code": "        storedList.length--;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 1373,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address spender, uint256 amount) external returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 4200,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < assets.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 4411,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < allMarkets.length; i ++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 4525,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < allMarkets.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 4751,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < holders.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 4755,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < cTokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 4761,
          "vulnerability_to_line": null,
          "vulnerability_code": "                for (uint j = 0; j < holders.length; j++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 4767,
          "vulnerability_to_line": null,
          "vulnerability_code": "                for (uint j = 0; j < holders.length; j++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 4862,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < cTokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 4800,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _grantComp(address recipient, uint amount) public returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 3591,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < len; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 3671,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < len; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 4200,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < assets.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 4411,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < allMarkets.length; i ++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 4432,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i = 0; i < numMarkets; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 4525,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < allMarkets.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 4751,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < holders.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 4755,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < cTokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 4761,
          "vulnerability_to_line": null,
          "vulnerability_code": "                for (uint j = 0; j < holders.length; j++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 4767,
          "vulnerability_to_line": null,
          "vulnerability_code": "                for (uint j = 0; j < holders.length; j++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 4862,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < cTokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 4989,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < m; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 4997,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < m; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 3363,
          "vulnerability_to_line": null,
          "vulnerability_code": "        while (upper > lower) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 226,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract CTokenInterface is CTokenStorage {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 2654,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract CEther is CToken {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 3013,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Unitroller is UnitrollerAdminStorage, ComptrollerErrorReporter {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 5015,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract CEtherHarness is CEther {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 5168,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract CEtherScenario is CEther {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 413,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 623,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 711,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1080,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1145,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1218,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 2647,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 2816,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 2833,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3005,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3155,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3460,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 4953,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 5012,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 3796,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (redeemTokens == 0 && redeemAmount > 0) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 3450,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getChainId() internal pure returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint repayAmount) external view returns (uint, uint);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 327,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 646,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 663,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 674,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 685,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 698,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 739,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getExp(uint num, uint denom) pure internal returns (MathError, Exp memory) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 756,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 765,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function subExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 774,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mulScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 786,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mulScalarTruncate(Exp memory a, uint scalar) pure internal returns (MathError, uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 798,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mulScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (MathError, uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 826,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function divScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 838,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function divScalarByExp(uint scalar, Exp memory divisor) pure internal returns (MathError, Exp memory) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 858,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function divScalarByExpTruncate(uint scalar, Exp memory divisor) pure internal returns (MathError, uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 870,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mulExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 895,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mulExp(uint a, uint b) pure internal returns (MathError, Exp memory) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 902,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mulExp3(Exp memory a, Exp memory b, Exp memory c) pure internal returns (MathError, Exp memory) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 915,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function divExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1418,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1497,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function borrowBalanceStoredInternal(address account) internal view returns (MathError, uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1554,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function exchangeRateStoredInternal() internal view returns (MathError, uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1685,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mintInternal(uint mintAmount) internal nonReentrant returns (uint, uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1712,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mintFresh(address minter, uint mintAmount) internal returns (uint, uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 4142,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAccountLiquidity(address account) public view returns (uint, uint, uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 4154,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAccountLiquidityInternal(address account) internal view returns (Error, uint, uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 4172,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint borrowAmount) public view returns (uint, uint, uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 4193,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint borrowAmount) internal view returns (Error, uint, uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 4255,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function liquidateCalculateSeizeTokens(address cTokenBorrowed, address cTokenCollateral, uint actualRepayAmount) external view returns (uint, uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 3140,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = comptrollerImplementation.delegatecall(msg.data);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 3142,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 3452,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly { chainId := chainid() }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 342,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1828,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2665,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(ComptrollerInterface comptroller_,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 5021,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(ComptrollerInterface comptroller_,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 5171,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(string memory name_,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 342,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 721,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant expScale = 1e18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 722,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant doubleScale = 1e36;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 723,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant halfExpScale = expScale/2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 724,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant mantissaOne = expScale;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1828,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1828,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1828,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1828,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1829,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(redeemTokensIn == 0 || redeemAmountIn == 0, \"one of redeemTokensIn or redeemAmountIn must be zero\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1831,
          "vulnerability_to_line": null,
          "vulnerability_code": "        RedeemLocalVars memory vars;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1834,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1834,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1834,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1834,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1835,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (vars.mathErr != MathError.NO_ERROR) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1835,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (vars.mathErr != MathError.NO_ERROR) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1836,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1836,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1836,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1836,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1836,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2675,
          "vulnerability_to_line": null,
          "vulnerability_code": "        initialize(comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2675,
          "vulnerability_to_line": null,
          "vulnerability_code": "        initialize(comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2675,
          "vulnerability_to_line": null,
          "vulnerability_code": "        initialize(comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2675,
          "vulnerability_to_line": null,
          "vulnerability_code": "        initialize(comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2678,
          "vulnerability_to_line": null,
          "vulnerability_code": "        admin = admin_;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 5016,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint harnessExchangeRate;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 5027,
          "vulnerability_to_line": null,
          "vulnerability_code": "                address payable admin_)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 5028,
          "vulnerability_to_line": null,
          "vulnerability_code": "    CEther(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 5031,
          "vulnerability_to_line": null,
          "vulnerability_code": "    initialExchangeRateMantissa,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 5033,
          "vulnerability_to_line": null,
          "vulnerability_code": "    symbol_,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 5169,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint reserveFactor;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 5174,
          "vulnerability_to_line": null,
          "vulnerability_code": "                address payable admin_,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 5175,
          "vulnerability_to_line": null,
          "vulnerability_code": "                ComptrollerInterface comptroller_,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 5176,
          "vulnerability_to_line": null,
          "vulnerability_code": "                InterestRateModel interestRateModel_,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 5177,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint initialExchangeRateMantissa)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 5178,
          "vulnerability_to_line": null,
          "vulnerability_code": "        CEther(comptroller_,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 5179,
          "vulnerability_to_line": null,
          "vulnerability_code": "               interestRateModel_,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 5181,
          "vulnerability_to_line": null,
          "vulnerability_code": "               name_,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 5183,
          "vulnerability_to_line": null,
          "vulnerability_code": "               decimals_,\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}