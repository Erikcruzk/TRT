{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 354,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract MintableToken is StandardToken, Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 440,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Pausable is Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 552,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Claimable is Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 630,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract CanReclaimToken is Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 358,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bool public mintingFinished = false;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 444,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bool public paused = false;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 276,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(string memory _name, string memory _symbol, uint8 _decimals) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 277,
          "vulnerability_to_line": null,
          "vulnerability_code": "    name = _name;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": null,
          "vulnerability_code": "    symbol = _symbol;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 279,
          "vulnerability_to_line": null,
          "vulnerability_code": "    decimals = _decimals;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 280,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 305,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 306,
          "vulnerability_to_line": null,
          "vulnerability_code": "    owner = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 307,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 663,
          "vulnerability_to_line": null,
          "vulnerability_code": "        revert(\"renouncing ownership is blocked\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_75"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
          "message": "ERC20Basic.totalSupply (WBTC.sol#17) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": 93,
          "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return totalSupply_;\n",
          "message": "BasicToken.totalSupply (WBTC.sol#91-93) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": 117,
          "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256) {\n\n    return balances[_owner];\n",
          "message": "BasicToken.balanceOf (WBTC.sol#115-117) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address _who) public view returns (uint256);\n",
          "message": "ERC20Basic.balanceOf (WBTC.sol#18) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 202,
          "vulnerability_to_line": 211,
          "vulnerability_code": "  function allowance(\n\n    address _owner,\n\n    address _spender\n\n   )\n\n    public\n\n    view\n\n    returns (uint256)\n\n  {\n\n    return allowed[_owner][_spender];\n",
          "message": "StandardToken.allowance (WBTC.sol#202-211) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": 129,
          "vulnerability_code": "  function allowance(address _owner, address _spender)\n",
          "message": "ERC20.allowance (WBTC.sol#128-129) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 323,
          "vulnerability_to_line": 326,
          "vulnerability_code": "  function renounceOwnership() public onlyOwner {\n\n    emit OwnershipRenounced(owner);\n\n    owner = address(0);\n",
          "message": "Ownable.renounceOwnership (WBTC.sol#323-326) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 662,
          "vulnerability_to_line": 664,
          "vulnerability_code": "    function renounceOwnership() public onlyOwner {\n\n        revert(\"renouncing ownership is blocked\");\n",
          "message": "WBTCToken.renounceOwnership (WBTC.sol#662-664) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 567,
          "vulnerability_to_line": 569,
          "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    pendingOwner = newOwner;\n",
          "message": "Claimable.transferOwnership (WBTC.sol#567-569) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": 334,
          "vulnerability_code": "  function transferOwnership(address _newOwner) public onlyOwner {\n\n    _transferOwnership(_newOwner);\n",
          "message": "Ownable.transferOwnership (WBTC.sol#332-334) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 377,
          "vulnerability_to_line": 391,
          "vulnerability_code": "  function mint(\n\n    address _to,\n\n    uint256 _amount\n\n  )\n\n    public\n\n    hasMintPermission\n\n    canMint\n\n    returns (bool)\n\n  {\n\n    totalSupply_ = totalSupply_.add(_amount);\n\n    balances[_to] = balances[_to].add(_amount);\n\n    emit Mint(_to, _amount);\n\n    emit Transfer(address(0), _to, _amount);\n\n    return true;\n",
          "message": "MintableToken.mint (WBTC.sol#377-391) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 658,
          "vulnerability_to_line": 660,
          "vulnerability_code": "    function finishMinting() public onlyOwner returns (bool) {\n\n        return false;\n",
          "message": "WBTCToken.finishMinting (WBTC.sol#658-660) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 397,
          "vulnerability_to_line": 401,
          "vulnerability_code": "  function finishMinting() public onlyOwner canMint returns (bool) {\n\n    mintingFinished = true;\n\n    emit MintFinished();\n\n    return true;\n",
          "message": "MintableToken.finishMinting (WBTC.sol#397-401) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 466,
          "vulnerability_to_line": 469,
          "vulnerability_code": "  function pause() public onlyOwner whenNotPaused {\n\n    paused = true;\n\n    emit Pause();\n",
          "message": "Pausable.pause (WBTC.sol#466-469) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 474,
          "vulnerability_to_line": 477,
          "vulnerability_code": "  function unpause() public onlyOwner whenPaused {\n\n    paused = false;\n\n    emit Unpause();\n",
          "message": "Pausable.unpause (WBTC.sol#474-477) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 574,
          "vulnerability_to_line": 578,
          "vulnerability_code": "  function claimOwnership() public onlyPendingOwner {\n\n    emit OwnershipTransferred(owner, pendingOwner);\n\n    owner = pendingOwner;\n\n    pendingOwner = address(0);\n",
          "message": "Claimable.claimOwnership (WBTC.sol#574-578) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 669,
          "vulnerability_to_line": 673,
          "vulnerability_code": "    function allocateTo(address _owner, uint256 value) public {\n\n        balances[_owner] += value;\n\n        totalSupply_ += value;\n\n        emit Transfer(address(this), _owner, value);\n",
          "message": "WBTCToken.allocateTo (WBTC.sol#669-673) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": "Detected issues with version pragma in WBTC.sol:\n\t- pragma solidity^0.5.16 (WBTC.sol#7): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_a' of SafeMath.mul (WBTC.sol#34) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_b' of SafeMath.mul (WBTC.sol#34) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_a' of SafeMath.div (WBTC.sol#50) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_b' of SafeMath.div (WBTC.sol#50) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_a' of SafeMath.sub (WBTC.sol#60) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_b' of SafeMath.sub (WBTC.sol#60) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_a' of SafeMath.add (WBTC.sol#68) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n",
          "message": "Parameter '_b' of SafeMath.add (WBTC.sol#68) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256) {\n",
          "message": "Parameter '_owner' of BasicToken.balanceOf (WBTC.sol#115) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 100,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_to' of BasicToken.transfer (WBTC.sol#100) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 100,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of BasicToken.transfer (WBTC.sol#100) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 203,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _owner,\n",
          "message": "Parameter '_owner' of StandardToken.allowance (WBTC.sol#203) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 204,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _spender\n",
          "message": "Parameter '_spender' of StandardToken.allowance (WBTC.sol#204) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 163,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _from,\n",
          "message": "Parameter '_from' of StandardToken.transferFrom (WBTC.sol#163) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 164,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _to,\n",
          "message": "Parameter '_to' of StandardToken.transferFrom (WBTC.sol#164) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 165,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of StandardToken.transferFrom (WBTC.sol#165) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_spender' of StandardToken.approve (WBTC.sol#190) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of StandardToken.approve (WBTC.sol#190) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 223,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _spender,\n",
          "message": "Parameter '_spender' of StandardToken.increaseApproval (WBTC.sol#223) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _addedValue\n",
          "message": "Parameter '_addedValue' of StandardToken.increaseApproval (WBTC.sol#224) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 245,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _spender,\n",
          "message": "Parameter '_spender' of StandardToken.decreaseApproval (WBTC.sol#245) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 246,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _subtractedValue\n",
          "message": "Parameter '_subtractedValue' of StandardToken.decreaseApproval (WBTC.sol#246) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 276,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(string memory _name, string memory _symbol, uint8 _decimals) public {\n",
          "message": "Parameter '_name' of DetailedERC20. (WBTC.sol#276) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 276,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(string memory _name, string memory _symbol, uint8 _decimals) public {\n",
          "message": "Parameter '_symbol' of DetailedERC20. (WBTC.sol#276) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 276,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(string memory _name, string memory _symbol, uint8 _decimals) public {\n",
          "message": "Parameter '_decimals' of DetailedERC20. (WBTC.sol#276) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferOwnership(address _newOwner) public onlyOwner {\n",
          "message": "Parameter '_newOwner' of Ownable.transferOwnership (WBTC.sol#332) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 340,
          "vulnerability_to_line": 344,
          "vulnerability_code": "  function _transferOwnership(address _newOwner) internal {\n\n    require(_newOwner != address(0));\n\n    emit OwnershipTransferred(owner, _newOwner);\n\n    owner = _newOwner;\n",
          "message": "Function 'Ownable._transferOwnership' (WBTC.sol#340-344) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 340,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function _transferOwnership(address _newOwner) internal {\n",
          "message": "Parameter '_newOwner' of Ownable._transferOwnership (WBTC.sol#340) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 378,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _to,\n",
          "message": "Parameter '_to' of MintableToken.mint (WBTC.sol#378) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 379,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _amount\n",
          "message": "Parameter '_amount' of MintableToken.mint (WBTC.sol#379) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 418,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function burn(uint256 _value) public {\n",
          "message": "Parameter '_value' of BurnableToken.burn (WBTC.sol#418) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 422,
          "vulnerability_to_line": 431,
          "vulnerability_code": "  function _burn(address _who, uint256 _value) internal {\n\n    require(_value <= balances[_who]);\n\n    // no need to require value <= totalSupply, since that would imply the\n\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n\n\n    balances[_who] = balances[_who].sub(_value);\n\n    totalSupply_ = totalSupply_.sub(_value);\n\n    emit Burn(_who, _value);\n\n    emit Transfer(_who, address(0), _value);\n",
          "message": "Function 'BurnableToken._burn' (WBTC.sol#422-431) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 422,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function _burn(address _who, uint256 _value) internal {\n",
          "message": "Parameter '_who' of BurnableToken._burn (WBTC.sol#422) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 422,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function _burn(address _who, uint256 _value) internal {\n",
          "message": "Parameter '_value' of BurnableToken._burn (WBTC.sol#422) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 489,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _to,\n",
          "message": "Parameter '_to' of PausableToken.transfer (WBTC.sol#489) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 490,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of PausableToken.transfer (WBTC.sol#490) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 500,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _from,\n",
          "message": "Parameter '_from' of PausableToken.transferFrom (WBTC.sol#500) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 501,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _to,\n",
          "message": "Parameter '_to' of PausableToken.transferFrom (WBTC.sol#501) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 502,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of PausableToken.transferFrom (WBTC.sol#502) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 512,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _spender,\n",
          "message": "Parameter '_spender' of PausableToken.approve (WBTC.sol#512) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 513,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of PausableToken.approve (WBTC.sol#513) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 523,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _spender,\n",
          "message": "Parameter '_spender' of PausableToken.increaseApproval (WBTC.sol#523) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 524,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint _addedValue\n",
          "message": "Parameter '_addedValue' of PausableToken.increaseApproval (WBTC.sol#524) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 534,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _spender,\n",
          "message": "Parameter '_spender' of PausableToken.decreaseApproval (WBTC.sol#534) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 535,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint _subtractedValue\n",
          "message": "Parameter '_subtractedValue' of PausableToken.decreaseApproval (WBTC.sol#535) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 591,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ERC20Basic _token,\n",
          "message": "Parameter '_token' of SafeERC20.safeTransfer (WBTC.sol#591) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 592,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _to,\n",
          "message": "Parameter '_to' of SafeERC20.safeTransfer (WBTC.sol#592) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 593,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of SafeERC20.safeTransfer (WBTC.sol#593) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 601,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ERC20 _token,\n",
          "message": "Parameter '_token' of SafeERC20.safeTransferFrom (WBTC.sol#601) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 602,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _from,\n",
          "message": "Parameter '_from' of SafeERC20.safeTransferFrom (WBTC.sol#602) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 603,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _to,\n",
          "message": "Parameter '_to' of SafeERC20.safeTransferFrom (WBTC.sol#603) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 604,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of SafeERC20.safeTransferFrom (WBTC.sol#604) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 612,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ERC20 _token,\n",
          "message": "Parameter '_token' of SafeERC20.safeApprove (WBTC.sol#612) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 613,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _spender,\n",
          "message": "Parameter '_spender' of SafeERC20.safeApprove (WBTC.sol#613) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 614,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of SafeERC20.safeApprove (WBTC.sol#614) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 637,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function reclaimToken(ERC20Basic _token) external onlyOwner {\n",
          "message": "Parameter '_token' of CanReclaimToken.reclaimToken (WBTC.sol#637) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 669,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allocateTo(address _owner, uint256 value) public {\n",
          "message": "Parameter '_owner' of WBTCToken.allocateTo (WBTC.sol#669) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 325,
          "vulnerability_to_line": null,
          "vulnerability_code": "    owner = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 577,
          "vulnerability_to_line": null,
          "vulnerability_code": "    pendingOwner = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 511,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}