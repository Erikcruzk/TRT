{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "inefficient-state-variable-increment",
          "vulnerability_from_line": 227,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _guardCounter += 1;\n",
          "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 213,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor () internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 214,
          "vulnerability_to_line": null,
          "vulnerability_code": "        // The counter starts at one to prevent changing it from zero to a non-zero\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": null,
          "vulnerability_code": "        // value, which is a more expensive operation.\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _guardCounter = 1;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 441,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint initialSupply, address account, address _minter) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 442,
          "vulnerability_to_line": null,
          "vulnerability_code": "        totalSupply = safe96(initialSupply, \"FuelToken::constructor:amount exceeds 96 bits\");\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 443,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balances[account] = uint96(initialSupply);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 444,
          "vulnerability_to_line": null,
          "vulnerability_code": "        minter = _minter;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 445,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit Transfer(address(0), account, initialSupply);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 446,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 850,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 851,
          "vulnerability_to_line": null,
          "vulnerability_code": "        IERC20 _token,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 852,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _baseVestingDepositAccount,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 853,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _start,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 854,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _end,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 855,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _cliffDurationInSecs\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 856,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 857,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(_token) != address(0), \"VestingContract::constructor: Invalid token\");\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 858,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_end >= _start, \"VestingContract::constructor: Start must be before end\");\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 859,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 621,
          "vulnerability_to_line": null,
          "vulnerability_code": "            Checkpoint memory cp = checkpoints[account][center];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 230,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 432,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == minter, \"FuelToken:onlyMinter: should only be called by minter\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 576,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(signatory != address(0), \"FuelToken::delegateBySig: invalid signature\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 577,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(nonce == nonces[signatory]++, \"FuelToken::delegateBySig: invalid nonce\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 578,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(now <= expiry, \"FuelToken::delegateBySig: signature expired\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 600,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(blockNumber < block.number, \"FuelToken::getPriorVotes: not yet determined\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 644,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(src != address(0), \"FuelToken::_transferTokens: cannot transfer from the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 645,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(dst != address(0), \"FuelToken::_transferTokens: cannot transfer to the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 655,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(dst != address(0), \"FuelToken::_mintTokens: cannot transfer to the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 754,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(controller == address(0), \"VestingDepositAccount::init: Contract already initialized\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 769,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == controller, \"VestingDepositAccount::transferToBeneficiary: Only controller\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 779,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == controller, \"VestingDepositAccount::switchBeneficiary: Only controller\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 857,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(_token) != address(0), \"VestingContract::constructor: Invalid token\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 858,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_end >= _start, \"VestingContract::constructor: Start must be before end\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 877,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == owner, \"VestingContract::createVestingSchedule: Only Owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 878,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_beneficiary != address(0), \"VestingContract::createVestingSchedule: Beneficiary cannot be empty\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 879,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_amount > 0, \"VestingContract::createVestingSchedule: Amount cannot be empty\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 882,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 883,
          "vulnerability_to_line": null,
          "vulnerability_code": "            vestingSchedule[_beneficiary].amount == 0,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 884,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"VestingContract::createVestingSchedule: Schedule already in flight\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 885,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 899,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 900,
          "vulnerability_to_line": null,
          "vulnerability_code": "            token.transferFrom(msg.sender, address(depositAccount), _amount),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 901,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"VestingContract::createVestingSchedule: Unable to transfer tokens to VDA\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 902,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 925,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == owner, \"VestingContract::updateScheduleBeneficiary: Only owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 929,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 930,
          "vulnerability_to_line": null,
          "vulnerability_code": "            schedule.amount > 0,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 931,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"VestingContract::updateScheduleBeneficiary: There is no schedule currently in flight\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 932,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 933,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_drawDown(_currentBeneficiary), \"VestingContract::_updateScheduleBeneficiary: Unable to drawn down\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1012,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(schedule.amount > 0, \"VestingContract::_drawDown: There is no schedule currently in flight\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1015,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(amount > 0, \"VestingContract::_drawDown: No allowance left to withdraw\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1024,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1025,
          "vulnerability_to_line": null,
          "vulnerability_code": "            totalDrawn[_beneficiary] <= schedule.amount,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1026,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"VestingContract::_drawDown: Safety Mechanism - Drawn exceeded Amount Vested\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1027,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1030,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1031,
          "vulnerability_to_line": null,
          "vulnerability_code": "            schedule.depositAccount.transferToBeneficiary(amount),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1032,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"VestingContract::_drawDown: Unable to transfer tokens\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1033,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 543,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (spender != src && spenderAllowance != uint96(-1)) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 544,
          "vulnerability_to_line": null,
          "vulnerability_code": "            uint96 newAllowance = sub96(spenderAllowance, amount, \"FuelToken::transferFrom: transfer amount exceeds spender allowance\");\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 545,
          "vulnerability_to_line": null,
          "vulnerability_code": "            allowances[src][spender] = newAllowance;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 546,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 547,
          "vulnerability_to_line": null,
          "vulnerability_code": "            emit Approval(src, spender, newAllowance);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 548,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 674,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (srcRep != dstRep && amount > 0) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 675,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (srcRep != address(0)) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 676,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint32 srcRepNum = numCheckpoints[srcRep];\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 677,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 678,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint96 srcRepNew = sub96(srcRepOld, amount, \"FuelToken::_moveVotes: vote amount underflows\");\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 679,
          "vulnerability_to_line": null,
          "vulnerability_code": "                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 680,
          "vulnerability_to_line": null,
          "vulnerability_code": "            }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 681,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 682,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (dstRep != address(0)) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 683,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint32 dstRepNum = numCheckpoints[dstRep];\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 694,
          "vulnerability_to_line": null,
          "vulnerability_code": "      if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 695,
          "vulnerability_to_line": null,
          "vulnerability_code": "          checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 696,
          "vulnerability_to_line": null,
          "vulnerability_code": "      } else {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 697,
          "vulnerability_to_line": null,
          "vulnerability_code": "          checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 698,
          "vulnerability_to_line": null,
          "vulnerability_code": "          numCheckpoints[delegatee] = nCheckpoints + 1;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 699,
          "vulnerability_to_line": null,
          "vulnerability_code": "      }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 577,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(nonce == nonces[signatory]++, \"FuelToken::delegateBySig: invalid nonce\");\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 432,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == minter, \"FuelToken:onlyMinter: should only be called by minter\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 576,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(signatory != address(0), \"FuelToken::delegateBySig: invalid signature\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 577,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(nonce == nonces[signatory]++, \"FuelToken::delegateBySig: invalid nonce\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 578,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(now <= expiry, \"FuelToken::delegateBySig: signature expired\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 600,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(blockNumber < block.number, \"FuelToken::getPriorVotes: not yet determined\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 644,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(src != address(0), \"FuelToken::_transferTokens: cannot transfer from the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 645,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(dst != address(0), \"FuelToken::_transferTokens: cannot transfer to the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 655,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(dst != address(0), \"FuelToken::_mintTokens: cannot transfer to the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 754,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(controller == address(0), \"VestingDepositAccount::init: Contract already initialized\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 769,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == controller, \"VestingDepositAccount::transferToBeneficiary: Only controller\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 779,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == controller, \"VestingDepositAccount::switchBeneficiary: Only controller\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 857,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(_token) != address(0), \"VestingContract::constructor: Invalid token\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 858,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_end >= _start, \"VestingContract::constructor: Start must be before end\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 877,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == owner, \"VestingContract::createVestingSchedule: Only Owner\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 878,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_beneficiary != address(0), \"VestingContract::createVestingSchedule: Beneficiary cannot be empty\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 879,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_amount > 0, \"VestingContract::createVestingSchedule: Amount cannot be empty\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 882,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 883,
          "vulnerability_to_line": null,
          "vulnerability_code": "            vestingSchedule[_beneficiary].amount == 0,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 884,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"VestingContract::createVestingSchedule: Schedule already in flight\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 885,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 899,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 900,
          "vulnerability_to_line": null,
          "vulnerability_code": "            token.transferFrom(msg.sender, address(depositAccount), _amount),\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 901,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"VestingContract::createVestingSchedule: Unable to transfer tokens to VDA\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 902,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 925,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == owner, \"VestingContract::updateScheduleBeneficiary: Only owner\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 929,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 930,
          "vulnerability_to_line": null,
          "vulnerability_code": "            schedule.amount > 0,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 931,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"VestingContract::updateScheduleBeneficiary: There is no schedule currently in flight\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 932,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 933,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_drawDown(_currentBeneficiary), \"VestingContract::_updateScheduleBeneficiary: Unable to drawn down\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1012,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(schedule.amount > 0, \"VestingContract::_drawDown: There is no schedule currently in flight\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1015,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(amount > 0, \"VestingContract::_drawDown: No allowance left to withdraw\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1024,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1025,
          "vulnerability_to_line": null,
          "vulnerability_code": "            totalDrawn[_beneficiary] <= schedule.amount,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1026,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"VestingContract::_drawDown: Safety Mechanism - Drawn exceeded Amount Vested\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1027,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1030,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1031,
          "vulnerability_to_line": null,
          "vulnerability_code": "            schedule.depositAccount.transferToBeneficiary(amount),\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1032,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"VestingContract::_drawDown: Unable to transfer tokens\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1033,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_40"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 725,
          "vulnerability_to_line": 729,
          "vulnerability_code": "    function getChainId() internal pure returns (uint) {\n\n        uint256 chainId;\n\n        assembly { chainId := chainid() }\n\n        return chainId;\n",
          "message": "FuelToken.getChainId (VestingContract.sol#725-729) is declared view but contains assembly code\n"
        },
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 691,
          "vulnerability_to_line": 702,
          "vulnerability_code": "    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint96 oldVotes, uint96 newVotes) internal {\n\n      uint32 blockNumber = safe32(block.number, \"FuelToken::_writeCheckpoint: block number exceeds 32 bits\");\n\n\n\n      if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\n\n          checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n\n      } else {\n\n          checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\n\n          numCheckpoints[delegatee] = nCheckpoints + 1;\n\n      }\n\n\n\n      emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\n",
          "message": "FuelToken._writeCheckpoint (VestingContract.sol#691-702) uses a dangerous strict equality:\n\t- nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 876,
          "vulnerability_to_line": 907,
          "vulnerability_code": "    function createVestingSchedule(address _beneficiary, uint256 _amount) external returns (bool) {\n\n        require(msg.sender == owner, \"VestingContract::createVestingSchedule: Only Owner\");\n\n        require(_beneficiary != address(0), \"VestingContract::createVestingSchedule: Beneficiary cannot be empty\");\n\n        require(_amount > 0, \"VestingContract::createVestingSchedule: Amount cannot be empty\");\n\n\n\n        // Ensure only one per address\n\n        require(\n\n            vestingSchedule[_beneficiary].amount == 0,\n\n            \"VestingContract::createVestingSchedule: Schedule already in flight\"\n\n        );\n\n\n\n        // Set up the vesting deposit account for the _beneficiary\n\n        address depositAccountAddress = createClone(baseVestingDepositAccount);\n\n        VestingDepositAccount depositAccount = VestingDepositAccount(depositAccountAddress);\n\n        depositAccount.init(address(token), address(this), _beneficiary);\n\n\n\n        // Create schedule\n\n        vestingSchedule[_beneficiary] = Schedule({\n\n            amount : _amount,\n\n            depositAccount : depositAccount\n\n            });\n\n\n\n        // Vest the tokens into the deposit account and delegate to the beneficiary\n\n        require(\n\n            token.transferFrom(msg.sender, address(depositAccount), _amount),\n\n            \"VestingContract::createVestingSchedule: Unable to transfer tokens to VDA\"\n\n        );\n\n\n\n        emit ScheduleCreated(_beneficiary, _amount);\n\n\n\n        return true;\n",
          "message": "Reentrancy in VestingContract.createVestingSchedule (VestingContract.sol#876-907):\n\tExternal calls:\n\t- depositAccount.init(address(token),address(this),_beneficiary) (VestingContract.sol#890)\n\tState variables written after the call(s):\n\t- vestingSchedule (VestingContract.sol#893-896)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 924,
          "vulnerability_to_line": 945,
          "vulnerability_code": "    function updateScheduleBeneficiary(address _currentBeneficiary, address _newBeneficiary) external {\n\n        require(msg.sender == owner, \"VestingContract::updateScheduleBeneficiary: Only owner\");\n\n\n\n        // retrieve existing schedule\n\n        Schedule memory schedule = vestingSchedule[_currentBeneficiary];\n\n        require(\n\n            schedule.amount > 0,\n\n            \"VestingContract::updateScheduleBeneficiary: There is no schedule currently in flight\"\n\n        );\n\n        require(_drawDown(_currentBeneficiary), \"VestingContract::_updateScheduleBeneficiary: Unable to drawn down\");\n\n\n\n        // the old schedule is now void\n\n        voided[_currentBeneficiary] = true;\n\n\n\n        // setup new schedule with the amount left after the previous beneficiary's draw down\n\n        vestingSchedule[_newBeneficiary] = Schedule({\n\n            amount : schedule.amount.sub(totalDrawn[_currentBeneficiary]),\n\n            depositAccount : schedule.depositAccount\n\n            });\n\n\n\n        vestingSchedule[_newBeneficiary].depositAccount.switchBeneficiary(_newBeneficiary);\n",
          "message": "Reentrancy in VestingContract.updateScheduleBeneficiary (VestingContract.sol#924-945):\n\tExternal calls:\n\t- require(bool,string)(_drawDown(_currentBeneficiary),VestingContract::_updateScheduleBeneficiary: Unable to drawn down) (VestingContract.sol#933)\n\tState variables written after the call(s):\n\t- vestingSchedule (VestingContract.sol#939-942)\n\t- voided (VestingContract.sol#936)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 267,
          "vulnerability_to_line": 276,
          "vulnerability_code": "    function createClone(address target) internal returns (address result) {\n\n        bytes20 targetBytes = bytes20(target);\n\n        assembly {\n\n            let clone := mload(0x40)\n\n            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n\n            mstore(add(clone, 0x14), targetBytes)\n\n            mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n\n            result := create(0, clone, 0x37)\n\n        }\n",
          "message": "CloneFactory.createClone uses assembly (VestingContract.sol#267-276)\n\t- VestingContract.sol#269-275\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 725,
          "vulnerability_to_line": 729,
          "vulnerability_code": "    function getChainId() internal pure returns (uint) {\n\n        uint256 chainId;\n\n        assembly { chainId := chainid() }\n\n        return chainId;\n",
          "message": "FuelToken.getChainId uses assembly (VestingContract.sol#725-729)\n\t- VestingContract.sol#727\n"
        },
        {
          "name": "pragma",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": "Different versions of Solidity is used in VestingContract.sol:\n\t- Version used: ['ABIEncoderV2', '^0.5.0', '^0.5.16']\n\t- VestingContract.sol#3 declares pragma solidity^0.5.16\n\t- VestingContract.sol#192 declares pragma solidity^0.5.0\n\t- VestingContract.sol#236 declares pragma solidity^0.5.16\n\t- VestingContract.sol#281 declares pragma solidity^0.5.16\n\t- VestingContract.sol#360 declares pragma solidity^0.5.16\n\t- VestingContract.sol#361 declares pragma experimentalABIEncoderV2\n\t- VestingContract.sol#734 declares pragma solidity^0.5.16\n\t- VestingContract.sol#789 declares pragma solidity^0.5.16\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 558,
          "vulnerability_to_line": 560,
          "vulnerability_code": "    function delegate(address delegatee) public {\n\n        return _delegate(msg.sender, delegatee);\n",
          "message": "FuelToken.delegate (VestingContract.sol#558-560) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 571,
          "vulnerability_to_line": 580,
          "vulnerability_code": "    function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public {\n\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\n\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\n\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n\n        address signatory = ecrecover(digest, v, r, s);\n\n        require(signatory != address(0), \"FuelToken::delegateBySig: invalid signature\");\n\n        require(nonce == nonces[signatory]++, \"FuelToken::delegateBySig: invalid nonce\");\n\n        require(now <= expiry, \"FuelToken::delegateBySig: signature expired\");\n\n        return _delegate(signatory, delegatee);\n",
          "message": "FuelToken.delegateBySig (VestingContract.sol#571-580) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 599,
          "vulnerability_to_line": 631,
          "vulnerability_code": "    function getPriorVotes(address account, uint blockNumber) public view returns (uint96) {\n\n        require(blockNumber < block.number, \"FuelToken::getPriorVotes: not yet determined\");\n\n\n\n        uint32 nCheckpoints = numCheckpoints[account];\n\n        if (nCheckpoints == 0) {\n\n            return 0;\n\n        }\n\n\n\n        // First check most recent balance\n\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\n\n            return checkpoints[account][nCheckpoints - 1].votes;\n\n        }\n\n\n\n        // Next check implicit zero balance\n\n        if (checkpoints[account][0].fromBlock > blockNumber) {\n\n            return 0;\n\n        }\n\n\n\n        uint32 lower = 0;\n\n        uint32 upper = nCheckpoints - 1;\n\n        while (upper > lower) {\n\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n\n            Checkpoint memory cp = checkpoints[account][center];\n\n            if (cp.fromBlock == blockNumber) {\n\n                return cp.votes;\n\n            } else if (cp.fromBlock < blockNumber) {\n\n                lower = center;\n\n            } else {\n\n                upper = center - 1;\n\n            }\n\n        }\n\n        return checkpoints[account][lower].votes;\n",
          "message": "FuelToken.getPriorVotes (VestingContract.sol#599-631) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": "Detected issues with version pragma in VestingContract.sol:\n\t- pragma solidity^0.5.16 (VestingContract.sol#3): it allows old versions\n\t- pragma solidity^0.5.0 (VestingContract.sol#192): it allows old versions\n\t- pragma solidity^0.5.16 (VestingContract.sol#236): it allows old versions\n\t- pragma solidity^0.5.16 (VestingContract.sol#281): it allows old versions\n\t- pragma solidity^0.5.16 (VestingContract.sol#360): it allows old versions\n\t- pragma solidity^0.5.16 (VestingContract.sol#734): it allows old versions\n\t- pragma solidity^0.5.16 (VestingContract.sol#789): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 441,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint initialSupply, address account, address _minter) public {\n",
          "message": "Parameter '_minter' of FuelToken. (VestingContract.sol#441) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 633,
          "vulnerability_to_line": 641,
          "vulnerability_code": "    function _delegate(address delegator, address delegatee) internal {\n\n        address currentDelegate = delegates[delegator];\n\n        uint96 delegatorBalance = balances[delegator];\n\n        delegates[delegator] = delegatee;\n\n\n\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\n\n\n\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\n",
          "message": "Function 'FuelToken._delegate' (VestingContract.sol#633-641) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 643,
          "vulnerability_to_line": 652,
          "vulnerability_code": "    function _transferTokens(address src, address dst, uint96 amount) internal {\n\n        require(src != address(0), \"FuelToken::_transferTokens: cannot transfer from the zero address\");\n\n        require(dst != address(0), \"FuelToken::_transferTokens: cannot transfer to the zero address\");\n\n\n\n        balances[src] = sub96(balances[src], amount, \"FuelToken::_transferTokens: transfer amount exceeds balance\");\n\n        balances[dst] = add96(balances[dst], amount, \"FuelToken::_transferTokens: transfer amount overflows\");\n\n        emit Transfer(src, dst, amount);\n\n\n\n        _moveDelegates(delegates[src], delegates[dst], amount);\n",
          "message": "Function 'FuelToken._transferTokens' (VestingContract.sol#643-652) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 654,
          "vulnerability_to_line": 662,
          "vulnerability_code": "    function _mintTokens(address dst, uint96 amount) internal {\n\n        require(dst != address(0), \"FuelToken::_mintTokens: cannot transfer to the zero address\");\n\n        uint96 supply = safe96(totalSupply, \"FuelToken::_mintTokens: totalSupply exceeds 96 bits\");\n\n        totalSupply = add96(supply, amount, \"FuelToken::_mintTokens: totalSupply exceeds 96 bits\");\n\n        balances[dst] = add96(balances[dst], amount, \"FuelToken::_mintTokens: transfer amount overflows\");\n\n        emit Transfer(address(0), dst, amount);\n\n\n\n        _moveDelegates(address(0), delegates[dst], amount);\n",
          "message": "Function 'FuelToken._mintTokens' (VestingContract.sol#654-662) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 664,
          "vulnerability_to_line": 671,
          "vulnerability_code": "    function _burnTokens(address src, uint96 amount) internal {\n\n        uint96 supply = safe96(totalSupply, \"FuelToken::_burnTokens: totalSupply exceeds 96 bits\");\n\n        totalSupply = sub96(supply, amount, \"FuelToken::_burnTokens:totalSupply underflow\");\n\n        balances[src] = sub96(balances[src], amount, \"FuelToken::_burnTokens: amount overflows\");\n\n        emit Transfer(src, address(0), amount);\n\n\n\n        _moveDelegates(delegates[src], address(0), amount);\n",
          "message": "Function 'FuelToken._burnTokens' (VestingContract.sol#664-671) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 673,
          "vulnerability_to_line": 689,
          "vulnerability_code": "    function _moveDelegates(address srcRep, address dstRep, uint96 amount) internal {\n\n        if (srcRep != dstRep && amount > 0) {\n\n            if (srcRep != address(0)) {\n\n                uint32 srcRepNum = numCheckpoints[srcRep];\n\n                uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\n\n                uint96 srcRepNew = sub96(srcRepOld, amount, \"FuelToken::_moveVotes: vote amount underflows\");\n\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\n\n            }\n\n\n\n            if (dstRep != address(0)) {\n\n                uint32 dstRepNum = numCheckpoints[dstRep];\n\n                uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\n\n                uint96 dstRepNew = add96(dstRepOld, amount, \"FuelToken::_moveVotes: vote amount overflows\");\n\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\n\n            }\n\n        }\n",
          "message": "Function 'FuelToken._moveDelegates' (VestingContract.sol#673-689) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 691,
          "vulnerability_to_line": 702,
          "vulnerability_code": "    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint96 oldVotes, uint96 newVotes) internal {\n\n      uint32 blockNumber = safe32(block.number, \"FuelToken::_writeCheckpoint: block number exceeds 32 bits\");\n\n\n\n      if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\n\n          checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n\n      } else {\n\n          checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\n\n          numCheckpoints[delegatee] = nCheckpoints + 1;\n\n      }\n\n\n\n      emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\n",
          "message": "Function 'FuelToken._writeCheckpoint' (VestingContract.sol#691-702) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 753,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function init(address _tokenAddress, address _controller, address _beneficiary) external {\n",
          "message": "Parameter '_tokenAddress' of VestingDepositAccount.init (VestingContract.sol#753) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 753,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function init(address _tokenAddress, address _controller, address _beneficiary) external {\n",
          "message": "Parameter '_controller' of VestingDepositAccount.init (VestingContract.sol#753) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 753,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function init(address _tokenAddress, address _controller, address _beneficiary) external {\n",
          "message": "Parameter '_beneficiary' of VestingDepositAccount.init (VestingContract.sol#753) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 768,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferToBeneficiary(uint256 _amount) external returns (bool) {\n",
          "message": "Parameter '_amount' of VestingDepositAccount.transferToBeneficiary (VestingContract.sol#768) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 778,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function switchBeneficiary(address _newBeneficiary) external {\n",
          "message": "Parameter '_newBeneficiary' of VestingDepositAccount.switchBeneficiary (VestingContract.sol#778) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 851,
          "vulnerability_to_line": null,
          "vulnerability_code": "        IERC20 _token,\n",
          "message": "Parameter '_token' of VestingContract. (VestingContract.sol#851) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 852,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _baseVestingDepositAccount,\n",
          "message": "Parameter '_baseVestingDepositAccount' of VestingContract. (VestingContract.sol#852) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 853,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _start,\n",
          "message": "Parameter '_start' of VestingContract. (VestingContract.sol#853) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 854,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _end,\n",
          "message": "Parameter '_end' of VestingContract. (VestingContract.sol#854) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 855,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _cliffDurationInSecs\n",
          "message": "Parameter '_cliffDurationInSecs' of VestingContract. (VestingContract.sol#855) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 876,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function createVestingSchedule(address _beneficiary, uint256 _amount) external returns (bool) {\n",
          "message": "Parameter '_beneficiary' of VestingContract.createVestingSchedule (VestingContract.sol#876) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 876,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function createVestingSchedule(address _beneficiary, uint256 _amount) external returns (bool) {\n",
          "message": "Parameter '_amount' of VestingContract.createVestingSchedule (VestingContract.sol#876) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 924,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function updateScheduleBeneficiary(address _currentBeneficiary, address _newBeneficiary) external {\n",
          "message": "Parameter '_currentBeneficiary' of VestingContract.updateScheduleBeneficiary (VestingContract.sol#924) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 924,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function updateScheduleBeneficiary(address _currentBeneficiary, address _newBeneficiary) external {\n",
          "message": "Parameter '_newBeneficiary' of VestingContract.updateScheduleBeneficiary (VestingContract.sol#924) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 968,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function vestingScheduleForBeneficiary(address _beneficiary)\n",
          "message": "Parameter '_beneficiary' of VestingContract.vestingScheduleForBeneficiary (VestingContract.sol#968) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 994,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function availableDrawDownAmount(address _beneficiary) external view returns (uint256 _amount) {\n",
          "message": "Parameter '_beneficiary' of VestingContract.availableDrawDownAmount (VestingContract.sol#994) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1003,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function remainingBalance(address _beneficiary) external view returns (uint256 _remainingBalance) {\n",
          "message": "Parameter '_beneficiary' of VestingContract.remainingBalance (VestingContract.sol#1003) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1010,
          "vulnerability_to_line": 1038,
          "vulnerability_code": "    function _drawDown(address _beneficiary) internal returns (bool) {\n\n        Schedule memory schedule = vestingSchedule[_beneficiary];\n\n        require(schedule.amount > 0, \"VestingContract::_drawDown: There is no schedule currently in flight\");\n\n\n\n        uint256 amount = _availableDrawDownAmount(_beneficiary);\n\n        require(amount > 0, \"VestingContract::_drawDown: No allowance left to withdraw\");\n\n\n\n        // Update last drawn to now\n\n        lastDrawnAt[_beneficiary] = _getNow();\n\n\n\n        // Increase total drawn amount\n\n        totalDrawn[_beneficiary] = totalDrawn[_beneficiary].add(amount);\n\n\n\n        // Safety measure - this should never trigger\n\n        require(\n\n            totalDrawn[_beneficiary] <= schedule.amount,\n\n            \"VestingContract::_drawDown: Safety Mechanism - Drawn exceeded Amount Vested\"\n\n        );\n\n\n\n        // Issue tokens to beneficiary\n\n        require(\n\n            schedule.depositAccount.transferToBeneficiary(amount),\n\n            \"VestingContract::_drawDown: Unable to transfer tokens\"\n\n        );\n\n\n\n        emit DrawDown(_beneficiary, amount, _getNow());\n\n\n\n        return true;\n",
          "message": "Function 'VestingContract._drawDown' (VestingContract.sol#1010-1038) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1010,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _drawDown(address _beneficiary) internal returns (bool) {\n",
          "message": "Parameter '_beneficiary' of VestingContract._drawDown (VestingContract.sol#1010) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1040,
          "vulnerability_to_line": 1042,
          "vulnerability_code": "    function _getNow() internal view returns (uint256) {\n\n        return block.timestamp;\n",
          "message": "Function 'VestingContract._getNow' (VestingContract.sol#1040-1042) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1044,
          "vulnerability_to_line": 1076,
          "vulnerability_code": "    function _availableDrawDownAmount(address _beneficiary) internal view returns (uint256 _amount) {\n\n        Schedule memory schedule = vestingSchedule[_beneficiary];\n\n\n\n        // voided contract should not allow any draw downs\n\n        if (voided[_beneficiary]) {\n\n            return 0;\n\n        }\n\n\n\n        // cliff\n\n        if (_getNow() <= start.add(cliffDuration)) {\n\n            // the cliff period has not ended, no tokens to draw down\n\n            return 0;\n\n        }\n\n\n\n        // schedule complete\n\n        if (_getNow() > end) {\n\n            return schedule.amount.sub(totalDrawn[_beneficiary]);\n\n        }\n\n\n\n        // Schedule is active\n\n\n\n        // Work out when the last invocation was\n\n        uint256 timeLastDrawnOrStart = lastDrawnAt[_beneficiary] == 0 ? start : lastDrawnAt[_beneficiary];\n\n\n\n        // Find out how much time has past since last invocation\n\n        uint256 timePassedSinceLastInvocation = _getNow().sub(timeLastDrawnOrStart);\n\n\n\n        // Work out how many due tokens - time passed * rate per second\n\n        uint256 drawDownRate = schedule.amount.div(end.sub(start));\n\n        uint256 amount = timePassedSinceLastInvocation.mul(drawDownRate);\n\n\n\n        return amount;\n",
          "message": "Function 'VestingContract._availableDrawDownAmount' (VestingContract.sol#1044-1076) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1044,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _availableDrawDownAmount(address _beneficiary) internal view returns (uint256 _amount) {\n",
          "message": "Parameter '_beneficiary' of VestingContract._availableDrawDownAmount (VestingContract.sol#1044) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 661,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _moveDelegates(address(0), delegates[dst], amount);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 670,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _moveDelegates(delegates[src], address(0), amount);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 466,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address spender, uint rawAmount) external returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 267,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function createClone(address target) internal returns (address result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 619,
          "vulnerability_to_line": null,
          "vulnerability_code": "        while (upper > lower) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 192,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 236,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 281,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 360,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 734,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 789,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _guardCounter;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 797,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 725,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getChainId() internal pure returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 970,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 269,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 727,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly { chainId := chainid() }\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}