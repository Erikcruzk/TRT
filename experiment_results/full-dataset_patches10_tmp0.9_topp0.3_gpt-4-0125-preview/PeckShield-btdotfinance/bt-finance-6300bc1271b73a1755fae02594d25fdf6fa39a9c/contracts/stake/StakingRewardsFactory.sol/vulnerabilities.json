{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 383,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 387,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 398,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 403,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 408,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 673,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract StakingRewardsFactory is Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 722,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < stakingTokens.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 729,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _rewardRates.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 789,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < stakingTokens.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "inefficient-state-variable-increment",
          "vulnerability_from_line": 469,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _guardCounter += 1;\n",
          "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 521,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public periodFinish = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 522,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public rewardRate = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor () internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _owner = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit OwnershipTransferred(address(0), _owner);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 305,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (string memory name, string memory symbol, uint8 decimals) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 306,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _name = name;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 307,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _symbol = symbol;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 308,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _decimals = decimals;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 309,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 455,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor () internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 456,
          "vulnerability_to_line": null,
          "vulnerability_code": "        // The counter starts at one to prevent changing it from zero to a non-zero\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 457,
          "vulnerability_to_line": null,
          "vulnerability_code": "        // value, which is a more expensive operation.\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 458,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _guardCounter = 1;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 459,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 535,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 536,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _rewardsDistribution,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 537,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _rewardsToken,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 538,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _stakingToken\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 539,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 540,
          "vulnerability_to_line": null,
          "vulnerability_code": "        rewardsToken = IERC20(_rewardsToken);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 541,
          "vulnerability_to_line": null,
          "vulnerability_code": "        stakingToken = IERC20(_stakingToken);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 542,
          "vulnerability_to_line": null,
          "vulnerability_code": "        rewardsDistribution = _rewardsDistribution;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 543,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 697,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 698,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _rewardsToken,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 699,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _govRewardAccount,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 700,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _devRewardAccount0,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 701,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _devRewardAccount1,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 702,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _stakingRewardsGenesis\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 703,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) Ownable() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 704,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_stakingRewardsGenesis >= block.timestamp, 'StakingRewardsFactory::constructor: genesis too soon');\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 705,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 706,
          "vulnerability_to_line": null,
          "vulnerability_code": "        rewardsToken = _rewardsToken;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 722,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < stakingTokens.length; i++) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 723,
          "vulnerability_to_line": null,
          "vulnerability_code": "            StakingRewardsInfo storage  info = stakingRewardsInfoByStakingToken[stakingTokens[i]];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 723,
          "vulnerability_to_line": null,
          "vulnerability_code": "            StakingRewardsInfo storage  info = stakingRewardsInfoByStakingToken[stakingTokens[i]];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 735,
          "vulnerability_to_line": null,
          "vulnerability_code": "            StakingRewardsInfo storage  info = stakingRewardsInfoByStakingToken[_stakingTokens[i]];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 740,
          "vulnerability_to_line": null,
          "vulnerability_code": "                info.stakingRewards = address(new StakingRewards(/*_rewardsDistribution=*/ address(this), rewardsToken, _stakingTokens[i]));\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 741,
          "vulnerability_to_line": null,
          "vulnerability_code": "                stakingTokens.push(_stakingTokens[i]);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 789,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < stakingTokens.length; i++) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 790,
          "vulnerability_to_line": null,
          "vulnerability_code": "            StakingRewardsInfo memory info = stakingRewardsInfoByStakingToken[stakingTokens[i]];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 790,
          "vulnerability_to_line": null,
          "vulnerability_code": "            StakingRewardsInfo memory info = stakingRewardsInfoByStakingToken[stakingTokens[i]];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 794,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if(stakingTokens[i] == rewardsToken){\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 794,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if(stakingTokens[i] == rewardsToken){\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 722,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < stakingTokens.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 729,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _rewardRates.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 789,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < stakingTokens.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isOwner(), \"Ownable: caller is not the owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 152,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b <= a, \"SafeMath: subtraction overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 222,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 240,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b > 0, \"SafeMath: division by zero\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 259,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b != 0, \"SafeMath: modulo by zero\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 395,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 396,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 397,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 426,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 430,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"SafeERC20: low-level call failed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 434,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 472,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 508,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == rewardsDistribution, \"Caller is not RewardsDistribution contract\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 580,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(amount > 0, \"Cannot stake 0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 592,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(amount > 0, \"Cannot stake 0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 600,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(amount > 0, \"Cannot withdraw 0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 637,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(rewardRate <= balance.div(rewardsDuration), \"Provided reward too high\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 704,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_stakingRewardsGenesis >= block.timestamp, 'StakingRewardsFactory::constructor: genesis too soon');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 719,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == timelock, \"!timelock\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 720,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_stakingTokens.length == _rewardRates.length, \"stakingTokens and rewardRates lengths mismatch\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 730,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_rewardRates[i] > 0, \"rewardRate zero\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 731,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_stakingTokens[i] != address(0), \"StakingRewardsFactory::deploy: stakingToken empty\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 736,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(info.rewardRate==0, \"StakingRewardsFactory::deploy: _stakingTokens is repeat\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 744,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(totalRate == 10000, 'StakingRewardsFactory::deploy: totalRate not equal to 10000');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 758,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(stakingTokens.length > 0, 'StakingRewardsFactory::notifyRewardAmounts: called before any deploys');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 759,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(block.timestamp >= stakingRewardsGenesis, 'StakingRewardsFactory::notifyRewardAmounts: reward not start');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 760,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(stakingRateTotal > 0, 'StakingRewardsFactory::notifyRewardAmounts: reward is over');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 815,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_stakingToken != address(0), 'StakingRewardsFactory::notifyRewardAmount: not deployed');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 818,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 819,
          "vulnerability_to_line": null,
          "vulnerability_code": "                IERC20(rewardsToken).transfer(_stakingToken, _rewardAmount),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 820,
          "vulnerability_to_line": null,
          "vulnerability_code": "                'StakingRewardsFactory::notifyRewardAmount: transfer failed'\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 821,
          "vulnerability_to_line": null,
          "vulnerability_code": "            );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 827,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_account != address(0), 'StakingRewardsFactory::_reserveRewards: not deployed');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 829,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 830,
          "vulnerability_to_line": null,
          "vulnerability_code": "            IERC20(rewardsToken).transfer(_account, _rawRewardsAmount),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 831,
          "vulnerability_to_line": null,
          "vulnerability_code": "            'StakingRewardsFactory::_reserveRewards: transfer failed'\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 832,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 836,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_mintAmount > 0, 'StakingRewardsFactory::_mint: mintAmount is zero');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 842,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == timelock, \"!timelock\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 806,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(_surplusRewardAmount > 0 && farmAddr != address(0)){\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 807,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _notifyRewardAmount(farmAddr,_surplusRewardAmount);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 808,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 722,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < stakingTokens.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 729,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _rewardRates.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 789,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < stakingTokens.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 152,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 222,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 395,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 396,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 397,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 434,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 508,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == rewardsDistribution, \"Caller is not RewardsDistribution contract\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 704,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_stakingRewardsGenesis >= block.timestamp, 'StakingRewardsFactory::constructor: genesis too soon');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 720,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_stakingTokens.length == _rewardRates.length, \"stakingTokens and rewardRates lengths mismatch\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 731,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_stakingTokens[i] != address(0), \"StakingRewardsFactory::deploy: stakingToken empty\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 736,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(info.rewardRate==0, \"StakingRewardsFactory::deploy: _stakingTokens is repeat\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 744,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(totalRate == 10000, 'StakingRewardsFactory::deploy: totalRate not equal to 10000');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 758,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(stakingTokens.length > 0, 'StakingRewardsFactory::notifyRewardAmounts: called before any deploys');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 759,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(block.timestamp >= stakingRewardsGenesis, 'StakingRewardsFactory::notifyRewardAmounts: reward not start');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 760,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(stakingRateTotal > 0, 'StakingRewardsFactory::notifyRewardAmounts: reward is over');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 815,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_stakingToken != address(0), 'StakingRewardsFactory::notifyRewardAmount: not deployed');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 818,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 819,
          "vulnerability_to_line": null,
          "vulnerability_code": "                IERC20(rewardsToken).transfer(_stakingToken, _rewardAmount),\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 820,
          "vulnerability_to_line": null,
          "vulnerability_code": "                'StakingRewardsFactory::notifyRewardAmount: transfer failed'\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 821,
          "vulnerability_to_line": null,
          "vulnerability_code": "            );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 827,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_account != address(0), 'StakingRewardsFactory::_reserveRewards: not deployed');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 829,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 830,
          "vulnerability_to_line": null,
          "vulnerability_code": "            IERC20(rewardsToken).transfer(_account, _rawRewardsAmount),\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 831,
          "vulnerability_to_line": null,
          "vulnerability_code": "            'StakingRewardsFactory::_reserveRewards: transfer failed'\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 832,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 836,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_mintAmount > 0, 'StakingRewardsFactory::_mint: mintAmount is zero');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_45"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 357,
          "vulnerability_to_line": 366,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        // This method relies in extcodesize, which returns 0 for contracts in\n\n        // construction, since the code is only stored at the end of the\n\n        // constructor execution.\n\n\n\n        uint256 size;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
          "message": "Address.isContract (StakingRewardsFactory.sol#357-366) is declared view but contains assembly code\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 616,
          "vulnerability_to_line": 619,
          "vulnerability_code": "    function exit() external {\n\n        withdraw(_balances[msg.sender]);\n\n        getReward();\n",
          "message": "Reentrancy in StakingRewards.exit (StakingRewardsFactory.sol#616-619):\n\tExternal calls:\n\t- withdraw(_balances[msg.sender]) (StakingRewardsFactory.sol#617)\n\t- getReward() (StakingRewardsFactory.sol#618)\n\tState variables written after the call(s):\n\t- _guardCounter (StakingRewardsFactory.sol#618)\n\t- lastUpdateTime (StakingRewardsFactory.sol#618)\n\t- rewardPerTokenStored (StakingRewardsFactory.sol#618)\n\t- rewards (StakingRewardsFactory.sol#618)\n\t- userRewardPerTokenPaid (StakingRewardsFactory.sol#618)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 623,
          "vulnerability_to_line": 642,
          "vulnerability_code": "    function notifyRewardAmount(uint256 reward) external onlyRewardsDistribution updateReward(address(0)) {\n\n        if (block.timestamp >= periodFinish) {\n\n            rewardRate = reward.div(rewardsDuration);\n\n        } else {\n\n            uint256 remaining = periodFinish.sub(block.timestamp);\n\n            uint256 leftover = remaining.mul(rewardRate);\n\n            rewardRate = reward.add(leftover).div(rewardsDuration);\n\n        }\n\n\n\n        // Ensure the provided reward amount is not more than the balance in the contract.\n\n        // This keeps the reward rate in the right range, preventing overflows due to\n\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\n\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\n\n        uint balance = rewardsToken.balanceOf(address(this));\n\n        require(rewardRate <= balance.div(rewardsDuration), \"Provided reward too high\");\n\n\n\n        lastUpdateTime = block.timestamp;\n\n        periodFinish = block.timestamp.add(rewardsDuration);\n\n        emit RewardAdded(reward);\n",
          "message": "Reentrancy in StakingRewards.notifyRewardAmount (StakingRewardsFactory.sol#623-642):\n\tExternal calls:\n\t- balance = rewardsToken.balanceOf(address(this)) (StakingRewardsFactory.sol#636)\n\tState variables written after the call(s):\n\t- periodFinish (StakingRewardsFactory.sol#640)\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 787,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address farmAddr;\n",
          "message": "farmAddr in StakingRewardsFactory._notifyPoolRewardAmounts (StakingRewardsFactory.sol#787) is a local variable never initialiazed\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 305,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (string memory name, string memory symbol, uint8 decimals) public {\n",
          "message": "ERC20Detailed.constructor.name (local variable @ StakingRewardsFactory.sol#305) shadows:\n\t- ERC20Detailed.name (function @ StakingRewardsFactory.sol#314-316)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 305,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (string memory name, string memory symbol, uint8 decimals) public {\n",
          "message": "ERC20Detailed.constructor.symbol (local variable @ StakingRewardsFactory.sol#305) shadows:\n\t- ERC20Detailed.symbol (function @ StakingRewardsFactory.sol#322-324)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 305,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (string memory name, string memory symbol, uint8 decimals) public {\n",
          "message": "ERC20Detailed.constructor.decimals (local variable @ StakingRewardsFactory.sol#305) shadows:\n\t- ERC20Detailed.decimals (function @ StakingRewardsFactory.sol#338-340)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 623,
          "vulnerability_to_line": 642,
          "vulnerability_code": "    function notifyRewardAmount(uint256 reward) external onlyRewardsDistribution updateReward(address(0)) {\n\n        if (block.timestamp >= periodFinish) {\n\n            rewardRate = reward.div(rewardsDuration);\n\n        } else {\n\n            uint256 remaining = periodFinish.sub(block.timestamp);\n\n            uint256 leftover = remaining.mul(rewardRate);\n\n            rewardRate = reward.add(leftover).div(rewardsDuration);\n\n        }\n\n\n\n        // Ensure the provided reward amount is not more than the balance in the contract.\n\n        // This keeps the reward rate in the right range, preventing overflows due to\n\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\n\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\n\n        uint balance = rewardsToken.balanceOf(address(this));\n\n        require(rewardRate <= balance.div(rewardsDuration), \"Provided reward too high\");\n\n\n\n        lastUpdateTime = block.timestamp;\n\n        periodFinish = block.timestamp.add(rewardsDuration);\n\n        emit RewardAdded(reward);\n",
          "message": "Reentrancy in StakingRewards.notifyRewardAmount (StakingRewardsFactory.sol#623-642):\n\tExternal calls:\n\t- balance = rewardsToken.balanceOf(address(this)) (StakingRewardsFactory.sol#636)\n\tState variables written after the call(s):\n\t- lastUpdateTime (StakingRewardsFactory.sol#639)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 623,
          "vulnerability_to_line": 642,
          "vulnerability_code": "    function notifyRewardAmount(uint256 reward) external onlyRewardsDistribution updateReward(address(0)) {\n\n        if (block.timestamp >= periodFinish) {\n\n            rewardRate = reward.div(rewardsDuration);\n\n        } else {\n\n            uint256 remaining = periodFinish.sub(block.timestamp);\n\n            uint256 leftover = remaining.mul(rewardRate);\n\n            rewardRate = reward.add(leftover).div(rewardsDuration);\n\n        }\n\n\n\n        // Ensure the provided reward amount is not more than the balance in the contract.\n\n        // This keeps the reward rate in the right range, preventing overflows due to\n\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\n\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\n\n        uint balance = rewardsToken.balanceOf(address(this));\n\n        require(rewardRate <= balance.div(rewardsDuration), \"Provided reward too high\");\n\n\n\n        lastUpdateTime = block.timestamp;\n\n        periodFinish = block.timestamp.add(rewardsDuration);\n\n        emit RewardAdded(reward);\n",
          "message": "StakingRewards.notifyRewardAmount (StakingRewardsFactory.sol#623-642) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp >= periodFinish (StakingRewardsFactory.sol#624-630)\n\t- require(bool,string)(rewardRate <= balance.div(rewardsDuration),Provided reward too high) (StakingRewardsFactory.sol#637)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 697,
          "vulnerability_to_line": 712,
          "vulnerability_code": "    constructor(\n\n        address _rewardsToken,\n\n        address _govRewardAccount,\n\n        address _devRewardAccount0,\n\n        address _devRewardAccount1,\n\n        uint _stakingRewardsGenesis\n\n    ) Ownable() public {\n\n        require(_stakingRewardsGenesis >= block.timestamp, 'StakingRewardsFactory::constructor: genesis too soon');\n\n\n\n        rewardsToken = _rewardsToken;\n\n        govRewardAccount = _govRewardAccount;\n\n        devRewardAccount0 = _devRewardAccount0;\n\n        devRewardAccount1 = _devRewardAccount1;\n\n        stakingRewardsGenesis = _stakingRewardsGenesis;\n\n        timelock = owner();\n",
          "message": "StakingRewardsFactory.constructor (StakingRewardsFactory.sol#697-712) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(_stakingRewardsGenesis >= block.timestamp,StakingRewardsFactory::constructor: genesis too soon) (StakingRewardsFactory.sol#704)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 757,
          "vulnerability_to_line": 782,
          "vulnerability_code": "    function notifyRewardAmounts() public {\n\n        require(stakingTokens.length > 0, 'StakingRewardsFactory::notifyRewardAmounts: called before any deploys');\n\n        require(block.timestamp >= stakingRewardsGenesis, 'StakingRewardsFactory::notifyRewardAmounts: reward not start');\n\n        require(stakingRateTotal > 0, 'StakingRewardsFactory::notifyRewardAmounts: reward is over');\n\n\n\n        if(stakingRateGenesis >= stakingRateTotal){\n\n            stakingRateGenesis = stakingRateTotal;\n\n        }\n\n        uint _totalRewardAmount = rewardTotalToken();// equal 270000 * 28620 / 10000 / 100\n\n\n\n        stakingRewardsGenesis = stakingRewardsGenesis + 7 days;\n\n        stakingRateTotal = stakingRateTotal.sub(stakingRateGenesis);\n\n        stakingRateGenesis = stakingRateGenesis.mul(9730).div(10000);//next reward rate equal stakingRateGenesis * (1-2.7%)\n\n\n\n        _mint(_totalRewardAmount);\n\n\n\n        uint _govFundAmount = _totalRewardAmount.div(27);// 1/27\n\n        uint _devFundAmount = _totalRewardAmount.mul(5).div(27);// 5/27\n\n        uint _devFundAmount0 = _devFundAmount.mul(80).div(100);//80%\n\n        _reserveRewards(govRewardAccount,_govFundAmount);\n\n        _reserveRewards(devRewardAccount0,_devFundAmount0);\n\n        _reserveRewards(devRewardAccount1,_devFundAmount.sub(_devFundAmount0));//20%\n\n\n\n        uint _poolRewardAmount = _totalRewardAmount.sub(_govFundAmount).sub(_devFundAmount); // 21/27\n\n        _notifyPoolRewardAmounts(_poolRewardAmount);\n",
          "message": "StakingRewardsFactory.notifyRewardAmounts (StakingRewardsFactory.sol#757-782) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(block.timestamp >= stakingRewardsGenesis,StakingRewardsFactory::notifyRewardAmounts: reward not start) (StakingRewardsFactory.sol#759)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 357,
          "vulnerability_to_line": 366,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        // This method relies in extcodesize, which returns 0 for contracts in\n\n        // construction, since the code is only stored at the end of the\n\n        // constructor execution.\n\n\n\n        uint256 size;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
          "message": "Address.isContract uses assembly (StakingRewardsFactory.sol#357-366)\n\t- StakingRewardsFactory.sol#364\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 523,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public rewardsDuration = 7 days;\n",
          "message": "StakingRewards.rewardsDuration should be constant (StakingRewardsFactory.sol#523)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": 138,
          "vulnerability_code": "    function renounceOwnership() public onlyOwner {\n\n        emit OwnershipTransferred(_owner, address(0));\n\n        _owner = address(0);\n",
          "message": "Ownable.renounceOwnership (StakingRewardsFactory.sol#135-138) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 144,
          "vulnerability_to_line": 146,
          "vulnerability_code": "    function transferOwnership(address newOwner) public onlyOwner {\n\n        _transferOwnership(newOwner);\n",
          "message": "Ownable.transferOwnership (StakingRewardsFactory.sol#144-146) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 314,
          "vulnerability_to_line": 316,
          "vulnerability_code": "    function name() public view returns (string memory) {\n\n        return _name;\n",
          "message": "ERC20Detailed.name (StakingRewardsFactory.sol#314-316) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 322,
          "vulnerability_to_line": 324,
          "vulnerability_code": "    function symbol() public view returns (string memory) {\n\n        return _symbol;\n",
          "message": "ERC20Detailed.symbol (StakingRewardsFactory.sol#322-324) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 338,
          "vulnerability_to_line": 340,
          "vulnerability_code": "    function decimals() public view returns (uint8) {\n\n        return _decimals;\n",
          "message": "ERC20Detailed.decimals (StakingRewardsFactory.sol#338-340) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 718,
          "vulnerability_to_line": 745,
          "vulnerability_code": "    function deploy(address[] memory _stakingTokens, uint16[] memory _rewardRates) public {\n\n        require(msg.sender == timelock, \"!timelock\");\n\n        require(_stakingTokens.length == _rewardRates.length, \"stakingTokens and rewardRates lengths mismatch\");\n\n\n\n        for (uint i = 0; i < stakingTokens.length; i++) {\n\n            StakingRewardsInfo storage  info = stakingRewardsInfoByStakingToken[stakingTokens[i]];\n\n            info.rewardRate = 0;\n\n        }\n\n        uint16  totalRate = 0;\n\n\n\n\n\n        for (uint i = 0; i < _rewardRates.length; i++) {\n\n            require(_rewardRates[i] > 0, \"rewardRate zero\");\n\n            require(_stakingTokens[i] != address(0), \"StakingRewardsFactory::deploy: stakingToken empty\");\n\n\n\n            totalRate = totalRate + _rewardRates[i];\n\n\n\n            StakingRewardsInfo storage  info = stakingRewardsInfoByStakingToken[_stakingTokens[i]];\n\n            require(info.rewardRate==0, \"StakingRewardsFactory::deploy: _stakingTokens is repeat\");\n\n\n\n            info.rewardRate = _rewardRates[i];\n\n            if(info.stakingRewards == address(0)){\n\n                info.stakingRewards = address(new StakingRewards(/*_rewardsDistribution=*/ address(this), rewardsToken, _stakingTokens[i]));\n\n                stakingTokens.push(_stakingTokens[i]);\n\n            }\n\n        }\n\n        require(totalRate == 10000, 'StakingRewardsFactory::deploy: totalRate not equal to 10000');\n",
          "message": "StakingRewardsFactory.deploy (StakingRewardsFactory.sol#718-745) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 757,
          "vulnerability_to_line": 782,
          "vulnerability_code": "    function notifyRewardAmounts() public {\n\n        require(stakingTokens.length > 0, 'StakingRewardsFactory::notifyRewardAmounts: called before any deploys');\n\n        require(block.timestamp >= stakingRewardsGenesis, 'StakingRewardsFactory::notifyRewardAmounts: reward not start');\n\n        require(stakingRateTotal > 0, 'StakingRewardsFactory::notifyRewardAmounts: reward is over');\n\n\n\n        if(stakingRateGenesis >= stakingRateTotal){\n\n            stakingRateGenesis = stakingRateTotal;\n\n        }\n\n        uint _totalRewardAmount = rewardTotalToken();// equal 270000 * 28620 / 10000 / 100\n\n\n\n        stakingRewardsGenesis = stakingRewardsGenesis + 7 days;\n\n        stakingRateTotal = stakingRateTotal.sub(stakingRateGenesis);\n\n        stakingRateGenesis = stakingRateGenesis.mul(9730).div(10000);//next reward rate equal stakingRateGenesis * (1-2.7%)\n\n\n\n        _mint(_totalRewardAmount);\n\n\n\n        uint _govFundAmount = _totalRewardAmount.div(27);// 1/27\n\n        uint _devFundAmount = _totalRewardAmount.mul(5).div(27);// 5/27\n\n        uint _devFundAmount0 = _devFundAmount.mul(80).div(100);//80%\n\n        _reserveRewards(govRewardAccount,_govFundAmount);\n\n        _reserveRewards(devRewardAccount0,_devFundAmount0);\n\n        _reserveRewards(devRewardAccount1,_devFundAmount.sub(_devFundAmount0));//20%\n\n\n\n        uint _poolRewardAmount = _totalRewardAmount.sub(_govFundAmount).sub(_devFundAmount); // 21/27\n\n        _notifyPoolRewardAmounts(_poolRewardAmount);\n",
          "message": "StakingRewardsFactory.notifyRewardAmounts (StakingRewardsFactory.sol#757-782) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 841,
          "vulnerability_to_line": 844,
          "vulnerability_code": "    function setTimeLock(address _timelock) public {\n\n        require(msg.sender == timelock, \"!timelock\");\n\n        timelock = _timelock;\n",
          "message": "StakingRewardsFactory.setTimeLock (StakingRewardsFactory.sol#841-844) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": "Detected issues with version pragma in StakingRewardsFactory.sol:\n\t- pragma solidity^0.5.16 (StakingRewardsFactory.sol#7): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 417,
          "vulnerability_to_line": 436,
          "vulnerability_code": "    function callOptionalReturn(IERC20 token, bytes memory data) private {\n\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n\n        // we're implementing it ourselves.\n\n\n\n        // A Solidity high level call has three parts:\n\n        //  1. The target address is checked to verify it contains contract code\n\n        //  2. The call itself is made, and success asserted\n\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n\n        // solhint-disable-next-line max-line-length\n\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n\n\n        // solhint-disable-next-line avoid-low-level-calls\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n\n        require(success, \"SafeERC20: low-level call failed\");\n\n\n\n        if (returndata.length > 0) { // Return data is optional\n\n            // solhint-disable-next-line max-line-length\n\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n\n        }\n",
          "message": "Low level call in SafeERC20.callOptionalReturn (StakingRewardsFactory.sol#417-436):\n\t-(success,returndata) = address(token).call(data) StakingRewardsFactory.sol#429\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": 155,
          "vulnerability_code": "    function _transferOwnership(address newOwner) internal {\n\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n\n        emit OwnershipTransferred(_owner, newOwner);\n\n        _owner = newOwner;\n",
          "message": "Function 'Ownable._transferOwnership' (StakingRewardsFactory.sol#151-155) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 536,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _rewardsDistribution,\n",
          "message": "Parameter '_rewardsDistribution' of StakingRewards. (StakingRewardsFactory.sol#536) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 537,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _rewardsToken,\n",
          "message": "Parameter '_rewardsToken' of StakingRewards. (StakingRewardsFactory.sol#537) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 538,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _stakingToken\n",
          "message": "Parameter '_stakingToken' of StakingRewards. (StakingRewardsFactory.sol#538) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 698,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _rewardsToken,\n",
          "message": "Parameter '_rewardsToken' of StakingRewardsFactory. (StakingRewardsFactory.sol#698) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 699,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _govRewardAccount,\n",
          "message": "Parameter '_govRewardAccount' of StakingRewardsFactory. (StakingRewardsFactory.sol#699) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 700,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _devRewardAccount0,\n",
          "message": "Parameter '_devRewardAccount0' of StakingRewardsFactory. (StakingRewardsFactory.sol#700) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 701,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _devRewardAccount1,\n",
          "message": "Parameter '_devRewardAccount1' of StakingRewardsFactory. (StakingRewardsFactory.sol#701) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 702,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _stakingRewardsGenesis\n",
          "message": "Parameter '_stakingRewardsGenesis' of StakingRewardsFactory. (StakingRewardsFactory.sol#702) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 718,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deploy(address[] memory _stakingTokens, uint16[] memory _rewardRates) public {\n",
          "message": "Parameter '_stakingTokens' of StakingRewardsFactory.deploy (StakingRewardsFactory.sol#718) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 718,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deploy(address[] memory _stakingTokens, uint16[] memory _rewardRates) public {\n",
          "message": "Parameter '_rewardRates' of StakingRewardsFactory.deploy (StakingRewardsFactory.sol#718) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 784,
          "vulnerability_to_line": 809,
          "vulnerability_code": "    function _notifyPoolRewardAmounts(uint _poolRewardAmount) private {\n\n        uint _surplusRewardAmount = _poolRewardAmount;\n\n        uint _rewardAmount = 0;\n\n        address farmAddr;\n\n\n\n        for (uint i = 0; i < stakingTokens.length; i++) {\n\n            StakingRewardsInfo memory info = stakingRewardsInfoByStakingToken[stakingTokens[i]];\n\n            if(info.rewardRate <= 0){\n\n                continue;\n\n            }\n\n            if(stakingTokens[i] == rewardsToken){\n\n                farmAddr = info.stakingRewards;\n\n                continue;\n\n            }\n\n            _rewardAmount = _poolRewardAmount.mul(info.rewardRate).div(10000);\n\n            if(_rewardAmount >= _surplusRewardAmount){\n\n                _rewardAmount = _surplusRewardAmount;\n\n            }\n\n            _surplusRewardAmount = _surplusRewardAmount.sub(_rewardAmount);\n\n            _notifyRewardAmount(info.stakingRewards,_rewardAmount);\n\n        }\n\n        _surplusRewardAmount = IERC20(rewardsToken).balanceOf(address(this));\n\n        if(_surplusRewardAmount > 0 && farmAddr != address(0)){\n\n            _notifyRewardAmount(farmAddr,_surplusRewardAmount);\n\n        }\n",
          "message": "Function 'StakingRewardsFactory._notifyPoolRewardAmounts' (StakingRewardsFactory.sol#784-809) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 784,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _notifyPoolRewardAmounts(uint _poolRewardAmount) private {\n",
          "message": "Parameter '_poolRewardAmount' of StakingRewardsFactory._notifyPoolRewardAmounts (StakingRewardsFactory.sol#784) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 814,
          "vulnerability_to_line": 824,
          "vulnerability_code": "    function _notifyRewardAmount(address _stakingToken,uint _rewardAmount) private {\n\n        require(_stakingToken != address(0), 'StakingRewardsFactory::notifyRewardAmount: not deployed');\n\n\n\n        if (_rewardAmount > 0) {\n\n            require(\n\n                IERC20(rewardsToken).transfer(_stakingToken, _rewardAmount),\n\n                'StakingRewardsFactory::notifyRewardAmount: transfer failed'\n\n            );\n\n            StakingRewards(_stakingToken).notifyRewardAmount(_rewardAmount);\n\n        }\n",
          "message": "Function 'StakingRewardsFactory._notifyRewardAmount' (StakingRewardsFactory.sol#814-824) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 814,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _notifyRewardAmount(address _stakingToken,uint _rewardAmount) private {\n",
          "message": "Parameter '_stakingToken' of StakingRewardsFactory._notifyRewardAmount (StakingRewardsFactory.sol#814) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 814,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _notifyRewardAmount(address _stakingToken,uint _rewardAmount) private {\n",
          "message": "Parameter '_rewardAmount' of StakingRewardsFactory._notifyRewardAmount (StakingRewardsFactory.sol#814) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 826,
          "vulnerability_to_line": 833,
          "vulnerability_code": "    function _reserveRewards(address _account,uint _rawRewardsAmount) private {\n\n        require(_account != address(0), 'StakingRewardsFactory::_reserveRewards: not deployed');\n\n\n\n        require(\n\n            IERC20(rewardsToken).transfer(_account, _rawRewardsAmount),\n\n            'StakingRewardsFactory::_reserveRewards: transfer failed'\n\n        );\n",
          "message": "Function 'StakingRewardsFactory._reserveRewards' (StakingRewardsFactory.sol#826-833) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 826,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _reserveRewards(address _account,uint _rawRewardsAmount) private {\n",
          "message": "Parameter '_account' of StakingRewardsFactory._reserveRewards (StakingRewardsFactory.sol#826) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 826,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _reserveRewards(address _account,uint _rawRewardsAmount) private {\n",
          "message": "Parameter '_rawRewardsAmount' of StakingRewardsFactory._reserveRewards (StakingRewardsFactory.sol#826) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 835,
          "vulnerability_to_line": 839,
          "vulnerability_code": "    function _mint(uint _mintAmount) private {\n\n        require(_mintAmount > 0, 'StakingRewardsFactory::_mint: mintAmount is zero');\n\n\n\n        IMinterV2ERC20(rewardsToken).mint(address(this), _mintAmount);\n",
          "message": "Function 'StakingRewardsFactory._mint' (StakingRewardsFactory.sol#835-839) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 835,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _mint(uint _mintAmount) private {\n",
          "message": "Parameter '_mintAmount' of StakingRewardsFactory._mint (StakingRewardsFactory.sol#835) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 841,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTimeLock(address _timelock) public {\n",
          "message": "Parameter '_timelock' of StakingRewardsFactory.setTimeLock (StakingRewardsFactory.sol#841) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 137,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _owner = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 623,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function notifyRewardAmount(uint256 reward) external onlyRewardsDistribution updateReward(address(0)) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 722,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < stakingTokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 729,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _rewardRates.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 789,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < stakingTokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 722,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < stakingTokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 729,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _rewardRates.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 789,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < stakingTokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 841,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTimeLock(address _timelock) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address private _owner;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 296,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private _name;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 297,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private _symbol;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 298,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 private _decimals;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 453,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _guardCounter;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 530,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _totalSupply;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 531,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint256) private _balances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 379,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 514,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 674,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 357,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 383,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 387,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 398,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 403,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 408,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 429,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, bytes memory returndata) = address(token).call(data);\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}