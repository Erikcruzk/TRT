{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {}\n",
          "message": "Consider making costructor payable to save gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_6"
      ],
      "vulnerability_findings": [
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.7;\n",
          "message": "Detected issues with version pragma in BT-ETHTheCitadel.sol:\n\t- pragma solidity^0.6.7 (BT-ETHTheCitadel.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address)\n",
          "message": "Parameter '' of StakingRewards.balanceOf (BT-ETHTheCitadel.sol#36) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": 82,
          "vulnerability_code": "contract BT_ETHVoteProxy {\n\n    IERC20 public constant votes = IERC20(\n\n        0x1aDAC7dE5C5d9894a4F6A80868AdE96F8a2ed0eb\n\n    );\n\n\n\n    StakingRewards public constant stakingRewards = StakingRewards(\n\n        0xC74d15D2e61414C0975B9DC31fA8921c9909D08D\n\n    );\n\n\n\n    function decimals() external pure returns (uint8) {\n\n        return uint8(9);\n\n    }\n\n\n\n    function name() external pure returns (string memory) {\n\n        return \"BT In The Citadel\";\n\n    }\n\n\n\n    function symbol() external pure returns (string memory) {\n\n        return \"BT C\";\n\n    }\n\n\n\n    function totalSupply() external view returns (uint256) {\n\n        return sqrt(votes.totalSupply());\n\n    }\n\n\n\n    function balanceOf(address _voter) external view returns (uint256) {\n\n        uint256 _votes = stakingRewards.balanceOf(_voter);\n\n        return sqrt(_votes);\n\n    }\n\n\n\n    function sqrt(uint256 x) public pure returns (uint256 y) {\n\n        uint256 z = (x + 1) / 2;\n\n        y = x;\n\n        while (z < y) {\n\n            y = z;\n\n            z = (x / z + z) / 2;\n\n        }\n\n    }\n\n\n\n    constructor() public {}\n",
          "message": "Contract 'BT_ETHVoteProxy' (BT-ETHTheCitadel.sol#42-82) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _voter) external view returns (uint256) {\n",
          "message": "Parameter '_voter' of BT_ETHVoteProxy.balanceOf (BT-ETHTheCitadel.sol#67) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": 45,
          "vulnerability_code": "    IERC20 public constant votes = IERC20(\n\n        0x1aDAC7dE5C5d9894a4F6A80868AdE96F8a2ed0eb\n",
          "message": "Constant 'BT_ETHVoteProxy.votes' (BT-ETHTheCitadel.sol#43-45) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": 49,
          "vulnerability_code": "    StakingRewards public constant stakingRewards = StakingRewards(\n\n        0xC74d15D2e61414C0975B9DC31fA8921c9909D08D\n",
          "message": "Constant 'BT_ETHVoteProxy.stakingRewards' (BT-ETHTheCitadel.sol#47-49) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "        0x1aDAC7dE5C5d9894a4F6A80868AdE96F8a2ed0eb\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "        0xC74d15D2e61414C0975B9DC31fA8921c9909D08D\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": null,
          "vulnerability_code": "        while (z < y) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.7;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function sqrt(uint256 x) public pure returns (uint256 y) {\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}