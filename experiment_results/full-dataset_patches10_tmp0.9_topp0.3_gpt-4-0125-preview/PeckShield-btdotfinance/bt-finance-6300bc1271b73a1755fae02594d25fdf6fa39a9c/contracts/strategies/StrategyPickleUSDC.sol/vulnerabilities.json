{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 218,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public pledgePickles = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 225,
          "vulnerability_to_line": null,
          "vulnerability_code": "        governance = tx.origin;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 226,
          "vulnerability_to_line": null,
          "vulnerability_code": "        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 227,
          "vulnerability_to_line": null,
          "vulnerability_code": "        doApprove(); \n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tswap2BTRouting = [pickletoken,weth,bt];\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 229,
          "vulnerability_to_line": null,
          "vulnerability_code": "        swap2TokenRouting = [pickletoken,weth,want]; \n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 230,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"SafeERC20: low-level call failed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 273,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_vault != address(0), \"!vault\");                     \n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 279,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == controller, \"!controller\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 293,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_vault != address(0), \"!vault\");                      \n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 415,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 420,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 425,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "curve-readonly-reentrancy",
          "vulnerability_from_line": 299,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tuint256 _crvpla = _amount.mul(1e18).mul(1e12).div((ICurveFi(curvefi).get_virtual_price()));\n",
          "message": "ICurveFi(curvefi).get_virtual_price() call on a Curve pool is not protected from the read- only reentrancy."
        },
        {
          "name": "curve-readonly-reentrancy",
          "vulnerability_from_line": 366,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t    uint256 price = ICurveFi(curvefi).get_virtual_price().div(1e12);\n",
          "message": "ICurveFi(curvefi).get_virtual_price() call on a Curve pool is not protected from the read- only reentrancy."
        },
        {
          "name": "no-slippage-check",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t    UniswapRouter(unirouter).swapExactTokensForTokens(_2token, 0, swap2TokenRouting, address(this), now.add(1800));\n",
          "message": "No slippage check in a Uniswap v2/v3 trade"
        },
        {
          "name": "no-slippage-check",
          "vulnerability_from_line": 408,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t    UniswapRouter(unirouter).swapExactTokensForTokens(_2bt, 0, swap2BTRouting, Controller(controller).rewards(), now.add(1800));\n",
          "message": "No slippage check in a Uniswap v2/v3 trade"
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_63"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": 76,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
          "message": "Address.isContract (StrategyPickleUSDC.sol#70-76) is declared view but contains assembly code\n"
        },
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 374,
          "vulnerability_to_line": 383,
          "vulnerability_code": "    function balanceOfPickle() public view returns (uint256) \n\n\t{\n\n\t\tuint256 pickletokenNum = pERC20(PICKLE).pendingPickle(pickleindex,address(this)).add(IERC20(pickletoken).balanceOf(address(this))).mul(80).div(100);\n\n\t\tif (pickletokenNum==0)\n\n\t\t{\n\n\t\t    return 0;\n\n\t\t}\n\n\t\tuint[] memory amounts = UniswapRouter(unirouter).getAmountsOut(pickletokenNum,swap2TokenRouting);\n\n\t\treturn amounts[amounts.length-1];\n",
          "message": "StrategyUSDCPickele.balanceOfPickle (StrategyPickleUSDC.sol#374-383) uses a dangerous strict equality:\n\t- pickletokenNum == 0\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 297,
          "vulnerability_to_line": 322,
          "vulnerability_code": "    function _withdrawSome(uint256 _amount) internal returns(uint256){\n\n        uint256 crvBefore = IERC20(crvPla).balanceOf(address(this));\n\n\t\tuint256 _crvpla = _amount.mul(1e18).mul(1e12).div((ICurveFi(curvefi).get_virtual_price()));\n\n\t\tif (crvBefore < _crvpla)\n\n\t\t{\n\n\t\t    _crvpla = _crvpla.sub(crvBefore);\n\n            uint256 _p3crv = _crvpla.mul(1e18).div(yERC20(pickleJar).getRatio());\n\n            uint _before = IERC20(pickleJar).balanceOf(address(this));\n\n            if (_before < _p3crv) {\n\n                _p3crv = _p3crv.sub(_before);\n\n                //require(_p3crv <= pledgePickles, \"Invalid amount!\");\n\n\t\t\t\tif (_p3crv > pledgePickles)\n\n\t\t\t\t{\n\n\t\t\t\t\t_p3crv = pledgePickles;\n\n\t\t\t\t}\t\t\t\t\n\n                pERC20(PICKLE).withdraw(pickleindex,_p3crv);\n\n                pledgePickles = pledgePickles.sub(_p3crv);\n\n            }\n\n            uint p3CRV = IERC20(pickleJar).balanceOf(address(this));\n\n\t    \tyERC20(pickleJar).withdraw(p3CRV);\n\n\t\t}\n\n\n\n        uint crv = IERC20(crvPla).balanceOf(address(this));\n\n\t\t\n\n        return withdrawUnderlying(crv);\n",
          "message": "Reentrancy in StrategyUSDCPickele._withdrawSome (StrategyPickleUSDC.sol#297-322):\n\tExternal calls:\n\t- crvBefore = IERC20(crvPla).balanceOf(address(this)) (StrategyPickleUSDC.sol#298)\n\t- _crvpla = _amount.mul(1e18).mul(1e12).div((ICurveFi(curvefi).get_virtual_price())) (StrategyPickleUSDC.sol#299)\n\t- _p3crv = _crvpla.mul(1e18).div(yERC20(pickleJar).getRatio()) (StrategyPickleUSDC.sol#303)\n\t- _before = IERC20(pickleJar).balanceOf(address(this)) (StrategyPickleUSDC.sol#304)\n\t- pERC20(PICKLE).withdraw(pickleindex,_p3crv) (StrategyPickleUSDC.sol#312)\n\tState variables written after the call(s):\n\t- pledgePickles (StrategyPickleUSDC.sol#313)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 394,
          "vulnerability_to_line": 399,
          "vulnerability_code": "    function harvest() public \n\n    {\n\n        pERC20(PICKLE).withdraw(pickleindex,pledgePickles);\n\n        pledgePickles = 0;\n\n        redelivery();    \n",
          "message": "Reentrancy in StrategyUSDCPickele.harvest (StrategyPickleUSDC.sol#394-399):\n\tExternal calls:\n\t- pERC20(PICKLE).withdraw(pickleindex,pledgePickles) (StrategyPickleUSDC.sol#396)\n\tState variables written after the call(s):\n\t- pledgePickles (StrategyPickleUSDC.sol#397)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 394,
          "vulnerability_to_line": 399,
          "vulnerability_code": "    function harvest() public \n\n    {\n\n        pERC20(PICKLE).withdraw(pickleindex,pledgePickles);\n\n        pledgePickles = 0;\n\n        redelivery();    \n",
          "message": "Reentrancy in StrategyUSDCPickele.harvest (StrategyPickleUSDC.sol#394-399):\n\tExternal calls:\n\t- pERC20(PICKLE).withdraw(pickleindex,pledgePickles) (StrategyPickleUSDC.sol#396)\n\t- redelivery() (StrategyPickleUSDC.sol#398)\n\tState variables written after the call(s):\n\t- pledgePickles (StrategyPickleUSDC.sol#398)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 288,
          "vulnerability_to_line": 295,
          "vulnerability_code": "\tfunction withdrawAll() external returns (uint balance){\n\n\t\tuint amount = balanceOf();\n\n\t\tbalance = _withdraw(amount);\n\n        \n\n\t\taddress _vault = Controller(controller).vaults(address(want));\n\n        require(_vault != address(0), \"!vault\");                      \n\n        IERC20(want).safeTransfer(_vault, balance);\n",
          "message": "Reentrancy in StrategyUSDCPickele.withdrawAll (StrategyPickleUSDC.sol#288-295):\n\tExternal calls:\n\t- amount = balanceOf() (StrategyPickleUSDC.sol#289)\n\t- balance = _withdraw(amount) (StrategyPickleUSDC.sol#290)\n\tState variables written after the call(s):\n\t- pledgePickles (StrategyPickleUSDC.sol#290)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": 235,
          "vulnerability_code": "\tfunction doApprove () public{\n\n        IERC20(pickletoken).approve(unirouter, 0);\n\n        IERC20(pickletoken).approve(unirouter, uint(-1));\n",
          "message": "StrategyUSDCPickele.doApprove (StrategyPickleUSDC.sol#232-235) does not use the value returned by external calls:\n\t-IERC20(pickletoken).approve(unirouter,0) (StrategyPickleUSDC.sol#233)\n\t-IERC20(pickletoken).approve(unirouter,uint256(- 1)) (StrategyPickleUSDC.sol#234)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 401,
          "vulnerability_to_line": 411,
          "vulnerability_code": "    function redelivery() internal {\n\n        uint256 reward = IERC20(pickletoken).balanceOf(address(this));\n\n        if (reward > redeliverynum)\n\n        {\n\n            uint256 _2token = reward.mul(80).div(100); //80%\n\n\t\t    uint256 _2bt = reward.mul(20).div(100);  //20%\n\n\t\t    UniswapRouter(unirouter).swapExactTokensForTokens(_2token, 0, swap2TokenRouting, address(this), now.add(1800));\n\n\t\t    UniswapRouter(unirouter).swapExactTokensForTokens(_2bt, 0, swap2BTRouting, Controller(controller).rewards(), now.add(1800));\n\n\t\t}\n\n        deposit();\n",
          "message": "StrategyUSDCPickele.redelivery (StrategyPickleUSDC.sol#401-411) does not use the value returned by external calls:\n\t-UniswapRouter(unirouter).swapExactTokensForTokens(_2token,0,swap2TokenRouting,address(this),now.add(1800)) (StrategyPickleUSDC.sol#407)\n\t-UniswapRouter(unirouter).swapExactTokensForTokens(_2bt,0,swap2BTRouting,Controller(controller).rewards(),now.add(1800)) (StrategyPickleUSDC.sol#408)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": 230,
          "vulnerability_code": "    constructor() public {\n\n        governance = tx.origin;\n\n        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\n\n        doApprove(); \n\n\t\tswap2BTRouting = [pickletoken,weth,bt];\n\n        swap2TokenRouting = [pickletoken,weth,want]; \n",
          "message": "Reentrancy in StrategyUSDCPickele.constructor (StrategyPickleUSDC.sol#224-230):\n\tExternal calls:\n\t- doApprove() (StrategyPickleUSDC.sol#227)\n\tState variables written after the call(s):\n\t- swap2BTRouting (StrategyPickleUSDC.sol#228)\n\t- swap2TokenRouting (StrategyPickleUSDC.sol#229)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 237,
          "vulnerability_to_line": 261,
          "vulnerability_code": "    function deposit() public { \n\n\t\tuint _usdc = IERC20(want).balanceOf(address(this));\t\t\t\n\n        if (_usdc > 0) {\n\n            IERC20(want).safeApprove(curvefi, 0);\t\t\t\t\n\n            IERC20(want).safeApprove(curvefi, _usdc);\t\t\t\t\n\n            ICurveFi(curvefi).add_liquidity([0,_usdc,0],0);\t\t\n\n        }\n\n\t\t\n\n\t\tuint256 _crvpla = IERC20(crvPla).balanceOf(address(this));\n\n\t\tif (_crvpla > 0)\n\n\t\t{\n\n\t\t    IERC20(crvPla).safeApprove(pickleJar, 0);\n\n            IERC20(crvPla).safeApprove(pickleJar, _crvpla);\n\n\t\t    yERC20(pickleJar).deposit(_crvpla);\n\n\t\t}\n\n\t\t\n\n\t\tuint _p3crv= IERC20(pickleJar).balanceOf(address(this));\n\n\t\tif (_p3crv > 0)\n\n\t\t{\n\n\t        IERC20(pickleJar).safeApprove(PICKLE, 0);\n\n            IERC20(pickleJar).safeApprove(PICKLE, _p3crv);\n\n\t    \tpERC20(PICKLE).deposit(pickleindex,_p3crv);\n\n    \t\tpledgePickles = pledgePickles.add(_p3crv);\n\n\t\t}\n",
          "message": "Reentrancy in StrategyUSDCPickele.deposit (StrategyPickleUSDC.sol#237-261):\n\tExternal calls:\n\t- _usdc = IERC20(want).balanceOf(address(this)) (StrategyPickleUSDC.sol#238)\n\t- ICurveFi(curvefi).add_liquidity((0,_usdc,0),0) (StrategyPickleUSDC.sol#242)\n\t- _crvpla = IERC20(crvPla).balanceOf(address(this)) (StrategyPickleUSDC.sol#245)\n\t- yERC20(pickleJar).deposit(_crvpla) (StrategyPickleUSDC.sol#250)\n\t- _p3crv = IERC20(pickleJar).balanceOf(address(this)) (StrategyPickleUSDC.sol#253)\n\t- pERC20(PICKLE).deposit(pickleindex,_p3crv) (StrategyPickleUSDC.sol#258)\n\tState variables written after the call(s):\n\t- pledgePickles (StrategyPickleUSDC.sol#259)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": 76,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
          "message": "Address.isContract uses assembly (StrategyPickleUSDC.sol#70-76)\n\t- StrategyPickleUSDC.sol#74\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 197,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 pickleindex = 14;\n",
          "message": "StrategyUSDCPickele.pickleindex should be constant (StrategyPickleUSDC.sol#197)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 374,
          "vulnerability_to_line": 383,
          "vulnerability_code": "    function balanceOfPickle() public view returns (uint256) \n\n\t{\n\n\t\tuint256 pickletokenNum = pERC20(PICKLE).pendingPickle(pickleindex,address(this)).add(IERC20(pickletoken).balanceOf(address(this))).mul(80).div(100);\n\n\t\tif (pickletokenNum==0)\n\n\t\t{\n\n\t\t    return 0;\n\n\t\t}\n\n\t\tuint[] memory amounts = UniswapRouter(unirouter).getAmountsOut(pickletokenNum,swap2TokenRouting);\n\n\t\treturn amounts[amounts.length-1];\n",
          "message": "StrategyUSDCPickele.balanceOfPickle (StrategyPickleUSDC.sol#374-383) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 385,
          "vulnerability_to_line": 387,
          "vulnerability_code": "    function getPending() public view returns (uint256) {\n\n        return pERC20(PICKLE).pendingPickle(pickleindex,address(this));\n",
          "message": "StrategyUSDCPickele.getPending (StrategyPickleUSDC.sol#385-387) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 389,
          "vulnerability_to_line": 392,
          "vulnerability_code": "\tfunction getPickle() public view returns(uint256)\n\n\t{\n\n\t\treturn IERC20(pickletoken).balanceOf(address(this));\n",
          "message": "StrategyUSDCPickele.getPickle (StrategyPickleUSDC.sol#389-392) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 394,
          "vulnerability_to_line": 399,
          "vulnerability_code": "    function harvest() public \n\n    {\n\n        pERC20(PICKLE).withdraw(pickleindex,pledgePickles);\n\n        pledgePickles = 0;\n\n        redelivery();    \n",
          "message": "StrategyUSDCPickele.harvest (StrategyPickleUSDC.sol#394-399) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 413,
          "vulnerability_to_line": 417,
          "vulnerability_code": "    function setredeliverynum(uint256 value) public\n\n    {\n\n        require(msg.sender == governance, \"!governance\");\n\n        redeliverynum = value;\n",
          "message": "StrategyUSDCPickele.setredeliverynum (StrategyPickleUSDC.sol#413-417) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 419,
          "vulnerability_to_line": 422,
          "vulnerability_code": "    function setGovernance(address _governance) public {\n\n        require(msg.sender == governance, \"!governance\");\n\n        governance = _governance;\n",
          "message": "StrategyUSDCPickele.setGovernance (StrategyPickleUSDC.sol#419-422) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.15;\n",
          "message": "Detected issues with version pragma in StrategyPickleUSDC.sol:\n\t- pragma solidity^0.5.15 (StrategyPickleUSDC.sol#9): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": 86,
          "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n\n\n        // solhint-disable-next-line avoid-call-value\n\n        (bool success, ) = recipient.call.value(amount)(\"\");\n\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
          "message": "Low level call in Address.sendValue (StrategyPickleUSDC.sol#80-86):\n\t-(success) = recipient.call.value(amount)() StrategyPickleUSDC.sol#84\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": 118,
          "vulnerability_code": "    function callOptionalReturn(IERC20 token, bytes memory data) private {\n\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n\n\n        // solhint-disable-next-line avoid-low-level-calls\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n\n        require(success, \"SafeERC20: low-level call failed\");\n\n\n\n        if (returndata.length > 0) { // Return data is optional\n\n            // solhint-disable-next-line max-line-length\n\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n\n        }\n",
          "message": "Low level call in SafeERC20.callOptionalReturn (StrategyPickleUSDC.sol#107-118):\n\t-(success,returndata) = address(token).call(data) StrategyPickleUSDC.sol#111\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 122,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function vaults(address) external view returns (address);\n",
          "message": "Parameter '' of Controller.vaults (StrategyPickleUSDC.sol#122) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deposit(uint256) external;\n",
          "message": "Parameter '' of CurveDeposit.deposit (StrategyPickleUSDC.sol#141) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(uint256) external;\n",
          "message": "Parameter '' of CurveDeposit.withdraw (StrategyPickleUSDC.sol#142) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address) external view returns (uint256);\n",
          "message": "Parameter '' of CurveDeposit.balanceOf (StrategyPickleUSDC.sol#143) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 144,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function claimable_tokens(address) external view returns (uint256);\n",
          "message": "Function 'CurveDeposit.claimable_tokens' (StrategyPickleUSDC.sol#144) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 144,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function claimable_tokens(address) external view returns (uint256);\n",
          "message": "Parameter '' of CurveDeposit.claimable_tokens (StrategyPickleUSDC.sol#144) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 147,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mint(address) external;\n",
          "message": "Parameter '' of CurveMinter.mint (StrategyPickleUSDC.sol#147) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": 154,
          "vulnerability_code": "interface yERC20 {\n\n  function deposit(uint256 _amount) external;\n\n  function withdraw(uint256 _amount) external;\n\n  function getRatio() external view returns (uint);\n",
          "message": "Contract 'yERC20' (StrategyPickleUSDC.sol#150-154) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 156,
          "vulnerability_to_line": 163,
          "vulnerability_code": "interface pERC20 {\n\n  function deposit(uint256 ,uint256 ) external;\n\n  function withdraw(uint256 ,uint256 ) external;\n\n  function balanceOf(uint256 ) external view returns(uint);\n\n  function balanceOf(uint256 ,address) external view returns(uint);\n\n  function getRatio() external view returns (uint);\n\n  function pendingPickle(uint256,address) external view returns(uint);\n",
          "message": "Contract 'pERC20' (StrategyPickleUSDC.sol#156-163) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function deposit(uint256 ,uint256 ) external;\n",
          "message": "Parameter '' of pERC20.deposit (StrategyPickleUSDC.sol#157) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function deposit(uint256 ,uint256 ) external;\n",
          "message": "Parameter '_scope_0' of pERC20.deposit (StrategyPickleUSDC.sol#157) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function withdraw(uint256 ,uint256 ) external;\n",
          "message": "Parameter '' of pERC20.withdraw (StrategyPickleUSDC.sol#158) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function withdraw(uint256 ,uint256 ) external;\n",
          "message": "Parameter '_scope_0' of pERC20.withdraw (StrategyPickleUSDC.sol#158) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 159,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(uint256 ) external view returns(uint);\n",
          "message": "Parameter '' of pERC20.balanceOf (StrategyPickleUSDC.sol#159) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(uint256 ,address) external view returns(uint);\n",
          "message": "Parameter '' of pERC20.balanceOf (StrategyPickleUSDC.sol#160) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(uint256 ,address) external view returns(uint);\n",
          "message": "Parameter '_scope_0' of pERC20.balanceOf (StrategyPickleUSDC.sol#160) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 162,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function pendingPickle(uint256,address) external view returns(uint);\n",
          "message": "Parameter '' of pERC20.pendingPickle (StrategyPickleUSDC.sol#162) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 162,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function pendingPickle(uint256,address) external view returns(uint);\n",
          "message": "Parameter '_scope_0' of pERC20.pendingPickle (StrategyPickleUSDC.sol#162) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 167,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function get_virtual_price() external view returns (uint);\n",
          "message": "Function 'ICurveFi.get_virtual_price' (StrategyPickleUSDC.sol#167) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 168,
          "vulnerability_to_line": 171,
          "vulnerability_code": "  function add_liquidity(\n\n    uint256[3] calldata amounts,\n\n    uint256 min_mint_amount\n",
          "message": "Function 'ICurveFi.add_liquidity' (StrategyPickleUSDC.sol#168-171) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 170,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 min_mint_amount\n",
          "message": "Parameter 'min_mint_amount' of ICurveFi.add_liquidity (StrategyPickleUSDC.sol#170) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": 175,
          "vulnerability_code": "  function remove_liquidity(\n\n    uint256 _amount,\n\n    uint256[3] calldata amounts\n",
          "message": "Function 'ICurveFi.remove_liquidity' (StrategyPickleUSDC.sol#172-175) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 177,
          "vulnerability_to_line": null,
          "vulnerability_code": "    int128 from, int128 to, uint256 _from_amount, uint256 _min_to_amount\n",
          "message": "Parameter '_from_amount' of ICurveFi.exchange (StrategyPickleUSDC.sol#177) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 177,
          "vulnerability_to_line": null,
          "vulnerability_code": "    int128 from, int128 to, uint256 _from_amount, uint256 _min_to_amount\n",
          "message": "Parameter '_min_to_amount' of ICurveFi.exchange (StrategyPickleUSDC.sol#177) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 265,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction withdraw(uint _amount) external\n",
          "message": "Parameter '_amount' of StrategyUSDCPickele.withdraw (StrategyPickleUSDC.sol#265) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": 286,
          "vulnerability_code": "    function _withdraw(uint _amount) internal returns(uint) {\t\t\t\n\n        require(msg.sender == controller, \"!controller\");\n\n\t\tuint amount = IERC20(want).balanceOf(address(this));\t\n\n\t\tif (amount < _amount) {\n\n\t\t\t_withdrawSome(_amount.sub(amount));\n\n\t\t\tamount = IERC20(want).balanceOf(address(this));\n\n\t\t}\t\n\n\t\treturn amount; \n",
          "message": "Function 'StrategyUSDCPickele._withdraw' (StrategyPickleUSDC.sol#278-286) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _withdraw(uint _amount) internal returns(uint) {\t\t\t\n",
          "message": "Parameter '_amount' of StrategyUSDCPickele._withdraw (StrategyPickleUSDC.sol#278) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 297,
          "vulnerability_to_line": 322,
          "vulnerability_code": "    function _withdrawSome(uint256 _amount) internal returns(uint256){\n\n        uint256 crvBefore = IERC20(crvPla).balanceOf(address(this));\n\n\t\tuint256 _crvpla = _amount.mul(1e18).mul(1e12).div((ICurveFi(curvefi).get_virtual_price()));\n\n\t\tif (crvBefore < _crvpla)\n\n\t\t{\n\n\t\t    _crvpla = _crvpla.sub(crvBefore);\n\n            uint256 _p3crv = _crvpla.mul(1e18).div(yERC20(pickleJar).getRatio());\n\n            uint _before = IERC20(pickleJar).balanceOf(address(this));\n\n            if (_before < _p3crv) {\n\n                _p3crv = _p3crv.sub(_before);\n\n                //require(_p3crv <= pledgePickles, \"Invalid amount!\");\n\n\t\t\t\tif (_p3crv > pledgePickles)\n\n\t\t\t\t{\n\n\t\t\t\t\t_p3crv = pledgePickles;\n\n\t\t\t\t}\t\t\t\t\n\n                pERC20(PICKLE).withdraw(pickleindex,_p3crv);\n\n                pledgePickles = pledgePickles.sub(_p3crv);\n\n            }\n\n            uint p3CRV = IERC20(pickleJar).balanceOf(address(this));\n\n\t    \tyERC20(pickleJar).withdraw(p3CRV);\n\n\t\t}\n\n\n\n        uint crv = IERC20(crvPla).balanceOf(address(this));\n\n\t\t\n\n        return withdrawUnderlying(crv);\n",
          "message": "Function 'StrategyUSDCPickele._withdrawSome' (StrategyPickleUSDC.sol#297-322) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 297,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _withdrawSome(uint256 _amount) internal returns(uint256){\n",
          "message": "Parameter '_amount' of StrategyUSDCPickele._withdrawSome (StrategyPickleUSDC.sol#297) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 324,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction withdrawUnderlying(uint256 _amount) public returns (uint) {\n",
          "message": "Parameter '_amount' of StrategyUSDCPickele.withdrawUnderlying (StrategyPickleUSDC.sol#324) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 419,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setGovernance(address _governance) public {\n",
          "message": "Parameter '_governance' of StrategyUSDCPickele.setGovernance (StrategyPickleUSDC.sol#419) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 424,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setController(address _controller) external {\n",
          "message": "Parameter '_controller' of StrategyUSDCPickele.setController (StrategyPickleUSDC.sol#424) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 199,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n",
          "message": "Constant 'StrategyUSDCPickele.unirouter' (StrategyPickleUSDC.sol#199) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n",
          "message": "Constant 'StrategyUSDCPickele.weth' (StrategyPickleUSDC.sol#200) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress constant public bt = address(0x76c5449F4950f6338A393F53CdA8b53B0cd3Ca3a);\n",
          "message": "Constant 'StrategyUSDCPickele.bt' (StrategyPickleUSDC.sol#201) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 203,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress constant public ydai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n",
          "message": "Constant 'StrategyUSDCPickele.ydai' (StrategyPickleUSDC.sol#203) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 204,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public yusdt = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\n",
          "message": "Constant 'StrategyUSDCPickele.yusdt' (StrategyPickleUSDC.sol#204) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 206,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public want = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);  //usdc\n",
          "message": "Constant 'StrategyUSDCPickele.want' (StrategyPickleUSDC.sol#206) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 207,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public curvefi = address(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7);\n",
          "message": "Constant 'StrategyUSDCPickele.curvefi' (StrategyPickleUSDC.sol#207) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 208,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public pickleJar = address(0x1BB74b5DdC1f4fC91D6f9E7906cf68bc93538e33);\n",
          "message": "Constant 'StrategyUSDCPickele.pickleJar' (StrategyPickleUSDC.sol#208) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress constant public crvPla = address(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490);\n",
          "message": "Constant 'StrategyUSDCPickele.crvPla' (StrategyPickleUSDC.sol#211) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 212,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public pickletoken = address(0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5);\n",
          "message": "Constant 'StrategyUSDCPickele.pickletoken' (StrategyPickleUSDC.sol#212) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 199,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress constant public bt = address(0x76c5449F4950f6338A393F53CdA8b53B0cd3Ca3a);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 203,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress constant public ydai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 204,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public yusdt = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 206,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public want = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);  //usdc\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 207,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public curvefi = address(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 208,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public pickleJar = address(0x1BB74b5DdC1f4fC91D6f9E7906cf68bc93538e33);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 209,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress constant public PICKLE = address(0xbD17B1ce622d73bD438b9E658acA5996dc394b0d);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress constant public crvPla = address(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 212,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public pickletoken = address(0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 226,
          "vulnerability_to_line": null,
          "vulnerability_code": "        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 413,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setredeliverynum(uint256 value) public\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 419,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setGovernance(address _governance) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 424,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setController(address _controller) external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.15;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 196,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_TX_ORIGIN",
          "vulnerability_from_line": 225,
          "vulnerability_to_line": null,
          "vulnerability_code": "        governance = tx.origin;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, bytes memory returndata) = address(token).call(data);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly { codehash := extcodehash(account) }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function swapExactTokensForTokens(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 186,
          "vulnerability_to_line": null,
          "vulnerability_code": "      address[] calldata path,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 187,
          "vulnerability_to_line": null,
          "vulnerability_code": "      address to,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 188,
          "vulnerability_to_line": null,
          "vulnerability_code": "      uint deadline\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 189,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) external returns (uint[] memory amounts);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 197,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 pickleindex = 14;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}