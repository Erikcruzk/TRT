{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 212,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public pledgePickles = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 218,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 219,
          "vulnerability_to_line": null,
          "vulnerability_code": "        governance = tx.origin;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": null,
          "vulnerability_code": "        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 221,
          "vulnerability_to_line": null,
          "vulnerability_code": "        doApprove();\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 222,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tswap2BTRouting = [pickletoken,weth,bt];\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 223,
          "vulnerability_to_line": null,
          "vulnerability_code": "        swap2TokenRouting = [pickletoken,weth,yusdc];\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"SafeERC20: low-level call failed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 260,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_vault != address(0), \"!vault\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 266,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == controller, \"!controller\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 279,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_vault != address(0), \"!vault\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 364,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 369,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 374,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "curve-readonly-reentrancy",
          "vulnerability_from_line": 321,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\treturn _usdc.mul(1e12).mul(1e18).div(ICurveFi(curvefi).get_virtual_price());\n",
          "message": "ICurveFi(curvefi).get_virtual_price() call on a Curve pool is not protected from the read- only reentrancy."
        },
        {
          "name": "no-slippage-check",
          "vulnerability_from_line": 350,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t    UniswapRouter(unirouter).swapExactTokensForTokens(_2token, 0, swap2TokenRouting, address(this), now.add(1800));\n",
          "message": "No slippage check in a Uniswap v2/v3 trade"
        },
        {
          "name": "no-slippage-check",
          "vulnerability_from_line": 351,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t    UniswapRouter(unirouter).swapExactTokensForTokens(_2bt, 0, swap2BTRouting, Controller(controller).rewards(), now.add(1800));\n",
          "message": "No slippage check in a Uniswap v2/v3 trade"
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_58"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": 76,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
          "message": "Address.isContract (StrategyPickle3CRV.sol#70-76) is declared view but contains assembly code\n"
        },
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 312,
          "vulnerability_to_line": 322,
          "vulnerability_code": "    function balanceOfPickle() public view returns (uint256)\n\n\t{\n\n\t\tuint256 pickletokenNum = pERC20(PICKLE).pendingPickle(pickleindex,address(this)).add(IERC20(pickletoken).balanceOf(address(this))).mul(80).div(100);\n\n\t\tif (pickletokenNum==0)\n\n\t\t{\n\n\t\t    return 0;\n\n\t\t}\n\n\t\tuint[] memory amounts = UniswapRouter(unirouter).getAmountsOut(pickletokenNum,swap2TokenRouting);\n\n        uint _usdc = amounts[amounts.length-1];\n\n\t\treturn _usdc.mul(1e12).mul(1e18).div(ICurveFi(curvefi).get_virtual_price());\n",
          "message": "Strategy3CRVPickle.balanceOfPickle (StrategyPickle3CRV.sol#312-322) uses a dangerous strict equality:\n\t- pickletokenNum == 0\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 283,
          "vulnerability_to_line": 297,
          "vulnerability_code": "    function _withdrawSome(uint256 _amount) internal {\n\n        uint256 _p3crv = _amount.mul(1e18).div(yERC20(pickleJar).getRatio());\n\n        uint _before = IERC20(pickleJar).balanceOf(address(this));\n\n        if (_before < _p3crv) {\n\n            _p3crv = _p3crv.sub(_before);\n\n            if (_p3crv > pledgePickles)\n\n            {\n\n                _p3crv = pledgePickles;\n\n            }\n\n            pERC20(PICKLE).withdraw(pickleindex,_p3crv);\n\n            pledgePickles = pledgePickles.sub(_p3crv);\n\n            _p3crv = IERC20(pickleJar).balanceOf(address(this));\n\n        }\n\n        yERC20(pickleJar).withdraw(_p3crv);\n",
          "message": "Reentrancy in Strategy3CRVPickle._withdrawSome (StrategyPickle3CRV.sol#283-297):\n\tExternal calls:\n\t- _p3crv = _amount.mul(1e18).div(yERC20(pickleJar).getRatio()) (StrategyPickle3CRV.sol#284)\n\t- _before = IERC20(pickleJar).balanceOf(address(this)) (StrategyPickle3CRV.sol#285)\n\t- pERC20(PICKLE).withdraw(pickleindex,_p3crv) (StrategyPickle3CRV.sol#292)\n\tState variables written after the call(s):\n\t- pledgePickles (StrategyPickle3CRV.sol#293)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 337,
          "vulnerability_to_line": 342,
          "vulnerability_code": "    function harvest() public\n\n    {\n\n        pERC20(PICKLE).withdraw(pickleindex,pledgePickles);\n\n        pledgePickles = 0;\n\n        redelivery();\n",
          "message": "Reentrancy in Strategy3CRVPickle.harvest (StrategyPickle3CRV.sol#337-342):\n\tExternal calls:\n\t- pERC20(PICKLE).withdraw(pickleindex,pledgePickles) (StrategyPickle3CRV.sol#339)\n\tState variables written after the call(s):\n\t- pledgePickles (StrategyPickle3CRV.sol#340)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 337,
          "vulnerability_to_line": 342,
          "vulnerability_code": "    function harvest() public\n\n    {\n\n        pERC20(PICKLE).withdraw(pickleindex,pledgePickles);\n\n        pledgePickles = 0;\n\n        redelivery();\n",
          "message": "Reentrancy in Strategy3CRVPickle.harvest (StrategyPickle3CRV.sol#337-342):\n\tExternal calls:\n\t- pERC20(PICKLE).withdraw(pickleindex,pledgePickles) (StrategyPickle3CRV.sol#339)\n\t- redelivery() (StrategyPickle3CRV.sol#341)\n\tState variables written after the call(s):\n\t- pledgePickles (StrategyPickle3CRV.sol#341)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 226,
          "vulnerability_to_line": 229,
          "vulnerability_code": "\tfunction doApprove () public{\n\n        IERC20(pickletoken).approve(unirouter, 0);\n\n        IERC20(pickletoken).approve(unirouter, uint(-1));\n",
          "message": "Strategy3CRVPickle.doApprove (StrategyPickle3CRV.sol#226-229) does not use the value returned by external calls:\n\t-IERC20(pickletoken).approve(unirouter,0) (StrategyPickle3CRV.sol#227)\n\t-IERC20(pickletoken).approve(unirouter,uint256(- 1)) (StrategyPickle3CRV.sol#228)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 344,
          "vulnerability_to_line": 361,
          "vulnerability_code": "    function redelivery() internal {\n\n        uint256 reward = IERC20(pickletoken).balanceOf(address(this));\n\n        if (reward > redeliverynum)\n\n        {\n\n            uint256 _2token = reward.mul(80).div(100); //80%\n\n\t\t    uint256 _2bt = reward.mul(20).div(100);  //20%\n\n\t\t    UniswapRouter(unirouter).swapExactTokensForTokens(_2token, 0, swap2TokenRouting, address(this), now.add(1800));\n\n\t\t    UniswapRouter(unirouter).swapExactTokensForTokens(_2bt, 0, swap2BTRouting, Controller(controller).rewards(), now.add(1800));\n\n\n\n            uint _usdc = IERC20(yusdc).balanceOf(address(this));\n\n            if (_usdc > 0) {\n\n                IERC20(yusdc).safeApprove(curvefi, 0);\n\n                IERC20(yusdc).safeApprove(curvefi, _usdc);\n\n                ICurveFi(curvefi).add_liquidity([0,_usdc,0],0);\n\n            }\n\n\t\t}\n\n        deposit();\n",
          "message": "Strategy3CRVPickle.redelivery (StrategyPickle3CRV.sol#344-361) does not use the value returned by external calls:\n\t-UniswapRouter(unirouter).swapExactTokensForTokens(_2token,0,swap2TokenRouting,address(this),now.add(1800)) (StrategyPickle3CRV.sol#350)\n\t-UniswapRouter(unirouter).swapExactTokensForTokens(_2bt,0,swap2BTRouting,Controller(controller).rewards(),now.add(1800)) (StrategyPickle3CRV.sol#351)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 218,
          "vulnerability_to_line": 224,
          "vulnerability_code": "    constructor() public {\n\n        governance = tx.origin;\n\n        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\n\n        doApprove();\n\n\t\tswap2BTRouting = [pickletoken,weth,bt];\n\n        swap2TokenRouting = [pickletoken,weth,yusdc];\n",
          "message": "Reentrancy in Strategy3CRVPickle.constructor (StrategyPickle3CRV.sol#218-224):\n\tExternal calls:\n\t- doApprove() (StrategyPickle3CRV.sol#221)\n\tState variables written after the call(s):\n\t- swap2BTRouting (StrategyPickle3CRV.sol#222)\n\t- swap2TokenRouting (StrategyPickle3CRV.sol#223)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 231,
          "vulnerability_to_line": 248,
          "vulnerability_code": "    function deposit() public {\n\n\t\tuint256 _crvpla = IERC20(crvPla).balanceOf(address(this));\n\n\t\tif (_crvpla > 0)\n\n\t\t{\n\n\t\t    IERC20(crvPla).safeApprove(pickleJar, 0);\n\n            IERC20(crvPla).safeApprove(pickleJar, _crvpla);\n\n\t\t    yERC20(pickleJar).deposit(_crvpla);\n\n\t\t}\n\n\n\n\t\tuint _p3crv = IERC20(pickleJar).balanceOf(address(this));\n\n\t\tif (_p3crv > 0)\n\n\t\t{\n\n\t        IERC20(pickleJar).safeApprove(PICKLE, 0);\n\n            IERC20(pickleJar).safeApprove(PICKLE, _p3crv);\n\n\t    \tpERC20(PICKLE).deposit(pickleindex,_p3crv);\n\n    \t\tpledgePickles = pledgePickles.add(_p3crv);\n\n\t\t}\n",
          "message": "Reentrancy in Strategy3CRVPickle.deposit (StrategyPickle3CRV.sol#231-248):\n\tExternal calls:\n\t- _crvpla = IERC20(crvPla).balanceOf(address(this)) (StrategyPickle3CRV.sol#232)\n\t- yERC20(pickleJar).deposit(_crvpla) (StrategyPickle3CRV.sol#237)\n\t- _p3crv = IERC20(pickleJar).balanceOf(address(this)) (StrategyPickle3CRV.sol#240)\n\t- pERC20(PICKLE).deposit(pickleindex,_p3crv) (StrategyPickle3CRV.sol#245)\n\tState variables written after the call(s):\n\t- pledgePickles (StrategyPickle3CRV.sol#246)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": 76,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
          "message": "Address.isContract uses assembly (StrategyPickle3CRV.sol#70-76)\n\t- StrategyPickle3CRV.sol#74\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 pickleindex = 14;\n",
          "message": "Strategy3CRVPickle.pickleindex should be constant (StrategyPickle3CRV.sol#190)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 328,
          "vulnerability_to_line": 330,
          "vulnerability_code": "    function getPending() public view returns (uint256) {\n\n        return pERC20(PICKLE).pendingPickle(pickleindex,address(this));\n",
          "message": "Strategy3CRVPickle.getPending (StrategyPickle3CRV.sol#328-330) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": 335,
          "vulnerability_code": "\tfunction getPickle() public view returns(uint256)\n\n\t{\n\n\t\treturn IERC20(pickletoken).balanceOf(address(this));\n",
          "message": "Strategy3CRVPickle.getPickle (StrategyPickle3CRV.sol#332-335) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 337,
          "vulnerability_to_line": 342,
          "vulnerability_code": "    function harvest() public\n\n    {\n\n        pERC20(PICKLE).withdraw(pickleindex,pledgePickles);\n\n        pledgePickles = 0;\n\n        redelivery();\n",
          "message": "Strategy3CRVPickle.harvest (StrategyPickle3CRV.sol#337-342) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 363,
          "vulnerability_to_line": 366,
          "vulnerability_code": "    function setredeliverynum(uint256 value) public {\n\n        require(msg.sender == governance, \"!governance\");\n\n        redeliverynum = value;\n",
          "message": "Strategy3CRVPickle.setredeliverynum (StrategyPickle3CRV.sol#363-366) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 368,
          "vulnerability_to_line": 371,
          "vulnerability_code": "    function setGovernance(address _governance) public {\n\n        require(msg.sender == governance, \"!governance\");\n\n        governance = _governance;\n",
          "message": "Strategy3CRVPickle.setGovernance (StrategyPickle3CRV.sol#368-371) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.15;\n",
          "message": "Detected issues with version pragma in StrategyPickle3CRV.sol:\n\t- pragma solidity^0.5.15 (StrategyPickle3CRV.sol#9): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": 86,
          "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n\n\n        // solhint-disable-next-line avoid-call-value\n\n        (bool success, ) = recipient.call.value(amount)(\"\");\n\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
          "message": "Low level call in Address.sendValue (StrategyPickle3CRV.sol#80-86):\n\t-(success) = recipient.call.value(amount)() StrategyPickle3CRV.sol#84\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": 118,
          "vulnerability_code": "    function callOptionalReturn(IERC20 token, bytes memory data) private {\n\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n\n\n        // solhint-disable-next-line avoid-low-level-calls\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n\n        require(success, \"SafeERC20: low-level call failed\");\n\n\n\n        if (returndata.length > 0) { // Return data is optional\n\n            // solhint-disable-next-line max-line-length\n\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n\n        }\n",
          "message": "Low level call in SafeERC20.callOptionalReturn (StrategyPickle3CRV.sol#107-118):\n\t-(success,returndata) = address(token).call(data) StrategyPickle3CRV.sol#111\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 122,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function vaults(address) external view returns (address);\n",
          "message": "Parameter '' of Controller.vaults (StrategyPickle3CRV.sol#122) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deposit(uint256) external;\n",
          "message": "Parameter '' of CurveDeposit.deposit (StrategyPickle3CRV.sol#141) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(uint256) external;\n",
          "message": "Parameter '' of CurveDeposit.withdraw (StrategyPickle3CRV.sol#142) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address) external view returns (uint256);\n",
          "message": "Parameter '' of CurveDeposit.balanceOf (StrategyPickle3CRV.sol#143) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 144,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function claimable_tokens(address) external view returns (uint256);\n",
          "message": "Function 'CurveDeposit.claimable_tokens' (StrategyPickle3CRV.sol#144) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 144,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function claimable_tokens(address) external view returns (uint256);\n",
          "message": "Parameter '' of CurveDeposit.claimable_tokens (StrategyPickle3CRV.sol#144) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 147,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mint(address) external;\n",
          "message": "Parameter '' of CurveMinter.mint (StrategyPickle3CRV.sol#147) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": 154,
          "vulnerability_code": "interface yERC20 {\n\n  function deposit(uint256 _amount) external;\n\n  function withdraw(uint256 _amount) external;\n\n  function getRatio() external view returns (uint);\n",
          "message": "Contract 'yERC20' (StrategyPickle3CRV.sol#150-154) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 156,
          "vulnerability_to_line": 163,
          "vulnerability_code": "interface pERC20 {\n\n  function deposit(uint256 ,uint256 ) external;\n\n  function withdraw(uint256 ,uint256 ) external;\n\n  function balanceOf(uint256 ) external view returns(uint);\n\n  function balanceOf(uint256 ,address) external view returns(uint);\n\n  function getRatio() external view returns (uint);\n\n  function pendingPickle(uint256,address) external view returns(uint);\n",
          "message": "Contract 'pERC20' (StrategyPickle3CRV.sol#156-163) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function deposit(uint256 ,uint256 ) external;\n",
          "message": "Parameter '' of pERC20.deposit (StrategyPickle3CRV.sol#157) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function deposit(uint256 ,uint256 ) external;\n",
          "message": "Parameter '_scope_0' of pERC20.deposit (StrategyPickle3CRV.sol#157) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function withdraw(uint256 ,uint256 ) external;\n",
          "message": "Parameter '' of pERC20.withdraw (StrategyPickle3CRV.sol#158) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function withdraw(uint256 ,uint256 ) external;\n",
          "message": "Parameter '_scope_0' of pERC20.withdraw (StrategyPickle3CRV.sol#158) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 159,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(uint256 ) external view returns(uint);\n",
          "message": "Parameter '' of pERC20.balanceOf (StrategyPickle3CRV.sol#159) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(uint256 ,address) external view returns(uint);\n",
          "message": "Parameter '' of pERC20.balanceOf (StrategyPickle3CRV.sol#160) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(uint256 ,address) external view returns(uint);\n",
          "message": "Parameter '_scope_0' of pERC20.balanceOf (StrategyPickle3CRV.sol#160) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 162,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function pendingPickle(uint256,address) external view returns(uint);\n",
          "message": "Parameter '' of pERC20.pendingPickle (StrategyPickle3CRV.sol#162) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 162,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function pendingPickle(uint256,address) external view returns(uint);\n",
          "message": "Parameter '_scope_0' of pERC20.pendingPickle (StrategyPickle3CRV.sol#162) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 166,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function get_virtual_price() external view returns (uint);\n",
          "message": "Function 'ICurveFi.get_virtual_price' (StrategyPickle3CRV.sol#166) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 167,
          "vulnerability_to_line": 170,
          "vulnerability_code": "  function add_liquidity(\n\n    uint256[3] calldata amounts,\n\n    uint256 min_mint_amount\n",
          "message": "Function 'ICurveFi.add_liquidity' (StrategyPickle3CRV.sol#167-170) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 169,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 min_mint_amount\n",
          "message": "Parameter 'min_mint_amount' of ICurveFi.add_liquidity (StrategyPickle3CRV.sol#169) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction withdraw(uint _amount) external\n",
          "message": "Parameter '_amount' of Strategy3CRVPickle.withdraw (StrategyPickle3CRV.sol#252) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 265,
          "vulnerability_to_line": 273,
          "vulnerability_code": "    function _withdraw(uint _amount) internal returns(uint) {\n\n        require(msg.sender == controller, \"!controller\");\n\n\t\tuint amount = IERC20(want).balanceOf(address(this));\n\n\t\tif (amount < _amount) {\n\n\t\t\t_withdrawSome(_amount.sub(amount));\n\n\t\t\tamount = IERC20(want).balanceOf(address(this));\n\n\t\t}\n\n\t\treturn amount;\n",
          "message": "Function 'Strategy3CRVPickle._withdraw' (StrategyPickle3CRV.sol#265-273) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 265,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _withdraw(uint _amount) internal returns(uint) {\n",
          "message": "Parameter '_amount' of Strategy3CRVPickle._withdraw (StrategyPickle3CRV.sol#265) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 283,
          "vulnerability_to_line": 297,
          "vulnerability_code": "    function _withdrawSome(uint256 _amount) internal {\n\n        uint256 _p3crv = _amount.mul(1e18).div(yERC20(pickleJar).getRatio());\n\n        uint _before = IERC20(pickleJar).balanceOf(address(this));\n\n        if (_before < _p3crv) {\n\n            _p3crv = _p3crv.sub(_before);\n\n            if (_p3crv > pledgePickles)\n\n            {\n\n                _p3crv = pledgePickles;\n\n            }\n\n            pERC20(PICKLE).withdraw(pickleindex,_p3crv);\n\n            pledgePickles = pledgePickles.sub(_p3crv);\n\n            _p3crv = IERC20(pickleJar).balanceOf(address(this));\n\n        }\n\n        yERC20(pickleJar).withdraw(_p3crv);\n",
          "message": "Function 'Strategy3CRVPickle._withdrawSome' (StrategyPickle3CRV.sol#283-297) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 283,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _withdrawSome(uint256 _amount) internal {\n",
          "message": "Parameter '_amount' of Strategy3CRVPickle._withdrawSome (StrategyPickle3CRV.sol#283) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 368,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setGovernance(address _governance) public {\n",
          "message": "Parameter '_governance' of Strategy3CRVPickle.setGovernance (StrategyPickle3CRV.sol#368) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 373,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setController(address _controller) external {\n",
          "message": "Parameter '_controller' of Strategy3CRVPickle.setController (StrategyPickle3CRV.sol#373) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 192,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n",
          "message": "Constant 'Strategy3CRVPickle.unirouter' (StrategyPickle3CRV.sol#192) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 193,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n",
          "message": "Constant 'Strategy3CRVPickle.weth' (StrategyPickle3CRV.sol#193) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress constant public bt = address(0x76c5449F4950f6338A393F53CdA8b53B0cd3Ca3a);\n",
          "message": "Constant 'Strategy3CRVPickle.bt' (StrategyPickle3CRV.sol#194) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 196,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress constant public ydai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n",
          "message": "Constant 'Strategy3CRVPickle.ydai' (StrategyPickle3CRV.sol#196) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 197,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public yusdc = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\n",
          "message": "Constant 'Strategy3CRVPickle.yusdc' (StrategyPickle3CRV.sol#197) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public yusdt = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\n",
          "message": "Constant 'Strategy3CRVPickle.yusdt' (StrategyPickle3CRV.sol#198) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public want = address(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490);  //3crv\n",
          "message": "Constant 'Strategy3CRVPickle.want' (StrategyPickle3CRV.sol#200) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public curvefi = address(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7);\n",
          "message": "Constant 'Strategy3CRVPickle.curvefi' (StrategyPickle3CRV.sol#201) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 202,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public pickleJar = address(0x1BB74b5DdC1f4fC91D6f9E7906cf68bc93538e33);\n",
          "message": "Constant 'Strategy3CRVPickle.pickleJar' (StrategyPickle3CRV.sol#202) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress constant public crvPla = address(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490);\n",
          "message": "Constant 'Strategy3CRVPickle.crvPla' (StrategyPickle3CRV.sol#205) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 206,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public pickletoken = address(0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5);\n",
          "message": "Constant 'Strategy3CRVPickle.pickletoken' (StrategyPickle3CRV.sol#206) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 192,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 193,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress constant public bt = address(0x76c5449F4950f6338A393F53CdA8b53B0cd3Ca3a);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 196,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress constant public ydai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 197,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public yusdc = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public yusdt = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public want = address(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490);  //3crv\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public curvefi = address(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 202,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public pickleJar = address(0x1BB74b5DdC1f4fC91D6f9E7906cf68bc93538e33);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 203,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress constant public PICKLE = address(0xbD17B1ce622d73bD438b9E658acA5996dc394b0d);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress constant public crvPla = address(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 206,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public pickletoken = address(0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": null,
          "vulnerability_code": "        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 363,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setredeliverynum(uint256 value) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 368,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setGovernance(address _governance) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 373,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setController(address _controller) external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.15;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 188,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_TX_ORIGIN",
          "vulnerability_from_line": 219,
          "vulnerability_to_line": null,
          "vulnerability_code": "        governance = tx.origin;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, bytes memory returndata) = address(token).call(data);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly { codehash := extcodehash(account) }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 175,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function swapExactTokensForTokens(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 178,
          "vulnerability_to_line": null,
          "vulnerability_code": "      address[] calldata path,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 179,
          "vulnerability_to_line": null,
          "vulnerability_code": "      address to,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 180,
          "vulnerability_to_line": null,
          "vulnerability_code": "      uint deadline\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 181,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) external returns (uint[] memory amounts);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 pickleindex = 14;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}