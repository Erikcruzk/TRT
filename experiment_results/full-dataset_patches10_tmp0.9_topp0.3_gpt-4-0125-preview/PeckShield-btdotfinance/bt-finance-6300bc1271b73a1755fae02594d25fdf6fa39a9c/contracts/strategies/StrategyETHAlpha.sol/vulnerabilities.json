{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 193,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public withdrawalFee = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 199,
          "vulnerability_to_line": null,
          "vulnerability_code": "        governance = tx.origin;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tswap2BTRouting = [weth,bt];\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 202,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"SafeERC20: low-level call failed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 209,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_want > 0,\"WETH is 0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_vault != address(0), \"!vault\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 230,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == controller, \"!controller\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 258,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_vault != address(0), \"!vault\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 283,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 288,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 289,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_withdrawalFee <=1000,\"fee >= 10%\"); //max:1%\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "no-slippage-check",
          "vulnerability_from_line": 241,
          "vulnerability_to_line": null,
          "vulnerability_code": "            UniswapRouter(unirouter).swapExactTokensForTokens(_fee, 0, swap2BTRouting, address(this), now.add(1800));\n",
          "message": "No slippage check in a Uniswap v2/v3 trade"
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_28"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": 76,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
          "message": "Address.isContract (StrategyETHAlpha.sol#70-76) is declared view but contains assembly code\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": 76,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
          "message": "Address.isContract uses assembly (StrategyETHAlpha.sol#70-76)\n\t- StrategyETHAlpha.sol#74\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 207,
          "vulnerability_to_line": 212,
          "vulnerability_code": "    function deposit() public {\n\n\t\tuint _want = IERC20(want).balanceOf(address(this));\n\n        require(_want > 0,\"WETH is 0\");\n\n        WETH(address(weth)).withdraw(_want); //weth->eth\n\n        IBETH(ethpool).deposit.value(_want)();\n",
          "message": "StrategyETHAlpha.deposit (StrategyETHAlpha.sol#207-212) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 276,
          "vulnerability_to_line": 280,
          "vulnerability_code": "    function setredeliverynum(uint256 value) public\n\n    {\n\n        require(msg.sender == governance, \"!governance\");\n\n        redeliverynum = value;\n",
          "message": "StrategyETHAlpha.setredeliverynum (StrategyETHAlpha.sol#276-280) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 282,
          "vulnerability_to_line": 285,
          "vulnerability_code": "    function setGovernance(address _governance) public {\n\n        require(msg.sender == governance, \"!governance\");\n\n        governance = _governance;\n",
          "message": "StrategyETHAlpha.setGovernance (StrategyETHAlpha.sol#282-285) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.17;\n",
          "message": "Detected issues with version pragma in StrategyETHAlpha.sol:\n\t- pragma solidity^0.5.17 (StrategyETHAlpha.sol#9): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": 86,
          "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n\n\n        // solhint-disable-next-line avoid-call-value\n\n        (bool success, ) = recipient.call.value(amount)(\"\");\n\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
          "message": "Low level call in Address.sendValue (StrategyETHAlpha.sol#80-86):\n\t-(success) = recipient.call.value(amount)() StrategyETHAlpha.sol#84\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": 118,
          "vulnerability_code": "    function callOptionalReturn(IERC20 token, bytes memory data) private {\n\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n\n\n        // solhint-disable-next-line avoid-low-level-calls\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n\n        require(success, \"SafeERC20: low-level call failed\");\n\n\n\n        if (returndata.length > 0) { // Return data is optional\n\n            // solhint-disable-next-line max-line-length\n\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n\n        }\n",
          "message": "Low level call in SafeERC20.callOptionalReturn (StrategyETHAlpha.sol#107-118):\n\t-(success,returndata) = address(token).call(data) StrategyETHAlpha.sol#111\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 122,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function vaults(address) external view returns (address);\n",
          "message": "Parameter '' of Controller.vaults (StrategyETHAlpha.sol#122) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function swapExactTokensForTokens(uint, uint, address[] calldata, address, uint) external;\n",
          "message": "Parameter '' of UniswapRouter.swapExactTokensForTokens (StrategyETHAlpha.sol#143) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function swapExactTokensForTokens(uint, uint, address[] calldata, address, uint) external;\n",
          "message": "Parameter '_scope_0' of UniswapRouter.swapExactTokensForTokens (StrategyETHAlpha.sol#143) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function swapExactTokensForTokens(uint, uint, address[] calldata, address, uint) external;\n",
          "message": "Parameter '_scope_1' of UniswapRouter.swapExactTokensForTokens (StrategyETHAlpha.sol#143) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function swapExactTokensForTokens(uint, uint, address[] calldata, address, uint) external;\n",
          "message": "Parameter '_scope_2' of UniswapRouter.swapExactTokensForTokens (StrategyETHAlpha.sol#143) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function swapExactTokensForTokens(uint, uint, address[] calldata, address, uint) external;\n",
          "message": "Parameter '_scope_3' of UniswapRouter.swapExactTokensForTokens (StrategyETHAlpha.sol#143) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(uint _amount) external\n",
          "message": "Parameter '_amount' of StrategyETHAlpha.withdraw (StrategyETHAlpha.sol#216) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 229,
          "vulnerability_to_line": 245,
          "vulnerability_code": "    function _withdraw(uint _amount) internal returns(uint) {\n\n        require(msg.sender == controller, \"!controller\");\n\n\t\tuint amount = IERC20(want).balanceOf(address(this));\n\n\t\tif (amount < _amount) {\n\n\t\t\t_withdrawSome(_amount.sub(amount));\n\n\t\t\tamount = IERC20(want).balanceOf(address(this));\n\n\t\t}\n\n\n\n        uint _fee = 0;\n\n        if (withdrawalFee>0){\n\n            _fee = amount.mul(withdrawalFee).div(withdrawalMax);\n\n            amount = amount.sub(_fee);\n\n            UniswapRouter(unirouter).swapExactTokensForTokens(_fee, 0, swap2BTRouting, address(this), now.add(1800));\n\n        }\n\n\n\n\t\treturn amount;\n",
          "message": "Function 'StrategyETHAlpha._withdraw' (StrategyETHAlpha.sol#229-245) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 229,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _withdraw(uint _amount) internal returns(uint) {\n",
          "message": "Parameter '_amount' of StrategyETHAlpha._withdraw (StrategyETHAlpha.sol#229) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 247,
          "vulnerability_to_line": 252,
          "vulnerability_code": "    function _withdrawSome(uint _amount) internal\n\n    {\n\n        uint256 share = _amount.mul(IBETH(ethpool).totalSupply()).div(IBETH(ethpool).totalETH());\n\n        IBETH(ethpool).withdraw(share);\n\n        WETH(address(weth)).deposit.value(address(this).balance)();\n",
          "message": "Function 'StrategyETHAlpha._withdrawSome' (StrategyETHAlpha.sol#247-252) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 247,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _withdrawSome(uint _amount) internal\n",
          "message": "Parameter '_amount' of StrategyETHAlpha._withdrawSome (StrategyETHAlpha.sol#247) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 282,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setGovernance(address _governance) public {\n",
          "message": "Parameter '_governance' of StrategyETHAlpha.setGovernance (StrategyETHAlpha.sol#282) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 287,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setWithdrawalFee(uint _withdrawalFee) external {\n",
          "message": "Parameter '_withdrawalFee' of StrategyETHAlpha.setWithdrawalFee (StrategyETHAlpha.sol#287) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 293,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setController(address _controller) external {\n",
          "message": "Parameter '_controller' of StrategyETHAlpha.setController (StrategyETHAlpha.sol#293) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 181,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n",
          "message": "Constant 'StrategyETHAlpha.unirouter' (StrategyETHAlpha.sol#181) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 182,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n",
          "message": "Constant 'StrategyETHAlpha.weth' (StrategyETHAlpha.sol#182) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress constant public bt = address(0x76c5449F4950f6338A393F53CdA8b53B0cd3Ca3a);\n",
          "message": "Constant 'StrategyETHAlpha.bt' (StrategyETHAlpha.sol#183) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 185,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public want = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);  //weth\n",
          "message": "Constant 'StrategyETHAlpha.want' (StrategyETHAlpha.sol#185) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 187,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public ethpool = address(0x67B66C99D3Eb37Fa76Aa3Ed1ff33E8e39F0b9c7A);\n",
          "message": "Constant 'StrategyETHAlpha.ethpool' (StrategyETHAlpha.sol#187) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant public withdrawalMax = 10000;\n",
          "message": "Constant 'StrategyETHAlpha.withdrawalMax' (StrategyETHAlpha.sol#194) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 181,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 182,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress constant public bt = address(0x76c5449F4950f6338A393F53CdA8b53B0cd3Ca3a);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 185,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public want = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);  //weth\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 187,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public ethpool = address(0x67B66C99D3Eb37Fa76Aa3Ed1ff33E8e39F0b9c7A);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 276,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setredeliverynum(uint256 value) public\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 282,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setGovernance(address _governance) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 287,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setWithdrawalFee(uint _withdrawalFee) external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 293,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setController(address _controller) external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.17;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 179,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_TX_ORIGIN",
          "vulnerability_from_line": 199,
          "vulnerability_to_line": null,
          "vulnerability_code": "        governance = tx.origin;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, bytes memory returndata) = address(token).call(data);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly { codehash := extcodehash(account) }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 196,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address[] public swap2BTRouting;\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}