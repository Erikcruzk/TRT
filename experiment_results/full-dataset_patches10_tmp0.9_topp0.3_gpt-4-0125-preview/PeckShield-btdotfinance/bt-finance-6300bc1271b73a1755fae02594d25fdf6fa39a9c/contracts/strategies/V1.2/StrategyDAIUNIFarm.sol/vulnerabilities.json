{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 210,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "        governance = tx.origin;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 212,
          "vulnerability_to_line": null,
          "vulnerability_code": "        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 213,
          "vulnerability_to_line": null,
          "vulnerability_code": "        doApprove(); \n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 214,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"SafeERC20: low-level call failed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 254,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_vault != address(0), \"!vault\");                     \n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 260,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == controller, \"!controller\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 275,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t\trequire(_fweth <= IERC20(pool).balanceOf(address(this)),\"Insufficient Balance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 288,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_vault != address(0), \"!vault\");                      \n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 400,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 405,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 410,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 345,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (_weth > 0 && _token > 0) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 346,
          "vulnerability_to_line": null,
          "vulnerability_code": "            IERC20(weth).safeApprove(unirouter, 0);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 347,
          "vulnerability_to_line": null,
          "vulnerability_code": "            IERC20(weth).safeApprove(unirouter, _weth);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 348,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 349,
          "vulnerability_to_line": null,
          "vulnerability_code": "            IERC20(token).safeApprove(unirouter, 0);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 350,
          "vulnerability_to_line": null,
          "vulnerability_code": "            IERC20(token).safeApprove(unirouter, _token);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 351,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 352,
          "vulnerability_to_line": null,
          "vulnerability_code": "            UniswapRouter(unirouter).addLiquidity(\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 353,
          "vulnerability_to_line": null,
          "vulnerability_code": "                weth,\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 354,
          "vulnerability_to_line": null,
          "vulnerability_code": "                token,\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "no-slippage-check",
          "vulnerability_from_line": 389,
          "vulnerability_to_line": null,
          "vulnerability_code": "        UniswapRouter(unirouter).swapExactTokensForTokens(\n",
          "message": "No slippage check in a Uniswap v2/v3 trade"
        },
        {
          "name": "no-slippage-check",
          "vulnerability_from_line": 390,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _amount,\n",
          "message": "No slippage check in a Uniswap v2/v3 trade"
        },
        {
          "name": "no-slippage-check",
          "vulnerability_from_line": 391,
          "vulnerability_to_line": null,
          "vulnerability_code": "            0,\n",
          "message": "No slippage check in a Uniswap v2/v3 trade"
        },
        {
          "name": "no-slippage-check",
          "vulnerability_from_line": 392,
          "vulnerability_to_line": null,
          "vulnerability_code": "            path,\n",
          "message": "No slippage check in a Uniswap v2/v3 trade"
        },
        {
          "name": "no-slippage-check",
          "vulnerability_from_line": 393,
          "vulnerability_to_line": null,
          "vulnerability_code": "            address(this),\n",
          "message": "No slippage check in a Uniswap v2/v3 trade"
        },
        {
          "name": "no-slippage-check",
          "vulnerability_from_line": 394,
          "vulnerability_to_line": null,
          "vulnerability_code": "            now.add(1800)\n",
          "message": "No slippage check in a Uniswap v2/v3 trade"
        },
        {
          "name": "no-slippage-check",
          "vulnerability_from_line": 395,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "No slippage check in a Uniswap v2/v3 trade"
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_49"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": 76,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
          "message": "Address.isContract (StrategyDAIUNIFarm.sol#70-76) is declared view but contains assembly code\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": 219,
          "vulnerability_code": "\tfunction doApprove () public{\n\n        IERC20(Farm).approve(unirouter, 0);\n\n        IERC20(Farm).approve(unirouter, uint(-1));\n",
          "message": "StrategyDAIUNIFarm.doApprove (StrategyDAIUNIFarm.sol#216-219) does not use the value returned by external calls:\n\t-IERC20(Farm).approve(unirouter,0) (StrategyDAIUNIFarm.sol#217)\n\t-IERC20(Farm).approve(unirouter,uint256(- 1)) (StrategyDAIUNIFarm.sol#218)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 335,
          "vulnerability_to_line": 363,
          "vulnerability_code": "    function _redelivery() internal\n\n    {\n\n        uint256 _weth = IERC20(weth).balanceOf(address(this));\n\n        if (_weth > 0) {\n\n            _swapUniswap(weth, token, _weth.div(2));\n\n        }\n\n\n\n        // Adds in liquidity for ETH/DAI\n\n        _weth = IERC20(weth).balanceOf(address(this));\n\n        uint256 _token = IERC20(token).balanceOf(address(this));\n\n        if (_weth > 0 && _token > 0) {\n\n            IERC20(weth).safeApprove(unirouter, 0);\n\n            IERC20(weth).safeApprove(unirouter, _weth);\n\n\n\n            IERC20(token).safeApprove(unirouter, 0);\n\n            IERC20(token).safeApprove(unirouter, _token);\n\n\n\n            UniswapRouter(unirouter).addLiquidity(\n\n                weth,\n\n                token,\n\n                _weth,\n\n                _token,\n\n                0,\n\n                0,\n\n                address(this),\n\n                now + 180\n\n            );\n\n        }\n",
          "message": "StrategyDAIUNIFarm._redelivery (StrategyDAIUNIFarm.sol#335-363) does not use the value returned by external calls:\n\t-UniswapRouter(unirouter).addLiquidity(weth,token,_weth,_token,0,0,address(this),now + 180) (StrategyDAIUNIFarm.sol#352-361)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 365,
          "vulnerability_to_line": 396,
          "vulnerability_code": "     function _swapUniswap(\n\n        address _from,\n\n        address _to,\n\n        uint256 _amount\n\n    ) internal {\n\n        require(_to != address(0));\n\n\n\n        // Swap with uniswap\n\n        IERC20(_from).safeApprove(unirouter, 0);\n\n        IERC20(_from).safeApprove(unirouter, _amount);\n\n\n\n        address[] memory path;\n\n\n\n        if (_from == weth || _to == weth) {\n\n            path = new address[](2);\n\n            path[0] = _from;\n\n            path[1] = _to;\n\n        } else {\n\n            path = new address[](3);\n\n            path[0] = _from;\n\n            path[1] = weth;\n\n            path[2] = _to;\n\n        }\n\n\n\n        UniswapRouter(unirouter).swapExactTokensForTokens(\n\n            _amount,\n\n            0,\n\n            path,\n\n            address(this),\n\n            now.add(1800)\n\n        );\n",
          "message": "StrategyDAIUNIFarm._swapUniswap (StrategyDAIUNIFarm.sol#365-396) does not use the value returned by external calls:\n\t-UniswapRouter(unirouter).swapExactTokensForTokens(_amount,0,path,address(this),now.add(1800)) (StrategyDAIUNIFarm.sol#389-395)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": 76,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
          "message": "Address.isContract uses assembly (StrategyDAIUNIFarm.sol#70-76)\n\t- StrategyDAIUNIFarm.sol#74\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 307,
          "vulnerability_to_line": 309,
          "vulnerability_code": "    function getPending() public view returns (uint256) {\n\n        return pERC20(pool).earned(address(this));\n",
          "message": "StrategyDAIUNIFarm.getPending (StrategyDAIUNIFarm.sol#307-309) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 311,
          "vulnerability_to_line": 314,
          "vulnerability_code": "\tfunction getFarm() public view returns(uint256)\n\n\t{\n\n\t\treturn IERC20(Farm).balanceOf(address(this));\n",
          "message": "StrategyDAIUNIFarm.getFarm (StrategyDAIUNIFarm.sol#311-314) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 316,
          "vulnerability_to_line": 320,
          "vulnerability_code": "    function harvest() public \n\n    {\n\n        pERC20(pool).getReward();\n\n        redelivery();    \n",
          "message": "StrategyDAIUNIFarm.harvest (StrategyDAIUNIFarm.sol#316-320) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 398,
          "vulnerability_to_line": 402,
          "vulnerability_code": "    function setredeliverynum(uint256 value) public\n\n    {\n\n        require(msg.sender == governance, \"!governance\");\n\n        redeliverynum = value;\n",
          "message": "StrategyDAIUNIFarm.setredeliverynum (StrategyDAIUNIFarm.sol#398-402) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 404,
          "vulnerability_to_line": 407,
          "vulnerability_code": "    function setGovernance(address _governance) public {\n\n        require(msg.sender == governance, \"!governance\");\n\n        governance = _governance;\n",
          "message": "StrategyDAIUNIFarm.setGovernance (StrategyDAIUNIFarm.sol#404-407) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.15;\n",
          "message": "Detected issues with version pragma in StrategyDAIUNIFarm.sol:\n\t- pragma solidity^0.5.15 (StrategyDAIUNIFarm.sol#9): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": 86,
          "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n\n\n        // solhint-disable-next-line avoid-call-value\n\n        (bool success, ) = recipient.call.value(amount)(\"\");\n\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
          "message": "Low level call in Address.sendValue (StrategyDAIUNIFarm.sol#80-86):\n\t-(success) = recipient.call.value(amount)() StrategyDAIUNIFarm.sol#84\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": 118,
          "vulnerability_code": "    function callOptionalReturn(IERC20 token, bytes memory data) private {\n\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n\n\n        // solhint-disable-next-line avoid-low-level-calls\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n\n        require(success, \"SafeERC20: low-level call failed\");\n\n\n\n        if (returndata.length > 0) { // Return data is optional\n\n            // solhint-disable-next-line max-line-length\n\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n\n        }\n",
          "message": "Low level call in SafeERC20.callOptionalReturn (StrategyDAIUNIFarm.sol#107-118):\n\t-(success,returndata) = address(token).call(data) StrategyDAIUNIFarm.sol#111\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 122,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function vaults(address) external view returns (address);\n",
          "message": "Parameter '' of Controller.vaults (StrategyDAIUNIFarm.sol#122) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deposit(uint256) external;\n",
          "message": "Parameter '' of CurveDeposit.deposit (StrategyDAIUNIFarm.sol#141) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(uint256) external;\n",
          "message": "Parameter '' of CurveDeposit.withdraw (StrategyDAIUNIFarm.sol#142) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address) external view returns (uint256);\n",
          "message": "Parameter '' of CurveDeposit.balanceOf (StrategyDAIUNIFarm.sol#143) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 144,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function claimable_tokens(address) external view returns (uint256);\n",
          "message": "Function 'CurveDeposit.claimable_tokens' (StrategyDAIUNIFarm.sol#144) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 144,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function claimable_tokens(address) external view returns (uint256);\n",
          "message": "Parameter '' of CurveDeposit.claimable_tokens (StrategyDAIUNIFarm.sol#144) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 147,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mint(address) external;\n",
          "message": "Parameter '' of CurveMinter.mint (StrategyDAIUNIFarm.sol#147) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": 155,
          "vulnerability_code": "interface yERC20 {\n\n  function deposit(uint256 _amount) external;\n\n  function depositAll(uint256[] calldata,address[] calldata)external;\n\n  function withdraw(uint256 _amount) external;\n\n  function getPricePerFullShare() external view returns (uint);\n",
          "message": "Contract 'yERC20' (StrategyDAIUNIFarm.sol#150-155) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 152,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function depositAll(uint256[] calldata,address[] calldata)external;\n",
          "message": "Parameter '' of yERC20.depositAll (StrategyDAIUNIFarm.sol#152) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 152,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function depositAll(uint256[] calldata,address[] calldata)external;\n",
          "message": "Parameter '_scope_0' of yERC20.depositAll (StrategyDAIUNIFarm.sol#152) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": 163,
          "vulnerability_code": "interface pERC20 {\n\n  function stake(uint256 ) external;\n\n  function withdraw(uint256 ) external;\n\n  function balanceOf(address) external view returns(uint);\n\n  function earned(address) external view returns (uint);\n\n  function getReward()external;\n",
          "message": "Contract 'pERC20' (StrategyDAIUNIFarm.sol#157-163) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function stake(uint256 ) external;\n",
          "message": "Parameter '' of pERC20.stake (StrategyDAIUNIFarm.sol#158) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 159,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function withdraw(uint256 ) external;\n",
          "message": "Parameter '' of pERC20.withdraw (StrategyDAIUNIFarm.sol#159) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address) external view returns(uint);\n",
          "message": "Parameter '' of pERC20.balanceOf (StrategyDAIUNIFarm.sol#160) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 161,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function earned(address) external view returns (uint);\n",
          "message": "Parameter '' of pERC20.earned (StrategyDAIUNIFarm.sol#161) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 246,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(uint _amount) external\n",
          "message": "Parameter '_amount' of StrategyDAIUNIFarm.withdraw (StrategyDAIUNIFarm.sol#246) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 259,
          "vulnerability_to_line": 267,
          "vulnerability_code": "    function _withdraw(uint _amount) internal returns(uint) {\t\t\t\n\n        require(msg.sender == controller, \"!controller\");\n\n\t\tuint amount = IERC20(want).balanceOf(address(this));\t\n\n\t\tif (amount < _amount) {\n\n\t\t\t_withdrawSome(_amount.sub(amount));\n\n\t\t\tamount = IERC20(want).balanceOf(address(this));\n\n\t\t}\t\n\n\t\treturn amount; \n",
          "message": "Function 'StrategyDAIUNIFarm._withdraw' (StrategyDAIUNIFarm.sol#259-267) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 259,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _withdraw(uint _amount) internal returns(uint) {\t\t\t\n",
          "message": "Parameter '_amount' of StrategyDAIUNIFarm._withdraw (StrategyDAIUNIFarm.sol#259) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 269,
          "vulnerability_to_line": 281,
          "vulnerability_code": "    function _withdrawSome(uint _amount) internal\n\n    {\n\n        uint256 _fweth = _amount.mul(1e18).div(yERC20(fUNI).getPricePerFullShare());\n\n\t\tuint _before = IERC20(fUNI).balanceOf(address(this));\n\n\t\tif (_before < _fweth) {\n\n\t\t\t_fweth = _fweth.sub(_before);   \n\n\t\t\trequire(_fweth <= IERC20(pool).balanceOf(address(this)),\"Insufficient Balance\");\n\n\t\t\tpERC20(pool).withdraw(_fweth);\n\n\t\t}\n\n\t\t\n\n\t\t_fweth = IERC20(fUNI).balanceOf(address(this));\n\n\t\tyERC20(fUNI).withdraw(_fweth);\n",
          "message": "Function 'StrategyDAIUNIFarm._withdrawSome' (StrategyDAIUNIFarm.sol#269-281) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 269,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _withdrawSome(uint _amount) internal\n",
          "message": "Parameter '_amount' of StrategyDAIUNIFarm._withdrawSome (StrategyDAIUNIFarm.sol#269) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 335,
          "vulnerability_to_line": 363,
          "vulnerability_code": "    function _redelivery() internal\n\n    {\n\n        uint256 _weth = IERC20(weth).balanceOf(address(this));\n\n        if (_weth > 0) {\n\n            _swapUniswap(weth, token, _weth.div(2));\n\n        }\n\n\n\n        // Adds in liquidity for ETH/DAI\n\n        _weth = IERC20(weth).balanceOf(address(this));\n\n        uint256 _token = IERC20(token).balanceOf(address(this));\n\n        if (_weth > 0 && _token > 0) {\n\n            IERC20(weth).safeApprove(unirouter, 0);\n\n            IERC20(weth).safeApprove(unirouter, _weth);\n\n\n\n            IERC20(token).safeApprove(unirouter, 0);\n\n            IERC20(token).safeApprove(unirouter, _token);\n\n\n\n            UniswapRouter(unirouter).addLiquidity(\n\n                weth,\n\n                token,\n\n                _weth,\n\n                _token,\n\n                0,\n\n                0,\n\n                address(this),\n\n                now + 180\n\n            );\n\n        }\n",
          "message": "Function 'StrategyDAIUNIFarm._redelivery' (StrategyDAIUNIFarm.sol#335-363) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 365,
          "vulnerability_to_line": 396,
          "vulnerability_code": "     function _swapUniswap(\n\n        address _from,\n\n        address _to,\n\n        uint256 _amount\n\n    ) internal {\n\n        require(_to != address(0));\n\n\n\n        // Swap with uniswap\n\n        IERC20(_from).safeApprove(unirouter, 0);\n\n        IERC20(_from).safeApprove(unirouter, _amount);\n\n\n\n        address[] memory path;\n\n\n\n        if (_from == weth || _to == weth) {\n\n            path = new address[](2);\n\n            path[0] = _from;\n\n            path[1] = _to;\n\n        } else {\n\n            path = new address[](3);\n\n            path[0] = _from;\n\n            path[1] = weth;\n\n            path[2] = _to;\n\n        }\n\n\n\n        UniswapRouter(unirouter).swapExactTokensForTokens(\n\n            _amount,\n\n            0,\n\n            path,\n\n            address(this),\n\n            now.add(1800)\n\n        );\n",
          "message": "Function 'StrategyDAIUNIFarm._swapUniswap' (StrategyDAIUNIFarm.sol#365-396) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 366,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _from,\n",
          "message": "Parameter '_from' of StrategyDAIUNIFarm._swapUniswap (StrategyDAIUNIFarm.sol#366) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 367,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _to,\n",
          "message": "Parameter '_to' of StrategyDAIUNIFarm._swapUniswap (StrategyDAIUNIFarm.sol#367) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 368,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _amount\n",
          "message": "Parameter '_amount' of StrategyDAIUNIFarm._swapUniswap (StrategyDAIUNIFarm.sol#368) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 404,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setGovernance(address _governance) public {\n",
          "message": "Parameter '_governance' of StrategyDAIUNIFarm.setGovernance (StrategyDAIUNIFarm.sol#404) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 409,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setController(address _controller) external {\n",
          "message": "Parameter '_controller' of StrategyDAIUNIFarm.setController (StrategyDAIUNIFarm.sol#409) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 192,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n",
          "message": "Constant 'StrategyDAIUNIFarm.unirouter' (StrategyDAIUNIFarm.sol#192) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 193,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n",
          "message": "Constant 'StrategyDAIUNIFarm.weth' (StrategyDAIUNIFarm.sol#193) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress constant public bt = address(0xbF08E77B5709196F4D15a7F30db5Be8F31143d9A);\n",
          "message": "Constant 'StrategyDAIUNIFarm.bt' (StrategyDAIUNIFarm.sol#194) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 196,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public want = address(0xA478c2975Ab1Ea89e8196811F51A7B7Ade33eB11);  //ETH/token\n",
          "message": "Constant 'StrategyDAIUNIFarm.want' (StrategyDAIUNIFarm.sol#196) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public token = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\t//DAI\n",
          "message": "Constant 'StrategyDAIUNIFarm.token' (StrategyDAIUNIFarm.sol#198) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 199,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public Harvest = address(0xF8ce90c2710713552fb564869694B2505Bfc0846);\n",
          "message": "Constant 'StrategyDAIUNIFarm.Harvest' (StrategyDAIUNIFarm.sol#199) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress constant public fUNI = address(0x307E2752e8b8a9C29005001Be66B1c012CA9CDB7);\n",
          "message": "Constant 'StrategyDAIUNIFarm.fUNI' (StrategyDAIUNIFarm.sol#200) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress constant public pool = address(0x7aeb36e22e60397098C2a5C51f0A5fB06e7b859c);\n",
          "message": "Constant 'StrategyDAIUNIFarm.pool' (StrategyDAIUNIFarm.sol#201) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 203,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public Farm = address(0xa0246c9032bC3A600820415aE600c6388619A14D);\n",
          "message": "Constant 'StrategyDAIUNIFarm.Farm' (StrategyDAIUNIFarm.sol#203) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 192,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 193,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress constant public bt = address(0xbF08E77B5709196F4D15a7F30db5Be8F31143d9A);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 196,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public want = address(0xA478c2975Ab1Ea89e8196811F51A7B7Ade33eB11);  //ETH/token\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public token = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\t//DAI\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 199,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public Harvest = address(0xF8ce90c2710713552fb564869694B2505Bfc0846);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress constant public fUNI = address(0x307E2752e8b8a9C29005001Be66B1c012CA9CDB7);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress constant public pool = address(0x7aeb36e22e60397098C2a5C51f0A5fB06e7b859c);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 203,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public Farm = address(0xa0246c9032bC3A600820415aE600c6388619A14D);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 212,
          "vulnerability_to_line": null,
          "vulnerability_code": "        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 398,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setredeliverynum(uint256 value) public\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 404,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setGovernance(address _governance) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 409,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setController(address _controller) external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.15;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 189,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) external returns (uint amountA, uint amountB, uint liquidity);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_TX_ORIGIN",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "        governance = tx.origin;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, bytes memory returndata) = address(token).call(data);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly { codehash := extcodehash(account) }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 166,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function swapExactTokensForTokens(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 169,
          "vulnerability_to_line": null,
          "vulnerability_code": "      address[] calldata path,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 170,
          "vulnerability_to_line": null,
          "vulnerability_code": "      address to,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 171,
          "vulnerability_to_line": null,
          "vulnerability_code": "      uint deadline\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) external returns (uint[] memory amounts);\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}