{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 226,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 227,
          "vulnerability_to_line": null,
          "vulnerability_code": "        governance = tx.origin;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 229,
          "vulnerability_to_line": null,
          "vulnerability_code": "        doApprove(); \n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 230,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"SafeERC20: low-level call failed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 270,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_vault != address(0), \"!vault\");                     \n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 276,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == controller, \"!controller\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 291,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t\trequire(_fweth <= IERC20(pool).balanceOf(address(this)),\"Insufficient Balance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 304,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_vault != address(0), \"!vault\");                      \n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 400,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 405,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 410,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "no-slippage-check",
          "vulnerability_from_line": 389,
          "vulnerability_to_line": null,
          "vulnerability_code": "        UniswapRouter(unirouter).swapExactTokensForTokens(\n",
          "message": "No slippage check in a Uniswap v2/v3 trade"
        },
        {
          "name": "no-slippage-check",
          "vulnerability_from_line": 390,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _amount,\n",
          "message": "No slippage check in a Uniswap v2/v3 trade"
        },
        {
          "name": "no-slippage-check",
          "vulnerability_from_line": 391,
          "vulnerability_to_line": null,
          "vulnerability_code": "            0,\n",
          "message": "No slippage check in a Uniswap v2/v3 trade"
        },
        {
          "name": "no-slippage-check",
          "vulnerability_from_line": 392,
          "vulnerability_to_line": null,
          "vulnerability_code": "            path,\n",
          "message": "No slippage check in a Uniswap v2/v3 trade"
        },
        {
          "name": "no-slippage-check",
          "vulnerability_from_line": 393,
          "vulnerability_to_line": null,
          "vulnerability_code": "            address(this),\n",
          "message": "No slippage check in a Uniswap v2/v3 trade"
        },
        {
          "name": "no-slippage-check",
          "vulnerability_from_line": 394,
          "vulnerability_to_line": null,
          "vulnerability_code": "            now.add(1800)\n",
          "message": "No slippage check in a Uniswap v2/v3 trade"
        },
        {
          "name": "no-slippage-check",
          "vulnerability_from_line": 395,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "No slippage check in a Uniswap v2/v3 trade"
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_52"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": 76,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
          "message": "Address.isContract (StrategyDAISLPFarm.sol#70-76) is declared view but contains assembly code\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": 235,
          "vulnerability_code": "\tfunction doApprove () public{\n\n        IERC20(Farm).approve(unirouter, 0);\n\n        IERC20(Farm).approve(unirouter, uint(-1));\n",
          "message": "StrategyDATSLPFarm.doApprove (StrategyDAISLPFarm.sol#232-235) does not use the value returned by external calls:\n\t-IERC20(Farm).approve(unirouter,0) (StrategyDAISLPFarm.sol#233)\n\t-IERC20(Farm).approve(unirouter,uint256(- 1)) (StrategyDAISLPFarm.sol#234)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 350,
          "vulnerability_to_line": 363,
          "vulnerability_code": "    function _redelivery() internal\n\n    {\n\n        uint256 _weth = IERC20(weth).balanceOf(address(this));\n\n        if (_weth > 0) {\n\n            ZAPPER(zapper).ZapIn(\n\n                weth,\n\n                pair,\n\n                _weth,\n\n                0,\n\n                swap,\n\n                swap,\n\n                new bytes(0));\n\n        }\n",
          "message": "StrategyDATSLPFarm._redelivery (StrategyDAISLPFarm.sol#350-363) does not use the value returned by external calls:\n\t-ZAPPER(zapper).ZapIn(weth,pair,_weth,0,swap,swap,new bytes(0)) (StrategyDAISLPFarm.sol#354-361)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 365,
          "vulnerability_to_line": 396,
          "vulnerability_code": "     function _swapUniswap(\n\n        address _from,\n\n        address _to,\n\n        uint256 _amount\n\n    ) internal {\n\n        require(_to != address(0));\n\n\n\n        // Swap with uniswap\n\n        IERC20(_from).safeApprove(unirouter, 0);\n\n        IERC20(_from).safeApprove(unirouter, _amount);\n\n\n\n        address[] memory path;\n\n\n\n        if (_from == weth || _to == weth) {\n\n            path = new address[](2);\n\n            path[0] = _from;\n\n            path[1] = _to;\n\n        } else {\n\n            path = new address[](3);\n\n            path[0] = _from;\n\n            path[1] = weth;\n\n            path[2] = _to;\n\n        }\n\n\n\n        UniswapRouter(unirouter).swapExactTokensForTokens(\n\n            _amount,\n\n            0,\n\n            path,\n\n            address(this),\n\n            now.add(1800)\n\n        );\n",
          "message": "StrategyDATSLPFarm._swapUniswap (StrategyDAISLPFarm.sol#365-396) does not use the value returned by external calls:\n\t-UniswapRouter(unirouter).swapExactTokensForTokens(_amount,0,path,address(this),now.add(1800)) (StrategyDAISLPFarm.sol#389-395)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": 76,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
          "message": "Address.isContract uses assembly (StrategyDAISLPFarm.sol#70-76)\n\t- StrategyDAISLPFarm.sol#74\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 322,
          "vulnerability_to_line": 324,
          "vulnerability_code": "    function getPending() public view returns (uint256) {\n\n        return pERC20(pool).earned(address(this));\n",
          "message": "StrategyDATSLPFarm.getPending (StrategyDAISLPFarm.sol#322-324) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 326,
          "vulnerability_to_line": 329,
          "vulnerability_code": "\tfunction getFarm() public view returns(uint256)\n\n\t{\n\n\t\treturn IERC20(Farm).balanceOf(address(this));\n",
          "message": "StrategyDATSLPFarm.getFarm (StrategyDAISLPFarm.sol#326-329) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 331,
          "vulnerability_to_line": 335,
          "vulnerability_code": "    function harvest() public \n\n    {\n\n        pERC20(pool).getReward();\n\n        redelivery();    \n",
          "message": "StrategyDATSLPFarm.harvest (StrategyDAISLPFarm.sol#331-335) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 398,
          "vulnerability_to_line": 402,
          "vulnerability_code": "    function setredeliverynum(uint256 value) public\n\n    {\n\n        require(msg.sender == governance, \"!governance\");\n\n        redeliverynum = value;\n",
          "message": "StrategyDATSLPFarm.setredeliverynum (StrategyDAISLPFarm.sol#398-402) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 404,
          "vulnerability_to_line": 407,
          "vulnerability_code": "    function setGovernance(address _governance) public {\n\n        require(msg.sender == governance, \"!governance\");\n\n        governance = _governance;\n",
          "message": "StrategyDATSLPFarm.setGovernance (StrategyDAISLPFarm.sol#404-407) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.15;\n",
          "message": "Detected issues with version pragma in StrategyDAISLPFarm.sol:\n\t- pragma solidity^0.5.15 (StrategyDAISLPFarm.sol#9): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": 86,
          "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n\n\n        // solhint-disable-next-line avoid-call-value\n\n        (bool success, ) = recipient.call.value(amount)(\"\");\n\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
          "message": "Low level call in Address.sendValue (StrategyDAISLPFarm.sol#80-86):\n\t-(success) = recipient.call.value(amount)() StrategyDAISLPFarm.sol#84\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": 118,
          "vulnerability_code": "    function callOptionalReturn(IERC20 token, bytes memory data) private {\n\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n\n\n        // solhint-disable-next-line avoid-low-level-calls\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n\n        require(success, \"SafeERC20: low-level call failed\");\n\n\n\n        if (returndata.length > 0) { // Return data is optional\n\n            // solhint-disable-next-line max-line-length\n\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n\n        }\n",
          "message": "Low level call in SafeERC20.callOptionalReturn (StrategyDAISLPFarm.sol#107-118):\n\t-(success,returndata) = address(token).call(data) StrategyDAISLPFarm.sol#111\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 122,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function vaults(address) external view returns (address);\n",
          "message": "Parameter '' of Controller.vaults (StrategyDAISLPFarm.sol#122) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deposit(uint256) external;\n",
          "message": "Parameter '' of CurveDeposit.deposit (StrategyDAISLPFarm.sol#141) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(uint256) external;\n",
          "message": "Parameter '' of CurveDeposit.withdraw (StrategyDAISLPFarm.sol#142) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address) external view returns (uint256);\n",
          "message": "Parameter '' of CurveDeposit.balanceOf (StrategyDAISLPFarm.sol#143) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 144,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function claimable_tokens(address) external view returns (uint256);\n",
          "message": "Function 'CurveDeposit.claimable_tokens' (StrategyDAISLPFarm.sol#144) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 144,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function claimable_tokens(address) external view returns (uint256);\n",
          "message": "Parameter '' of CurveDeposit.claimable_tokens (StrategyDAISLPFarm.sol#144) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 147,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mint(address) external;\n",
          "message": "Parameter '' of CurveMinter.mint (StrategyDAISLPFarm.sol#147) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": 155,
          "vulnerability_code": "interface yERC20 {\n\n  function deposit(uint256 _amount) external;\n\n  function depositAll(uint256[] calldata,address[] calldata)external;\n\n  function withdraw(uint256 _amount) external;\n\n  function getPricePerFullShare() external view returns (uint);\n",
          "message": "Contract 'yERC20' (StrategyDAISLPFarm.sol#150-155) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 152,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function depositAll(uint256[] calldata,address[] calldata)external;\n",
          "message": "Parameter '' of yERC20.depositAll (StrategyDAISLPFarm.sol#152) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 152,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function depositAll(uint256[] calldata,address[] calldata)external;\n",
          "message": "Parameter '_scope_0' of yERC20.depositAll (StrategyDAISLPFarm.sol#152) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": 163,
          "vulnerability_code": "interface pERC20 {\n\n  function stake(uint256 ) external;\n\n  function withdraw(uint256 ) external;\n\n  function balanceOf(address) external view returns(uint);\n\n  function earned(address) external view returns (uint);\n\n  function getReward()external;\n",
          "message": "Contract 'pERC20' (StrategyDAISLPFarm.sol#157-163) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function stake(uint256 ) external;\n",
          "message": "Parameter '' of pERC20.stake (StrategyDAISLPFarm.sol#158) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 159,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function withdraw(uint256 ) external;\n",
          "message": "Parameter '' of pERC20.withdraw (StrategyDAISLPFarm.sol#159) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address) external view returns(uint);\n",
          "message": "Parameter '' of pERC20.balanceOf (StrategyDAISLPFarm.sol#160) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 161,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function earned(address) external view returns (uint);\n",
          "message": "Parameter '' of pERC20.earned (StrategyDAISLPFarm.sol#161) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 188,
          "vulnerability_to_line": 196,
          "vulnerability_code": "    function ZapIn(\n\n        address _FromTokenContractAddress,\n\n        address _pairAddress,\n\n        uint256 _amount,\n\n        uint256 _minPoolTokens,\n\n        address _allowanceTarget,\n\n        address _swapTarget,\n\n        bytes calldata swapData\n",
          "message": "Function 'ZAPPER.ZapIn' (StrategyDAISLPFarm.sol#188-196) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 262,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(uint _amount) external\n",
          "message": "Parameter '_amount' of StrategyDATSLPFarm.withdraw (StrategyDAISLPFarm.sol#262) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 275,
          "vulnerability_to_line": 283,
          "vulnerability_code": "    function _withdraw(uint _amount) internal returns(uint) {\t\t\t\n\n        require(msg.sender == controller, \"!controller\");\n\n\t\tuint amount = IERC20(want).balanceOf(address(this));\t\n\n\t\tif (amount < _amount) {\n\n\t\t\t_withdrawSome(_amount.sub(amount));\n\n\t\t\tamount = IERC20(want).balanceOf(address(this));\n\n\t\t}\t\n\n\t\treturn amount; \n",
          "message": "Function 'StrategyDATSLPFarm._withdraw' (StrategyDAISLPFarm.sol#275-283) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 275,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _withdraw(uint _amount) internal returns(uint) {\t\t\t\n",
          "message": "Parameter '_amount' of StrategyDATSLPFarm._withdraw (StrategyDAISLPFarm.sol#275) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 285,
          "vulnerability_to_line": 297,
          "vulnerability_code": "    function _withdrawSome(uint _amount) internal\n\n    {\n\n        uint256 _fweth = _amount.mul(1e18).div(yERC20(fUNI).getPricePerFullShare());\n\n\t\tuint _before = IERC20(fUNI).balanceOf(address(this));\n\n\t\tif (_before < _fweth) {\n\n\t\t\t_fweth = _fweth.sub(_before);   \n\n\t\t\trequire(_fweth <= IERC20(pool).balanceOf(address(this)),\"Insufficient Balance\");\n\n\t\t\tpERC20(pool).withdraw(_fweth);\n\n\t\t}\n\n\t\t\n\n\t\t_fweth = IERC20(fUNI).balanceOf(address(this));\n\n\t\tyERC20(fUNI).withdraw(_fweth);\n",
          "message": "Function 'StrategyDATSLPFarm._withdrawSome' (StrategyDAISLPFarm.sol#285-297) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 285,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _withdrawSome(uint _amount) internal\n",
          "message": "Parameter '_amount' of StrategyDATSLPFarm._withdrawSome (StrategyDAISLPFarm.sol#285) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 350,
          "vulnerability_to_line": 363,
          "vulnerability_code": "    function _redelivery() internal\n\n    {\n\n        uint256 _weth = IERC20(weth).balanceOf(address(this));\n\n        if (_weth > 0) {\n\n            ZAPPER(zapper).ZapIn(\n\n                weth,\n\n                pair,\n\n                _weth,\n\n                0,\n\n                swap,\n\n                swap,\n\n                new bytes(0));\n\n        }\n",
          "message": "Function 'StrategyDATSLPFarm._redelivery' (StrategyDAISLPFarm.sol#350-363) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 365,
          "vulnerability_to_line": 396,
          "vulnerability_code": "     function _swapUniswap(\n\n        address _from,\n\n        address _to,\n\n        uint256 _amount\n\n    ) internal {\n\n        require(_to != address(0));\n\n\n\n        // Swap with uniswap\n\n        IERC20(_from).safeApprove(unirouter, 0);\n\n        IERC20(_from).safeApprove(unirouter, _amount);\n\n\n\n        address[] memory path;\n\n\n\n        if (_from == weth || _to == weth) {\n\n            path = new address[](2);\n\n            path[0] = _from;\n\n            path[1] = _to;\n\n        } else {\n\n            path = new address[](3);\n\n            path[0] = _from;\n\n            path[1] = weth;\n\n            path[2] = _to;\n\n        }\n\n\n\n        UniswapRouter(unirouter).swapExactTokensForTokens(\n\n            _amount,\n\n            0,\n\n            path,\n\n            address(this),\n\n            now.add(1800)\n\n        );\n",
          "message": "Function 'StrategyDATSLPFarm._swapUniswap' (StrategyDAISLPFarm.sol#365-396) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 366,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _from,\n",
          "message": "Parameter '_from' of StrategyDATSLPFarm._swapUniswap (StrategyDAISLPFarm.sol#366) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 367,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _to,\n",
          "message": "Parameter '_to' of StrategyDATSLPFarm._swapUniswap (StrategyDAISLPFarm.sol#367) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 368,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _amount\n",
          "message": "Parameter '_amount' of StrategyDATSLPFarm._swapUniswap (StrategyDAISLPFarm.sol#368) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 404,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setGovernance(address _governance) public {\n",
          "message": "Parameter '_governance' of StrategyDATSLPFarm.setGovernance (StrategyDAISLPFarm.sol#404) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 409,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setController(address _controller) external {\n",
          "message": "Parameter '_controller' of StrategyDATSLPFarm.setController (StrategyDAISLPFarm.sol#409) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n",
          "message": "Constant 'StrategyDATSLPFarm.unirouter' (StrategyDAISLPFarm.sol#205) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 206,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n",
          "message": "Constant 'StrategyDATSLPFarm.weth' (StrategyDAISLPFarm.sol#206) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 207,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress constant public bt = address(0xbF08E77B5709196F4D15a7F30db5Be8F31143d9A);\n",
          "message": "Constant 'StrategyDATSLPFarm.bt' (StrategyDAISLPFarm.sol#207) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 209,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public want = address(0xC3D03e4F041Fd4cD388c549Ee2A29a9E5075882f);  //ETH/DAI SLP\n",
          "message": "Constant 'StrategyDATSLPFarm.want' (StrategyDAISLPFarm.sol#209) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public Harvest = address(0xF8ce90c2710713552fb564869694B2505Bfc0846);\n",
          "message": "Constant 'StrategyDATSLPFarm.Harvest' (StrategyDAISLPFarm.sol#211) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 212,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress constant public fUNI = address(0x203E97aa6eB65A1A02d9E80083414058303f241E);\n",
          "message": "Constant 'StrategyDATSLPFarm.fUNI' (StrategyDAISLPFarm.sol#212) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 213,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress constant public pool = address(0x76Aef359a33C02338902aCA543f37de4b01BA1FA);\n",
          "message": "Constant 'StrategyDATSLPFarm.pool' (StrategyDAISLPFarm.sol#213) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public Farm = address(0xa0246c9032bC3A600820415aE600c6388619A14D);\n",
          "message": "Constant 'StrategyDATSLPFarm.Farm' (StrategyDAISLPFarm.sol#215) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public zapper = address(0xfF350eDc2242Ca4d7252A64746aec4A5487a852B);\n",
          "message": "Constant 'StrategyDATSLPFarm.zapper' (StrategyDAISLPFarm.sol#217) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 218,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public pair = address(0xC3D03e4F041Fd4cD388c549Ee2A29a9E5075882f);\n",
          "message": "Constant 'StrategyDATSLPFarm.pair' (StrategyDAISLPFarm.sol#218) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 219,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public swap = address(0xDef1C0ded9bec7F1a1670819833240f027b25EfF);\n",
          "message": "Constant 'StrategyDATSLPFarm.swap' (StrategyDAISLPFarm.sol#219) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 206,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 207,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress constant public bt = address(0xbF08E77B5709196F4D15a7F30db5Be8F31143d9A);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 209,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public want = address(0xC3D03e4F041Fd4cD388c549Ee2A29a9E5075882f);  //ETH/DAI SLP\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public Harvest = address(0xF8ce90c2710713552fb564869694B2505Bfc0846);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 212,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress constant public fUNI = address(0x203E97aa6eB65A1A02d9E80083414058303f241E);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 213,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress constant public pool = address(0x76Aef359a33C02338902aCA543f37de4b01BA1FA);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public Farm = address(0xa0246c9032bC3A600820415aE600c6388619A14D);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public zapper = address(0xfF350eDc2242Ca4d7252A64746aec4A5487a852B);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 218,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public pair = address(0xC3D03e4F041Fd4cD388c549Ee2A29a9E5075882f);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 219,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant public swap = address(0xDef1C0ded9bec7F1a1670819833240f027b25EfF);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 398,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setredeliverynum(uint256 value) public\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 404,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setGovernance(address _governance) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 409,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setController(address _controller) external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.15;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 202,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) external returns (uint amountA, uint amountB, uint liquidity);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_TX_ORIGIN",
          "vulnerability_from_line": 227,
          "vulnerability_to_line": null,
          "vulnerability_code": "        governance = tx.origin;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, bytes memory returndata) = address(token).call(data);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly { codehash := extcodehash(account) }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 166,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function swapExactTokensForTokens(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 169,
          "vulnerability_to_line": null,
          "vulnerability_code": "      address[] calldata path,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 170,
          "vulnerability_to_line": null,
          "vulnerability_code": "      address to,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 171,
          "vulnerability_to_line": null,
          "vulnerability_code": "      uint deadline\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) external returns (uint[] memory amounts);\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}