{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 92,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": null,
          "vulnerability_code": "        governance = tx.origin;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 174,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\ttimelock = tx.origin;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 175,
          "vulnerability_to_line": null,
          "vulnerability_code": "        rewards = tx.origin; \n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 176,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 79,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 100,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 106,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"SafeERC20: low-level call failed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 179,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == timelock, \"!timelock\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 185,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == timelock, \"!timelock\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 195,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == timelock, \"!timelock\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 214,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 238,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 244,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == vaults[_token], \"!vault\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 100,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_38"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": 74,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
          "message": "Address.isContract (Controller.sol#68-74) is declared view but contains assembly code\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 204,
          "vulnerability_to_line": 211,
          "vulnerability_code": "    function setStrategy(address _token, address _strategy) public {\n\n        require(msg.sender == timelock, \"!timelock\");\n\n        address _current = strategies[_token];\n\n        if (_current != address(0)) {\n\n           Strategy(_current).withdrawAll();\n\n        }\n\n        strategies[_token] = _strategy;\n",
          "message": "Reentrancy in Controller.setStrategy (Controller.sol#204-211):\n\tExternal calls:\n\t- Strategy(_current).withdrawAll() (Controller.sol#208)\n\tState variables written after the call(s):\n\t- strategies (Controller.sol#210)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 204,
          "vulnerability_to_line": 211,
          "vulnerability_code": "    function setStrategy(address _token, address _strategy) public {\n\n        require(msg.sender == timelock, \"!timelock\");\n\n        address _current = strategies[_token];\n\n        if (_current != address(0)) {\n\n           Strategy(_current).withdrawAll();\n\n        }\n\n        strategies[_token] = _strategy;\n",
          "message": "Controller.setStrategy (Controller.sol#204-211) does not use the value returned by external calls:\n\t-Strategy(_current).withdrawAll() (Controller.sol#208)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 237,
          "vulnerability_to_line": 240,
          "vulnerability_code": "    function withdrawAll(address _token) public {\n\n        require(msg.sender == governance, \"!governance\");\n\n        Strategy(strategies[_token]).withdrawAll();\n",
          "message": "Controller.withdrawAll (Controller.sol#237-240) does not use the value returned by external calls:\n\t-Strategy(strategies[_token]).withdrawAll() (Controller.sol#239)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": 74,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
          "message": "Address.isContract uses assembly (Controller.sol#68-74)\n\t- Controller.sol#72\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 178,
          "vulnerability_to_line": 181,
          "vulnerability_code": "\tfunction setRewardsAddress(address _rewards) public {\n\n        require(msg.sender == timelock, \"!timelock\");\n\n        rewards = _rewards;\n",
          "message": "Controller.setRewardsAddress (Controller.sol#178-181) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": 187,
          "vulnerability_code": "\tfunction setTimeLock(address _timelock) public \n\n    {\n\n        require(msg.sender == timelock, \"!timelock\");\n\n        timelock = _timelock;\n",
          "message": "Controller.setTimeLock (Controller.sol#183-187) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 189,
          "vulnerability_to_line": 192,
          "vulnerability_code": "    function setGovernance(address _governance) public {\n\n        require(msg.sender == governance, \"!governance\");\n\n        governance = _governance;\n",
          "message": "Controller.setGovernance (Controller.sol#189-192) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": 197,
          "vulnerability_code": "    function setVault(address _token, address _vault) public {\n\n        require(msg.sender == governance, \"!governance\");\n\n        vaults[_token] = _vault;\n",
          "message": "Controller.setVault (Controller.sol#194-197) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 199,
          "vulnerability_to_line": 202,
          "vulnerability_code": "    function setConverter(address _input, address _output, address _converter) public {\n\n        require(msg.sender == governance, \"!governance\");\n\n        converters[_input][_output] = _converter;\n",
          "message": "Controller.setConverter (Controller.sol#199-202) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 204,
          "vulnerability_to_line": 211,
          "vulnerability_code": "    function setStrategy(address _token, address _strategy) public {\n\n        require(msg.sender == timelock, \"!timelock\");\n\n        address _current = strategies[_token];\n\n        if (_current != address(0)) {\n\n           Strategy(_current).withdrawAll();\n\n        }\n\n        strategies[_token] = _strategy;\n",
          "message": "Controller.setStrategy (Controller.sol#204-211) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 213,
          "vulnerability_to_line": 216,
          "vulnerability_code": "\tfunction delStrategy(address _token) public {\n\n        require(msg.sender == governance, \"!governance\");\n\n        strategies[_token] = address(0);\n",
          "message": "Controller.delStrategy (Controller.sol#213-216) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 219,
          "vulnerability_to_line": 231,
          "vulnerability_code": "    function earn(address _token, uint _amount) public {\n\n        address _strategy = strategies[_token];\n\n        address _want = Strategy(_strategy).want();\n\n        if (_want != _token) {\n\n            address converter = converters[_token][_want];\n\n            IERC20(_token).safeTransfer(converter, _amount);\n\n            _amount = Converter(converter).convert(_strategy);\n\n            IERC20(_want).safeTransfer(_strategy, _amount);\n\n        } else {\n\n            IERC20(_token).safeTransfer(_strategy, _amount);\n\n        }\n\n        Strategy(_strategy).deposit();\n",
          "message": "Controller.earn (Controller.sol#219-231) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 237,
          "vulnerability_to_line": 240,
          "vulnerability_code": "    function withdrawAll(address _token) public {\n\n        require(msg.sender == governance, \"!governance\");\n\n        Strategy(strategies[_token]).withdrawAll();\n",
          "message": "Controller.withdrawAll (Controller.sol#237-240) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 243,
          "vulnerability_to_line": 246,
          "vulnerability_code": "    function withdraw(address _token, uint _amount) public {\n\n        require(msg.sender == vaults[_token], \"!vault\");\n\n        Strategy(strategies[_token]).withdraw(_amount);\n",
          "message": "Controller.withdraw (Controller.sol#243-246) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.15;\n",
          "message": "Detected issues with version pragma in Controller.sol:\n\t- pragma solidity^0.5.15 (Controller.sol#9): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": 84,
          "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n\n\n        // solhint-disable-next-line avoid-call-value\n\n        (bool success, ) = recipient.call.value(amount)(\"\");\n\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
          "message": "Low level call in Address.sendValue (Controller.sol#78-84):\n\t-(success) = recipient.call.value(amount)() Controller.sol#82\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": 116,
          "vulnerability_code": "    function callOptionalReturn(IERC20 token, bytes memory data) private {\n\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n\n\n        // solhint-disable-next-line avoid-low-level-calls\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n\n        require(success, \"SafeERC20: low-level call failed\");\n\n\n\n        if (returndata.length > 0) { // Return data is optional\n\n            // solhint-disable-next-line max-line-length\n\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n\n        }\n",
          "message": "Low level call in SafeERC20.callOptionalReturn (Controller.sol#105-116):\n\t-(success,returndata) = address(token).call(data) Controller.sol#109\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 122,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(address) external;\n",
          "message": "Parameter '' of Strategy.withdraw (Controller.sol#122) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(uint) external;\n",
          "message": "Parameter '' of Strategy.withdraw (Controller.sol#123) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function convert(address) external returns (uint);\n",
          "message": "Parameter '' of Converter.convert (Controller.sol#129) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 178,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction setRewardsAddress(address _rewards) public {\n",
          "message": "Parameter '_rewards' of Controller.setRewardsAddress (Controller.sol#178) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction setTimeLock(address _timelock) public \n",
          "message": "Parameter '_timelock' of Controller.setTimeLock (Controller.sol#183) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 189,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setGovernance(address _governance) public {\n",
          "message": "Parameter '_governance' of Controller.setGovernance (Controller.sol#189) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setVault(address _token, address _vault) public {\n",
          "message": "Parameter '_token' of Controller.setVault (Controller.sol#194) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setVault(address _token, address _vault) public {\n",
          "message": "Parameter '_vault' of Controller.setVault (Controller.sol#194) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 199,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setConverter(address _input, address _output, address _converter) public {\n",
          "message": "Parameter '_input' of Controller.setConverter (Controller.sol#199) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 199,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setConverter(address _input, address _output, address _converter) public {\n",
          "message": "Parameter '_output' of Controller.setConverter (Controller.sol#199) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 199,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setConverter(address _input, address _output, address _converter) public {\n",
          "message": "Parameter '_converter' of Controller.setConverter (Controller.sol#199) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 204,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setStrategy(address _token, address _strategy) public {\n",
          "message": "Parameter '_token' of Controller.setStrategy (Controller.sol#204) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 204,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setStrategy(address _token, address _strategy) public {\n",
          "message": "Parameter '_strategy' of Controller.setStrategy (Controller.sol#204) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 213,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction delStrategy(address _token) public {\n",
          "message": "Parameter '_token' of Controller.delStrategy (Controller.sol#213) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 219,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function earn(address _token, uint _amount) public {\n",
          "message": "Parameter '_token' of Controller.earn (Controller.sol#219) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 219,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function earn(address _token, uint _amount) public {\n",
          "message": "Parameter '_amount' of Controller.earn (Controller.sol#219) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 233,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _token) external view returns (uint) {\n",
          "message": "Parameter '_token' of Controller.balanceOf (Controller.sol#233) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 237,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawAll(address _token) public {\n",
          "message": "Parameter '_token' of Controller.withdrawAll (Controller.sol#237) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 243,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(address _token, uint _amount) public {\n",
          "message": "Parameter '_token' of Controller.withdraw (Controller.sol#243) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 243,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(address _token, uint _amount) public {\n",
          "message": "Parameter '_amount' of Controller.withdraw (Controller.sol#243) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": null,
          "vulnerability_code": "        strategies[_token] = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 178,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction setRewardsAddress(address _rewards) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction setTimeLock(address _timelock) public \n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 189,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setGovernance(address _governance) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setVault(address _token, address _vault) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 199,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setConverter(address _input, address _output, address _converter) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 204,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setStrategy(address _token, address _strategy) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.15;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 163,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 154,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_TX_ORIGIN",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": null,
          "vulnerability_code": "        governance = tx.origin;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_TX_ORIGIN",
          "vulnerability_from_line": 174,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\ttimelock = tx.origin;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_TX_ORIGIN",
          "vulnerability_from_line": 175,
          "vulnerability_to_line": null,
          "vulnerability_code": "        rewards = tx.origin; \n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 92,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 109,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, bytes memory returndata) = address(token).call(data);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly { codehash := extcodehash(account) }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 133,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function swap(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 79,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 79,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 79,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 79,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256[] calldata distribution,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 139,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 flags\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns(uint256 returnAmount);\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 208,
          "vulnerability_to_line": null,
          "vulnerability_code": "           Strategy(_current).withdrawAll();\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 210,
          "vulnerability_to_line": null,
          "vulnerability_code": "        strategies[_token] = _strategy;\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 239,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Strategy(strategies[_token]).withdrawAll();\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}