{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _array.push(i);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "        revert(\"CallReceiverMock: reverting\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_10"
      ],
      "vulnerability_findings": [
        {
          "name": "locked-ether",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": 18,
          "vulnerability_code": "    function mockFunction() public payable returns (string memory) {\n\n        emit MockFunctionCalled();\n\n\n\n        return \"0x1234\";\n",
          "message": "Contract locking ether found in CallReceiverMock.sol:\n\tContract CallReceiverMock has payable functions:\n\t - mockFunction (CallReceiverMock.sol#14-18)\n\t - mockFunctionRevertsNoReason (CallReceiverMock.sol#30-32)\n\t - mockFunctionRevertsReason (CallReceiverMock.sol#34-36)\n\t - mockFunctionThrows (CallReceiverMock.sol#38-40)\n\t - mockFunctionOutOfGas (CallReceiverMock.sol#42-46)\n\tBut does not have a function to withdraw the ether\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": 18,
          "vulnerability_code": "    function mockFunction() public payable returns (string memory) {\n\n        emit MockFunctionCalled();\n\n\n\n        return \"0x1234\";\n",
          "message": "CallReceiverMock.mockFunction (CallReceiverMock.sol#14-18) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": 24,
          "vulnerability_code": "    function mockFunctionNonPayable() public returns (string memory) {\n\n        emit MockFunctionCalled();\n\n\n\n        return \"0x1234\";\n",
          "message": "CallReceiverMock.mockFunctionNonPayable (CallReceiverMock.sol#20-24) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": 28,
          "vulnerability_code": "    function mockStaticFunction() public pure returns (string memory) {\n\n        return \"0x1234\";\n",
          "message": "CallReceiverMock.mockStaticFunction (CallReceiverMock.sol#26-28) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": 32,
          "vulnerability_code": "    function mockFunctionRevertsNoReason() public payable {\n\n        revert();\n",
          "message": "CallReceiverMock.mockFunctionRevertsNoReason (CallReceiverMock.sol#30-32) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": 36,
          "vulnerability_code": "    function mockFunctionRevertsReason() public payable {\n\n        revert(\"CallReceiverMock: reverting\");\n",
          "message": "CallReceiverMock.mockFunctionRevertsReason (CallReceiverMock.sol#34-36) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": 40,
          "vulnerability_code": "    function mockFunctionThrows() public payable {\n\n        assert(false);\n",
          "message": "CallReceiverMock.mockFunctionThrows (CallReceiverMock.sol#38-40) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": 46,
          "vulnerability_code": "    function mockFunctionOutOfGas() public payable {\n\n        for (uint256 i = 0; ; ++i) {\n\n            _array.push(i);\n\n        }\n",
          "message": "CallReceiverMock.mockFunctionOutOfGas (CallReceiverMock.sol#42-46) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": 51,
          "vulnerability_code": "    function mockFunctionWritesStorage() public returns (string memory) {\n\n        sharedAnswer = \"42\";\n\n        return \"0x1234\";\n",
          "message": "CallReceiverMock.mockFunctionWritesStorage (CallReceiverMock.sol#48-51) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.6.0 <0.8.0;\n",
          "message": "Detected issues with version pragma in CallReceiverMock.sol:\n\t- pragma solidity>=0.6.0<0.8.0 (CallReceiverMock.sol#5): is has a complex pragma\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract CallReceiverMock {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.6.0 <0.8.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.6.0 <0.8.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256[] private _array;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "Solc experienced a fatal error"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}