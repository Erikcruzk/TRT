function beginMigration(address from, address to, uint256 amount, bytes memory userData, bytes memory operatorData) public {
    require(isOperatorFor(_msgSender(), from), "ERC777: caller is not an operator for holder");

    // Reentrancy vulnerability fix: perform state changes before calling external contract
    _balances[from] = _balances[from].sub(amount, "ERC777: transfer amount exceeds balance");
    _totalSupply = _totalSupply.sub(amount);

    address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(to, _TOKENS_RECIPIENT_INTERFACE_HASH);
    if (implementer != address(0)) {
        IERC777Recipient(implementer).tokensReceived(_msgSender(), from, to, amount, userData, operatorData);
    }

    emit Sent(_msgSender(), from, to, amount, userData, operatorData);
    emit Transfer(from, to, amount);
}