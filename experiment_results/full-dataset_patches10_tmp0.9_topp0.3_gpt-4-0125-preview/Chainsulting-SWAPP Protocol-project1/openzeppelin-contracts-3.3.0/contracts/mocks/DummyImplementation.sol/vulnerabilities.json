{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_18"
      ],
      "vulnerability_findings": [
        {
          "name": "locked-ether",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": 22,
          "vulnerability_code": "  function initializePayable() public payable {\n\n    value = 100;\n",
          "message": "Contract locking ether found in DummyImplementation.sol:\n\tContract DummyImplementationV2 has payable functions:\n\t - initializePayable (DummyImplementation.sol#20-22)\n\t - initializePayable (DummyImplementation.sol#28-30)\n\t - migrate (DummyImplementation.sol#52-54)\n\tBut does not have a function to withdraw the ether\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function version() public pure virtual returns (string memory); \n",
          "message": "Impl.version (DummyImplementation.sol#8) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 18,
          "vulnerability_code": "  function initializeNonPayable() public {\n\n    value = 10;\n",
          "message": "DummyImplementation.initializeNonPayable (DummyImplementation.sol#16-18) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": 22,
          "vulnerability_code": "  function initializePayable() public payable {\n\n    value = 100;\n",
          "message": "DummyImplementation.initializePayable (DummyImplementation.sol#20-22) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 26,
          "vulnerability_code": "  function initializeNonPayable(uint256 _value) public {\n\n    value = _value;\n",
          "message": "DummyImplementation.initializeNonPayable (DummyImplementation.sol#24-26) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": 30,
          "vulnerability_code": "  function initializePayable(uint256 _value) public payable {\n\n    value = _value;\n",
          "message": "DummyImplementation.initializePayable (DummyImplementation.sol#28-30) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": 36,
          "vulnerability_code": "  function initialize(uint256 _value, string memory _text, uint256[] memory _values) public {\n\n    value = _value;\n\n    text = _text;\n\n    values = _values;\n",
          "message": "DummyImplementation.initialize (DummyImplementation.sol#32-36) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": 40,
          "vulnerability_code": "  function get() public pure returns (bool) {\n\n    return true;\n",
          "message": "DummyImplementation.get (DummyImplementation.sol#38-40) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": 58,
          "vulnerability_code": "  function version() public pure override returns (string memory) {\n\n    return \"V2\";\n",
          "message": "DummyImplementationV2.version (DummyImplementation.sol#56-58) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": 44,
          "vulnerability_code": "  function version() public pure virtual returns (string memory) {\n\n    return \"V1\";\n",
          "message": "DummyImplementation.version (DummyImplementation.sol#42-44) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": 48,
          "vulnerability_code": "  function reverts() public pure {\n\n    require(false);\n",
          "message": "DummyImplementation.reverts (DummyImplementation.sol#46-48) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": 54,
          "vulnerability_code": "  function migrate(uint256 newVal) public payable {\n\n    value = newVal;\n",
          "message": "DummyImplementationV2.migrate (DummyImplementation.sol#52-54) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.6.0 <0.8.0;\n",
          "message": "Detected issues with version pragma in DummyImplementation.sol:\n\t- pragma solidity>=0.6.0<0.8.0 (DummyImplementation.sol#5): is has a complex pragma\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function initializeNonPayable(uint256 _value) public {\n",
          "message": "Parameter '_value' of DummyImplementation.initializeNonPayable (DummyImplementation.sol#24) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function initializePayable(uint256 _value) public payable {\n",
          "message": "Parameter '_value' of DummyImplementation.initializePayable (DummyImplementation.sol#28) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function initialize(uint256 _value, string memory _text, uint256[] memory _values) public {\n",
          "message": "Parameter '_value' of DummyImplementation.initialize (DummyImplementation.sol#32) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function initialize(uint256 _value, string memory _text, uint256[] memory _values) public {\n",
          "message": "Parameter '_text' of DummyImplementation.initialize (DummyImplementation.sol#32) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function initialize(uint256 _value, string memory _text, uint256[] memory _values) public {\n",
          "message": "Parameter '_values' of DummyImplementation.initialize (DummyImplementation.sol#32) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract DummyImplementation {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract DummyImplementationV2 is DummyImplementation {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.6.0 <0.8.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.6.0 <0.8.0;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "Solc experienced a fatal error"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}