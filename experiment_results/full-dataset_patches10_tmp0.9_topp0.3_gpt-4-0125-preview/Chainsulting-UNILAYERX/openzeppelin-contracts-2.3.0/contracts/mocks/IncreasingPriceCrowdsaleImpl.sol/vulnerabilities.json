{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 240,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 244,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 255,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 260,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 265,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "inefficient-state-variable-increment",
          "vulnerability_from_line": 330,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _guardCounter += 1;\n",
          "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 316,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor () internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 317,
          "vulnerability_to_line": null,
          "vulnerability_code": "        // The counter starts at one to prevent changing it from zero to a non-zero\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 318,
          "vulnerability_to_line": null,
          "vulnerability_code": "        // value, which is a more expensive operation.\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 319,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _guardCounter = 1;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 392,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (uint256 rate, address payable wallet, IERC20 token) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 393,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(rate > 0, \"Crowdsale: rate is 0\");\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 394,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(wallet != address(0), \"Crowdsale: wallet is the zero address\");\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 395,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(token) != address(0), \"Crowdsale: token is the zero address\");\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 396,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 397,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _rate = rate;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 398,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _wallet = wallet;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 399,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _token = token;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 400,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 571,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (uint256 openingTime, uint256 closingTime) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 572,
          "vulnerability_to_line": null,
          "vulnerability_code": "        // solhint-disable-next-line not-rely-on-time\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 573,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(openingTime >= block.timestamp, \"TimedCrowdsale: opening time is before current time\");\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 574,
          "vulnerability_to_line": null,
          "vulnerability_code": "        // solhint-disable-next-line max-line-length\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 575,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(closingTime > openingTime, \"TimedCrowdsale: opening time is not before closing time\");\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 576,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 577,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _openingTime = openingTime;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 578,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _closingTime = closingTime;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 579,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 657,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (uint256 initialRate, uint256 finalRate) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 658,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(finalRate > 0, \"IncreasingPriceCrowdsale: final rate is 0\");\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 659,
          "vulnerability_to_line": null,
          "vulnerability_code": "        // solhint-disable-next-line max-line-length\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 660,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(initialRate > finalRate, \"IncreasingPriceCrowdsale: initial rate is not greater than final rate\");\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 661,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _initialRate = initialRate;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 662,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _finalRate = finalRate;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 663,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 721,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 722,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 openingTime,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 723,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 closingTime,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 724,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address payable wallet,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 725,
          "vulnerability_to_line": null,
          "vulnerability_code": "        IERC20 token,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 726,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 initialRate,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 727,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 finalRate\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 728,
          "vulnerability_to_line": null,
          "vulnerability_code": "    )\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 729,
          "vulnerability_to_line": null,
          "vulnerability_code": "        public\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 730,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Crowdsale(initialRate, wallet, token)\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b <= a, \"SafeMath: subtraction overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b > 0, \"SafeMath: division by zero\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 106,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b != 0, \"SafeMath: modulo by zero\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 253,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 254,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 283,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 287,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"SafeERC20: low-level call failed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 291,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 333,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 393,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(rate > 0, \"Crowdsale: rate is 0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 394,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(wallet != address(0), \"Crowdsale: wallet is the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 395,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(token) != address(0), \"Crowdsale: token is the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 475,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(beneficiary != address(0), \"Crowdsale: beneficiary is the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 476,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(weiAmount != 0, \"Crowdsale: weiAmount is 0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 562,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isOpen(), \"TimedCrowdsale: not open\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 573,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(openingTime >= block.timestamp, \"TimedCrowdsale: opening time is before current time\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 575,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(closingTime > openingTime, \"TimedCrowdsale: opening time is not before closing time\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 626,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!hasClosed(), \"TimedCrowdsale: already closed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 628,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newClosingTime > _closingTime, \"TimedCrowdsale: new closing time is before current closing time\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 658,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(finalRate > 0, \"IncreasingPriceCrowdsale: final rate is 0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 660,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(initialRate > finalRate, \"IncreasingPriceCrowdsale: initial rate is not greater than final rate\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 670,
          "vulnerability_to_line": null,
          "vulnerability_code": "        revert(\"IncreasingPriceCrowdsale: rate() called\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 253,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 254,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 291,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 394,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(wallet != address(0), \"Crowdsale: wallet is the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 395,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(token) != address(0), \"Crowdsale: token is the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 475,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(beneficiary != address(0), \"Crowdsale: beneficiary is the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 573,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(openingTime >= block.timestamp, \"TimedCrowdsale: opening time is before current time\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 575,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(closingTime > openingTime, \"TimedCrowdsale: opening time is not before closing time\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 628,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newClosingTime > _closingTime, \"TimedCrowdsale: new closing time is before current closing time\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 658,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(finalRate > 0, \"IncreasingPriceCrowdsale: final rate is 0\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 660,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(initialRate > finalRate, \"IncreasingPriceCrowdsale: initial rate is not greater than final rate\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 670,
          "vulnerability_to_line": null,
          "vulnerability_code": "        revert(\"IncreasingPriceCrowdsale: rate() called\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_37"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 208,
          "vulnerability_to_line": 217,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        // This method relies in extcodesize, which returns 0 for contracts in\n\n        // construction, since the code is only stored at the end of the\n\n        // constructor execution.\n\n\n\n        uint256 size;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
          "message": "Address.isContract (IncreasingPriceCrowdsaleImpl.sol#208-217) is declared view but contains assembly code\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 392,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (uint256 rate, address payable wallet, IERC20 token) public {\n",
          "message": "Crowdsale.constructor.rate (local variable @ IncreasingPriceCrowdsaleImpl.sol#392) shadows:\n\t- Crowdsale.rate (function @ IncreasingPriceCrowdsaleImpl.sol#429-431)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 392,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (uint256 rate, address payable wallet, IERC20 token) public {\n",
          "message": "Crowdsale.constructor.wallet (local variable @ IncreasingPriceCrowdsaleImpl.sol#392) shadows:\n\t- Crowdsale.wallet (function @ IncreasingPriceCrowdsaleImpl.sol#422-424)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 392,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (uint256 rate, address payable wallet, IERC20 token) public {\n",
          "message": "Crowdsale.constructor.token (local variable @ IncreasingPriceCrowdsaleImpl.sol#392) shadows:\n\t- Crowdsale.token (function @ IncreasingPriceCrowdsaleImpl.sol#415-417)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 571,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (uint256 openingTime, uint256 closingTime) public {\n",
          "message": "TimedCrowdsale.constructor.openingTime (local variable @ IncreasingPriceCrowdsaleImpl.sol#571) shadows:\n\t- TimedCrowdsale.openingTime (function @ IncreasingPriceCrowdsaleImpl.sol#584-586)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 571,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (uint256 openingTime, uint256 closingTime) public {\n",
          "message": "TimedCrowdsale.constructor.closingTime (local variable @ IncreasingPriceCrowdsaleImpl.sol#571) shadows:\n\t- TimedCrowdsale.closingTime (function @ IncreasingPriceCrowdsaleImpl.sol#591-593)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 657,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (uint256 initialRate, uint256 finalRate) public {\n",
          "message": "IncreasingPriceCrowdsale.constructor.initialRate (local variable @ IncreasingPriceCrowdsaleImpl.sol#657) shadows:\n\t- IncreasingPriceCrowdsale.initialRate (function @ IncreasingPriceCrowdsaleImpl.sol#676-678)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 657,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (uint256 initialRate, uint256 finalRate) public {\n",
          "message": "IncreasingPriceCrowdsale.constructor.finalRate (local variable @ IncreasingPriceCrowdsaleImpl.sol#657) shadows:\n\t- IncreasingPriceCrowdsale.finalRate (function @ IncreasingPriceCrowdsaleImpl.sol#683-685)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 722,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 openingTime,\n",
          "message": "IncreasingPriceCrowdsaleImpl.constructor.openingTime (local variable @ IncreasingPriceCrowdsaleImpl.sol#722) shadows:\n\t- TimedCrowdsale.openingTime (function @ IncreasingPriceCrowdsaleImpl.sol#584-586)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 723,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 closingTime,\n",
          "message": "IncreasingPriceCrowdsaleImpl.constructor.closingTime (local variable @ IncreasingPriceCrowdsaleImpl.sol#723) shadows:\n\t- TimedCrowdsale.closingTime (function @ IncreasingPriceCrowdsaleImpl.sol#591-593)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 724,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address payable wallet,\n",
          "message": "IncreasingPriceCrowdsaleImpl.constructor.wallet (local variable @ IncreasingPriceCrowdsaleImpl.sol#724) shadows:\n\t- Crowdsale.wallet (function @ IncreasingPriceCrowdsaleImpl.sol#422-424)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 725,
          "vulnerability_to_line": null,
          "vulnerability_code": "        IERC20 token,\n",
          "message": "IncreasingPriceCrowdsaleImpl.constructor.token (local variable @ IncreasingPriceCrowdsaleImpl.sol#725) shadows:\n\t- Crowdsale.token (function @ IncreasingPriceCrowdsaleImpl.sol#415-417)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 726,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 initialRate,\n",
          "message": "IncreasingPriceCrowdsaleImpl.constructor.initialRate (local variable @ IncreasingPriceCrowdsaleImpl.sol#726) shadows:\n\t- IncreasingPriceCrowdsale.initialRate (function @ IncreasingPriceCrowdsaleImpl.sol#676-678)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 727,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 finalRate\n",
          "message": "IncreasingPriceCrowdsaleImpl.constructor.finalRate (local variable @ IncreasingPriceCrowdsaleImpl.sol#727) shadows:\n\t- IncreasingPriceCrowdsale.finalRate (function @ IncreasingPriceCrowdsaleImpl.sol#683-685)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 571,
          "vulnerability_to_line": 579,
          "vulnerability_code": "    constructor (uint256 openingTime, uint256 closingTime) public {\n\n        // solhint-disable-next-line not-rely-on-time\n\n        require(openingTime >= block.timestamp, \"TimedCrowdsale: opening time is before current time\");\n\n        // solhint-disable-next-line max-line-length\n\n        require(closingTime > openingTime, \"TimedCrowdsale: opening time is not before closing time\");\n\n\n\n        _openingTime = openingTime;\n\n        _closingTime = closingTime;\n",
          "message": "TimedCrowdsale.constructor (IncreasingPriceCrowdsaleImpl.sol#571-579) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(openingTime >= block.timestamp,TimedCrowdsale: opening time is before current time) (IncreasingPriceCrowdsaleImpl.sol#573)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 598,
          "vulnerability_to_line": 601,
          "vulnerability_code": "    function isOpen() public view returns (bool) {\n\n        // solhint-disable-next-line not-rely-on-time\n\n        return block.timestamp >= _openingTime && block.timestamp <= _closingTime;\n",
          "message": "TimedCrowdsale.isOpen (IncreasingPriceCrowdsaleImpl.sol#598-601) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp >= _openingTime && block.timestamp <= _closingTime (IncreasingPriceCrowdsaleImpl.sol#600)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 607,
          "vulnerability_to_line": 610,
          "vulnerability_code": "    function hasClosed() public view returns (bool) {\n\n        // solhint-disable-next-line not-rely-on-time\n\n        return block.timestamp > _closingTime;\n",
          "message": "TimedCrowdsale.hasClosed (IncreasingPriceCrowdsaleImpl.sol#607-610) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp > _closingTime (IncreasingPriceCrowdsaleImpl.sol#609)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 208,
          "vulnerability_to_line": 217,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        // This method relies in extcodesize, which returns 0 for contracts in\n\n        // construction, since the code is only stored at the end of the\n\n        // constructor execution.\n\n\n\n        uint256 size;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
          "message": "Address.isContract uses assembly (IncreasingPriceCrowdsaleImpl.sol#208-217)\n\t- IncreasingPriceCrowdsaleImpl.sol#215\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 415,
          "vulnerability_to_line": 417,
          "vulnerability_code": "    function token() public view returns (IERC20) {\n\n        return _token;\n",
          "message": "Crowdsale.token (IncreasingPriceCrowdsaleImpl.sol#415-417) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 422,
          "vulnerability_to_line": 424,
          "vulnerability_code": "    function wallet() public view returns (address payable) {\n\n        return _wallet;\n",
          "message": "Crowdsale.wallet (IncreasingPriceCrowdsaleImpl.sol#422-424) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 669,
          "vulnerability_to_line": 671,
          "vulnerability_code": "    function rate() public view returns (uint256) {\n\n        revert(\"IncreasingPriceCrowdsale: rate() called\");\n",
          "message": "IncreasingPriceCrowdsale.rate (IncreasingPriceCrowdsaleImpl.sol#669-671) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 429,
          "vulnerability_to_line": 431,
          "vulnerability_code": "    function rate() public view returns (uint256) {\n\n        return _rate;\n",
          "message": "Crowdsale.rate (IncreasingPriceCrowdsaleImpl.sol#429-431) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 436,
          "vulnerability_to_line": 438,
          "vulnerability_code": "    function weiRaised() public view returns (uint256) {\n\n        return _weiRaised;\n",
          "message": "Crowdsale.weiRaised (IncreasingPriceCrowdsaleImpl.sol#436-438) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 676,
          "vulnerability_to_line": 678,
          "vulnerability_code": "    function initialRate() public view returns (uint256) {\n\n        return _initialRate;\n",
          "message": "IncreasingPriceCrowdsale.initialRate (IncreasingPriceCrowdsaleImpl.sol#676-678) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 683,
          "vulnerability_to_line": 685,
          "vulnerability_code": "    function finalRate() public view returns (uint256) {\n\n        return _finalRate;\n",
          "message": "IncreasingPriceCrowdsale.finalRate (IncreasingPriceCrowdsaleImpl.sol#683-685) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": "Detected issues with version pragma in IncreasingPriceCrowdsaleImpl.sol:\n\t- pragma solidity^0.5.0 (IncreasingPriceCrowdsaleImpl.sol#3): it allows old versions\n\t- pragma solidity^0.5.0 (IncreasingPriceCrowdsaleImpl.sol#113): it allows old versions\n\t- pragma solidity^0.5.0 (IncreasingPriceCrowdsaleImpl.sol#192): it allows old versions\n\t- pragma solidity^0.5.0 (IncreasingPriceCrowdsaleImpl.sol#222): it allows old versions\n\t- pragma solidity^0.5.0 (IncreasingPriceCrowdsaleImpl.sol#298): it allows old versions\n\t- pragma solidity^0.5.0 (IncreasingPriceCrowdsaleImpl.sol#339): it allows old versions\n\t- pragma solidity^0.5.0 (IncreasingPriceCrowdsaleImpl.sol#538): it allows old versions\n\t- pragma solidity^0.5.0 (IncreasingPriceCrowdsaleImpl.sol#637): it allows old versions\n\t- pragma solidity^0.5.0 (IncreasingPriceCrowdsaleImpl.sol#717): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 274,
          "vulnerability_to_line": 293,
          "vulnerability_code": "    function callOptionalReturn(IERC20 token, bytes memory data) private {\n\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n\n        // we're implementing it ourselves.\n\n\n\n        // A Solidity high level call has three parts:\n\n        //  1. The target address is checked to verify it contains contract code\n\n        //  2. The call itself is made, and success asserted\n\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n\n        // solhint-disable-next-line max-line-length\n\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n\n\n        // solhint-disable-next-line avoid-low-level-calls\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n\n        require(success, \"SafeERC20: low-level call failed\");\n\n\n\n        if (returndata.length > 0) { // Return data is optional\n\n            // solhint-disable-next-line max-line-length\n\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n\n        }\n",
          "message": "Low level call in SafeERC20.callOptionalReturn (IncreasingPriceCrowdsaleImpl.sol#274-293):\n\t-(success,returndata) = address(token).call(data) IncreasingPriceCrowdsaleImpl.sol#286\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 474,
          "vulnerability_to_line": 477,
          "vulnerability_code": "    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\n\n        require(beneficiary != address(0), \"Crowdsale: beneficiary is the zero address\");\n\n        require(weiAmount != 0, \"Crowdsale: weiAmount is 0\");\n",
          "message": "Function 'Crowdsale._preValidatePurchase' (IncreasingPriceCrowdsaleImpl.sol#474-477) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 485,
          "vulnerability_to_line": 487,
          "vulnerability_code": "    function _postValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\n\n        // solhint-disable-previous-line no-empty-blocks\n",
          "message": "Function 'Crowdsale._postValidatePurchase' (IncreasingPriceCrowdsaleImpl.sol#485-487) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 495,
          "vulnerability_to_line": 497,
          "vulnerability_code": "    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\n\n        _token.safeTransfer(beneficiary, tokenAmount);\n",
          "message": "Function 'Crowdsale._deliverTokens' (IncreasingPriceCrowdsaleImpl.sol#495-497) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 505,
          "vulnerability_to_line": 507,
          "vulnerability_code": "    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\n\n        _deliverTokens(beneficiary, tokenAmount);\n",
          "message": "Function 'Crowdsale._processPurchase' (IncreasingPriceCrowdsaleImpl.sol#505-507) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 515,
          "vulnerability_to_line": 517,
          "vulnerability_code": "    function _updatePurchasingState(address beneficiary, uint256 weiAmount) internal {\n\n        // solhint-disable-previous-line no-empty-blocks\n",
          "message": "Function 'Crowdsale._updatePurchasingState' (IncreasingPriceCrowdsaleImpl.sol#515-517) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 524,
          "vulnerability_to_line": 526,
          "vulnerability_code": "    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\n\n        return weiAmount.mul(_rate);\n",
          "message": "Function 'Crowdsale._getTokenAmount' (IncreasingPriceCrowdsaleImpl.sol#524-526) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 531,
          "vulnerability_to_line": 533,
          "vulnerability_code": "    function _forwardFunds() internal {\n\n        _wallet.transfer(msg.value);\n",
          "message": "Function 'Crowdsale._forwardFunds' (IncreasingPriceCrowdsaleImpl.sol#531-533) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 617,
          "vulnerability_to_line": 619,
          "vulnerability_code": "    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal onlyWhileOpen view {\n\n        super._preValidatePurchase(beneficiary, weiAmount);\n",
          "message": "Function 'TimedCrowdsale._preValidatePurchase' (IncreasingPriceCrowdsaleImpl.sol#617-619) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 625,
          "vulnerability_to_line": 632,
          "vulnerability_code": "    function _extendTime(uint256 newClosingTime) internal {\n\n        require(!hasClosed(), \"TimedCrowdsale: already closed\");\n\n        // solhint-disable-next-line max-line-length\n\n        require(newClosingTime > _closingTime, \"TimedCrowdsale: new closing time is before current closing time\");\n\n\n\n        emit TimedCrowdsaleExtended(_closingTime, newClosingTime);\n\n        _closingTime = newClosingTime;\n",
          "message": "Function 'TimedCrowdsale._extendTime' (IncreasingPriceCrowdsaleImpl.sol#625-632) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 709,
          "vulnerability_to_line": 712,
          "vulnerability_code": "    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\n\n        uint256 currentRate = getCurrentRate();\n\n        return currentRate.mul(weiAmount);\n",
          "message": "Function 'IncreasingPriceCrowdsale._getTokenAmount' (IncreasingPriceCrowdsaleImpl.sol#709-712) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 669,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function rate() public view returns (uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 356,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Crowdsale is ReentrancyGuard {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 720,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract IncreasingPriceCrowdsaleImpl is IncreasingPriceCrowdsale {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 192,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 222,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 298,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 339,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 538,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 637,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 717,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 314,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _guardCounter;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 361,
          "vulnerability_to_line": null,
          "vulnerability_code": "    IERC20 private _token;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 364,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address payable private _wallet;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 370,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _rate;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 373,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _weiRaised;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 548,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _openingTime;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 549,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _closingTime;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 649,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _initialRate;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 650,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _finalRate;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 236,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 357,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 546,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 647,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 208,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 240,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 244,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 255,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 260,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 265,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 286,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, bytes memory returndata) = address(token).call(data);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 392,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (uint256 rate, address payable wallet, IERC20 token) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 721,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 392,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (uint256 rate, address payable wallet, IERC20 token) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 393,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(rate > 0, \"Crowdsale: rate is 0\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 394,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(wallet != address(0), \"Crowdsale: wallet is the zero address\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 394,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(wallet != address(0), \"Crowdsale: wallet is the zero address\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 394,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(wallet != address(0), \"Crowdsale: wallet is the zero address\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 395,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(token) != address(0), \"Crowdsale: token is the zero address\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 395,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(token) != address(0), \"Crowdsale: token is the zero address\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 395,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(token) != address(0), \"Crowdsale: token is the zero address\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 395,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(token) != address(0), \"Crowdsale: token is the zero address\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 395,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(token) != address(0), \"Crowdsale: token is the zero address\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 397,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _rate = rate;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 398,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _wallet = wallet;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 399,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _token = token;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 724,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address payable wallet,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 725,
          "vulnerability_to_line": null,
          "vulnerability_code": "        IERC20 token,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 726,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 initialRate,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 727,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 finalRate\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 730,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Crowdsale(initialRate, wallet, token)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 730,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Crowdsale(initialRate, wallet, token)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 731,
          "vulnerability_to_line": null,
          "vulnerability_code": "        TimedCrowdsale(openingTime, closingTime)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 731,
          "vulnerability_to_line": null,
          "vulnerability_code": "        TimedCrowdsale(openingTime, closingTime)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 732,
          "vulnerability_to_line": null,
          "vulnerability_code": "        IncreasingPriceCrowdsale(initialRate, finalRate)\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}