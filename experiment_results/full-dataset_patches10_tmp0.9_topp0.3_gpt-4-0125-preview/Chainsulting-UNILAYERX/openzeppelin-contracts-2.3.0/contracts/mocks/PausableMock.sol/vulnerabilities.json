{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor () internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _addPauser(msg.sender);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor () internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _paused = false;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 188,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor () public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 189,
          "vulnerability_to_line": null,
          "vulnerability_code": "        drasticMeasureTaken = false;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": null,
          "vulnerability_code": "        count = 0;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 191,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!has(role, account), \"Roles: account already has role\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(has(role, account), \"Roles: account does not have role\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(0), \"Roles: account is the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isPauser(msg.sender), \"PauserRole: caller does not have the Pauser role\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 130,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!_paused, \"Pausable: paused\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_paused, \"Pausable: not paused\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": null,
          "vulnerability_code": "        count++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(has(role, account), \"Roles: account does not have role\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(0), \"Roles: account is the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isPauser(msg.sender), \"PauserRole: caller does not have the Pauser role\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_11"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": 68,
          "vulnerability_code": "    function addPauser(address account) public onlyPauser {\n\n        _addPauser(account);\n",
          "message": "PauserRole.addPauser (PausableMock.sol#66-68) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": 72,
          "vulnerability_code": "    function renouncePauser() public {\n\n        _removePauser(msg.sender);\n",
          "message": "PauserRole.renouncePauser (PausableMock.sol#70-72) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 122,
          "vulnerability_to_line": 124,
          "vulnerability_code": "    function paused() public view returns (bool) {\n\n        return _paused;\n",
          "message": "Pausable.paused (PausableMock.sol#122-124) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 145,
          "vulnerability_to_line": 148,
          "vulnerability_code": "    function pause() public onlyPauser whenNotPaused {\n\n        _paused = true;\n\n        emit Paused(msg.sender);\n",
          "message": "Pausable.pause (PausableMock.sol#145-148) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 153,
          "vulnerability_to_line": 156,
          "vulnerability_code": "    function unpause() public onlyPauser whenPaused {\n\n        _paused = false;\n\n        emit Unpaused(msg.sender);\n",
          "message": "Pausable.unpause (PausableMock.sol#153-156) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 164,
          "vulnerability_to_line": 166,
          "vulnerability_code": "    function removePauser(address account) public {\n\n        _removePauser(account);\n",
          "message": "PauserRoleMock.removePauser (PausableMock.sol#164-166) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 168,
          "vulnerability_to_line": 170,
          "vulnerability_code": "    function onlyPauserMock() public view onlyPauser {\n\n        // solhint-disable-previous-line no-empty-blocks\n",
          "message": "PauserRoleMock.onlyPauserMock (PausableMock.sol#168-170) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": "Detected issues with version pragma in PausableMock.sol:\n\t- pragma solidity^0.5.0 (PausableMock.sol#4): it allows old versions\n\t- pragma solidity^0.5.0 (PausableMock.sol#43): it allows old versions\n\t- pragma solidity^0.5.0 (PausableMock.sol#87): it allows old versions\n\t- pragma solidity^0.5.0 (PausableMock.sol#161): it allows old versions\n\t- pragma solidity^0.5.0 (PausableMock.sol#180): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": 77,
          "vulnerability_code": "    function _addPauser(address account) internal {\n\n        _pausers.add(account);\n\n        emit PauserAdded(account);\n",
          "message": "Function 'PauserRole._addPauser' (PausableMock.sol#74-77) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 79,
          "vulnerability_to_line": 82,
          "vulnerability_code": "    function _removePauser(address account) internal {\n\n        _pausers.remove(account);\n\n        emit PauserRemoved(account);\n",
          "message": "Function 'PauserRole._removePauser' (PausableMock.sol#79-82) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": 175,
          "vulnerability_code": "    function _removePauser(address account) internal {\n\n        super._removePauser(account);\n",
          "message": "Function 'PauserRoleMock._removePauser' (PausableMock.sol#173-175) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 161,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 180,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Roles.Role private _pausers;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 109,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool private _paused;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}