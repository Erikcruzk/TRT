{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 259,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < data.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 274,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < data.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor () internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _addSigner(msg.sender);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor () internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": null,
          "vulnerability_code": "        // solhint-disable-previous-line no-empty-blocks\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 259,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < data.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 274,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < data.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!has(role, account), \"Roles: account already has role\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(has(role, account), \"Roles: account does not have role\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(0), \"Roles: account is the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isSigner(msg.sender), \"SignerRole: caller does not have the Signer role\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 223,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_isValidSignature(msg.sender, signature), \"SignatureBouncer: invalid signature for caller\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_isValidSignatureAndMethod(msg.sender, signature), \"SignatureBouncer: invalid signature for caller and method\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 241,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_isValidSignatureAndData(msg.sender, signature), \"SignatureBouncer: invalid signature for caller and data\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 271,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.data.length > _SIGNATURE_SIZE, \"SignatureBouncer: data is too short\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 147,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (v != 27 && v != 28) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 148,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return address(0);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 259,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < data.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 274,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < data.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(has(role, account), \"Roles: account does not have role\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(0), \"Roles: account is the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isSigner(msg.sender), \"SignerRole: caller does not have the Signer role\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 223,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_isValidSignature(msg.sender, signature), \"SignatureBouncer: invalid signature for caller\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_isValidSignatureAndMethod(msg.sender, signature), \"SignatureBouncer: invalid signature for caller and method\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 241,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_isValidSignatureAndData(msg.sender, signature), \"SignatureBouncer: invalid signature for caller and data\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 271,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.data.length > _SIGNATURE_SIZE, \"SignatureBouncer: data is too short\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_26"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": 155,
          "vulnerability_code": "    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n\n        // Check the signature length\n\n        if (signature.length != 65) {\n\n            return (address(0));\n\n        }\n\n\n\n        // Divide the signature in r, s and v variables\n\n        bytes32 r;\n\n        bytes32 s;\n\n        uint8 v;\n\n\n\n        // ecrecover takes the signature parameters, and the only way to get them\n\n        // currently is to use assembly.\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            r := mload(add(signature, 0x20))\n\n            s := mload(add(signature, 0x40))\n\n            v := byte(0, mload(add(signature, 0x60)))\n\n        }\n\n\n\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n\n        // the valid range for s in (281): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (282): v \u2208 {27, 28}. Most\n\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n\n        //\n\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n\n        // these malleable signatures as well.\n\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n\n            return address(0);\n\n        }\n\n\n\n        if (v != 27 && v != 28) {\n\n            return address(0);\n\n        }\n\n\n\n        // If the signature is valid (and not malleable), return the signer address\n\n        return ecrecover(hash, v, r, s);\n\n    }\n\n\n",
          "message": "ECDSA.recover (SignatureBouncerMock.sol#114-155) is declared view but contains assembly code\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": 155,
          "vulnerability_code": "    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n\n        // Check the signature length\n\n        if (signature.length != 65) {\n\n            return (address(0));\n\n        }\n\n\n\n        // Divide the signature in r, s and v variables\n\n        bytes32 r;\n\n        bytes32 s;\n\n        uint8 v;\n\n\n\n        // ecrecover takes the signature parameters, and the only way to get them\n\n        // currently is to use assembly.\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            r := mload(add(signature, 0x20))\n\n            s := mload(add(signature, 0x40))\n\n            v := byte(0, mload(add(signature, 0x60)))\n\n        }\n\n\n\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n\n        // the valid range for s in (281): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (282): v \u2208 {27, 28}. Most\n\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n\n        //\n\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n\n        // these malleable signatures as well.\n\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n\n            return address(0);\n\n        }\n\n\n\n        if (v != 27 && v != 28) {\n\n            return address(0);\n\n        }\n\n\n\n        // If the signature is valid (and not malleable), return the signer address\n\n        return ecrecover(hash, v, r, s);\n\n    }\n\n\n",
          "message": "ECDSA.recover uses assembly (SignatureBouncerMock.sol#114-155)\n\t- SignatureBouncerMock.sol#128-132\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": 68,
          "vulnerability_code": "    function addSigner(address account) public onlySigner {\n\n        _addSigner(account);\n",
          "message": "SignerRole.addSigner (SignatureBouncerMock.sol#66-68) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": 72,
          "vulnerability_code": "    function renounceSigner() public {\n\n        _removeSigner(msg.sender);\n",
          "message": "SignerRole.renounceSigner (SignatureBouncerMock.sol#70-72) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 298,
          "vulnerability_to_line": 302,
          "vulnerability_code": "    function removeSigner(address account) public {\n\n        _removeSigner(account);\n\n    }\n\n\n",
          "message": "SignerRoleMock.removeSigner (SignatureBouncerMock.sol#298-302) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 302,
          "vulnerability_to_line": 306,
          "vulnerability_code": "    function onlySignerMock() public view onlySigner {\n\n        // solhint-disable-previous-line no-empty-blocks\n\n    }\n\n\n",
          "message": "SignerRoleMock.onlySignerMock (SignatureBouncerMock.sol#302-306) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 318,
          "vulnerability_to_line": 324,
          "vulnerability_code": "    function checkValidSignature(address account, bytes memory signature)\n\n        public view returns (bool)\n\n    {\n\n        return _isValidSignature(account, signature);\n\n    }\n\n\n",
          "message": "SignatureBouncerMock.checkValidSignature (SignatureBouncerMock.sol#318-324) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 324,
          "vulnerability_to_line": 330,
          "vulnerability_code": "    function onlyWithValidSignature(bytes memory signature)\n\n        public onlyValidSignature(signature) view\n\n    {\n\n        // solhint-disable-previous-line no-empty-blocks\n\n    }\n\n\n",
          "message": "SignatureBouncerMock.onlyWithValidSignature (SignatureBouncerMock.sol#324-330) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 330,
          "vulnerability_to_line": 336,
          "vulnerability_code": "    function checkValidSignatureAndMethod(address account, bytes memory signature)\n\n        public view returns (bool)\n\n    {\n\n        return _isValidSignatureAndMethod(account, signature);\n\n    }\n\n\n",
          "message": "SignatureBouncerMock.checkValidSignatureAndMethod (SignatureBouncerMock.sol#330-336) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 336,
          "vulnerability_to_line": 342,
          "vulnerability_code": "    function onlyWithValidSignatureAndMethod(bytes memory signature)\n\n        public onlyValidSignatureAndMethod(signature) view\n\n    {\n\n        // solhint-disable-previous-line no-empty-blocks\n\n    }\n\n\n",
          "message": "SignatureBouncerMock.onlyWithValidSignatureAndMethod (SignatureBouncerMock.sol#336-342) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 342,
          "vulnerability_to_line": 348,
          "vulnerability_code": "    function checkValidSignatureAndData(address account, bytes memory, uint, bytes memory signature)\n\n        public view returns (bool)\n\n    {\n\n        return _isValidSignatureAndData(account, signature);\n\n    }\n\n\n",
          "message": "SignatureBouncerMock.checkValidSignatureAndData (SignatureBouncerMock.sol#342-348) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 348,
          "vulnerability_to_line": 354,
          "vulnerability_code": "    function onlyWithValidSignatureAndData(uint, bytes memory signature)\n\n        public onlyValidSignatureAndData(signature) view\n\n    {\n\n        // solhint-disable-previous-line no-empty-blocks\n\n    }\n\n\n",
          "message": "SignatureBouncerMock.onlyWithValidSignatureAndData (SignatureBouncerMock.sol#348-354) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 354,
          "vulnerability_to_line": 358,
          "vulnerability_code": "    function theWrongMethod(bytes memory) public pure {\n\n        // solhint-disable-previous-line no-empty-blocks\n\n    }\n\n\n",
          "message": "SignatureBouncerMock.theWrongMethod (SignatureBouncerMock.sol#354-358) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 358,
          "vulnerability_to_line": 361,
          "vulnerability_code": "    function tooShortMsgData() public onlyValidSignatureAndData(\"\") view {\n\n        // solhint-disable-previous-line no-empty-blocks\n\n    }\n",
          "message": "SignatureBouncerMock.tooShortMsgData (SignatureBouncerMock.sol#358-361) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": "Detected issues with version pragma in SignatureBouncerMock.sol:\n\t- pragma solidity^0.5.0 (SignatureBouncerMock.sol#4): it allows old versions\n\t- pragma solidity^0.5.0 (SignatureBouncerMock.sol#43): it allows old versions\n\t- pragma solidity^0.5.0 (SignatureBouncerMock.sol#87): it allows old versions\n\t- pragma solidity^0.5.0 (SignatureBouncerMock.sol#172-175): it allows old versions\n\t- pragma solidity^0.5.0 (SignatureBouncerMock.sol#295-297): it allows old versions\n\t- pragma solidity^0.5.0 (SignatureBouncerMock.sol#314-317): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": 77,
          "vulnerability_code": "    function _addSigner(address account) internal {\n\n        _signers.add(account);\n\n        emit SignerAdded(account);\n",
          "message": "Function 'SignerRole._addSigner' (SignatureBouncerMock.sol#74-77) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 79,
          "vulnerability_to_line": 82,
          "vulnerability_code": "    function _removeSigner(address account) internal {\n\n        _signers.remove(account);\n\n        emit SignerRemoved(account);\n",
          "message": "Function 'SignerRole._removeSigner' (SignatureBouncerMock.sol#79-82) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 249,
          "vulnerability_to_line": 253,
          "vulnerability_code": "    function _isValidSignature(address account, bytes memory signature) internal view returns (bool) {\n\n        return _isValidDataHash(keccak256(abi.encodePacked(address(this), account)), signature);\n\n    }\n\n\n",
          "message": "Function 'SignatureBouncer._isValidSignature' (SignatureBouncerMock.sol#249-253) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 257,
          "vulnerability_to_line": 265,
          "vulnerability_code": "    function _isValidSignatureAndMethod(address account, bytes memory signature) internal view returns (bool) {\n\n        bytes memory data = new bytes(_METHOD_ID_SIZE);\n\n        for (uint i = 0; i < data.length; i++) {\n\n            data[i] = msg.data[i];\n\n        }\n\n        return _isValidDataHash(keccak256(abi.encodePacked(address(this), account, data)), signature);\n\n    }\n\n\n",
          "message": "Function 'SignatureBouncer._isValidSignatureAndMethod' (SignatureBouncerMock.sol#257-265) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 270,
          "vulnerability_to_line": 281,
          "vulnerability_code": "    function _isValidSignatureAndData(address account, bytes memory signature) internal view returns (bool) {\n\n        require(msg.data.length > _SIGNATURE_SIZE, \"SignatureBouncer: data is too short\");\n\n\n\n        bytes memory data = new bytes(msg.data.length - _SIGNATURE_SIZE);\n\n        for (uint i = 0; i < data.length; i++) {\n\n            data[i] = msg.data[i];\n\n        }\n\n\n\n        return _isValidDataHash(keccak256(abi.encodePacked(address(this), account, data)), signature);\n\n    }\n\n\n",
          "message": "Function 'SignatureBouncer._isValidSignatureAndData' (SignatureBouncerMock.sol#270-281) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 286,
          "vulnerability_to_line": 292,
          "vulnerability_code": "    function _isValidDataHash(bytes32 hash, bytes memory signature) internal view returns (bool) {\n\n        address signer = hash.toEthSignedMessageHash().recover(signature);\n\n\n\n        return signer != address(0) && isSigner(signer);\n\n    }\n\n}\n",
          "message": "Function 'SignatureBouncer._isValidDataHash' (SignatureBouncerMock.sol#286-292) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 307,
          "vulnerability_to_line": 311,
          "vulnerability_code": "    function _removeSigner(address account) internal {\n\n        super._removeSigner(account);\n\n    }\n\n}\n",
          "message": "Function 'SignerRoleMock._removeSigner' (SignatureBouncerMock.sol#307-311) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 342,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function checkValidSignatureAndData(address account, bytes memory, uint, bytes memory signature)\n",
          "message": "Parameter '' of SignatureBouncerMock.checkValidSignatureAndData (SignatureBouncerMock.sol#342) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 342,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function checkValidSignatureAndData(address account, bytes memory, uint, bytes memory signature)\n",
          "message": "Parameter '_scope_0' of SignatureBouncerMock.checkValidSignatureAndData (SignatureBouncerMock.sol#342) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 348,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function onlyWithValidSignatureAndData(uint, bytes memory signature)\n",
          "message": "Parameter '' of SignatureBouncerMock.onlyWithValidSignatureAndData (SignatureBouncerMock.sol#348) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 354,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function theWrongMethod(bytes memory) public pure {\n",
          "message": "Parameter '' of SignatureBouncerMock.theWrongMethod (SignatureBouncerMock.sol#354) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return (address(0));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 144,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 148,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 259,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < data.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 274,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < data.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 259,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < data.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 274,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < data.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 314,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Roles.Role private _signers;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private constant _METHOD_ID_SIZE = 4;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 213,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private constant _SIGNATURE_SIZE = 96;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}