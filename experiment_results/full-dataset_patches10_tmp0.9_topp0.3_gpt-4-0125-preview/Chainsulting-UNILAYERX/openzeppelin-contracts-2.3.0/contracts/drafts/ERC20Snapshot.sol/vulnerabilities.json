{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b <= a, \"SafeMath: subtraction overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b > 0, \"SafeMath: division by zero\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 106,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b != 0, \"SafeMath: modulo by zero\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 458,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(sender != address(0), \"ERC20: transfer from the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 459,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 476,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(0), \"ERC20: mint to the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 495,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(0), \"ERC20: burn from the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 516,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(owner != address(0), \"ERC20: approve from the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 517,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(spender != address(0), \"ERC20: approve to the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 638,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(snapshotId > 0, \"ERC20Snapshot: id is 0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 640,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(snapshotId <= _currentSnapshotId.current(), \"ERC20Snapshot: nonexistent id\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 181,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (low > 0 && array[low - 1] == element) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 182,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return low - 1;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": null,
          "vulnerability_code": "        } else {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 184,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return low;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 185,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 458,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(sender != address(0), \"ERC20: transfer from the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 459,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 495,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(0), \"ERC20: burn from the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 516,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(owner != address(0), \"ERC20: approve from the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 517,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(spender != address(0), \"ERC20: approve to the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_28"
      ],
      "vulnerability_findings": [
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 567,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => Snapshots) private _accountBalanceSnapshots;\n",
          "message": "ERC20Snapshot._accountBalanceSnapshots (ERC20Snapshot.sol#567) is never initialized. It is used in:\n\t- balanceOfAt (ERC20Snapshot.sol#586-590)\n\t- _updateAccountSnapshot (ERC20Snapshot.sol#651-653)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 365,
          "vulnerability_to_line": 368,
          "vulnerability_code": "    function transfer(address recipient, uint256 amount) public returns (bool) {\n\n        _transfer(msg.sender, recipient, amount);\n\n        return true;\n",
          "message": "ERC20.transfer (ERC20Snapshot.sol#365-368) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 253,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address recipient, uint256 amount) external returns (bool);\n",
          "message": "IERC20.transfer (ERC20Snapshot.sol#253) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 262,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address owner, address spender) external view returns (uint256);\n",
          "message": "IERC20.allowance (ERC20Snapshot.sol#262) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 373,
          "vulnerability_to_line": 375,
          "vulnerability_code": "    function allowance(address owner, address spender) public view returns (uint256) {\n\n        return _allowances[owner][spender];\n",
          "message": "ERC20.allowance (ERC20Snapshot.sol#373-375) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 384,
          "vulnerability_to_line": 387,
          "vulnerability_code": "    function approve(address spender, uint256 value) public returns (bool) {\n\n        _approve(msg.sender, spender, value);\n\n        return true;\n",
          "message": "ERC20.approve (ERC20Snapshot.sol#384-387) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address spender, uint256 amount) external returns (bool);\n",
          "message": "IERC20.approve (ERC20Snapshot.sol#278) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 289,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n",
          "message": "IERC20.transferFrom (ERC20Snapshot.sol#289) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 401,
          "vulnerability_to_line": 405,
          "vulnerability_code": "    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n\n        _transfer(sender, recipient, amount);\n\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n\n        return true;\n",
          "message": "ERC20.transferFrom (ERC20Snapshot.sol#401-405) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 419,
          "vulnerability_to_line": 422,
          "vulnerability_code": "    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n\n        return true;\n",
          "message": "ERC20.increaseAllowance (ERC20Snapshot.sol#419-422) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 438,
          "vulnerability_to_line": 441,
          "vulnerability_code": "    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n\n        return true;\n",
          "message": "ERC20.decreaseAllowance (ERC20Snapshot.sol#438-441) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 578,
          "vulnerability_to_line": 584,
          "vulnerability_code": "    function snapshot() public returns (uint256) {\n\n        _currentSnapshotId.increment();\n\n\n\n        uint256 currentId = _currentSnapshotId.current();\n\n        emit Snapshot(currentId);\n\n        return currentId;\n",
          "message": "ERC20Snapshot.snapshot (ERC20Snapshot.sol#578-584) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 586,
          "vulnerability_to_line": 590,
          "vulnerability_code": "    function balanceOfAt(address account, uint256 snapshotId) public view returns (uint256) {\n\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _accountBalanceSnapshots[account]);\n\n\n\n        return snapshotted ? value : balanceOf(account);\n",
          "message": "ERC20Snapshot.balanceOfAt (ERC20Snapshot.sol#586-590) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 592,
          "vulnerability_to_line": 596,
          "vulnerability_code": "    function totalSupplyAt(uint256 snapshotId) public view returns(uint256) {\n\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _totalSupplySnapshots);\n\n\n\n        return snapshotted ? value : totalSupply();\n",
          "message": "ERC20Snapshot.totalSupplyAt (ERC20Snapshot.sol#592-596) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": "Detected issues with version pragma in ERC20Snapshot.sol:\n\t- pragma solidity^0.5.0 (ERC20Snapshot.sol#3): it allows old versions\n\t- pragma solidity^0.5.0 (ERC20Snapshot.sol#113): it allows old versions\n\t- pragma solidity^0.5.0 (ERC20Snapshot.sol#145): it allows old versions\n\t- pragma solidity^0.5.0 (ERC20Snapshot.sol#191): it allows old versions\n\t- pragma solidity^0.5.0 (ERC20Snapshot.sol#229): it allows old versions\n\t- pragma solidity^0.5.0 (ERC20Snapshot.sol#308): it allows old versions\n\t- pragma solidity^0.5.0 (ERC20Snapshot.sol#537): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 457,
          "vulnerability_to_line": 464,
          "vulnerability_code": "    function _transfer(address sender, address recipient, uint256 amount) internal {\n\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n\n\n        _balances[sender] = _balances[sender].sub(amount);\n\n        _balances[recipient] = _balances[recipient].add(amount);\n\n        emit Transfer(sender, recipient, amount);\n",
          "message": "Function 'ERC20._transfer' (ERC20Snapshot.sol#457-464) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 475,
          "vulnerability_to_line": 481,
          "vulnerability_code": "    function _mint(address account, uint256 amount) internal {\n\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n\n\n        _totalSupply = _totalSupply.add(amount);\n\n        _balances[account] = _balances[account].add(amount);\n\n        emit Transfer(address(0), account, amount);\n",
          "message": "Function 'ERC20._mint' (ERC20Snapshot.sol#475-481) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 494,
          "vulnerability_to_line": 500,
          "vulnerability_code": "    function _burn(address account, uint256 value) internal {\n\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n\n\n        _totalSupply = _totalSupply.sub(value);\n\n        _balances[account] = _balances[account].sub(value);\n\n        emit Transfer(account, address(0), value);\n",
          "message": "Function 'ERC20._burn' (ERC20Snapshot.sol#494-500) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 515,
          "vulnerability_to_line": 521,
          "vulnerability_code": "    function _approve(address owner, address spender, uint256 value) internal {\n\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n\n\n        _allowances[owner][spender] = value;\n\n        emit Approval(owner, spender, value);\n",
          "message": "Function 'ERC20._approve' (ERC20Snapshot.sol#515-521) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 529,
          "vulnerability_to_line": 532,
          "vulnerability_code": "    function _burnFrom(address account, uint256 amount) internal {\n\n        _burn(account, amount);\n\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n",
          "message": "Function 'ERC20._burnFrom' (ERC20Snapshot.sol#529-532) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 601,
          "vulnerability_to_line": 606,
          "vulnerability_code": "    function _transfer(address from, address to, uint256 value) internal {\n\n        _updateAccountSnapshot(from);\n\n        _updateAccountSnapshot(to);\n\n\n\n        super._transfer(from, to, value);\n",
          "message": "Function 'ERC20Snapshot._transfer' (ERC20Snapshot.sol#601-606) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 608,
          "vulnerability_to_line": 613,
          "vulnerability_code": "    function _mint(address account, uint256 value) internal {\n\n        _updateAccountSnapshot(account);\n\n        _updateTotalSupplySnapshot();\n\n\n\n        super._mint(account, value);\n",
          "message": "Function 'ERC20Snapshot._mint' (ERC20Snapshot.sol#608-613) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 615,
          "vulnerability_to_line": 620,
          "vulnerability_code": "    function _burn(address account, uint256 value) internal {\n\n        _updateAccountSnapshot(account);\n\n        _updateTotalSupplySnapshot();\n\n\n\n        super._burn(account, value);\n",
          "message": "Function 'ERC20Snapshot._burn' (ERC20Snapshot.sol#615-620) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 635,
          "vulnerability_to_line": 649,
          "vulnerability_code": "    function _valueAt(uint256 snapshotId, Snapshots storage snapshots)\n\n        private view returns (bool, uint256)\n\n    {\n\n        require(snapshotId > 0, \"ERC20Snapshot: id is 0\");\n\n        // solhint-disable-next-line max-line-length\n\n        require(snapshotId <= _currentSnapshotId.current(), \"ERC20Snapshot: nonexistent id\");\n\n\n\n        uint256 index = snapshots.ids.findUpperBound(snapshotId);\n\n\n\n        if (index == snapshots.ids.length) {\n\n            return (false, 0);\n\n        } else {\n\n            return (true, snapshots.values[index]);\n\n        }\n",
          "message": "Function 'ERC20Snapshot._valueAt' (ERC20Snapshot.sol#635-649) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 651,
          "vulnerability_to_line": 653,
          "vulnerability_code": "    function _updateAccountSnapshot(address account) private {\n\n        _updateSnapshot(_accountBalanceSnapshots[account], balanceOf(account));\n",
          "message": "Function 'ERC20Snapshot._updateAccountSnapshot' (ERC20Snapshot.sol#651-653) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 655,
          "vulnerability_to_line": 657,
          "vulnerability_code": "    function _updateTotalSupplySnapshot() private {\n\n        _updateSnapshot(_totalSupplySnapshots, totalSupply());\n",
          "message": "Function 'ERC20Snapshot._updateTotalSupplySnapshot' (ERC20Snapshot.sol#655-657) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 659,
          "vulnerability_to_line": 665,
          "vulnerability_code": "    function _updateSnapshot(Snapshots storage snapshots, uint256 currentValue) private {\n\n        uint256 currentId = _currentSnapshotId.current();\n\n        if (_lastSnapshotId(snapshots.ids) < currentId) {\n\n            snapshots.ids.push(currentId);\n\n            snapshots.values.push(currentValue);\n\n        }\n",
          "message": "Function 'ERC20Snapshot._updateSnapshot' (ERC20Snapshot.sol#659-665) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 667,
          "vulnerability_to_line": 673,
          "vulnerability_code": "    function _lastSnapshotId(uint256[] storage ids) private view returns (uint256) {\n\n        if (ids.length == 0) {\n\n            return 0;\n\n        } else {\n\n            return ids[ids.length - 1];\n\n        }\n",
          "message": "Function 'ERC20Snapshot._lastSnapshotId' (ERC20Snapshot.sol#667-673) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 384,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address spender, uint256 value) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 168,
          "vulnerability_to_line": null,
          "vulnerability_code": "        while (low < high) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 145,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 191,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 229,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 308,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 537,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 337,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => uint256) private _balances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 339,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => mapping (address => uint256)) private _allowances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 341,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _totalSupply;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 567,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => Snapshots) private _accountBalanceSnapshots;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 568,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Snapshots private _totalSupplySnapshots;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 571,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Counters.Counter private _currentSnapshotId;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 335,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 556,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 636,
          "vulnerability_to_line": null,
          "vulnerability_code": "        private view returns (bool, uint256)\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}