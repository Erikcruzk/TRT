{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_14"
      ],
      "vulnerability_findings": [
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": 78,
          "vulnerability_code": "contract IERC721 is IERC165 {\n\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n\n\n    /**\n\n     * @dev Returns the number of NFTs in `owner`'s account.\n\n     */\n\n    function balanceOf(address owner) public view returns (uint256 balance);\n\n\n\n    /**\n\n     * @dev Returns the owner of the NFT specified by `tokenId`.\n\n     */\n\n    function ownerOf(uint256 tokenId) public view returns (address owner);\n\n\n\n    /**\n\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n\n     * another (`to`).\n\n     *\n\n     * \n\n     *\n\n     * Requirements:\n\n     * - `from`, `to` cannot be zero.\n\n     * - `tokenId` must be owned by `from`.\n\n     * - If the caller is not `from`, it must be have been allowed to move this\n\n     * NFT by either `approve` or `setApproveForAll`.\n\n     */\n\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n\n    /**\n\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n\n     * another (`to`).\n\n     *\n\n     * Requirements:\n\n     * - If the caller is not `from`, it must be approved to move this NFT by\n\n     * either `approve` or `setApproveForAll`.\n\n     */\n\n    function transferFrom(address from, address to, uint256 tokenId) public;\n\n    function approve(address to, uint256 tokenId) public;\n\n    function getApproved(uint256 tokenId) public view returns (address operator);\n\n\n\n    function setApprovalForAll(address operator, bool _approved) public;\n\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\n\n\n\n\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n",
          "message": "IERC721 (IERC721Enumerable.sol#33-78) has incorrect ERC20 function interface(s):\n\t-transferFrom (IERC721Enumerable.sol#69)\n\t-approve (IERC721Enumerable.sol#70)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address owner) public view returns (uint256 balance);\n",
          "message": "IERC721.balanceOf (IERC721Enumerable.sol#41) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ownerOf(uint256 tokenId) public view returns (address owner);\n",
          "message": "IERC721.ownerOf (IERC721Enumerable.sol#46) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n",
          "message": "IERC721.safeTransferFrom (IERC721Enumerable.sol#60) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address from, address to, uint256 tokenId) public;\n",
          "message": "IERC721.transferFrom (IERC721Enumerable.sol#69) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address to, uint256 tokenId) public;\n",
          "message": "IERC721.approve (IERC721Enumerable.sol#70) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getApproved(uint256 tokenId) public view returns (address operator);\n",
          "message": "IERC721.getApproved (IERC721Enumerable.sol#71) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setApprovalForAll(address operator, bool _approved) public;\n",
          "message": "IERC721.setApprovalForAll (IERC721Enumerable.sol#73) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isApprovedForAll(address owner, address operator) public view returns (bool);\n",
          "message": "IERC721.isApprovedForAll (IERC721Enumerable.sol#74) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n",
          "message": "IERC721.safeTransferFrom (IERC721Enumerable.sol#77) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 89,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function totalSupply() public view returns (uint256);\n",
          "message": "IERC721Enumerable.totalSupply (IERC721Enumerable.sol#89) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);\n",
          "message": "IERC721Enumerable.tokenOfOwnerByIndex (IERC721Enumerable.sol#90) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 92,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function tokenByIndex(uint256 index) public view returns (uint256);\n",
          "message": "IERC721Enumerable.tokenByIndex (IERC721Enumerable.sol#92) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": "Detected issues with version pragma in IERC721Enumerable.sol:\n\t- pragma solidity^0.5.0 (IERC721Enumerable.sol#3): it allows old versions\n\t- pragma solidity^0.5.0 (IERC721Enumerable.sol#28): it allows old versions\n\t- pragma solidity^0.5.0 (IERC721Enumerable.sol#82): it allows old versions\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "execution failed"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "input files do not contain any valid contracts"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}