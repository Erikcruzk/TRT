{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 240,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 244,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 255,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 260,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 265,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "inefficient-state-variable-increment",
          "vulnerability_from_line": 330,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _guardCounter += 1;\n",
          "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 316,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor () internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 317,
          "vulnerability_to_line": null,
          "vulnerability_code": "        // The counter starts at one to prevent changing it from zero to a non-zero\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 318,
          "vulnerability_to_line": null,
          "vulnerability_code": "        // value, which is a more expensive operation.\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 319,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _guardCounter = 1;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 392,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (uint256 rate, address payable wallet, IERC20 token) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 393,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(rate > 0, \"Crowdsale: rate is 0\");\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 394,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(wallet != address(0), \"Crowdsale: wallet is the zero address\");\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 395,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(token) != address(0), \"Crowdsale: token is the zero address\");\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 396,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 397,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _rate = rate;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 398,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _wallet = wallet;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 399,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _token = token;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 400,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 554,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (uint256 cap) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 555,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(cap > 0, \"CappedCrowdsale: cap is 0\");\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 556,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _cap = cap;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 557,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 620,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (uint256 openingTime, uint256 closingTime) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 621,
          "vulnerability_to_line": null,
          "vulnerability_code": "        // solhint-disable-next-line not-rely-on-time\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 622,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(openingTime >= block.timestamp, \"TimedCrowdsale: opening time is before current time\");\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 623,
          "vulnerability_to_line": null,
          "vulnerability_code": "        // solhint-disable-next-line max-line-length\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 624,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(closingTime > openingTime, \"TimedCrowdsale: opening time is not before closing time\");\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 625,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 626,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _openingTime = openingTime;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 627,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _closingTime = closingTime;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 628,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 701,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor () internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 702,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _finalized = false;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 703,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 756,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor () internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 757,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _primary = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 758,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit PrimaryTransferred(_primary);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 759,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 893,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (address payable beneficiary) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 894,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(beneficiary != address(0), \"RefundEscrow: beneficiary is the zero address\");\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 895,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _beneficiary = beneficiary;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 896,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _state = State.Active;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 897,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 987,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (uint256 goal) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 988,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(goal > 0, \"RefundableCrowdsale: goal is 0\");\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 989,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _escrow = new RefundEscrow(wallet());\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 990,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _goal = goal;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 991,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1322,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor () internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1323,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _addMinter(msg.sender);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1324,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1421,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (string memory name, string memory symbol, uint8 decimals) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1422,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _name = name;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1423,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _symbol = symbol;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1424,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _decimals = decimals;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1425,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1473,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor () public ERC20Detailed(\"Sample Crowdsale Token\", \"SCT\", 18) {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1474,
          "vulnerability_to_line": null,
          "vulnerability_code": "        // solhint-disable-previous-line no-empty-blocks\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1475,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1492,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1493,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 openingTime,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1494,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 closingTime,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1495,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 rate,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1496,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address payable wallet,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1497,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 cap,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1498,
          "vulnerability_to_line": null,
          "vulnerability_code": "        ERC20Mintable token,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1499,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 goal\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1500,
          "vulnerability_to_line": null,
          "vulnerability_code": "    )\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1501,
          "vulnerability_to_line": null,
          "vulnerability_code": "        public\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b <= a, \"SafeMath: subtraction overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b > 0, \"SafeMath: division by zero\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 106,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b != 0, \"SafeMath: modulo by zero\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 253,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 254,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 283,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 287,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"SafeERC20: low-level call failed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 291,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 333,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 393,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(rate > 0, \"Crowdsale: rate is 0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 394,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(wallet != address(0), \"Crowdsale: wallet is the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 395,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(token) != address(0), \"Crowdsale: token is the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 475,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(beneficiary != address(0), \"Crowdsale: beneficiary is the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 476,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(weiAmount != 0, \"Crowdsale: weiAmount is 0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 555,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(cap > 0, \"CappedCrowdsale: cap is 0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 581,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(weiRaised().add(weiAmount) <= _cap, \"CappedCrowdsale: cap exceeded\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 611,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isOpen(), \"TimedCrowdsale: not open\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 622,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(openingTime >= block.timestamp, \"TimedCrowdsale: opening time is before current time\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 624,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(closingTime > openingTime, \"TimedCrowdsale: opening time is not before closing time\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 675,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!hasClosed(), \"TimedCrowdsale: already closed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 677,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newClosingTime > _closingTime, \"TimedCrowdsale: new closing time is before current closing time\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 717,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!_finalized, \"FinalizableCrowdsale: already finalized\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 718,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(hasClosed(), \"FinalizableCrowdsale: not closed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 765,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == _primary, \"Secondary: caller is not the primary account\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 781,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(recipient != address(0), \"Secondary: new primary is the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 860,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(withdrawalAllowed(payee), \"ConditionalEscrow: payee is not allowed to withdraw\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 894,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(beneficiary != address(0), \"RefundEscrow: beneficiary is the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 918,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_state == State.Active, \"RefundEscrow: can only deposit while active\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 927,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_state == State.Active, \"RefundEscrow: can only close while active\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 936,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_state == State.Active, \"RefundEscrow: can only enable refunds while active\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 945,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_state == State.Closed, \"RefundEscrow: beneficiary can only withdraw while closed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 988,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(goal > 0, \"RefundableCrowdsale: goal is 0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1005,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(finalized(), \"RefundableCrowdsale: not finalized\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1006,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!goalReached(), \"RefundableCrowdsale: goal reached\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1193,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(sender != address(0), \"ERC20: transfer from the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1194,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1211,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(0), \"ERC20: mint to the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1230,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(0), \"ERC20: burn from the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1251,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(owner != address(0), \"ERC20: approve from the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1252,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(spender != address(0), \"ERC20: approve to the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1288,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!has(role, account), \"Roles: account already has role\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1296,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(has(role, account), \"Roles: account does not have role\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1305,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(0), \"Roles: account is the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1327,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isMinter(msg.sender), \"MinterRole: caller does not have the Minter role\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1397,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1398,
          "vulnerability_to_line": null,
          "vulnerability_code": "            ERC20Mintable(address(token())).mint(beneficiary, tokenAmount),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1399,
          "vulnerability_to_line": null,
          "vulnerability_code": "                \"MintedCrowdsale: minting failed\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1400,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1509,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(goal <= cap, \"SampleCrowdSale: goal is greater than cap\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 253,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 254,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 291,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 394,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(wallet != address(0), \"Crowdsale: wallet is the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 395,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(token) != address(0), \"Crowdsale: token is the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 475,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(beneficiary != address(0), \"Crowdsale: beneficiary is the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 622,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(openingTime >= block.timestamp, \"TimedCrowdsale: opening time is before current time\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 624,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(closingTime > openingTime, \"TimedCrowdsale: opening time is not before closing time\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 677,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newClosingTime > _closingTime, \"TimedCrowdsale: new closing time is before current closing time\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 717,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!_finalized, \"FinalizableCrowdsale: already finalized\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 765,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == _primary, \"Secondary: caller is not the primary account\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 781,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(recipient != address(0), \"Secondary: new primary is the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 860,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(withdrawalAllowed(payee), \"ConditionalEscrow: payee is not allowed to withdraw\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 894,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(beneficiary != address(0), \"RefundEscrow: beneficiary is the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 918,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_state == State.Active, \"RefundEscrow: can only deposit while active\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 927,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_state == State.Active, \"RefundEscrow: can only close while active\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 936,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_state == State.Active, \"RefundEscrow: can only enable refunds while active\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 945,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_state == State.Closed, \"RefundEscrow: beneficiary can only withdraw while closed\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1005,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(finalized(), \"RefundableCrowdsale: not finalized\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1006,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!goalReached(), \"RefundableCrowdsale: goal reached\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1193,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(sender != address(0), \"ERC20: transfer from the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1194,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1230,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(0), \"ERC20: burn from the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1251,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(owner != address(0), \"ERC20: approve from the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1252,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(spender != address(0), \"ERC20: approve to the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1296,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(has(role, account), \"Roles: account does not have role\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1305,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(0), \"Roles: account is the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1327,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isMinter(msg.sender), \"MinterRole: caller does not have the Minter role\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1509,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(goal <= cap, \"SampleCrowdSale: goal is greater than cap\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_84"
      ],
      "vulnerability_findings": [
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 944,
          "vulnerability_to_line": 949,
          "vulnerability_code": "    function beneficiaryWithdraw() public {\n\n        require(_state == State.Closed, \"RefundEscrow: beneficiary can only withdraw while closed\");\n\n        _beneficiary.transfer(address(this).balance);\n\n    }\n\n\n",
          "message": "RefundEscrow.beneficiaryWithdraw (SampleCrowdsale.sol#944-949) sends eth to arbitrary user\n\tDangerous calls:\n\t- _beneficiary.transfer(address(this).balance) (SampleCrowdsale.sol#946-947)\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 208,
          "vulnerability_to_line": 217,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        // This method relies in extcodesize, which returns 0 for contracts in\n\n        // construction, since the code is only stored at the end of the\n\n        // constructor execution.\n\n\n\n        uint256 size;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
          "message": "Address.isContract (SampleCrowdsale.sol#208-217) is declared view but contains assembly code\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 392,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (uint256 rate, address payable wallet, IERC20 token) public {\n",
          "message": "Crowdsale.constructor.rate (local variable @ SampleCrowdsale.sol#392) shadows:\n\t- Crowdsale.rate (function @ SampleCrowdsale.sol#429-431)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 392,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (uint256 rate, address payable wallet, IERC20 token) public {\n",
          "message": "Crowdsale.constructor.wallet (local variable @ SampleCrowdsale.sol#392) shadows:\n\t- Crowdsale.wallet (function @ SampleCrowdsale.sol#422-424)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 392,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (uint256 rate, address payable wallet, IERC20 token) public {\n",
          "message": "Crowdsale.constructor.token (local variable @ SampleCrowdsale.sol#392) shadows:\n\t- Crowdsale.token (function @ SampleCrowdsale.sol#415-417)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 554,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (uint256 cap) public {\n",
          "message": "CappedCrowdsale.constructor.cap (local variable @ SampleCrowdsale.sol#554) shadows:\n\t- CappedCrowdsale.cap (function @ SampleCrowdsale.sol#562-564)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 620,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (uint256 openingTime, uint256 closingTime) public {\n",
          "message": "TimedCrowdsale.constructor.openingTime (local variable @ SampleCrowdsale.sol#620) shadows:\n\t- TimedCrowdsale.openingTime (function @ SampleCrowdsale.sol#633-635)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 620,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (uint256 openingTime, uint256 closingTime) public {\n",
          "message": "TimedCrowdsale.constructor.closingTime (local variable @ SampleCrowdsale.sol#620) shadows:\n\t- TimedCrowdsale.closingTime (function @ SampleCrowdsale.sol#640-642)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 893,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (address payable beneficiary) public {\n",
          "message": "RefundEscrow.constructor.beneficiary (local variable @ SampleCrowdsale.sol#893) shadows:\n\t- RefundEscrow.beneficiary (function @ SampleCrowdsale.sol#909-913)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 987,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (uint256 goal) public {\n",
          "message": "RefundableCrowdsale.constructor.goal (local variable @ SampleCrowdsale.sol#987) shadows:\n\t- RefundableCrowdsale.goal (function @ SampleCrowdsale.sol#996-1000)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 1421,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (string memory name, string memory symbol, uint8 decimals) public {\n",
          "message": "ERC20Detailed.constructor.name (local variable @ SampleCrowdsale.sol#1421) shadows:\n\t- ERC20Detailed.name (function @ SampleCrowdsale.sol#1430-1434)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 1421,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (string memory name, string memory symbol, uint8 decimals) public {\n",
          "message": "ERC20Detailed.constructor.symbol (local variable @ SampleCrowdsale.sol#1421) shadows:\n\t- ERC20Detailed.symbol (function @ SampleCrowdsale.sol#1438-1442)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 1421,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (string memory name, string memory symbol, uint8 decimals) public {\n",
          "message": "ERC20Detailed.constructor.decimals (local variable @ SampleCrowdsale.sol#1421) shadows:\n\t- ERC20Detailed.decimals (function @ SampleCrowdsale.sol#1454-1457)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 1493,
          "vulnerability_to_line": 1494,
          "vulnerability_code": "        uint256 openingTime,\n",
          "message": "SampleCrowdsale.constructor.openingTime (local variable @ SampleCrowdsale.sol#1493-1494) shadows:\n\t- TimedCrowdsale.openingTime (function @ SampleCrowdsale.sol#633-635)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 1494,
          "vulnerability_to_line": 1495,
          "vulnerability_code": "        uint256 closingTime,\n",
          "message": "SampleCrowdsale.constructor.closingTime (local variable @ SampleCrowdsale.sol#1494-1495) shadows:\n\t- TimedCrowdsale.closingTime (function @ SampleCrowdsale.sol#640-642)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 1495,
          "vulnerability_to_line": 1496,
          "vulnerability_code": "        uint256 rate,\n",
          "message": "SampleCrowdsale.constructor.rate (local variable @ SampleCrowdsale.sol#1495-1496) shadows:\n\t- Crowdsale.rate (function @ SampleCrowdsale.sol#429-431)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 1496,
          "vulnerability_to_line": 1497,
          "vulnerability_code": "        address payable wallet,\n",
          "message": "SampleCrowdsale.constructor.wallet (local variable @ SampleCrowdsale.sol#1496-1497) shadows:\n\t- Crowdsale.wallet (function @ SampleCrowdsale.sol#422-424)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 1497,
          "vulnerability_to_line": 1498,
          "vulnerability_code": "        uint256 cap,\n",
          "message": "SampleCrowdsale.constructor.cap (local variable @ SampleCrowdsale.sol#1497-1498) shadows:\n\t- CappedCrowdsale.cap (function @ SampleCrowdsale.sol#562-564)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 1498,
          "vulnerability_to_line": 1499,
          "vulnerability_code": "        ERC20Mintable token,\n",
          "message": "SampleCrowdsale.constructor.token (local variable @ SampleCrowdsale.sol#1498-1499) shadows:\n\t- Crowdsale.token (function @ SampleCrowdsale.sol#415-417)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 1499,
          "vulnerability_to_line": 1500,
          "vulnerability_code": "        uint256 goal\n",
          "message": "SampleCrowdsale.constructor.goal (local variable @ SampleCrowdsale.sol#1499-1500) shadows:\n\t- RefundableCrowdsale.goal (function @ SampleCrowdsale.sol#996-1000)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 620,
          "vulnerability_to_line": 628,
          "vulnerability_code": "    constructor (uint256 openingTime, uint256 closingTime) public {\n\n        // solhint-disable-next-line not-rely-on-time\n\n        require(openingTime >= block.timestamp, \"TimedCrowdsale: opening time is before current time\");\n\n        // solhint-disable-next-line max-line-length\n\n        require(closingTime > openingTime, \"TimedCrowdsale: opening time is not before closing time\");\n\n\n\n        _openingTime = openingTime;\n\n        _closingTime = closingTime;\n",
          "message": "TimedCrowdsale.constructor (SampleCrowdsale.sol#620-628) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(openingTime >= block.timestamp,TimedCrowdsale: opening time is before current time) (SampleCrowdsale.sol#622)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 647,
          "vulnerability_to_line": 650,
          "vulnerability_code": "    function isOpen() public view returns (bool) {\n\n        // solhint-disable-next-line not-rely-on-time\n\n        return block.timestamp >= _openingTime && block.timestamp <= _closingTime;\n",
          "message": "TimedCrowdsale.isOpen (SampleCrowdsale.sol#647-650) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp >= _openingTime && block.timestamp <= _closingTime (SampleCrowdsale.sol#649)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 656,
          "vulnerability_to_line": 659,
          "vulnerability_code": "    function hasClosed() public view returns (bool) {\n\n        // solhint-disable-next-line not-rely-on-time\n\n        return block.timestamp > _closingTime;\n",
          "message": "TimedCrowdsale.hasClosed (SampleCrowdsale.sol#656-659) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp > _closingTime (SampleCrowdsale.sol#658)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 208,
          "vulnerability_to_line": 217,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        // This method relies in extcodesize, which returns 0 for contracts in\n\n        // construction, since the code is only stored at the end of the\n\n        // constructor execution.\n\n\n\n        uint256 size;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
          "message": "Address.isContract uses assembly (SampleCrowdsale.sol#208-217)\n\t- SampleCrowdsale.sol#215\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 429,
          "vulnerability_to_line": 431,
          "vulnerability_code": "    function rate() public view returns (uint256) {\n\n        return _rate;\n",
          "message": "Crowdsale.rate (SampleCrowdsale.sol#429-431) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 562,
          "vulnerability_to_line": 564,
          "vulnerability_code": "    function cap() public view returns (uint256) {\n\n        return _cap;\n",
          "message": "CappedCrowdsale.cap (SampleCrowdsale.sol#562-564) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 570,
          "vulnerability_to_line": 572,
          "vulnerability_code": "    function capReached() public view returns (bool) {\n\n        return weiRaised() >= _cap;\n",
          "message": "CappedCrowdsale.capReached (SampleCrowdsale.sol#570-572) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 633,
          "vulnerability_to_line": 635,
          "vulnerability_code": "    function openingTime() public view returns (uint256) {\n\n        return _openingTime;\n",
          "message": "TimedCrowdsale.openingTime (SampleCrowdsale.sol#633-635) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 640,
          "vulnerability_to_line": 642,
          "vulnerability_code": "    function closingTime() public view returns (uint256) {\n\n        return _closingTime;\n",
          "message": "TimedCrowdsale.closingTime (SampleCrowdsale.sol#640-642) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 716,
          "vulnerability_to_line": 724,
          "vulnerability_code": "    function finalize() public {\n\n        require(!_finalized, \"FinalizableCrowdsale: already finalized\");\n\n        require(hasClosed(), \"FinalizableCrowdsale: not closed\");\n\n\n\n        _finalized = true;\n\n\n\n        _finalization();\n\n        emit CrowdsaleFinalized();\n",
          "message": "FinalizableCrowdsale.finalize (SampleCrowdsale.sol#716-724) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 772,
          "vulnerability_to_line": 774,
          "vulnerability_code": "    function primary() public view returns (address) {\n\n        return _primary;\n",
          "message": "Secondary.primary (SampleCrowdsale.sol#772-774) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 780,
          "vulnerability_to_line": 784,
          "vulnerability_code": "    function transferPrimary(address recipient) public onlyPrimary {\n\n        require(recipient != address(0), \"Secondary: new primary is the zero address\");\n\n        _primary = recipient;\n\n        emit PrimaryTransferred(_primary);\n",
          "message": "Secondary.transferPrimary (SampleCrowdsale.sol#780-784) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 812,
          "vulnerability_to_line": 814,
          "vulnerability_code": "    function depositsOf(address payee) public view returns (uint256) {\n\n        return _deposits[payee];\n",
          "message": "Escrow.depositsOf (SampleCrowdsale.sol#812-814) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 902,
          "vulnerability_to_line": 906,
          "vulnerability_code": "    function state() public view returns (State) {\n\n        return _state;\n\n    }\n\n\n",
          "message": "RefundEscrow.state (SampleCrowdsale.sol#902-906) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 909,
          "vulnerability_to_line": 913,
          "vulnerability_code": "    function beneficiary() public view returns (address) {\n\n        return _beneficiary;\n\n    }\n\n\n",
          "message": "RefundEscrow.beneficiary (SampleCrowdsale.sol#909-913) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 926,
          "vulnerability_to_line": 932,
          "vulnerability_code": "    function close() public onlyPrimary {\n\n        require(_state == State.Active, \"RefundEscrow: can only close while active\");\n\n        _state = State.Closed;\n\n        emit RefundsClosed();\n\n    }\n\n\n",
          "message": "RefundEscrow.close (SampleCrowdsale.sol#926-932) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 935,
          "vulnerability_to_line": 941,
          "vulnerability_code": "    function enableRefunds() public onlyPrimary {\n\n        require(_state == State.Active, \"RefundEscrow: can only enable refunds while active\");\n\n        _state = State.Refunding;\n\n        emit RefundsEnabled();\n\n    }\n\n\n",
          "message": "RefundEscrow.enableRefunds (SampleCrowdsale.sol#935-941) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 944,
          "vulnerability_to_line": 949,
          "vulnerability_code": "    function beneficiaryWithdraw() public {\n\n        require(_state == State.Closed, \"RefundEscrow: beneficiary can only withdraw while closed\");\n\n        _beneficiary.transfer(address(this).balance);\n\n    }\n\n\n",
          "message": "RefundEscrow.beneficiaryWithdraw (SampleCrowdsale.sol#944-949) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 996,
          "vulnerability_to_line": 1000,
          "vulnerability_code": "    function goal() public view returns (uint256) {\n\n        return _goal;\n\n    }\n\n\n",
          "message": "RefundableCrowdsale.goal (SampleCrowdsale.sol#996-1000) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1004,
          "vulnerability_to_line": 1011,
          "vulnerability_code": "    function claimRefund(address payable refundee) public {\n\n        require(finalized(), \"RefundableCrowdsale: not finalized\");\n\n        require(!goalReached(), \"RefundableCrowdsale: goal reached\");\n\n\n\n        _escrow.withdraw(refundee);\n\n    }\n\n\n",
          "message": "RefundableCrowdsale.claimRefund (SampleCrowdsale.sol#1004-1011) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function totalSupply() external view returns (uint256);\n",
          "message": "IERC20.totalSupply (SampleCrowdsale.sol#123) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1081,
          "vulnerability_to_line": 1085,
          "vulnerability_code": "    function totalSupply() public view returns (uint256) {\n\n        return _totalSupply;\n\n    }\n\n\n",
          "message": "ERC20.totalSupply (SampleCrowdsale.sol#1081-1085) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address account) external view returns (uint256);\n",
          "message": "IERC20.balanceOf (SampleCrowdsale.sol#128) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1088,
          "vulnerability_to_line": 1092,
          "vulnerability_code": "    function balanceOf(address account) public view returns (uint256) {\n\n        return _balances[account];\n\n    }\n\n\n",
          "message": "ERC20.balanceOf (SampleCrowdsale.sol#1088-1092) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 137,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address recipient, uint256 amount) external returns (bool);\n",
          "message": "IERC20.transfer (SampleCrowdsale.sol#137) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1100,
          "vulnerability_to_line": 1105,
          "vulnerability_code": "    function transfer(address recipient, uint256 amount) public returns (bool) {\n\n        _transfer(msg.sender, recipient, amount);\n\n        return true;\n\n    }\n\n\n",
          "message": "ERC20.transfer (SampleCrowdsale.sol#1100-1105) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 146,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address owner, address spender) external view returns (uint256);\n",
          "message": "IERC20.allowance (SampleCrowdsale.sol#146) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1108,
          "vulnerability_to_line": 1112,
          "vulnerability_code": "    function allowance(address owner, address spender) public view returns (uint256) {\n\n        return _allowances[owner][spender];\n\n    }\n\n\n",
          "message": "ERC20.allowance (SampleCrowdsale.sol#1108-1112) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1119,
          "vulnerability_to_line": 1124,
          "vulnerability_code": "    function approve(address spender, uint256 value) public returns (bool) {\n\n        _approve(msg.sender, spender, value);\n\n        return true;\n\n    }\n\n\n",
          "message": "ERC20.approve (SampleCrowdsale.sol#1119-1124) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 162,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address spender, uint256 amount) external returns (bool);\n",
          "message": "IERC20.approve (SampleCrowdsale.sol#162) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n",
          "message": "IERC20.transferFrom (SampleCrowdsale.sol#173) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1136,
          "vulnerability_to_line": 1142,
          "vulnerability_code": "    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n\n        _transfer(sender, recipient, amount);\n\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n\n        return true;\n\n    }\n\n\n",
          "message": "ERC20.transferFrom (SampleCrowdsale.sol#1136-1142) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1154,
          "vulnerability_to_line": 1159,
          "vulnerability_code": "    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n\n        return true;\n\n    }\n\n\n",
          "message": "ERC20.increaseAllowance (SampleCrowdsale.sol#1154-1159) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1173,
          "vulnerability_to_line": 1178,
          "vulnerability_code": "    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n\n        return true;\n\n    }\n\n\n",
          "message": "ERC20.decreaseAllowance (SampleCrowdsale.sol#1173-1178) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1335,
          "vulnerability_to_line": 1339,
          "vulnerability_code": "    function addMinter(address account) public onlyMinter {\n\n        _addMinter(account);\n\n    }\n\n\n",
          "message": "MinterRole.addMinter (SampleCrowdsale.sol#1335-1339) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1339,
          "vulnerability_to_line": 1343,
          "vulnerability_code": "    function renounceMinter() public {\n\n        _removeMinter(msg.sender);\n\n    }\n\n\n",
          "message": "MinterRole.renounceMinter (SampleCrowdsale.sol#1339-1343) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1373,
          "vulnerability_to_line": 1377,
          "vulnerability_code": "    function mint(address account, uint256 amount) public onlyMinter returns (bool) {\n\n        _mint(account, amount);\n\n        return true;\n\n    }\n",
          "message": "ERC20Mintable.mint (SampleCrowdsale.sol#1373-1377) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1430,
          "vulnerability_to_line": 1434,
          "vulnerability_code": "    function name() public view returns (string memory) {\n\n        return _name;\n\n    }\n\n\n",
          "message": "ERC20Detailed.name (SampleCrowdsale.sol#1430-1434) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1438,
          "vulnerability_to_line": 1442,
          "vulnerability_code": "    function symbol() public view returns (string memory) {\n\n        return _symbol;\n\n    }\n\n\n",
          "message": "ERC20Detailed.symbol (SampleCrowdsale.sol#1438-1442) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1454,
          "vulnerability_to_line": 1457,
          "vulnerability_code": "    function decimals() public view returns (uint8) {\n\n        return _decimals;\n\n    }\n",
          "message": "ERC20Detailed.decimals (SampleCrowdsale.sol#1454-1457) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": "Detected issues with version pragma in SampleCrowdsale.sol:\n\t- pragma solidity^0.5.0 (SampleCrowdsale.sol#3): it allows old versions\n\t- pragma solidity^0.5.0 (SampleCrowdsale.sol#113): it allows old versions\n\t- pragma solidity^0.5.0 (SampleCrowdsale.sol#192): it allows old versions\n\t- pragma solidity^0.5.0 (SampleCrowdsale.sol#222): it allows old versions\n\t- pragma solidity^0.5.0 (SampleCrowdsale.sol#298): it allows old versions\n\t- pragma solidity^0.5.0 (SampleCrowdsale.sol#339): it allows old versions\n\t- pragma solidity^0.5.0 (SampleCrowdsale.sol#538): it allows old versions\n\t- pragma solidity^0.5.0 (SampleCrowdsale.sol#587): it allows old versions\n\t- pragma solidity^0.5.0 (SampleCrowdsale.sol#686): it allows old versions\n\t- pragma solidity^0.5.0 (SampleCrowdsale.sol#738): it allows old versions\n\t- pragma solidity^0.5.0 (SampleCrowdsale.sol#789): it allows old versions\n\t- pragma solidity^0.5.0 (SampleCrowdsale.sol#844): it allows old versions\n\t- pragma solidity^0.5.0 (SampleCrowdsale.sol#867): it allows old versions\n\t- pragma solidity^0.5.0 (SampleCrowdsale.sol#960-962): it allows old versions\n\t- pragma solidity^0.5.0 (SampleCrowdsale.sol#1043-1045): it allows old versions\n\t- pragma solidity^0.5.0 (SampleCrowdsale.sol#1273-1275): it allows old versions\n\t- pragma solidity^0.5.0 (SampleCrowdsale.sol#1312-1314): it allows old versions\n\t- pragma solidity^0.5.0 (SampleCrowdsale.sol#1356-1358): it allows old versions\n\t- pragma solidity^0.5.0 (SampleCrowdsale.sol#1381-1383): it allows old versions\n\t- pragma solidity^0.5.0 (SampleCrowdsale.sol#1406-1408): it allows old versions\n\t- pragma solidity^0.5.0 (SampleCrowdsale.sol#1461-1463): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 274,
          "vulnerability_to_line": 293,
          "vulnerability_code": "    function callOptionalReturn(IERC20 token, bytes memory data) private {\n\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n\n        // we're implementing it ourselves.\n\n\n\n        // A Solidity high level call has three parts:\n\n        //  1. The target address is checked to verify it contains contract code\n\n        //  2. The call itself is made, and success asserted\n\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n\n        // solhint-disable-next-line max-line-length\n\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n\n\n        // solhint-disable-next-line avoid-low-level-calls\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n\n        require(success, \"SafeERC20: low-level call failed\");\n\n\n\n        if (returndata.length > 0) { // Return data is optional\n\n            // solhint-disable-next-line max-line-length\n\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n\n        }\n",
          "message": "Low level call in SafeERC20.callOptionalReturn (SampleCrowdsale.sol#274-293):\n\t-(success,returndata) = address(token).call(data) SampleCrowdsale.sol#286\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 474,
          "vulnerability_to_line": 477,
          "vulnerability_code": "    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\n\n        require(beneficiary != address(0), \"Crowdsale: beneficiary is the zero address\");\n\n        require(weiAmount != 0, \"Crowdsale: weiAmount is 0\");\n",
          "message": "Function 'Crowdsale._preValidatePurchase' (SampleCrowdsale.sol#474-477) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 485,
          "vulnerability_to_line": 487,
          "vulnerability_code": "    function _postValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\n\n        // solhint-disable-previous-line no-empty-blocks\n",
          "message": "Function 'Crowdsale._postValidatePurchase' (SampleCrowdsale.sol#485-487) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 495,
          "vulnerability_to_line": 497,
          "vulnerability_code": "    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\n\n        _token.safeTransfer(beneficiary, tokenAmount);\n",
          "message": "Function 'Crowdsale._deliverTokens' (SampleCrowdsale.sol#495-497) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 505,
          "vulnerability_to_line": 507,
          "vulnerability_code": "    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\n\n        _deliverTokens(beneficiary, tokenAmount);\n",
          "message": "Function 'Crowdsale._processPurchase' (SampleCrowdsale.sol#505-507) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 515,
          "vulnerability_to_line": 517,
          "vulnerability_code": "    function _updatePurchasingState(address beneficiary, uint256 weiAmount) internal {\n\n        // solhint-disable-previous-line no-empty-blocks\n",
          "message": "Function 'Crowdsale._updatePurchasingState' (SampleCrowdsale.sol#515-517) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 524,
          "vulnerability_to_line": 526,
          "vulnerability_code": "    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\n\n        return weiAmount.mul(_rate);\n",
          "message": "Function 'Crowdsale._getTokenAmount' (SampleCrowdsale.sol#524-526) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 531,
          "vulnerability_to_line": 533,
          "vulnerability_code": "    function _forwardFunds() internal {\n\n        _wallet.transfer(msg.value);\n",
          "message": "Function 'Crowdsale._forwardFunds' (SampleCrowdsale.sol#531-533) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 579,
          "vulnerability_to_line": 582,
          "vulnerability_code": "    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\n\n        super._preValidatePurchase(beneficiary, weiAmount);\n\n        require(weiRaised().add(weiAmount) <= _cap, \"CappedCrowdsale: cap exceeded\");\n",
          "message": "Function 'CappedCrowdsale._preValidatePurchase' (SampleCrowdsale.sol#579-582) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 666,
          "vulnerability_to_line": 668,
          "vulnerability_code": "    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal onlyWhileOpen view {\n\n        super._preValidatePurchase(beneficiary, weiAmount);\n",
          "message": "Function 'TimedCrowdsale._preValidatePurchase' (SampleCrowdsale.sol#666-668) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 674,
          "vulnerability_to_line": 681,
          "vulnerability_code": "    function _extendTime(uint256 newClosingTime) internal {\n\n        require(!hasClosed(), \"TimedCrowdsale: already closed\");\n\n        // solhint-disable-next-line max-line-length\n\n        require(newClosingTime > _closingTime, \"TimedCrowdsale: new closing time is before current closing time\");\n\n\n\n        emit TimedCrowdsaleExtended(_closingTime, newClosingTime);\n\n        _closingTime = newClosingTime;\n",
          "message": "Function 'TimedCrowdsale._extendTime' (SampleCrowdsale.sol#674-681) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 731,
          "vulnerability_to_line": 733,
          "vulnerability_code": "    function _finalization() internal {\n\n        // solhint-disable-previous-line no-empty-blocks\n",
          "message": "Function 'FinalizableCrowdsale._finalization' (SampleCrowdsale.sol#731-733) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 953,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawalAllowed(address) public view returns (bool) {\n",
          "message": "Parameter '' of RefundEscrow.withdrawalAllowed (SampleCrowdsale.sol#953) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1036,
          "vulnerability_to_line": 1039,
          "vulnerability_code": "    function _forwardFunds() internal {\n\n        _escrow.deposit.value(msg.value)(msg.sender);\n\n    }\n",
          "message": "Function 'RefundableCrowdsale._forwardFunds' (SampleCrowdsale.sol#1036-1039) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1022,
          "vulnerability_to_line": 1033,
          "vulnerability_code": "    function _finalization() internal {\n\n        if (goalReached()) {\n\n            _escrow.close();\n\n            _escrow.beneficiaryWithdraw();\n\n        } else {\n\n            _escrow.enableRefunds();\n\n        }\n\n\n\n        super._finalization();\n\n    }\n\n\n",
          "message": "Function 'RefundableCrowdsale._finalization' (SampleCrowdsale.sol#1022-1033) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1192,
          "vulnerability_to_line": 1201,
          "vulnerability_code": "    function _transfer(address sender, address recipient, uint256 amount) internal {\n\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n\n\n        _balances[sender] = _balances[sender].sub(amount);\n\n        _balances[recipient] = _balances[recipient].add(amount);\n\n        emit Transfer(sender, recipient, amount);\n\n    }\n\n\n",
          "message": "Function 'ERC20._transfer' (SampleCrowdsale.sol#1192-1201) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1210,
          "vulnerability_to_line": 1218,
          "vulnerability_code": "    function _mint(address account, uint256 amount) internal {\n\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n\n\n        _totalSupply = _totalSupply.add(amount);\n\n        _balances[account] = _balances[account].add(amount);\n\n        emit Transfer(address(0), account, amount);\n\n    }\n\n\n",
          "message": "Function 'ERC20._mint' (SampleCrowdsale.sol#1210-1218) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1229,
          "vulnerability_to_line": 1237,
          "vulnerability_code": "    function _burn(address account, uint256 value) internal {\n\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n\n\n        _totalSupply = _totalSupply.sub(value);\n\n        _balances[account] = _balances[account].sub(value);\n\n        emit Transfer(account, address(0), value);\n\n    }\n\n\n",
          "message": "Function 'ERC20._burn' (SampleCrowdsale.sol#1229-1237) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1250,
          "vulnerability_to_line": 1258,
          "vulnerability_code": "    function _approve(address owner, address spender, uint256 value) internal {\n\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n\n\n        _allowances[owner][spender] = value;\n\n        emit Approval(owner, spender, value);\n\n    }\n\n\n",
          "message": "Function 'ERC20._approve' (SampleCrowdsale.sol#1250-1258) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1264,
          "vulnerability_to_line": 1268,
          "vulnerability_code": "    function _burnFrom(address account, uint256 amount) internal {\n\n        _burn(account, amount);\n\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n\n    }\n",
          "message": "Function 'ERC20._burnFrom' (SampleCrowdsale.sol#1264-1268) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1343,
          "vulnerability_to_line": 1348,
          "vulnerability_code": "    function _addMinter(address account) internal {\n\n        _minters.add(account);\n\n        emit MinterAdded(account);\n\n    }\n\n\n",
          "message": "Function 'MinterRole._addMinter' (SampleCrowdsale.sol#1343-1348) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1348,
          "vulnerability_to_line": 1352,
          "vulnerability_code": "    function _removeMinter(address account) internal {\n\n        _minters.remove(account);\n\n        emit MinterRemoved(account);\n\n    }\n",
          "message": "Function 'MinterRole._removeMinter' (SampleCrowdsale.sol#1348-1352) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1395,
          "vulnerability_to_line": 1402,
          "vulnerability_code": "    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\n\n        // Potentially dangerous assumption about the type of the token.\n\n        require(\n\n            ERC20Mintable(address(token())).mint(beneficiary, tokenAmount),\n\n                \"MintedCrowdsale: minting failed\"\n\n        );\n\n    }\n",
          "message": "Function 'MintedCrowdsale._deliverTokens' (SampleCrowdsale.sol#1395-1402) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 1119,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address spender, uint256 value) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 356,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Crowdsale is ReentrancyGuard {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 804,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Escrow is Secondary {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 851,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract ConditionalEscrow is Escrow {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 880,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract RefundEscrow is ConditionalEscrow {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 974,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract RefundableCrowdsale is FinalizableCrowdsale {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 1491,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract SampleCrowdsale is CappedCrowdsale, RefundableCrowdsale, MintedCrowdsale {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 192,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 222,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 298,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 339,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 538,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 587,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 686,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 738,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 789,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 844,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 867,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 960,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1043,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1273,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1312,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1356,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1381,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1406,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1461,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 314,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _guardCounter;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 361,
          "vulnerability_to_line": null,
          "vulnerability_code": "    IERC20 private _token;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 364,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address payable private _wallet;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 370,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _rate;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 373,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _weiRaised;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 548,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _cap;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 597,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _openingTime;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 598,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _closingTime;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 697,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool private _finalized;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 744,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address private _primary;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 810,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint256) private _deposits;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 886,
          "vulnerability_to_line": null,
          "vulnerability_code": "    State private _state;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 887,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address payable private _beneficiary;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 978,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _goal;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 981,
          "vulnerability_to_line": null,
          "vulnerability_code": "    RefundEscrow private _escrow;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 1072,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => uint256) private _balances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 1074,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => mapping (address => uint256)) private _allowances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 1076,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _totalSupply;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 1320,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Roles.Role private _minters;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 1412,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private _name;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 1413,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private _symbol;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 1414,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 private _decimals;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 236,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 357,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 546,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 595,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 695,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 805,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 975,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 1070,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 208,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 240,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 244,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 255,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 260,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 265,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 286,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, bytes memory returndata) = address(token).call(data);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 392,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (uint256 rate, address payable wallet, IERC20 token) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 831,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(address payable payee) public onlyPrimary {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 859,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(address payable payee) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 893,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (address payable beneficiary) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1004,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function claimRefund(address payable refundee) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1492,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 392,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (uint256 rate, address payable wallet, IERC20 token) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 393,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(rate > 0, \"Crowdsale: rate is 0\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 394,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(wallet != address(0), \"Crowdsale: wallet is the zero address\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 394,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(wallet != address(0), \"Crowdsale: wallet is the zero address\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 394,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(wallet != address(0), \"Crowdsale: wallet is the zero address\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 395,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(token) != address(0), \"Crowdsale: token is the zero address\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 395,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(token) != address(0), \"Crowdsale: token is the zero address\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 395,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(token) != address(0), \"Crowdsale: token is the zero address\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 395,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(token) != address(0), \"Crowdsale: token is the zero address\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 395,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(token) != address(0), \"Crowdsale: token is the zero address\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 397,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _rate = rate;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 398,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _wallet = wallet;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 399,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _token = token;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 832,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 payment = _deposits[payee];\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 834,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _deposits[payee] = 0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 836,
          "vulnerability_to_line": null,
          "vulnerability_code": "        payee.transfer(payment);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 838,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit Withdrawn(payee, payment);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 838,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit Withdrawn(payee, payment);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 860,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(withdrawalAllowed(payee), \"ConditionalEscrow: payee is not allowed to withdraw\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 860,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(withdrawalAllowed(payee), \"ConditionalEscrow: payee is not allowed to withdraw\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 861,
          "vulnerability_to_line": null,
          "vulnerability_code": "        super.withdraw(payee);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 894,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(beneficiary != address(0), \"RefundEscrow: beneficiary is the zero address\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 894,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(beneficiary != address(0), \"RefundEscrow: beneficiary is the zero address\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 894,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(beneficiary != address(0), \"RefundEscrow: beneficiary is the zero address\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 895,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _beneficiary = beneficiary;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 896,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _state = State.Active;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 896,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _state = State.Active;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1005,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(finalized(), \"RefundableCrowdsale: not finalized\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1006,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!goalReached(), \"RefundableCrowdsale: goal reached\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1006,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!goalReached(), \"RefundableCrowdsale: goal reached\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1008,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _escrow.withdraw(refundee);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1496,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address payable wallet,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1497,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 cap,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1498,
          "vulnerability_to_line": null,
          "vulnerability_code": "        ERC20Mintable token,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1499,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 goal\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1502,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Crowdsale(rate, wallet, token)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1502,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Crowdsale(rate, wallet, token)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1503,
          "vulnerability_to_line": null,
          "vulnerability_code": "        CappedCrowdsale(cap)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1504,
          "vulnerability_to_line": null,
          "vulnerability_code": "        TimedCrowdsale(openingTime, closingTime)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1504,
          "vulnerability_to_line": null,
          "vulnerability_code": "        TimedCrowdsale(openingTime, closingTime)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1505,
          "vulnerability_to_line": null,
          "vulnerability_code": "        RefundableCrowdsale(goal)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1509,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(goal <= cap, \"SampleCrowdSale: goal is greater than cap\");\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}