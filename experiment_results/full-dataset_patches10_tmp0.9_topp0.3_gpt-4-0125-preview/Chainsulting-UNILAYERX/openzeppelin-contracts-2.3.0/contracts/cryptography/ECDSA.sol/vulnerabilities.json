{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (v != 27 && v != 28) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return address(0);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_3"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": 71,
          "vulnerability_code": "    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n\n        // Check the signature length\n\n        if (signature.length != 65) {\n\n            return (address(0));\n\n        }\n\n\n\n        // Divide the signature in r, s and v variables\n\n        bytes32 r;\n\n        bytes32 s;\n\n        uint8 v;\n\n\n\n        // ecrecover takes the signature parameters, and the only way to get them\n\n        // currently is to use assembly.\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            r := mload(add(signature, 0x20))\n\n            s := mload(add(signature, 0x40))\n\n            v := byte(0, mload(add(signature, 0x60)))\n\n        }\n\n\n\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n\n        // the valid range for s in (281): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (282): v \u2208 {27, 28}. Most\n\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n\n        //\n\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n\n        // these malleable signatures as well.\n\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n\n            return address(0);\n\n        }\n\n\n\n        if (v != 27 && v != 28) {\n\n            return address(0);\n\n        }\n\n\n\n        // If the signature is valid (and not malleable), return the signer address\n\n        return ecrecover(hash, v, r, s);\n\n    }\n\n\n",
          "message": "ECDSA.recover (ECDSA.sol#30-71) is declared view but contains assembly code\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": 71,
          "vulnerability_code": "    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n\n        // Check the signature length\n\n        if (signature.length != 65) {\n\n            return (address(0));\n\n        }\n\n\n\n        // Divide the signature in r, s and v variables\n\n        bytes32 r;\n\n        bytes32 s;\n\n        uint8 v;\n\n\n\n        // ecrecover takes the signature parameters, and the only way to get them\n\n        // currently is to use assembly.\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            r := mload(add(signature, 0x20))\n\n            s := mload(add(signature, 0x40))\n\n            v := byte(0, mload(add(signature, 0x60)))\n\n        }\n\n\n\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n\n        // the valid range for s in (281): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (282): v \u2208 {27, 28}. Most\n\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n\n        //\n\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n\n        // these malleable signatures as well.\n\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n\n            return address(0);\n\n        }\n\n\n\n        if (v != 27 && v != 28) {\n\n            return address(0);\n\n        }\n\n\n\n        // If the signature is valid (and not malleable), return the signer address\n\n        return ecrecover(hash, v, r, s);\n\n    }\n\n\n",
          "message": "ECDSA.recover uses assembly (ECDSA.sol#30-71)\n\t- ECDSA.sol#44-48\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": "Detected issues with version pragma in ECDSA.sol:\n\t- pragma solidity^0.5.0 (ECDSA.sol#3): it allows old versions\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return (address(0));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}