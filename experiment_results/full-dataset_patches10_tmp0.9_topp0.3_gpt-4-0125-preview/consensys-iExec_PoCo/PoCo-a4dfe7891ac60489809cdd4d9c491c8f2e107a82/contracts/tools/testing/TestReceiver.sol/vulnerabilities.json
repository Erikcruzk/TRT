{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tconstructor()\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tpublic\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t{\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t}\n",
          "message": "Consider making costructor payable to save gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_10"
      ],
      "vulnerability_findings": [
        {
          "name": "pragma",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.0;\n",
          "message": "Different versions of Solidity is used in TestReceiver.sol:\n\t- Version used: ['ABIEncoderV2', '^0.6.0']\n\t- TestReceiver.sol#3 declares pragma solidity^0.6.0\n\t- TestReceiver.sol#4 declares pragma experimentalABIEncoderV2\n\t- TestReceiver.sol#14 declares pragma solidity^0.6.0\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.0;\n",
          "message": "Detected issues with version pragma in TestReceiver.sol:\n\t- pragma solidity^0.6.0 (TestReceiver.sol#3): it allows old versions\n\t- pragma solidity^0.6.0 (TestReceiver.sol#14): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction receiveApproval(address,uint256,address,bytes calldata) external returns (bool);\n",
          "message": "Parameter '' of IexecTokenSpender.receiveApproval (TestReceiver.sol#9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction receiveApproval(address,uint256,address,bytes calldata) external returns (bool);\n",
          "message": "Parameter '_scope_0' of IexecTokenSpender.receiveApproval (TestReceiver.sol#9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction receiveApproval(address,uint256,address,bytes calldata) external returns (bool);\n",
          "message": "Parameter '_scope_1' of IexecTokenSpender.receiveApproval (TestReceiver.sol#9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction receiveApproval(address,uint256,address,bytes calldata) external returns (bool);\n",
          "message": "Parameter '_scope_2' of IexecTokenSpender.receiveApproval (TestReceiver.sol#9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\taddress        _sender,\n",
          "message": "Parameter '_sender' of TestReceiver.receiveApproval (TestReceiver.sol#26) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tuint256        _value,\n",
          "message": "Parameter '_value' of TestReceiver.receiveApproval (TestReceiver.sol#27) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\taddress        _token,\n",
          "message": "Parameter '_token' of TestReceiver.receiveApproval (TestReceiver.sol#28) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tbytes calldata _extraData)\n",
          "message": "Parameter '_extraData' of TestReceiver.receiveApproval (TestReceiver.sol#29) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.0;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}