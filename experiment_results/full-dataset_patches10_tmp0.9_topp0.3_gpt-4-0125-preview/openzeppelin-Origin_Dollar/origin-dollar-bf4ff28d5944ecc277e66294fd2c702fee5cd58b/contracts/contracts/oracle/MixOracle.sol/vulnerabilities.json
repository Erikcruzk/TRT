{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 314,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < ethUsdOracles.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 326,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < ethUsdOracles.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 329,
          "vulnerability_to_line": null,
          "vulnerability_code": "                ethUsdOracles[i] = ethUsdOracles[ethUsdOracles.length - 1];\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 330,
          "vulnerability_to_line": null,
          "vulnerability_code": "                delete ethUsdOracles[ethUsdOracles.length - 1];\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 371,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint256 i = 0; i < config.ethOracles.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 379,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint256 i = 0; i < ethUsdOracles.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 393,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint256 i = 0; i < config.usdOracles.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 425,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint256 i = 0; i < config.ethOracles.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 433,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint256 i = 0; i < ethUsdOracles.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 447,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint256 i = 0; i < config.usdOracles.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 126,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 127,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _setGovernor(msg.sender);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit GovernorshipTransferred(address(0), _governor());\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _maxDrift, uint256 _minDrift) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": null,
          "vulnerability_code": "        maxDrift = _maxDrift;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 296,
          "vulnerability_to_line": null,
          "vulnerability_code": "        minDrift = _minDrift;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 297,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit DriftsUpdated(_minDrift, _maxDrift);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 298,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 314,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < ethUsdOracles.length; i++) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 315,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(ethUsdOracles[i] != oracle, \"Oracle already registered.\");\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 326,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < ethUsdOracles.length; i++) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 327,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (ethUsdOracles[i] == oracle) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 329,
          "vulnerability_to_line": null,
          "vulnerability_code": "                ethUsdOracles[i] = ethUsdOracles[ethUsdOracles.length - 1];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 329,
          "vulnerability_to_line": null,
          "vulnerability_code": "                ethUsdOracles[i] = ethUsdOracles[ethUsdOracles.length - 1];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 329,
          "vulnerability_to_line": null,
          "vulnerability_code": "                ethUsdOracles[i] = ethUsdOracles[ethUsdOracles.length - 1];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 330,
          "vulnerability_to_line": null,
          "vulnerability_code": "                delete ethUsdOracles[ethUsdOracles.length - 1];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 330,
          "vulnerability_to_line": null,
          "vulnerability_code": "                delete ethUsdOracles[ethUsdOracles.length - 1];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "                ethUsdOracles.pop();\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 379,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint256 i = 0; i < ethUsdOracles.length; i++) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 380,
          "vulnerability_to_line": null,
          "vulnerability_code": "                p = IEthUsdOracle(ethUsdOracles[i]).ethUsdPrice();\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 433,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint256 i = 0; i < ethUsdOracles.length; i++) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 434,
          "vulnerability_to_line": null,
          "vulnerability_code": "                p = IEthUsdOracle(ethUsdOracles[i]).ethUsdPrice();\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 314,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < ethUsdOracles.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 326,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < ethUsdOracles.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 371,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint256 i = 0; i < config.ethOracles.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 379,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint256 i = 0; i < ethUsdOracles.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 393,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint256 i = 0; i < config.usdOracles.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 425,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint256 i = 0; i < config.ethOracles.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 433,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint256 i = 0; i < ethUsdOracles.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 447,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint256 i = 0; i < config.usdOracles.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 166,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isGovernor(), \"Caller is not the Governor\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 199,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_reentry_status != _ENTERED, \"Reentrant call\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 237,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 238,
          "vulnerability_to_line": null,
          "vulnerability_code": "            msg.sender == _pendingGovernor(),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 239,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Only the pending Governor can complete the claim\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 240,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 249,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_newGovernor != address(0), \"New Governor is address(0)\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 315,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(ethUsdOracles[i] != oracle, \"Oracle already registered.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 336,
          "vulnerability_to_line": null,
          "vulnerability_code": "        revert(\"Oracle not found\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 401,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(price <= maxDrift, \"Price exceeds maxDrift\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 402,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(price >= minDrift, \"Price below minDrift\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 403,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 404,
          "vulnerability_to_line": null,
          "vulnerability_code": "            price != MAX_INT,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 405,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"None of our oracles returned a valid min price!\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 406,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 456,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(price <= maxDrift, \"Price exceeds maxDrift\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 457,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(price >= minDrift, \"Price below minDrift\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 458,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(price != 0, \"None of our oracles returned a valid max price!\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 385,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (price != MAX_INT && ep != MAX_INT) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 386,
          "vulnerability_to_line": null,
          "vulnerability_code": "                // tokEthPrice has precision of 8 which ethUsdPrice has precision of 6\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 387,
          "vulnerability_to_line": null,
          "vulnerability_code": "                // we want precision of 8\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 388,
          "vulnerability_to_line": null,
          "vulnerability_code": "                price = (price * ep) / 1e6;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 389,
          "vulnerability_to_line": null,
          "vulnerability_code": "            }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 439,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (price != 0 && ep != 0) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 440,
          "vulnerability_to_line": null,
          "vulnerability_code": "                // tokEthPrice has precision of 8 which ethUsdPrice has precision of 6\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 441,
          "vulnerability_to_line": null,
          "vulnerability_code": "                // we want precision of 8\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 442,
          "vulnerability_to_line": null,
          "vulnerability_code": "                price = (price * ep) / 1e6;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 443,
          "vulnerability_to_line": null,
          "vulnerability_code": "            }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 314,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < ethUsdOracles.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 326,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < ethUsdOracles.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 371,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint256 i = 0; i < config.ethOracles.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 379,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint256 i = 0; i < ethUsdOracles.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 393,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint256 i = 0; i < config.usdOracles.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 425,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint256 i = 0; i < config.ethOracles.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 433,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint256 i = 0; i < ethUsdOracles.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 447,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint256 i = 0; i < config.usdOracles.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 237,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 238,
          "vulnerability_to_line": null,
          "vulnerability_code": "            msg.sender == _pendingGovernor(),\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 239,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Only the pending Governor can complete the claim\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 240,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 403,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 404,
          "vulnerability_to_line": null,
          "vulnerability_code": "            price != MAX_INT,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 405,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"None of our oracles returned a valid min price!\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 406,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 458,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(price != 0, \"None of our oracles returned a valid max price!\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_34"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": 146,
          "vulnerability_code": "    function _governor() internal view returns (address governorOut) {\n\n        bytes32 position = governorPosition;\n\n        assembly {\n\n            governorOut := sload(position)\n\n        }\n",
          "message": "Governable._governor (MixOracle.sol#141-146) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": 160,
          "vulnerability_code": "    function _pendingGovernor()\n\n        internal\n\n        view\n\n        returns (address pendingGovernor)\n\n    {\n\n        bytes32 position = pendingGovernorPosition;\n\n        assembly {\n\n            pendingGovernor := sload(position)\n\n        }\n",
          "message": "Governable._pendingGovernor (MixOracle.sol#151-160) is declared view but contains assembly code\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 325,
          "vulnerability_to_line": 337,
          "vulnerability_code": "    function unregisterEthUsdOracle(address oracle) public onlyGovernor {\n\n        for (uint256 i = 0; i < ethUsdOracles.length; i++) {\n\n            if (ethUsdOracles[i] == oracle) {\n\n                // swap with the last element of the array, and then delete last element (could be itself)\n\n                ethUsdOracles[i] = ethUsdOracles[ethUsdOracles.length - 1];\n\n                delete ethUsdOracles[ethUsdOracles.length - 1];\n\n                emit EthUsdOracleDeregistered(oracle);\n\n                ethUsdOracles.pop();\n\n                return;\n\n            }\n\n        }\n\n        revert(\"Oracle not found\");\n",
          "message": "MixOracle.unregisterEthUsdOracle (MixOracle.sol#325-337) does not use the value returned by external calls:\n\t-ethUsdOracles.pop() (MixOracle.sol#332)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 395,
          "vulnerability_to_line": null,
          "vulnerability_code": "                p = IPriceOracle(config.usdOracles[i]).price(symbol) * 1e2;\n",
          "message": "MixOracle.priceMin has external calls inside a loop:\n\t- p = IPriceOracle(config.usdOracles[i_scope_1]).price(symbol) * 1e2 (MixOracle.sol#395)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 380,
          "vulnerability_to_line": null,
          "vulnerability_code": "                p = IEthUsdOracle(ethUsdOracles[i]).ethUsdPrice();\n",
          "message": "MixOracle.priceMin has external calls inside a loop:\n\t- p = IEthUsdOracle(ethUsdOracles[i_scope_0]).ethUsdPrice() (MixOracle.sol#380)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 372,
          "vulnerability_to_line": null,
          "vulnerability_code": "                p = IEthUsdOracle(config.ethOracles[i]).tokEthPrice(symbol);\n",
          "message": "MixOracle.priceMin has external calls inside a loop:\n\t- p = IEthUsdOracle(config.ethOracles[i]).tokEthPrice(symbol) (MixOracle.sol#372)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 449,
          "vulnerability_to_line": null,
          "vulnerability_code": "                p = IPriceOracle(config.usdOracles[i]).price(symbol) * 1e2;\n",
          "message": "MixOracle.priceMax has external calls inside a loop:\n\t- p = IPriceOracle(config.usdOracles[i_scope_1]).price(symbol) * 1e2 (MixOracle.sol#449)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 434,
          "vulnerability_to_line": null,
          "vulnerability_code": "                p = IEthUsdOracle(ethUsdOracles[i]).ethUsdPrice();\n",
          "message": "MixOracle.priceMax has external calls inside a loop:\n\t- p = IEthUsdOracle(ethUsdOracles[i_scope_0]).ethUsdPrice() (MixOracle.sol#434)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 426,
          "vulnerability_to_line": null,
          "vulnerability_code": "                p = IEthUsdOracle(config.ethOracles[i]).tokEthPrice(symbol);\n",
          "message": "MixOracle.priceMax has external calls inside a loop:\n\t- p = IEthUsdOracle(config.ethOracles[i]).tokEthPrice(symbol) (MixOracle.sol#426)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "                ethUsdOracles.pop();\n",
          "message": "MixOracle.unregisterEthUsdOracle has external calls inside a loop:\n\t- ethUsdOracles.pop() (MixOracle.sol#332)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": 146,
          "vulnerability_code": "    function _governor() internal view returns (address governorOut) {\n\n        bytes32 position = governorPosition;\n\n        assembly {\n\n            governorOut := sload(position)\n\n        }\n",
          "message": "Governable._governor uses assembly (MixOracle.sol#141-146)\n\t- MixOracle.sol#143-145\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": 160,
          "vulnerability_code": "    function _pendingGovernor()\n\n        internal\n\n        view\n\n        returns (address pendingGovernor)\n\n    {\n\n        bytes32 position = pendingGovernorPosition;\n\n        assembly {\n\n            pendingGovernor := sload(position)\n\n        }\n",
          "message": "Governable._pendingGovernor uses assembly (MixOracle.sol#151-160)\n\t- MixOracle.sol#157-159\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 177,
          "vulnerability_to_line": 182,
          "vulnerability_code": "    function _setGovernor(address newGovernor) internal {\n\n        bytes32 position = governorPosition;\n\n        assembly {\n\n            sstore(position, newGovernor)\n\n        }\n",
          "message": "Governable._setGovernor uses assembly (MixOracle.sol#177-182)\n\t- MixOracle.sol#179-181\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": 220,
          "vulnerability_code": "    function _setPendingGovernor(address newGovernor) internal {\n\n        bytes32 position = pendingGovernorPosition;\n\n        assembly {\n\n            sstore(position, newGovernor)\n\n        }\n",
          "message": "Governable._setPendingGovernor uses assembly (MixOracle.sol#215-220)\n\t- MixOracle.sol#217-219\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": 136,
          "vulnerability_code": "    function governor() public view returns (address) {\n\n        return _governor();\n",
          "message": "Governable.governor (MixOracle.sol#134-136) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 300,
          "vulnerability_to_line": 307,
          "vulnerability_code": "    function setMinMaxDrift(uint256 _minDrift, uint256 _maxDrift)\n\n        public\n\n        onlyGovernor\n\n    {\n\n        minDrift = _minDrift;\n\n        maxDrift = _maxDrift;\n\n        emit DriftsUpdated(_minDrift, _maxDrift);\n",
          "message": "MixOracle.setMinMaxDrift (MixOracle.sol#300-307) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 313,
          "vulnerability_to_line": 319,
          "vulnerability_code": "    function registerEthUsdOracle(address oracle) public onlyGovernor {\n\n        for (uint256 i = 0; i < ethUsdOracles.length; i++) {\n\n            require(ethUsdOracles[i] != oracle, \"Oracle already registered.\");\n\n        }\n\n        ethUsdOracles.push(oracle);\n\n        emit EthUsdOracleRegistered(oracle);\n",
          "message": "MixOracle.registerEthUsdOracle (MixOracle.sol#313-319) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 325,
          "vulnerability_to_line": 337,
          "vulnerability_code": "    function unregisterEthUsdOracle(address oracle) public onlyGovernor {\n\n        for (uint256 i = 0; i < ethUsdOracles.length; i++) {\n\n            if (ethUsdOracles[i] == oracle) {\n\n                // swap with the last element of the array, and then delete last element (could be itself)\n\n                ethUsdOracles[i] = ethUsdOracles[ethUsdOracles.length - 1];\n\n                delete ethUsdOracles[ethUsdOracles.length - 1];\n\n                emit EthUsdOracleDeregistered(oracle);\n\n                ethUsdOracles.pop();\n\n                return;\n\n            }\n\n        }\n\n        revert(\"Oracle not found\");\n",
          "message": "MixOracle.unregisterEthUsdOracle (MixOracle.sol#325-337) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.5.11;\n",
          "message": "Detected issues with version pragma in MixOracle.sol:\n\t- pragma solidity0.5.11 (MixOracle.sol#3): it allows old versions\n\t- pragma solidity0.5.11 (MixOracle.sol#15): it allows old versions\n\t- pragma solidity0.5.11 (MixOracle.sol#75): it allows old versions\n\t- pragma solidity0.5.11 (MixOracle.sol#86): it allows old versions\n\t- pragma solidity0.5.11 (MixOracle.sol#259): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": 146,
          "vulnerability_code": "    function _governor() internal view returns (address governorOut) {\n\n        bytes32 position = governorPosition;\n\n        assembly {\n\n            governorOut := sload(position)\n\n        }\n",
          "message": "Function 'Governable._governor' (MixOracle.sol#141-146) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": 160,
          "vulnerability_code": "    function _pendingGovernor()\n\n        internal\n\n        view\n\n        returns (address pendingGovernor)\n\n    {\n\n        bytes32 position = pendingGovernorPosition;\n\n        assembly {\n\n            pendingGovernor := sload(position)\n\n        }\n",
          "message": "Function 'Governable._pendingGovernor' (MixOracle.sol#151-160) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 177,
          "vulnerability_to_line": 182,
          "vulnerability_code": "    function _setGovernor(address newGovernor) internal {\n\n        bytes32 position = governorPosition;\n\n        assembly {\n\n            sstore(position, newGovernor)\n\n        }\n",
          "message": "Function 'Governable._setGovernor' (MixOracle.sol#177-182) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": 220,
          "vulnerability_code": "    function _setPendingGovernor(address newGovernor) internal {\n\n        bytes32 position = pendingGovernorPosition;\n\n        assembly {\n\n            sstore(position, newGovernor)\n\n        }\n",
          "message": "Function 'Governable._setPendingGovernor' (MixOracle.sol#215-220) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 227,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferGovernance(address _newGovernor) external onlyGovernor {\n",
          "message": "Parameter '_newGovernor' of Governable.transferGovernance (MixOracle.sol#227) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 248,
          "vulnerability_to_line": 252,
          "vulnerability_code": "    function _changeGovernor(address _newGovernor) internal {\n\n        require(_newGovernor != address(0), \"New Governor is address(0)\");\n\n        emit GovernorshipTransferred(_governor(), _newGovernor);\n\n        _setGovernor(_newGovernor);\n",
          "message": "Function 'Governable._changeGovernor' (MixOracle.sol#248-252) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 248,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _changeGovernor(address _newGovernor) internal {\n",
          "message": "Parameter '_newGovernor' of Governable._changeGovernor (MixOracle.sol#248) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": 99,
          "vulnerability_code": "    bytes32\n",
          "message": "Constant 'Governable.governorPosition' (MixOracle.sol#98-99) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": 103,
          "vulnerability_code": "    bytes32\n",
          "message": "Constant 'Governable.pendingGovernorPosition' (MixOracle.sol#102-103) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 106,
          "vulnerability_to_line": 107,
          "vulnerability_code": "    bytes32\n",
          "message": "Constant 'Governable.reentryStatusPosition' (MixOracle.sol#106-107) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _maxDrift, uint256 _minDrift) public {\n",
          "message": "Parameter '_maxDrift' of MixOracle. (MixOracle.sol#294) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _maxDrift, uint256 _minDrift) public {\n",
          "message": "Parameter '_minDrift' of MixOracle. (MixOracle.sol#294) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 300,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMinMaxDrift(uint256 _minDrift, uint256 _maxDrift)\n",
          "message": "Parameter '_minDrift' of MixOracle.setMinMaxDrift (MixOracle.sol#300) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 300,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMinMaxDrift(uint256 _minDrift, uint256 _maxDrift)\n",
          "message": "Parameter '_maxDrift' of MixOracle.setMinMaxDrift (MixOracle.sol#300) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 constant _NOT_ENTERED = 1;\n",
          "message": "Governable._NOT_ENTERED (MixOracle.sol#110) is never used in MixOracle\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 314,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < ethUsdOracles.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 326,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < ethUsdOracles.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _governor() internal view returns (address governorOut) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _pendingGovernor()\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 314,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < ethUsdOracles.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 326,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < ethUsdOracles.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "        private constant governorPosition = 0x7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "        private constant pendingGovernorPosition = 0x44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "        private constant reentryStatusPosition = 0x53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac4535;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _governor() internal view returns (address governorOut) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _pendingGovernor()\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 179,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 202,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 210,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 344,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function registerTokenOracles(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 constant _NOT_ENTERED = 1;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 constant _ENTERED = 2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 288,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes32 => MixConfig) configs;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 290,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 constant MAX_INT = 2**256 - 1;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 346,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] calldata ethOracles,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 347,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] calldata usdOracles\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 349,
          "vulnerability_to_line": null,
          "vulnerability_code": "        MixConfig storage config = configs[keccak256(abi.encodePacked(symbol))];\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 350,
          "vulnerability_to_line": null,
          "vulnerability_code": "        config.ethOracles = ethOracles;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 351,
          "vulnerability_to_line": null,
          "vulnerability_code": "        config.usdOracles = usdOracles;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 352,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit TokenOracleRegistered(symbol, ethOracles, usdOracles);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 352,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit TokenOracleRegistered(symbol, ethOracles, usdOracles);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 352,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit TokenOracleRegistered(symbol, ethOracles, usdOracles);\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "UNKNOWN INSTRUCTION: SHR"
      ],
      "vulnerability_findings": []
    }
  }
}