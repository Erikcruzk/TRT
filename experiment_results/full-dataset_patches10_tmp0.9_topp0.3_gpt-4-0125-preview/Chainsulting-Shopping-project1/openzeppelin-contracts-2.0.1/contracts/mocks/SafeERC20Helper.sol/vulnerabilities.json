{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 234,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 235,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _failing = IERC20(new ERC20FailingMock());\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 236,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _succeeding = IERC20(new ERC20SucceedingMock());\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 237,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_40"
      ],
      "vulnerability_findings": [
        {
          "name": "constable-states",
          "vulnerability_from_line": 185,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 private _allowance;\n",
          "message": "ERC20FailingMock._allowance should be constant (SafeERC20Helper.sol#185)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 187,
          "vulnerability_to_line": 189,
          "vulnerability_code": "  function transfer(address, uint256) public returns (bool) {\n\n    return false;\n",
          "message": "ERC20FailingMock.transfer (SafeERC20Helper.sol#187-189) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 191,
          "vulnerability_to_line": 193,
          "vulnerability_code": "  function transferFrom(address, address, uint256) public returns (bool) {\n\n    return false;\n",
          "message": "ERC20FailingMock.transferFrom (SafeERC20Helper.sol#191-193) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 195,
          "vulnerability_to_line": 197,
          "vulnerability_code": "  function approve(address, uint256) public returns (bool) {\n\n    return false;\n",
          "message": "ERC20FailingMock.approve (SafeERC20Helper.sol#195-197) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 199,
          "vulnerability_to_line": 201,
          "vulnerability_code": "  function allowance(address, address) public view returns (uint256) {\n\n    return 0;\n",
          "message": "ERC20FailingMock.allowance (SafeERC20Helper.sol#199-201) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 207,
          "vulnerability_to_line": 209,
          "vulnerability_code": "  function transfer(address, uint256) public returns (bool) {\n\n    return true;\n",
          "message": "ERC20SucceedingMock.transfer (SafeERC20Helper.sol#207-209) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": 213,
          "vulnerability_code": "  function transferFrom(address, address, uint256) public returns (bool) {\n\n    return true;\n",
          "message": "ERC20SucceedingMock.transferFrom (SafeERC20Helper.sol#211-213) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": 217,
          "vulnerability_code": "  function approve(address, uint256) public returns (bool) {\n\n    return true;\n",
          "message": "ERC20SucceedingMock.approve (SafeERC20Helper.sol#215-217) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 219,
          "vulnerability_to_line": 221,
          "vulnerability_code": "  function setAllowance(uint256 allowance_) public {\n\n    _allowances[msg.sender] = allowance_;\n",
          "message": "ERC20SucceedingMock.setAllowance (SafeERC20Helper.sol#219-221) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 223,
          "vulnerability_to_line": 225,
          "vulnerability_code": "  function allowance(address owner, address) public view returns (uint256) {\n\n    return _allowances[owner];\n",
          "message": "ERC20SucceedingMock.allowance (SafeERC20Helper.sol#223-225) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 241,
          "vulnerability_to_line": 243,
          "vulnerability_code": "  function doFailingTransfer() public {\n\n    _failing.safeTransfer(address(0), 0);\n",
          "message": "SafeERC20Helper.doFailingTransfer (SafeERC20Helper.sol#241-243) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 245,
          "vulnerability_to_line": 247,
          "vulnerability_code": "  function doFailingTransferFrom() public {\n\n    _failing.safeTransferFrom(address(0), address(0), 0);\n",
          "message": "SafeERC20Helper.doFailingTransferFrom (SafeERC20Helper.sol#245-247) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 249,
          "vulnerability_to_line": 251,
          "vulnerability_code": "  function doFailingApprove() public {\n\n    _failing.safeApprove(address(0), 0);\n",
          "message": "SafeERC20Helper.doFailingApprove (SafeERC20Helper.sol#249-251) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 253,
          "vulnerability_to_line": 255,
          "vulnerability_code": "  function doFailingIncreaseAllowance() public {\n\n    _failing.safeIncreaseAllowance(address(0), 0);\n",
          "message": "SafeERC20Helper.doFailingIncreaseAllowance (SafeERC20Helper.sol#253-255) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 257,
          "vulnerability_to_line": 259,
          "vulnerability_code": "  function doFailingDecreaseAllowance() public {\n\n    _failing.safeDecreaseAllowance(address(0), 0);\n",
          "message": "SafeERC20Helper.doFailingDecreaseAllowance (SafeERC20Helper.sol#257-259) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 263,
          "vulnerability_to_line": 265,
          "vulnerability_code": "  function doSucceedingTransfer() public {\n\n    _succeeding.safeTransfer(address(0), 0);\n",
          "message": "SafeERC20Helper.doSucceedingTransfer (SafeERC20Helper.sol#263-265) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 267,
          "vulnerability_to_line": 269,
          "vulnerability_code": "  function doSucceedingTransferFrom() public {\n\n    _succeeding.safeTransferFrom(address(0), address(0), 0);\n",
          "message": "SafeERC20Helper.doSucceedingTransferFrom (SafeERC20Helper.sol#267-269) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 271,
          "vulnerability_to_line": 273,
          "vulnerability_code": "  function doSucceedingApprove(uint256 amount) public {\n\n    _succeeding.safeApprove(address(0), amount);\n",
          "message": "SafeERC20Helper.doSucceedingApprove (SafeERC20Helper.sol#271-273) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 275,
          "vulnerability_to_line": 277,
          "vulnerability_code": "  function doSucceedingIncreaseAllowance(uint256 amount) public {\n\n    _succeeding.safeIncreaseAllowance(address(0), amount);\n",
          "message": "SafeERC20Helper.doSucceedingIncreaseAllowance (SafeERC20Helper.sol#275-277) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 279,
          "vulnerability_to_line": 281,
          "vulnerability_code": "  function doSucceedingDecreaseAllowance(uint256 amount) public {\n\n    _succeeding.safeDecreaseAllowance(address(0), amount);\n",
          "message": "SafeERC20Helper.doSucceedingDecreaseAllowance (SafeERC20Helper.sol#279-281) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 283,
          "vulnerability_to_line": 285,
          "vulnerability_code": "  function setAllowance(uint256 allowance_) public {\n\n    ERC20SucceedingMock(_succeeding).setAllowance(allowance_);\n",
          "message": "SafeERC20Helper.setAllowance (SafeERC20Helper.sol#283-285) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 287,
          "vulnerability_to_line": 289,
          "vulnerability_code": "  function allowance() public view returns (uint256) {\n\n    return _succeeding.allowance(address(0), address(0));\n",
          "message": "SafeERC20Helper.allowance (SafeERC20Helper.sol#287-289) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 187,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address, uint256) public returns (bool) {\n",
          "message": "Parameter '' of ERC20FailingMock.transfer (SafeERC20Helper.sol#187) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 187,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address, uint256) public returns (bool) {\n",
          "message": "Parameter '_scope_0' of ERC20FailingMock.transfer (SafeERC20Helper.sol#187) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 191,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address, address, uint256) public returns (bool) {\n",
          "message": "Parameter '' of ERC20FailingMock.transferFrom (SafeERC20Helper.sol#191) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 191,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address, address, uint256) public returns (bool) {\n",
          "message": "Parameter '_scope_0' of ERC20FailingMock.transferFrom (SafeERC20Helper.sol#191) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 191,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address, address, uint256) public returns (bool) {\n",
          "message": "Parameter '_scope_1' of ERC20FailingMock.transferFrom (SafeERC20Helper.sol#191) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 195,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address, uint256) public returns (bool) {\n",
          "message": "Parameter '' of ERC20FailingMock.approve (SafeERC20Helper.sol#195) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 195,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address, uint256) public returns (bool) {\n",
          "message": "Parameter '_scope_0' of ERC20FailingMock.approve (SafeERC20Helper.sol#195) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 199,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address, address) public view returns (uint256) {\n",
          "message": "Parameter '' of ERC20FailingMock.allowance (SafeERC20Helper.sol#199) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 199,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address, address) public view returns (uint256) {\n",
          "message": "Parameter '_scope_0' of ERC20FailingMock.allowance (SafeERC20Helper.sol#199) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 207,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address, uint256) public returns (bool) {\n",
          "message": "Parameter '' of ERC20SucceedingMock.transfer (SafeERC20Helper.sol#207) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 207,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address, uint256) public returns (bool) {\n",
          "message": "Parameter '_scope_0' of ERC20SucceedingMock.transfer (SafeERC20Helper.sol#207) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address, address, uint256) public returns (bool) {\n",
          "message": "Parameter '' of ERC20SucceedingMock.transferFrom (SafeERC20Helper.sol#211) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address, address, uint256) public returns (bool) {\n",
          "message": "Parameter '_scope_0' of ERC20SucceedingMock.transferFrom (SafeERC20Helper.sol#211) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address, address, uint256) public returns (bool) {\n",
          "message": "Parameter '_scope_1' of ERC20SucceedingMock.transferFrom (SafeERC20Helper.sol#211) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address, uint256) public returns (bool) {\n",
          "message": "Parameter '' of ERC20SucceedingMock.approve (SafeERC20Helper.sol#215) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address, uint256) public returns (bool) {\n",
          "message": "Parameter '_scope_0' of ERC20SucceedingMock.approve (SafeERC20Helper.sol#215) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 223,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address owner, address) public view returns (uint256) {\n",
          "message": "Parameter '' of ERC20SucceedingMock.allowance (SafeERC20Helper.sol#223) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 185,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 private _allowance;\n",
          "message": "ERC20FailingMock._allowance (SafeERC20Helper.sol#185) is never used in ERC20FailingMock\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 242,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _failing.safeTransfer(address(0), 0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 246,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _failing.safeTransferFrom(address(0), address(0), 0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 250,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _failing.safeApprove(address(0), 0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 254,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _failing.safeIncreaseAllowance(address(0), 0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 258,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _failing.safeDecreaseAllowance(address(0), 0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 264,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _succeeding.safeTransfer(address(0), 0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 268,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _succeeding.safeTransferFrom(address(0), address(0), 0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 272,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _succeeding.safeApprove(address(0), amount);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 276,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _succeeding.safeIncreaseAllowance(address(0), amount);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 280,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _succeeding.safeDecreaseAllowance(address(0), amount);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 288,
          "vulnerability_to_line": null,
          "vulnerability_code": "    return _succeeding.allowance(address(0), address(0));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 195,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address, uint256) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address, uint256) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_TRANSFER_SHOULD_THROW",
          "vulnerability_from_line": 187,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address, uint256) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_TRANSFER_SHOULD_THROW",
          "vulnerability_from_line": 191,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address, address, uint256) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_TRANSFER_SHOULD_THROW",
          "vulnerability_from_line": 207,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address, uint256) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_TRANSFER_SHOULD_THROW",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address, address, uint256) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 181,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 185,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 private _allowance;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping (address => uint256) private _allowances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 231,
          "vulnerability_to_line": null,
          "vulnerability_code": "  IERC20 private _failing;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "  IERC20 private _succeeding;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 119,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 153,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(token.approve(spender, value));\n",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 164,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(token.approve(spender, newAllowance));\n",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 175,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(token.approve(spender, newAllowance));\n",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}