{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 229,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract PolyDistribution is Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 243,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 public grandTotalAllocated = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 244,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 public grandTotalClaimed = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(allocations[_recipient].totalAllocated == 0 && _totalAllocated > 0);\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 279,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_supply >= 0 && _supply <= 5);\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_56"
      ],
      "vulnerability_findings": [
        {
          "name": "unused-return",
          "vulnerability_from_line": 309,
          "vulnerability_to_line": 325,
          "vulnerability_code": "  function transferTokens (address _recipient) public {\n\n    require(allocations[_recipient].amountClaimed < allocations[_recipient].totalAllocated);\n\n    require(now >= allocations[_recipient].endCliff);\n\n    uint256 newAmountClaimed;\n\n    if (allocations[_recipient].endVesting > now) {\n\n      // Transfer available amount based on vesting schedule and allocation\n\n      newAmountClaimed = allocations[_recipient].totalAllocated.mul(now.sub(startTime)).div(allocations[_recipient].endVesting.sub(startTime));\n\n    } else {\n\n      // Transfer total allocated (minus previously claimed tokens)\n\n      newAmountClaimed = allocations[_recipient].totalAllocated;\n\n    }\n\n    uint256 tokensToTransfer = newAmountClaimed.sub(allocations[_recipient].amountClaimed);\n\n    allocations[_recipient].amountClaimed = newAmountClaimed;\n\n    POLY.transfer(_recipient, tokensToTransfer);\n\n    grandTotalClaimed = grandTotalClaimed.add(tokensToTransfer);\n\n    LogPolyClaimed(_recipient, allocations[_recipient].AllocationSupply, tokensToTransfer, newAmountClaimed, grandTotalClaimed);\n",
          "message": "PolyDistribution.transferTokens (PolyDistribution.sol#309-325) does not use the value returned by external calls:\n\t-POLY.transfer(_recipient,tokensToTransfer) (PolyDistribution.sol#322)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 328,
          "vulnerability_to_line": 333,
          "vulnerability_code": "  function refundTokens(address _recipient, address _token) public onlyOwner {\n\n    require(_token != address(this));\n\n    IERC20 token = IERC20(_token);\n\n    uint256 balance = token.balanceOf(this);\n\n    token.transfer(_recipient, balance);\n",
          "message": "PolyDistribution.refundTokens (PolyDistribution.sol#328-333) does not use the value returned by external calls:\n\t-token.transfer(_recipient,balance) (PolyDistribution.sol#332)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 309,
          "vulnerability_to_line": 325,
          "vulnerability_code": "  function transferTokens (address _recipient) public {\n\n    require(allocations[_recipient].amountClaimed < allocations[_recipient].totalAllocated);\n\n    require(now >= allocations[_recipient].endCliff);\n\n    uint256 newAmountClaimed;\n\n    if (allocations[_recipient].endVesting > now) {\n\n      // Transfer available amount based on vesting schedule and allocation\n\n      newAmountClaimed = allocations[_recipient].totalAllocated.mul(now.sub(startTime)).div(allocations[_recipient].endVesting.sub(startTime));\n\n    } else {\n\n      // Transfer total allocated (minus previously claimed tokens)\n\n      newAmountClaimed = allocations[_recipient].totalAllocated;\n\n    }\n\n    uint256 tokensToTransfer = newAmountClaimed.sub(allocations[_recipient].amountClaimed);\n\n    allocations[_recipient].amountClaimed = newAmountClaimed;\n\n    POLY.transfer(_recipient, tokensToTransfer);\n\n    grandTotalClaimed = grandTotalClaimed.add(tokensToTransfer);\n\n    LogPolyClaimed(_recipient, allocations[_recipient].AllocationSupply, tokensToTransfer, newAmountClaimed, grandTotalClaimed);\n",
          "message": "Reentrancy in PolyDistribution.transferTokens (PolyDistribution.sol#309-325):\n\tExternal calls:\n\t- POLY.transfer(_recipient,tokensToTransfer) (PolyDistribution.sol#322)\n\tState variables written after the call(s):\n\t- grandTotalClaimed (PolyDistribution.sol#323)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "  string public name = 'Polymath';\n",
          "message": "PolyToken.name should be constant (PolyDistribution.sol#62)\nPolyToken.symbol should be constant (PolyDistribution.sol#63)\nPolyToken.totalSupply should be constant (PolyDistribution.sol#66)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": 85,
          "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n\n    return balances[_owner];\n",
          "message": "PolyToken.balanceOf (PolyDistribution.sol#83-85) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
          "message": "IERC20.balanceOf (PolyDistribution.sol#10) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256);\n",
          "message": "IERC20.allowance (PolyDistribution.sol#11) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": 95,
          "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n\n    return allowed[_owner][_spender];\n",
          "message": "PolyToken.allowance (PolyDistribution.sol#93-95) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": 111,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    require(_value <= balances[msg.sender]);\n\n\n\n    // SafeMath.sub will throw if there is not enough balance.\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
          "message": "PolyToken.transfer (PolyDistribution.sol#102-111) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
          "message": "IERC20.transfer (PolyDistribution.sol#12) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 119,
          "vulnerability_to_line": 129,
          "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    require(_value <= balances[_from]);\n\n    require(_value <= allowed[_from][msg.sender]);\n\n\n\n    balances[_from] = balances[_from].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n    Transfer(_from, _to, _value);\n\n    return true;\n",
          "message": "PolyToken.transferFrom (PolyDistribution.sol#119-129) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address from, address to, uint256 value) public returns (bool);\n",
          "message": "IERC20.transferFrom (PolyDistribution.sol#13) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool);\n",
          "message": "IERC20.approve (PolyDistribution.sol#14) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": 145,
          "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n\n    allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n",
          "message": "PolyToken.approve (PolyDistribution.sol#141-145) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": 161,
          "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
          "message": "PolyToken.increaseApproval (PolyDistribution.sol#157-161) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": 182,
          "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n\n    uint oldValue = allowed[msg.sender][_spender];\n\n    if (_subtractedValue > oldValue) {\n\n      allowed[msg.sender][_spender] = 0;\n\n    } else {\n\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\n    }\n\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
          "message": "PolyToken.decreaseApproval (PolyDistribution.sol#173-182) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": 220,
          "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n",
          "message": "Ownable.transferOwnership (PolyDistribution.sol#216-220) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 277,
          "vulnerability_to_line": 303,
          "vulnerability_code": "  function setAllocation (address _recipient, uint256 _totalAllocated, uint8 _supply) onlyOwner public {\n\n    require(allocations[_recipient].totalAllocated == 0 && _totalAllocated > 0);\n\n    require(_supply >= 0 && _supply <= 5);\n\n    require(_recipient != address(0));\n\n    if (_supply == 0) {\n\n      AVAILABLE_PRESALE_SUPPLY = AVAILABLE_PRESALE_SUPPLY.sub(_totalAllocated);\n\n      allocations[_recipient] = Allocation(uint8(AllocationType.PRESALE), 0, 0, _totalAllocated, 0);\n\n    } else if (_supply == 1) {\n\n      AVAILABLE_FOUNDER_SUPPLY = AVAILABLE_FOUNDER_SUPPLY.sub(_totalAllocated);\n\n      allocations[_recipient] = Allocation(uint8(AllocationType.FOUNDER), startTime + 1 years, startTime + 4 years, _totalAllocated, 0);\n\n    } else if (_supply == 2) {\n\n      AVAILABLE_AIRDROP_SUPPLY = AVAILABLE_AIRDROP_SUPPLY.sub(_totalAllocated);\n\n      allocations[_recipient] = Allocation(uint8(AllocationType.AIRDROP), 0, 0, _totalAllocated, 0);\n\n    } else if (_supply == 3) {\n\n      AVAILABLE_ADVISOR_SUPPLY = AVAILABLE_ADVISOR_SUPPLY.sub(_totalAllocated);\n\n      allocations[_recipient] = Allocation(uint8(AllocationType.ADVISOR), startTime + 212 days, 0, _totalAllocated, 0);\n\n    } else if (_supply == 4) {\n\n      AVAILABLE_BONUS_SUPPLY = AVAILABLE_BONUS_SUPPLY.sub(_totalAllocated);\n\n      allocations[_recipient] = Allocation(uint8(AllocationType.BONUS), startTime + 1 years, startTime + 4 years, _totalAllocated, 0);\n\n    } else if (_supply == 5) {\n\n      AVAILABLE_RESERVE_SUPPLY = AVAILABLE_RESERVE_SUPPLY.sub(_totalAllocated);\n\n      allocations[_recipient] = Allocation(uint8(AllocationType.RESERVE), startTime + 182 days, startTime + 4 years, _totalAllocated, 0);\n\n    }\n\n    AVAILABLE_TOTAL_SUPPLY = AVAILABLE_TOTAL_SUPPLY.sub(_totalAllocated);\n\n    grandTotalAllocated = grandTotalAllocated.add(_totalAllocated);\n\n    LogNewAllocation(_recipient, _supply, _totalAllocated, grandTotalAllocated);\n",
          "message": "PolyDistribution.setAllocation (PolyDistribution.sol#277-303) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 309,
          "vulnerability_to_line": 325,
          "vulnerability_code": "  function transferTokens (address _recipient) public {\n\n    require(allocations[_recipient].amountClaimed < allocations[_recipient].totalAllocated);\n\n    require(now >= allocations[_recipient].endCliff);\n\n    uint256 newAmountClaimed;\n\n    if (allocations[_recipient].endVesting > now) {\n\n      // Transfer available amount based on vesting schedule and allocation\n\n      newAmountClaimed = allocations[_recipient].totalAllocated.mul(now.sub(startTime)).div(allocations[_recipient].endVesting.sub(startTime));\n\n    } else {\n\n      // Transfer total allocated (minus previously claimed tokens)\n\n      newAmountClaimed = allocations[_recipient].totalAllocated;\n\n    }\n\n    uint256 tokensToTransfer = newAmountClaimed.sub(allocations[_recipient].amountClaimed);\n\n    allocations[_recipient].amountClaimed = newAmountClaimed;\n\n    POLY.transfer(_recipient, tokensToTransfer);\n\n    grandTotalClaimed = grandTotalClaimed.add(tokensToTransfer);\n\n    LogPolyClaimed(_recipient, allocations[_recipient].AllocationSupply, tokensToTransfer, newAmountClaimed, grandTotalClaimed);\n",
          "message": "PolyDistribution.transferTokens (PolyDistribution.sol#309-325) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 328,
          "vulnerability_to_line": 333,
          "vulnerability_code": "  function refundTokens(address _recipient, address _token) public onlyOwner {\n\n    require(_token != address(this));\n\n    IERC20 token = IERC20(_token);\n\n    uint256 balance = token.balanceOf(this);\n\n    token.transfer(_recipient, balance);\n",
          "message": "PolyDistribution.refundTokens (PolyDistribution.sol#328-333) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": "Detected issues with version pragma in PolyDistribution.sol:\n\t- pragma solidity^0.4.18 (PolyDistribution.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n",
          "message": "Parameter '_owner' of PolyToken.balanceOf (PolyDistribution.sol#83) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n",
          "message": "Parameter '_owner' of PolyToken.allowance (PolyDistribution.sol#93) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n",
          "message": "Parameter '_spender' of PolyToken.allowance (PolyDistribution.sol#93) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_to' of PolyToken.transfer (PolyDistribution.sol#102) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of PolyToken.transfer (PolyDistribution.sol#102) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 119,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_from' of PolyToken.transferFrom (PolyDistribution.sol#119) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 119,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_to' of PolyToken.transferFrom (PolyDistribution.sol#119) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 119,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of PolyToken.transferFrom (PolyDistribution.sol#119) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_spender' of PolyToken.approve (PolyDistribution.sol#141) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of PolyToken.approve (PolyDistribution.sol#141) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": 76,
          "vulnerability_code": "  function PolyToken(address _polyDistributionContractAddress) public {\n\n    balances[_polyDistributionContractAddress] = totalSupply;\n",
          "message": "Function 'PolyToken.PolyToken' (PolyDistribution.sol#74-76) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function PolyToken(address _polyDistributionContractAddress) public {\n",
          "message": "Parameter '_polyDistributionContractAddress' of PolyToken.PolyToken (PolyDistribution.sol#74) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
          "message": "Parameter '_spender' of PolyToken.increaseApproval (PolyDistribution.sol#157) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
          "message": "Parameter '_addedValue' of PolyToken.increaseApproval (PolyDistribution.sol#157) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
          "message": "Parameter '_spender' of PolyToken.decreaseApproval (PolyDistribution.sol#173) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
          "message": "Parameter '_subtractedValue' of PolyToken.decreaseApproval (PolyDistribution.sol#173) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 public constant decimalFactor = 10 ** uint256(decimals);\n",
          "message": "Constant 'PolyToken.decimalFactor' (PolyDistribution.sol#65) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": 202,
          "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n",
          "message": "Function 'Ownable.Ownable' (PolyDistribution.sol#200-202) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 264,
          "vulnerability_to_line": 269,
          "vulnerability_code": "    function PolyDistribution(uint256 _startTime) public {\n\n      require(_startTime >= now);\n\n      require(AVAILABLE_TOTAL_SUPPLY == AVAILABLE_PRESALE_SUPPLY.add(AVAILABLE_FOUNDER_SUPPLY).add(AVAILABLE_AIRDROP_SUPPLY).add(AVAILABLE_ADVISOR_SUPPLY).add(AVAILABLE_BONUS_SUPPLY).add(AVAILABLE_RESERVE_SUPPLY));\n\n      startTime = _startTime;\n\n      POLY = new PolyToken(this);\n",
          "message": "Function 'PolyDistribution.PolyDistribution' (PolyDistribution.sol#264-269) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 264,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function PolyDistribution(uint256 _startTime) public {\n",
          "message": "Parameter '_startTime' of PolyDistribution.PolyDistribution (PolyDistribution.sol#264) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 277,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setAllocation (address _recipient, uint256 _totalAllocated, uint8 _supply) onlyOwner public {\n",
          "message": "Parameter '_recipient' of PolyDistribution.setAllocation (PolyDistribution.sol#277) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 277,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setAllocation (address _recipient, uint256 _totalAllocated, uint8 _supply) onlyOwner public {\n",
          "message": "Parameter '_totalAllocated' of PolyDistribution.setAllocation (PolyDistribution.sol#277) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 277,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setAllocation (address _recipient, uint256 _totalAllocated, uint8 _supply) onlyOwner public {\n",
          "message": "Parameter '_supply' of PolyDistribution.setAllocation (PolyDistribution.sol#277) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 309,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferTokens (address _recipient) public {\n",
          "message": "Parameter '_recipient' of PolyDistribution.transferTokens (PolyDistribution.sol#309) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 328,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function refundTokens(address _recipient, address _token) public onlyOwner {\n",
          "message": "Parameter '_recipient' of PolyDistribution.refundTokens (PolyDistribution.sol#328) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 328,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function refundTokens(address _recipient, address _token) public onlyOwner {\n",
          "message": "Parameter '_token' of PolyDistribution.refundTokens (PolyDistribution.sol#328) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "  PolyToken public POLY;\n",
          "message": "Variable 'PolyDistribution.POLY' (PolyDistribution.sol#232) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 236,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 public AVAILABLE_TOTAL_SUPPLY    = 1000000000 * decimals;\n",
          "message": "Variable 'PolyDistribution.AVAILABLE_TOTAL_SUPPLY' (PolyDistribution.sol#236) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 237,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 public AVAILABLE_PRESALE_SUPPLY  = 240000000 * decimals; // 100% Released on Token Distribution (TD)\n",
          "message": "Variable 'PolyDistribution.AVAILABLE_PRESALE_SUPPLY' (PolyDistribution.sol#237) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 238,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 public AVAILABLE_FOUNDER_SUPPLY  = 150000000 * decimals; // 25% Released TD +1 year + 100% released TD +4 years\n",
          "message": "Variable 'PolyDistribution.AVAILABLE_FOUNDER_SUPPLY' (PolyDistribution.sol#238) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 239,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 public AVAILABLE_AIRDROP_SUPPLY  = 10000000 * decimals;  // 10% Released on TD\n",
          "message": "Variable 'PolyDistribution.AVAILABLE_AIRDROP_SUPPLY' (PolyDistribution.sol#239) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 240,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 public AVAILABLE_ADVISOR_SUPPLY  = 25000000 * decimals;  // 100% Released on TD +\n",
          "message": "Variable 'PolyDistribution.AVAILABLE_ADVISOR_SUPPLY' (PolyDistribution.sol#240) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 241,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 public AVAILABLE_BONUS_SUPPLY    = 80000000 * decimals;  //\n",
          "message": "Variable 'PolyDistribution.AVAILABLE_BONUS_SUPPLY' (PolyDistribution.sol#241) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 242,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 public AVAILABLE_RESERVE_SUPPLY  = 495000000 * decimals; // 10M Released every month after\n",
          "message": "Variable 'PolyDistribution.AVAILABLE_RESERVE_SUPPLY' (PolyDistribution.sol#242) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 234,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 private constant decimals = 10**uint256(18);\n",
          "message": "PolyDistribution.decimals (PolyDistribution.sol#234) is never used in PolyDistribution\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 286,
          "vulnerability_to_line": null,
          "vulnerability_code": "      allocations[_recipient] = Allocation(uint8(AllocationType.FOUNDER), startTime + 1 years, startTime + 4 years, _totalAllocated, 0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 286,
          "vulnerability_to_line": null,
          "vulnerability_code": "      allocations[_recipient] = Allocation(uint8(AllocationType.FOUNDER), startTime + 1 years, startTime + 4 years, _totalAllocated, 0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": null,
          "vulnerability_code": "      allocations[_recipient] = Allocation(uint8(AllocationType.BONUS), startTime + 1 years, startTime + 4 years, _totalAllocated, 0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": null,
          "vulnerability_code": "      allocations[_recipient] = Allocation(uint8(AllocationType.BONUS), startTime + 1 years, startTime + 4 years, _totalAllocated, 0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 298,
          "vulnerability_to_line": null,
          "vulnerability_code": "      allocations[_recipient] = Allocation(uint8(AllocationType.RESERVE), startTime + 182 days, startTime + 4 years, _totalAllocated, 0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 277,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setAllocation (address _recipient, uint256 _totalAllocated, uint8 _supply) onlyOwner public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 234,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 private constant decimals = 10**uint256(18);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 230,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping (address => uint256) balances;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 315,
          "vulnerability_to_line": null,
          "vulnerability_code": "      newAmountClaimed = allocations[_recipient].totalAllocated.mul(now.sub(startTime)).div(allocations[_recipient].endVesting.sub(startTime));\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 c = a + b;\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "  string public name = 'Polymath';\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 292,
          "vulnerability_to_line": null,
          "vulnerability_code": "      allocations[_recipient] = Allocation(uint8(AllocationType.ADVISOR), startTime + 212 days, 0, _totalAllocated, 0);\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": null,
          "vulnerability_code": "      allocations[_recipient] = Allocation(uint8(AllocationType.BONUS), startTime + 1 years, startTime + 4 years, _totalAllocated, 0);\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": null,
          "vulnerability_code": "      allocations[_recipient] = Allocation(uint8(AllocationType.BONUS), startTime + 1 years, startTime + 4 years, _totalAllocated, 0);\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 298,
          "vulnerability_to_line": null,
          "vulnerability_code": "      allocations[_recipient] = Allocation(uint8(AllocationType.RESERVE), startTime + 182 days, startTime + 4 years, _totalAllocated, 0);\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 298,
          "vulnerability_to_line": null,
          "vulnerability_code": "      allocations[_recipient] = Allocation(uint8(AllocationType.RESERVE), startTime + 182 days, startTime + 4 years, _totalAllocated, 0);\n",
          "message": null
        }
      ]
    }
  }
}