{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"BigModExp failed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"Multiplication failed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"Pairing check failed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_7"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": 45,
          "vulnerability_code": "    function bigModExp(uint base, uint power, uint modulus) internal view returns (uint) {\n\n        uint[6] memory inputToBigModExp;\n\n        inputToBigModExp[0] = 32;\n\n        inputToBigModExp[1] = 32;\n\n        inputToBigModExp[2] = 32;\n\n        inputToBigModExp[3] = base;\n\n        inputToBigModExp[4] = power;\n\n        inputToBigModExp[5] = modulus;\n\n        uint[1] memory out;\n\n        bool success;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            success := staticcall(not(0), 5, inputToBigModExp, mul(6, 0x20), out, 0x20)\n\n        }\n\n        require(success, \"BigModExp failed\");\n\n        return out[0];\n",
          "message": "Precompiled.bigModExp (Precompiled.sol#29-45) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": 60,
          "vulnerability_code": "    function bn256ScalarMul(uint x, uint y, uint k) internal view returns (uint , uint ) {\n\n        uint[3] memory inputToMul;\n\n        uint[2] memory output;\n\n        inputToMul[0] = x;\n\n        inputToMul[1] = y;\n\n        inputToMul[2] = k;\n\n        bool success;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            success := staticcall(not(0), 7, inputToMul, 0x60, output, 0x40)\n\n        }\n\n        require(success, \"Multiplication failed\");\n\n        return (output[0], output[1]);\n",
          "message": "Precompiled.bn256ScalarMul (Precompiled.sol#47-60) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": 98,
          "vulnerability_code": "    function bn256Pairing(\n\n        uint x1,\n\n        uint y1,\n\n        uint a1,\n\n        uint b1,\n\n        uint c1,\n\n        uint d1,\n\n        uint x2,\n\n        uint y2,\n\n        uint a2,\n\n        uint b2,\n\n        uint c2,\n\n        uint d2)\n\n        internal view returns (bool)\n\n    {\n\n        bool success;\n\n        uint[12] memory inputToPairing;\n\n        inputToPairing[0] = x1;\n\n        inputToPairing[1] = y1;\n\n        inputToPairing[2] = a1;\n\n        inputToPairing[3] = b1;\n\n        inputToPairing[4] = c1;\n\n        inputToPairing[5] = d1;\n\n        inputToPairing[6] = x2;\n\n        inputToPairing[7] = y2;\n\n        inputToPairing[8] = a2;\n\n        inputToPairing[9] = b2;\n\n        inputToPairing[10] = c2;\n\n        inputToPairing[11] = d2;\n\n        uint[1] memory out;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            success := staticcall(not(0), 8, inputToPairing, mul(12, 0x20), out, 0x20)\n\n        }\n\n        require(success, \"Pairing check failed\");\n\n        return out[0] != 0;\n",
          "message": "Precompiled.bn256Pairing (Precompiled.sol#62-98) is declared view but contains assembly code\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": 45,
          "vulnerability_code": "    function bigModExp(uint base, uint power, uint modulus) internal view returns (uint) {\n\n        uint[6] memory inputToBigModExp;\n\n        inputToBigModExp[0] = 32;\n\n        inputToBigModExp[1] = 32;\n\n        inputToBigModExp[2] = 32;\n\n        inputToBigModExp[3] = base;\n\n        inputToBigModExp[4] = power;\n\n        inputToBigModExp[5] = modulus;\n\n        uint[1] memory out;\n\n        bool success;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            success := staticcall(not(0), 5, inputToBigModExp, mul(6, 0x20), out, 0x20)\n\n        }\n\n        require(success, \"BigModExp failed\");\n\n        return out[0];\n",
          "message": "Precompiled.bigModExp uses assembly (Precompiled.sol#29-45)\n\t- Precompiled.sol#40-42\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": 60,
          "vulnerability_code": "    function bn256ScalarMul(uint x, uint y, uint k) internal view returns (uint , uint ) {\n\n        uint[3] memory inputToMul;\n\n        uint[2] memory output;\n\n        inputToMul[0] = x;\n\n        inputToMul[1] = y;\n\n        inputToMul[2] = k;\n\n        bool success;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            success := staticcall(not(0), 7, inputToMul, 0x60, output, 0x40)\n\n        }\n\n        require(success, \"Multiplication failed\");\n\n        return (output[0], output[1]);\n",
          "message": "Precompiled.bn256ScalarMul uses assembly (Precompiled.sol#47-60)\n\t- Precompiled.sol#55-57\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": 98,
          "vulnerability_code": "    function bn256Pairing(\n\n        uint x1,\n\n        uint y1,\n\n        uint a1,\n\n        uint b1,\n\n        uint c1,\n\n        uint d1,\n\n        uint x2,\n\n        uint y2,\n\n        uint a2,\n\n        uint b2,\n\n        uint c2,\n\n        uint d2)\n\n        internal view returns (bool)\n\n    {\n\n        bool success;\n\n        uint[12] memory inputToPairing;\n\n        inputToPairing[0] = x1;\n\n        inputToPairing[1] = y1;\n\n        inputToPairing[2] = a1;\n\n        inputToPairing[3] = b1;\n\n        inputToPairing[4] = c1;\n\n        inputToPairing[5] = d1;\n\n        inputToPairing[6] = x2;\n\n        inputToPairing[7] = y2;\n\n        inputToPairing[8] = a2;\n\n        inputToPairing[9] = b2;\n\n        inputToPairing[10] = c2;\n\n        inputToPairing[11] = d2;\n\n        uint[1] memory out;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            success := staticcall(not(0), 8, inputToPairing, mul(12, 0x20), out, 0x20)\n\n        }\n\n        require(success, \"Pairing check failed\");\n\n        return out[0] != 0;\n",
          "message": "Precompiled.bn256Pairing uses assembly (Precompiled.sol#62-98)\n\t- Precompiled.sol#93-95\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.6.10;\n",
          "message": "Detected issues with version pragma in Precompiled.sol:\n\t- pragma solidity0.6.10 (Precompiled.sol#24): it allows old versions\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function bigModExp(uint base, uint power, uint modulus) internal view returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function bn256ScalarMul(uint x, uint y, uint k) internal view returns (uint , uint ) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function bn256Pairing(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function bn256ScalarMul(uint x, uint y, uint k) internal view returns (uint , uint ) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}