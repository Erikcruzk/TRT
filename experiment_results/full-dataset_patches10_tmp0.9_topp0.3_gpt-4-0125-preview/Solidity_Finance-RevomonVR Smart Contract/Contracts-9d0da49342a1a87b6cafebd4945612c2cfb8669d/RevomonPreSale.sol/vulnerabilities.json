{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 208,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract RevoPreSaleContract is Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 346,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 i = 0; i < _addresses.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 362,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i = 0; i < addresses.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 448,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < lockReason[_of].length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 472,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < lockReason[msg.sender].length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 490,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < lockReason[_of].length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 152,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor () internal { }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 169,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor () internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 170,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address msgSender = _msgSender();\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 171,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _owner = msgSender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit OwnershipTransferred(address(0), msgSender);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 277,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address revoTokenAddress, address usdtAddress, uint256 maxCapRevoInWei) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": null,
          "vulnerability_code": "        setUSDTAddress(usdtAddress);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 279,
          "vulnerability_to_line": null,
          "vulnerability_code": "        setRevoAddress(revoTokenAddress);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 280,
          "vulnerability_to_line": null,
          "vulnerability_code": "        setTokenCapInWei(maxCapRevoInWei);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 281,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 347,
          "vulnerability_to_line": null,
          "vulnerability_code": "            whitelistedAddresses[_addresses[i]] = true;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 448,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < lockReason[_of].length; i++) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 449,
          "vulnerability_to_line": null,
          "vulnerability_code": "            amount = amount.add(tokensLocked(_of, bytes32ToString(lockReason[_of][i])));\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 472,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < lockReason[msg.sender].length; i++) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 473,
          "vulnerability_to_line": null,
          "vulnerability_code": "            lockedTokens = tokensUnlockable(msg.sender, bytes32ToString(lockReason[msg.sender][i]));\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 476,
          "vulnerability_to_line": null,
          "vulnerability_code": "                locked[msg.sender][lockReason[msg.sender][i]].claimed = true;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 476,
          "vulnerability_to_line": null,
          "vulnerability_code": "                locked[msg.sender][lockReason[msg.sender][i]].claimed = true;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 477,
          "vulnerability_to_line": null,
          "vulnerability_code": "                emit Unlocked(msg.sender, lockReason[msg.sender][i], lockedTokens);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 490,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < lockReason[_of].length; i++) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 491,
          "vulnerability_to_line": null,
          "vulnerability_code": "            unlockableTokens = unlockableTokens.add(tokensUnlockable(_of, bytes32ToString(lockReason[_of][i])));\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 346,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 i = 0; i < _addresses.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 362,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i = 0; i < addresses.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 448,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < lockReason[_of].length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 472,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < lockReason[msg.sender].length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 490,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < lockReason[_of].length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 525,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint j = 0; j < 32; j++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 533,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 j = 0; j < charCount; j++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 180,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 293,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(tokenPurchaseInWei <= tokenCapRevoInWei, \"Not enough token for sale.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 313,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(started, \"Pre-sale not started.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 314,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!isWhitelistEnabled || whitelistedAddresses[msg.sender] == true, \"Not whitelisted.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 315,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(amountUSDTInWei >= minWeiPurchasable, \"Below min price allowed.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 316,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(amountUSDTInWei <= (whitelistedAddressesCap[msg.sender]).mul(10**18), \"Above max price allowed.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 317,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(salesDonePerUser[msg.sender] == false, \"Address has already bought token.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 468,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isListingDone, \"Listing not done\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 460,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (locked[_of][reason].validity <= now && !locked[_of][reason].claimed) //solhint-disable-line\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 461,
          "vulnerability_to_line": null,
          "vulnerability_code": "            amount = locked[_of][reason].amount;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 497,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (locked[_of][reason].validity > now && !locked[_of][reason].claimed) //solhint-disable-line\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 498,
          "vulnerability_to_line": null,
          "vulnerability_code": "            remainingTime = locked[_of][reason].validity.sub(now);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 503,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (locked[_of][reason].validity > now && !locked[_of][reason].claimed) //solhint-disable-line\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 504,
          "vulnerability_to_line": null,
          "vulnerability_code": "            remainingDays = (locked[_of][reason].validity.sub(now)) / 86400;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 346,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 i = 0; i < _addresses.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 362,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i = 0; i < addresses.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 448,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < lockReason[_of].length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 472,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < lockReason[msg.sender].length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 490,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < lockReason[_of].length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 525,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint j = 0; j < 32; j++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 529,
          "vulnerability_to_line": null,
          "vulnerability_code": "                charCount++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 533,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 j = 0; j < charCount; j++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 317,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(salesDonePerUser[msg.sender] == false, \"Address has already bought token.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_56"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 511,
          "vulnerability_to_line": 520,
          "vulnerability_code": "    function stringToBytes32(string memory source) public pure returns (bytes32 result) {\n\n        bytes memory tempEmptyStringTest = bytes(source);\n\n        if (tempEmptyStringTest.length == 0) {\n\n            return 0x0;\n\n        }\n\n    \n\n        assembly {\n\n            result := mload(add(source, 32))\n\n        }\n",
          "message": "RevoPreSaleContract.stringToBytes32 (RevomonPreSale.sol#511-520) is declared view but contains assembly code\n"
        },
        {
          "name": "locked-ether",
          "vulnerability_from_line": 286,
          "vulnerability_to_line": 310,
          "vulnerability_code": "    function buyTokens(uint256 amountUSDTInWei) public payable validPurchase(amountUSDTInWei) {\n\n        salesDonePerUser[msg.sender] = true;\n\n\n\n        uint256 tokenCountWei = amountUSDTInWei.mul(10**18).div(BASE_PRICE_IN_WEI);\n\n\n\n        tokenPurchaseInWei = tokenPurchaseInWei.add(tokenCountWei);\n\n        \n\n        require(tokenPurchaseInWei <= tokenCapRevoInWei, \"Not enough token for sale.\");\n\n    \n\n        contributors = contributors.add(1);\n\n        \n\n        forwardFunds(amountUSDTInWei);\n\n        \n\n        //LOCK PART\n\n        uint lockAmountStage = calculatePercentage(tokenCountWei, 20, 1000000);\n\n\n\n        lock(\"lock_1\", lockAmountStage, 0); //First unlock at listing\n\n        lock(\"lock_2\", lockAmountStage, vestingStartTime.sub(now).add(FOURTEEN_DAYS_IN_SECONDS.mul(1))); //04/12/2021 + 14 days\n\n        lock(\"lock_3\", lockAmountStage, vestingStartTime.sub(now).add(FOURTEEN_DAYS_IN_SECONDS.mul(2))); //04/12/2021 + 28 days\n\n        lock(\"lock_4\", lockAmountStage, vestingStartTime.sub(now).add(FOURTEEN_DAYS_IN_SECONDS.mul(3))); //04/12/2021 + 42 days\n\n        lock(\"lock_5\", lockAmountStage, vestingStartTime.sub(now).add(FOURTEEN_DAYS_IN_SECONDS.mul(4))); //04/12/2021 + 56 days\n\n        \n\n\n\n        emit BuyTokenEvent(tokenPurchaseInWei);\n",
          "message": "Contract locking ether found in RevomonPreSale.sol:\n\tContract RevoPreSaleContract has payable functions:\n\t - buyTokens (RevomonPreSale.sol#286-310)\n\tBut does not have a function to withdraw the ether\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 324,
          "vulnerability_to_line": 326,
          "vulnerability_code": "    function forwardFunds(uint256 amount) internal {\n\n        usdtToken.transferFrom(msg.sender, address(owner()), amount);\n",
          "message": "RevoPreSaleContract.forwardFunds (RevomonPreSale.sol#324-326) does not use the value returned by external calls:\n\t-usdtToken.transferFrom(msg.sender,address(owner()),amount) (RevomonPreSale.sol#325)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 371,
          "vulnerability_to_line": 373,
          "vulnerability_code": "    function withdrawTokens(uint256 amount) public onlyOwner {\n\n        revoToken.transfer(owner(), amount);\n",
          "message": "RevoPreSaleContract.withdrawTokens (RevomonPreSale.sol#371-373) does not use the value returned by external calls:\n\t-revoToken.transfer(owner(),amount) (RevomonPreSale.sol#372)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 467,
          "vulnerability_to_line": 483,
          "vulnerability_code": "    function unlock() public returns (uint256 unlockableTokens) {\n\n        require(isListingDone, \"Listing not done\");\n\n        \n\n        uint256 lockedTokens;\n\n\n\n        for (uint256 i = 0; i < lockReason[msg.sender].length; i++) {\n\n            lockedTokens = tokensUnlockable(msg.sender, bytes32ToString(lockReason[msg.sender][i]));\n\n            if (lockedTokens > 0) {\n\n                unlockableTokens = unlockableTokens.add(lockedTokens);\n\n                locked[msg.sender][lockReason[msg.sender][i]].claimed = true;\n\n                emit Unlocked(msg.sender, lockReason[msg.sender][i], lockedTokens);\n\n            }\n\n        }  \n\n\n\n        if (unlockableTokens > 0)\n\n            revoToken.transfer(msg.sender, unlockableTokens);\n",
          "message": "RevoPreSaleContract.unlock (RevomonPreSale.sol#467-483) does not use the value returned by external calls:\n\t-revoToken.transfer(msg.sender,unlockableTokens) (RevomonPreSale.sol#482)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 277,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address revoTokenAddress, address usdtAddress, uint256 maxCapRevoInWei) public {\n",
          "message": "RevoPreSaleContract.constructor.usdtAddress (local variable @ RevomonPreSale.sol#277) shadows:\n\t- RevoPreSaleContract.usdtAddress (state variable @ RevomonPreSale.sol#236)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 286,
          "vulnerability_to_line": 310,
          "vulnerability_code": "    function buyTokens(uint256 amountUSDTInWei) public payable validPurchase(amountUSDTInWei) {\n\n        salesDonePerUser[msg.sender] = true;\n\n\n\n        uint256 tokenCountWei = amountUSDTInWei.mul(10**18).div(BASE_PRICE_IN_WEI);\n\n\n\n        tokenPurchaseInWei = tokenPurchaseInWei.add(tokenCountWei);\n\n        \n\n        require(tokenPurchaseInWei <= tokenCapRevoInWei, \"Not enough token for sale.\");\n\n    \n\n        contributors = contributors.add(1);\n\n        \n\n        forwardFunds(amountUSDTInWei);\n\n        \n\n        //LOCK PART\n\n        uint lockAmountStage = calculatePercentage(tokenCountWei, 20, 1000000);\n\n\n\n        lock(\"lock_1\", lockAmountStage, 0); //First unlock at listing\n\n        lock(\"lock_2\", lockAmountStage, vestingStartTime.sub(now).add(FOURTEEN_DAYS_IN_SECONDS.mul(1))); //04/12/2021 + 14 days\n\n        lock(\"lock_3\", lockAmountStage, vestingStartTime.sub(now).add(FOURTEEN_DAYS_IN_SECONDS.mul(2))); //04/12/2021 + 28 days\n\n        lock(\"lock_4\", lockAmountStage, vestingStartTime.sub(now).add(FOURTEEN_DAYS_IN_SECONDS.mul(3))); //04/12/2021 + 42 days\n\n        lock(\"lock_5\", lockAmountStage, vestingStartTime.sub(now).add(FOURTEEN_DAYS_IN_SECONDS.mul(4))); //04/12/2021 + 56 days\n\n        \n\n\n\n        emit BuyTokenEvent(tokenPurchaseInWei);\n",
          "message": "Reentrancy in RevoPreSaleContract.buyTokens (RevomonPreSale.sol#286-310):\n\tExternal calls:\n\t- forwardFunds(amountUSDTInWei) (RevomonPreSale.sol#297)\n\tState variables written after the call(s):\n\t- lockReason (RevomonPreSale.sol#302)\n\t- lockReason (RevomonPreSale.sol#303)\n\t- lockReason (RevomonPreSale.sol#304)\n\t- lockReason (RevomonPreSale.sol#305)\n\t- lockReason (RevomonPreSale.sol#306)\n\t- locked (RevomonPreSale.sol#302)\n\t- locked (RevomonPreSale.sol#303)\n\t- locked (RevomonPreSale.sol#304)\n\t- locked (RevomonPreSale.sol#305)\n\t- locked (RevomonPreSale.sol#306)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 511,
          "vulnerability_to_line": 520,
          "vulnerability_code": "    function stringToBytes32(string memory source) public pure returns (bytes32 result) {\n\n        bytes memory tempEmptyStringTest = bytes(source);\n\n        if (tempEmptyStringTest.length == 0) {\n\n            return 0x0;\n\n        }\n\n    \n\n        assembly {\n\n            result := mload(add(source, 32))\n\n        }\n",
          "message": "RevoPreSaleContract.stringToBytes32 uses assembly (RevomonPreSale.sol#511-520)\n\t- RevomonPreSale.sol#517-519\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 233,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public vestingStartTime = 1618250400;\n",
          "message": "RevoPreSaleContract.vestingStartTime should be constant (RevomonPreSale.sol#233)\n"
        },
        {
          "name": "pragma",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.6.0;\n",
          "message": "Different versions of Solidity is used in RevomonPreSale.sol:\n\t- Version used: ['0.6.0', 'ABIEncoderV2']\n\t- RevomonPreSale.sol#3 declares pragma solidity0.6.0\n\t- RevomonPreSale.sol#4 declares pragma experimentalABIEncoderV2\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 184,
          "vulnerability_to_line": 187,
          "vulnerability_code": "    function renounceOwnership() public virtual onlyOwner {\n\n        emit OwnershipTransferred(_owner, address(0));\n\n        _owner = address(0);\n",
          "message": "Ownable.renounceOwnership (RevomonPreSale.sol#184-187) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 189,
          "vulnerability_to_line": 193,
          "vulnerability_code": "    function transferOwnership(address newOwner) public virtual onlyOwner {\n\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n\n        emit OwnershipTransferred(_owner, newOwner);\n\n        _owner = newOwner;\n",
          "message": "Ownable.transferOwnership (RevomonPreSale.sol#189-193) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 286,
          "vulnerability_to_line": 310,
          "vulnerability_code": "    function buyTokens(uint256 amountUSDTInWei) public payable validPurchase(amountUSDTInWei) {\n\n        salesDonePerUser[msg.sender] = true;\n\n\n\n        uint256 tokenCountWei = amountUSDTInWei.mul(10**18).div(BASE_PRICE_IN_WEI);\n\n\n\n        tokenPurchaseInWei = tokenPurchaseInWei.add(tokenCountWei);\n\n        \n\n        require(tokenPurchaseInWei <= tokenCapRevoInWei, \"Not enough token for sale.\");\n\n    \n\n        contributors = contributors.add(1);\n\n        \n\n        forwardFunds(amountUSDTInWei);\n\n        \n\n        //LOCK PART\n\n        uint lockAmountStage = calculatePercentage(tokenCountWei, 20, 1000000);\n\n\n\n        lock(\"lock_1\", lockAmountStage, 0); //First unlock at listing\n\n        lock(\"lock_2\", lockAmountStage, vestingStartTime.sub(now).add(FOURTEEN_DAYS_IN_SECONDS.mul(1))); //04/12/2021 + 14 days\n\n        lock(\"lock_3\", lockAmountStage, vestingStartTime.sub(now).add(FOURTEEN_DAYS_IN_SECONDS.mul(2))); //04/12/2021 + 28 days\n\n        lock(\"lock_4\", lockAmountStage, vestingStartTime.sub(now).add(FOURTEEN_DAYS_IN_SECONDS.mul(3))); //04/12/2021 + 42 days\n\n        lock(\"lock_5\", lockAmountStage, vestingStartTime.sub(now).add(FOURTEEN_DAYS_IN_SECONDS.mul(4))); //04/12/2021 + 56 days\n\n        \n\n\n\n        emit BuyTokenEvent(tokenPurchaseInWei);\n",
          "message": "RevoPreSaleContract.buyTokens (RevomonPreSale.sol#286-310) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 329,
          "vulnerability_to_line": 331,
          "vulnerability_code": "    function enableWhitelistVerification() public onlyOwner {\n\n        isWhitelistEnabled = true;\n",
          "message": "RevoPreSaleContract.enableWhitelistVerification (RevomonPreSale.sol#329-331) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 333,
          "vulnerability_to_line": 335,
          "vulnerability_code": "    function disableWhitelistVerification() public onlyOwner {\n\n        isWhitelistEnabled = false;\n",
          "message": "RevoPreSaleContract.disableWhitelistVerification (RevomonPreSale.sol#333-335) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 337,
          "vulnerability_to_line": 339,
          "vulnerability_code": "    function changeMinWeiPurchasable(uint256 value) public onlyOwner {\n\n        minWeiPurchasable = value;\n",
          "message": "RevoPreSaleContract.changeMinWeiPurchasable (RevomonPreSale.sol#337-339) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 341,
          "vulnerability_to_line": 343,
          "vulnerability_code": "    function changeStartedState(bool value) public onlyOwner {\n\n        started = value;\n",
          "message": "RevoPreSaleContract.changeStartedState (RevomonPreSale.sol#341-343) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 345,
          "vulnerability_to_line": 350,
          "vulnerability_code": "    function addToWhitelistPartners(address[] memory _addresses, uint256[] memory _maxCaps) public onlyOwner {\n\n        for(uint256 i = 0; i < _addresses.length; i++) {\n\n            whitelistedAddresses[_addresses[i]] = true;\n\n            updateWhitelistAdressCap(_addresses[i], _maxCaps[i]);\n\n        }\n",
          "message": "RevoPreSaleContract.addToWhitelistPartners (RevomonPreSale.sol#345-350) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 361,
          "vulnerability_to_line": 365,
          "vulnerability_code": "    function addToWhitelist(address[] memory addresses) public onlyOwner {\n\n        for(uint i = 0; i < addresses.length; i++) {\n\n            addToWhitelist(addresses[i]);\n\n        }\n",
          "message": "RevoPreSaleContract.addToWhitelist (RevomonPreSale.sol#361-365) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 367,
          "vulnerability_to_line": 369,
          "vulnerability_code": "    function isAddressWhitelisted(address _address) view public returns(bool) {\n\n        return !isWhitelistEnabled || whitelistedAddresses[_address] == true;\n",
          "message": "RevoPreSaleContract.isAddressWhitelisted (RevomonPreSale.sol#367-369) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 371,
          "vulnerability_to_line": 373,
          "vulnerability_code": "    function withdrawTokens(uint256 amount) public onlyOwner {\n\n        revoToken.transfer(owner(), amount);\n",
          "message": "RevoPreSaleContract.withdrawTokens (RevomonPreSale.sol#371-373) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 375,
          "vulnerability_to_line": 377,
          "vulnerability_code": "    function setListingDone(bool isDone) public onlyOwner {\n\n        isListingDone = isDone;\n",
          "message": "RevoPreSaleContract.setListingDone (RevomonPreSale.sol#375-377) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 390,
          "vulnerability_to_line": 392,
          "vulnerability_code": "    function setMaxDefaultUsdtAllocInEth(uint256 _maxDefaultUsdtETH) public onlyOwner{\n\n        maxDefaultUsdtETH = _maxDefaultUsdtETH;\n",
          "message": "RevoPreSaleContract.setMaxDefaultUsdtAllocInEth (RevomonPreSale.sol#390-392) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 445,
          "vulnerability_to_line": 451,
          "vulnerability_code": "    function totalBalanceOf(address _of) public view returns (uint256 amount) {\n\n        amount = revoToken.balanceOf(_of);\n\n\n\n        for (uint256 i = 0; i < lockReason[_of].length; i++) {\n\n            amount = amount.add(tokensLocked(_of, bytes32ToString(lockReason[_of][i])));\n\n        }   \n",
          "message": "RevoPreSaleContract.totalBalanceOf (RevomonPreSale.sol#445-451) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 467,
          "vulnerability_to_line": 483,
          "vulnerability_code": "    function unlock() public returns (uint256 unlockableTokens) {\n\n        require(isListingDone, \"Listing not done\");\n\n        \n\n        uint256 lockedTokens;\n\n\n\n        for (uint256 i = 0; i < lockReason[msg.sender].length; i++) {\n\n            lockedTokens = tokensUnlockable(msg.sender, bytes32ToString(lockReason[msg.sender][i]));\n\n            if (lockedTokens > 0) {\n\n                unlockableTokens = unlockableTokens.add(lockedTokens);\n\n                locked[msg.sender][lockReason[msg.sender][i]].claimed = true;\n\n                emit Unlocked(msg.sender, lockReason[msg.sender][i], lockedTokens);\n\n            }\n\n        }  \n\n\n\n        if (unlockableTokens > 0)\n\n            revoToken.transfer(msg.sender, unlockableTokens);\n",
          "message": "RevoPreSaleContract.unlock (RevomonPreSale.sol#467-483) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 489,
          "vulnerability_to_line": 493,
          "vulnerability_code": "    function getUnlockableTokens(address _of) public view returns (uint256 unlockableTokens) {\n\n        for (uint256 i = 0; i < lockReason[_of].length; i++) {\n\n            unlockableTokens = unlockableTokens.add(tokensUnlockable(_of, bytes32ToString(lockReason[_of][i])));\n\n        }  \n",
          "message": "RevoPreSaleContract.getUnlockableTokens (RevomonPreSale.sol#489-493) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 495,
          "vulnerability_to_line": 499,
          "vulnerability_code": "    function getremainingLockTime(address _of, string memory _reason) public view returns (uint256 remainingTime) {\n\n        bytes32 reason = stringToBytes32(_reason);\n\n        if (locked[_of][reason].validity > now && !locked[_of][reason].claimed) //solhint-disable-line\n\n            remainingTime = locked[_of][reason].validity.sub(now);\n",
          "message": "RevoPreSaleContract.getremainingLockTime (RevomonPreSale.sol#495-499) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 501,
          "vulnerability_to_line": 505,
          "vulnerability_code": "    function getremainingLockDays(address _of, string memory _reason) public view returns (uint256 remainingDays) {\n\n        bytes32 reason = stringToBytes32(_reason);\n\n        if (locked[_of][reason].validity > now && !locked[_of][reason].claimed) //solhint-disable-line\n\n            remainingDays = (locked[_of][reason].validity.sub(now)) / 86400;\n",
          "message": "RevoPreSaleContract.getremainingLockDays (RevomonPreSale.sol#501-505) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.6.0;\n",
          "message": "Detected issues with version pragma in RevomonPreSale.sol:\n\t- pragma solidity0.6.0 (RevomonPreSale.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 154,
          "vulnerability_to_line": 156,
          "vulnerability_code": "    function _msgSender() internal view virtual returns (address payable) {\n\n        return msg.sender;\n",
          "message": "Function 'Context._msgSender' (RevomonPreSale.sol#154-156) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": 161,
          "vulnerability_code": "    function _msgData() internal view virtual returns (bytes memory) {\n\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n\n        return msg.data;\n",
          "message": "Function 'Context._msgData' (RevomonPreSale.sol#158-161) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": 256,
          "vulnerability_code": "    struct lockToken {\n\n        uint256 amount;\n\n        uint256 validity;\n\n        bool claimed;\n",
          "message": "Struct 'RevoPreSaleContract.lockToken' (RevomonPreSale.sol#252-256) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 345,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addToWhitelistPartners(address[] memory _addresses, uint256[] memory _maxCaps) public onlyOwner {\n",
          "message": "Parameter '_addresses' of RevoPreSaleContract.addToWhitelistPartners (RevomonPreSale.sol#345) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 345,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addToWhitelistPartners(address[] memory _addresses, uint256[] memory _maxCaps) public onlyOwner {\n",
          "message": "Parameter '_maxCaps' of RevoPreSaleContract.addToWhitelistPartners (RevomonPreSale.sol#345) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 352,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function updateWhitelistAdressCap(address _address, uint256 _maxCap) public onlyOwner {\n",
          "message": "Parameter '_address' of RevoPreSaleContract.updateWhitelistAdressCap (RevomonPreSale.sol#352) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 352,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function updateWhitelistAdressCap(address _address, uint256 _maxCap) public onlyOwner {\n",
          "message": "Parameter '_maxCap' of RevoPreSaleContract.updateWhitelistAdressCap (RevomonPreSale.sol#352) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 356,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addToWhitelist(address _address) public onlyOwner {\n",
          "message": "Parameter '_address' of RevoPreSaleContract.addToWhitelist (RevomonPreSale.sol#356) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 367,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isAddressWhitelisted(address _address) view public returns(bool) {\n",
          "message": "Parameter '_address' of RevoPreSaleContract.isAddressWhitelisted (RevomonPreSale.sol#367) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 379,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setUSDTAddress(address _usdtAddress) public onlyOwner{\n",
          "message": "Parameter '_usdtAddress' of RevoPreSaleContract.setUSDTAddress (RevomonPreSale.sol#379) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 384,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setRevoAddress(address _revoAddress) public onlyOwner{\n",
          "message": "Parameter '_revoAddress' of RevoPreSaleContract.setRevoAddress (RevomonPreSale.sol#384) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 390,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMaxDefaultUsdtAllocInEth(uint256 _maxDefaultUsdtETH) public onlyOwner{\n",
          "message": "Parameter '_maxDefaultUsdtETH' of RevoPreSaleContract.setMaxDefaultUsdtAllocInEth (RevomonPreSale.sol#390) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 395,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTokenCapInWei(uint256 _tokenCapRevoInWei) public onlyOwner{\n",
          "message": "Parameter '_tokenCapRevoInWei' of RevoPreSaleContract.setTokenCapInWei (RevomonPreSale.sol#395) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 410,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function lock(string memory _reason, uint256 _amount, uint256 _time) private returns (bool) {\n",
          "message": "Parameter '_reason' of RevoPreSaleContract.lock (RevomonPreSale.sol#410) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 410,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function lock(string memory _reason, uint256 _amount, uint256 _time) private returns (bool) {\n",
          "message": "Parameter '_amount' of RevoPreSaleContract.lock (RevomonPreSale.sol#410) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 410,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function lock(string memory _reason, uint256 _amount, uint256 _time) private returns (bool) {\n",
          "message": "Parameter '_time' of RevoPreSaleContract.lock (RevomonPreSale.sol#410) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 435,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function tokensLocked(address _of, string memory _reason) public view returns (uint256 amount) {\n",
          "message": "Parameter '_of' of RevoPreSaleContract.tokensLocked (RevomonPreSale.sol#435) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 435,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function tokensLocked(address _of, string memory _reason) public view returns (uint256 amount) {\n",
          "message": "Parameter '_reason' of RevoPreSaleContract.tokensLocked (RevomonPreSale.sol#435) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 445,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function totalBalanceOf(address _of) public view returns (uint256 amount) {\n",
          "message": "Parameter '_of' of RevoPreSaleContract.totalBalanceOf (RevomonPreSale.sol#445) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 458,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function tokensUnlockable(address _of, string memory _reason) public view returns (uint256 amount) {\n",
          "message": "Parameter '_of' of RevoPreSaleContract.tokensUnlockable (RevomonPreSale.sol#458) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 458,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function tokensUnlockable(address _of, string memory _reason) public view returns (uint256 amount) {\n",
          "message": "Parameter '_reason' of RevoPreSaleContract.tokensUnlockable (RevomonPreSale.sol#458) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 489,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getUnlockableTokens(address _of) public view returns (uint256 unlockableTokens) {\n",
          "message": "Parameter '_of' of RevoPreSaleContract.getUnlockableTokens (RevomonPreSale.sol#489) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 495,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getremainingLockTime(address _of, string memory _reason) public view returns (uint256 remainingTime) {\n",
          "message": "Parameter '_of' of RevoPreSaleContract.getremainingLockTime (RevomonPreSale.sol#495) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 495,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getremainingLockTime(address _of, string memory _reason) public view returns (uint256 remainingTime) {\n",
          "message": "Parameter '_reason' of RevoPreSaleContract.getremainingLockTime (RevomonPreSale.sol#495) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 501,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getremainingLockDays(address _of, string memory _reason) public view returns (uint256 remainingDays) {\n",
          "message": "Parameter '_of' of RevoPreSaleContract.getremainingLockDays (RevomonPreSale.sol#501) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 501,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getremainingLockDays(address _of, string memory _reason) public view returns (uint256 remainingDays) {\n",
          "message": "Parameter '_reason' of RevoPreSaleContract.getremainingLockDays (RevomonPreSale.sol#501) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 247,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string internal constant NOT_LOCKED = 'No tokens locked';\n",
          "message": "RevoPreSaleContract.NOT_LOCKED (RevomonPreSale.sol#247) is never used in RevoPreSaleContract\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 186,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _owner = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 514,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return 0x0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 346,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 i = 0; i < _addresses.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 362,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i = 0; i < addresses.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 448,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < lockReason[_of].length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 472,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < lockReason[msg.sender].length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 490,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < lockReason[_of].length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 346,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 i = 0; i < _addresses.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 362,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i = 0; i < addresses.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 448,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < lockReason[_of].length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 472,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < lockReason[msg.sender].length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 490,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < lockReason[_of].length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 375,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setListingDone(bool isDone) public onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 379,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setUSDTAddress(address _usdtAddress) public onlyOwner{\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 384,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setRevoAddress(address _revoAddress) public onlyOwner{\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 390,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMaxDefaultUsdtAllocInEth(uint256 _maxDefaultUsdtETH) public onlyOwner{\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 395,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTokenCapInWei(uint256 _tokenCapRevoInWei) public onlyOwner{\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 165,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address private _owner;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 238,
          "vulnerability_to_line": null,
          "vulnerability_code": "    IRevoTokenContract private revoToken;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 239,
          "vulnerability_to_line": null,
          "vulnerability_code": "    IRevoTokenContract private usdtToken;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 209,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 511,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function stringToBytes32(string memory source) public pure returns (bytes32 result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 517,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}