{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract LockRevoTokenContract is ERC1132, Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 455,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < lockReason[_of].length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 522,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < lockReason[_of].length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 544,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < lockReason[_of].length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 152,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor () internal { }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 169,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor () internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 170,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address msgSender = _msgSender();\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 171,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _owner = msgSender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit OwnershipTransferred(address(0), msgSender);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 346,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address revoTokenAddress) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 347,
          "vulnerability_to_line": null,
          "vulnerability_code": "        token = IRevoTokenContract(revoTokenAddress);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 348,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 455,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < lockReason[_of].length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 522,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < lockReason[_of].length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 544,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < lockReason[_of].length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 579,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint j = 0; j < 32; j++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 587,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 j = 0; j < charCount; j++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 180,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 508,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (locked[_of][reason].validity <= now && !locked[_of][reason].claimed) //solhint-disable-line\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 509,
          "vulnerability_to_line": null,
          "vulnerability_code": "            amount = locked[_of][reason].amount;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 551,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (locked[_of][reason].validity > now && !locked[_of][reason].claimed) //solhint-disable-line\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 552,
          "vulnerability_to_line": null,
          "vulnerability_code": "            remainingTime = locked[_of][reason].validity.sub(now);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 557,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (locked[_of][reason].validity > now && !locked[_of][reason].claimed) //solhint-disable-line\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 558,
          "vulnerability_to_line": null,
          "vulnerability_code": "            remainingDays = (locked[_of][reason].validity.sub(now)) / 86400;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 455,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < lockReason[_of].length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 522,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < lockReason[_of].length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 544,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < lockReason[_of].length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 579,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint j = 0; j < 32; j++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 583,
          "vulnerability_to_line": null,
          "vulnerability_code": "                charCount++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 587,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 j = 0; j < charCount; j++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_58"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 565,
          "vulnerability_to_line": 574,
          "vulnerability_code": "    function stringToBytes32(string memory source) public pure returns (bytes32 result) {\n\n        bytes memory tempEmptyStringTest = bytes(source);\n\n        if (tempEmptyStringTest.length == 0) {\n\n            return 0x0;\n\n        }\n\n    \n\n        assembly {\n\n            result := mload(add(source, 32))\n\n        }\n",
          "message": "LockRevoTokenContract.stringToBytes32 (RevoLockStages.sol#565-574) is declared view but contains assembly code\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 483,
          "vulnerability_to_line": 495,
          "vulnerability_code": "    function increaseLockAmount(string memory _reason, uint256 _amount)\n\n        public override onlyOwner\n\n        returns (bool)\n\n    {\n\n        bytes32 reason = stringToBytes32(_reason);\n\n        require(tokensLocked(msg.sender, _reason) > 0, NOT_LOCKED);\n\n        token.transferFrom(msg.sender, address(this), _amount);\n\n\n\n        locked[msg.sender][reason].amount = locked[msg.sender][reason].amount.add(_amount);\n\n\n\n        emit Locked(msg.sender, reason, locked[msg.sender][reason].amount, locked[msg.sender][reason].validity);\n\n        return true;\n",
          "message": "Reentrancy in LockRevoTokenContract.increaseLockAmount (RevoLockStages.sol#483-495):\n\tExternal calls:\n\t- token.transferFrom(msg.sender,address(this),_amount) (RevoLockStages.sol#489)\n\tState variables written after the call(s):\n\t- locked (RevoLockStages.sol#491)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 357,
          "vulnerability_to_line": 378,
          "vulnerability_code": "    function lock(string memory _reason, uint256 _amount, uint256 _time)\n\n        public override onlyOwner\n\n        returns (bool)\n\n    {\n\n        bytes32 reason = stringToBytes32(_reason);\n\n        uint256 validUntil = now.add(_time); //solhint-disable-line\n\n\n\n        // If tokens are already locked, then functions extendLock or\n\n        // increaseLockAmount should be used to make any changes\n\n        require(tokensLocked(msg.sender, bytes32ToString(reason)) == 0, ALREADY_LOCKED);\n\n        require(_amount != 0, AMOUNT_ZERO);\n\n\n\n        if (locked[msg.sender][reason].amount == 0)\n\n            lockReason[msg.sender].push(reason);\n\n\n\n        token.transferFrom(msg.sender, address(this), _amount);\n\n\n\n        locked[msg.sender][reason] = lockToken(_amount, validUntil, false);\n\n\n\n        emit Locked(msg.sender, reason, _amount, validUntil);\n\n        return true;\n",
          "message": "Reentrancy in LockRevoTokenContract.lock (RevoLockStages.sol#357-378):\n\tExternal calls:\n\t- token.transferFrom(msg.sender,address(this),_amount) (RevoLockStages.sol#372)\n\tState variables written after the call(s):\n\t- locked (RevoLockStages.sol#374)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 388,
          "vulnerability_to_line": 407,
          "vulnerability_code": "    function transferWithLock(address _to, string memory _reason, uint256 _amount, uint256 _time)\n\n        public onlyOwner\n\n        returns (bool)\n\n    {\n\n        bytes32 reason = stringToBytes32(_reason);\n\n        uint256 validUntil = now.add(_time); //solhint-disable-line\n\n\n\n        require(tokensLocked(_to, _reason) == 0, ALREADY_LOCKED);\n\n        require(_amount != 0, AMOUNT_ZERO);\n\n\n\n        if (locked[_to][reason].amount == 0)\n\n            lockReason[_to].push(reason);\n\n\n\n        token.transferFrom(msg.sender, address(this), _amount);\n\n\n\n        locked[_to][reason] = lockToken(_amount, validUntil, false);\n\n        \n\n        emit Locked(_to, reason, _amount, validUntil);\n\n        return true;\n",
          "message": "Reentrancy in LockRevoTokenContract.transferWithLock (RevoLockStages.sol#388-407):\n\tExternal calls:\n\t- token.transferFrom(msg.sender,address(this),_amount) (RevoLockStages.sol#401)\n\tState variables written after the call(s):\n\t- locked (RevoLockStages.sol#403)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 357,
          "vulnerability_to_line": 378,
          "vulnerability_code": "    function lock(string memory _reason, uint256 _amount, uint256 _time)\n\n        public override onlyOwner\n\n        returns (bool)\n\n    {\n\n        bytes32 reason = stringToBytes32(_reason);\n\n        uint256 validUntil = now.add(_time); //solhint-disable-line\n\n\n\n        // If tokens are already locked, then functions extendLock or\n\n        // increaseLockAmount should be used to make any changes\n\n        require(tokensLocked(msg.sender, bytes32ToString(reason)) == 0, ALREADY_LOCKED);\n\n        require(_amount != 0, AMOUNT_ZERO);\n\n\n\n        if (locked[msg.sender][reason].amount == 0)\n\n            lockReason[msg.sender].push(reason);\n\n\n\n        token.transferFrom(msg.sender, address(this), _amount);\n\n\n\n        locked[msg.sender][reason] = lockToken(_amount, validUntil, false);\n\n\n\n        emit Locked(msg.sender, reason, _amount, validUntil);\n\n        return true;\n",
          "message": "LockRevoTokenContract.lock (RevoLockStages.sol#357-378) does not use the value returned by external calls:\n\t-token.transferFrom(msg.sender,address(this),_amount) (RevoLockStages.sol#372)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 483,
          "vulnerability_to_line": 495,
          "vulnerability_code": "    function increaseLockAmount(string memory _reason, uint256 _amount)\n\n        public override onlyOwner\n\n        returns (bool)\n\n    {\n\n        bytes32 reason = stringToBytes32(_reason);\n\n        require(tokensLocked(msg.sender, _reason) > 0, NOT_LOCKED);\n\n        token.transferFrom(msg.sender, address(this), _amount);\n\n\n\n        locked[msg.sender][reason].amount = locked[msg.sender][reason].amount.add(_amount);\n\n\n\n        emit Locked(msg.sender, reason, locked[msg.sender][reason].amount, locked[msg.sender][reason].validity);\n\n        return true;\n",
          "message": "LockRevoTokenContract.increaseLockAmount (RevoLockStages.sol#483-495) does not use the value returned by external calls:\n\t-token.transferFrom(msg.sender,address(this),_amount) (RevoLockStages.sol#489)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 516,
          "vulnerability_to_line": 533,
          "vulnerability_code": "    function unlock(address _of)\n\n        public override onlyOwner\n\n        returns (uint256 unlockableTokens)\n\n    {\n\n        uint256 lockedTokens;\n\n\n\n        for (uint256 i = 0; i < lockReason[_of].length; i++) {\n\n            lockedTokens = tokensUnlockable(_of, bytes32ToString(lockReason[_of][i]));\n\n            if (lockedTokens > 0) {\n\n                unlockableTokens = unlockableTokens.add(lockedTokens);\n\n                locked[_of][lockReason[_of][i]].claimed = true;\n\n                emit Unlocked(_of, lockReason[_of][i], lockedTokens);\n\n            }\n\n        }  \n\n\n\n        if (unlockableTokens > 0)\n\n            token.transfer(_of, unlockableTokens);\n",
          "message": "LockRevoTokenContract.unlock (RevoLockStages.sol#516-533) does not use the value returned by external calls:\n\t-token.transfer(_of,unlockableTokens) (RevoLockStages.sol#532)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 388,
          "vulnerability_to_line": 407,
          "vulnerability_code": "    function transferWithLock(address _to, string memory _reason, uint256 _amount, uint256 _time)\n\n        public onlyOwner\n\n        returns (bool)\n\n    {\n\n        bytes32 reason = stringToBytes32(_reason);\n\n        uint256 validUntil = now.add(_time); //solhint-disable-line\n\n\n\n        require(tokensLocked(_to, _reason) == 0, ALREADY_LOCKED);\n\n        require(_amount != 0, AMOUNT_ZERO);\n\n\n\n        if (locked[_to][reason].amount == 0)\n\n            lockReason[_to].push(reason);\n\n\n\n        token.transferFrom(msg.sender, address(this), _amount);\n\n\n\n        locked[_to][reason] = lockToken(_amount, validUntil, false);\n\n        \n\n        emit Locked(_to, reason, _amount, validUntil);\n\n        return true;\n",
          "message": "LockRevoTokenContract.transferWithLock (RevoLockStages.sol#388-407) does not use the value returned by external calls:\n\t-token.transferFrom(msg.sender,address(this),_amount) (RevoLockStages.sol#401)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 565,
          "vulnerability_to_line": 574,
          "vulnerability_code": "    function stringToBytes32(string memory source) public pure returns (bytes32 result) {\n\n        bytes memory tempEmptyStringTest = bytes(source);\n\n        if (tempEmptyStringTest.length == 0) {\n\n            return 0x0;\n\n        }\n\n    \n\n        assembly {\n\n            result := mload(add(source, 32))\n\n        }\n",
          "message": "LockRevoTokenContract.stringToBytes32 uses assembly (RevoLockStages.sol#565-574)\n\t- RevoLockStages.sol#571-573\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 175,
          "vulnerability_to_line": 177,
          "vulnerability_code": "    function owner() public view returns (address) {\n\n        return _owner;\n",
          "message": "Ownable.owner (RevoLockStages.sol#175-177) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 184,
          "vulnerability_to_line": 187,
          "vulnerability_code": "    function renounceOwnership() public virtual onlyOwner {\n\n        emit OwnershipTransferred(_owner, address(0));\n\n        _owner = address(0);\n",
          "message": "Ownable.renounceOwnership (RevoLockStages.sol#184-187) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 189,
          "vulnerability_to_line": 193,
          "vulnerability_code": "    function transferOwnership(address newOwner) public virtual onlyOwner {\n\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n\n        emit OwnershipTransferred(_owner, newOwner);\n\n        _owner = newOwner;\n",
          "message": "Ownable.transferOwnership (RevoLockStages.sol#189-193) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 357,
          "vulnerability_to_line": 378,
          "vulnerability_code": "    function lock(string memory _reason, uint256 _amount, uint256 _time)\n\n        public override onlyOwner\n\n        returns (bool)\n\n    {\n\n        bytes32 reason = stringToBytes32(_reason);\n\n        uint256 validUntil = now.add(_time); //solhint-disable-line\n\n\n\n        // If tokens are already locked, then functions extendLock or\n\n        // increaseLockAmount should be used to make any changes\n\n        require(tokensLocked(msg.sender, bytes32ToString(reason)) == 0, ALREADY_LOCKED);\n\n        require(_amount != 0, AMOUNT_ZERO);\n\n\n\n        if (locked[msg.sender][reason].amount == 0)\n\n            lockReason[msg.sender].push(reason);\n\n\n\n        token.transferFrom(msg.sender, address(this), _amount);\n\n\n\n        locked[msg.sender][reason] = lockToken(_amount, validUntil, false);\n\n\n\n        emit Locked(msg.sender, reason, _amount, validUntil);\n\n        return true;\n",
          "message": "LockRevoTokenContract.lock (RevoLockStages.sol#357-378) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 250,
          "vulnerability_to_line": 251,
          "vulnerability_code": "    function lock(string memory _reason, uint256 _amount, uint256 _time)\n",
          "message": "ERC1132.lock (RevoLockStages.sol#250-251) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 271,
          "vulnerability_to_line": 272,
          "vulnerability_code": "    function tokensLockedAtTime(address _of, string memory _reason, uint256 _time)\n",
          "message": "ERC1132.tokensLockedAtTime (RevoLockStages.sol#271-272) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 434,
          "vulnerability_to_line": 442,
          "vulnerability_code": "    function tokensLockedAtTime(address _of, string memory _reason, uint256 _time)\n\n        public override\n\n        view\n\n        returns (uint256 amount)\n\n    {\n\n        bytes32 reason = stringToBytes32(_reason);\n\n        if (locked[_of][reason].validity > _time)\n\n            amount = locked[_of][reason].amount;\n",
          "message": "LockRevoTokenContract.tokensLockedAtTime (RevoLockStages.sol#434-442) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 448,
          "vulnerability_to_line": 458,
          "vulnerability_code": "    function totalBalanceOf(address _of)\n\n        public override\n\n        view\n\n        returns (uint256 amount)\n\n    {\n\n        amount = token.balanceOf(_of);\n\n\n\n        for (uint256 i = 0; i < lockReason[_of].length; i++) {\n\n            amount = amount.add(tokensLocked(_of, bytes32ToString(lockReason[_of][i])));\n\n        }   \n",
          "message": "LockRevoTokenContract.totalBalanceOf (RevoLockStages.sol#448-458) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": 279,
          "vulnerability_code": "    function totalBalanceOf(address _of)\n",
          "message": "ERC1132.totalBalanceOf (RevoLockStages.sol#278-279) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 465,
          "vulnerability_to_line": 476,
          "vulnerability_code": "    function extendLock(string memory _reason, uint256 _time)\n\n        public override onlyOwner\n\n        returns (bool)\n\n    {\n\n        bytes32 reason = stringToBytes32(_reason);\n\n        require(tokensLocked(msg.sender, _reason) > 0, NOT_LOCKED);\n\n\n\n        locked[msg.sender][reason].validity = locked[msg.sender][reason].validity.add(_time);\n\n\n\n        emit Locked(msg.sender, reason, locked[msg.sender][reason].amount, locked[msg.sender][reason].validity);\n\n        return true;\n",
          "message": "LockRevoTokenContract.extendLock (RevoLockStages.sol#465-476) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 286,
          "vulnerability_to_line": 287,
          "vulnerability_code": "    function extendLock(string memory _reason, uint256 _time)\n",
          "message": "ERC1132.extendLock (RevoLockStages.sol#286-287) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 483,
          "vulnerability_to_line": 495,
          "vulnerability_code": "    function increaseLockAmount(string memory _reason, uint256 _amount)\n\n        public override onlyOwner\n\n        returns (bool)\n\n    {\n\n        bytes32 reason = stringToBytes32(_reason);\n\n        require(tokensLocked(msg.sender, _reason) > 0, NOT_LOCKED);\n\n        token.transferFrom(msg.sender, address(this), _amount);\n\n\n\n        locked[msg.sender][reason].amount = locked[msg.sender][reason].amount.add(_amount);\n\n\n\n        emit Locked(msg.sender, reason, locked[msg.sender][reason].amount, locked[msg.sender][reason].validity);\n\n        return true;\n",
          "message": "LockRevoTokenContract.increaseLockAmount (RevoLockStages.sol#483-495) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": 295,
          "vulnerability_code": "    function increaseLockAmount(string memory _reason, uint256 _amount)\n",
          "message": "ERC1132.increaseLockAmount (RevoLockStages.sol#294-295) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 516,
          "vulnerability_to_line": 533,
          "vulnerability_code": "    function unlock(address _of)\n\n        public override onlyOwner\n\n        returns (uint256 unlockableTokens)\n\n    {\n\n        uint256 lockedTokens;\n\n\n\n        for (uint256 i = 0; i < lockReason[_of].length; i++) {\n\n            lockedTokens = tokensUnlockable(_of, bytes32ToString(lockReason[_of][i]));\n\n            if (lockedTokens > 0) {\n\n                unlockableTokens = unlockableTokens.add(lockedTokens);\n\n                locked[_of][lockReason[_of][i]].claimed = true;\n\n                emit Unlocked(_of, lockReason[_of][i], lockedTokens);\n\n            }\n\n        }  \n\n\n\n        if (unlockableTokens > 0)\n\n            token.transfer(_of, unlockableTokens);\n",
          "message": "LockRevoTokenContract.unlock (RevoLockStages.sol#516-533) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 309,
          "vulnerability_to_line": 310,
          "vulnerability_code": "    function unlock(address _of)\n",
          "message": "ERC1132.unlock (RevoLockStages.sol#309-310) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 316,
          "vulnerability_to_line": 317,
          "vulnerability_code": "    function getUnlockableTokens(address _of)\n",
          "message": "ERC1132.getUnlockableTokens (RevoLockStages.sol#316-317) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 539,
          "vulnerability_to_line": 547,
          "vulnerability_code": "    function getUnlockableTokens(address _of)\n\n        public override\n\n        view\n\n        returns (uint256 unlockableTokens)\n\n    {\n\n        for (uint256 i = 0; i < lockReason[_of].length; i++) {\n\n            unlockableTokens = unlockableTokens.add(tokensUnlockable(_of, bytes32ToString(lockReason[_of][i])));\n\n        }  \n",
          "message": "LockRevoTokenContract.getUnlockableTokens (RevoLockStages.sol#539-547) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 388,
          "vulnerability_to_line": 407,
          "vulnerability_code": "    function transferWithLock(address _to, string memory _reason, uint256 _amount, uint256 _time)\n\n        public onlyOwner\n\n        returns (bool)\n\n    {\n\n        bytes32 reason = stringToBytes32(_reason);\n\n        uint256 validUntil = now.add(_time); //solhint-disable-line\n\n\n\n        require(tokensLocked(_to, _reason) == 0, ALREADY_LOCKED);\n\n        require(_amount != 0, AMOUNT_ZERO);\n\n\n\n        if (locked[_to][reason].amount == 0)\n\n            lockReason[_to].push(reason);\n\n\n\n        token.transferFrom(msg.sender, address(this), _amount);\n\n\n\n        locked[_to][reason] = lockToken(_amount, validUntil, false);\n\n        \n\n        emit Locked(_to, reason, _amount, validUntil);\n\n        return true;\n",
          "message": "LockRevoTokenContract.transferWithLock (RevoLockStages.sol#388-407) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 549,
          "vulnerability_to_line": 553,
          "vulnerability_code": "    function getremainingLockTime(address _of, string memory _reason) public view returns (uint256 remainingTime) {\n\n        bytes32 reason = stringToBytes32(_reason);\n\n        if (locked[_of][reason].validity > now && !locked[_of][reason].claimed) //solhint-disable-line\n\n            remainingTime = locked[_of][reason].validity.sub(now);\n",
          "message": "LockRevoTokenContract.getremainingLockTime (RevoLockStages.sol#549-553) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 555,
          "vulnerability_to_line": 559,
          "vulnerability_code": "    function getremainingLockDays(address _of, string memory _reason) public view returns (uint256 remainingDays) {\n\n        bytes32 reason = stringToBytes32(_reason);\n\n        if (locked[_of][reason].validity > now && !locked[_of][reason].claimed) //solhint-disable-line\n\n            remainingDays = (locked[_of][reason].validity.sub(now)) / 86400;\n",
          "message": "LockRevoTokenContract.getremainingLockDays (RevoLockStages.sol#555-559) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.0;\n",
          "message": "Detected issues with version pragma in RevoLockStages.sol:\n\t- pragma solidity^0.6.0 (RevoLockStages.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 154,
          "vulnerability_to_line": 156,
          "vulnerability_code": "    function _msgSender() internal view virtual returns (address payable) {\n\n        return msg.sender;\n",
          "message": "Function 'Context._msgSender' (RevoLockStages.sol#154-156) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": 161,
          "vulnerability_code": "    function _msgData() internal view virtual returns (bytes memory) {\n\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n\n        return msg.data;\n",
          "message": "Function 'Context._msgData' (RevoLockStages.sol#158-161) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 212,
          "vulnerability_to_line": 216,
          "vulnerability_code": "    struct lockToken {\n\n        uint256 amount;\n\n        uint256 validity;\n\n        bool claimed;\n",
          "message": "Struct 'ERC1132.lockToken' (RevoLockStages.sol#212-216) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 357,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function lock(string memory _reason, uint256 _amount, uint256 _time)\n",
          "message": "Parameter '_reason' of LockRevoTokenContract.lock (RevoLockStages.sol#357) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 357,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function lock(string memory _reason, uint256 _amount, uint256 _time)\n",
          "message": "Parameter '_amount' of LockRevoTokenContract.lock (RevoLockStages.sol#357) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 357,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function lock(string memory _reason, uint256 _amount, uint256 _time)\n",
          "message": "Parameter '_time' of LockRevoTokenContract.lock (RevoLockStages.sol#357) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 416,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function tokensLocked(address _of, string memory _reason)\n",
          "message": "Parameter '_of' of LockRevoTokenContract.tokensLocked (RevoLockStages.sol#416) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 416,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function tokensLocked(address _of, string memory _reason)\n",
          "message": "Parameter '_reason' of LockRevoTokenContract.tokensLocked (RevoLockStages.sol#416) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 434,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function tokensLockedAtTime(address _of, string memory _reason, uint256 _time)\n",
          "message": "Parameter '_of' of LockRevoTokenContract.tokensLockedAtTime (RevoLockStages.sol#434) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 434,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function tokensLockedAtTime(address _of, string memory _reason, uint256 _time)\n",
          "message": "Parameter '_reason' of LockRevoTokenContract.tokensLockedAtTime (RevoLockStages.sol#434) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 434,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function tokensLockedAtTime(address _of, string memory _reason, uint256 _time)\n",
          "message": "Parameter '_time' of LockRevoTokenContract.tokensLockedAtTime (RevoLockStages.sol#434) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 448,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function totalBalanceOf(address _of)\n",
          "message": "Parameter '_of' of LockRevoTokenContract.totalBalanceOf (RevoLockStages.sol#448) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 465,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function extendLock(string memory _reason, uint256 _time)\n",
          "message": "Parameter '_reason' of LockRevoTokenContract.extendLock (RevoLockStages.sol#465) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 465,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function extendLock(string memory _reason, uint256 _time)\n",
          "message": "Parameter '_time' of LockRevoTokenContract.extendLock (RevoLockStages.sol#465) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 483,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function increaseLockAmount(string memory _reason, uint256 _amount)\n",
          "message": "Parameter '_reason' of LockRevoTokenContract.increaseLockAmount (RevoLockStages.sol#483) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 483,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function increaseLockAmount(string memory _reason, uint256 _amount)\n",
          "message": "Parameter '_amount' of LockRevoTokenContract.increaseLockAmount (RevoLockStages.sol#483) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 502,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function tokensUnlockable(address _of, string memory _reason)\n",
          "message": "Parameter '_of' of LockRevoTokenContract.tokensUnlockable (RevoLockStages.sol#502) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 502,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function tokensUnlockable(address _of, string memory _reason)\n",
          "message": "Parameter '_reason' of LockRevoTokenContract.tokensUnlockable (RevoLockStages.sol#502) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 516,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function unlock(address _of)\n",
          "message": "Parameter '_of' of LockRevoTokenContract.unlock (RevoLockStages.sol#516) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 539,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getUnlockableTokens(address _of)\n",
          "message": "Parameter '_of' of LockRevoTokenContract.getUnlockableTokens (RevoLockStages.sol#539) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 388,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferWithLock(address _to, string memory _reason, uint256 _amount, uint256 _time)\n",
          "message": "Parameter '_to' of LockRevoTokenContract.transferWithLock (RevoLockStages.sol#388) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 388,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferWithLock(address _to, string memory _reason, uint256 _amount, uint256 _time)\n",
          "message": "Parameter '_reason' of LockRevoTokenContract.transferWithLock (RevoLockStages.sol#388) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 388,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferWithLock(address _to, string memory _reason, uint256 _amount, uint256 _time)\n",
          "message": "Parameter '_amount' of LockRevoTokenContract.transferWithLock (RevoLockStages.sol#388) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 388,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferWithLock(address _to, string memory _reason, uint256 _amount, uint256 _time)\n",
          "message": "Parameter '_time' of LockRevoTokenContract.transferWithLock (RevoLockStages.sol#388) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 549,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getremainingLockTime(address _of, string memory _reason) public view returns (uint256 remainingTime) {\n",
          "message": "Parameter '_of' of LockRevoTokenContract.getremainingLockTime (RevoLockStages.sol#549) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 549,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getremainingLockTime(address _of, string memory _reason) public view returns (uint256 remainingTime) {\n",
          "message": "Parameter '_reason' of LockRevoTokenContract.getremainingLockTime (RevoLockStages.sol#549) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 555,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getremainingLockDays(address _of, string memory _reason) public view returns (uint256 remainingDays) {\n",
          "message": "Parameter '_of' of LockRevoTokenContract.getremainingLockDays (RevoLockStages.sol#555) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 555,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getremainingLockDays(address _of, string memory _reason) public view returns (uint256 remainingDays) {\n",
          "message": "Parameter '_reason' of LockRevoTokenContract.getremainingLockDays (RevoLockStages.sol#555) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 186,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _owner = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 568,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return 0x0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 455,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < lockReason[_of].length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 522,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < lockReason[_of].length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 544,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < lockReason[_of].length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 455,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < lockReason[_of].length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 522,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < lockReason[_of].length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 544,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < lockReason[_of].length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 165,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address private _owner;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 340,
          "vulnerability_to_line": null,
          "vulnerability_code": "    IRevoTokenContract private token;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 333,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 565,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function stringToBytes32(string memory source) public pure returns (bytes32 result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 571,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}