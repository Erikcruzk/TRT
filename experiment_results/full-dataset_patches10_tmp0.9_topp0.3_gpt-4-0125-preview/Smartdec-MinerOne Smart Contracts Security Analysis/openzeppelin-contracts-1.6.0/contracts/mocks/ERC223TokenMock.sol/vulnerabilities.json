{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_14"
      ],
      "vulnerability_findings": [
        {
          "name": "assembly",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": 148,
          "vulnerability_code": "  function transferERC223(address _to, uint256 _value, bytes _data) public\n\n    returns (bool success)\n\n  {\n\n    transfer(_to, _value);\n\n    bool is_contract = false;\n\n    assembly {\n\n      is_contract := not(iszero(extcodesize(_to)))\n\n    }\n\n    if (is_contract) {\n\n      ERC223ContractInterface receiver = ERC223ContractInterface(_to);\n\n      receiver.tokenFallback(msg.sender, _value, _data);\n\n    }\n\n    return true;\n",
          "message": "ERC223TokenMock.transferERC223 uses assembly (ERC223TokenMock.sol#135-148)\n\t- ERC223TokenMock.sol#140-143\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
          "message": "ERC20Basic.totalSupply (ERC223TokenMock.sol#12) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": 90,
          "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return totalSupply_;\n",
          "message": "BasicToken.totalSupply (ERC223TokenMock.sol#88-90) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": 115,
          "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n\n    return balances[_owner];\n",
          "message": "BasicToken.balanceOf (ERC223TokenMock.sol#113-115) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
          "message": "ERC20Basic.balanceOf (ERC223TokenMock.sol#13) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": 148,
          "vulnerability_code": "  function transferERC223(address _to, uint256 _value, bytes _data) public\n\n    returns (bool success)\n\n  {\n\n    transfer(_to, _value);\n\n    bool is_contract = false;\n\n    assembly {\n\n      is_contract := not(iszero(extcodesize(_to)))\n\n    }\n\n    if (is_contract) {\n\n      ERC223ContractInterface receiver = ERC223ContractInterface(_to);\n\n      receiver.tokenFallback(msg.sender, _value, _data);\n\n    }\n\n    return true;\n",
          "message": "ERC223TokenMock.transferERC223 (ERC223TokenMock.sol#135-148) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": "Detected issues with version pragma in ERC223TokenMock.sol:\n\t- pragma solidity^0.4.18 (ERC223TokenMock.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (ERC223TokenMock.sol#20): it allows old versions\n\t- pragma solidity^0.4.18 (ERC223TokenMock.sol#71): it allows old versions\n\t- pragma solidity^0.4.18 (ERC223TokenMock.sol#121): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n",
          "message": "Parameter '_owner' of BasicToken.balanceOf (ERC223TokenMock.sol#113) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_to' of BasicToken.transfer (ERC223TokenMock.sol#97) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of BasicToken.transfer (ERC223TokenMock.sol#97) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": 132,
          "vulnerability_code": "  function ERC223TokenMock(address initialAccount, uint256 initialBalance) public {\n\n    balances[initialAccount] = initialBalance;\n\n    totalSupply_ = initialBalance;\n",
          "message": "Function 'ERC223TokenMock.ERC223TokenMock' (ERC223TokenMock.sol#129-132) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferERC223(address _to, uint256 _value, bytes _data) public\n",
          "message": "Parameter '_to' of ERC223TokenMock.transferERC223 (ERC223TokenMock.sol#135) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferERC223(address _to, uint256 _value, bytes _data) public\n",
          "message": "Parameter '_value' of ERC223TokenMock.transferERC223 (ERC223TokenMock.sol#135) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferERC223(address _to, uint256 _value, bytes _data) public\n",
          "message": "Parameter '_data' of ERC223TokenMock.transferERC223 (ERC223TokenMock.sol#135) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 121,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 79,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferERC223(address _to, uint256 _value, bytes _data) public\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 140,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping(address => uint256) balances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 totalSupply_;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 c = a + b;\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferERC223(address _to, uint256 _value, bytes _data) public\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 145,
          "vulnerability_to_line": null,
          "vulnerability_code": "      receiver.tokenFallback(msg.sender, _value, _data);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}