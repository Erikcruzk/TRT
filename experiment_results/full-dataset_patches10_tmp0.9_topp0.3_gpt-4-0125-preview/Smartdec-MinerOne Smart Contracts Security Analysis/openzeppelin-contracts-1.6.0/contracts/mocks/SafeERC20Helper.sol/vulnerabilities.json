{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_46"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
          "message": "ERC20Basic.totalSupply (SafeERC20Helper.sol#12) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": 93,
          "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return 0;\n",
          "message": "ERC20SucceedingMock.totalSupply (SafeERC20Helper.sol#91-93) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": 66,
          "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return 0;\n",
          "message": "ERC20FailingMock.totalSupply (SafeERC20Helper.sol#64-66) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": 109,
          "vulnerability_code": "  function balanceOf(address) public constant returns (uint256) {\n\n    return 0;\n",
          "message": "ERC20SucceedingMock.balanceOf (SafeERC20Helper.sol#107-109) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": 82,
          "vulnerability_code": "  function balanceOf(address) public constant returns (uint256) {\n\n    return 0;\n",
          "message": "ERC20FailingMock.balanceOf (SafeERC20Helper.sol#80-82) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
          "message": "ERC20Basic.balanceOf (SafeERC20Helper.sol#13) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
          "message": "ERC20Basic.transfer (SafeERC20Helper.sol#14) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": 70,
          "vulnerability_code": "  function transfer(address, uint256) public returns (bool) {\n\n    return false;\n",
          "message": "ERC20FailingMock.transfer (SafeERC20Helper.sol#68-70) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": 97,
          "vulnerability_code": "  function transfer(address, uint256) public returns (bool) {\n\n    return true;\n",
          "message": "ERC20SucceedingMock.transfer (SafeERC20Helper.sol#95-97) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256);\n",
          "message": "ERC20.allowance (SafeERC20Helper.sol#27) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": 113,
          "vulnerability_code": "  function allowance(address, address) public constant returns (uint256) {\n\n    return 0;\n",
          "message": "ERC20SucceedingMock.allowance (SafeERC20Helper.sol#111-113) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": 86,
          "vulnerability_code": "  function allowance(address, address) public constant returns (uint256) {\n\n    return 0;\n",
          "message": "ERC20FailingMock.allowance (SafeERC20Helper.sol#84-86) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": 101,
          "vulnerability_code": "  function transferFrom(address, address, uint256) public returns (bool) {\n\n    return true;\n",
          "message": "ERC20SucceedingMock.transferFrom (SafeERC20Helper.sol#99-101) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": 74,
          "vulnerability_code": "  function transferFrom(address, address, uint256) public returns (bool) {\n\n    return false;\n",
          "message": "ERC20FailingMock.transferFrom (SafeERC20Helper.sol#72-74) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address from, address to, uint256 value) public returns (bool);\n",
          "message": "ERC20.transferFrom (SafeERC20Helper.sol#28) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": 78,
          "vulnerability_code": "  function approve(address, uint256) public returns (bool) {\n\n    return false;\n",
          "message": "ERC20FailingMock.approve (SafeERC20Helper.sol#76-78) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool);\n",
          "message": "ERC20.approve (SafeERC20Helper.sol#29) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": 105,
          "vulnerability_code": "  function approve(address, uint256) public returns (bool) {\n\n    return true;\n",
          "message": "ERC20SucceedingMock.approve (SafeERC20Helper.sol#103-105) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": 130,
          "vulnerability_code": "  function doFailingTransfer() public {\n\n    failing.safeTransfer(0, 0);\n",
          "message": "SafeERC20Helper.doFailingTransfer (SafeERC20Helper.sol#128-130) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 132,
          "vulnerability_to_line": 134,
          "vulnerability_code": "  function doFailingTransferFrom() public {\n\n    failing.safeTransferFrom(0, 0, 0);\n",
          "message": "SafeERC20Helper.doFailingTransferFrom (SafeERC20Helper.sol#132-134) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": 138,
          "vulnerability_code": "  function doFailingApprove() public {\n\n    failing.safeApprove(0, 0);\n",
          "message": "SafeERC20Helper.doFailingApprove (SafeERC20Helper.sol#136-138) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 140,
          "vulnerability_to_line": 142,
          "vulnerability_code": "  function doSucceedingTransfer() public {\n\n    succeeding.safeTransfer(0, 0);\n",
          "message": "SafeERC20Helper.doSucceedingTransfer (SafeERC20Helper.sol#140-142) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 144,
          "vulnerability_to_line": 146,
          "vulnerability_code": "  function doSucceedingTransferFrom() public {\n\n    succeeding.safeTransferFrom(0, 0, 0);\n",
          "message": "SafeERC20Helper.doSucceedingTransferFrom (SafeERC20Helper.sol#144-146) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 148,
          "vulnerability_to_line": 150,
          "vulnerability_code": "  function doSucceedingApprove() public {\n\n    succeeding.safeApprove(0, 0);\n",
          "message": "SafeERC20Helper.doSucceedingApprove (SafeERC20Helper.sol#148-150) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": "Detected issues with version pragma in SafeERC20Helper.sol:\n\t- pragma solidity^0.4.18 (SafeERC20Helper.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (SafeERC20Helper.sol#20): it allows old versions\n\t- pragma solidity^0.4.18 (SafeERC20Helper.sol#35): it allows old versions\n\t- pragma solidity^0.4.18 (SafeERC20Helper.sol#60): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address) public constant returns (uint256) {\n",
          "message": "Parameter '' of ERC20FailingMock.balanceOf (SafeERC20Helper.sol#80) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address, uint256) public returns (bool) {\n",
          "message": "Parameter '' of ERC20FailingMock.transfer (SafeERC20Helper.sol#68) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address, uint256) public returns (bool) {\n",
          "message": "Parameter '_scope_0' of ERC20FailingMock.transfer (SafeERC20Helper.sol#68) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address, address) public constant returns (uint256) {\n",
          "message": "Parameter '' of ERC20FailingMock.allowance (SafeERC20Helper.sol#84) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address, address) public constant returns (uint256) {\n",
          "message": "Parameter '_scope_0' of ERC20FailingMock.allowance (SafeERC20Helper.sol#84) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address, address, uint256) public returns (bool) {\n",
          "message": "Parameter '' of ERC20FailingMock.transferFrom (SafeERC20Helper.sol#72) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address, address, uint256) public returns (bool) {\n",
          "message": "Parameter '_scope_0' of ERC20FailingMock.transferFrom (SafeERC20Helper.sol#72) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address, address, uint256) public returns (bool) {\n",
          "message": "Parameter '_scope_1' of ERC20FailingMock.transferFrom (SafeERC20Helper.sol#72) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address, uint256) public returns (bool) {\n",
          "message": "Parameter '' of ERC20FailingMock.approve (SafeERC20Helper.sol#76) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address, uint256) public returns (bool) {\n",
          "message": "Parameter '_scope_0' of ERC20FailingMock.approve (SafeERC20Helper.sol#76) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address) public constant returns (uint256) {\n",
          "message": "Parameter '' of ERC20SucceedingMock.balanceOf (SafeERC20Helper.sol#107) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address, uint256) public returns (bool) {\n",
          "message": "Parameter '' of ERC20SucceedingMock.transfer (SafeERC20Helper.sol#95) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address, uint256) public returns (bool) {\n",
          "message": "Parameter '_scope_0' of ERC20SucceedingMock.transfer (SafeERC20Helper.sol#95) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address, address) public constant returns (uint256) {\n",
          "message": "Parameter '' of ERC20SucceedingMock.allowance (SafeERC20Helper.sol#111) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address, address) public constant returns (uint256) {\n",
          "message": "Parameter '_scope_0' of ERC20SucceedingMock.allowance (SafeERC20Helper.sol#111) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address, address, uint256) public returns (bool) {\n",
          "message": "Parameter '' of ERC20SucceedingMock.transferFrom (SafeERC20Helper.sol#99) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address, address, uint256) public returns (bool) {\n",
          "message": "Parameter '_scope_0' of ERC20SucceedingMock.transferFrom (SafeERC20Helper.sol#99) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address, address, uint256) public returns (bool) {\n",
          "message": "Parameter '_scope_1' of ERC20SucceedingMock.transferFrom (SafeERC20Helper.sol#99) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address, uint256) public returns (bool) {\n",
          "message": "Parameter '' of ERC20SucceedingMock.approve (SafeERC20Helper.sol#103) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address, uint256) public returns (bool) {\n",
          "message": "Parameter '_scope_0' of ERC20SucceedingMock.approve (SafeERC20Helper.sol#103) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": 126,
          "vulnerability_code": "  function SafeERC20Helper() public {\n\n    failing = new ERC20FailingMock();\n\n    succeeding = new ERC20SucceedingMock();\n",
          "message": "Function 'SafeERC20Helper.SafeERC20Helper' (SafeERC20Helper.sol#123-126) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address) public constant returns (uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address, address) public constant returns (uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address) public constant returns (uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address, address) public constant returns (uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address, uint256) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address, uint256) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_TRANSFER_SHOULD_THROW",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address, uint256) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_TRANSFER_SHOULD_THROW",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address, address, uint256) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_TRANSFER_SHOULD_THROW",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address, uint256) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_TRANSFER_SHOULD_THROW",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address, address, uint256) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 120,
          "vulnerability_to_line": null,
          "vulnerability_code": "  ERC20 failing;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 121,
          "vulnerability_to_line": null,
          "vulnerability_code": "  ERC20 succeeding;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assert(token.transferFrom(from, to, value));\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 133,
          "vulnerability_to_line": null,
          "vulnerability_code": "    failing.safeTransferFrom(0, 0, 0);\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": null,
          "vulnerability_code": "    failing.safeTransfer(0, 0);\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 137,
          "vulnerability_to_line": null,
          "vulnerability_code": "    failing.safeApprove(0, 0);\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}