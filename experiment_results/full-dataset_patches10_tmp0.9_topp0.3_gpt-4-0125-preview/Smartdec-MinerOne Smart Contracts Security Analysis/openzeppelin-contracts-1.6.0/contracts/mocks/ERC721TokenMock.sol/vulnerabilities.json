{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 279,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ownedTokens[_from].length--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_42"
      ],
      "vulnerability_findings": [
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": 18,
          "vulnerability_code": "contract ERC721 {\n\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n\n\n\n  function balanceOf(address _owner) public view returns (uint256 _balance);\n\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n\n  function transfer(address _to, uint256 _tokenId) public;\n\n  function approve(address _to, uint256 _tokenId) public;\n\n  function takeOwnership(uint256 _tokenId) public;\n",
          "message": "ERC721 (ERC721TokenMock.sol#9-18) has incorrect ERC20 function interface(s):\n\t-transfer (ERC721TokenMock.sol#15)\n\t-approve (ERC721TokenMock.sol#16)\n"
        },
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": 284,
          "vulnerability_code": "contract ERC721Token is ERC721 {\n\n  using SafeMath for uint256;\n\n\n\n  // Total amount of tokens\n\n  uint256 private totalTokens;\n\n\n\n  // Mapping from token ID to owner\n\n  mapping (uint256 => address) private tokenOwner;\n\n\n\n  // Mapping from token ID to approved address\n\n  mapping (uint256 => address) private tokenApprovals;\n\n\n\n  // Mapping from owner to list of owned token IDs\n\n  mapping (address => uint256[]) private ownedTokens;\n\n\n\n  // Mapping from token ID to index of the owner tokens list\n\n  mapping(uint256 => uint256) private ownedTokensIndex;\n\n\n\n  /**\n\n  * @dev Guarantees msg.sender is owner of the given token\n\n  * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n\n  */\n\n  modifier onlyOwnerOf(uint256 _tokenId) {\n\n    require(ownerOf(_tokenId) == msg.sender);\n\n    _;\n\n  }\n\n\n\n  /**\n\n  * @dev Gets the total amount of tokens stored by the contract\n\n  * @return uint256 representing the total amount of tokens\n\n  */\n\n  function totalSupply() public view returns (uint256) {\n\n    return totalTokens;\n\n  }\n\n\n\n  /**\n\n  * @dev Gets the balance of the specified address\n\n  * @param _owner address to query the balance of\n\n  * @return uint256 representing the amount owned by the passed address\n\n  */\n\n  function balanceOf(address _owner) public view returns (uint256) {\n\n    return ownedTokens[_owner].length;\n\n  }\n\n\n\n  /**\n\n  * @dev Gets the list of tokens owned by a given address\n\n  * @param _owner address to query the tokens of\n\n  * @return uint256[] representing the list of tokens owned by the passed address\n\n  */\n\n  function tokensOf(address _owner) public view returns (uint256[]) {\n\n    return ownedTokens[_owner];\n\n  }\n\n\n\n  /**\n\n  * @dev Gets the owner of the specified token ID\n\n  * @param _tokenId uint256 ID of the token to query the owner of\n\n  * @return owner address currently marked as the owner of the given token ID\n\n  */\n\n  function ownerOf(uint256 _tokenId) public view returns (address) {\n\n    address owner = tokenOwner[_tokenId];\n\n    require(owner != address(0));\n\n    return owner;\n\n  }\n\n\n\n  /**\n\n   * @dev Gets the approved address to take ownership of a given token ID\n\n   * @param _tokenId uint256 ID of the token to query the approval of\n\n   * @return address currently approved to take ownership of the given token ID\n\n   */\n\n  function approvedFor(uint256 _tokenId) public view returns (address) {\n\n    return tokenApprovals[_tokenId];\n\n  }\n\n\n\n  /**\n\n  * @dev Transfers the ownership of a given token ID to another address\n\n  * @param _to address to receive the ownership of the given token ID\n\n  * @param _tokenId uint256 ID of the token to be transferred\n\n  */\n\n  function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n\n    clearApprovalAndTransfer(msg.sender, _to, _tokenId);\n\n  }\n\n\n\n  /**\n\n  * @dev Approves another address to claim for the ownership of the given token ID\n\n  * @param _to address to be approved for the given token ID\n\n  * @param _tokenId uint256 ID of the token to be approved\n\n  */\n\n  function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n\n    address owner = ownerOf(_tokenId);\n\n    require(_to != owner);\n\n    if (approvedFor(_tokenId) != 0 || _to != 0) {\n\n      tokenApprovals[_tokenId] = _to;\n\n      Approval(owner, _to, _tokenId);\n\n    }\n\n  }\n\n\n\n  /**\n\n  * @dev Claims the ownership of a given token ID\n\n  * @param _tokenId uint256 ID of the token being claimed by the msg.sender\n\n  */\n\n  function takeOwnership(uint256 _tokenId) public {\n\n    require(isApprovedFor(msg.sender, _tokenId));\n\n    clearApprovalAndTransfer(ownerOf(_tokenId), msg.sender, _tokenId);\n\n  }\n\n\n\n  /**\n\n  * @dev Mint token function\n\n  * @param _to The address that will own the minted token\n\n  * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n\n  */\n\n  function _mint(address _to, uint256 _tokenId) internal {\n\n    require(_to != address(0));\n\n    addToken(_to, _tokenId);\n\n    Transfer(0x0, _to, _tokenId);\n\n  }\n\n\n\n  /**\n\n  * @dev Burns a specific token\n\n  * @param _tokenId uint256 ID of the token being burned by the msg.sender\n\n  */\n\n  function _burn(uint256 _tokenId) onlyOwnerOf(_tokenId) internal {\n\n    if (approvedFor(_tokenId) != 0) {\n\n      clearApproval(msg.sender, _tokenId);\n\n    }\n\n    removeToken(msg.sender, _tokenId);\n\n    Transfer(msg.sender, 0x0, _tokenId);\n\n  }\n\n\n\n  /**\n\n   * @dev Tells whether the msg.sender is approved for the given token ID or not\n\n   * This function is not private so it can be extended in further implementations like the operatable ERC721\n\n   * @param _owner address of the owner to query the approval of\n\n   * @param _tokenId uint256 ID of the token to query the approval of\n\n   * @return bool whether the msg.sender is approved for the given token ID or not\n\n   */\n\n  function isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) {\n\n    return approvedFor(_tokenId) == _owner;\n\n  }\n\n\n\n  /**\n\n  * @dev Internal function to clear current approval and transfer the ownership of a given token ID\n\n  * @param _from address which you want to send tokens from\n\n  * @param _to address which you want to transfer the token to\n\n  * @param _tokenId uint256 ID of the token to be transferred\n\n  */\n\n  function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal {\n\n    require(_to != address(0));\n\n    require(_to != ownerOf(_tokenId));\n\n    require(ownerOf(_tokenId) == _from);\n\n\n\n    clearApproval(_from, _tokenId);\n\n    removeToken(_from, _tokenId);\n\n    addToken(_to, _tokenId);\n\n    Transfer(_from, _to, _tokenId);\n\n  }\n\n\n\n  /**\n\n  * @dev Internal function to clear current approval of a given token ID\n\n  * @param _tokenId uint256 ID of the token to be transferred\n\n  */\n\n  function clearApproval(address _owner, uint256 _tokenId) private {\n\n    require(ownerOf(_tokenId) == _owner);\n\n    tokenApprovals[_tokenId] = 0;\n\n    Approval(_owner, 0, _tokenId);\n\n  }\n\n\n\n  /**\n\n  * @dev Internal function to add a token ID to the list of a given address\n\n  * @param _to address representing the new owner of the given token ID\n\n  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n\n  */\n\n  function addToken(address _to, uint256 _tokenId) private {\n\n    require(tokenOwner[_tokenId] == address(0));\n\n    tokenOwner[_tokenId] = _to;\n\n    uint256 length = balanceOf(_to);\n\n    ownedTokens[_to].push(_tokenId);\n\n    ownedTokensIndex[_tokenId] = length;\n\n    totalTokens = totalTokens.add(1);\n\n  }\n\n\n\n  /**\n\n  * @dev Internal function to remove a token ID from the list of a given address\n\n  * @param _from address representing the previous owner of the given token ID\n\n  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n\n  */\n\n  function removeToken(address _from, uint256 _tokenId) private {\n\n    require(ownerOf(_tokenId) == _from);\n\n\n\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n\n    uint256 lastTokenIndex = balanceOf(_from).sub(1);\n\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n\n\n\n    tokenOwner[_tokenId] = 0;\n\n    ownedTokens[_from][tokenIndex] = lastToken;\n\n    ownedTokens[_from][lastTokenIndex] = 0;\n\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n\n\n    ownedTokens[_from].length--;\n\n    ownedTokensIndex[_tokenId] = 0;\n\n    ownedTokensIndex[lastToken] = tokenIndex;\n\n    totalTokens = totalTokens.sub(1);\n\n  }\n",
          "message": "ERC721Token (ERC721TokenMock.sol#80-284) has incorrect ERC20 function interface(s):\n\t-transfer (ERC721TokenMock.sol#158-160)\n\t-approve (ERC721TokenMock.sol#167-174)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _tokenId) public;\n",
          "message": "ERC721.transfer (ERC721TokenMock.sol#15) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": 160,
          "vulnerability_code": "  function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n\n    clearApprovalAndTransfer(msg.sender, _to, _tokenId);\n",
          "message": "ERC721Token.transfer (ERC721TokenMock.sol#158-160) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _to, uint256 _tokenId) public;\n",
          "message": "ERC721.approve (ERC721TokenMock.sol#16) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 167,
          "vulnerability_to_line": 174,
          "vulnerability_code": "  function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n\n    address owner = ownerOf(_tokenId);\n\n    require(_to != owner);\n\n    if (approvedFor(_tokenId) != 0 || _to != 0) {\n\n      tokenApprovals[_tokenId] = _to;\n\n      Approval(owner, _to, _tokenId);\n\n    }\n",
          "message": "ERC721Token.approve (ERC721TokenMock.sol#167-174) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function takeOwnership(uint256 _tokenId) public;\n",
          "message": "ERC721.takeOwnership (ERC721TokenMock.sol#17) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 180,
          "vulnerability_to_line": 183,
          "vulnerability_code": "  function takeOwnership(uint256 _tokenId) public {\n\n    require(isApprovedFor(msg.sender, _tokenId));\n\n    clearApprovalAndTransfer(ownerOf(_tokenId), msg.sender, _tokenId);\n",
          "message": "ERC721Token.takeOwnership (ERC721TokenMock.sol#180-183) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": 113,
          "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return totalTokens;\n",
          "message": "ERC721Token.totalSupply (ERC721TokenMock.sol#111-113) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": 131,
          "vulnerability_code": "  function tokensOf(address _owner) public view returns (uint256[]) {\n\n    return ownedTokens[_owner];\n",
          "message": "ERC721Token.tokensOf (ERC721TokenMock.sol#129-131) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 297,
          "vulnerability_to_line": 299,
          "vulnerability_code": "  function mint(address _to, uint256 _tokenId) public {\n\n    super._mint(_to, _tokenId);\n",
          "message": "ERC721TokenMock.mint (ERC721TokenMock.sol#297-299) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 301,
          "vulnerability_to_line": 303,
          "vulnerability_code": "  function burn(uint256 _tokenId) public {\n\n    super._burn(_tokenId);\n",
          "message": "ERC721TokenMock.burn (ERC721TokenMock.sol#301-303) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": "Detected issues with version pragma in ERC721TokenMock.sol:\n\t- pragma solidity^0.4.18 (ERC721TokenMock.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (ERC721TokenMock.sol#22): it allows old versions\n\t- pragma solidity^0.4.18 (ERC721TokenMock.sol#73): it allows old versions\n\t- pragma solidity^0.4.18 (ERC721TokenMock.sol#288): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 120,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256) {\n",
          "message": "Parameter '_owner' of ERC721Token.balanceOf (ERC721TokenMock.sol#120) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function ownerOf(uint256 _tokenId) public view returns (address) {\n",
          "message": "Parameter '_tokenId' of ERC721Token.ownerOf (ERC721TokenMock.sol#138) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n",
          "message": "Parameter '_to' of ERC721Token.transfer (ERC721TokenMock.sol#158) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n",
          "message": "Parameter '_tokenId' of ERC721Token.transfer (ERC721TokenMock.sol#158) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 167,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n",
          "message": "Parameter '_to' of ERC721Token.approve (ERC721TokenMock.sol#167) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 167,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n",
          "message": "Parameter '_tokenId' of ERC721Token.approve (ERC721TokenMock.sol#167) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 180,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function takeOwnership(uint256 _tokenId) public {\n",
          "message": "Parameter '_tokenId' of ERC721Token.takeOwnership (ERC721TokenMock.sol#180) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function tokensOf(address _owner) public view returns (uint256[]) {\n",
          "message": "Parameter '_owner' of ERC721Token.tokensOf (ERC721TokenMock.sol#129) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approvedFor(uint256 _tokenId) public view returns (address) {\n",
          "message": "Parameter '_tokenId' of ERC721Token.approvedFor (ERC721TokenMock.sol#149) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": 194,
          "vulnerability_code": "  function _mint(address _to, uint256 _tokenId) internal {\n\n    require(_to != address(0));\n\n    addToken(_to, _tokenId);\n\n    Transfer(0x0, _to, _tokenId);\n",
          "message": "Function 'ERC721Token._mint' (ERC721TokenMock.sol#190-194) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function _mint(address _to, uint256 _tokenId) internal {\n",
          "message": "Parameter '_to' of ERC721Token._mint (ERC721TokenMock.sol#190) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function _mint(address _to, uint256 _tokenId) internal {\n",
          "message": "Parameter '_tokenId' of ERC721Token._mint (ERC721TokenMock.sol#190) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": 206,
          "vulnerability_code": "  function _burn(uint256 _tokenId) onlyOwnerOf(_tokenId) internal {\n\n    if (approvedFor(_tokenId) != 0) {\n\n      clearApproval(msg.sender, _tokenId);\n\n    }\n\n    removeToken(msg.sender, _tokenId);\n\n    Transfer(msg.sender, 0x0, _tokenId);\n",
          "message": "Function 'ERC721Token._burn' (ERC721TokenMock.sol#200-206) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function _burn(uint256 _tokenId) onlyOwnerOf(_tokenId) internal {\n",
          "message": "Parameter '_tokenId' of ERC721Token._burn (ERC721TokenMock.sol#200) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) {\n",
          "message": "Parameter '_owner' of ERC721Token.isApprovedFor (ERC721TokenMock.sol#215) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) {\n",
          "message": "Parameter '_tokenId' of ERC721Token.isApprovedFor (ERC721TokenMock.sol#215) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 225,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal {\n",
          "message": "Parameter '_from' of ERC721Token.clearApprovalAndTransfer (ERC721TokenMock.sol#225) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 225,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal {\n",
          "message": "Parameter '_to' of ERC721Token.clearApprovalAndTransfer (ERC721TokenMock.sol#225) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 225,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal {\n",
          "message": "Parameter '_tokenId' of ERC721Token.clearApprovalAndTransfer (ERC721TokenMock.sol#225) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 240,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function clearApproval(address _owner, uint256 _tokenId) private {\n",
          "message": "Parameter '_owner' of ERC721Token.clearApproval (ERC721TokenMock.sol#240) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 240,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function clearApproval(address _owner, uint256 _tokenId) private {\n",
          "message": "Parameter '_tokenId' of ERC721Token.clearApproval (ERC721TokenMock.sol#240) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 251,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addToken(address _to, uint256 _tokenId) private {\n",
          "message": "Parameter '_to' of ERC721Token.addToken (ERC721TokenMock.sol#251) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 251,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addToken(address _to, uint256 _tokenId) private {\n",
          "message": "Parameter '_tokenId' of ERC721Token.addToken (ERC721TokenMock.sol#251) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 265,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function removeToken(address _from, uint256 _tokenId) private {\n",
          "message": "Parameter '_from' of ERC721Token.removeToken (ERC721TokenMock.sol#265) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 265,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function removeToken(address _from, uint256 _tokenId) private {\n",
          "message": "Parameter '_tokenId' of ERC721Token.removeToken (ERC721TokenMock.sol#265) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function ERC721TokenMock() ERC721Token() public { }\n",
          "message": "Function 'ERC721TokenMock.ERC721TokenMock' (ERC721TokenMock.sol#295) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 297,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mint(address _to, uint256 _tokenId) public {\n",
          "message": "Parameter '_to' of ERC721TokenMock.mint (ERC721TokenMock.sol#297) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 297,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mint(address _to, uint256 _tokenId) public {\n",
          "message": "Parameter '_tokenId' of ERC721TokenMock.mint (ERC721TokenMock.sol#297) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 301,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function burn(uint256 _tokenId) public {\n",
          "message": "Parameter '_tokenId' of ERC721TokenMock.burn (ERC721TokenMock.sol#301) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 279,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ownedTokens[_from].length--;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 167,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 288,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 private totalTokens;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping (uint256 => address) private tokenOwner;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping (uint256 => address) private tokenApprovals;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping (address => uint256[]) private ownedTokens;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping(uint256 => uint256) private ownedTokensIndex;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function tokensOf(address _owner) public view returns (uint256[]) {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function tokensOf(address _owner) public view returns (uint256[]) {\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 130,
          "vulnerability_to_line": null,
          "vulnerability_code": "    return ownedTokens[_owner];\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "// File: ../sc_datasets/DAppSCAN/Smartdec-MinerOne Smart Contracts Security Analysis/openzeppelin-contracts-1.6.0/contracts/token/ERC721/ERC721.sol\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function tokensOf(address _owner) public view returns (uint256[]) {\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 130,
          "vulnerability_to_line": null,
          "vulnerability_code": "    return ownedTokens[_owner];\n",
          "message": null
        }
      ]
    }
  }
}