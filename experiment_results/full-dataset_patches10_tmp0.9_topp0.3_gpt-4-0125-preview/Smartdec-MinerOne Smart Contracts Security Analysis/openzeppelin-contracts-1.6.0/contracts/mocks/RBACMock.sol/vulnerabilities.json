{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 237,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _advisors.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 237,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _advisors.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 237,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _advisors.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_10"
      ],
      "vulnerability_findings": [
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping (string => Roles.Role) private roles;\n",
          "message": "RBAC.roles (RBACMock.sol#77) is never initialized. It is used in:\n\t- checkRole (RBACMock.sol#102-107)\n\t- hasRole (RBACMock.sol#115-121)\n\t- addRole (RBACMock.sol#152-157)\n\t- removeRole (RBACMock.sol#164-169)\n"
        },
        {
          "name": "pragma",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": "Different versions of Solidity is used in RBACMock.sol:\n\t- Version used: ['^0.4.18', '^0.4.8']\n\t- RBACMock.sol#3 declares pragma solidity^0.4.18\n\t- RBACMock.sol#61 declares pragma solidity^0.4.18\n\t- RBACMock.sol#217 declares pragma solidity^0.4.8\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": 133,
          "vulnerability_code": "  function adminAddRole(address addr, string roleName)\n\n    onlyAdmin\n\n    public\n\n  {\n\n    addRole(addr, roleName);\n",
          "message": "RBAC.adminAddRole (RBACMock.sol#128-133) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 140,
          "vulnerability_to_line": 145,
          "vulnerability_code": "  function adminRemoveRole(address addr, string roleName)\n\n    onlyAdmin\n\n    public\n\n  {\n\n    removeRole(addr, roleName);\n",
          "message": "RBAC.adminRemoveRole (RBACMock.sol#140-145) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 271,
          "vulnerability_to_line": 281,
          "vulnerability_code": "  function removeAdvisor(address _addr)\n\n    onlyAdmin\n\n    public\n\n  {\n\n    // revert if the user isn't an advisor\n\n    //  (perhaps you want to soft-fail here instead?)\n\n    checkRole(_addr, ROLE_ADVISOR);\n\n\n\n    // remove the advisor's role\n\n    removeRole(_addr, ROLE_ADVISOR);\n",
          "message": "RBACMock.removeAdvisor (RBACMock.sol#271-281) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": "Detected issues with version pragma in RBACMock.sol:\n\t- pragma solidity^0.4.18 (RBACMock.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (RBACMock.sol#61): it allows old versions\n\t- pragma solidity^0.4.8 (RBACMock.sol#217): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": 94,
          "vulnerability_code": "  function RBAC()\n\n    public\n\n  {\n\n    addRole(msg.sender, ROLE_ADMIN);\n",
          "message": "Function 'RBAC.RBAC' (RBACMock.sol#90-94) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": 240,
          "vulnerability_code": "  function RBACMock(address[] _advisors)\n\n    public\n\n  {\n\n    addRole(msg.sender, ROLE_ADVISOR);\n\n\n\n    for (uint256 i = 0; i < _advisors.length; i++) {\n\n      addRole(_advisors[i], ROLE_ADVISOR);\n\n    }\n",
          "message": "Function 'RBACMock.RBACMock' (RBACMock.sol#232-240) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function RBACMock(address[] _advisors)\n",
          "message": "Parameter '_advisors' of RBACMock.RBACMock (RBACMock.sol#232) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 271,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function removeAdvisor(address _addr)\n",
          "message": "Parameter '_addr' of RBACMock.removeAdvisor (RBACMock.sol#271) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 237,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _advisors.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 237,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _advisors.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.8;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping (string => Roles.Role) private roles;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function checkRole(address addr, string roleName)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function hasRole(address addr, string roleName)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function adminAddRole(address addr, string roleName)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 140,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function adminRemoveRole(address addr, string roleName)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 152,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addRole(address addr, string roleName)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 164,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function removeRole(address addr, string roleName)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function RBACMock(address[] _advisors)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 221,
          "vulnerability_to_line": null,
          "vulnerability_code": "  string constant ROLE_ADVISOR = \"advisor\";\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function checkRole(address addr, string roleName)\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function checkRole(address addr, string roleName)\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 106,
          "vulnerability_to_line": null,
          "vulnerability_code": "    roles[roleName].check(addr);\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}