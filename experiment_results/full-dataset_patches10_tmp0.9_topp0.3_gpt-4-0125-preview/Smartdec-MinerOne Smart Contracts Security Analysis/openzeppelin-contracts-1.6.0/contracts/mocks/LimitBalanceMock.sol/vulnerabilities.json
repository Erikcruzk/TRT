{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_5"
      ],
      "vulnerability_findings": [
        {
          "name": "locked-ether",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": 43,
          "vulnerability_code": "  function limitedDeposit() public payable limitedPayable {\n",
          "message": "Contract locking ether found in LimitBalanceMock.sol:\n\tContract LimitBalanceMock has payable functions:\n\t - limitedDeposit (LimitBalanceMock.sol#42-43)\n\tBut does not have a function to withdraw the ether\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": 43,
          "vulnerability_code": "  function limitedDeposit() public payable limitedPayable {\n",
          "message": "LimitBalanceMock.limitedDeposit (LimitBalanceMock.sol#42-43) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": "Detected issues with version pragma in LimitBalanceMock.sol:\n\t- pragma solidity^0.4.18 (LimitBalanceMock.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (LimitBalanceMock.sol#37): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": 22,
          "vulnerability_code": "  function LimitBalance(uint256 _limit) public {\n\n    limit = _limit;\n",
          "message": "Function 'LimitBalance.LimitBalance' (LimitBalanceMock.sol#20-22) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function LimitBalance(uint256 _limit) public {\n",
          "message": "Parameter '_limit' of LimitBalance.LimitBalance (LimitBalanceMock.sol#20) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract LimitBalanceMock is LimitBalance(1000) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}