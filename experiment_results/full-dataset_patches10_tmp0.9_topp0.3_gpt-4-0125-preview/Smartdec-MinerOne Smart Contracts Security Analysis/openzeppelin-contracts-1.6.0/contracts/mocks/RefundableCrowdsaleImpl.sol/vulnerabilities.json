{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 290,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract MintableToken is StandardToken, Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 448,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract FinalizableCrowdsale is Crowdsale, Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 489,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract RefundVault is Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bool public mintingFinished = false;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 451,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bool public isFinalized = false;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_52"
      ],
      "vulnerability_findings": [
        {
          "name": "unused-return",
          "vulnerability_from_line": 388,
          "vulnerability_to_line": 404,
          "vulnerability_code": "  function buyTokens(address beneficiary) public payable {\n\n    require(beneficiary != address(0));\n\n    require(validPurchase());\n\n\n\n    uint256 weiAmount = msg.value;\n\n\n\n    // calculate token amount to be created\n\n    uint256 tokens = getTokenAmount(weiAmount);\n\n\n\n    // update state\n\n    weiRaised = weiRaised.add(weiAmount);\n\n\n\n    token.mint(beneficiary, tokens);\n\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n\n\n\n    forwardFunds();\n",
          "message": "Crowdsale.buyTokens (RefundableCrowdsaleImpl.sol#388-404) does not use the value returned by external calls:\n\t-token.mint(beneficiary,tokens) (RefundableCrowdsaleImpl.sol#400)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 89,
          "vulnerability_to_line": 93,
          "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n",
          "message": "Ownable.transferOwnership (RefundableCrowdsaleImpl.sol#89-93) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
          "message": "ERC20Basic.totalSupply (RefundableCrowdsaleImpl.sol#108) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 133,
          "vulnerability_to_line": 135,
          "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return totalSupply_;\n",
          "message": "BasicToken.totalSupply (RefundableCrowdsaleImpl.sol#133-135) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": 160,
          "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n\n    return balances[_owner];\n",
          "message": "BasicToken.balanceOf (RefundableCrowdsaleImpl.sol#158-160) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 109,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
          "message": "ERC20Basic.balanceOf (RefundableCrowdsaleImpl.sol#109) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": 151,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    require(_value <= balances[msg.sender]);\n\n\n\n    // SafeMath.sub will throw if there is not enough balance.\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
          "message": "BasicToken.transfer (RefundableCrowdsaleImpl.sol#142-151) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
          "message": "ERC20Basic.transfer (RefundableCrowdsaleImpl.sol#110) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 236,
          "vulnerability_to_line": 238,
          "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n\n    return allowed[_owner][_spender];\n",
          "message": "StandardToken.allowance (RefundableCrowdsaleImpl.sol#236-238) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256);\n",
          "message": "ERC20.allowance (RefundableCrowdsaleImpl.sol#173) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 202,
          "vulnerability_to_line": 212,
          "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    require(_value <= balances[_from]);\n\n    require(_value <= allowed[_from][msg.sender]);\n\n\n\n    balances[_from] = balances[_from].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n    Transfer(_from, _to, _value);\n\n    return true;\n",
          "message": "StandardToken.transferFrom (RefundableCrowdsaleImpl.sol#202-212) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 174,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address from, address to, uint256 value) public returns (bool);\n",
          "message": "ERC20.transferFrom (RefundableCrowdsaleImpl.sol#174) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": 228,
          "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n\n    allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n",
          "message": "StandardToken.approve (RefundableCrowdsaleImpl.sol#224-228) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 175,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool);\n",
          "message": "ERC20.approve (RefundableCrowdsaleImpl.sol#175) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 250,
          "vulnerability_to_line": 254,
          "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
          "message": "StandardToken.increaseApproval (RefundableCrowdsaleImpl.sol#250-254) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 266,
          "vulnerability_to_line": 275,
          "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n\n    uint oldValue = allowed[msg.sender][_spender];\n\n    if (_subtractedValue > oldValue) {\n\n      allowed[msg.sender][_spender] = 0;\n\n    } else {\n\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\n    }\n\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
          "message": "StandardToken.decreaseApproval (RefundableCrowdsaleImpl.sol#266-275) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 308,
          "vulnerability_to_line": 314,
          "vulnerability_code": "  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n\n    totalSupply_ = totalSupply_.add(_amount);\n\n    balances[_to] = balances[_to].add(_amount);\n\n    Mint(_to, _amount);\n\n    Transfer(address(0), _to, _amount);\n\n    return true;\n",
          "message": "MintableToken.mint (RefundableCrowdsaleImpl.sol#308-314) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": 324,
          "vulnerability_code": "  function finishMinting() onlyOwner canMint public returns (bool) {\n\n    mintingFinished = true;\n\n    MintFinished();\n\n    return true;\n",
          "message": "MintableToken.finishMinting (RefundableCrowdsaleImpl.sol#320-324) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 459,
          "vulnerability_to_line": 467,
          "vulnerability_code": "  function finalize() onlyOwner public {\n\n    require(!isFinalized);\n\n    require(hasEnded());\n\n\n\n    finalization();\n\n    Finalized();\n\n\n\n    isFinalized = true;\n",
          "message": "FinalizableCrowdsale.finalize (RefundableCrowdsaleImpl.sol#459-467) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 508,
          "vulnerability_to_line": 511,
          "vulnerability_code": "  function deposit(address investor) onlyOwner public payable {\n\n    require(state == State.Active);\n\n    deposited[investor] = deposited[investor].add(msg.value);\n",
          "message": "RefundVault.deposit (RefundableCrowdsaleImpl.sol#508-511) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 513,
          "vulnerability_to_line": 518,
          "vulnerability_code": "  function close() onlyOwner public {\n\n    require(state == State.Active);\n\n    state = State.Closed;\n\n    Closed();\n\n    wallet.transfer(this.balance);\n",
          "message": "RefundVault.close (RefundableCrowdsaleImpl.sol#513-518) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 520,
          "vulnerability_to_line": 524,
          "vulnerability_code": "  function enableRefunds() onlyOwner public {\n\n    require(state == State.Active);\n\n    state = State.Refunding;\n\n    RefundsEnabled();\n",
          "message": "RefundVault.enableRefunds (RefundableCrowdsaleImpl.sol#520-524) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 526,
          "vulnerability_to_line": 532,
          "vulnerability_code": "  function refund(address investor) public {\n\n    require(state == State.Refunding);\n\n    uint256 depositedValue = deposited[investor];\n\n    deposited[investor] = 0;\n\n    investor.transfer(depositedValue);\n\n    Refunded(investor, depositedValue);\n",
          "message": "RefundVault.refund (RefundableCrowdsaleImpl.sol#526-532) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 563,
          "vulnerability_to_line": 568,
          "vulnerability_code": "  function claimRefund() public {\n\n    require(isFinalized);\n\n    require(!goalReached());\n\n\n\n    vault.refund(msg.sender);\n",
          "message": "RefundableCrowdsale.claimRefund (RefundableCrowdsaleImpl.sol#563-568) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": "Detected issues with version pragma in RefundableCrowdsaleImpl.sol:\n\t- pragma solidity^0.4.18 (RefundableCrowdsaleImpl.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (RefundableCrowdsaleImpl.sol#54): it allows old versions\n\t- pragma solidity^0.4.18 (RefundableCrowdsaleImpl.sol#99): it allows old versions\n\t- pragma solidity^0.4.18 (RefundableCrowdsaleImpl.sol#116): it allows old versions\n\t- pragma solidity^0.4.18 (RefundableCrowdsaleImpl.sol#166): it allows old versions\n\t- pragma solidity^0.4.18 (RefundableCrowdsaleImpl.sol#181): it allows old versions\n\t- pragma solidity^0.4.18 (RefundableCrowdsaleImpl.sol#281): it allows old versions\n\t- pragma solidity^0.4.18 (RefundableCrowdsaleImpl.sol#329): it allows old versions\n\t- pragma solidity^0.4.18 (RefundableCrowdsaleImpl.sol#439): it allows old versions\n\t- pragma solidity^0.4.18 (RefundableCrowdsaleImpl.sol#480): it allows old versions\n\t- pragma solidity^0.4.18 (RefundableCrowdsaleImpl.sol#537): it allows old versions\n\t- pragma solidity^0.4.18 (RefundableCrowdsaleImpl.sol#596): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": 75,
          "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n",
          "message": "Function 'Ownable.Ownable' (RefundableCrowdsaleImpl.sol#73-75) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n",
          "message": "Parameter '_owner' of BasicToken.balanceOf (RefundableCrowdsaleImpl.sol#158) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_to' of BasicToken.transfer (RefundableCrowdsaleImpl.sol#142) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of BasicToken.transfer (RefundableCrowdsaleImpl.sol#142) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 236,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n",
          "message": "Parameter '_owner' of StandardToken.allowance (RefundableCrowdsaleImpl.sol#236) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 236,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n",
          "message": "Parameter '_spender' of StandardToken.allowance (RefundableCrowdsaleImpl.sol#236) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 202,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_from' of StandardToken.transferFrom (RefundableCrowdsaleImpl.sol#202) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 202,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_to' of StandardToken.transferFrom (RefundableCrowdsaleImpl.sol#202) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 202,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of StandardToken.transferFrom (RefundableCrowdsaleImpl.sol#202) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_spender' of StandardToken.approve (RefundableCrowdsaleImpl.sol#224) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of StandardToken.approve (RefundableCrowdsaleImpl.sol#224) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 250,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
          "message": "Parameter '_spender' of StandardToken.increaseApproval (RefundableCrowdsaleImpl.sol#250) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 250,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
          "message": "Parameter '_addedValue' of StandardToken.increaseApproval (RefundableCrowdsaleImpl.sol#250) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 266,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
          "message": "Parameter '_spender' of StandardToken.decreaseApproval (RefundableCrowdsaleImpl.sol#266) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 266,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
          "message": "Parameter '_subtractedValue' of StandardToken.decreaseApproval (RefundableCrowdsaleImpl.sol#266) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 308,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n",
          "message": "Parameter '_to' of MintableToken.mint (RefundableCrowdsaleImpl.sol#308) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 308,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n",
          "message": "Parameter '_amount' of MintableToken.mint (RefundableCrowdsaleImpl.sol#308) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 369,
          "vulnerability_to_line": 380,
          "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n\n    require(_startTime >= now);\n\n    require(_endTime >= _startTime);\n\n    require(_rate > 0);\n\n    require(_wallet != address(0));\n\n\n\n    token = createTokenContract();\n\n    startTime = _startTime;\n\n    endTime = _endTime;\n\n    rate = _rate;\n\n    wallet = _wallet;\n",
          "message": "Function 'Crowdsale.Crowdsale' (RefundableCrowdsaleImpl.sol#369-380) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 369,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n",
          "message": "Parameter '_startTime' of Crowdsale.Crowdsale (RefundableCrowdsaleImpl.sol#369) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 369,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n",
          "message": "Parameter '_endTime' of Crowdsale.Crowdsale (RefundableCrowdsaleImpl.sol#369) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 369,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n",
          "message": "Parameter '_rate' of Crowdsale.Crowdsale (RefundableCrowdsaleImpl.sol#369) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 369,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n",
          "message": "Parameter '_wallet' of Crowdsale.Crowdsale (RefundableCrowdsaleImpl.sol#369) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 502,
          "vulnerability_to_line": 506,
          "vulnerability_code": "  function RefundVault(address _wallet) public {\n\n    require(_wallet != address(0));\n\n    wallet = _wallet;\n\n    state = State.Active;\n",
          "message": "Function 'RefundVault.RefundVault' (RefundableCrowdsaleImpl.sol#502-506) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 502,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function RefundVault(address _wallet) public {\n",
          "message": "Parameter '_wallet' of RefundVault.RefundVault (RefundableCrowdsaleImpl.sol#502) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 556,
          "vulnerability_to_line": 560,
          "vulnerability_code": "  function RefundableCrowdsale(uint256 _goal) public {\n\n    require(_goal > 0);\n\n    vault = new RefundVault(wallet);\n\n    goal = _goal;\n",
          "message": "Function 'RefundableCrowdsale.RefundableCrowdsale' (RefundableCrowdsaleImpl.sol#556-560) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 556,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function RefundableCrowdsale(uint256 _goal) public {\n",
          "message": "Parameter '_goal' of RefundableCrowdsale.RefundableCrowdsale (RefundableCrowdsaleImpl.sol#556) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 600,
          "vulnerability_to_line": 610,
          "vulnerability_code": "  function RefundableCrowdsaleImpl (\n\n    uint256 _startTime,\n\n    uint256 _endTime,\n\n    uint256 _rate,\n\n    address _wallet,\n\n    uint256 _goal\n\n  ) public\n\n    Crowdsale(_startTime, _endTime, _rate, _wallet)\n\n    RefundableCrowdsale(_goal)\n\n  {\n",
          "message": "Function 'RefundableCrowdsaleImpl.RefundableCrowdsaleImpl' (RefundableCrowdsaleImpl.sol#600-610) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 166,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 181,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 281,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 329,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 439,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 480,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 537,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 596,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 124,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 341,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 449,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 490,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 548,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 126,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping(address => uint256) balances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 totalSupply_;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 c = a + b;\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 c = a + b;\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 c = a + b;\n",
          "message": null
        },
        {
          "name": "Transaction-Ordering Dependence (TOD)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 c = a + b;\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Concurrency bug",
          "vulnerability_from_line": 517,
          "vulnerability_to_line": null,
          "vulnerability_code": "    wallet.transfer(this.balance);\n",
          "message": null
        },
        {
          "name": "Concurrency bug",
          "vulnerability_from_line": 530,
          "vulnerability_to_line": null,
          "vulnerability_code": "    investor.transfer(depositedValue);\n",
          "message": null
        }
      ]
    }
  }
}