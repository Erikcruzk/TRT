{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "inefficient-state-variable-increment",
          "vulnerability_from_line": 89,
          "vulnerability_to_line": null,
          "vulnerability_code": "    counter += 1;\n",
          "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bool private reentrancy_lock = false;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_8"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": 46,
          "vulnerability_code": "  function callSender(bytes4 data) public {\n\n    require(msg.sender.call(data));\n\n  }\n",
          "message": "ReentrancyAttack.callSender (ReentrancyMock.sol#43-46) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": 81,
          "vulnerability_code": "  function countThisRecursive(uint256 n) public nonReentrant {\n\n    bytes4 func = bytes4(keccak256(\"countThisRecursive(uint256)\"));\n\n    if (n > 0) {\n\n      count();\n\n      bool result = this.call(func, n - 1);\n\n      require(result == true);\n\n    }\n\n  }\n",
          "message": "ReentrancyMock.countThisRecursive (ReentrancyMock.sol#73-81) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": 87,
          "vulnerability_code": "  function countAndCall(ReentrancyAttack attacker) public nonReentrant {\n\n    count();\n\n    bytes4 func = bytes4(keccak256(\"callback()\"));\n\n    attacker.callSender(func);\n\n  }\n",
          "message": "ReentrancyMock.countAndCall (ReentrancyMock.sol#82-87) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": "Detected issues with version pragma in ReentrancyMock.sol:\n\t- pragma solidity^0.4.18 (ReentrancyMock.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (ReentrancyMock.sol#38-39): it allows old versions\n\t- pragma solidity^0.4.18 (ReentrancyMock.sol#51-52): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": 46,
          "vulnerability_code": "  function callSender(bytes4 data) public {\n\n    require(msg.sender.call(data));\n\n  }\n",
          "message": "Low level call in ReentrancyAttack.callSender (ReentrancyMock.sol#43-46):\n\t-require(bool)(msg.sender.call(data)) ReentrancyMock.sol#44\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": 81,
          "vulnerability_code": "  function countThisRecursive(uint256 n) public nonReentrant {\n\n    bytes4 func = bytes4(keccak256(\"countThisRecursive(uint256)\"));\n\n    if (n > 0) {\n\n      count();\n\n      bool result = this.call(func, n - 1);\n\n      require(result == true);\n\n    }\n\n  }\n",
          "message": "Low level call in ReentrancyMock.countThisRecursive (ReentrancyMock.sol#73-81):\n\t-result = this.call(func,n - 1) ReentrancyMock.sol#77\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bool private reentrancy_lock = false;\n",
          "message": "Variable 'ReentrancyGuard.reentrancy_lock' (ReentrancyMock.sol#17) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": 61,
          "vulnerability_code": "  function ReentrancyMock() public {\n\n    counter = 0;\n\n  }\n",
          "message": "Function 'ReentrancyMock.ReentrancyMock' (ReentrancyMock.sol#58-61) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bool private reentrancy_lock = false;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "    attacker.callSender(func);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "      bool result = this.call(func, n - 1);\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Callstack Depth Attack Vulnerability",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "      bool result = this.call(func, n - 1);\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender.call(data));\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "    reentrancy_lock = false;\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "    reentrancy_lock = false;\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "    attacker.callSender(func);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "    reentrancy_lock = false;\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "    reentrancy_lock = false;\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Callstack bug",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "      bool result = this.call(func, n - 1);\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 89,
          "vulnerability_to_line": null,
          "vulnerability_code": "    counter += 1;\n",
          "message": null
        }
      ]
    }
  }
}