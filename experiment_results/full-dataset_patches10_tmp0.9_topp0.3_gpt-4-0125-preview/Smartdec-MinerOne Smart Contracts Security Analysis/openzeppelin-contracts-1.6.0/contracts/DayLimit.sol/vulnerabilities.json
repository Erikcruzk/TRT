{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "inefficient-state-variable-increment",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "      spentToday += _value;\n",
          "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "    if (spentToday + _value >= spentToday && spentToday + _value <= dailyLimit) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "      spentToday += _value;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "      return true;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_7"
      ],
      "vulnerability_findings": [
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": "Detected issues with version pragma in DayLimit.sol:\n\t- pragma solidity^0.4.18 (DayLimit.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 24,
          "vulnerability_code": "  function DayLimit(uint256 _limit) public {\n\n    dailyLimit = _limit;\n\n    lastDay = today();\n",
          "message": "Function 'DayLimit.DayLimit' (DayLimit.sol#21-24) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function DayLimit(uint256 _limit) public {\n",
          "message": "Parameter '_limit' of DayLimit.DayLimit (DayLimit.sol#21) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": 32,
          "vulnerability_code": "  function _setDailyLimit(uint256 _newLimit) internal {\n\n    dailyLimit = _newLimit;\n",
          "message": "Function 'DayLimit._setDailyLimit' (DayLimit.sol#30-32) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function _setDailyLimit(uint256 _newLimit) internal {\n",
          "message": "Parameter '_newLimit' of DayLimit._setDailyLimit (DayLimit.sol#30) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": 39,
          "vulnerability_code": "  function _resetSpentToday() internal {\n\n    spentToday = 0;\n",
          "message": "Function 'DayLimit._resetSpentToday' (DayLimit.sol#37-39) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function underLimit(uint256 _value) internal returns (bool) {\n",
          "message": "Parameter '_value' of DayLimit.underLimit (DayLimit.sol#46) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}