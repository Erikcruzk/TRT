{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract RefundVault is Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_9"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 89,
          "vulnerability_to_line": 93,
          "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n",
          "message": "Ownable.transferOwnership (RefundVault.sol#89-93) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 127,
          "vulnerability_to_line": 130,
          "vulnerability_code": "  function deposit(address investor) onlyOwner public payable {\n\n    require(state == State.Active);\n\n    deposited[investor] = deposited[investor].add(msg.value);\n",
          "message": "RefundVault.deposit (RefundVault.sol#127-130) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 132,
          "vulnerability_to_line": 137,
          "vulnerability_code": "  function close() onlyOwner public {\n\n    require(state == State.Active);\n\n    state = State.Closed;\n\n    Closed();\n\n    wallet.transfer(this.balance);\n",
          "message": "RefundVault.close (RefundVault.sol#132-137) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 139,
          "vulnerability_to_line": 143,
          "vulnerability_code": "  function enableRefunds() onlyOwner public {\n\n    require(state == State.Active);\n\n    state = State.Refunding;\n\n    RefundsEnabled();\n",
          "message": "RefundVault.enableRefunds (RefundVault.sol#139-143) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 145,
          "vulnerability_to_line": 151,
          "vulnerability_code": "  function refund(address investor) public {\n\n    require(state == State.Refunding);\n\n    uint256 depositedValue = deposited[investor];\n\n    deposited[investor] = 0;\n\n    investor.transfer(depositedValue);\n\n    Refunded(investor, depositedValue);\n",
          "message": "RefundVault.refund (RefundVault.sol#145-151) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": "Detected issues with version pragma in RefundVault.sol:\n\t- pragma solidity^0.4.18 (RefundVault.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (RefundVault.sol#54): it allows old versions\n\t- pragma solidity^0.4.18 (RefundVault.sol#99): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": 75,
          "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n",
          "message": "Function 'Ownable.Ownable' (RefundVault.sol#73-75) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 121,
          "vulnerability_to_line": 125,
          "vulnerability_code": "  function RefundVault(address _wallet) public {\n\n    require(_wallet != address(0));\n\n    wallet = _wallet;\n\n    state = State.Active;\n",
          "message": "Function 'RefundVault.RefundVault' (RefundVault.sol#121-125) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 121,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function RefundVault(address _wallet) public {\n",
          "message": "Parameter '_wallet' of RefundVault.RefundVault (RefundVault.sol#121) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 109,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 c = a + b;\n",
          "message": null
        },
        {
          "name": "Transaction-Ordering Dependence (TOD)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Concurrency bug",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": null,
          "vulnerability_code": "    wallet.transfer(this.balance);\n",
          "message": null
        },
        {
          "name": "Concurrency bug",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": null,
          "vulnerability_code": "    investor.transfer(depositedValue);\n",
          "message": null
        }
      ]
    }
  }
}