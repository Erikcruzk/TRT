{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_7"
      ],
      "vulnerability_findings": [
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": 18,
          "vulnerability_code": "contract ERC721 {\n\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n\n\n\n  function balanceOf(address _owner) public view returns (uint256 _balance);\n\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n\n  function transfer(address _to, uint256 _tokenId) public;\n\n  function approve(address _to, uint256 _tokenId) public;\n\n  function takeOwnership(uint256 _tokenId) public;\n",
          "message": "ERC721 (ERC721.sol#9-18) has incorrect ERC20 function interface(s):\n\t-transfer (ERC721.sol#15)\n\t-approve (ERC721.sol#16)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 _balance);\n",
          "message": "ERC721.balanceOf (ERC721.sol#13) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n",
          "message": "ERC721.ownerOf (ERC721.sol#14) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _tokenId) public;\n",
          "message": "ERC721.transfer (ERC721.sol#15) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _to, uint256 _tokenId) public;\n",
          "message": "ERC721.approve (ERC721.sol#16) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function takeOwnership(uint256 _tokenId) public;\n",
          "message": "ERC721.takeOwnership (ERC721.sol#17) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": "Detected issues with version pragma in ERC721.sol:\n\t- pragma solidity^0.4.18 (ERC721.sol#3): it allows old versions\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "execution failed"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "input files do not contain any valid contracts"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}