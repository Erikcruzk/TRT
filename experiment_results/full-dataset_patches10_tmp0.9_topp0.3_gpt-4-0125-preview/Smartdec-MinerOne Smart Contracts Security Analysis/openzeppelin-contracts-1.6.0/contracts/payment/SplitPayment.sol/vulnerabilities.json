{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _payees.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 public totalShares = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 public totalReleased = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _payees.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _payees.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_8"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function () public payable {}\n",
          "message": "SplitPayment.fallback (SplitPayment.sol#85) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": 105,
          "vulnerability_code": "  function claim() public {\n\n    address payee = msg.sender;\n\n\n\n    require(shares[payee] > 0);\n\n\n\n    uint256 totalReceived = this.balance.add(totalReleased);\n\n    uint256 payment = totalReceived.mul(shares[payee]).div(totalShares).sub(released[payee]);\n\n\n\n    require(payment != 0);\n\n    require(this.balance >= payment);\n\n\n\n    released[payee] = released[payee].add(payment);\n\n    totalReleased = totalReleased.add(payment);\n\n\n\n    payee.transfer(payment);\n",
          "message": "SplitPayment.claim (SplitPayment.sol#90-105) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": "Detected issues with version pragma in SplitPayment.sol:\n\t- pragma solidity^0.4.18 (SplitPayment.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (SplitPayment.sol#54): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": 80,
          "vulnerability_code": "  function SplitPayment(address[] _payees, uint256[] _shares) public payable {\n\n    require(_payees.length == _shares.length);\n\n\n\n    for (uint256 i = 0; i < _payees.length; i++) {\n\n      addPayee(_payees[i], _shares[i]);\n\n    }\n",
          "message": "Function 'SplitPayment.SplitPayment' (SplitPayment.sol#74-80) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function SplitPayment(address[] _payees, uint256[] _shares) public payable {\n",
          "message": "Parameter '_payees' of SplitPayment.SplitPayment (SplitPayment.sol#74) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function SplitPayment(address[] _payees, uint256[] _shares) public payable {\n",
          "message": "Parameter '_shares' of SplitPayment.SplitPayment (SplitPayment.sol#74) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addPayee(address _payee, uint256 _shares) internal {\n",
          "message": "Parameter '_payee' of SplitPayment.addPayee (SplitPayment.sol#112) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addPayee(address _payee, uint256 _shares) internal {\n",
          "message": "Parameter '_shares' of SplitPayment.addPayee (SplitPayment.sol#112) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _payees.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _payees.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function () public payable {}\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function SplitPayment(address[] _payees, uint256[] _shares) public payable {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function SplitPayment(address[] _payees, uint256[] _shares) public payable {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 c = a + b;\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address[] public payees;\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}