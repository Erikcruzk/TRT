{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract TokenDestructible is Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < tokens.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < tokens.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < tokens.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_11"
      ],
      "vulnerability_findings": [
        {
          "name": "unused-return",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": 97,
          "vulnerability_code": "  function destroy(address[] tokens) onlyOwner public {\n\n\n\n    // Transfer tokens to owner\n\n    for (uint256 i = 0; i < tokens.length; i++) {\n\n      ERC20Basic token = ERC20Basic(tokens[i]);\n\n      uint256 balance = token.balanceOf(this);\n\n      token.transfer(owner, balance);\n\n    }\n\n\n\n    // Transfer Eth to owner and terminate contract\n\n    selfdestruct(owner);\n\n  }\n",
          "message": "TokenDestructible.destroy (TokenDestructible.sol#85-97) does not use the value returned by external calls:\n\t-token.transfer(owner,balance) (TokenDestructible.sol#91)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": null,
          "vulnerability_code": "      uint256 balance = token.balanceOf(this);\n",
          "message": "TokenDestructible.destroy has external calls inside a loop:\n\t- balance = token.balanceOf(this) (TokenDestructible.sol#90)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "      token.transfer(owner, balance);\n",
          "message": "TokenDestructible.destroy has external calls inside a loop:\n\t- token.transfer(owner,balance) (TokenDestructible.sol#91)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": 42,
          "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n",
          "message": "Ownable.transferOwnership (TokenDestructible.sol#38-42) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
          "message": "ERC20Basic.totalSupply (TokenDestructible.sol#57) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
          "message": "ERC20Basic.balanceOf (TokenDestructible.sol#58) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
          "message": "ERC20Basic.transfer (TokenDestructible.sol#59) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": 97,
          "vulnerability_code": "  function destroy(address[] tokens) onlyOwner public {\n\n\n\n    // Transfer tokens to owner\n\n    for (uint256 i = 0; i < tokens.length; i++) {\n\n      ERC20Basic token = ERC20Basic(tokens[i]);\n\n      uint256 balance = token.balanceOf(this);\n\n      token.transfer(owner, balance);\n\n    }\n\n\n\n    // Transfer Eth to owner and terminate contract\n\n    selfdestruct(owner);\n\n  }\n",
          "message": "TokenDestructible.destroy (TokenDestructible.sol#85-97) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": "Detected issues with version pragma in TokenDestructible.sol:\n\t- pragma solidity^0.4.18 (TokenDestructible.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (TokenDestructible.sol#48): it allows old versions\n\t- pragma solidity^0.4.18 (TokenDestructible.sol#65): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": 24,
          "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n",
          "message": "Function 'Ownable.Ownable' (TokenDestructible.sol#22-24) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": 77,
          "vulnerability_code": "  function TokenDestructible() public payable { }\n",
          "message": "Function 'TokenDestructible.TokenDestructible' (TokenDestructible.sol#76-77) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function destroy(address[] tokens) onlyOwner public {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function destroy(address[] tokens) onlyOwner public {\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}