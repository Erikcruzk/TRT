{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_6"
      ],
      "vulnerability_findings": [
        {
          "name": "constable-states",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 public decimals = 6;\n",
          "message": "TDTT.decimals should be constant (TDTT.sol#64)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": 85,
          "vulnerability_code": "    function transfer (address to, uint256 tokens) public returns (bool success) {\n\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(tokens);\n\n        balanceOf[to] = balanceOf[to].add(tokens);\n\n        Transfer(msg.sender, to, tokens);\n\n        return true;\n",
          "message": "TDTT.transfer (TDTT.sol#80-85) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": 99,
          "vulnerability_code": "    function transferFrom (address from, address to, uint256 tokens) public returns (bool success) {\n\n        balanceOf[from] = balanceOf[from].sub(tokens);\n\n        allowance[from][msg.sender] = allowance[from][msg.sender].sub(tokens);\n\n        balanceOf[to] = balanceOf[to].add(tokens);\n\n        Transfer(from, to, tokens);\n\n        return true;\n",
          "message": "TDTT.transferFrom (TDTT.sol#93-99) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": 106,
          "vulnerability_code": "    function approve (address spender, uint256 tokens) public returns (bool success) {\n\n        allowance[msg.sender][spender] = tokens;\n\n        return true;\n",
          "message": "TDTT.approve (TDTT.sol#103-106) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": "Detected issues with version pragma in TDTT.sol:\n\t- pragma solidity^0.4.18 (TDTT.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (TDTT.sol#53): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": 77,
          "vulnerability_code": "    function TDTT (uint256 initialSupply, string tokenName, string tokenSymbol) public {\n\n        totalSupply = initialSupply * 10 ** uint256(decimals);\n\n        balanceOf[msg.sender] = totalSupply;\n\n        name = tokenName;\n\n        symbol = tokenSymbol;\n",
          "message": "Function 'TDTT.TDTT' (TDTT.sol#72-77) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function TDTT (uint256 initialSupply, string tokenName, string tokenSymbol) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function TDTT (uint256 initialSupply, string tokenName, string tokenSymbol) public {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 c = a + b;\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string public name;\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "        totalSupply = initialSupply * 10 ** uint256(decimals);\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "        allowance[from][msg.sender] = allowance[from][msg.sender].sub(tokens);\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balanceOf[msg.sender] = balanceOf[msg.sender].sub(tokens);\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}