{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 174,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 1; term >= precision; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, \"ERR_ADD_OVERFLOW\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!flag, \"ERR_SUB_UNDERFLOW\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(a == 0 || c0 / a == b, \"ERR_MUL_OVERFLOW\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 100,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c1 >= c0, \"ERR_MUL_OVERFLOW\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 109,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b != 0, \"ERR_DIV_ZERO\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(a == 0 || c0 / a == BONE, \"ERR_DIV_INTERNAL\"); // bmul overflow\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c1 >= c0, \"ERR_DIV_INTERNAL\"); //  badd require\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(base >= MIN_BPOW_BASE, \"ERR_BPOW_BASE_TOO_LOW\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(base <= MAX_BPOW_BASE, \"ERR_BPOW_BASE_TOO_HIGH\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 174,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 1; term >= precision; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_4"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 457,
          "vulnerability_to_line": 469,
          "vulnerability_code": "    function exitswapExternAmountOut(uint balanceOut, uint poolTotal, uint tokenAmountOut) public {\n\n        // We constraint poolTotal and _records_t_balance\n\n        // To have \"realistic\" values\n\n        require(poolTotal <= 100 ether);\n\n        require(poolTotal >= 1 ether);\n\n\n\n        require(balanceOut <= 10 ether);\n\n        require(balanceOut >= 10**6);\n\n\n\n        require(tokenAmountOut > 0);\n\n        require(calcPoolInGivenSingleOut(balanceOut, MIN_WEIGHT, poolTotal, MIN_WEIGHT*2, tokenAmountOut, MIN_FEE)==0);\n\n        echidna_no_bug = false;\n",
          "message": "TestSwapOut.exitswapExternAmountOut (TBPoolExitSwap.sol#457-469) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.5.12;\n",
          "message": "Detected issues with version pragma in TBPoolExitSwap.sol:\n\t- pragma solidity0.5.12 (TBPoolExitSwap.sol#10): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 454,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool public echidna_no_bug = true;\n",
          "message": "Variable 'TestSwapOut.echidna_no_bug' (TBPoolExitSwap.sol#454) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint internal constant MAX_BOUND_TOKENS  = 8;\n",
          "message": "BConst.MAX_BOUND_TOKENS (TBPoolExitSwap.sol#26) is never used in TestSwapOut\nBConst.MAX_FEE (TBPoolExitSwap.sol#30) is never used in TestSwapOut\nBConst.MAX_WEIGHT (TBPoolExitSwap.sol#34) is never used in TestSwapOut\nBConst.MAX_TOTAL_WEIGHT (TBPoolExitSwap.sol#35) is never used in TestSwapOut\nBConst.MIN_BALANCE (TBPoolExitSwap.sol#36) is never used in TestSwapOut\nBConst.MAX_BALANCE (TBPoolExitSwap.sol#37) is never used in TestSwapOut\nBConst.MIN_POOL_SUPPLY (TBPoolExitSwap.sol#39) is never used in TestSwapOut\nBConst.MAX_IN_RATIO (TBPoolExitSwap.sol#44) is never used in TestSwapOut\nBConst.MAX_OUT_RATIO (TBPoolExitSwap.sol#45) is never used in TestSwapOut\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns (uint, bool)\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    }
  }
}