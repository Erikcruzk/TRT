{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint8 i = 0; i < 32; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint8 i = 0; i < 32; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint8 i = 0; i < 32; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint8 i = 0; i < 32; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_5"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": 36,
          "vulnerability_code": "    function encrypt(uint256 secretNumber, bytes32 key) external pure returns (bytes32 ciphertext) {\n\n        bytes32 numberBytes = bytes32(secretNumber);\n\n        bytes memory tmp = new bytes(32);\n\n        for (uint8 i = 0; i < 32; i++) {\n\n            tmp[i] = numberBytes[i] ^ key[i];\n\n        }\n\n        assembly {\n\n            ciphertext := mload(add(tmp, 32))\n\n        }\n",
          "message": "Decryption.encrypt (Decryption.sol#27-36) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": 48,
          "vulnerability_code": "    function decrypt(bytes32 ciphertext, bytes32 key) external pure returns (uint256 secretNumber) {\n\n        bytes memory tmp = new bytes(32);\n\n        for (uint8 i = 0; i < 32; i++) {\n\n            tmp[i] = ciphertext[i] ^ key[i];\n\n        }\n\n        bytes32 numberBytes;\n\n        assembly {\n\n            numberBytes := mload(add(tmp, 32))\n\n        }\n\n        secretNumber = uint256(numberBytes);\n",
          "message": "Decryption.decrypt (Decryption.sol#38-48) is declared view but contains assembly code\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": 36,
          "vulnerability_code": "    function encrypt(uint256 secretNumber, bytes32 key) external pure returns (bytes32 ciphertext) {\n\n        bytes32 numberBytes = bytes32(secretNumber);\n\n        bytes memory tmp = new bytes(32);\n\n        for (uint8 i = 0; i < 32; i++) {\n\n            tmp[i] = numberBytes[i] ^ key[i];\n\n        }\n\n        assembly {\n\n            ciphertext := mload(add(tmp, 32))\n\n        }\n",
          "message": "Decryption.encrypt uses assembly (Decryption.sol#27-36)\n\t- Decryption.sol#33-35\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": 48,
          "vulnerability_code": "    function decrypt(bytes32 ciphertext, bytes32 key) external pure returns (uint256 secretNumber) {\n\n        bytes memory tmp = new bytes(32);\n\n        for (uint8 i = 0; i < 32; i++) {\n\n            tmp[i] = ciphertext[i] ^ key[i];\n\n        }\n\n        bytes32 numberBytes;\n\n        assembly {\n\n            numberBytes := mload(add(tmp, 32))\n\n        }\n\n        secretNumber = uint256(numberBytes);\n",
          "message": "Decryption.decrypt uses assembly (Decryption.sol#38-48)\n\t- Decryption.sol#44-46\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": "Detected issues with version pragma in Decryption.sol:\n\t- pragma solidity^0.5.0 (Decryption.sol#22): it allows old versions\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function encrypt(uint256 secretNumber, bytes32 key) external pure returns (bytes32 ciphertext) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function encrypt(uint256 secretNumber, bytes32 key) external pure returns (bytes32 ciphertext) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decrypt(bytes32 ciphertext, bytes32 key) external pure returns (uint256 secretNumber) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}