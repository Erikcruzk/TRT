{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_x != 0 && _x != _pp && _pp != 0, \"Invalid number\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_pp!=0, \"Modulus is zero\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 126,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_prefix == 0x02 || _prefix == 0x03, \"Invalid compressed EC point prefix\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 338,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(zs[0] != zs[2] || zs[1] != zs[3], \"Use jacDouble function instead\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_x != 0 && _x != _pp && _pp != 0, \"Invalid number\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 317,
          "vulnerability_to_line": null,
          "vulnerability_code": "    if (_x1==0 && _y1==0)\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 318,
          "vulnerability_to_line": null,
          "vulnerability_code": "      return (_x2, _y2, _z2);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 319,
          "vulnerability_to_line": null,
          "vulnerability_code": "    if (_x2==0 && _y2==0)\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": null,
          "vulnerability_code": "      return (_x1, _y1, _z1);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 126,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_prefix == 0x02 || _prefix == 0x03, \"Invalid compressed EC point prefix\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_60"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": 88,
          "vulnerability_code": "  function expMod(uint256 _base, uint256 _exp, uint256 _pp) internal pure returns (uint256) {\n\n    require(_pp!=0, \"Modulus is zero\");\n\n\n\n    if (_base == 0)\n\n      return 0;\n\n    if (_exp == 0)\n\n      return 1;\n\n\n\n    uint256 r = 1;\n\n    uint256 bit = U255_MAX_PLUS_1;\n\n    assembly {\n\n      for { } gt(bit, 0) { }{\n\n        r := mulmod(mulmod(r, r, _pp), exp(_base, iszero(iszero(and(_exp, bit)))), _pp)\n\n        r := mulmod(mulmod(r, r, _pp), exp(_base, iszero(iszero(and(_exp, div(bit, 2))))), _pp)\n\n        r := mulmod(mulmod(r, r, _pp), exp(_base, iszero(iszero(and(_exp, div(bit, 4))))), _pp)\n\n        r := mulmod(mulmod(r, r, _pp), exp(_base, iszero(iszero(and(_exp, div(bit, 8))))), _pp)\n\n        bit := div(bit, 16)\n\n      }\n\n    }\n\n\n\n    return r;\n",
          "message": "EllipticCurve.expMod (EllipticCurve.sol#67-88) is declared view but contains assembly code\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": 88,
          "vulnerability_code": "  function expMod(uint256 _base, uint256 _exp, uint256 _pp) internal pure returns (uint256) {\n\n    require(_pp!=0, \"Modulus is zero\");\n\n\n\n    if (_base == 0)\n\n      return 0;\n\n    if (_exp == 0)\n\n      return 1;\n\n\n\n    uint256 r = 1;\n\n    uint256 bit = U255_MAX_PLUS_1;\n\n    assembly {\n\n      for { } gt(bit, 0) { }{\n\n        r := mulmod(mulmod(r, r, _pp), exp(_base, iszero(iszero(and(_exp, bit)))), _pp)\n\n        r := mulmod(mulmod(r, r, _pp), exp(_base, iszero(iszero(and(_exp, div(bit, 2))))), _pp)\n\n        r := mulmod(mulmod(r, r, _pp), exp(_base, iszero(iszero(and(_exp, div(bit, 4))))), _pp)\n\n        r := mulmod(mulmod(r, r, _pp), exp(_base, iszero(iszero(and(_exp, div(bit, 8))))), _pp)\n\n        bit := div(bit, 16)\n\n      }\n\n    }\n\n\n\n    return r;\n",
          "message": "EllipticCurve.expMod uses assembly (EllipticCurve.sol#67-88)\n\t- EllipticCurve.sol#77-85\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.5.3 <0.7.0; // NOLINT pragma.\n",
          "message": "Detected issues with version pragma in EllipticCurve.sol:\n\t- pragma solidity>=0.5.3<0.7.0 (EllipticCurve.sol#28): is has a complex pragma\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function invMod(uint256 _x, uint256 _pp) internal pure returns (uint256) {\n",
          "message": "Parameter '_x' of EllipticCurve.invMod (EllipticCurve.sol#46) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function invMod(uint256 _x, uint256 _pp) internal pure returns (uint256) {\n",
          "message": "Parameter '_pp' of EllipticCurve.invMod (EllipticCurve.sol#46) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function expMod(uint256 _base, uint256 _exp, uint256 _pp) internal pure returns (uint256) {\n",
          "message": "Parameter '_base' of EllipticCurve.expMod (EllipticCurve.sol#67) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function expMod(uint256 _base, uint256 _exp, uint256 _pp) internal pure returns (uint256) {\n",
          "message": "Parameter '_exp' of EllipticCurve.expMod (EllipticCurve.sol#67) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function expMod(uint256 _base, uint256 _exp, uint256 _pp) internal pure returns (uint256) {\n",
          "message": "Parameter '_pp' of EllipticCurve.expMod (EllipticCurve.sol#67) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _x,\n",
          "message": "Parameter '_x' of EllipticCurve.toAffine (EllipticCurve.sol#97) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _y,\n",
          "message": "Parameter '_y' of EllipticCurve.toAffine (EllipticCurve.sol#98) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _z,\n",
          "message": "Parameter '_z' of EllipticCurve.toAffine (EllipticCurve.sol#99) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 100,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _pp)\n",
          "message": "Parameter '_pp' of EllipticCurve.toAffine (EllipticCurve.sol#100) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 119,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 _prefix,\n",
          "message": "Parameter '_prefix' of EllipticCurve.deriveY (EllipticCurve.sol#119) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 120,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _x,\n",
          "message": "Parameter '_x' of EllipticCurve.deriveY (EllipticCurve.sol#120) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 121,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _aa,\n",
          "message": "Parameter '_aa' of EllipticCurve.deriveY (EllipticCurve.sol#121) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 122,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _bb,\n",
          "message": "Parameter '_bb' of EllipticCurve.deriveY (EllipticCurve.sol#122) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _pp)\n",
          "message": "Parameter '_pp' of EllipticCurve.deriveY (EllipticCurve.sol#123) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 145,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint _x,\n",
          "message": "Parameter '_x' of EllipticCurve.isOnCurve (EllipticCurve.sol#145) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 146,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint _y,\n",
          "message": "Parameter '_y' of EllipticCurve.isOnCurve (EllipticCurve.sol#146) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 147,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint _aa,\n",
          "message": "Parameter '_aa' of EllipticCurve.isOnCurve (EllipticCurve.sol#147) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 148,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint _bb,\n",
          "message": "Parameter '_bb' of EllipticCurve.isOnCurve (EllipticCurve.sol#148) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint _pp)\n",
          "message": "Parameter '_pp' of EllipticCurve.isOnCurve (EllipticCurve.sol#149) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 177,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _x,\n",
          "message": "Parameter '_x' of EllipticCurve.ecInv (EllipticCurve.sol#177) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 178,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _y,\n",
          "message": "Parameter '_y' of EllipticCurve.ecInv (EllipticCurve.sol#178) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 179,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _pp)\n",
          "message": "Parameter '_pp' of EllipticCurve.ecInv (EllipticCurve.sol#179) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _x1,\n",
          "message": "Parameter '_x1' of EllipticCurve.ecAdd (EllipticCurve.sol#194) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 195,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _y1,\n",
          "message": "Parameter '_y1' of EllipticCurve.ecAdd (EllipticCurve.sol#195) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 196,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _x2,\n",
          "message": "Parameter '_x2' of EllipticCurve.ecAdd (EllipticCurve.sol#196) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 197,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _y2,\n",
          "message": "Parameter '_y2' of EllipticCurve.ecAdd (EllipticCurve.sol#197) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _aa,\n",
          "message": "Parameter '_aa' of EllipticCurve.ecAdd (EllipticCurve.sol#198) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 199,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _pp)\n",
          "message": "Parameter '_pp' of EllipticCurve.ecAdd (EllipticCurve.sol#199) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 247,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _x1,\n",
          "message": "Parameter '_x1' of EllipticCurve.ecSub (EllipticCurve.sol#247) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 248,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _y1,\n",
          "message": "Parameter '_y1' of EllipticCurve.ecSub (EllipticCurve.sol#248) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 249,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _x2,\n",
          "message": "Parameter '_x2' of EllipticCurve.ecSub (EllipticCurve.sol#249) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 250,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _y2,\n",
          "message": "Parameter '_y2' of EllipticCurve.ecSub (EllipticCurve.sol#250) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 251,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _aa,\n",
          "message": "Parameter '_aa' of EllipticCurve.ecSub (EllipticCurve.sol#251) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _pp)\n",
          "message": "Parameter '_pp' of EllipticCurve.ecSub (EllipticCurve.sol#252) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 275,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _k,\n",
          "message": "Parameter '_k' of EllipticCurve.ecMul (EllipticCurve.sol#275) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 276,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _x,\n",
          "message": "Parameter '_x' of EllipticCurve.ecMul (EllipticCurve.sol#276) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 277,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _y,\n",
          "message": "Parameter '_y' of EllipticCurve.ecMul (EllipticCurve.sol#277) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _aa,\n",
          "message": "Parameter '_aa' of EllipticCurve.ecMul (EllipticCurve.sol#278) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 279,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _pp)\n",
          "message": "Parameter '_pp' of EllipticCurve.ecMul (EllipticCurve.sol#279) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 308,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _x1,\n",
          "message": "Parameter '_x1' of EllipticCurve.jacAdd (EllipticCurve.sol#308) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 309,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _y1,\n",
          "message": "Parameter '_y1' of EllipticCurve.jacAdd (EllipticCurve.sol#309) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 310,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _z1,\n",
          "message": "Parameter '_z1' of EllipticCurve.jacAdd (EllipticCurve.sol#310) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 311,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _x2,\n",
          "message": "Parameter '_x2' of EllipticCurve.jacAdd (EllipticCurve.sol#311) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 312,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _y2,\n",
          "message": "Parameter '_y2' of EllipticCurve.jacAdd (EllipticCurve.sol#312) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 313,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _z2,\n",
          "message": "Parameter '_z2' of EllipticCurve.jacAdd (EllipticCurve.sol#313) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 314,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _pp)\n",
          "message": "Parameter '_pp' of EllipticCurve.jacAdd (EllipticCurve.sol#314) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 368,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _x,\n",
          "message": "Parameter '_x' of EllipticCurve.jacDouble (EllipticCurve.sol#368) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 369,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _y,\n",
          "message": "Parameter '_y' of EllipticCurve.jacDouble (EllipticCurve.sol#369) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 370,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _z,\n",
          "message": "Parameter '_z' of EllipticCurve.jacDouble (EllipticCurve.sol#370) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 371,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _aa,\n",
          "message": "Parameter '_aa' of EllipticCurve.jacDouble (EllipticCurve.sol#371) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 372,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _pp)\n",
          "message": "Parameter '_pp' of EllipticCurve.jacDouble (EllipticCurve.sol#372) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 411,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _d,\n",
          "message": "Parameter '_d' of EllipticCurve.jacMul (EllipticCurve.sol#411) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 412,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _x,\n",
          "message": "Parameter '_x' of EllipticCurve.jacMul (EllipticCurve.sol#412) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 413,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _y,\n",
          "message": "Parameter '_y' of EllipticCurve.jacMul (EllipticCurve.sol#413) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 414,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _z,\n",
          "message": "Parameter '_z' of EllipticCurve.jacMul (EllipticCurve.sol#414) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 415,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _aa,\n",
          "message": "Parameter '_aa' of EllipticCurve.jacMul (EllipticCurve.sol#415) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 416,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _pp)\n",
          "message": "Parameter '_pp' of EllipticCurve.jacMul (EllipticCurve.sol#416) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 126,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_prefix == 0x02 || _prefix == 0x03, \"Invalid compressed EC point prefix\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 126,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_prefix == 0x02 || _prefix == 0x03, \"Invalid compressed EC point prefix\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.5.3 <0.7.0; // NOLINT pragma.\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.5.3 <0.7.0; // NOLINT pragma.\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant private U255_MAX_PLUS_1 = 57896044618658097711785492504343953926634992332820282019728792003956564819968;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function expMod(uint256 _base, uint256 _exp, uint256 _pp) internal pure returns (uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "  internal pure returns (uint256, uint256)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 180,
          "vulnerability_to_line": null,
          "vulnerability_code": "  internal pure returns (uint256, uint256)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "    internal pure returns(uint256, uint256)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 253,
          "vulnerability_to_line": null,
          "vulnerability_code": "  internal pure returns(uint256, uint256)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 280,
          "vulnerability_to_line": null,
          "vulnerability_code": "  internal pure returns(uint256, uint256)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 315,
          "vulnerability_to_line": null,
          "vulnerability_code": "  internal pure returns (uint256, uint256, uint256)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 373,
          "vulnerability_to_line": null,
          "vulnerability_code": "  internal pure returns (uint256, uint256, uint256)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 417,
          "vulnerability_to_line": null,
          "vulnerability_code": "  internal pure returns (uint256, uint256, uint256)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "Solc experienced a fatal error"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}