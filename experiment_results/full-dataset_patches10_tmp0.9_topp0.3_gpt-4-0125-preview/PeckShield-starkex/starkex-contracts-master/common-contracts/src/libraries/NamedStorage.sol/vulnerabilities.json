{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(getUintValue(tag_) == 0, \"ALREADY_SET\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(getAddressValue(tag_) == address(0x0), \"ALREADY_SET\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_18"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": 21,
          "vulnerability_code": "    function bytes32ToUint256Mapping(string memory tag_)\n\n        internal\n\n        pure\n\n        returns (mapping(bytes32 => uint256) storage randomVariable)\n\n    {\n\n        bytes32 location = keccak256(abi.encodePacked(tag_));\n\n        assembly {\n\n            randomVariable_slot := location\n\n        }\n",
          "message": "NamedStorage.bytes32ToUint256Mapping (NamedStorage.sol#12-21) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": 32,
          "vulnerability_code": "    function bytes32ToAddressMapping(string memory tag_)\n\n        internal\n\n        pure\n\n        returns (mapping(bytes32 => address) storage randomVariable)\n\n    {\n\n        bytes32 location = keccak256(abi.encodePacked(tag_));\n\n        assembly {\n\n            randomVariable_slot := location\n\n        }\n",
          "message": "NamedStorage.bytes32ToAddressMapping (NamedStorage.sol#23-32) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": 43,
          "vulnerability_code": "    function uintToAddressMapping(string memory tag_)\n\n        internal\n\n        pure\n\n        returns (mapping(uint256 => address) storage randomVariable)\n\n    {\n\n        bytes32 location = keccak256(abi.encodePacked(tag_));\n\n        assembly {\n\n            randomVariable_slot := location\n\n        }\n",
          "message": "NamedStorage.uintToAddressMapping (NamedStorage.sol#34-43) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": 54,
          "vulnerability_code": "    function addressToBoolMapping(string memory tag_)\n\n        internal\n\n        pure\n\n        returns (mapping(address => bool) storage randomVariable)\n\n    {\n\n        bytes32 location = keccak256(abi.encodePacked(tag_));\n\n        assembly {\n\n            randomVariable_slot := location\n\n        }\n",
          "message": "NamedStorage.addressToBoolMapping (NamedStorage.sol#45-54) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": 61,
          "vulnerability_code": "    function getUintValue(string memory tag_) internal view returns (uint256 retVal) {\n\n        bytes32 slot = keccak256(abi.encodePacked(tag_));\n\n        assembly {\n\n            retVal := sload(slot)\n\n        }\n",
          "message": "NamedStorage.getUintValue (NamedStorage.sol#56-61) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": 80,
          "vulnerability_code": "    function getAddressValue(string memory tag_) internal view returns (address retVal) {\n\n        bytes32 slot = keccak256(abi.encodePacked(tag_));\n\n        assembly {\n\n            retVal := sload(slot)\n\n        }\n",
          "message": "NamedStorage.getAddressValue (NamedStorage.sol#75-80) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": 99,
          "vulnerability_code": "    function getBoolValue(string memory tag_) internal view returns (bool retVal) {\n\n        bytes32 slot = keccak256(abi.encodePacked(tag_));\n\n        assembly {\n\n            retVal := sload(slot)\n\n        }\n",
          "message": "NamedStorage.getBoolValue (NamedStorage.sol#94-99) is declared view but contains assembly code\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": 21,
          "vulnerability_code": "    function bytes32ToUint256Mapping(string memory tag_)\n\n        internal\n\n        pure\n\n        returns (mapping(bytes32 => uint256) storage randomVariable)\n\n    {\n\n        bytes32 location = keccak256(abi.encodePacked(tag_));\n\n        assembly {\n\n            randomVariable_slot := location\n\n        }\n",
          "message": "NamedStorage.bytes32ToUint256Mapping uses assembly (NamedStorage.sol#12-21)\n\t- NamedStorage.sol#18-20\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": 32,
          "vulnerability_code": "    function bytes32ToAddressMapping(string memory tag_)\n\n        internal\n\n        pure\n\n        returns (mapping(bytes32 => address) storage randomVariable)\n\n    {\n\n        bytes32 location = keccak256(abi.encodePacked(tag_));\n\n        assembly {\n\n            randomVariable_slot := location\n\n        }\n",
          "message": "NamedStorage.bytes32ToAddressMapping uses assembly (NamedStorage.sol#23-32)\n\t- NamedStorage.sol#29-31\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": 43,
          "vulnerability_code": "    function uintToAddressMapping(string memory tag_)\n\n        internal\n\n        pure\n\n        returns (mapping(uint256 => address) storage randomVariable)\n\n    {\n\n        bytes32 location = keccak256(abi.encodePacked(tag_));\n\n        assembly {\n\n            randomVariable_slot := location\n\n        }\n",
          "message": "NamedStorage.uintToAddressMapping uses assembly (NamedStorage.sol#34-43)\n\t- NamedStorage.sol#40-42\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": 54,
          "vulnerability_code": "    function addressToBoolMapping(string memory tag_)\n\n        internal\n\n        pure\n\n        returns (mapping(address => bool) storage randomVariable)\n\n    {\n\n        bytes32 location = keccak256(abi.encodePacked(tag_));\n\n        assembly {\n\n            randomVariable_slot := location\n\n        }\n",
          "message": "NamedStorage.addressToBoolMapping uses assembly (NamedStorage.sol#45-54)\n\t- NamedStorage.sol#51-53\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": 61,
          "vulnerability_code": "    function getUintValue(string memory tag_) internal view returns (uint256 retVal) {\n\n        bytes32 slot = keccak256(abi.encodePacked(tag_));\n\n        assembly {\n\n            retVal := sload(slot)\n\n        }\n",
          "message": "NamedStorage.getUintValue uses assembly (NamedStorage.sol#56-61)\n\t- NamedStorage.sol#58-60\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": 68,
          "vulnerability_code": "    function setUintValue(string memory tag_, uint256 value) internal {\n\n        bytes32 slot = keccak256(abi.encodePacked(tag_));\n\n        assembly {\n\n            sstore(slot, value)\n\n        }\n",
          "message": "NamedStorage.setUintValue uses assembly (NamedStorage.sol#63-68)\n\t- NamedStorage.sol#65-67\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": 80,
          "vulnerability_code": "    function getAddressValue(string memory tag_) internal view returns (address retVal) {\n\n        bytes32 slot = keccak256(abi.encodePacked(tag_));\n\n        assembly {\n\n            retVal := sload(slot)\n\n        }\n",
          "message": "NamedStorage.getAddressValue uses assembly (NamedStorage.sol#75-80)\n\t- NamedStorage.sol#77-79\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": 87,
          "vulnerability_code": "    function setAddressValue(string memory tag_, address value) internal {\n\n        bytes32 slot = keccak256(abi.encodePacked(tag_));\n\n        assembly {\n\n            sstore(slot, value)\n\n        }\n",
          "message": "NamedStorage.setAddressValue uses assembly (NamedStorage.sol#82-87)\n\t- NamedStorage.sol#84-86\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": 99,
          "vulnerability_code": "    function getBoolValue(string memory tag_) internal view returns (bool retVal) {\n\n        bytes32 slot = keccak256(abi.encodePacked(tag_));\n\n        assembly {\n\n            retVal := sload(slot)\n\n        }\n",
          "message": "NamedStorage.getBoolValue uses assembly (NamedStorage.sol#94-99)\n\t- NamedStorage.sol#96-98\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": 106,
          "vulnerability_code": "    function setBoolValue(string memory tag_, bool value) internal {\n\n        bytes32 slot = keccak256(abi.encodePacked(tag_));\n\n        assembly {\n\n            sstore(slot, value)\n\n        }\n",
          "message": "NamedStorage.setBoolValue uses assembly (NamedStorage.sol#101-106)\n\t- NamedStorage.sol#103-105\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.12;\n",
          "message": "Detected issues with version pragma in NamedStorage.sol:\n\t- pragma solidity^0.6.12 (NamedStorage.sol#4): it allows old versions\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(getAddressValue(tag_) == address(0x0), \"ALREADY_SET\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function bytes32ToUint256Mapping(string memory tag_)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function bytes32ToAddressMapping(string memory tag_)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function uintToAddressMapping(string memory tag_)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addressToBoolMapping(string memory tag_)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getUintValue(string memory tag_) internal view returns (uint256 retVal) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAddressValue(string memory tag_) internal view returns (address retVal) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBoolValue(string memory tag_) internal view returns (bool retVal) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.12;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function bytes32ToUint256Mapping(string memory tag_)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function bytes32ToAddressMapping(string memory tag_)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function uintToAddressMapping(string memory tag_)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addressToBoolMapping(string memory tag_)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getUintValue(string memory tag_) internal view returns (uint256 retVal) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAddressValue(string memory tag_) internal view returns (address retVal) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBoolValue(string memory tag_) internal view returns (bool retVal) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}