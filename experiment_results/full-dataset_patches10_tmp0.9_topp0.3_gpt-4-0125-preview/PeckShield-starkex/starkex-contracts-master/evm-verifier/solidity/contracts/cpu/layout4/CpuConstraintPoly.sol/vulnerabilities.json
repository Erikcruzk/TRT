{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_2"
      ],
      "vulnerability_findings": [
        {
          "name": "assembly",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": 4377,
          "vulnerability_code": "    fallback() external {\n\n        uint256 res;\n\n        assembly {\n\n            let PRIME := 0x800000000000011000000000000000000000000000000000000000000000001\n\n            // Copy input from calldata to memory.\n\n            calldatacopy(0x0, 0x0, /*Input data size*/ 0x2bc0)\n\n            let point := /*oods_point*/ mload(0x460)\n\n            function expmod(base, exponent, modulus) -> result {\n\n              let p := /*expmod_context*/ 0x3fa0\n\n              mstore(p, 0x20)                 // Length of Base.\n\n              mstore(add(p, 0x20), 0x20)      // Length of Exponent.\n\n              mstore(add(p, 0x40), 0x20)      // Length of Modulus.\n\n              mstore(add(p, 0x60), base)      // Base.\n\n              mstore(add(p, 0x80), exponent)  // Exponent.\n\n              mstore(add(p, 0xa0), modulus)   // Modulus.\n\n              // Call modexp precompile.\n\n              if iszero(staticcall(not(0), 0x05, p, 0xc0, p, 0x20)) {\n\n                revert(0, 0)\n\n              }\n\n              result := mload(p)\n\n            }\n\n            {\n\n              // Prepare expmods for denominators and numerators.\n\n\n\n              // expmods[0] = point^trace_length.\n\n              mstore(0x30a0, expmod(point, /*trace_length*/ mload(0x80), PRIME))\n\n\n\n              // expmods[1] = point^(trace_length / 16).\n\n              mstore(0x30c0, expmod(point, div(/*trace_length*/ mload(0x80), 16), PRIME))\n\n\n\n              // expmods[2] = point^(trace_length / 2).\n\n              mstore(0x30e0, expmod(point, div(/*trace_length*/ mload(0x80), 2), PRIME))\n\n\n\n              // expmods[3] = point^(trace_length / 4).\n\n              mstore(0x3100, expmod(point, div(/*trace_length*/ mload(0x80), 4), PRIME))\n\n\n\n              // expmods[4] = point^(trace_length / 2048).\n\n              mstore(0x3120, expmod(point, div(/*trace_length*/ mload(0x80), 2048), PRIME))\n\n\n\n              // expmods[5] = point^(trace_length / 8).\n\n              mstore(0x3140, expmod(point, div(/*trace_length*/ mload(0x80), 8), PRIME))\n\n\n\n              // expmods[6] = point^(trace_length / 4096).\n\n              mstore(0x3160, expmod(point, div(/*trace_length*/ mload(0x80), 4096), PRIME))\n\n\n\n              // expmods[7] = point^(trace_length / 128).\n\n              mstore(0x3180, expmod(point, div(/*trace_length*/ mload(0x80), 128), PRIME))\n\n\n\n              // expmods[8] = point^(trace_length / 32).\n\n              mstore(0x31a0, expmod(point, div(/*trace_length*/ mload(0x80), 32), PRIME))\n\n\n\n              // expmods[9] = point^(trace_length / 8192).\n\n              mstore(0x31c0, expmod(point, div(/*trace_length*/ mload(0x80), 8192), PRIME))\n\n\n\n              // expmods[10] = point^(trace_length / 64).\n\n              mstore(0x31e0, expmod(point, div(/*trace_length*/ mload(0x80), 64), PRIME))\n\n\n\n              // expmods[11] = point^(trace_length / 16384).\n\n              mstore(0x3200, expmod(point, div(/*trace_length*/ mload(0x80), 16384), PRIME))\n\n\n\n              // expmods[12] = trace_generator^(15 * trace_length / 16).\n\n              mstore(0x3220, expmod(/*trace_generator*/ mload(0x440), div(mul(15, /*trace_length*/ mload(0x80)), 16), PRIME))\n\n\n\n              // expmods[13] = trace_generator^(16 * (trace_length / 16 - 1)).\n\n              mstore(0x3240, expmod(/*trace_generator*/ mload(0x440), mul(16, sub(div(/*trace_length*/ mload(0x80), 16), 1)), PRIME))\n\n\n\n              // expmods[14] = trace_generator^(2 * (trace_length / 2 - 1)).\n\n              mstore(0x3260, expmod(/*trace_generator*/ mload(0x440), mul(2, sub(div(/*trace_length*/ mload(0x80), 2), 1)), PRIME))\n\n\n\n              // expmods[15] = trace_generator^(4 * (trace_length / 4 - 1)).\n\n              mstore(0x3280, expmod(/*trace_generator*/ mload(0x440), mul(4, sub(div(/*trace_length*/ mload(0x80), 4), 1)), PRIME))\n\n\n\n              // expmods[16] = trace_generator^(trace_length - 1).\n\n              mstore(0x32a0, expmod(/*trace_generator*/ mload(0x440), sub(/*trace_length*/ mload(0x80), 1), PRIME))\n\n\n\n              // expmods[17] = trace_generator^(255 * trace_length / 256).\n\n              mstore(0x32c0, expmod(/*trace_generator*/ mload(0x440), div(mul(255, /*trace_length*/ mload(0x80)), 256), PRIME))\n\n\n\n              // expmods[18] = trace_generator^(63 * trace_length / 64).\n\n              mstore(0x32e0, expmod(/*trace_generator*/ mload(0x440), div(mul(63, /*trace_length*/ mload(0x80)), 64), PRIME))\n\n\n\n              // expmods[19] = trace_generator^(trace_length / 2).\n\n              mstore(0x3300, expmod(/*trace_generator*/ mload(0x440), div(/*trace_length*/ mload(0x80), 2), PRIME))\n\n\n\n              // expmods[20] = trace_generator^(4096 * (trace_length / 4096 - 1)).\n\n              mstore(0x3320, expmod(/*trace_generator*/ mload(0x440), mul(4096, sub(div(/*trace_length*/ mload(0x80), 4096), 1)), PRIME))\n\n\n\n              // expmods[21] = trace_generator^(128 * (trace_length / 128 - 1)).\n\n              mstore(0x3340, expmod(/*trace_generator*/ mload(0x440), mul(128, sub(div(/*trace_length*/ mload(0x80), 128), 1)), PRIME))\n\n\n\n              // expmods[22] = trace_generator^(251 * trace_length / 256).\n\n              mstore(0x3360, expmod(/*trace_generator*/ mload(0x440), div(mul(251, /*trace_length*/ mload(0x80)), 256), PRIME))\n\n\n\n              // expmods[23] = trace_generator^(16384 * (trace_length / 16384 - 1)).\n\n              mstore(0x3380, expmod(/*trace_generator*/ mload(0x440), mul(16384, sub(div(/*trace_length*/ mload(0x80), 16384), 1)), PRIME))\n\n\n\n              // expmods[24] = trace_generator^(3 * trace_length / 4).\n\n              mstore(0x33a0, expmod(/*trace_generator*/ mload(0x440), div(mul(3, /*trace_length*/ mload(0x80)), 4), PRIME))\n\n\n\n              // expmods[25] = trace_generator^(trace_length / 64).\n\n              mstore(0x33c0, expmod(/*trace_generator*/ mload(0x440), div(/*trace_length*/ mload(0x80), 64), PRIME))\n\n\n\n              // expmods[26] = trace_generator^(trace_length / 32).\n\n              mstore(0x33e0, expmod(/*trace_generator*/ mload(0x440), div(/*trace_length*/ mload(0x80), 32), PRIME))\n\n\n\n              // expmods[27] = trace_generator^(3 * trace_length / 64).\n\n              mstore(0x3400, expmod(/*trace_generator*/ mload(0x440), div(mul(3, /*trace_length*/ mload(0x80)), 64), PRIME))\n\n\n\n              // expmods[28] = trace_generator^(trace_length / 16).\n\n              mstore(0x3420, expmod(/*trace_generator*/ mload(0x440), div(/*trace_length*/ mload(0x80), 16), PRIME))\n\n\n\n              // expmods[29] = trace_generator^(5 * trace_length / 64).\n\n              mstore(0x3440, expmod(/*trace_generator*/ mload(0x440), div(mul(5, /*trace_length*/ mload(0x80)), 64), PRIME))\n\n\n\n              // expmods[30] = trace_generator^(3 * trace_length / 32).\n\n              mstore(0x3460, expmod(/*trace_generator*/ mload(0x440), div(mul(3, /*trace_length*/ mload(0x80)), 32), PRIME))\n\n\n\n              // expmods[31] = trace_generator^(7 * trace_length / 64).\n\n              mstore(0x3480, expmod(/*trace_generator*/ mload(0x440), div(mul(7, /*trace_length*/ mload(0x80)), 64), PRIME))\n\n\n\n              // expmods[32] = trace_generator^(trace_length / 8).\n\n              mstore(0x34a0, expmod(/*trace_generator*/ mload(0x440), div(/*trace_length*/ mload(0x80), 8), PRIME))\n\n\n\n              // expmods[33] = trace_generator^(9 * trace_length / 64).\n\n              mstore(0x34c0, expmod(/*trace_generator*/ mload(0x440), div(mul(9, /*trace_length*/ mload(0x80)), 64), PRIME))\n\n\n\n              // expmods[34] = trace_generator^(5 * trace_length / 32).\n\n              mstore(0x34e0, expmod(/*trace_generator*/ mload(0x440), div(mul(5, /*trace_length*/ mload(0x80)), 32), PRIME))\n\n\n\n              // expmods[35] = trace_generator^(11 * trace_length / 64).\n\n              mstore(0x3500, expmod(/*trace_generator*/ mload(0x440), div(mul(11, /*trace_length*/ mload(0x80)), 64), PRIME))\n\n\n\n              // expmods[36] = trace_generator^(3 * trace_length / 16).\n\n              mstore(0x3520, expmod(/*trace_generator*/ mload(0x440), div(mul(3, /*trace_length*/ mload(0x80)), 16), PRIME))\n\n\n\n              // expmods[37] = trace_generator^(13 * trace_length / 64).\n\n              mstore(0x3540, expmod(/*trace_generator*/ mload(0x440), div(mul(13, /*trace_length*/ mload(0x80)), 64), PRIME))\n\n\n\n              // expmods[38] = trace_generator^(7 * trace_length / 32).\n\n              mstore(0x3560, expmod(/*trace_generator*/ mload(0x440), div(mul(7, /*trace_length*/ mload(0x80)), 32), PRIME))\n\n\n\n              // expmods[39] = trace_generator^(15 * trace_length / 64).\n\n              mstore(0x3580, expmod(/*trace_generator*/ mload(0x440), div(mul(15, /*trace_length*/ mload(0x80)), 64), PRIME))\n\n\n\n            }\n\n\n\n            {\n\n              // Compute domains.\n\n\n\n              // Denominator for constraints: 'cpu/decode/opcode_rc/bit', 'diluted_check/permutation/step0', 'diluted_check/step'.\n\n              // domains[0] = point^trace_length - 1.\n\n              mstore(0x35a0,\n\n                     addmod(/*point^trace_length*/ mload(0x30a0), sub(PRIME, 1), PRIME))\n\n\n\n              // Denominator for constraints: 'cpu/decode/opcode_rc/zero'.\n\n              // Numerator for constraints: 'cpu/decode/opcode_rc/bit'.\n\n              // domains[1] = point^(trace_length / 16) - trace_generator^(15 * trace_length / 16).\n\n              mstore(0x35c0,\n\n                     addmod(\n\n                       /*point^(trace_length / 16)*/ mload(0x30c0),\n\n                       sub(PRIME, /*trace_generator^(15 * trace_length / 16)*/ mload(0x3220)),\n\n                       PRIME))\n\n\n\n              // Denominator for constraints: 'cpu/decode/opcode_rc_input', 'cpu/decode/flag_op1_base_op0_bit', 'cpu/decode/flag_res_op1_bit', 'cpu/decode/flag_pc_update_regular_bit', 'cpu/decode/fp_update_regular_bit', 'cpu/operands/mem_dst_addr', 'cpu/operands/mem0_addr', 'cpu/operands/mem1_addr', 'cpu/operands/ops_mul', 'cpu/operands/res', 'cpu/update_registers/update_pc/tmp0', 'cpu/update_registers/update_pc/tmp1', 'cpu/update_registers/update_pc/pc_cond_negative', 'cpu/update_registers/update_pc/pc_cond_positive', 'cpu/update_registers/update_ap/ap_update', 'cpu/update_registers/update_fp/fp_update', 'cpu/opcodes/call/push_fp', 'cpu/opcodes/call/push_pc', 'cpu/opcodes/call/off0', 'cpu/opcodes/call/off1', 'cpu/opcodes/call/flags', 'cpu/opcodes/ret/off0', 'cpu/opcodes/ret/off2', 'cpu/opcodes/ret/flags', 'cpu/opcodes/assert_eq/assert_eq', 'public_memory_addr_zero', 'public_memory_value_zero'.\n\n              // domains[2] = point^(trace_length / 16) - 1.\n\n              mstore(0x35e0,\n\n                     addmod(/*point^(trace_length / 16)*/ mload(0x30c0), sub(PRIME, 1), PRIME))\n\n\n\n              // Denominator for constraints: 'final_ap', 'final_fp', 'final_pc'.\n\n              // Numerator for constraints: 'cpu/update_registers/update_pc/tmp0', 'cpu/update_registers/update_pc/tmp1', 'cpu/update_registers/update_pc/pc_cond_negative', 'cpu/update_registers/update_pc/pc_cond_positive', 'cpu/update_registers/update_ap/ap_update', 'cpu/update_registers/update_fp/fp_update'.\n\n              // domains[3] = point - trace_generator^(16 * (trace_length / 16 - 1)).\n\n              mstore(0x3600,\n\n                     addmod(\n\n                       point,\n\n                       sub(PRIME, /*trace_generator^(16 * (trace_length / 16 - 1))*/ mload(0x3240)),\n\n                       PRIME))\n\n\n\n              // Denominator for constraints: 'initial_ap', 'initial_fp', 'initial_pc', 'memory/multi_column_perm/perm/init0', 'memory/initial_addr', 'rc16/perm/init0', 'rc16/minimum', 'diluted_check/permutation/init0', 'diluted_check/init', 'diluted_check/first_element', 'pedersen/init_addr', 'rc_builtin/init_addr', 'ecdsa/init_addr', 'bitwise/init_var_pool_addr'.\n\n              // domains[4] = point - 1.\n\n              mstore(0x3620,\n\n                     addmod(point, sub(PRIME, 1), PRIME))\n\n\n\n              // Denominator for constraints: 'memory/multi_column_perm/perm/step0', 'memory/diff_is_bit', 'memory/is_func'.\n\n              // domains[5] = point^(trace_length / 2) - 1.\n\n              mstore(0x3640,\n\n                     addmod(/*point^(trace_length / 2)*/ mload(0x30e0), sub(PRIME, 1), PRIME))\n\n\n\n              // Denominator for constraints: 'memory/multi_column_perm/perm/last'.\n\n              // Numerator for constraints: 'memory/multi_column_perm/perm/step0', 'memory/diff_is_bit', 'memory/is_func'.\n\n              // domains[6] = point - trace_generator^(2 * (trace_length / 2 - 1)).\n\n              mstore(0x3660,\n\n                     addmod(\n\n                       point,\n\n                       sub(PRIME, /*trace_generator^(2 * (trace_length / 2 - 1))*/ mload(0x3260)),\n\n                       PRIME))\n\n\n\n              // Denominator for constraints: 'rc16/perm/step0', 'rc16/diff_is_bit'.\n\n              // domains[7] = point^(trace_length / 4) - 1.\n\n              mstore(0x3680,\n\n                     addmod(/*point^(trace_length / 4)*/ mload(0x3100), sub(PRIME, 1), PRIME))\n\n\n\n              // Denominator for constraints: 'rc16/perm/last', 'rc16/maximum'.\n\n              // Numerator for constraints: 'rc16/perm/step0', 'rc16/diff_is_bit'.\n\n              // domains[8] = point - trace_generator^(4 * (trace_length / 4 - 1)).\n\n              mstore(0x36a0,\n\n                     addmod(\n\n                       point,\n\n                       sub(PRIME, /*trace_generator^(4 * (trace_length / 4 - 1))*/ mload(0x3280)),\n\n                       PRIME))\n\n\n\n              // Denominator for constraints: 'diluted_check/permutation/last', 'diluted_check/last'.\n\n              // Numerator for constraints: 'diluted_check/permutation/step0', 'diluted_check/step'.\n\n              // domains[9] = point - trace_generator^(trace_length - 1).\n\n              mstore(0x36c0,\n\n                     addmod(point, sub(PRIME, /*trace_generator^(trace_length - 1)*/ mload(0x32a0)), PRIME))\n\n\n\n              // Denominator for constraints: 'pedersen/hash0/ec_subset_sum/bit_unpacking/last_one_is_zero', 'pedersen/hash0/ec_subset_sum/bit_unpacking/zeroes_between_ones0', 'pedersen/hash0/ec_subset_sum/bit_unpacking/cumulative_bit192', 'pedersen/hash0/ec_subset_sum/bit_unpacking/zeroes_between_ones192', 'pedersen/hash0/ec_subset_sum/bit_unpacking/cumulative_bit196', 'pedersen/hash0/ec_subset_sum/bit_unpacking/zeroes_between_ones196', 'pedersen/hash0/copy_point/x', 'pedersen/hash0/copy_point/y'.\n\n              // domains[10] = point^(trace_length / 2048) - 1.\n\n              mstore(0x36e0,\n\n                     addmod(/*point^(trace_length / 2048)*/ mload(0x3120), sub(PRIME, 1), PRIME))\n\n\n\n              // Denominator for constraints: 'pedersen/hash0/ec_subset_sum/booleanity_test', 'pedersen/hash0/ec_subset_sum/add_points/slope', 'pedersen/hash0/ec_subset_sum/add_points/x', 'pedersen/hash0/ec_subset_sum/add_points/y', 'pedersen/hash0/ec_subset_sum/copy_point/x', 'pedersen/hash0/ec_subset_sum/copy_point/y'.\n\n              // domains[11] = point^(trace_length / 8) - 1.\n\n              mstore(0x3700,\n\n                     addmod(/*point^(trace_length / 8)*/ mload(0x3140), sub(PRIME, 1), PRIME))\n\n\n\n              // Denominator for constraints: 'pedersen/hash0/ec_subset_sum/zeros_tail'.\n\n              // Numerator for constraints: 'pedersen/hash0/ec_subset_sum/booleanity_test', 'pedersen/hash0/ec_subset_sum/add_points/slope', 'pedersen/hash0/ec_subset_sum/add_points/x', 'pedersen/hash0/ec_subset_sum/add_points/y', 'pedersen/hash0/ec_subset_sum/copy_point/x', 'pedersen/hash0/ec_subset_sum/copy_point/y'.\n\n              // domains[12] = point^(trace_length / 2048) - trace_generator^(255 * trace_length / 256).\n\n              mstore(0x3720,\n\n                     addmod(\n\n                       /*point^(trace_length / 2048)*/ mload(0x3120),\n\n                       sub(PRIME, /*trace_generator^(255 * trace_length / 256)*/ mload(0x32c0)),\n\n                       PRIME))\n\n\n\n              // Denominator for constraints: 'pedersen/hash0/ec_subset_sum/bit_extraction_end'.\n\n              // domains[13] = point^(trace_length / 2048) - trace_generator^(63 * trace_length / 64).\n\n              mstore(0x3740,\n\n                     addmod(\n\n                       /*point^(trace_length / 2048)*/ mload(0x3120),\n\n                       sub(PRIME, /*trace_generator^(63 * trace_length / 64)*/ mload(0x32e0)),\n\n                       PRIME))\n\n\n\n              // Numerator for constraints: 'pedersen/hash0/copy_point/x', 'pedersen/hash0/copy_point/y'.\n\n              // domains[14] = point^(trace_length / 4096) - trace_generator^(trace_length / 2).\n\n              mstore(0x3760,\n\n                     addmod(\n\n                       /*point^(trace_length / 4096)*/ mload(0x3160),\n\n                       sub(PRIME, /*trace_generator^(trace_length / 2)*/ mload(0x3300)),\n\n                       PRIME))\n\n\n\n              // Denominator for constraints: 'pedersen/hash0/init/x', 'pedersen/hash0/init/y', 'pedersen/input0_value0', 'pedersen/input0_addr', 'pedersen/input1_value0', 'pedersen/input1_addr', 'pedersen/output_value0', 'pedersen/output_addr'.\n\n              // domains[15] = point^(trace_length / 4096) - 1.\n\n              mstore(0x3780,\n\n                     addmod(/*point^(trace_length / 4096)*/ mload(0x3160), sub(PRIME, 1), PRIME))\n\n\n\n              // Numerator for constraints: 'pedersen/input0_addr'.\n\n              // domains[16] = point - trace_generator^(4096 * (trace_length / 4096 - 1)).\n\n              mstore(0x37a0,\n\n                     addmod(\n\n                       point,\n\n                       sub(PRIME, /*trace_generator^(4096 * (trace_length / 4096 - 1))*/ mload(0x3320)),\n\n                       PRIME))\n\n\n\n              // Denominator for constraints: 'rc_builtin/value', 'rc_builtin/addr_step', 'bitwise/x_or_y_addr', 'bitwise/next_var_pool_addr', 'bitwise/or_is_and_plus_xor', 'bitwise/unique_unpacking192', 'bitwise/unique_unpacking193', 'bitwise/unique_unpacking194', 'bitwise/unique_unpacking195'.\n\n              // domains[17] = point^(trace_length / 128) - 1.\n\n              mstore(0x37c0,\n\n                     addmod(/*point^(trace_length / 128)*/ mload(0x3180), sub(PRIME, 1), PRIME))\n\n\n\n              // Numerator for constraints: 'rc_builtin/addr_step', 'bitwise/next_var_pool_addr'.\n\n              // domains[18] = point - trace_generator^(128 * (trace_length / 128 - 1)).\n\n              mstore(0x37e0,\n\n                     addmod(\n\n                       point,\n\n                       sub(PRIME, /*trace_generator^(128 * (trace_length / 128 - 1))*/ mload(0x3340)),\n\n                       PRIME))\n\n\n\n              // Denominator for constraints: 'ecdsa/signature0/doubling_key/slope', 'ecdsa/signature0/doubling_key/x', 'ecdsa/signature0/doubling_key/y', 'ecdsa/signature0/exponentiate_key/booleanity_test', 'ecdsa/signature0/exponentiate_key/add_points/slope', 'ecdsa/signature0/exponentiate_key/add_points/x', 'ecdsa/signature0/exponentiate_key/add_points/y', 'ecdsa/signature0/exponentiate_key/add_points/x_diff_inv', 'ecdsa/signature0/exponentiate_key/copy_point/x', 'ecdsa/signature0/exponentiate_key/copy_point/y', 'bitwise/step_var_pool_addr', 'bitwise/partition'.\n\n              // domains[19] = point^(trace_length / 32) - 1.\n\n              mstore(0x3800,\n\n                     addmod(/*point^(trace_length / 32)*/ mload(0x31a0), sub(PRIME, 1), PRIME))\n\n\n\n              // Denominator for constraints: 'ecdsa/signature0/exponentiate_key/zeros_tail'.\n\n              // Numerator for constraints: 'ecdsa/signature0/doubling_key/slope', 'ecdsa/signature0/doubling_key/x', 'ecdsa/signature0/doubling_key/y', 'ecdsa/signature0/exponentiate_key/booleanity_test', 'ecdsa/signature0/exponentiate_key/add_points/slope', 'ecdsa/signature0/exponentiate_key/add_points/x', 'ecdsa/signature0/exponentiate_key/add_points/y', 'ecdsa/signature0/exponentiate_key/add_points/x_diff_inv', 'ecdsa/signature0/exponentiate_key/copy_point/x', 'ecdsa/signature0/exponentiate_key/copy_point/y'.\n\n              // domains[20] = point^(trace_length / 8192) - trace_generator^(255 * trace_length / 256).\n\n              mstore(0x3820,\n\n                     addmod(\n\n                       /*point^(trace_length / 8192)*/ mload(0x31c0),\n\n                       sub(PRIME, /*trace_generator^(255 * trace_length / 256)*/ mload(0x32c0)),\n\n                       PRIME))\n\n\n\n              // Denominator for constraints: 'ecdsa/signature0/exponentiate_generator/booleanity_test', 'ecdsa/signature0/exponentiate_generator/add_points/slope', 'ecdsa/signature0/exponentiate_generator/add_points/x', 'ecdsa/signature0/exponentiate_generator/add_points/y', 'ecdsa/signature0/exponentiate_generator/add_points/x_diff_inv', 'ecdsa/signature0/exponentiate_generator/copy_point/x', 'ecdsa/signature0/exponentiate_generator/copy_point/y'.\n\n              // domains[21] = point^(trace_length / 64) - 1.\n\n              mstore(0x3840,\n\n                     addmod(/*point^(trace_length / 64)*/ mload(0x31e0), sub(PRIME, 1), PRIME))\n\n\n\n              // Denominator for constraints: 'ecdsa/signature0/exponentiate_generator/zeros_tail'.\n\n              // Numerator for constraints: 'ecdsa/signature0/exponentiate_generator/booleanity_test', 'ecdsa/signature0/exponentiate_generator/add_points/slope', 'ecdsa/signature0/exponentiate_generator/add_points/x', 'ecdsa/signature0/exponentiate_generator/add_points/y', 'ecdsa/signature0/exponentiate_generator/add_points/x_diff_inv', 'ecdsa/signature0/exponentiate_generator/copy_point/x', 'ecdsa/signature0/exponentiate_generator/copy_point/y'.\n\n              // domains[22] = point^(trace_length / 16384) - trace_generator^(255 * trace_length / 256).\n\n              mstore(0x3860,\n\n                     addmod(\n\n                       /*point^(trace_length / 16384)*/ mload(0x3200),\n\n                       sub(PRIME, /*trace_generator^(255 * trace_length / 256)*/ mload(0x32c0)),\n\n                       PRIME))\n\n\n\n              // Denominator for constraints: 'ecdsa/signature0/exponentiate_generator/bit_extraction_end'.\n\n              // domains[23] = point^(trace_length / 16384) - trace_generator^(251 * trace_length / 256).\n\n              mstore(0x3880,\n\n                     addmod(\n\n                       /*point^(trace_length / 16384)*/ mload(0x3200),\n\n                       sub(PRIME, /*trace_generator^(251 * trace_length / 256)*/ mload(0x3360)),\n\n                       PRIME))\n\n\n\n              // Denominator for constraints: 'ecdsa/signature0/exponentiate_key/bit_extraction_end'.\n\n              // domains[24] = point^(trace_length / 8192) - trace_generator^(251 * trace_length / 256).\n\n              mstore(0x38a0,\n\n                     addmod(\n\n                       /*point^(trace_length / 8192)*/ mload(0x31c0),\n\n                       sub(PRIME, /*trace_generator^(251 * trace_length / 256)*/ mload(0x3360)),\n\n                       PRIME))\n\n\n\n              // Denominator for constraints: 'ecdsa/signature0/init_gen/x', 'ecdsa/signature0/init_gen/y', 'ecdsa/signature0/add_results/slope', 'ecdsa/signature0/add_results/x', 'ecdsa/signature0/add_results/y', 'ecdsa/signature0/add_results/x_diff_inv', 'ecdsa/signature0/extract_r/slope', 'ecdsa/signature0/extract_r/x', 'ecdsa/signature0/extract_r/x_diff_inv', 'ecdsa/signature0/z_nonzero', 'ecdsa/signature0/q_on_curve/x_squared', 'ecdsa/signature0/q_on_curve/on_curve', 'ecdsa/message_addr', 'ecdsa/pubkey_addr', 'ecdsa/message_value0', 'ecdsa/pubkey_value0'.\n\n              // domains[25] = point^(trace_length / 16384) - 1.\n\n              mstore(0x38c0,\n\n                     addmod(/*point^(trace_length / 16384)*/ mload(0x3200), sub(PRIME, 1), PRIME))\n\n\n\n              // Denominator for constraints: 'ecdsa/signature0/init_key/x', 'ecdsa/signature0/init_key/y', 'ecdsa/signature0/r_and_w_nonzero'.\n\n              // domains[26] = point^(trace_length / 8192) - 1.\n\n              mstore(0x38e0,\n\n                     addmod(/*point^(trace_length / 8192)*/ mload(0x31c0), sub(PRIME, 1), PRIME))\n\n\n\n              // Numerator for constraints: 'ecdsa/pubkey_addr'.\n\n              // domains[27] = point - trace_generator^(16384 * (trace_length / 16384 - 1)).\n\n              mstore(0x3900,\n\n                     addmod(\n\n                       point,\n\n                       sub(PRIME, /*trace_generator^(16384 * (trace_length / 16384 - 1))*/ mload(0x3380)),\n\n                       PRIME))\n\n\n\n              // Numerator for constraints: 'bitwise/step_var_pool_addr'.\n\n              // domains[28] = point^(trace_length / 128) - trace_generator^(3 * trace_length / 4).\n\n              mstore(0x3920,\n\n                     addmod(\n\n                       /*point^(trace_length / 128)*/ mload(0x3180),\n\n                       sub(PRIME, /*trace_generator^(3 * trace_length / 4)*/ mload(0x33a0)),\n\n                       PRIME))\n\n\n\n              // Denominator for constraints: 'bitwise/addition_is_xor_with_and'.\n\n              // domains[29] = (point^(trace_length / 128) - trace_generator^(trace_length / 64)) * (point^(trace_length / 128) - trace_generator^(trace_length / 32)) * (point^(trace_length / 128) - trace_generator^(3 * trace_length / 64)) * (point^(trace_length / 128) - trace_generator^(trace_length / 16)) * (point^(trace_length / 128) - trace_generator^(5 * trace_length / 64)) * (point^(trace_length / 128) - trace_generator^(3 * trace_length / 32)) * (point^(trace_length / 128) - trace_generator^(7 * trace_length / 64)) * (point^(trace_length / 128) - trace_generator^(trace_length / 8)) * (point^(trace_length / 128) - trace_generator^(9 * trace_length / 64)) * (point^(trace_length / 128) - trace_generator^(5 * trace_length / 32)) * (point^(trace_length / 128) - trace_generator^(11 * trace_length / 64)) * (point^(trace_length / 128) - trace_generator^(3 * trace_length / 16)) * (point^(trace_length / 128) - trace_generator^(13 * trace_length / 64)) * (point^(trace_length / 128) - trace_generator^(7 * trace_length / 32)) * (point^(trace_length / 128) - trace_generator^(15 * trace_length / 64)) * domain17.\n\n              {\n\n                let domain := mulmod(\n\n                    mulmod(\n\n                      mulmod(\n\n                        addmod(\n\n                          /*point^(trace_length / 128)*/ mload(0x3180),\n\n                          sub(PRIME, /*trace_generator^(trace_length / 64)*/ mload(0x33c0)),\n\n                          PRIME),\n\n                        addmod(\n\n                          /*point^(trace_length / 128)*/ mload(0x3180),\n\n                          sub(PRIME, /*trace_generator^(trace_length / 32)*/ mload(0x33e0)),\n\n                          PRIME),\n\n                        PRIME),\n\n                      addmod(\n\n                        /*point^(trace_length / 128)*/ mload(0x3180),\n\n                        sub(PRIME, /*trace_generator^(3 * trace_length / 64)*/ mload(0x3400)),\n\n                        PRIME),\n\n                      PRIME),\n\n                    addmod(\n\n                      /*point^(trace_length / 128)*/ mload(0x3180),\n\n                      sub(PRIME, /*trace_generator^(trace_length / 16)*/ mload(0x3420)),\n\n                      PRIME),\n\n                    PRIME)\n\n                domain := mulmod(\n\n                  domain,\n\n                  mulmod(\n\n                    mulmod(\n\n                      mulmod(\n\n                        addmod(\n\n                          /*point^(trace_length / 128)*/ mload(0x3180),\n\n                          sub(PRIME, /*trace_generator^(5 * trace_length / 64)*/ mload(0x3440)),\n\n                          PRIME),\n\n                        addmod(\n\n                          /*point^(trace_length / 128)*/ mload(0x3180),\n\n                          sub(PRIME, /*trace_generator^(3 * trace_length / 32)*/ mload(0x3460)),\n\n                          PRIME),\n\n                        PRIME),\n\n                      addmod(\n\n                        /*point^(trace_length / 128)*/ mload(0x3180),\n\n                        sub(PRIME, /*trace_generator^(7 * trace_length / 64)*/ mload(0x3480)),\n\n                        PRIME),\n\n                      PRIME),\n\n                    addmod(\n\n                      /*point^(trace_length / 128)*/ mload(0x3180),\n\n                      sub(PRIME, /*trace_generator^(trace_length / 8)*/ mload(0x34a0)),\n\n                      PRIME),\n\n                    PRIME),\n\n                  PRIME)\n\n                domain := mulmod(\n\n                  domain,\n\n                  mulmod(\n\n                    mulmod(\n\n                      mulmod(\n\n                        addmod(\n\n                          /*point^(trace_length / 128)*/ mload(0x3180),\n\n                          sub(PRIME, /*trace_generator^(9 * trace_length / 64)*/ mload(0x34c0)),\n\n                          PRIME),\n\n                        addmod(\n\n                          /*point^(trace_length / 128)*/ mload(0x3180),\n\n                          sub(PRIME, /*trace_generator^(5 * trace_length / 32)*/ mload(0x34e0)),\n\n                          PRIME),\n\n                        PRIME),\n\n                      addmod(\n\n                        /*point^(trace_length / 128)*/ mload(0x3180),\n\n                        sub(PRIME, /*trace_generator^(11 * trace_length / 64)*/ mload(0x3500)),\n\n                        PRIME),\n\n                      PRIME),\n\n                    addmod(\n\n                      /*point^(trace_length / 128)*/ mload(0x3180),\n\n                      sub(PRIME, /*trace_generator^(3 * trace_length / 16)*/ mload(0x3520)),\n\n                      PRIME),\n\n                    PRIME),\n\n                  PRIME)\n\n                domain := mulmod(\n\n                  domain,\n\n                  mulmod(\n\n                    mulmod(\n\n                      mulmod(\n\n                        addmod(\n\n                          /*point^(trace_length / 128)*/ mload(0x3180),\n\n                          sub(PRIME, /*trace_generator^(13 * trace_length / 64)*/ mload(0x3540)),\n\n                          PRIME),\n\n                        addmod(\n\n                          /*point^(trace_length / 128)*/ mload(0x3180),\n\n                          sub(PRIME, /*trace_generator^(7 * trace_length / 32)*/ mload(0x3560)),\n\n                          PRIME),\n\n                        PRIME),\n\n                      addmod(\n\n                        /*point^(trace_length / 128)*/ mload(0x3180),\n\n                        sub(PRIME, /*trace_generator^(15 * trace_length / 64)*/ mload(0x3580)),\n\n                        PRIME),\n\n                      PRIME),\n\n                    /*domains[17]*/ mload(0x37c0),\n\n                    PRIME),\n\n                  PRIME)\n\n                mstore(0x3940, domain)\n\n              }\n\n\n\n            }\n\n\n\n            {\n\n              // Prepare denominators for batch inverse.\n\n\n\n              // denominators[0] = domains[0].\n\n              mstore(0x3c80, /*domains[0]*/ mload(0x35a0))\n\n\n\n              // denominators[1] = domains[1].\n\n              mstore(0x3ca0, /*domains[1]*/ mload(0x35c0))\n\n\n\n              // denominators[2] = domains[2].\n\n              mstore(0x3cc0, /*domains[2]*/ mload(0x35e0))\n\n\n\n              // denominators[3] = domains[3].\n\n              mstore(0x3ce0, /*domains[3]*/ mload(0x3600))\n\n\n\n              // denominators[4] = domains[4].\n\n              mstore(0x3d00, /*domains[4]*/ mload(0x3620))\n\n\n\n              // denominators[5] = domains[5].\n\n              mstore(0x3d20, /*domains[5]*/ mload(0x3640))\n\n\n\n              // denominators[6] = domains[6].\n\n              mstore(0x3d40, /*domains[6]*/ mload(0x3660))\n\n\n\n              // denominators[7] = domains[7].\n\n              mstore(0x3d60, /*domains[7]*/ mload(0x3680))\n\n\n\n              // denominators[8] = domains[8].\n\n              mstore(0x3d80, /*domains[8]*/ mload(0x36a0))\n\n\n\n              // denominators[9] = domains[9].\n\n              mstore(0x3da0, /*domains[9]*/ mload(0x36c0))\n\n\n\n              // denominators[10] = domains[10].\n\n              mstore(0x3dc0, /*domains[10]*/ mload(0x36e0))\n\n\n\n              // denominators[11] = domains[11].\n\n              mstore(0x3de0, /*domains[11]*/ mload(0x3700))\n\n\n\n              // denominators[12] = domains[12].\n\n              mstore(0x3e00, /*domains[12]*/ mload(0x3720))\n\n\n\n              // denominators[13] = domains[13].\n\n              mstore(0x3e20, /*domains[13]*/ mload(0x3740))\n\n\n\n              // denominators[14] = domains[15].\n\n              mstore(0x3e40, /*domains[15]*/ mload(0x3780))\n\n\n\n              // denominators[15] = domains[17].\n\n              mstore(0x3e60, /*domains[17]*/ mload(0x37c0))\n\n\n\n              // denominators[16] = domains[19].\n\n              mstore(0x3e80, /*domains[19]*/ mload(0x3800))\n\n\n\n              // denominators[17] = domains[20].\n\n              mstore(0x3ea0, /*domains[20]*/ mload(0x3820))\n\n\n\n              // denominators[18] = domains[21].\n\n              mstore(0x3ec0, /*domains[21]*/ mload(0x3840))\n\n\n\n              // denominators[19] = domains[22].\n\n              mstore(0x3ee0, /*domains[22]*/ mload(0x3860))\n\n\n\n              // denominators[20] = domains[23].\n\n              mstore(0x3f00, /*domains[23]*/ mload(0x3880))\n\n\n\n              // denominators[21] = domains[24].\n\n              mstore(0x3f20, /*domains[24]*/ mload(0x38a0))\n\n\n\n              // denominators[22] = domains[25].\n\n              mstore(0x3f40, /*domains[25]*/ mload(0x38c0))\n\n\n\n              // denominators[23] = domains[26].\n\n              mstore(0x3f60, /*domains[26]*/ mload(0x38e0))\n\n\n\n              // denominators[24] = domains[29].\n\n              mstore(0x3f80, /*domains[29]*/ mload(0x3940))\n\n\n\n            }\n\n\n\n            {\n\n              // Compute the inverses of the denominators into denominatorInvs using batch inverse.\n\n\n\n              // Start by computing the cumulative product.\n\n              // Let (d_0, d_1, d_2, ..., d_{n-1}) be the values in denominators. After this loop\n\n              // denominatorInvs will be (1, d_0, d_0 * d_1, ...) and prod will contain the value of\n\n              // d_0 * ... * d_{n-1}.\n\n              // Compute the offset between the partialProducts array and the input values array.\n\n              let productsToValuesOffset := 0x320\n\n              let prod := 1\n\n              let partialProductEndPtr := 0x3c80\n\n              for { let partialProductPtr := 0x3960 }\n\n                  lt(partialProductPtr, partialProductEndPtr)\n\n                  { partialProductPtr := add(partialProductPtr, 0x20) } {\n\n                  mstore(partialProductPtr, prod)\n\n                  // prod *= d_{i}.\n\n                  prod := mulmod(prod,\n\n                                 mload(add(partialProductPtr, productsToValuesOffset)),\n\n                                 PRIME)\n\n              }\n\n\n\n              let firstPartialProductPtr := 0x3960\n\n              // Compute the inverse of the product.\n\n              let prodInv := expmod(prod, sub(PRIME, 2), PRIME)\n\n\n\n              if eq(prodInv, 0) {\n\n                  // Solidity generates reverts with reason that look as follows:\n\n                  // 1. 4 bytes with the constant 0x08c379a0 (== Keccak256(b'Error(string)')[:4]).\n\n                  // 2. 32 bytes offset bytes (always 0x20 as far as i can tell).\n\n                  // 3. 32 bytes with the length of the revert reason.\n\n                  // 4. Revert reason string.\n\n\n\n                  mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n\n                  mstore(0x4, 0x20)\n\n                  mstore(0x24, 0x1e)\n\n                  mstore(0x44, \"Batch inverse product is zero.\")\n\n                  revert(0, 0x62)\n\n              }\n\n\n\n              // Compute the inverses.\n\n              // Loop over denominator_invs in reverse order.\n\n              // currentPartialProductPtr is initialized to one past the end.\n\n              let currentPartialProductPtr := 0x3c80\n\n              for { } gt(currentPartialProductPtr, firstPartialProductPtr) { } {\n\n                  currentPartialProductPtr := sub(currentPartialProductPtr, 0x20)\n\n                  // Store 1/d_{i} = (d_0 * ... * d_{i-1}) * 1/(d_0 * ... * d_{i}).\n\n                  mstore(currentPartialProductPtr,\n\n                         mulmod(mload(currentPartialProductPtr), prodInv, PRIME))\n\n                  // Update prodInv to be 1/(d_0 * ... * d_{i-1}) by multiplying by d_i.\n\n                  prodInv := mulmod(prodInv,\n\n                                     mload(add(currentPartialProductPtr, productsToValuesOffset)),\n\n                                     PRIME)\n\n              }\n\n            }\n\n\n\n            {\n\n              // Compute the result of the composition polynomial.\n\n\n\n              {\n\n              // cpu/decode/opcode_rc/bit_0 = column0_row0 - (column0_row1 + column0_row1).\n\n              let val := addmod(\n\n                /*column0_row0*/ mload(0x1600),\n\n                sub(\n\n                  PRIME,\n\n                  addmod(/*column0_row1*/ mload(0x1620), /*column0_row1*/ mload(0x1620), PRIME)),\n\n                PRIME)\n\n              mstore(0x2bc0, val)\n\n              }\n\n\n\n\n\n              {\n\n              // cpu/decode/opcode_rc/bit_2 = column0_row2 - (column0_row3 + column0_row3).\n\n              let val := addmod(\n\n                /*column0_row2*/ mload(0x1640),\n\n                sub(\n\n                  PRIME,\n\n                  addmod(/*column0_row3*/ mload(0x1660), /*column0_row3*/ mload(0x1660), PRIME)),\n\n                PRIME)\n\n              mstore(0x2be0, val)\n\n              }\n\n\n\n\n\n              {\n\n              // cpu/decode/opcode_rc/bit_4 = column0_row4 - (column0_row5 + column0_row5).\n\n              let val := addmod(\n\n                /*column0_row4*/ mload(0x1680),\n\n                sub(\n\n                  PRIME,\n\n                  addmod(/*column0_row5*/ mload(0x16a0), /*column0_row5*/ mload(0x16a0), PRIME)),\n\n                PRIME)\n\n              mstore(0x2c00, val)\n\n              }\n\n\n\n\n\n              {\n\n              // cpu/decode/opcode_rc/bit_3 = column0_row3 - (column0_row4 + column0_row4).\n\n              let val := addmod(\n\n                /*column0_row3*/ mload(0x1660),\n\n                sub(\n\n                  PRIME,\n\n                  addmod(/*column0_row4*/ mload(0x1680), /*column0_row4*/ mload(0x1680), PRIME)),\n\n                PRIME)\n\n              mstore(0x2c20, val)\n\n              }\n\n\n\n\n\n              {\n\n              // cpu/decode/flag_op1_base_op0_0 = 1 - (cpu__decode__opcode_rc__bit_2 + cpu__decode__opcode_rc__bit_4 + cpu__decode__opcode_rc__bit_3).\n\n              let val := addmod(\n\n                1,\n\n                sub(\n\n                  PRIME,\n\n                  addmod(\n\n                    addmod(\n\n                      /*intermediate_value/cpu/decode/opcode_rc/bit_2*/ mload(0x2be0),\n\n                      /*intermediate_value/cpu/decode/opcode_rc/bit_4*/ mload(0x2c00),\n\n                      PRIME),\n\n                    /*intermediate_value/cpu/decode/opcode_rc/bit_3*/ mload(0x2c20),\n\n                    PRIME)),\n\n                PRIME)\n\n              mstore(0x2c40, val)\n\n              }\n\n\n\n\n\n              {\n\n              // cpu/decode/opcode_rc/bit_5 = column0_row5 - (column0_row6 + column0_row6).\n\n              let val := addmod(\n\n                /*column0_row5*/ mload(0x16a0),\n\n                sub(\n\n                  PRIME,\n\n                  addmod(/*column0_row6*/ mload(0x16c0), /*column0_row6*/ mload(0x16c0), PRIME)),\n\n                PRIME)\n\n              mstore(0x2c60, val)\n\n              }\n\n\n\n\n\n              {\n\n              // cpu/decode/opcode_rc/bit_6 = column0_row6 - (column0_row7 + column0_row7).\n\n              let val := addmod(\n\n                /*column0_row6*/ mload(0x16c0),\n\n                sub(\n\n                  PRIME,\n\n                  addmod(/*column0_row7*/ mload(0x16e0), /*column0_row7*/ mload(0x16e0), PRIME)),\n\n                PRIME)\n\n              mstore(0x2c80, val)\n\n              }\n\n\n\n\n\n              {\n\n              // cpu/decode/opcode_rc/bit_9 = column0_row9 - (column0_row10 + column0_row10).\n\n              let val := addmod(\n\n                /*column0_row9*/ mload(0x1720),\n\n                sub(\n\n                  PRIME,\n\n                  addmod(/*column0_row10*/ mload(0x1740), /*column0_row10*/ mload(0x1740), PRIME)),\n\n                PRIME)\n\n              mstore(0x2ca0, val)\n\n              }\n\n\n\n\n\n              {\n\n              // cpu/decode/flag_res_op1_0 = 1 - (cpu__decode__opcode_rc__bit_5 + cpu__decode__opcode_rc__bit_6 + cpu__decode__opcode_rc__bit_9).\n\n              let val := addmod(\n\n                1,\n\n                sub(\n\n                  PRIME,\n\n                  addmod(\n\n                    addmod(\n\n                      /*intermediate_value/cpu/decode/opcode_rc/bit_5*/ mload(0x2c60),\n\n                      /*intermediate_value/cpu/decode/opcode_rc/bit_6*/ mload(0x2c80),\n\n                      PRIME),\n\n                    /*intermediate_value/cpu/decode/opcode_rc/bit_9*/ mload(0x2ca0),\n\n                    PRIME)),\n\n                PRIME)\n\n              mstore(0x2cc0, val)\n\n              }\n\n\n\n\n\n              {\n\n              // cpu/decode/opcode_rc/bit_7 = column0_row7 - (column0_row8 + column0_row8).\n\n              let val := addmod(\n\n                /*column0_row7*/ mload(0x16e0),\n\n                sub(\n\n                  PRIME,\n\n                  addmod(/*column0_row8*/ mload(0x1700), /*column0_row8*/ mload(0x1700), PRIME)),\n\n                PRIME)\n\n              mstore(0x2ce0, val)\n\n              }\n\n\n\n\n\n              {\n\n              // cpu/decode/opcode_rc/bit_8 = column0_row8 - (column0_row9 + column0_row9).\n\n              let val := addmod(\n\n                /*column0_row8*/ mload(0x1700),\n\n                sub(\n\n                  PRIME,\n\n                  addmod(/*column0_row9*/ mload(0x1720), /*column0_row9*/ mload(0x1720), PRIME)),\n\n                PRIME)\n\n              mstore(0x2d00, val)\n\n              }\n\n\n\n\n\n              {\n\n              // cpu/decode/flag_pc_update_regular_0 = 1 - (cpu__decode__opcode_rc__bit_7 + cpu__decode__opcode_rc__bit_8 + cpu__decode__opcode_rc__bit_9).\n\n              let val := addmod(\n\n                1,\n\n                sub(\n\n                  PRIME,\n\n                  addmod(\n\n                    addmod(\n\n                      /*intermediate_value/cpu/decode/opcode_rc/bit_7*/ mload(0x2ce0),\n\n                      /*intermediate_value/cpu/decode/opcode_rc/bit_8*/ mload(0x2d00),\n\n                      PRIME),\n\n                    /*intermediate_value/cpu/decode/opcode_rc/bit_9*/ mload(0x2ca0),\n\n                    PRIME)),\n\n                PRIME)\n\n              mstore(0x2d20, val)\n\n              }\n\n\n\n\n\n              {\n\n              // cpu/decode/opcode_rc/bit_12 = column0_row12 - (column0_row13 + column0_row13).\n\n              let val := addmod(\n\n                /*column0_row12*/ mload(0x1780),\n\n                sub(\n\n                  PRIME,\n\n                  addmod(/*column0_row13*/ mload(0x17a0), /*column0_row13*/ mload(0x17a0), PRIME)),\n\n                PRIME)\n\n              mstore(0x2d40, val)\n\n              }\n\n\n\n\n\n              {\n\n              // cpu/decode/opcode_rc/bit_13 = column0_row13 - (column0_row14 + column0_row14).\n\n              let val := addmod(\n\n                /*column0_row13*/ mload(0x17a0),\n\n                sub(\n\n                  PRIME,\n\n                  addmod(/*column0_row14*/ mload(0x17c0), /*column0_row14*/ mload(0x17c0), PRIME)),\n\n                PRIME)\n\n              mstore(0x2d60, val)\n\n              }\n\n\n\n\n\n              {\n\n              // cpu/decode/fp_update_regular_0 = 1 - (cpu__decode__opcode_rc__bit_12 + cpu__decode__opcode_rc__bit_13).\n\n              let val := addmod(\n\n                1,\n\n                sub(\n\n                  PRIME,\n\n                  addmod(\n\n                    /*intermediate_value/cpu/decode/opcode_rc/bit_12*/ mload(0x2d40),\n\n                    /*intermediate_value/cpu/decode/opcode_rc/bit_13*/ mload(0x2d60),\n\n                    PRIME)),\n\n                PRIME)\n\n              mstore(0x2d80, val)\n\n              }\n\n\n\n\n\n              {\n\n              // cpu/decode/opcode_rc/bit_1 = column0_row1 - (column0_row2 + column0_row2).\n\n              let val := addmod(\n\n                /*column0_row1*/ mload(0x1620),\n\n                sub(\n\n                  PRIME,\n\n                  addmod(/*column0_row2*/ mload(0x1640), /*column0_row2*/ mload(0x1640), PRIME)),\n\n                PRIME)\n\n              mstore(0x2da0, val)\n\n              }\n\n\n\n\n\n              {\n\n              // npc_reg_0 = column3_row0 + cpu__decode__opcode_rc__bit_2 + 1.\n\n              let val := addmod(\n\n                addmod(\n\n                  /*column3_row0*/ mload(0x1c20),\n\n                  /*intermediate_value/cpu/decode/opcode_rc/bit_2*/ mload(0x2be0),\n\n                  PRIME),\n\n                1,\n\n                PRIME)\n\n              mstore(0x2dc0, val)\n\n              }\n\n\n\n\n\n              {\n\n              // cpu/decode/opcode_rc/bit_10 = column0_row10 - (column0_row11 + column0_row11).\n\n              let val := addmod(\n\n                /*column0_row10*/ mload(0x1740),\n\n                sub(\n\n                  PRIME,\n\n                  addmod(/*column0_row11*/ mload(0x1760), /*column0_row11*/ mload(0x1760), PRIME)),\n\n                PRIME)\n\n              mstore(0x2de0, val)\n\n              }\n\n\n\n\n\n              {\n\n              // cpu/decode/opcode_rc/bit_11 = column0_row11 - (column0_row12 + column0_row12).\n\n              let val := addmod(\n\n                /*column0_row11*/ mload(0x1760),\n\n                sub(\n\n                  PRIME,\n\n                  addmod(/*column0_row12*/ mload(0x1780), /*column0_row12*/ mload(0x1780), PRIME)),\n\n                PRIME)\n\n              mstore(0x2e00, val)\n\n              }\n\n\n\n\n\n              {\n\n              // cpu/decode/opcode_rc/bit_14 = column0_row14 - (column0_row15 + column0_row15).\n\n              let val := addmod(\n\n                /*column0_row14*/ mload(0x17c0),\n\n                sub(\n\n                  PRIME,\n\n                  addmod(/*column0_row15*/ mload(0x17e0), /*column0_row15*/ mload(0x17e0), PRIME)),\n\n                PRIME)\n\n              mstore(0x2e20, val)\n\n              }\n\n\n\n\n\n              {\n\n              // memory/address_diff_0 = column4_row2 - column4_row0.\n\n              let val := addmod(/*column4_row2*/ mload(0x20c0), sub(PRIME, /*column4_row0*/ mload(0x2080)), PRIME)\n\n              mstore(0x2e40, val)\n\n              }\n\n\n\n\n\n              {\n\n              // rc16/diff_0 = column5_row6 - column5_row2.\n\n              let val := addmod(/*column5_row6*/ mload(0x21c0), sub(PRIME, /*column5_row2*/ mload(0x2140)), PRIME)\n\n              mstore(0x2e60, val)\n\n              }\n\n\n\n\n\n              {\n\n              // pedersen/hash0/ec_subset_sum/bit_0 = column5_row3 - (column5_row11 + column5_row11).\n\n              let val := addmod(\n\n                /*column5_row3*/ mload(0x2160),\n\n                sub(\n\n                  PRIME,\n\n                  addmod(/*column5_row11*/ mload(0x2240), /*column5_row11*/ mload(0x2240), PRIME)),\n\n                PRIME)\n\n              mstore(0x2e80, val)\n\n              }\n\n\n\n\n\n              {\n\n              // pedersen/hash0/ec_subset_sum/bit_neg_0 = 1 - pedersen__hash0__ec_subset_sum__bit_0.\n\n              let val := addmod(\n\n                1,\n\n                sub(PRIME, /*intermediate_value/pedersen/hash0/ec_subset_sum/bit_0*/ mload(0x2e80)),\n\n                PRIME)\n\n              mstore(0x2ea0, val)\n\n              }\n\n\n\n\n\n              {\n\n              // rc_builtin/value0_0 = column5_row12.\n\n              let val := /*column5_row12*/ mload(0x2260)\n\n              mstore(0x2ec0, val)\n\n              }\n\n\n\n\n\n              {\n\n              // rc_builtin/value1_0 = rc_builtin__value0_0 * offset_size + column5_row28.\n\n              let val := addmod(\n\n                mulmod(\n\n                  /*intermediate_value/rc_builtin/value0_0*/ mload(0x2ec0),\n\n                  /*offset_size*/ mload(0xa0),\n\n                  PRIME),\n\n                /*column5_row28*/ mload(0x22a0),\n\n                PRIME)\n\n              mstore(0x2ee0, val)\n\n              }\n\n\n\n\n\n              {\n\n              // rc_builtin/value2_0 = rc_builtin__value1_0 * offset_size + column5_row44.\n\n              let val := addmod(\n\n                mulmod(\n\n                  /*intermediate_value/rc_builtin/value1_0*/ mload(0x2ee0),\n\n                  /*offset_size*/ mload(0xa0),\n\n                  PRIME),\n\n                /*column5_row44*/ mload(0x22c0),\n\n                PRIME)\n\n              mstore(0x2f00, val)\n\n              }\n\n\n\n\n\n              {\n\n              // rc_builtin/value3_0 = rc_builtin__value2_0 * offset_size + column5_row60.\n\n              let val := addmod(\n\n                mulmod(\n\n                  /*intermediate_value/rc_builtin/value2_0*/ mload(0x2f00),\n\n                  /*offset_size*/ mload(0xa0),\n\n                  PRIME),\n\n                /*column5_row60*/ mload(0x22e0),\n\n                PRIME)\n\n              mstore(0x2f20, val)\n\n              }\n\n\n\n\n\n              {\n\n              // rc_builtin/value4_0 = rc_builtin__value3_0 * offset_size + column5_row76.\n\n              let val := addmod(\n\n                mulmod(\n\n                  /*intermediate_value/rc_builtin/value3_0*/ mload(0x2f20),\n\n                  /*offset_size*/ mload(0xa0),\n\n                  PRIME),\n\n                /*column5_row76*/ mload(0x2300),\n\n                PRIME)\n\n              mstore(0x2f40, val)\n\n              }\n\n\n\n\n\n              {\n\n              // rc_builtin/value5_0 = rc_builtin__value4_0 * offset_size + column5_row92.\n\n              let val := addmod(\n\n                mulmod(\n\n                  /*intermediate_value/rc_builtin/value4_0*/ mload(0x2f40),\n\n                  /*offset_size*/ mload(0xa0),\n\n                  PRIME),\n\n                /*column5_row92*/ mload(0x2320),\n\n                PRIME)\n\n              mstore(0x2f60, val)\n\n              }\n\n\n\n\n\n              {\n\n              // rc_builtin/value6_0 = rc_builtin__value5_0 * offset_size + column5_row108.\n\n              let val := addmod(\n\n                mulmod(\n\n                  /*intermediate_value/rc_builtin/value5_0*/ mload(0x2f60),\n\n                  /*offset_size*/ mload(0xa0),\n\n                  PRIME),\n\n                /*column5_row108*/ mload(0x2340),\n\n                PRIME)\n\n              mstore(0x2f80, val)\n\n              }\n\n\n\n\n\n              {\n\n              // rc_builtin/value7_0 = rc_builtin__value6_0 * offset_size + column5_row124.\n\n              let val := addmod(\n\n                mulmod(\n\n                  /*intermediate_value/rc_builtin/value6_0*/ mload(0x2f80),\n\n                  /*offset_size*/ mload(0xa0),\n\n                  PRIME),\n\n                /*column5_row124*/ mload(0x2360),\n\n                PRIME)\n\n              mstore(0x2fa0, val)\n\n              }\n\n\n\n\n\n              {\n\n              // ecdsa/signature0/doubling_key/x_squared = column6_row6 * column6_row6.\n\n              let val := mulmod(/*column6_row6*/ mload(0x25c0), /*column6_row6*/ mload(0x25c0), PRIME)\n\n              mstore(0x2fc0, val)\n\n              }\n\n\n\n\n\n              {\n\n              // ecdsa/signature0/exponentiate_generator/bit_0 = column6_row21 - (column6_row85 + column6_row85).\n\n              let val := addmod(\n\n                /*column6_row21*/ mload(0x26e0),\n\n                sub(\n\n                  PRIME,\n\n                  addmod(/*column6_row85*/ mload(0x28a0), /*column6_row85*/ mload(0x28a0), PRIME)),\n\n                PRIME)\n\n              mstore(0x2fe0, val)\n\n              }\n\n\n\n\n\n              {\n\n              // ecdsa/signature0/exponentiate_generator/bit_neg_0 = 1 - ecdsa__signature0__exponentiate_generator__bit_0.\n\n              let val := addmod(\n\n                1,\n\n                sub(\n\n                  PRIME,\n\n                  /*intermediate_value/ecdsa/signature0/exponentiate_generator/bit_0*/ mload(0x2fe0)),\n\n                PRIME)\n\n              mstore(0x3000, val)\n\n              }\n\n\n\n\n\n              {\n\n              // ecdsa/signature0/exponentiate_key/bit_0 = column6_row1 - (column6_row33 + column6_row33).\n\n              let val := addmod(\n\n                /*column6_row1*/ mload(0x2540),\n\n                sub(\n\n                  PRIME,\n\n                  addmod(/*column6_row33*/ mload(0x2780), /*column6_row33*/ mload(0x2780), PRIME)),\n\n                PRIME)\n\n              mstore(0x3020, val)\n\n              }\n\n\n\n\n\n              {\n\n              // ecdsa/signature0/exponentiate_key/bit_neg_0 = 1 - ecdsa__signature0__exponentiate_key__bit_0.\n\n              let val := addmod(\n\n                1,\n\n                sub(\n\n                  PRIME,\n\n                  /*intermediate_value/ecdsa/signature0/exponentiate_key/bit_0*/ mload(0x3020)),\n\n                PRIME)\n\n              mstore(0x3040, val)\n\n              }\n\n\n\n\n\n              {\n\n              // bitwise/sum_var_0_0 = column1_row0 + column1_row2 * 2 + column1_row4 * 4 + column1_row6 * 8 + column1_row8 * 18446744073709551616 + column1_row10 * 36893488147419103232 + column1_row12 * 73786976294838206464 + column1_row14 * 147573952589676412928.\n\n              let val := addmod(\n\n                addmod(\n\n                  addmod(\n\n                    addmod(\n\n                      addmod(\n\n                        addmod(\n\n                          addmod(\n\n                            /*column1_row0*/ mload(0x1800),\n\n                            mulmod(/*column1_row2*/ mload(0x1840), 2, PRIME),\n\n                            PRIME),\n\n                          mulmod(/*column1_row4*/ mload(0x1860), 4, PRIME),\n\n                          PRIME),\n\n                        mulmod(/*column1_row6*/ mload(0x1880), 8, PRIME),\n\n                        PRIME),\n\n                      mulmod(/*column1_row8*/ mload(0x18a0), 18446744073709551616, PRIME),\n\n                      PRIME),\n\n                    mulmod(/*column1_row10*/ mload(0x18c0), 36893488147419103232, PRIME),\n\n                    PRIME),\n\n                  mulmod(/*column1_row12*/ mload(0x18e0), 73786976294838206464, PRIME),\n\n                  PRIME),\n\n                mulmod(/*column1_row14*/ mload(0x1900), 147573952589676412928, PRIME),\n\n                PRIME)\n\n              mstore(0x3060, val)\n\n              }\n\n\n\n\n\n              {\n\n              // bitwise/sum_var_8_0 = column1_row16 * 340282366920938463463374607431768211456 + column1_row18 * 680564733841876926926749214863536422912 + column1_row20 * 1361129467683753853853498429727072845824 + column1_row22 * 2722258935367507707706996859454145691648 + column1_row24 * 6277101735386680763835789423207666416102355444464034512896 + column1_row26 * 12554203470773361527671578846415332832204710888928069025792 + column1_row28 * 25108406941546723055343157692830665664409421777856138051584 + column1_row30 * 50216813883093446110686315385661331328818843555712276103168.\n\n              let val := addmod(\n\n                addmod(\n\n                  addmod(\n\n                    addmod(\n\n                      addmod(\n\n                        addmod(\n\n                          addmod(\n\n                            mulmod(/*column1_row16*/ mload(0x1920), 340282366920938463463374607431768211456, PRIME),\n\n                            mulmod(/*column1_row18*/ mload(0x1940), 680564733841876926926749214863536422912, PRIME),\n\n                            PRIME),\n\n                          mulmod(/*column1_row20*/ mload(0x1960), 1361129467683753853853498429727072845824, PRIME),\n\n                          PRIME),\n\n                        mulmod(/*column1_row22*/ mload(0x1980), 2722258935367507707706996859454145691648, PRIME),\n\n                        PRIME),\n\n                      mulmod(\n\n                        /*column1_row24*/ mload(0x19a0),\n\n                        6277101735386680763835789423207666416102355444464034512896,\n\n                        PRIME),\n\n                      PRIME),\n\n                    mulmod(\n\n                      /*column1_row26*/ mload(0x19c0),\n\n                      12554203470773361527671578846415332832204710888928069025792,\n\n                      PRIME),\n\n                    PRIME),\n\n                  mulmod(\n\n                    /*column1_row28*/ mload(0x19e0),\n\n                    25108406941546723055343157692830665664409421777856138051584,\n\n                    PRIME),\n\n                  PRIME),\n\n                mulmod(\n\n                  /*column1_row30*/ mload(0x1a00),\n\n                  50216813883093446110686315385661331328818843555712276103168,\n\n                  PRIME),\n\n                PRIME)\n\n              mstore(0x3080, val)\n\n              }\n\n\n\n\n\n              {\n\n              // Constraint expression for cpu/decode/opcode_rc/bit: cpu__decode__opcode_rc__bit_0 * cpu__decode__opcode_rc__bit_0 - cpu__decode__opcode_rc__bit_0.\n\n              let val := addmod(\n\n                mulmod(\n\n                  /*intermediate_value/cpu/decode/opcode_rc/bit_0*/ mload(0x2bc0),\n\n                  /*intermediate_value/cpu/decode/opcode_rc/bit_0*/ mload(0x2bc0),\n\n                  PRIME),\n\n                sub(PRIME, /*intermediate_value/cpu/decode/opcode_rc/bit_0*/ mload(0x2bc0)),\n\n                PRIME)\n\n\n\n              // Numerator: point^(trace_length / 16) - trace_generator^(15 * trace_length / 16).\n\n              // val *= domains[1].\n\n              val := mulmod(val, /*domains[1]*/ mload(0x35c0), PRIME)\n\n              // Denominator: point^trace_length - 1.\n\n              // val *= denominator_invs[0].\n\n              val := mulmod(val, /*denominator_invs[0]*/ mload(0x3960), PRIME)\n\n\n\n              // res += val * coefficients[0].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[0]*/ mload(0x540), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for cpu/decode/opcode_rc/zero: column0_row0.\n\n              let val := /*column0_row0*/ mload(0x1600)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 16) - trace_generator^(15 * trace_length / 16).\n\n              // val *= denominator_invs[1].\n\n              val := mulmod(val, /*denominator_invs[1]*/ mload(0x3980), PRIME)\n\n\n\n              // res += val * coefficients[1].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[1]*/ mload(0x560), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for cpu/decode/opcode_rc_input: column3_row1 - (((column0_row0 * offset_size + column5_row4) * offset_size + column5_row8) * offset_size + column5_row0).\n\n              let val := addmod(\n\n                /*column3_row1*/ mload(0x1c40),\n\n                sub(\n\n                  PRIME,\n\n                  addmod(\n\n                    mulmod(\n\n                      addmod(\n\n                        mulmod(\n\n                          addmod(\n\n                            mulmod(/*column0_row0*/ mload(0x1600), /*offset_size*/ mload(0xa0), PRIME),\n\n                            /*column5_row4*/ mload(0x2180),\n\n                            PRIME),\n\n                          /*offset_size*/ mload(0xa0),\n\n                          PRIME),\n\n                        /*column5_row8*/ mload(0x2200),\n\n                        PRIME),\n\n                      /*offset_size*/ mload(0xa0),\n\n                      PRIME),\n\n                    /*column5_row0*/ mload(0x2100),\n\n                    PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 16) - 1.\n\n              // val *= denominator_invs[2].\n\n              val := mulmod(val, /*denominator_invs[2]*/ mload(0x39a0), PRIME)\n\n\n\n              // res += val * coefficients[2].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[2]*/ mload(0x580), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for cpu/decode/flag_op1_base_op0_bit: cpu__decode__flag_op1_base_op0_0 * cpu__decode__flag_op1_base_op0_0 - cpu__decode__flag_op1_base_op0_0.\n\n              let val := addmod(\n\n                mulmod(\n\n                  /*intermediate_value/cpu/decode/flag_op1_base_op0_0*/ mload(0x2c40),\n\n                  /*intermediate_value/cpu/decode/flag_op1_base_op0_0*/ mload(0x2c40),\n\n                  PRIME),\n\n                sub(PRIME, /*intermediate_value/cpu/decode/flag_op1_base_op0_0*/ mload(0x2c40)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 16) - 1.\n\n              // val *= denominator_invs[2].\n\n              val := mulmod(val, /*denominator_invs[2]*/ mload(0x39a0), PRIME)\n\n\n\n              // res += val * coefficients[3].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[3]*/ mload(0x5a0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for cpu/decode/flag_res_op1_bit: cpu__decode__flag_res_op1_0 * cpu__decode__flag_res_op1_0 - cpu__decode__flag_res_op1_0.\n\n              let val := addmod(\n\n                mulmod(\n\n                  /*intermediate_value/cpu/decode/flag_res_op1_0*/ mload(0x2cc0),\n\n                  /*intermediate_value/cpu/decode/flag_res_op1_0*/ mload(0x2cc0),\n\n                  PRIME),\n\n                sub(PRIME, /*intermediate_value/cpu/decode/flag_res_op1_0*/ mload(0x2cc0)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 16) - 1.\n\n              // val *= denominator_invs[2].\n\n              val := mulmod(val, /*denominator_invs[2]*/ mload(0x39a0), PRIME)\n\n\n\n              // res += val * coefficients[4].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[4]*/ mload(0x5c0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for cpu/decode/flag_pc_update_regular_bit: cpu__decode__flag_pc_update_regular_0 * cpu__decode__flag_pc_update_regular_0 - cpu__decode__flag_pc_update_regular_0.\n\n              let val := addmod(\n\n                mulmod(\n\n                  /*intermediate_value/cpu/decode/flag_pc_update_regular_0*/ mload(0x2d20),\n\n                  /*intermediate_value/cpu/decode/flag_pc_update_regular_0*/ mload(0x2d20),\n\n                  PRIME),\n\n                sub(PRIME, /*intermediate_value/cpu/decode/flag_pc_update_regular_0*/ mload(0x2d20)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 16) - 1.\n\n              // val *= denominator_invs[2].\n\n              val := mulmod(val, /*denominator_invs[2]*/ mload(0x39a0), PRIME)\n\n\n\n              // res += val * coefficients[5].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[5]*/ mload(0x5e0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for cpu/decode/fp_update_regular_bit: cpu__decode__fp_update_regular_0 * cpu__decode__fp_update_regular_0 - cpu__decode__fp_update_regular_0.\n\n              let val := addmod(\n\n                mulmod(\n\n                  /*intermediate_value/cpu/decode/fp_update_regular_0*/ mload(0x2d80),\n\n                  /*intermediate_value/cpu/decode/fp_update_regular_0*/ mload(0x2d80),\n\n                  PRIME),\n\n                sub(PRIME, /*intermediate_value/cpu/decode/fp_update_regular_0*/ mload(0x2d80)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 16) - 1.\n\n              // val *= denominator_invs[2].\n\n              val := mulmod(val, /*denominator_invs[2]*/ mload(0x39a0), PRIME)\n\n\n\n              // res += val * coefficients[6].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[6]*/ mload(0x600), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for cpu/operands/mem_dst_addr: column3_row8 + half_offset_size - (cpu__decode__opcode_rc__bit_0 * column6_row8 + (1 - cpu__decode__opcode_rc__bit_0) * column6_row0 + column5_row0).\n\n              let val := addmod(\n\n                addmod(/*column3_row8*/ mload(0x1ce0), /*half_offset_size*/ mload(0xc0), PRIME),\n\n                sub(\n\n                  PRIME,\n\n                  addmod(\n\n                    addmod(\n\n                      mulmod(\n\n                        /*intermediate_value/cpu/decode/opcode_rc/bit_0*/ mload(0x2bc0),\n\n                        /*column6_row8*/ mload(0x25e0),\n\n                        PRIME),\n\n                      mulmod(\n\n                        addmod(\n\n                          1,\n\n                          sub(PRIME, /*intermediate_value/cpu/decode/opcode_rc/bit_0*/ mload(0x2bc0)),\n\n                          PRIME),\n\n                        /*column6_row0*/ mload(0x2520),\n\n                        PRIME),\n\n                      PRIME),\n\n                    /*column5_row0*/ mload(0x2100),\n\n                    PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 16) - 1.\n\n              // val *= denominator_invs[2].\n\n              val := mulmod(val, /*denominator_invs[2]*/ mload(0x39a0), PRIME)\n\n\n\n              // res += val * coefficients[7].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[7]*/ mload(0x620), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for cpu/operands/mem0_addr: column3_row4 + half_offset_size - (cpu__decode__opcode_rc__bit_1 * column6_row8 + (1 - cpu__decode__opcode_rc__bit_1) * column6_row0 + column5_row8).\n\n              let val := addmod(\n\n                addmod(/*column3_row4*/ mload(0x1ca0), /*half_offset_size*/ mload(0xc0), PRIME),\n\n                sub(\n\n                  PRIME,\n\n                  addmod(\n\n                    addmod(\n\n                      mulmod(\n\n                        /*intermediate_value/cpu/decode/opcode_rc/bit_1*/ mload(0x2da0),\n\n                        /*column6_row8*/ mload(0x25e0),\n\n                        PRIME),\n\n                      mulmod(\n\n                        addmod(\n\n                          1,\n\n                          sub(PRIME, /*intermediate_value/cpu/decode/opcode_rc/bit_1*/ mload(0x2da0)),\n\n                          PRIME),\n\n                        /*column6_row0*/ mload(0x2520),\n\n                        PRIME),\n\n                      PRIME),\n\n                    /*column5_row8*/ mload(0x2200),\n\n                    PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 16) - 1.\n\n              // val *= denominator_invs[2].\n\n              val := mulmod(val, /*denominator_invs[2]*/ mload(0x39a0), PRIME)\n\n\n\n              // res += val * coefficients[8].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[8]*/ mload(0x640), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for cpu/operands/mem1_addr: column3_row12 + half_offset_size - (cpu__decode__opcode_rc__bit_2 * column3_row0 + cpu__decode__opcode_rc__bit_4 * column6_row0 + cpu__decode__opcode_rc__bit_3 * column6_row8 + cpu__decode__flag_op1_base_op0_0 * column3_row5 + column5_row4).\n\n              let val := addmod(\n\n                addmod(/*column3_row12*/ mload(0x1d60), /*half_offset_size*/ mload(0xc0), PRIME),\n\n                sub(\n\n                  PRIME,\n\n                  addmod(\n\n                    addmod(\n\n                      addmod(\n\n                        addmod(\n\n                          mulmod(\n\n                            /*intermediate_value/cpu/decode/opcode_rc/bit_2*/ mload(0x2be0),\n\n                            /*column3_row0*/ mload(0x1c20),\n\n                            PRIME),\n\n                          mulmod(\n\n                            /*intermediate_value/cpu/decode/opcode_rc/bit_4*/ mload(0x2c00),\n\n                            /*column6_row0*/ mload(0x2520),\n\n                            PRIME),\n\n                          PRIME),\n\n                        mulmod(\n\n                          /*intermediate_value/cpu/decode/opcode_rc/bit_3*/ mload(0x2c20),\n\n                          /*column6_row8*/ mload(0x25e0),\n\n                          PRIME),\n\n                        PRIME),\n\n                      mulmod(\n\n                        /*intermediate_value/cpu/decode/flag_op1_base_op0_0*/ mload(0x2c40),\n\n                        /*column3_row5*/ mload(0x1cc0),\n\n                        PRIME),\n\n                      PRIME),\n\n                    /*column5_row4*/ mload(0x2180),\n\n                    PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 16) - 1.\n\n              // val *= denominator_invs[2].\n\n              val := mulmod(val, /*denominator_invs[2]*/ mload(0x39a0), PRIME)\n\n\n\n              // res += val * coefficients[9].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[9]*/ mload(0x660), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for cpu/operands/ops_mul: column6_row4 - column3_row5 * column3_row13.\n\n              let val := addmod(\n\n                /*column6_row4*/ mload(0x2580),\n\n                sub(\n\n                  PRIME,\n\n                  mulmod(/*column3_row5*/ mload(0x1cc0), /*column3_row13*/ mload(0x1d80), PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 16) - 1.\n\n              // val *= denominator_invs[2].\n\n              val := mulmod(val, /*denominator_invs[2]*/ mload(0x39a0), PRIME)\n\n\n\n              // res += val * coefficients[10].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[10]*/ mload(0x680), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for cpu/operands/res: (1 - cpu__decode__opcode_rc__bit_9) * column6_row12 - (cpu__decode__opcode_rc__bit_5 * (column3_row5 + column3_row13) + cpu__decode__opcode_rc__bit_6 * column6_row4 + cpu__decode__flag_res_op1_0 * column3_row13).\n\n              let val := addmod(\n\n                mulmod(\n\n                  addmod(\n\n                    1,\n\n                    sub(PRIME, /*intermediate_value/cpu/decode/opcode_rc/bit_9*/ mload(0x2ca0)),\n\n                    PRIME),\n\n                  /*column6_row12*/ mload(0x2640),\n\n                  PRIME),\n\n                sub(\n\n                  PRIME,\n\n                  addmod(\n\n                    addmod(\n\n                      mulmod(\n\n                        /*intermediate_value/cpu/decode/opcode_rc/bit_5*/ mload(0x2c60),\n\n                        addmod(/*column3_row5*/ mload(0x1cc0), /*column3_row13*/ mload(0x1d80), PRIME),\n\n                        PRIME),\n\n                      mulmod(\n\n                        /*intermediate_value/cpu/decode/opcode_rc/bit_6*/ mload(0x2c80),\n\n                        /*column6_row4*/ mload(0x2580),\n\n                        PRIME),\n\n                      PRIME),\n\n                    mulmod(\n\n                      /*intermediate_value/cpu/decode/flag_res_op1_0*/ mload(0x2cc0),\n\n                      /*column3_row13*/ mload(0x1d80),\n\n                      PRIME),\n\n                    PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 16) - 1.\n\n              // val *= denominator_invs[2].\n\n              val := mulmod(val, /*denominator_invs[2]*/ mload(0x39a0), PRIME)\n\n\n\n              // res += val * coefficients[11].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[11]*/ mload(0x6a0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for cpu/update_registers/update_pc/tmp0: column6_row2 - cpu__decode__opcode_rc__bit_9 * column3_row9.\n\n              let val := addmod(\n\n                /*column6_row2*/ mload(0x2560),\n\n                sub(\n\n                  PRIME,\n\n                  mulmod(\n\n                    /*intermediate_value/cpu/decode/opcode_rc/bit_9*/ mload(0x2ca0),\n\n                    /*column3_row9*/ mload(0x1d00),\n\n                    PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: point - trace_generator^(16 * (trace_length / 16 - 1)).\n\n              // val *= domains[3].\n\n              val := mulmod(val, /*domains[3]*/ mload(0x3600), PRIME)\n\n              // Denominator: point^(trace_length / 16) - 1.\n\n              // val *= denominator_invs[2].\n\n              val := mulmod(val, /*denominator_invs[2]*/ mload(0x39a0), PRIME)\n\n\n\n              // res += val * coefficients[12].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[12]*/ mload(0x6c0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for cpu/update_registers/update_pc/tmp1: column6_row10 - column6_row2 * column6_row12.\n\n              let val := addmod(\n\n                /*column6_row10*/ mload(0x2620),\n\n                sub(\n\n                  PRIME,\n\n                  mulmod(/*column6_row2*/ mload(0x2560), /*column6_row12*/ mload(0x2640), PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: point - trace_generator^(16 * (trace_length / 16 - 1)).\n\n              // val *= domains[3].\n\n              val := mulmod(val, /*domains[3]*/ mload(0x3600), PRIME)\n\n              // Denominator: point^(trace_length / 16) - 1.\n\n              // val *= denominator_invs[2].\n\n              val := mulmod(val, /*denominator_invs[2]*/ mload(0x39a0), PRIME)\n\n\n\n              // res += val * coefficients[13].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[13]*/ mload(0x6e0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for cpu/update_registers/update_pc/pc_cond_negative: (1 - cpu__decode__opcode_rc__bit_9) * column3_row16 + column6_row2 * (column3_row16 - (column3_row0 + column3_row13)) - (cpu__decode__flag_pc_update_regular_0 * npc_reg_0 + cpu__decode__opcode_rc__bit_7 * column6_row12 + cpu__decode__opcode_rc__bit_8 * (column3_row0 + column6_row12)).\n\n              let val := addmod(\n\n                addmod(\n\n                  mulmod(\n\n                    addmod(\n\n                      1,\n\n                      sub(PRIME, /*intermediate_value/cpu/decode/opcode_rc/bit_9*/ mload(0x2ca0)),\n\n                      PRIME),\n\n                    /*column3_row16*/ mload(0x1da0),\n\n                    PRIME),\n\n                  mulmod(\n\n                    /*column6_row2*/ mload(0x2560),\n\n                    addmod(\n\n                      /*column3_row16*/ mload(0x1da0),\n\n                      sub(\n\n                        PRIME,\n\n                        addmod(/*column3_row0*/ mload(0x1c20), /*column3_row13*/ mload(0x1d80), PRIME)),\n\n                      PRIME),\n\n                    PRIME),\n\n                  PRIME),\n\n                sub(\n\n                  PRIME,\n\n                  addmod(\n\n                    addmod(\n\n                      mulmod(\n\n                        /*intermediate_value/cpu/decode/flag_pc_update_regular_0*/ mload(0x2d20),\n\n                        /*intermediate_value/npc_reg_0*/ mload(0x2dc0),\n\n                        PRIME),\n\n                      mulmod(\n\n                        /*intermediate_value/cpu/decode/opcode_rc/bit_7*/ mload(0x2ce0),\n\n                        /*column6_row12*/ mload(0x2640),\n\n                        PRIME),\n\n                      PRIME),\n\n                    mulmod(\n\n                      /*intermediate_value/cpu/decode/opcode_rc/bit_8*/ mload(0x2d00),\n\n                      addmod(/*column3_row0*/ mload(0x1c20), /*column6_row12*/ mload(0x2640), PRIME),\n\n                      PRIME),\n\n                    PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: point - trace_generator^(16 * (trace_length / 16 - 1)).\n\n              // val *= domains[3].\n\n              val := mulmod(val, /*domains[3]*/ mload(0x3600), PRIME)\n\n              // Denominator: point^(trace_length / 16) - 1.\n\n              // val *= denominator_invs[2].\n\n              val := mulmod(val, /*denominator_invs[2]*/ mload(0x39a0), PRIME)\n\n\n\n              // res += val * coefficients[14].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[14]*/ mload(0x700), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for cpu/update_registers/update_pc/pc_cond_positive: (column6_row10 - cpu__decode__opcode_rc__bit_9) * (column3_row16 - npc_reg_0).\n\n              let val := mulmod(\n\n                addmod(\n\n                  /*column6_row10*/ mload(0x2620),\n\n                  sub(PRIME, /*intermediate_value/cpu/decode/opcode_rc/bit_9*/ mload(0x2ca0)),\n\n                  PRIME),\n\n                addmod(\n\n                  /*column3_row16*/ mload(0x1da0),\n\n                  sub(PRIME, /*intermediate_value/npc_reg_0*/ mload(0x2dc0)),\n\n                  PRIME),\n\n                PRIME)\n\n\n\n              // Numerator: point - trace_generator^(16 * (trace_length / 16 - 1)).\n\n              // val *= domains[3].\n\n              val := mulmod(val, /*domains[3]*/ mload(0x3600), PRIME)\n\n              // Denominator: point^(trace_length / 16) - 1.\n\n              // val *= denominator_invs[2].\n\n              val := mulmod(val, /*denominator_invs[2]*/ mload(0x39a0), PRIME)\n\n\n\n              // res += val * coefficients[15].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[15]*/ mload(0x720), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for cpu/update_registers/update_ap/ap_update: column6_row16 - (column6_row0 + cpu__decode__opcode_rc__bit_10 * column6_row12 + cpu__decode__opcode_rc__bit_11 + cpu__decode__opcode_rc__bit_12 * 2).\n\n              let val := addmod(\n\n                /*column6_row16*/ mload(0x26a0),\n\n                sub(\n\n                  PRIME,\n\n                  addmod(\n\n                    addmod(\n\n                      addmod(\n\n                        /*column6_row0*/ mload(0x2520),\n\n                        mulmod(\n\n                          /*intermediate_value/cpu/decode/opcode_rc/bit_10*/ mload(0x2de0),\n\n                          /*column6_row12*/ mload(0x2640),\n\n                          PRIME),\n\n                        PRIME),\n\n                      /*intermediate_value/cpu/decode/opcode_rc/bit_11*/ mload(0x2e00),\n\n                      PRIME),\n\n                    mulmod(/*intermediate_value/cpu/decode/opcode_rc/bit_12*/ mload(0x2d40), 2, PRIME),\n\n                    PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: point - trace_generator^(16 * (trace_length / 16 - 1)).\n\n              // val *= domains[3].\n\n              val := mulmod(val, /*domains[3]*/ mload(0x3600), PRIME)\n\n              // Denominator: point^(trace_length / 16) - 1.\n\n              // val *= denominator_invs[2].\n\n              val := mulmod(val, /*denominator_invs[2]*/ mload(0x39a0), PRIME)\n\n\n\n              // res += val * coefficients[16].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[16]*/ mload(0x740), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for cpu/update_registers/update_fp/fp_update: column6_row24 - (cpu__decode__fp_update_regular_0 * column6_row8 + cpu__decode__opcode_rc__bit_13 * column3_row9 + cpu__decode__opcode_rc__bit_12 * (column6_row0 + 2)).\n\n              let val := addmod(\n\n                /*column6_row24*/ mload(0x2720),\n\n                sub(\n\n                  PRIME,\n\n                  addmod(\n\n                    addmod(\n\n                      mulmod(\n\n                        /*intermediate_value/cpu/decode/fp_update_regular_0*/ mload(0x2d80),\n\n                        /*column6_row8*/ mload(0x25e0),\n\n                        PRIME),\n\n                      mulmod(\n\n                        /*intermediate_value/cpu/decode/opcode_rc/bit_13*/ mload(0x2d60),\n\n                        /*column3_row9*/ mload(0x1d00),\n\n                        PRIME),\n\n                      PRIME),\n\n                    mulmod(\n\n                      /*intermediate_value/cpu/decode/opcode_rc/bit_12*/ mload(0x2d40),\n\n                      addmod(/*column6_row0*/ mload(0x2520), 2, PRIME),\n\n                      PRIME),\n\n                    PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: point - trace_generator^(16 * (trace_length / 16 - 1)).\n\n              // val *= domains[3].\n\n              val := mulmod(val, /*domains[3]*/ mload(0x3600), PRIME)\n\n              // Denominator: point^(trace_length / 16) - 1.\n\n              // val *= denominator_invs[2].\n\n              val := mulmod(val, /*denominator_invs[2]*/ mload(0x39a0), PRIME)\n\n\n\n              // res += val * coefficients[17].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[17]*/ mload(0x760), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for cpu/opcodes/call/push_fp: cpu__decode__opcode_rc__bit_12 * (column3_row9 - column6_row8).\n\n              let val := mulmod(\n\n                /*intermediate_value/cpu/decode/opcode_rc/bit_12*/ mload(0x2d40),\n\n                addmod(/*column3_row9*/ mload(0x1d00), sub(PRIME, /*column6_row8*/ mload(0x25e0)), PRIME),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 16) - 1.\n\n              // val *= denominator_invs[2].\n\n              val := mulmod(val, /*denominator_invs[2]*/ mload(0x39a0), PRIME)\n\n\n\n              // res += val * coefficients[18].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[18]*/ mload(0x780), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for cpu/opcodes/call/push_pc: cpu__decode__opcode_rc__bit_12 * (column3_row5 - (column3_row0 + cpu__decode__opcode_rc__bit_2 + 1)).\n\n              let val := mulmod(\n\n                /*intermediate_value/cpu/decode/opcode_rc/bit_12*/ mload(0x2d40),\n\n                addmod(\n\n                  /*column3_row5*/ mload(0x1cc0),\n\n                  sub(\n\n                    PRIME,\n\n                    addmod(\n\n                      addmod(\n\n                        /*column3_row0*/ mload(0x1c20),\n\n                        /*intermediate_value/cpu/decode/opcode_rc/bit_2*/ mload(0x2be0),\n\n                        PRIME),\n\n                      1,\n\n                      PRIME)),\n\n                  PRIME),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 16) - 1.\n\n              // val *= denominator_invs[2].\n\n              val := mulmod(val, /*denominator_invs[2]*/ mload(0x39a0), PRIME)\n\n\n\n              // res += val * coefficients[19].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[19]*/ mload(0x7a0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for cpu/opcodes/call/off0: cpu__decode__opcode_rc__bit_12 * (column5_row0 - half_offset_size).\n\n              let val := mulmod(\n\n                /*intermediate_value/cpu/decode/opcode_rc/bit_12*/ mload(0x2d40),\n\n                addmod(/*column5_row0*/ mload(0x2100), sub(PRIME, /*half_offset_size*/ mload(0xc0)), PRIME),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 16) - 1.\n\n              // val *= denominator_invs[2].\n\n              val := mulmod(val, /*denominator_invs[2]*/ mload(0x39a0), PRIME)\n\n\n\n              // res += val * coefficients[20].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[20]*/ mload(0x7c0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for cpu/opcodes/call/off1: cpu__decode__opcode_rc__bit_12 * (column5_row8 - (half_offset_size + 1)).\n\n              let val := mulmod(\n\n                /*intermediate_value/cpu/decode/opcode_rc/bit_12*/ mload(0x2d40),\n\n                addmod(\n\n                  /*column5_row8*/ mload(0x2200),\n\n                  sub(PRIME, addmod(/*half_offset_size*/ mload(0xc0), 1, PRIME)),\n\n                  PRIME),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 16) - 1.\n\n              // val *= denominator_invs[2].\n\n              val := mulmod(val, /*denominator_invs[2]*/ mload(0x39a0), PRIME)\n\n\n\n              // res += val * coefficients[21].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[21]*/ mload(0x7e0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for cpu/opcodes/call/flags: cpu__decode__opcode_rc__bit_12 * (cpu__decode__opcode_rc__bit_12 + cpu__decode__opcode_rc__bit_12 + 1 + 1 - (cpu__decode__opcode_rc__bit_0 + cpu__decode__opcode_rc__bit_1 + 4)).\n\n              let val := mulmod(\n\n                /*intermediate_value/cpu/decode/opcode_rc/bit_12*/ mload(0x2d40),\n\n                addmod(\n\n                  addmod(\n\n                    addmod(\n\n                      addmod(\n\n                        /*intermediate_value/cpu/decode/opcode_rc/bit_12*/ mload(0x2d40),\n\n                        /*intermediate_value/cpu/decode/opcode_rc/bit_12*/ mload(0x2d40),\n\n                        PRIME),\n\n                      1,\n\n                      PRIME),\n\n                    1,\n\n                    PRIME),\n\n                  sub(\n\n                    PRIME,\n\n                    addmod(\n\n                      addmod(\n\n                        /*intermediate_value/cpu/decode/opcode_rc/bit_0*/ mload(0x2bc0),\n\n                        /*intermediate_value/cpu/decode/opcode_rc/bit_1*/ mload(0x2da0),\n\n                        PRIME),\n\n                      4,\n\n                      PRIME)),\n\n                  PRIME),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 16) - 1.\n\n              // val *= denominator_invs[2].\n\n              val := mulmod(val, /*denominator_invs[2]*/ mload(0x39a0), PRIME)\n\n\n\n              // res += val * coefficients[22].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[22]*/ mload(0x800), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for cpu/opcodes/ret/off0: cpu__decode__opcode_rc__bit_13 * (column5_row0 + 2 - half_offset_size).\n\n              let val := mulmod(\n\n                /*intermediate_value/cpu/decode/opcode_rc/bit_13*/ mload(0x2d60),\n\n                addmod(\n\n                  addmod(/*column5_row0*/ mload(0x2100), 2, PRIME),\n\n                  sub(PRIME, /*half_offset_size*/ mload(0xc0)),\n\n                  PRIME),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 16) - 1.\n\n              // val *= denominator_invs[2].\n\n              val := mulmod(val, /*denominator_invs[2]*/ mload(0x39a0), PRIME)\n\n\n\n              // res += val * coefficients[23].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[23]*/ mload(0x820), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for cpu/opcodes/ret/off2: cpu__decode__opcode_rc__bit_13 * (column5_row4 + 1 - half_offset_size).\n\n              let val := mulmod(\n\n                /*intermediate_value/cpu/decode/opcode_rc/bit_13*/ mload(0x2d60),\n\n                addmod(\n\n                  addmod(/*column5_row4*/ mload(0x2180), 1, PRIME),\n\n                  sub(PRIME, /*half_offset_size*/ mload(0xc0)),\n\n                  PRIME),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 16) - 1.\n\n              // val *= denominator_invs[2].\n\n              val := mulmod(val, /*denominator_invs[2]*/ mload(0x39a0), PRIME)\n\n\n\n              // res += val * coefficients[24].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[24]*/ mload(0x840), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for cpu/opcodes/ret/flags: cpu__decode__opcode_rc__bit_13 * (cpu__decode__opcode_rc__bit_7 + cpu__decode__opcode_rc__bit_0 + cpu__decode__opcode_rc__bit_3 + cpu__decode__flag_res_op1_0 - 4).\n\n              let val := mulmod(\n\n                /*intermediate_value/cpu/decode/opcode_rc/bit_13*/ mload(0x2d60),\n\n                addmod(\n\n                  addmod(\n\n                    addmod(\n\n                      addmod(\n\n                        /*intermediate_value/cpu/decode/opcode_rc/bit_7*/ mload(0x2ce0),\n\n                        /*intermediate_value/cpu/decode/opcode_rc/bit_0*/ mload(0x2bc0),\n\n                        PRIME),\n\n                      /*intermediate_value/cpu/decode/opcode_rc/bit_3*/ mload(0x2c20),\n\n                      PRIME),\n\n                    /*intermediate_value/cpu/decode/flag_res_op1_0*/ mload(0x2cc0),\n\n                    PRIME),\n\n                  sub(PRIME, 4),\n\n                  PRIME),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 16) - 1.\n\n              // val *= denominator_invs[2].\n\n              val := mulmod(val, /*denominator_invs[2]*/ mload(0x39a0), PRIME)\n\n\n\n              // res += val * coefficients[25].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[25]*/ mload(0x860), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for cpu/opcodes/assert_eq/assert_eq: cpu__decode__opcode_rc__bit_14 * (column3_row9 - column6_row12).\n\n              let val := mulmod(\n\n                /*intermediate_value/cpu/decode/opcode_rc/bit_14*/ mload(0x2e20),\n\n                addmod(/*column3_row9*/ mload(0x1d00), sub(PRIME, /*column6_row12*/ mload(0x2640)), PRIME),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 16) - 1.\n\n              // val *= denominator_invs[2].\n\n              val := mulmod(val, /*denominator_invs[2]*/ mload(0x39a0), PRIME)\n\n\n\n              // res += val * coefficients[26].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[26]*/ mload(0x880), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for initial_ap: column6_row0 - initial_ap.\n\n              let val := addmod(/*column6_row0*/ mload(0x2520), sub(PRIME, /*initial_ap*/ mload(0xe0)), PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point - 1.\n\n              // val *= denominator_invs[4].\n\n              val := mulmod(val, /*denominator_invs[4]*/ mload(0x39e0), PRIME)\n\n\n\n              // res += val * coefficients[27].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[27]*/ mload(0x8a0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for initial_fp: column6_row8 - initial_ap.\n\n              let val := addmod(/*column6_row8*/ mload(0x25e0), sub(PRIME, /*initial_ap*/ mload(0xe0)), PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point - 1.\n\n              // val *= denominator_invs[4].\n\n              val := mulmod(val, /*denominator_invs[4]*/ mload(0x39e0), PRIME)\n\n\n\n              // res += val * coefficients[28].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[28]*/ mload(0x8c0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for initial_pc: column3_row0 - initial_pc.\n\n              let val := addmod(/*column3_row0*/ mload(0x1c20), sub(PRIME, /*initial_pc*/ mload(0x100)), PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point - 1.\n\n              // val *= denominator_invs[4].\n\n              val := mulmod(val, /*denominator_invs[4]*/ mload(0x39e0), PRIME)\n\n\n\n              // res += val * coefficients[29].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[29]*/ mload(0x8e0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for final_ap: column6_row0 - final_ap.\n\n              let val := addmod(/*column6_row0*/ mload(0x2520), sub(PRIME, /*final_ap*/ mload(0x120)), PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point - trace_generator^(16 * (trace_length / 16 - 1)).\n\n              // val *= denominator_invs[3].\n\n              val := mulmod(val, /*denominator_invs[3]*/ mload(0x39c0), PRIME)\n\n\n\n              // res += val * coefficients[30].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[30]*/ mload(0x900), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for final_fp: column6_row8 - initial_ap.\n\n              let val := addmod(/*column6_row8*/ mload(0x25e0), sub(PRIME, /*initial_ap*/ mload(0xe0)), PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point - trace_generator^(16 * (trace_length / 16 - 1)).\n\n              // val *= denominator_invs[3].\n\n              val := mulmod(val, /*denominator_invs[3]*/ mload(0x39c0), PRIME)\n\n\n\n              // res += val * coefficients[31].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[31]*/ mload(0x920), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for final_pc: column3_row0 - final_pc.\n\n              let val := addmod(/*column3_row0*/ mload(0x1c20), sub(PRIME, /*final_pc*/ mload(0x140)), PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point - trace_generator^(16 * (trace_length / 16 - 1)).\n\n              // val *= denominator_invs[3].\n\n              val := mulmod(val, /*denominator_invs[3]*/ mload(0x39c0), PRIME)\n\n\n\n              // res += val * coefficients[32].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[32]*/ mload(0x940), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for memory/multi_column_perm/perm/init0: (memory/multi_column_perm/perm/interaction_elm - (column4_row0 + memory/multi_column_perm/hash_interaction_elm0 * column4_row1)) * column9_inter1_row0 + column3_row0 + memory/multi_column_perm/hash_interaction_elm0 * column3_row1 - memory/multi_column_perm/perm/interaction_elm.\n\n              let val := addmod(\n\n                addmod(\n\n                  addmod(\n\n                    mulmod(\n\n                      addmod(\n\n                        /*memory/multi_column_perm/perm/interaction_elm*/ mload(0x160),\n\n                        sub(\n\n                          PRIME,\n\n                          addmod(\n\n                            /*column4_row0*/ mload(0x2080),\n\n                            mulmod(\n\n                              /*memory/multi_column_perm/hash_interaction_elm0*/ mload(0x180),\n\n                              /*column4_row1*/ mload(0x20a0),\n\n                              PRIME),\n\n                            PRIME)),\n\n                        PRIME),\n\n                      /*column9_inter1_row0*/ mload(0x2b40),\n\n                      PRIME),\n\n                    /*column3_row0*/ mload(0x1c20),\n\n                    PRIME),\n\n                  mulmod(\n\n                    /*memory/multi_column_perm/hash_interaction_elm0*/ mload(0x180),\n\n                    /*column3_row1*/ mload(0x1c40),\n\n                    PRIME),\n\n                  PRIME),\n\n                sub(PRIME, /*memory/multi_column_perm/perm/interaction_elm*/ mload(0x160)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point - 1.\n\n              // val *= denominator_invs[4].\n\n              val := mulmod(val, /*denominator_invs[4]*/ mload(0x39e0), PRIME)\n\n\n\n              // res += val * coefficients[33].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[33]*/ mload(0x960), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for memory/multi_column_perm/perm/step0: (memory/multi_column_perm/perm/interaction_elm - (column4_row2 + memory/multi_column_perm/hash_interaction_elm0 * column4_row3)) * column9_inter1_row2 - (memory/multi_column_perm/perm/interaction_elm - (column3_row2 + memory/multi_column_perm/hash_interaction_elm0 * column3_row3)) * column9_inter1_row0.\n\n              let val := addmod(\n\n                mulmod(\n\n                  addmod(\n\n                    /*memory/multi_column_perm/perm/interaction_elm*/ mload(0x160),\n\n                    sub(\n\n                      PRIME,\n\n                      addmod(\n\n                        /*column4_row2*/ mload(0x20c0),\n\n                        mulmod(\n\n                          /*memory/multi_column_perm/hash_interaction_elm0*/ mload(0x180),\n\n                          /*column4_row3*/ mload(0x20e0),\n\n                          PRIME),\n\n                        PRIME)),\n\n                    PRIME),\n\n                  /*column9_inter1_row2*/ mload(0x2b80),\n\n                  PRIME),\n\n                sub(\n\n                  PRIME,\n\n                  mulmod(\n\n                    addmod(\n\n                      /*memory/multi_column_perm/perm/interaction_elm*/ mload(0x160),\n\n                      sub(\n\n                        PRIME,\n\n                        addmod(\n\n                          /*column3_row2*/ mload(0x1c60),\n\n                          mulmod(\n\n                            /*memory/multi_column_perm/hash_interaction_elm0*/ mload(0x180),\n\n                            /*column3_row3*/ mload(0x1c80),\n\n                            PRIME),\n\n                          PRIME)),\n\n                      PRIME),\n\n                    /*column9_inter1_row0*/ mload(0x2b40),\n\n                    PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: point - trace_generator^(2 * (trace_length / 2 - 1)).\n\n              // val *= domains[6].\n\n              val := mulmod(val, /*domains[6]*/ mload(0x3660), PRIME)\n\n              // Denominator: point^(trace_length / 2) - 1.\n\n              // val *= denominator_invs[5].\n\n              val := mulmod(val, /*denominator_invs[5]*/ mload(0x3a00), PRIME)\n\n\n\n              // res += val * coefficients[34].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[34]*/ mload(0x980), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for memory/multi_column_perm/perm/last: column9_inter1_row0 - memory/multi_column_perm/perm/public_memory_prod.\n\n              let val := addmod(\n\n                /*column9_inter1_row0*/ mload(0x2b40),\n\n                sub(PRIME, /*memory/multi_column_perm/perm/public_memory_prod*/ mload(0x1a0)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point - trace_generator^(2 * (trace_length / 2 - 1)).\n\n              // val *= denominator_invs[6].\n\n              val := mulmod(val, /*denominator_invs[6]*/ mload(0x3a20), PRIME)\n\n\n\n              // res += val * coefficients[35].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[35]*/ mload(0x9a0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for memory/diff_is_bit: memory__address_diff_0 * memory__address_diff_0 - memory__address_diff_0.\n\n              let val := addmod(\n\n                mulmod(\n\n                  /*intermediate_value/memory/address_diff_0*/ mload(0x2e40),\n\n                  /*intermediate_value/memory/address_diff_0*/ mload(0x2e40),\n\n                  PRIME),\n\n                sub(PRIME, /*intermediate_value/memory/address_diff_0*/ mload(0x2e40)),\n\n                PRIME)\n\n\n\n              // Numerator: point - trace_generator^(2 * (trace_length / 2 - 1)).\n\n              // val *= domains[6].\n\n              val := mulmod(val, /*domains[6]*/ mload(0x3660), PRIME)\n\n              // Denominator: point^(trace_length / 2) - 1.\n\n              // val *= denominator_invs[5].\n\n              val := mulmod(val, /*denominator_invs[5]*/ mload(0x3a00), PRIME)\n\n\n\n              // res += val * coefficients[36].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[36]*/ mload(0x9c0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for memory/is_func: (memory__address_diff_0 - 1) * (column4_row1 - column4_row3).\n\n              let val := mulmod(\n\n                addmod(/*intermediate_value/memory/address_diff_0*/ mload(0x2e40), sub(PRIME, 1), PRIME),\n\n                addmod(/*column4_row1*/ mload(0x20a0), sub(PRIME, /*column4_row3*/ mload(0x20e0)), PRIME),\n\n                PRIME)\n\n\n\n              // Numerator: point - trace_generator^(2 * (trace_length / 2 - 1)).\n\n              // val *= domains[6].\n\n              val := mulmod(val, /*domains[6]*/ mload(0x3660), PRIME)\n\n              // Denominator: point^(trace_length / 2) - 1.\n\n              // val *= denominator_invs[5].\n\n              val := mulmod(val, /*denominator_invs[5]*/ mload(0x3a00), PRIME)\n\n\n\n              // res += val * coefficients[37].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[37]*/ mload(0x9e0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for memory/initial_addr: column4_row0 - 1.\n\n              let val := addmod(/*column4_row0*/ mload(0x2080), sub(PRIME, 1), PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point - 1.\n\n              // val *= denominator_invs[4].\n\n              val := mulmod(val, /*denominator_invs[4]*/ mload(0x39e0), PRIME)\n\n\n\n              // res += val * coefficients[38].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[38]*/ mload(0xa00), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for public_memory_addr_zero: column3_row2.\n\n              let val := /*column3_row2*/ mload(0x1c60)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 16) - 1.\n\n              // val *= denominator_invs[2].\n\n              val := mulmod(val, /*denominator_invs[2]*/ mload(0x39a0), PRIME)\n\n\n\n              // res += val * coefficients[39].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[39]*/ mload(0xa20), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for public_memory_value_zero: column3_row3.\n\n              let val := /*column3_row3*/ mload(0x1c80)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 16) - 1.\n\n              // val *= denominator_invs[2].\n\n              val := mulmod(val, /*denominator_invs[2]*/ mload(0x39a0), PRIME)\n\n\n\n              // res += val * coefficients[40].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[40]*/ mload(0xa40), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for rc16/perm/init0: (rc16/perm/interaction_elm - column5_row2) * column9_inter1_row1 + column5_row0 - rc16/perm/interaction_elm.\n\n              let val := addmod(\n\n                addmod(\n\n                  mulmod(\n\n                    addmod(\n\n                      /*rc16/perm/interaction_elm*/ mload(0x1c0),\n\n                      sub(PRIME, /*column5_row2*/ mload(0x2140)),\n\n                      PRIME),\n\n                    /*column9_inter1_row1*/ mload(0x2b60),\n\n                    PRIME),\n\n                  /*column5_row0*/ mload(0x2100),\n\n                  PRIME),\n\n                sub(PRIME, /*rc16/perm/interaction_elm*/ mload(0x1c0)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point - 1.\n\n              // val *= denominator_invs[4].\n\n              val := mulmod(val, /*denominator_invs[4]*/ mload(0x39e0), PRIME)\n\n\n\n              // res += val * coefficients[41].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[41]*/ mload(0xa60), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for rc16/perm/step0: (rc16/perm/interaction_elm - column5_row6) * column9_inter1_row5 - (rc16/perm/interaction_elm - column5_row4) * column9_inter1_row1.\n\n              let val := addmod(\n\n                mulmod(\n\n                  addmod(\n\n                    /*rc16/perm/interaction_elm*/ mload(0x1c0),\n\n                    sub(PRIME, /*column5_row6*/ mload(0x21c0)),\n\n                    PRIME),\n\n                  /*column9_inter1_row5*/ mload(0x2ba0),\n\n                  PRIME),\n\n                sub(\n\n                  PRIME,\n\n                  mulmod(\n\n                    addmod(\n\n                      /*rc16/perm/interaction_elm*/ mload(0x1c0),\n\n                      sub(PRIME, /*column5_row4*/ mload(0x2180)),\n\n                      PRIME),\n\n                    /*column9_inter1_row1*/ mload(0x2b60),\n\n                    PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: point - trace_generator^(4 * (trace_length / 4 - 1)).\n\n              // val *= domains[8].\n\n              val := mulmod(val, /*domains[8]*/ mload(0x36a0), PRIME)\n\n              // Denominator: point^(trace_length / 4) - 1.\n\n              // val *= denominator_invs[7].\n\n              val := mulmod(val, /*denominator_invs[7]*/ mload(0x3a40), PRIME)\n\n\n\n              // res += val * coefficients[42].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[42]*/ mload(0xa80), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for rc16/perm/last: column9_inter1_row1 - rc16/perm/public_memory_prod.\n\n              let val := addmod(\n\n                /*column9_inter1_row1*/ mload(0x2b60),\n\n                sub(PRIME, /*rc16/perm/public_memory_prod*/ mload(0x1e0)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point - trace_generator^(4 * (trace_length / 4 - 1)).\n\n              // val *= denominator_invs[8].\n\n              val := mulmod(val, /*denominator_invs[8]*/ mload(0x3a60), PRIME)\n\n\n\n              // res += val * coefficients[43].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[43]*/ mload(0xaa0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for rc16/diff_is_bit: rc16__diff_0 * rc16__diff_0 - rc16__diff_0.\n\n              let val := addmod(\n\n                mulmod(\n\n                  /*intermediate_value/rc16/diff_0*/ mload(0x2e60),\n\n                  /*intermediate_value/rc16/diff_0*/ mload(0x2e60),\n\n                  PRIME),\n\n                sub(PRIME, /*intermediate_value/rc16/diff_0*/ mload(0x2e60)),\n\n                PRIME)\n\n\n\n              // Numerator: point - trace_generator^(4 * (trace_length / 4 - 1)).\n\n              // val *= domains[8].\n\n              val := mulmod(val, /*domains[8]*/ mload(0x36a0), PRIME)\n\n              // Denominator: point^(trace_length / 4) - 1.\n\n              // val *= denominator_invs[7].\n\n              val := mulmod(val, /*denominator_invs[7]*/ mload(0x3a40), PRIME)\n\n\n\n              // res += val * coefficients[44].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[44]*/ mload(0xac0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for rc16/minimum: column5_row2 - rc_min.\n\n              let val := addmod(/*column5_row2*/ mload(0x2140), sub(PRIME, /*rc_min*/ mload(0x200)), PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point - 1.\n\n              // val *= denominator_invs[4].\n\n              val := mulmod(val, /*denominator_invs[4]*/ mload(0x39e0), PRIME)\n\n\n\n              // res += val * coefficients[45].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[45]*/ mload(0xae0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for rc16/maximum: column5_row2 - rc_max.\n\n              let val := addmod(/*column5_row2*/ mload(0x2140), sub(PRIME, /*rc_max*/ mload(0x220)), PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point - trace_generator^(4 * (trace_length / 4 - 1)).\n\n              // val *= denominator_invs[8].\n\n              val := mulmod(val, /*denominator_invs[8]*/ mload(0x3a60), PRIME)\n\n\n\n              // res += val * coefficients[46].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[46]*/ mload(0xb00), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for diluted_check/permutation/init0: (diluted_check/permutation/interaction_elm - column2_row0) * column8_inter1_row0 + column1_row0 - diluted_check/permutation/interaction_elm.\n\n              let val := addmod(\n\n                addmod(\n\n                  mulmod(\n\n                    addmod(\n\n                      /*diluted_check/permutation/interaction_elm*/ mload(0x240),\n\n                      sub(PRIME, /*column2_row0*/ mload(0x1be0)),\n\n                      PRIME),\n\n                    /*column8_inter1_row0*/ mload(0x2b00),\n\n                    PRIME),\n\n                  /*column1_row0*/ mload(0x1800),\n\n                  PRIME),\n\n                sub(PRIME, /*diluted_check/permutation/interaction_elm*/ mload(0x240)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point - 1.\n\n              // val *= denominator_invs[4].\n\n              val := mulmod(val, /*denominator_invs[4]*/ mload(0x39e0), PRIME)\n\n\n\n              // res += val * coefficients[47].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[47]*/ mload(0xb20), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for diluted_check/permutation/step0: (diluted_check/permutation/interaction_elm - column2_row1) * column8_inter1_row1 - (diluted_check/permutation/interaction_elm - column1_row1) * column8_inter1_row0.\n\n              let val := addmod(\n\n                mulmod(\n\n                  addmod(\n\n                    /*diluted_check/permutation/interaction_elm*/ mload(0x240),\n\n                    sub(PRIME, /*column2_row1*/ mload(0x1c00)),\n\n                    PRIME),\n\n                  /*column8_inter1_row1*/ mload(0x2b20),\n\n                  PRIME),\n\n                sub(\n\n                  PRIME,\n\n                  mulmod(\n\n                    addmod(\n\n                      /*diluted_check/permutation/interaction_elm*/ mload(0x240),\n\n                      sub(PRIME, /*column1_row1*/ mload(0x1820)),\n\n                      PRIME),\n\n                    /*column8_inter1_row0*/ mload(0x2b00),\n\n                    PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: point - trace_generator^(trace_length - 1).\n\n              // val *= domains[9].\n\n              val := mulmod(val, /*domains[9]*/ mload(0x36c0), PRIME)\n\n              // Denominator: point^trace_length - 1.\n\n              // val *= denominator_invs[0].\n\n              val := mulmod(val, /*denominator_invs[0]*/ mload(0x3960), PRIME)\n\n\n\n              // res += val * coefficients[48].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[48]*/ mload(0xb40), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for diluted_check/permutation/last: column8_inter1_row0 - diluted_check/permutation/public_memory_prod.\n\n              let val := addmod(\n\n                /*column8_inter1_row0*/ mload(0x2b00),\n\n                sub(PRIME, /*diluted_check/permutation/public_memory_prod*/ mload(0x260)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point - trace_generator^(trace_length - 1).\n\n              // val *= denominator_invs[9].\n\n              val := mulmod(val, /*denominator_invs[9]*/ mload(0x3a80), PRIME)\n\n\n\n              // res += val * coefficients[49].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[49]*/ mload(0xb60), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for diluted_check/init: column7_inter1_row0 - 1.\n\n              let val := addmod(/*column7_inter1_row0*/ mload(0x2ac0), sub(PRIME, 1), PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point - 1.\n\n              // val *= denominator_invs[4].\n\n              val := mulmod(val, /*denominator_invs[4]*/ mload(0x39e0), PRIME)\n\n\n\n              // res += val * coefficients[50].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[50]*/ mload(0xb80), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for diluted_check/first_element: column2_row0 - diluted_check/first_elm.\n\n              let val := addmod(\n\n                /*column2_row0*/ mload(0x1be0),\n\n                sub(PRIME, /*diluted_check/first_elm*/ mload(0x280)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point - 1.\n\n              // val *= denominator_invs[4].\n\n              val := mulmod(val, /*denominator_invs[4]*/ mload(0x39e0), PRIME)\n\n\n\n              // res += val * coefficients[51].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[51]*/ mload(0xba0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for diluted_check/step: column7_inter1_row1 - (column7_inter1_row0 * (1 + diluted_check/interaction_z * (column2_row1 - column2_row0)) + diluted_check/interaction_alpha * (column2_row1 - column2_row0) * (column2_row1 - column2_row0)).\n\n              let val := addmod(\n\n                /*column7_inter1_row1*/ mload(0x2ae0),\n\n                sub(\n\n                  PRIME,\n\n                  addmod(\n\n                    mulmod(\n\n                      /*column7_inter1_row0*/ mload(0x2ac0),\n\n                      addmod(\n\n                        1,\n\n                        mulmod(\n\n                          /*diluted_check/interaction_z*/ mload(0x2a0),\n\n                          addmod(/*column2_row1*/ mload(0x1c00), sub(PRIME, /*column2_row0*/ mload(0x1be0)), PRIME),\n\n                          PRIME),\n\n                        PRIME),\n\n                      PRIME),\n\n                    mulmod(\n\n                      mulmod(\n\n                        /*diluted_check/interaction_alpha*/ mload(0x2c0),\n\n                        addmod(/*column2_row1*/ mload(0x1c00), sub(PRIME, /*column2_row0*/ mload(0x1be0)), PRIME),\n\n                        PRIME),\n\n                      addmod(/*column2_row1*/ mload(0x1c00), sub(PRIME, /*column2_row0*/ mload(0x1be0)), PRIME),\n\n                      PRIME),\n\n                    PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: point - trace_generator^(trace_length - 1).\n\n              // val *= domains[9].\n\n              val := mulmod(val, /*domains[9]*/ mload(0x36c0), PRIME)\n\n              // Denominator: point^trace_length - 1.\n\n              // val *= denominator_invs[0].\n\n              val := mulmod(val, /*denominator_invs[0]*/ mload(0x3960), PRIME)\n\n\n\n              // res += val * coefficients[52].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[52]*/ mload(0xbc0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for diluted_check/last: column7_inter1_row0 - diluted_check/final_cum_val.\n\n              let val := addmod(\n\n                /*column7_inter1_row0*/ mload(0x2ac0),\n\n                sub(PRIME, /*diluted_check/final_cum_val*/ mload(0x2e0)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point - trace_generator^(trace_length - 1).\n\n              // val *= denominator_invs[9].\n\n              val := mulmod(val, /*denominator_invs[9]*/ mload(0x3a80), PRIME)\n\n\n\n              // res += val * coefficients[53].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[53]*/ mload(0xbe0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for pedersen/hash0/ec_subset_sum/bit_unpacking/last_one_is_zero: column6_row45 * (column5_row3 - (column5_row11 + column5_row11)).\n\n              let val := mulmod(\n\n                /*column6_row45*/ mload(0x27e0),\n\n                addmod(\n\n                  /*column5_row3*/ mload(0x2160),\n\n                  sub(\n\n                    PRIME,\n\n                    addmod(/*column5_row11*/ mload(0x2240), /*column5_row11*/ mload(0x2240), PRIME)),\n\n                  PRIME),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 2048) - 1.\n\n              // val *= denominator_invs[10].\n\n              val := mulmod(val, /*denominator_invs[10]*/ mload(0x3aa0), PRIME)\n\n\n\n              // res += val * coefficients[54].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[54]*/ mload(0xc00), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for pedersen/hash0/ec_subset_sum/bit_unpacking/zeroes_between_ones0: column6_row45 * (column5_row11 - 3138550867693340381917894711603833208051177722232017256448 * column5_row1539).\n\n              let val := mulmod(\n\n                /*column6_row45*/ mload(0x27e0),\n\n                addmod(\n\n                  /*column5_row11*/ mload(0x2240),\n\n                  sub(\n\n                    PRIME,\n\n                    mulmod(\n\n                      3138550867693340381917894711603833208051177722232017256448,\n\n                      /*column5_row1539*/ mload(0x2380),\n\n                      PRIME)),\n\n                  PRIME),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 2048) - 1.\n\n              // val *= denominator_invs[10].\n\n              val := mulmod(val, /*denominator_invs[10]*/ mload(0x3aa0), PRIME)\n\n\n\n              // res += val * coefficients[55].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[55]*/ mload(0xc20), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for pedersen/hash0/ec_subset_sum/bit_unpacking/cumulative_bit192: column6_row45 - column5_row2047 * (column5_row1539 - (column5_row1547 + column5_row1547)).\n\n              let val := addmod(\n\n                /*column6_row45*/ mload(0x27e0),\n\n                sub(\n\n                  PRIME,\n\n                  mulmod(\n\n                    /*column5_row2047*/ mload(0x2480),\n\n                    addmod(\n\n                      /*column5_row1539*/ mload(0x2380),\n\n                      sub(\n\n                        PRIME,\n\n                        addmod(/*column5_row1547*/ mload(0x23a0), /*column5_row1547*/ mload(0x23a0), PRIME)),\n\n                      PRIME),\n\n                    PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 2048) - 1.\n\n              // val *= denominator_invs[10].\n\n              val := mulmod(val, /*denominator_invs[10]*/ mload(0x3aa0), PRIME)\n\n\n\n              // res += val * coefficients[56].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[56]*/ mload(0xc40), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for pedersen/hash0/ec_subset_sum/bit_unpacking/zeroes_between_ones192: column5_row2047 * (column5_row1547 - 8 * column5_row1571).\n\n              let val := mulmod(\n\n                /*column5_row2047*/ mload(0x2480),\n\n                addmod(\n\n                  /*column5_row1547*/ mload(0x23a0),\n\n                  sub(PRIME, mulmod(8, /*column5_row1571*/ mload(0x23c0), PRIME)),\n\n                  PRIME),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 2048) - 1.\n\n              // val *= denominator_invs[10].\n\n              val := mulmod(val, /*denominator_invs[10]*/ mload(0x3aa0), PRIME)\n\n\n\n              // res += val * coefficients[57].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[57]*/ mload(0xc60), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for pedersen/hash0/ec_subset_sum/bit_unpacking/cumulative_bit196: column5_row2047 - (column5_row2011 - (column5_row2019 + column5_row2019)) * (column5_row1571 - (column5_row1579 + column5_row1579)).\n\n              let val := addmod(\n\n                /*column5_row2047*/ mload(0x2480),\n\n                sub(\n\n                  PRIME,\n\n                  mulmod(\n\n                    addmod(\n\n                      /*column5_row2011*/ mload(0x2400),\n\n                      sub(\n\n                        PRIME,\n\n                        addmod(/*column5_row2019*/ mload(0x2420), /*column5_row2019*/ mload(0x2420), PRIME)),\n\n                      PRIME),\n\n                    addmod(\n\n                      /*column5_row1571*/ mload(0x23c0),\n\n                      sub(\n\n                        PRIME,\n\n                        addmod(/*column5_row1579*/ mload(0x23e0), /*column5_row1579*/ mload(0x23e0), PRIME)),\n\n                      PRIME),\n\n                    PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 2048) - 1.\n\n              // val *= denominator_invs[10].\n\n              val := mulmod(val, /*denominator_invs[10]*/ mload(0x3aa0), PRIME)\n\n\n\n              // res += val * coefficients[58].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[58]*/ mload(0xc80), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for pedersen/hash0/ec_subset_sum/bit_unpacking/zeroes_between_ones196: (column5_row2011 - (column5_row2019 + column5_row2019)) * (column5_row1579 - 18014398509481984 * column5_row2011).\n\n              let val := mulmod(\n\n                addmod(\n\n                  /*column5_row2011*/ mload(0x2400),\n\n                  sub(\n\n                    PRIME,\n\n                    addmod(/*column5_row2019*/ mload(0x2420), /*column5_row2019*/ mload(0x2420), PRIME)),\n\n                  PRIME),\n\n                addmod(\n\n                  /*column5_row1579*/ mload(0x23e0),\n\n                  sub(PRIME, mulmod(18014398509481984, /*column5_row2011*/ mload(0x2400), PRIME)),\n\n                  PRIME),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 2048) - 1.\n\n              // val *= denominator_invs[10].\n\n              val := mulmod(val, /*denominator_invs[10]*/ mload(0x3aa0), PRIME)\n\n\n\n              // res += val * coefficients[59].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[59]*/ mload(0xca0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for pedersen/hash0/ec_subset_sum/booleanity_test: pedersen__hash0__ec_subset_sum__bit_0 * (pedersen__hash0__ec_subset_sum__bit_0 - 1).\n\n              let val := mulmod(\n\n                /*intermediate_value/pedersen/hash0/ec_subset_sum/bit_0*/ mload(0x2e80),\n\n                addmod(\n\n                  /*intermediate_value/pedersen/hash0/ec_subset_sum/bit_0*/ mload(0x2e80),\n\n                  sub(PRIME, 1),\n\n                  PRIME),\n\n                PRIME)\n\n\n\n              // Numerator: point^(trace_length / 2048) - trace_generator^(255 * trace_length / 256).\n\n              // val *= domains[12].\n\n              val := mulmod(val, /*domains[12]*/ mload(0x3720), PRIME)\n\n              // Denominator: point^(trace_length / 8) - 1.\n\n              // val *= denominator_invs[11].\n\n              val := mulmod(val, /*denominator_invs[11]*/ mload(0x3ac0), PRIME)\n\n\n\n              // res += val * coefficients[60].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[60]*/ mload(0xcc0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for pedersen/hash0/ec_subset_sum/bit_extraction_end: column5_row3.\n\n              let val := /*column5_row3*/ mload(0x2160)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 2048) - trace_generator^(63 * trace_length / 64).\n\n              // val *= denominator_invs[13].\n\n              val := mulmod(val, /*denominator_invs[13]*/ mload(0x3b00), PRIME)\n\n\n\n              // res += val * coefficients[61].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[61]*/ mload(0xce0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for pedersen/hash0/ec_subset_sum/zeros_tail: column5_row3.\n\n              let val := /*column5_row3*/ mload(0x2160)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 2048) - trace_generator^(255 * trace_length / 256).\n\n              // val *= denominator_invs[12].\n\n              val := mulmod(val, /*denominator_invs[12]*/ mload(0x3ae0), PRIME)\n\n\n\n              // res += val * coefficients[62].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[62]*/ mload(0xd00), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for pedersen/hash0/ec_subset_sum/add_points/slope: pedersen__hash0__ec_subset_sum__bit_0 * (column5_row5 - pedersen__points__y) - column5_row7 * (column5_row1 - pedersen__points__x).\n\n              let val := addmod(\n\n                mulmod(\n\n                  /*intermediate_value/pedersen/hash0/ec_subset_sum/bit_0*/ mload(0x2e80),\n\n                  addmod(\n\n                    /*column5_row5*/ mload(0x21a0),\n\n                    sub(PRIME, /*periodic_column/pedersen/points/y*/ mload(0x20)),\n\n                    PRIME),\n\n                  PRIME),\n\n                sub(\n\n                  PRIME,\n\n                  mulmod(\n\n                    /*column5_row7*/ mload(0x21e0),\n\n                    addmod(\n\n                      /*column5_row1*/ mload(0x2120),\n\n                      sub(PRIME, /*periodic_column/pedersen/points/x*/ mload(0x0)),\n\n                      PRIME),\n\n                    PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: point^(trace_length / 2048) - trace_generator^(255 * trace_length / 256).\n\n              // val *= domains[12].\n\n              val := mulmod(val, /*domains[12]*/ mload(0x3720), PRIME)\n\n              // Denominator: point^(trace_length / 8) - 1.\n\n              // val *= denominator_invs[11].\n\n              val := mulmod(val, /*denominator_invs[11]*/ mload(0x3ac0), PRIME)\n\n\n\n              // res += val * coefficients[63].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[63]*/ mload(0xd20), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for pedersen/hash0/ec_subset_sum/add_points/x: column5_row7 * column5_row7 - pedersen__hash0__ec_subset_sum__bit_0 * (column5_row1 + pedersen__points__x + column5_row9).\n\n              let val := addmod(\n\n                mulmod(/*column5_row7*/ mload(0x21e0), /*column5_row7*/ mload(0x21e0), PRIME),\n\n                sub(\n\n                  PRIME,\n\n                  mulmod(\n\n                    /*intermediate_value/pedersen/hash0/ec_subset_sum/bit_0*/ mload(0x2e80),\n\n                    addmod(\n\n                      addmod(\n\n                        /*column5_row1*/ mload(0x2120),\n\n                        /*periodic_column/pedersen/points/x*/ mload(0x0),\n\n                        PRIME),\n\n                      /*column5_row9*/ mload(0x2220),\n\n                      PRIME),\n\n                    PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: point^(trace_length / 2048) - trace_generator^(255 * trace_length / 256).\n\n              // val *= domains[12].\n\n              val := mulmod(val, /*domains[12]*/ mload(0x3720), PRIME)\n\n              // Denominator: point^(trace_length / 8) - 1.\n\n              // val *= denominator_invs[11].\n\n              val := mulmod(val, /*denominator_invs[11]*/ mload(0x3ac0), PRIME)\n\n\n\n              // res += val * coefficients[64].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[64]*/ mload(0xd40), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for pedersen/hash0/ec_subset_sum/add_points/y: pedersen__hash0__ec_subset_sum__bit_0 * (column5_row5 + column5_row13) - column5_row7 * (column5_row1 - column5_row9).\n\n              let val := addmod(\n\n                mulmod(\n\n                  /*intermediate_value/pedersen/hash0/ec_subset_sum/bit_0*/ mload(0x2e80),\n\n                  addmod(/*column5_row5*/ mload(0x21a0), /*column5_row13*/ mload(0x2280), PRIME),\n\n                  PRIME),\n\n                sub(\n\n                  PRIME,\n\n                  mulmod(\n\n                    /*column5_row7*/ mload(0x21e0),\n\n                    addmod(/*column5_row1*/ mload(0x2120), sub(PRIME, /*column5_row9*/ mload(0x2220)), PRIME),\n\n                    PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: point^(trace_length / 2048) - trace_generator^(255 * trace_length / 256).\n\n              // val *= domains[12].\n\n              val := mulmod(val, /*domains[12]*/ mload(0x3720), PRIME)\n\n              // Denominator: point^(trace_length / 8) - 1.\n\n              // val *= denominator_invs[11].\n\n              val := mulmod(val, /*denominator_invs[11]*/ mload(0x3ac0), PRIME)\n\n\n\n              // res += val * coefficients[65].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[65]*/ mload(0xd60), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for pedersen/hash0/ec_subset_sum/copy_point/x: pedersen__hash0__ec_subset_sum__bit_neg_0 * (column5_row9 - column5_row1).\n\n              let val := mulmod(\n\n                /*intermediate_value/pedersen/hash0/ec_subset_sum/bit_neg_0*/ mload(0x2ea0),\n\n                addmod(/*column5_row9*/ mload(0x2220), sub(PRIME, /*column5_row1*/ mload(0x2120)), PRIME),\n\n                PRIME)\n\n\n\n              // Numerator: point^(trace_length / 2048) - trace_generator^(255 * trace_length / 256).\n\n              // val *= domains[12].\n\n              val := mulmod(val, /*domains[12]*/ mload(0x3720), PRIME)\n\n              // Denominator: point^(trace_length / 8) - 1.\n\n              // val *= denominator_invs[11].\n\n              val := mulmod(val, /*denominator_invs[11]*/ mload(0x3ac0), PRIME)\n\n\n\n              // res += val * coefficients[66].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[66]*/ mload(0xd80), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for pedersen/hash0/ec_subset_sum/copy_point/y: pedersen__hash0__ec_subset_sum__bit_neg_0 * (column5_row13 - column5_row5).\n\n              let val := mulmod(\n\n                /*intermediate_value/pedersen/hash0/ec_subset_sum/bit_neg_0*/ mload(0x2ea0),\n\n                addmod(/*column5_row13*/ mload(0x2280), sub(PRIME, /*column5_row5*/ mload(0x21a0)), PRIME),\n\n                PRIME)\n\n\n\n              // Numerator: point^(trace_length / 2048) - trace_generator^(255 * trace_length / 256).\n\n              // val *= domains[12].\n\n              val := mulmod(val, /*domains[12]*/ mload(0x3720), PRIME)\n\n              // Denominator: point^(trace_length / 8) - 1.\n\n              // val *= denominator_invs[11].\n\n              val := mulmod(val, /*denominator_invs[11]*/ mload(0x3ac0), PRIME)\n\n\n\n              // res += val * coefficients[67].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[67]*/ mload(0xda0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for pedersen/hash0/copy_point/x: column5_row2049 - column5_row2041.\n\n              let val := addmod(\n\n                /*column5_row2049*/ mload(0x24a0),\n\n                sub(PRIME, /*column5_row2041*/ mload(0x2440)),\n\n                PRIME)\n\n\n\n              // Numerator: point^(trace_length / 4096) - trace_generator^(trace_length / 2).\n\n              // val *= domains[14].\n\n              val := mulmod(val, /*domains[14]*/ mload(0x3760), PRIME)\n\n              // Denominator: point^(trace_length / 2048) - 1.\n\n              // val *= denominator_invs[10].\n\n              val := mulmod(val, /*denominator_invs[10]*/ mload(0x3aa0), PRIME)\n\n\n\n              // res += val * coefficients[68].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[68]*/ mload(0xdc0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for pedersen/hash0/copy_point/y: column5_row2053 - column5_row2045.\n\n              let val := addmod(\n\n                /*column5_row2053*/ mload(0x24e0),\n\n                sub(PRIME, /*column5_row2045*/ mload(0x2460)),\n\n                PRIME)\n\n\n\n              // Numerator: point^(trace_length / 4096) - trace_generator^(trace_length / 2).\n\n              // val *= domains[14].\n\n              val := mulmod(val, /*domains[14]*/ mload(0x3760), PRIME)\n\n              // Denominator: point^(trace_length / 2048) - 1.\n\n              // val *= denominator_invs[10].\n\n              val := mulmod(val, /*denominator_invs[10]*/ mload(0x3aa0), PRIME)\n\n\n\n              // res += val * coefficients[69].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[69]*/ mload(0xde0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for pedersen/hash0/init/x: column5_row1 - pedersen/shift_point.x.\n\n              let val := addmod(\n\n                /*column5_row1*/ mload(0x2120),\n\n                sub(PRIME, /*pedersen/shift_point.x*/ mload(0x300)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 4096) - 1.\n\n              // val *= denominator_invs[14].\n\n              val := mulmod(val, /*denominator_invs[14]*/ mload(0x3b20), PRIME)\n\n\n\n              // res += val * coefficients[70].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[70]*/ mload(0xe00), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for pedersen/hash0/init/y: column5_row5 - pedersen/shift_point.y.\n\n              let val := addmod(\n\n                /*column5_row5*/ mload(0x21a0),\n\n                sub(PRIME, /*pedersen/shift_point.y*/ mload(0x320)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 4096) - 1.\n\n              // val *= denominator_invs[14].\n\n              val := mulmod(val, /*denominator_invs[14]*/ mload(0x3b20), PRIME)\n\n\n\n              // res += val * coefficients[71].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[71]*/ mload(0xe20), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for pedersen/input0_value0: column3_row11 - column5_row3.\n\n              let val := addmod(/*column3_row11*/ mload(0x1d40), sub(PRIME, /*column5_row3*/ mload(0x2160)), PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 4096) - 1.\n\n              // val *= denominator_invs[14].\n\n              val := mulmod(val, /*denominator_invs[14]*/ mload(0x3b20), PRIME)\n\n\n\n              // res += val * coefficients[72].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[72]*/ mload(0xe40), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for pedersen/input0_addr: column3_row4106 - (column3_row1034 + 1).\n\n              let val := addmod(\n\n                /*column3_row4106*/ mload(0x2000),\n\n                sub(PRIME, addmod(/*column3_row1034*/ mload(0x1f40), 1, PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: point - trace_generator^(4096 * (trace_length / 4096 - 1)).\n\n              // val *= domains[16].\n\n              val := mulmod(val, /*domains[16]*/ mload(0x37a0), PRIME)\n\n              // Denominator: point^(trace_length / 4096) - 1.\n\n              // val *= denominator_invs[14].\n\n              val := mulmod(val, /*denominator_invs[14]*/ mload(0x3b20), PRIME)\n\n\n\n              // res += val * coefficients[73].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[73]*/ mload(0xe60), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for pedersen/init_addr: column3_row10 - initial_pedersen_addr.\n\n              let val := addmod(\n\n                /*column3_row10*/ mload(0x1d20),\n\n                sub(PRIME, /*initial_pedersen_addr*/ mload(0x340)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point - 1.\n\n              // val *= denominator_invs[4].\n\n              val := mulmod(val, /*denominator_invs[4]*/ mload(0x39e0), PRIME)\n\n\n\n              // res += val * coefficients[74].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[74]*/ mload(0xe80), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for pedersen/input1_value0: column3_row2059 - column5_row2051.\n\n              let val := addmod(\n\n                /*column3_row2059*/ mload(0x1fa0),\n\n                sub(PRIME, /*column5_row2051*/ mload(0x24c0)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 4096) - 1.\n\n              // val *= denominator_invs[14].\n\n              val := mulmod(val, /*denominator_invs[14]*/ mload(0x3b20), PRIME)\n\n\n\n              // res += val * coefficients[75].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[75]*/ mload(0xea0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for pedersen/input1_addr: column3_row2058 - (column3_row10 + 1).\n\n              let val := addmod(\n\n                /*column3_row2058*/ mload(0x1f80),\n\n                sub(PRIME, addmod(/*column3_row10*/ mload(0x1d20), 1, PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 4096) - 1.\n\n              // val *= denominator_invs[14].\n\n              val := mulmod(val, /*denominator_invs[14]*/ mload(0x3b20), PRIME)\n\n\n\n              // res += val * coefficients[76].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[76]*/ mload(0xec0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for pedersen/output_value0: column3_row1035 - column5_row4089.\n\n              let val := addmod(\n\n                /*column3_row1035*/ mload(0x1f60),\n\n                sub(PRIME, /*column5_row4089*/ mload(0x2500)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 4096) - 1.\n\n              // val *= denominator_invs[14].\n\n              val := mulmod(val, /*denominator_invs[14]*/ mload(0x3b20), PRIME)\n\n\n\n              // res += val * coefficients[77].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[77]*/ mload(0xee0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for pedersen/output_addr: column3_row1034 - (column3_row2058 + 1).\n\n              let val := addmod(\n\n                /*column3_row1034*/ mload(0x1f40),\n\n                sub(PRIME, addmod(/*column3_row2058*/ mload(0x1f80), 1, PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 4096) - 1.\n\n              // val *= denominator_invs[14].\n\n              val := mulmod(val, /*denominator_invs[14]*/ mload(0x3b20), PRIME)\n\n\n\n              // res += val * coefficients[78].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[78]*/ mload(0xf00), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for rc_builtin/value: rc_builtin__value7_0 - column3_row75.\n\n              let val := addmod(\n\n                /*intermediate_value/rc_builtin/value7_0*/ mload(0x2fa0),\n\n                sub(PRIME, /*column3_row75*/ mload(0x1e80)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 128) - 1.\n\n              // val *= denominator_invs[15].\n\n              val := mulmod(val, /*denominator_invs[15]*/ mload(0x3b40), PRIME)\n\n\n\n              // res += val * coefficients[79].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[79]*/ mload(0xf20), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for rc_builtin/addr_step: column3_row202 - (column3_row74 + 1).\n\n              let val := addmod(\n\n                /*column3_row202*/ mload(0x1f20),\n\n                sub(PRIME, addmod(/*column3_row74*/ mload(0x1e60), 1, PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: point - trace_generator^(128 * (trace_length / 128 - 1)).\n\n              // val *= domains[18].\n\n              val := mulmod(val, /*domains[18]*/ mload(0x37e0), PRIME)\n\n              // Denominator: point^(trace_length / 128) - 1.\n\n              // val *= denominator_invs[15].\n\n              val := mulmod(val, /*denominator_invs[15]*/ mload(0x3b40), PRIME)\n\n\n\n              // res += val * coefficients[80].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[80]*/ mload(0xf40), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for rc_builtin/init_addr: column3_row74 - initial_rc_addr.\n\n              let val := addmod(\n\n                /*column3_row74*/ mload(0x1e60),\n\n                sub(PRIME, /*initial_rc_addr*/ mload(0x360)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point - 1.\n\n              // val *= denominator_invs[4].\n\n              val := mulmod(val, /*denominator_invs[4]*/ mload(0x39e0), PRIME)\n\n\n\n              // res += val * coefficients[81].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[81]*/ mload(0xf60), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for ecdsa/signature0/doubling_key/slope: ecdsa__signature0__doubling_key__x_squared + ecdsa__signature0__doubling_key__x_squared + ecdsa__signature0__doubling_key__x_squared + ecdsa/sig_config.alpha - (column6_row22 + column6_row22) * column6_row17.\n\n              let val := addmod(\n\n                addmod(\n\n                  addmod(\n\n                    addmod(\n\n                      /*intermediate_value/ecdsa/signature0/doubling_key/x_squared*/ mload(0x2fc0),\n\n                      /*intermediate_value/ecdsa/signature0/doubling_key/x_squared*/ mload(0x2fc0),\n\n                      PRIME),\n\n                    /*intermediate_value/ecdsa/signature0/doubling_key/x_squared*/ mload(0x2fc0),\n\n                    PRIME),\n\n                  /*ecdsa/sig_config.alpha*/ mload(0x380),\n\n                  PRIME),\n\n                sub(\n\n                  PRIME,\n\n                  mulmod(\n\n                    addmod(/*column6_row22*/ mload(0x2700), /*column6_row22*/ mload(0x2700), PRIME),\n\n                    /*column6_row17*/ mload(0x26c0),\n\n                    PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: point^(trace_length / 8192) - trace_generator^(255 * trace_length / 256).\n\n              // val *= domains[20].\n\n              val := mulmod(val, /*domains[20]*/ mload(0x3820), PRIME)\n\n              // Denominator: point^(trace_length / 32) - 1.\n\n              // val *= denominator_invs[16].\n\n              val := mulmod(val, /*denominator_invs[16]*/ mload(0x3b60), PRIME)\n\n\n\n              // res += val * coefficients[82].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[82]*/ mload(0xf80), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for ecdsa/signature0/doubling_key/x: column6_row17 * column6_row17 - (column6_row6 + column6_row6 + column6_row38).\n\n              let val := addmod(\n\n                mulmod(/*column6_row17*/ mload(0x26c0), /*column6_row17*/ mload(0x26c0), PRIME),\n\n                sub(\n\n                  PRIME,\n\n                  addmod(\n\n                    addmod(/*column6_row6*/ mload(0x25c0), /*column6_row6*/ mload(0x25c0), PRIME),\n\n                    /*column6_row38*/ mload(0x27c0),\n\n                    PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: point^(trace_length / 8192) - trace_generator^(255 * trace_length / 256).\n\n              // val *= domains[20].\n\n              val := mulmod(val, /*domains[20]*/ mload(0x3820), PRIME)\n\n              // Denominator: point^(trace_length / 32) - 1.\n\n              // val *= denominator_invs[16].\n\n              val := mulmod(val, /*denominator_invs[16]*/ mload(0x3b60), PRIME)\n\n\n\n              // res += val * coefficients[83].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[83]*/ mload(0xfa0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for ecdsa/signature0/doubling_key/y: column6_row22 + column6_row54 - column6_row17 * (column6_row6 - column6_row38).\n\n              let val := addmod(\n\n                addmod(/*column6_row22*/ mload(0x2700), /*column6_row54*/ mload(0x2840), PRIME),\n\n                sub(\n\n                  PRIME,\n\n                  mulmod(\n\n                    /*column6_row17*/ mload(0x26c0),\n\n                    addmod(/*column6_row6*/ mload(0x25c0), sub(PRIME, /*column6_row38*/ mload(0x27c0)), PRIME),\n\n                    PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: point^(trace_length / 8192) - trace_generator^(255 * trace_length / 256).\n\n              // val *= domains[20].\n\n              val := mulmod(val, /*domains[20]*/ mload(0x3820), PRIME)\n\n              // Denominator: point^(trace_length / 32) - 1.\n\n              // val *= denominator_invs[16].\n\n              val := mulmod(val, /*denominator_invs[16]*/ mload(0x3b60), PRIME)\n\n\n\n              // res += val * coefficients[84].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[84]*/ mload(0xfc0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for ecdsa/signature0/exponentiate_generator/booleanity_test: ecdsa__signature0__exponentiate_generator__bit_0 * (ecdsa__signature0__exponentiate_generator__bit_0 - 1).\n\n              let val := mulmod(\n\n                /*intermediate_value/ecdsa/signature0/exponentiate_generator/bit_0*/ mload(0x2fe0),\n\n                addmod(\n\n                  /*intermediate_value/ecdsa/signature0/exponentiate_generator/bit_0*/ mload(0x2fe0),\n\n                  sub(PRIME, 1),\n\n                  PRIME),\n\n                PRIME)\n\n\n\n              // Numerator: point^(trace_length / 16384) - trace_generator^(255 * trace_length / 256).\n\n              // val *= domains[22].\n\n              val := mulmod(val, /*domains[22]*/ mload(0x3860), PRIME)\n\n              // Denominator: point^(trace_length / 64) - 1.\n\n              // val *= denominator_invs[18].\n\n              val := mulmod(val, /*denominator_invs[18]*/ mload(0x3ba0), PRIME)\n\n\n\n              // res += val * coefficients[85].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[85]*/ mload(0xfe0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for ecdsa/signature0/exponentiate_generator/bit_extraction_end: column6_row21.\n\n              let val := /*column6_row21*/ mload(0x26e0)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 16384) - trace_generator^(251 * trace_length / 256).\n\n              // val *= denominator_invs[20].\n\n              val := mulmod(val, /*denominator_invs[20]*/ mload(0x3be0), PRIME)\n\n\n\n              // res += val * coefficients[86].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[86]*/ mload(0x1000), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for ecdsa/signature0/exponentiate_generator/zeros_tail: column6_row21.\n\n              let val := /*column6_row21*/ mload(0x26e0)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 16384) - trace_generator^(255 * trace_length / 256).\n\n              // val *= denominator_invs[19].\n\n              val := mulmod(val, /*denominator_invs[19]*/ mload(0x3bc0), PRIME)\n\n\n\n              // res += val * coefficients[87].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[87]*/ mload(0x1020), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for ecdsa/signature0/exponentiate_generator/add_points/slope: ecdsa__signature0__exponentiate_generator__bit_0 * (column6_row37 - ecdsa__generator_points__y) - column6_row53 * (column6_row5 - ecdsa__generator_points__x).\n\n              let val := addmod(\n\n                mulmod(\n\n                  /*intermediate_value/ecdsa/signature0/exponentiate_generator/bit_0*/ mload(0x2fe0),\n\n                  addmod(\n\n                    /*column6_row37*/ mload(0x27a0),\n\n                    sub(PRIME, /*periodic_column/ecdsa/generator_points/y*/ mload(0x60)),\n\n                    PRIME),\n\n                  PRIME),\n\n                sub(\n\n                  PRIME,\n\n                  mulmod(\n\n                    /*column6_row53*/ mload(0x2820),\n\n                    addmod(\n\n                      /*column6_row5*/ mload(0x25a0),\n\n                      sub(PRIME, /*periodic_column/ecdsa/generator_points/x*/ mload(0x40)),\n\n                      PRIME),\n\n                    PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: point^(trace_length / 16384) - trace_generator^(255 * trace_length / 256).\n\n              // val *= domains[22].\n\n              val := mulmod(val, /*domains[22]*/ mload(0x3860), PRIME)\n\n              // Denominator: point^(trace_length / 64) - 1.\n\n              // val *= denominator_invs[18].\n\n              val := mulmod(val, /*denominator_invs[18]*/ mload(0x3ba0), PRIME)\n\n\n\n              // res += val * coefficients[88].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[88]*/ mload(0x1040), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for ecdsa/signature0/exponentiate_generator/add_points/x: column6_row53 * column6_row53 - ecdsa__signature0__exponentiate_generator__bit_0 * (column6_row5 + ecdsa__generator_points__x + column6_row69).\n\n              let val := addmod(\n\n                mulmod(/*column6_row53*/ mload(0x2820), /*column6_row53*/ mload(0x2820), PRIME),\n\n                sub(\n\n                  PRIME,\n\n                  mulmod(\n\n                    /*intermediate_value/ecdsa/signature0/exponentiate_generator/bit_0*/ mload(0x2fe0),\n\n                    addmod(\n\n                      addmod(\n\n                        /*column6_row5*/ mload(0x25a0),\n\n                        /*periodic_column/ecdsa/generator_points/x*/ mload(0x40),\n\n                        PRIME),\n\n                      /*column6_row69*/ mload(0x2880),\n\n                      PRIME),\n\n                    PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: point^(trace_length / 16384) - trace_generator^(255 * trace_length / 256).\n\n              // val *= domains[22].\n\n              val := mulmod(val, /*domains[22]*/ mload(0x3860), PRIME)\n\n              // Denominator: point^(trace_length / 64) - 1.\n\n              // val *= denominator_invs[18].\n\n              val := mulmod(val, /*denominator_invs[18]*/ mload(0x3ba0), PRIME)\n\n\n\n              // res += val * coefficients[89].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[89]*/ mload(0x1060), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for ecdsa/signature0/exponentiate_generator/add_points/y: ecdsa__signature0__exponentiate_generator__bit_0 * (column6_row37 + column6_row101) - column6_row53 * (column6_row5 - column6_row69).\n\n              let val := addmod(\n\n                mulmod(\n\n                  /*intermediate_value/ecdsa/signature0/exponentiate_generator/bit_0*/ mload(0x2fe0),\n\n                  addmod(/*column6_row37*/ mload(0x27a0), /*column6_row101*/ mload(0x28c0), PRIME),\n\n                  PRIME),\n\n                sub(\n\n                  PRIME,\n\n                  mulmod(\n\n                    /*column6_row53*/ mload(0x2820),\n\n                    addmod(/*column6_row5*/ mload(0x25a0), sub(PRIME, /*column6_row69*/ mload(0x2880)), PRIME),\n\n                    PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: point^(trace_length / 16384) - trace_generator^(255 * trace_length / 256).\n\n              // val *= domains[22].\n\n              val := mulmod(val, /*domains[22]*/ mload(0x3860), PRIME)\n\n              // Denominator: point^(trace_length / 64) - 1.\n\n              // val *= denominator_invs[18].\n\n              val := mulmod(val, /*denominator_invs[18]*/ mload(0x3ba0), PRIME)\n\n\n\n              // res += val * coefficients[90].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[90]*/ mload(0x1080), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for ecdsa/signature0/exponentiate_generator/add_points/x_diff_inv: column6_row13 * (column6_row5 - ecdsa__generator_points__x) - 1.\n\n              let val := addmod(\n\n                mulmod(\n\n                  /*column6_row13*/ mload(0x2660),\n\n                  addmod(\n\n                    /*column6_row5*/ mload(0x25a0),\n\n                    sub(PRIME, /*periodic_column/ecdsa/generator_points/x*/ mload(0x40)),\n\n                    PRIME),\n\n                  PRIME),\n\n                sub(PRIME, 1),\n\n                PRIME)\n\n\n\n              // Numerator: point^(trace_length / 16384) - trace_generator^(255 * trace_length / 256).\n\n              // val *= domains[22].\n\n              val := mulmod(val, /*domains[22]*/ mload(0x3860), PRIME)\n\n              // Denominator: point^(trace_length / 64) - 1.\n\n              // val *= denominator_invs[18].\n\n              val := mulmod(val, /*denominator_invs[18]*/ mload(0x3ba0), PRIME)\n\n\n\n              // res += val * coefficients[91].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[91]*/ mload(0x10a0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for ecdsa/signature0/exponentiate_generator/copy_point/x: ecdsa__signature0__exponentiate_generator__bit_neg_0 * (column6_row69 - column6_row5).\n\n              let val := mulmod(\n\n                /*intermediate_value/ecdsa/signature0/exponentiate_generator/bit_neg_0*/ mload(0x3000),\n\n                addmod(/*column6_row69*/ mload(0x2880), sub(PRIME, /*column6_row5*/ mload(0x25a0)), PRIME),\n\n                PRIME)\n\n\n\n              // Numerator: point^(trace_length / 16384) - trace_generator^(255 * trace_length / 256).\n\n              // val *= domains[22].\n\n              val := mulmod(val, /*domains[22]*/ mload(0x3860), PRIME)\n\n              // Denominator: point^(trace_length / 64) - 1.\n\n              // val *= denominator_invs[18].\n\n              val := mulmod(val, /*denominator_invs[18]*/ mload(0x3ba0), PRIME)\n\n\n\n              // res += val * coefficients[92].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[92]*/ mload(0x10c0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for ecdsa/signature0/exponentiate_generator/copy_point/y: ecdsa__signature0__exponentiate_generator__bit_neg_0 * (column6_row101 - column6_row37).\n\n              let val := mulmod(\n\n                /*intermediate_value/ecdsa/signature0/exponentiate_generator/bit_neg_0*/ mload(0x3000),\n\n                addmod(\n\n                  /*column6_row101*/ mload(0x28c0),\n\n                  sub(PRIME, /*column6_row37*/ mload(0x27a0)),\n\n                  PRIME),\n\n                PRIME)\n\n\n\n              // Numerator: point^(trace_length / 16384) - trace_generator^(255 * trace_length / 256).\n\n              // val *= domains[22].\n\n              val := mulmod(val, /*domains[22]*/ mload(0x3860), PRIME)\n\n              // Denominator: point^(trace_length / 64) - 1.\n\n              // val *= denominator_invs[18].\n\n              val := mulmod(val, /*denominator_invs[18]*/ mload(0x3ba0), PRIME)\n\n\n\n              // res += val * coefficients[93].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[93]*/ mload(0x10e0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for ecdsa/signature0/exponentiate_key/booleanity_test: ecdsa__signature0__exponentiate_key__bit_0 * (ecdsa__signature0__exponentiate_key__bit_0 - 1).\n\n              let val := mulmod(\n\n                /*intermediate_value/ecdsa/signature0/exponentiate_key/bit_0*/ mload(0x3020),\n\n                addmod(\n\n                  /*intermediate_value/ecdsa/signature0/exponentiate_key/bit_0*/ mload(0x3020),\n\n                  sub(PRIME, 1),\n\n                  PRIME),\n\n                PRIME)\n\n\n\n              // Numerator: point^(trace_length / 8192) - trace_generator^(255 * trace_length / 256).\n\n              // val *= domains[20].\n\n              val := mulmod(val, /*domains[20]*/ mload(0x3820), PRIME)\n\n              // Denominator: point^(trace_length / 32) - 1.\n\n              // val *= denominator_invs[16].\n\n              val := mulmod(val, /*denominator_invs[16]*/ mload(0x3b60), PRIME)\n\n\n\n              // res += val * coefficients[94].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[94]*/ mload(0x1100), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for ecdsa/signature0/exponentiate_key/bit_extraction_end: column6_row1.\n\n              let val := /*column6_row1*/ mload(0x2540)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 8192) - trace_generator^(251 * trace_length / 256).\n\n              // val *= denominator_invs[21].\n\n              val := mulmod(val, /*denominator_invs[21]*/ mload(0x3c00), PRIME)\n\n\n\n              // res += val * coefficients[95].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[95]*/ mload(0x1120), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for ecdsa/signature0/exponentiate_key/zeros_tail: column6_row1.\n\n              let val := /*column6_row1*/ mload(0x2540)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 8192) - trace_generator^(255 * trace_length / 256).\n\n              // val *= denominator_invs[17].\n\n              val := mulmod(val, /*denominator_invs[17]*/ mload(0x3b80), PRIME)\n\n\n\n              // res += val * coefficients[96].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[96]*/ mload(0x1140), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for ecdsa/signature0/exponentiate_key/add_points/slope: ecdsa__signature0__exponentiate_key__bit_0 * (column6_row30 - column6_row22) - column6_row9 * (column6_row14 - column6_row6).\n\n              let val := addmod(\n\n                mulmod(\n\n                  /*intermediate_value/ecdsa/signature0/exponentiate_key/bit_0*/ mload(0x3020),\n\n                  addmod(/*column6_row30*/ mload(0x2760), sub(PRIME, /*column6_row22*/ mload(0x2700)), PRIME),\n\n                  PRIME),\n\n                sub(\n\n                  PRIME,\n\n                  mulmod(\n\n                    /*column6_row9*/ mload(0x2600),\n\n                    addmod(/*column6_row14*/ mload(0x2680), sub(PRIME, /*column6_row6*/ mload(0x25c0)), PRIME),\n\n                    PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: point^(trace_length / 8192) - trace_generator^(255 * trace_length / 256).\n\n              // val *= domains[20].\n\n              val := mulmod(val, /*domains[20]*/ mload(0x3820), PRIME)\n\n              // Denominator: point^(trace_length / 32) - 1.\n\n              // val *= denominator_invs[16].\n\n              val := mulmod(val, /*denominator_invs[16]*/ mload(0x3b60), PRIME)\n\n\n\n              // res += val * coefficients[97].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[97]*/ mload(0x1160), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for ecdsa/signature0/exponentiate_key/add_points/x: column6_row9 * column6_row9 - ecdsa__signature0__exponentiate_key__bit_0 * (column6_row14 + column6_row6 + column6_row46).\n\n              let val := addmod(\n\n                mulmod(/*column6_row9*/ mload(0x2600), /*column6_row9*/ mload(0x2600), PRIME),\n\n                sub(\n\n                  PRIME,\n\n                  mulmod(\n\n                    /*intermediate_value/ecdsa/signature0/exponentiate_key/bit_0*/ mload(0x3020),\n\n                    addmod(\n\n                      addmod(/*column6_row14*/ mload(0x2680), /*column6_row6*/ mload(0x25c0), PRIME),\n\n                      /*column6_row46*/ mload(0x2800),\n\n                      PRIME),\n\n                    PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: point^(trace_length / 8192) - trace_generator^(255 * trace_length / 256).\n\n              // val *= domains[20].\n\n              val := mulmod(val, /*domains[20]*/ mload(0x3820), PRIME)\n\n              // Denominator: point^(trace_length / 32) - 1.\n\n              // val *= denominator_invs[16].\n\n              val := mulmod(val, /*denominator_invs[16]*/ mload(0x3b60), PRIME)\n\n\n\n              // res += val * coefficients[98].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[98]*/ mload(0x1180), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for ecdsa/signature0/exponentiate_key/add_points/y: ecdsa__signature0__exponentiate_key__bit_0 * (column6_row30 + column6_row62) - column6_row9 * (column6_row14 - column6_row46).\n\n              let val := addmod(\n\n                mulmod(\n\n                  /*intermediate_value/ecdsa/signature0/exponentiate_key/bit_0*/ mload(0x3020),\n\n                  addmod(/*column6_row30*/ mload(0x2760), /*column6_row62*/ mload(0x2860), PRIME),\n\n                  PRIME),\n\n                sub(\n\n                  PRIME,\n\n                  mulmod(\n\n                    /*column6_row9*/ mload(0x2600),\n\n                    addmod(/*column6_row14*/ mload(0x2680), sub(PRIME, /*column6_row46*/ mload(0x2800)), PRIME),\n\n                    PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: point^(trace_length / 8192) - trace_generator^(255 * trace_length / 256).\n\n              // val *= domains[20].\n\n              val := mulmod(val, /*domains[20]*/ mload(0x3820), PRIME)\n\n              // Denominator: point^(trace_length / 32) - 1.\n\n              // val *= denominator_invs[16].\n\n              val := mulmod(val, /*denominator_invs[16]*/ mload(0x3b60), PRIME)\n\n\n\n              // res += val * coefficients[99].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[99]*/ mload(0x11a0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for ecdsa/signature0/exponentiate_key/add_points/x_diff_inv: column6_row25 * (column6_row14 - column6_row6) - 1.\n\n              let val := addmod(\n\n                mulmod(\n\n                  /*column6_row25*/ mload(0x2740),\n\n                  addmod(/*column6_row14*/ mload(0x2680), sub(PRIME, /*column6_row6*/ mload(0x25c0)), PRIME),\n\n                  PRIME),\n\n                sub(PRIME, 1),\n\n                PRIME)\n\n\n\n              // Numerator: point^(trace_length / 8192) - trace_generator^(255 * trace_length / 256).\n\n              // val *= domains[20].\n\n              val := mulmod(val, /*domains[20]*/ mload(0x3820), PRIME)\n\n              // Denominator: point^(trace_length / 32) - 1.\n\n              // val *= denominator_invs[16].\n\n              val := mulmod(val, /*denominator_invs[16]*/ mload(0x3b60), PRIME)\n\n\n\n              // res += val * coefficients[100].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[100]*/ mload(0x11c0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for ecdsa/signature0/exponentiate_key/copy_point/x: ecdsa__signature0__exponentiate_key__bit_neg_0 * (column6_row46 - column6_row14).\n\n              let val := mulmod(\n\n                /*intermediate_value/ecdsa/signature0/exponentiate_key/bit_neg_0*/ mload(0x3040),\n\n                addmod(/*column6_row46*/ mload(0x2800), sub(PRIME, /*column6_row14*/ mload(0x2680)), PRIME),\n\n                PRIME)\n\n\n\n              // Numerator: point^(trace_length / 8192) - trace_generator^(255 * trace_length / 256).\n\n              // val *= domains[20].\n\n              val := mulmod(val, /*domains[20]*/ mload(0x3820), PRIME)\n\n              // Denominator: point^(trace_length / 32) - 1.\n\n              // val *= denominator_invs[16].\n\n              val := mulmod(val, /*denominator_invs[16]*/ mload(0x3b60), PRIME)\n\n\n\n              // res += val * coefficients[101].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[101]*/ mload(0x11e0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for ecdsa/signature0/exponentiate_key/copy_point/y: ecdsa__signature0__exponentiate_key__bit_neg_0 * (column6_row62 - column6_row30).\n\n              let val := mulmod(\n\n                /*intermediate_value/ecdsa/signature0/exponentiate_key/bit_neg_0*/ mload(0x3040),\n\n                addmod(/*column6_row62*/ mload(0x2860), sub(PRIME, /*column6_row30*/ mload(0x2760)), PRIME),\n\n                PRIME)\n\n\n\n              // Numerator: point^(trace_length / 8192) - trace_generator^(255 * trace_length / 256).\n\n              // val *= domains[20].\n\n              val := mulmod(val, /*domains[20]*/ mload(0x3820), PRIME)\n\n              // Denominator: point^(trace_length / 32) - 1.\n\n              // val *= denominator_invs[16].\n\n              val := mulmod(val, /*denominator_invs[16]*/ mload(0x3b60), PRIME)\n\n\n\n              // res += val * coefficients[102].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[102]*/ mload(0x1200), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for ecdsa/signature0/init_gen/x: column6_row5 - ecdsa/sig_config.shift_point.x.\n\n              let val := addmod(\n\n                /*column6_row5*/ mload(0x25a0),\n\n                sub(PRIME, /*ecdsa/sig_config.shift_point.x*/ mload(0x3a0)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 16384) - 1.\n\n              // val *= denominator_invs[22].\n\n              val := mulmod(val, /*denominator_invs[22]*/ mload(0x3c20), PRIME)\n\n\n\n              // res += val * coefficients[103].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[103]*/ mload(0x1220), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for ecdsa/signature0/init_gen/y: column6_row37 + ecdsa/sig_config.shift_point.y.\n\n              let val := addmod(\n\n                /*column6_row37*/ mload(0x27a0),\n\n                /*ecdsa/sig_config.shift_point.y*/ mload(0x3c0),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 16384) - 1.\n\n              // val *= denominator_invs[22].\n\n              val := mulmod(val, /*denominator_invs[22]*/ mload(0x3c20), PRIME)\n\n\n\n              // res += val * coefficients[104].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[104]*/ mload(0x1240), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for ecdsa/signature0/init_key/x: column6_row14 - ecdsa/sig_config.shift_point.x.\n\n              let val := addmod(\n\n                /*column6_row14*/ mload(0x2680),\n\n                sub(PRIME, /*ecdsa/sig_config.shift_point.x*/ mload(0x3a0)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 8192) - 1.\n\n              // val *= denominator_invs[23].\n\n              val := mulmod(val, /*denominator_invs[23]*/ mload(0x3c40), PRIME)\n\n\n\n              // res += val * coefficients[105].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[105]*/ mload(0x1260), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for ecdsa/signature0/init_key/y: column6_row30 - ecdsa/sig_config.shift_point.y.\n\n              let val := addmod(\n\n                /*column6_row30*/ mload(0x2760),\n\n                sub(PRIME, /*ecdsa/sig_config.shift_point.y*/ mload(0x3c0)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 8192) - 1.\n\n              // val *= denominator_invs[23].\n\n              val := mulmod(val, /*denominator_invs[23]*/ mload(0x3c40), PRIME)\n\n\n\n              // res += val * coefficients[106].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[106]*/ mload(0x1280), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for ecdsa/signature0/add_results/slope: column6_row16357 - (column6_row8190 + column6_row16373 * (column6_row16325 - column6_row8174)).\n\n              let val := addmod(\n\n                /*column6_row16357*/ mload(0x2a00),\n\n                sub(\n\n                  PRIME,\n\n                  addmod(\n\n                    /*column6_row8190*/ mload(0x2960),\n\n                    mulmod(\n\n                      /*column6_row16373*/ mload(0x2a60),\n\n                      addmod(\n\n                        /*column6_row16325*/ mload(0x29c0),\n\n                        sub(PRIME, /*column6_row8174*/ mload(0x2900)),\n\n                        PRIME),\n\n                      PRIME),\n\n                    PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 16384) - 1.\n\n              // val *= denominator_invs[22].\n\n              val := mulmod(val, /*denominator_invs[22]*/ mload(0x3c20), PRIME)\n\n\n\n              // res += val * coefficients[107].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[107]*/ mload(0x12a0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for ecdsa/signature0/add_results/x: column6_row16373 * column6_row16373 - (column6_row16325 + column6_row8174 + column6_row8198).\n\n              let val := addmod(\n\n                mulmod(/*column6_row16373*/ mload(0x2a60), /*column6_row16373*/ mload(0x2a60), PRIME),\n\n                sub(\n\n                  PRIME,\n\n                  addmod(\n\n                    addmod(/*column6_row16325*/ mload(0x29c0), /*column6_row8174*/ mload(0x2900), PRIME),\n\n                    /*column6_row8198*/ mload(0x2980),\n\n                    PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 16384) - 1.\n\n              // val *= denominator_invs[22].\n\n              val := mulmod(val, /*denominator_invs[22]*/ mload(0x3c20), PRIME)\n\n\n\n              // res += val * coefficients[108].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[108]*/ mload(0x12c0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for ecdsa/signature0/add_results/y: column6_row16357 + column6_row8214 - column6_row16373 * (column6_row16325 - column6_row8198).\n\n              let val := addmod(\n\n                addmod(/*column6_row16357*/ mload(0x2a00), /*column6_row8214*/ mload(0x29a0), PRIME),\n\n                sub(\n\n                  PRIME,\n\n                  mulmod(\n\n                    /*column6_row16373*/ mload(0x2a60),\n\n                    addmod(\n\n                      /*column6_row16325*/ mload(0x29c0),\n\n                      sub(PRIME, /*column6_row8198*/ mload(0x2980)),\n\n                      PRIME),\n\n                    PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 16384) - 1.\n\n              // val *= denominator_invs[22].\n\n              val := mulmod(val, /*denominator_invs[22]*/ mload(0x3c20), PRIME)\n\n\n\n              // res += val * coefficients[109].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[109]*/ mload(0x12e0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for ecdsa/signature0/add_results/x_diff_inv: column6_row16333 * (column6_row16325 - column6_row8174) - 1.\n\n              let val := addmod(\n\n                mulmod(\n\n                  /*column6_row16333*/ mload(0x29e0),\n\n                  addmod(\n\n                    /*column6_row16325*/ mload(0x29c0),\n\n                    sub(PRIME, /*column6_row8174*/ mload(0x2900)),\n\n                    PRIME),\n\n                  PRIME),\n\n                sub(PRIME, 1),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 16384) - 1.\n\n              // val *= denominator_invs[22].\n\n              val := mulmod(val, /*denominator_invs[22]*/ mload(0x3c20), PRIME)\n\n\n\n              // res += val * coefficients[110].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[110]*/ mload(0x1300), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for ecdsa/signature0/extract_r/slope: column6_row16382 + ecdsa/sig_config.shift_point.y - column6_row8169 * (column6_row16366 - ecdsa/sig_config.shift_point.x).\n\n              let val := addmod(\n\n                addmod(\n\n                  /*column6_row16382*/ mload(0x2aa0),\n\n                  /*ecdsa/sig_config.shift_point.y*/ mload(0x3c0),\n\n                  PRIME),\n\n                sub(\n\n                  PRIME,\n\n                  mulmod(\n\n                    /*column6_row8169*/ mload(0x28e0),\n\n                    addmod(\n\n                      /*column6_row16366*/ mload(0x2a40),\n\n                      sub(PRIME, /*ecdsa/sig_config.shift_point.x*/ mload(0x3a0)),\n\n                      PRIME),\n\n                    PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 16384) - 1.\n\n              // val *= denominator_invs[22].\n\n              val := mulmod(val, /*denominator_invs[22]*/ mload(0x3c20), PRIME)\n\n\n\n              // res += val * coefficients[111].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[111]*/ mload(0x1320), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for ecdsa/signature0/extract_r/x: column6_row8169 * column6_row8169 - (column6_row16366 + ecdsa/sig_config.shift_point.x + column6_row1).\n\n              let val := addmod(\n\n                mulmod(/*column6_row8169*/ mload(0x28e0), /*column6_row8169*/ mload(0x28e0), PRIME),\n\n                sub(\n\n                  PRIME,\n\n                  addmod(\n\n                    addmod(\n\n                      /*column6_row16366*/ mload(0x2a40),\n\n                      /*ecdsa/sig_config.shift_point.x*/ mload(0x3a0),\n\n                      PRIME),\n\n                    /*column6_row1*/ mload(0x2540),\n\n                    PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 16384) - 1.\n\n              // val *= denominator_invs[22].\n\n              val := mulmod(val, /*denominator_invs[22]*/ mload(0x3c20), PRIME)\n\n\n\n              // res += val * coefficients[112].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[112]*/ mload(0x1340), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for ecdsa/signature0/extract_r/x_diff_inv: column6_row16361 * (column6_row16366 - ecdsa/sig_config.shift_point.x) - 1.\n\n              let val := addmod(\n\n                mulmod(\n\n                  /*column6_row16361*/ mload(0x2a20),\n\n                  addmod(\n\n                    /*column6_row16366*/ mload(0x2a40),\n\n                    sub(PRIME, /*ecdsa/sig_config.shift_point.x*/ mload(0x3a0)),\n\n                    PRIME),\n\n                  PRIME),\n\n                sub(PRIME, 1),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 16384) - 1.\n\n              // val *= denominator_invs[22].\n\n              val := mulmod(val, /*denominator_invs[22]*/ mload(0x3c20), PRIME)\n\n\n\n              // res += val * coefficients[113].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[113]*/ mload(0x1360), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for ecdsa/signature0/z_nonzero: column6_row21 * column6_row8185 - 1.\n\n              let val := addmod(\n\n                mulmod(/*column6_row21*/ mload(0x26e0), /*column6_row8185*/ mload(0x2940), PRIME),\n\n                sub(PRIME, 1),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 16384) - 1.\n\n              // val *= denominator_invs[22].\n\n              val := mulmod(val, /*denominator_invs[22]*/ mload(0x3c20), PRIME)\n\n\n\n              // res += val * coefficients[114].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[114]*/ mload(0x1380), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for ecdsa/signature0/r_and_w_nonzero: column6_row1 * column6_row8177 - 1.\n\n              let val := addmod(\n\n                mulmod(/*column6_row1*/ mload(0x2540), /*column6_row8177*/ mload(0x2920), PRIME),\n\n                sub(PRIME, 1),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 8192) - 1.\n\n              // val *= denominator_invs[23].\n\n              val := mulmod(val, /*denominator_invs[23]*/ mload(0x3c40), PRIME)\n\n\n\n              // res += val * coefficients[115].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[115]*/ mload(0x13a0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for ecdsa/signature0/q_on_curve/x_squared: column6_row16377 - column6_row6 * column6_row6.\n\n              let val := addmod(\n\n                /*column6_row16377*/ mload(0x2a80),\n\n                sub(\n\n                  PRIME,\n\n                  mulmod(/*column6_row6*/ mload(0x25c0), /*column6_row6*/ mload(0x25c0), PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 16384) - 1.\n\n              // val *= denominator_invs[22].\n\n              val := mulmod(val, /*denominator_invs[22]*/ mload(0x3c20), PRIME)\n\n\n\n              // res += val * coefficients[116].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[116]*/ mload(0x13c0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for ecdsa/signature0/q_on_curve/on_curve: column6_row22 * column6_row22 - (column6_row6 * column6_row16377 + ecdsa/sig_config.alpha * column6_row6 + ecdsa/sig_config.beta).\n\n              let val := addmod(\n\n                mulmod(/*column6_row22*/ mload(0x2700), /*column6_row22*/ mload(0x2700), PRIME),\n\n                sub(\n\n                  PRIME,\n\n                  addmod(\n\n                    addmod(\n\n                      mulmod(/*column6_row6*/ mload(0x25c0), /*column6_row16377*/ mload(0x2a80), PRIME),\n\n                      mulmod(/*ecdsa/sig_config.alpha*/ mload(0x380), /*column6_row6*/ mload(0x25c0), PRIME),\n\n                      PRIME),\n\n                    /*ecdsa/sig_config.beta*/ mload(0x3e0),\n\n                    PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 16384) - 1.\n\n              // val *= denominator_invs[22].\n\n              val := mulmod(val, /*denominator_invs[22]*/ mload(0x3c20), PRIME)\n\n\n\n              // res += val * coefficients[117].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[117]*/ mload(0x13e0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for ecdsa/init_addr: column3_row3082 - initial_ecdsa_addr.\n\n              let val := addmod(\n\n                /*column3_row3082*/ mload(0x1fc0),\n\n                sub(PRIME, /*initial_ecdsa_addr*/ mload(0x400)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point - 1.\n\n              // val *= denominator_invs[4].\n\n              val := mulmod(val, /*denominator_invs[4]*/ mload(0x39e0), PRIME)\n\n\n\n              // res += val * coefficients[118].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[118]*/ mload(0x1400), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for ecdsa/message_addr: column3_row11274 - (column3_row3082 + 1).\n\n              let val := addmod(\n\n                /*column3_row11274*/ mload(0x2020),\n\n                sub(PRIME, addmod(/*column3_row3082*/ mload(0x1fc0), 1, PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 16384) - 1.\n\n              // val *= denominator_invs[22].\n\n              val := mulmod(val, /*denominator_invs[22]*/ mload(0x3c20), PRIME)\n\n\n\n              // res += val * coefficients[119].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[119]*/ mload(0x1420), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for ecdsa/pubkey_addr: column3_row19466 - (column3_row11274 + 1).\n\n              let val := addmod(\n\n                /*column3_row19466*/ mload(0x2060),\n\n                sub(PRIME, addmod(/*column3_row11274*/ mload(0x2020), 1, PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: point - trace_generator^(16384 * (trace_length / 16384 - 1)).\n\n              // val *= domains[27].\n\n              val := mulmod(val, /*domains[27]*/ mload(0x3900), PRIME)\n\n              // Denominator: point^(trace_length / 16384) - 1.\n\n              // val *= denominator_invs[22].\n\n              val := mulmod(val, /*denominator_invs[22]*/ mload(0x3c20), PRIME)\n\n\n\n              // res += val * coefficients[120].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[120]*/ mload(0x1440), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for ecdsa/message_value0: column3_row11275 - column6_row21.\n\n              let val := addmod(\n\n                /*column3_row11275*/ mload(0x2040),\n\n                sub(PRIME, /*column6_row21*/ mload(0x26e0)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 16384) - 1.\n\n              // val *= denominator_invs[22].\n\n              val := mulmod(val, /*denominator_invs[22]*/ mload(0x3c20), PRIME)\n\n\n\n              // res += val * coefficients[121].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[121]*/ mload(0x1460), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for ecdsa/pubkey_value0: column3_row3083 - column6_row6.\n\n              let val := addmod(\n\n                /*column3_row3083*/ mload(0x1fe0),\n\n                sub(PRIME, /*column6_row6*/ mload(0x25c0)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 16384) - 1.\n\n              // val *= denominator_invs[22].\n\n              val := mulmod(val, /*denominator_invs[22]*/ mload(0x3c20), PRIME)\n\n\n\n              // res += val * coefficients[122].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[122]*/ mload(0x1480), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for bitwise/init_var_pool_addr: column3_row26 - initial_bitwise_addr.\n\n              let val := addmod(\n\n                /*column3_row26*/ mload(0x1dc0),\n\n                sub(PRIME, /*initial_bitwise_addr*/ mload(0x420)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point - 1.\n\n              // val *= denominator_invs[4].\n\n              val := mulmod(val, /*denominator_invs[4]*/ mload(0x39e0), PRIME)\n\n\n\n              // res += val * coefficients[123].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[123]*/ mload(0x14a0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for bitwise/step_var_pool_addr: column3_row58 - (column3_row26 + 1).\n\n              let val := addmod(\n\n                /*column3_row58*/ mload(0x1e40),\n\n                sub(PRIME, addmod(/*column3_row26*/ mload(0x1dc0), 1, PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: point^(trace_length / 128) - trace_generator^(3 * trace_length / 4).\n\n              // val *= domains[28].\n\n              val := mulmod(val, /*domains[28]*/ mload(0x3920), PRIME)\n\n              // Denominator: point^(trace_length / 32) - 1.\n\n              // val *= denominator_invs[16].\n\n              val := mulmod(val, /*denominator_invs[16]*/ mload(0x3b60), PRIME)\n\n\n\n              // res += val * coefficients[124].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[124]*/ mload(0x14c0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for bitwise/x_or_y_addr: column3_row42 - (column3_row122 + 1).\n\n              let val := addmod(\n\n                /*column3_row42*/ mload(0x1e00),\n\n                sub(PRIME, addmod(/*column3_row122*/ mload(0x1ec0), 1, PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 128) - 1.\n\n              // val *= denominator_invs[15].\n\n              val := mulmod(val, /*denominator_invs[15]*/ mload(0x3b40), PRIME)\n\n\n\n              // res += val * coefficients[125].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[125]*/ mload(0x14e0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for bitwise/next_var_pool_addr: column3_row154 - (column3_row42 + 1).\n\n              let val := addmod(\n\n                /*column3_row154*/ mload(0x1f00),\n\n                sub(PRIME, addmod(/*column3_row42*/ mload(0x1e00), 1, PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: point - trace_generator^(128 * (trace_length / 128 - 1)).\n\n              // val *= domains[18].\n\n              val := mulmod(val, /*domains[18]*/ mload(0x37e0), PRIME)\n\n              // Denominator: point^(trace_length / 128) - 1.\n\n              // val *= denominator_invs[15].\n\n              val := mulmod(val, /*denominator_invs[15]*/ mload(0x3b40), PRIME)\n\n\n\n              // res += val * coefficients[126].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[126]*/ mload(0x1500), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for bitwise/partition: bitwise__sum_var_0_0 + bitwise__sum_var_8_0 - column3_row27.\n\n              let val := addmod(\n\n                addmod(\n\n                  /*intermediate_value/bitwise/sum_var_0_0*/ mload(0x3060),\n\n                  /*intermediate_value/bitwise/sum_var_8_0*/ mload(0x3080),\n\n                  PRIME),\n\n                sub(PRIME, /*column3_row27*/ mload(0x1de0)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 32) - 1.\n\n              // val *= denominator_invs[16].\n\n              val := mulmod(val, /*denominator_invs[16]*/ mload(0x3b60), PRIME)\n\n\n\n              // res += val * coefficients[127].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[127]*/ mload(0x1520), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for bitwise/or_is_and_plus_xor: column3_row43 - (column3_row91 + column3_row123).\n\n              let val := addmod(\n\n                /*column3_row43*/ mload(0x1e20),\n\n                sub(\n\n                  PRIME,\n\n                  addmod(/*column3_row91*/ mload(0x1ea0), /*column3_row123*/ mload(0x1ee0), PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 128) - 1.\n\n              // val *= denominator_invs[15].\n\n              val := mulmod(val, /*denominator_invs[15]*/ mload(0x3b40), PRIME)\n\n\n\n              // res += val * coefficients[128].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[128]*/ mload(0x1540), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for bitwise/addition_is_xor_with_and: column1_row0 + column1_row32 - (column1_row96 + column1_row64 + column1_row64).\n\n              let val := addmod(\n\n                addmod(/*column1_row0*/ mload(0x1800), /*column1_row32*/ mload(0x1a20), PRIME),\n\n                sub(\n\n                  PRIME,\n\n                  addmod(\n\n                    addmod(/*column1_row96*/ mload(0x1b20), /*column1_row64*/ mload(0x1a60), PRIME),\n\n                    /*column1_row64*/ mload(0x1a60),\n\n                    PRIME)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: (point^(trace_length / 128) - trace_generator^(trace_length / 64)) * (point^(trace_length / 128) - trace_generator^(trace_length / 32)) * (point^(trace_length / 128) - trace_generator^(3 * trace_length / 64)) * (point^(trace_length / 128) - trace_generator^(trace_length / 16)) * (point^(trace_length / 128) - trace_generator^(5 * trace_length / 64)) * (point^(trace_length / 128) - trace_generator^(3 * trace_length / 32)) * (point^(trace_length / 128) - trace_generator^(7 * trace_length / 64)) * (point^(trace_length / 128) - trace_generator^(trace_length / 8)) * (point^(trace_length / 128) - trace_generator^(9 * trace_length / 64)) * (point^(trace_length / 128) - trace_generator^(5 * trace_length / 32)) * (point^(trace_length / 128) - trace_generator^(11 * trace_length / 64)) * (point^(trace_length / 128) - trace_generator^(3 * trace_length / 16)) * (point^(trace_length / 128) - trace_generator^(13 * trace_length / 64)) * (point^(trace_length / 128) - trace_generator^(7 * trace_length / 32)) * (point^(trace_length / 128) - trace_generator^(15 * trace_length / 64)) * domain17.\n\n              // val *= denominator_invs[24].\n\n              val := mulmod(val, /*denominator_invs[24]*/ mload(0x3c60), PRIME)\n\n\n\n              // res += val * coefficients[129].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[129]*/ mload(0x1560), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for bitwise/unique_unpacking192: (column1_row88 + column1_row120) * 16 - column1_row1.\n\n              let val := addmod(\n\n                mulmod(\n\n                  addmod(/*column1_row88*/ mload(0x1aa0), /*column1_row120*/ mload(0x1b60), PRIME),\n\n                  16,\n\n                  PRIME),\n\n                sub(PRIME, /*column1_row1*/ mload(0x1820)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 128) - 1.\n\n              // val *= denominator_invs[15].\n\n              val := mulmod(val, /*denominator_invs[15]*/ mload(0x3b40), PRIME)\n\n\n\n              // res += val * coefficients[130].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[130]*/ mload(0x1580), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for bitwise/unique_unpacking193: (column1_row90 + column1_row122) * 16 - column1_row65.\n\n              let val := addmod(\n\n                mulmod(\n\n                  addmod(/*column1_row90*/ mload(0x1ac0), /*column1_row122*/ mload(0x1b80), PRIME),\n\n                  16,\n\n                  PRIME),\n\n                sub(PRIME, /*column1_row65*/ mload(0x1a80)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 128) - 1.\n\n              // val *= denominator_invs[15].\n\n              val := mulmod(val, /*denominator_invs[15]*/ mload(0x3b40), PRIME)\n\n\n\n              // res += val * coefficients[131].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[131]*/ mload(0x15a0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for bitwise/unique_unpacking194: (column1_row92 + column1_row124) * 16 - column1_row33.\n\n              let val := addmod(\n\n                mulmod(\n\n                  addmod(/*column1_row92*/ mload(0x1ae0), /*column1_row124*/ mload(0x1ba0), PRIME),\n\n                  16,\n\n                  PRIME),\n\n                sub(PRIME, /*column1_row33*/ mload(0x1a40)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 128) - 1.\n\n              // val *= denominator_invs[15].\n\n              val := mulmod(val, /*denominator_invs[15]*/ mload(0x3b40), PRIME)\n\n\n\n              // res += val * coefficients[132].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[132]*/ mload(0x15c0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n              {\n\n              // Constraint expression for bitwise/unique_unpacking195: (column1_row94 + column1_row126) * 256 - column1_row97.\n\n              let val := addmod(\n\n                mulmod(\n\n                  addmod(/*column1_row94*/ mload(0x1b00), /*column1_row126*/ mload(0x1bc0), PRIME),\n\n                  256,\n\n                  PRIME),\n\n                sub(PRIME, /*column1_row97*/ mload(0x1b40)),\n\n                PRIME)\n\n\n\n              // Numerator: 1.\n\n              // val *= 1.\n\n              // Denominator: point^(trace_length / 128) - 1.\n\n              // val *= denominator_invs[15].\n\n              val := mulmod(val, /*denominator_invs[15]*/ mload(0x3b40), PRIME)\n\n\n\n              // res += val * coefficients[133].\n\n              res := addmod(res,\n\n                            mulmod(val, /*coefficients[133]*/ mload(0x15e0), PRIME),\n\n                            PRIME)\n\n              }\n\n\n\n            mstore(0, res)\n\n            return(0, 0x20)\n\n            }\n\n        }\n",
          "message": "CpuConstraintPoly.fallback uses assembly (CpuConstraintPoly.sol#94-4377)\n\t- CpuConstraintPoly.sol#96-4376\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.12;\n",
          "message": "Detected issues with version pragma in CpuConstraintPoly.sol:\n\t- pragma solidity^0.6.12 (CpuConstraintPoly.sol#5): it allows old versions\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.12;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "    fallback() external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 res;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "            let PRIME := 0x800000000000011000000000000000000000000000000000000000000000001\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "            calldatacopy(0x0, 0x0, /*Input data size*/ 0x2bc0)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "            calldatacopy(0x0, 0x0, /*Input data size*/ 0x2bc0)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 100,
          "vulnerability_to_line": null,
          "vulnerability_code": "            let point := /*oods_point*/ mload(0x460)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 100,
          "vulnerability_to_line": null,
          "vulnerability_code": "            let point := /*oods_point*/ mload(0x460)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "            function expmod(base, exponent, modulus) -> result {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "            function expmod(base, exponent, modulus) -> result {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "            function expmod(base, exponent, modulus) -> result {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "              let p := /*expmod_context*/ 0x3fa0\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "              mstore(p, 0x20)                 // Length of Base.\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "              mstore(add(p, 0x20), 0x20)      // Length of Exponent.\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "              mstore(add(p, 0x20), 0x20)      // Length of Exponent.\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "              mstore(add(p, 0x40), 0x20)      // Length of Modulus.\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "              mstore(add(p, 0x40), 0x20)      // Length of Modulus.\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 106,
          "vulnerability_to_line": null,
          "vulnerability_code": "              mstore(add(p, 0x60), base)      // Base.\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 106,
          "vulnerability_to_line": null,
          "vulnerability_code": "              mstore(add(p, 0x60), base)      // Base.\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "              mstore(add(p, 0x80), exponent)  // Exponent.\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "              mstore(add(p, 0x80), exponent)  // Exponent.\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "              mstore(add(p, 0xa0), modulus)   // Modulus.\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "              mstore(add(p, 0xa0), modulus)   // Modulus.\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "              if iszero(staticcall(not(0), 0x05, p, 0xc0, p, 0x20)) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "              if iszero(staticcall(not(0), 0x05, p, 0xc0, p, 0x20)) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "              if iszero(staticcall(not(0), 0x05, p, 0xc0, p, 0x20)) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "              if iszero(staticcall(not(0), 0x05, p, 0xc0, p, 0x20)) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "              if iszero(staticcall(not(0), 0x05, p, 0xc0, p, 0x20)) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "                revert(0, 0)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "                revert(0, 0)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "              result := mload(p)\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}