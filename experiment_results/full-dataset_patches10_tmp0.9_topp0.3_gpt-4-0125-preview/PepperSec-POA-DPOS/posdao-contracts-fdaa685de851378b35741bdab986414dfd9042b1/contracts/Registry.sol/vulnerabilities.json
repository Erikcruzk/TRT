{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _certifierContract, address _owner) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 152,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_certifierContract != address(0));\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 153,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32 serviceTransactionChecker = keccak256(\"service_transaction_checker\");\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 154,
          "vulnerability_to_line": null,
          "vulnerability_code": "        entries[serviceTransactionChecker].data[\"A\"] = bytes20(_certifierContract);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (_owner != address(0)) {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 156,
          "vulnerability_to_line": null,
          "vulnerability_code": "            owner = _owner;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "            entries[serviceTransactionChecker].owner = _owner;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": null,
          "vulnerability_code": "        } else {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 159,
          "vulnerability_to_line": null,
          "vulnerability_code": "            entries[serviceTransactionChecker].owner = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!entries[_name].deleted && entries[_name].owner == address(0));\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 131,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 132,
          "vulnerability_to_line": null,
          "vulnerability_code": "            !entries[keccak256(bytes(_name))].deleted &&\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 133,
          "vulnerability_to_line": null,
          "vulnerability_code": "            entries[keccak256(bytes(_name))].owner != address(0)\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 139,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 140,
          "vulnerability_to_line": null,
          "vulnerability_code": "            !entries[_name].deleted &&\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": null,
          "vulnerability_code": "            entries[_name].owner != address(0)\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 244,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 245,
          "vulnerability_to_line": null,
          "vulnerability_code": "            entries[sha3Name].reverse != address(0) &&\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 246,
          "vulnerability_to_line": null,
          "vulnerability_code": "            keccak256(bytes(reverses[entries[sha3Name].reverse])) == sha3Name\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 247,
          "vulnerability_to_line": null,
          "vulnerability_code": "        ) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 248,
          "vulnerability_to_line": null,
          "vulnerability_code": "            delete reverses[entries[sha3Name].reverse];\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 249,
          "vulnerability_to_line": null,
          "vulnerability_code": "            emit ReverseRemoved(_name, entries[sha3Name].reverse);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 250,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_35"
      ],
      "vulnerability_findings": [
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.5.9;\n",
          "message": "Detected issues with version pragma in Registry.sol:\n\t- pragma solidity0.5.9 (Registry.sol#3): it allows old versions\n\t- pragma solidity0.5.9 (Registry.sol#27): it allows old versions\n\t- pragma solidity0.5.9 (Registry.sol#43): it allows old versions\n\t- pragma solidity0.5.9 (Registry.sol#73): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setOwner(address _new) external onlyOwner {\n",
          "message": "Parameter '_new' of Owned.setOwner (Registry.sol#87) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 309,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getData(bytes32 _name, string calldata _key)\n",
          "message": "Parameter '_name' of Registry.getData (Registry.sol#309) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 309,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getData(bytes32 _name, string calldata _key)\n",
          "message": "Parameter '_key' of Registry.getData (Registry.sol#309) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 318,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAddress(bytes32 _name, string calldata _key)\n",
          "message": "Parameter '_name' of Registry.getAddress (Registry.sol#318) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 318,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAddress(bytes32 _name, string calldata _key)\n",
          "message": "Parameter '_key' of Registry.getAddress (Registry.sol#318) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 327,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getUint(bytes32 _name, string calldata _key)\n",
          "message": "Parameter '_name' of Registry.getUint (Registry.sol#327) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 327,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getUint(bytes32 _name, string calldata _key)\n",
          "message": "Parameter '_key' of Registry.getUint (Registry.sol#327) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 337,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getOwner(bytes32 _name)\n",
          "message": "Parameter '_name' of Registry.getOwner (Registry.sol#337) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 347,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function hasReverse(bytes32 _name)\n",
          "message": "Parameter '_name' of Registry.hasReverse (Registry.sol#347) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 356,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getReverse(bytes32 _name)\n",
          "message": "Parameter '_name' of Registry.getReverse (Registry.sol#356) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 365,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function canReverse(address _data)\n",
          "message": "Parameter '_data' of Registry.canReverse (Registry.sol#365) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 373,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function reverse(address _data)\n",
          "message": "Parameter '_data' of Registry.reverse (Registry.sol#373) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _certifierContract, address _owner) public {\n",
          "message": "Parameter '_certifierContract' of Registry. (Registry.sol#151) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _certifierContract, address _owner) public {\n",
          "message": "Parameter '_owner' of Registry. (Registry.sol#151) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 164,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function reserve(bytes32 _name)\n",
          "message": "Parameter '_name' of Registry.reserve (Registry.sol#164) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 176,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(bytes32 _name, address _to)\n",
          "message": "Parameter '_name' of Registry.transfer (Registry.sol#176) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 176,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(bytes32 _name, address _to)\n",
          "message": "Parameter '_to' of Registry.transfer (Registry.sol#176) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 187,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function drop(bytes32 _name)\n",
          "message": "Parameter '_name' of Registry.drop (Registry.sol#187) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 203,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setData(bytes32 _name, string calldata _key, bytes32 _value)\n",
          "message": "Parameter '_name' of Registry.setData (Registry.sol#203) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 203,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setData(bytes32 _name, string calldata _key, bytes32 _value)\n",
          "message": "Parameter '_key' of Registry.setData (Registry.sol#203) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 203,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setData(bytes32 _name, string calldata _key, bytes32 _value)\n",
          "message": "Parameter '_value' of Registry.setData (Registry.sol#203) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 214,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setAddress(bytes32 _name, string calldata _key, address _value)\n",
          "message": "Parameter '_name' of Registry.setAddress (Registry.sol#214) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 214,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setAddress(bytes32 _name, string calldata _key, address _value)\n",
          "message": "Parameter '_key' of Registry.setAddress (Registry.sol#214) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 214,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setAddress(bytes32 _name, string calldata _key, address _value)\n",
          "message": "Parameter '_value' of Registry.setAddress (Registry.sol#214) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 225,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setUint(bytes32 _name, string calldata _key, uint _value)\n",
          "message": "Parameter '_name' of Registry.setUint (Registry.sol#225) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 225,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setUint(bytes32 _name, string calldata _key, uint _value)\n",
          "message": "Parameter '_key' of Registry.setUint (Registry.sol#225) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 225,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setUint(bytes32 _name, string calldata _key, uint _value)\n",
          "message": "Parameter '_value' of Registry.setUint (Registry.sol#225) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 237,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function proposeReverse(string calldata _name, address _who)\n",
          "message": "Parameter '_name' of Registry.proposeReverse (Registry.sol#237) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 237,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function proposeReverse(string calldata _name, address _who)\n",
          "message": "Parameter '_who' of Registry.proposeReverse (Registry.sol#237) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 256,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function confirmReverse(string calldata _name)\n",
          "message": "Parameter '_name' of Registry.confirmReverse (Registry.sol#256) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 267,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function confirmReverseAs(string calldata _name, address _who)\n",
          "message": "Parameter '_name' of Registry.confirmReverseAs (Registry.sol#267) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 267,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function confirmReverseAs(string calldata _name, address _who)\n",
          "message": "Parameter '_who' of Registry.confirmReverseAs (Registry.sol#267) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 288,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setFee(uint _amount)\n",
          "message": "Parameter '_amount' of Registry.setFee (Registry.sol#288) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 381,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function reserved(bytes32 _name)\n",
          "message": "Parameter '_name' of Registry.reserved (Registry.sol#381) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Registry is Owned, IMetadataRegistry, IOwnerRegistry, IReverseRegistry {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setOwner(address _new) external onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 203,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setData(bytes32 _name, string calldata _key, bytes32 _value)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 203,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setData(bytes32 _name, string calldata _key, bytes32 _value)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 203,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setData(bytes32 _name, string calldata _key, bytes32 _value)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "        whenEntryRaw(_name)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 206,
          "vulnerability_to_line": null,
          "vulnerability_code": "        onlyOwnerOf(_name)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 207,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns (bool success)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 209,
          "vulnerability_to_line": null,
          "vulnerability_code": "        entries[_name].data[_key] = _value;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 209,
          "vulnerability_to_line": null,
          "vulnerability_code": "        entries[_name].data[_key] = _value;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 210,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit DataChanged(_name, _key, _key);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 210,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit DataChanged(_name, _key, _key);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 210,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit DataChanged(_name, _key, _key);\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "UNKNOWN INSTRUCTION: SHR"
      ],
      "vulnerability_findings": []
    }
  }
}