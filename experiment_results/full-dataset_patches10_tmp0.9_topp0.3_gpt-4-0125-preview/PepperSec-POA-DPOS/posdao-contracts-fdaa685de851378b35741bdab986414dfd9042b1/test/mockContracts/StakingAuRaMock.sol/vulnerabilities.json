{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1044,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < _initialStakingAddresses.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1044,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < _initialStakingAddresses.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 439,
          "vulnerability_to_line": null,
          "vulnerability_code": "                if (newStakeAmount == 0 && _poolStakingAddress != unremovableStakingAddress) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 440,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    _addPoolToBeRemoved(_poolStakingAddress);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 441,
          "vulnerability_to_line": null,
          "vulnerability_code": "                }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 953,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (pools.length > indexToDelete && pools[indexToDelete] == _stakingAddress) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 954,
          "vulnerability_to_line": null,
          "vulnerability_code": "            intStorage[POOLS_LIKELIHOOD_SUM] -= likelihood[indexToDelete];\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 955,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (intStorage[POOLS_LIKELIHOOD_SUM] < 0) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 956,
          "vulnerability_to_line": null,
          "vulnerability_code": "                intStorage[POOLS_LIKELIHOOD_SUM] = 0;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 957,
          "vulnerability_to_line": null,
          "vulnerability_code": "            }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 958,
          "vulnerability_to_line": null,
          "vulnerability_code": "            pools[indexToDelete] = pools[pools.length - 1];\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 959,
          "vulnerability_to_line": null,
          "vulnerability_code": "            likelihood[indexToDelete] = likelihood[pools.length - 1];\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 960,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _setPoolToBeElectedIndex(pools[indexToDelete], indexToDelete);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 961,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _setPoolToBeElectedIndex(_stakingAddress, 0);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 962,
          "vulnerability_to_line": null,
          "vulnerability_code": "            pools.length--;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 974,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (pools.length > indexToDelete && pools[indexToDelete] == _stakingAddress) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 975,
          "vulnerability_to_line": null,
          "vulnerability_code": "            pools[indexToDelete] = pools[pools.length - 1];\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 976,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _setPoolToBeRemovedIndex(pools[indexToDelete], indexToDelete);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 977,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _setPoolToBeRemovedIndex(_stakingAddress, 0);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 978,
          "vulnerability_to_line": null,
          "vulnerability_code": "            pools.length--;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 979,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 988,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (pools.length > indexToRemove && pools[indexToRemove] == _stakingAddress) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 989,
          "vulnerability_to_line": null,
          "vulnerability_code": "            pools[indexToRemove] = pools[pools.length - 1];\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 990,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _setPoolIndex(pools[indexToRemove], indexToRemove);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 991,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _setPoolIndex(_stakingAddress, 0);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 992,
          "vulnerability_to_line": null,
          "vulnerability_code": "            pools.length--;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 993,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1009,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (pools.length > indexToRemove && pools[indexToRemove] == _stakingAddress) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1010,
          "vulnerability_to_line": null,
          "vulnerability_code": "            pools[indexToRemove] = pools[pools.length - 1];\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1011,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _setPoolInactiveIndex(pools[indexToRemove], indexToRemove);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1012,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _setPoolInactiveIndex(_stakingAddress, 0);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1013,
          "vulnerability_to_line": null,
          "vulnerability_code": "            pools.length--;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1014,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1163,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (delegators.length != 0 && delegators[indexToRemove] == _delegator) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1164,
          "vulnerability_to_line": null,
          "vulnerability_code": "            delegators[indexToRemove] = delegators[delegators.length - 1];\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1165,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _setPoolDelegatorIndex(_poolStakingAddress, delegators[indexToRemove], indexToRemove);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1166,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _setPoolDelegatorIndex(_poolStakingAddress, _delegator, 0);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1167,
          "vulnerability_to_line": null,
          "vulnerability_code": "            delegators.length--;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1168,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1185,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (delegators.length != 0 && delegators[indexToRemove] == _delegator) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1186,
          "vulnerability_to_line": null,
          "vulnerability_code": "            delegators[indexToRemove] = delegators[delegators.length - 1];\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1187,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _setPoolDelegatorInactiveIndex(_poolStakingAddress, delegators[indexToRemove], indexToRemove);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1188,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _setPoolDelegatorInactiveIndex(_poolStakingAddress, _delegator, 0);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1189,
          "vulnerability_to_line": null,
          "vulnerability_code": "            delegators.length--;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1190,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 962,
          "vulnerability_to_line": null,
          "vulnerability_code": "            pools.length--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 963,
          "vulnerability_to_line": null,
          "vulnerability_code": "            likelihood.length--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 978,
          "vulnerability_to_line": null,
          "vulnerability_code": "            pools.length--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 992,
          "vulnerability_to_line": null,
          "vulnerability_code": "            pools.length--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 1013,
          "vulnerability_to_line": null,
          "vulnerability_code": "            pools.length--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 1167,
          "vulnerability_to_line": null,
          "vulnerability_code": "            delegators.length--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 1189,
          "vulnerability_to_line": null,
          "vulnerability_code": "            delegators.length--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 321,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uintStorage[STAKING_EPOCH]++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1044,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < _initialStakingAddresses.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_251"
      ],
      "vulnerability_findings": [
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 385,
          "vulnerability_to_line": 396,
          "vulnerability_code": "    function withdraw(address _fromPoolStakingAddress, uint256 _amount) external gasPriceIsValid onlyInitialized {\n\n        address payable staker = msg.sender;\n\n        _withdraw(_fromPoolStakingAddress, staker, _amount);\n\n        IERC20Minting tokenContract = IERC20Minting(erc20TokenContract());\n\n        if (address(tokenContract) != address(0)) {\n\n            tokenContract.withdraw(staker, _amount);\n\n        } else {\n\n            require(boolStorage[ERC20_RESTRICTED]);\n\n            staker.transfer(_amount);\n\n        }\n\n        emit Withdrawn(_fromPoolStakingAddress, staker, stakingEpoch(), _amount);\n",
          "message": "StakingBase.withdraw (StakingAuRaMock.sol#385-396) sends eth to arbitrary user\n\tDangerous calls:\n\t- staker.transfer(_amount) (StakingAuRaMock.sol#393)\n"
        },
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 480,
          "vulnerability_to_line": 517,
          "vulnerability_code": "    function claimOrderedWithdraw(address _poolStakingAddress) external gasPriceIsValid onlyInitialized {\n\n        IValidatorSet validatorSetContract = validatorSetContract();\n\n        uint256 epoch = stakingEpoch();\n\n        address payable staker = msg.sender;\n\n\n\n        require(_poolStakingAddress != address(0));\n\n        require(epoch > orderWithdrawEpoch(_poolStakingAddress, staker));\n\n        require(_isWithdrawAllowed(validatorSetContract.miningByStakingAddress(_poolStakingAddress)));\n\n\n\n        uint256 claimAmount = orderedWithdrawAmount(_poolStakingAddress, staker);\n\n        require(claimAmount != 0);\n\n\n\n        uint256 resultingStakeAmount = stakeAmount(_poolStakingAddress, staker).sub(claimAmount);\n\n\n\n        _setOrderedWithdrawAmount(_poolStakingAddress, staker, 0);\n\n        _setOrderedWithdrawAmountTotal(\n\n            _poolStakingAddress,\n\n            orderedWithdrawAmountTotal(_poolStakingAddress).sub(claimAmount)\n\n        );\n\n        _setStakeAmount(_poolStakingAddress, staker, resultingStakeAmount);\n\n        _setStakeAmountTotal(_poolStakingAddress, stakeAmountTotal(_poolStakingAddress).sub(claimAmount));\n\n\n\n        if (resultingStakeAmount == 0) {\n\n            _withdrawCheckPool(_poolStakingAddress, staker);\n\n        }\n\n\n\n        _setLikelihood(_poolStakingAddress);\n\n\n\n        IERC20Minting tokenContract = IERC20Minting(erc20TokenContract());\n\n        if (address(tokenContract) != address(0)) {\n\n            tokenContract.withdraw(staker, claimAmount);\n\n        } else {\n\n            require(boolStorage[ERC20_RESTRICTED]);\n\n            staker.transfer(claimAmount);\n\n        }\n\n\n\n        emit Claimed(_poolStakingAddress, staker, epoch, claimAmount);\n",
          "message": "StakingBase.claimOrderedWithdraw (StakingAuRaMock.sol#480-517) sends eth to arbitrary user\n\tDangerous calls:\n\t- staker.transfer(claimAmount) (StakingAuRaMock.sol#513)\n"
        },
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address internal _owner;\n",
          "message": "EternalStorage._owner (StakingAuRaMock.sol#97) is never initialized. It is used in:\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 1024,
          "vulnerability_to_line": 1056,
          "vulnerability_code": "    function _initialize(\n\n        address _validatorSetContract,\n\n        address[] memory _initialStakingAddresses,\n\n        uint256 _delegatorMinStake,\n\n        uint256 _candidateMinStake,\n\n        bool _erc20Restricted\n\n    ) internal {\n\n        require(!isInitialized()); // initialization can only be done once\n\n        require(_validatorSetContract != address(0));\n\n        require(_initialStakingAddresses.length > 0);\n\n        require(_delegatorMinStake != 0);\n\n        require(_candidateMinStake != 0);\n\n\n\n        IBlockReward blockRewardContract = IBlockReward(IValidatorSet(_validatorSetContract).blockRewardContract());\n\n        require(MAX_DELEGATORS_PER_POOL % blockRewardContract.DELEGATORS_ALIQUOT() == 0);\n\n\n\n        addressStorage[VALIDATOR_SET_CONTRACT] = _validatorSetContract;\n\n\n\n        address unremovableStakingAddress = IValidatorSet(_validatorSetContract).unremovableValidator();\n\n\n\n        for (uint256 i = 0; i < _initialStakingAddresses.length; i++) {\n\n            require(_initialStakingAddresses[i] != address(0));\n\n            _addPoolActive(_initialStakingAddresses[i], false);\n\n            if (_initialStakingAddresses[i] != unremovableStakingAddress) {\n\n                _addPoolToBeRemoved(_initialStakingAddresses[i]);\n\n            }\n\n        }\n\n\n\n        _setDelegatorMinStake(_delegatorMinStake);\n\n        _setCandidateMinStake(_candidateMinStake);\n\n\n\n        boolStorage[ERC20_RESTRICTED] = _erc20Restricted;\n",
          "message": "Reentrancy in StakingBase._initialize (StakingAuRaMock.sol#1024-1056):\n\tExternal calls:\n\t- blockRewardContract = IBlockReward(IValidatorSet(_validatorSetContract).blockRewardContract()) (StakingAuRaMock.sol#1037)\n\t- require(bool)(MAX_DELEGATORS_PER_POOL % blockRewardContract.DELEGATORS_ALIQUOT() == 0) (StakingAuRaMock.sol#1038)\n\tState variables written after the call(s):\n\t- addressStorage (StakingAuRaMock.sol#1040)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 1296,
          "vulnerability_to_line": 1333,
          "vulnerability_code": "    function _stake(address _poolStakingAddress, address _staker, uint256 _amount) internal {\n\n        IValidatorSet validatorSet = validatorSetContract();\n\n        address poolMiningAddress = validatorSet.miningByStakingAddress(_poolStakingAddress);\n\n\n\n        require(poolMiningAddress != address(0));\n\n        require(_poolStakingAddress != address(0));\n\n        require(_amount != 0);\n\n        require(!validatorSet.isValidatorBanned(poolMiningAddress));\n\n        require(areStakeAndWithdrawAllowed());\n\n\n\n        uint256 newStakeAmount = stakeAmount(_poolStakingAddress, _staker).add(_amount);\n\n        if (_staker == _poolStakingAddress) {\n\n            require(newStakeAmount >= getCandidateMinStake()); // the staked amount must be at least CANDIDATE_MIN_STAKE\n\n        } else {\n\n            require(newStakeAmount >= getDelegatorMinStake()); // the staked amount must be at least DELEGATOR_MIN_STAKE\n\n\n\n            // The delegator cannot stake into the pool of the candidate which hasn't self-staked.\n\n            // Also, that candidate shouldn't want to withdraw all his funds.\n\n            require(stakeAmountMinusOrderedWithdraw(_poolStakingAddress, _poolStakingAddress) != 0);\n\n        }\n\n        _setStakeAmount(_poolStakingAddress, _staker, newStakeAmount);\n\n        _setStakeAmountByCurrentEpoch(\n\n            _poolStakingAddress,\n\n            _staker,\n\n            stakeAmountByCurrentEpoch(_poolStakingAddress, _staker).add(_amount)\n\n        );\n\n        _setStakeAmountTotal(_poolStakingAddress, stakeAmountTotal(_poolStakingAddress).add(_amount));\n\n\n\n        if (_staker == _poolStakingAddress) { // `staker` makes a stake for himself and becomes a candidate\n\n            // Add `_poolStakingAddress` to the array of pools\n\n            _addPoolActive(_poolStakingAddress, _poolStakingAddress != validatorSet.unremovableValidator());\n\n        } else {\n\n            // Add `_staker` to the array of pool's delegators\n\n            _addPoolDelegator(_poolStakingAddress, _staker);\n\n        }\n\n\n\n        _setLikelihood(_poolStakingAddress);\n",
          "message": "Reentrancy in StakingBase._stake (StakingAuRaMock.sol#1296-1333):\n\tExternal calls:\n\t- poolMiningAddress = validatorSet.miningByStakingAddress(_poolStakingAddress) (StakingAuRaMock.sol#1298)\n\t- require(bool)(! validatorSet.isValidatorBanned(poolMiningAddress)) (StakingAuRaMock.sol#1303)\n\t- _addPoolActive(_poolStakingAddress,_poolStakingAddress != validatorSet.unremovableValidator()) (StakingAuRaMock.sol#1326)\n\tState variables written after the call(s):\n\t- intArrayStorage (StakingAuRaMock.sol#1332)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 1340,
          "vulnerability_to_line": 1370,
          "vulnerability_code": "    function _withdraw(address _poolStakingAddress, address _staker, uint256 _amount) internal {\n\n        require(_poolStakingAddress != address(0));\n\n        require(_amount != 0);\n\n\n\n        // How much can `staker` withdraw from `_poolStakingAddress` at the moment?\n\n        require(_amount <= maxWithdrawAllowed(_poolStakingAddress, _staker));\n\n\n\n        uint256 currentStakeAmount = stakeAmount(_poolStakingAddress, _staker);\n\n        uint256 alreadyOrderedAmount = orderedWithdrawAmount(_poolStakingAddress, _staker);\n\n        uint256 resultingStakeAmount = currentStakeAmount.sub(alreadyOrderedAmount).sub(_amount);\n\n\n\n        // The amount to be withdrawn must be the whole staked amount or\n\n        // must not exceed the diff between the entire amount and MIN_STAKE\n\n        uint256 minAllowedStake = (_poolStakingAddress == _staker) ? getCandidateMinStake() : getDelegatorMinStake();\n\n        require(resultingStakeAmount == 0 || resultingStakeAmount >= minAllowedStake);\n\n\n\n        _setStakeAmount(_poolStakingAddress, _staker, currentStakeAmount.sub(_amount));\n\n        uint256 amountByEpoch = stakeAmountByCurrentEpoch(_poolStakingAddress, _staker);\n\n        _setStakeAmountByCurrentEpoch(\n\n            _poolStakingAddress,\n\n            _staker,\n\n            amountByEpoch >= _amount ? amountByEpoch - _amount : 0\n\n        );\n\n        _setStakeAmountTotal(_poolStakingAddress, stakeAmountTotal(_poolStakingAddress).sub(_amount));\n\n\n\n        if (resultingStakeAmount == 0) {\n\n            _withdrawCheckPool(_poolStakingAddress, _staker);\n\n        }\n\n\n\n        _setLikelihood(_poolStakingAddress);\n",
          "message": "Reentrancy in StakingBase._withdraw (StakingAuRaMock.sol#1340-1370):\n\tExternal calls:\n\t- require(bool)(_amount <= maxWithdrawAllowed(_poolStakingAddress,_staker)) (StakingAuRaMock.sol#1345)\n\tState variables written after the call(s):\n\t- uintStorage (StakingAuRaMock.sol#1356)\n\t- uintStorage (StakingAuRaMock.sol#1363)\n\t- uintStorage (StakingAuRaMock.sol#1358-1362)\n\t- uintStorage (StakingAuRaMock.sol#1358-1362)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 1340,
          "vulnerability_to_line": 1370,
          "vulnerability_code": "    function _withdraw(address _poolStakingAddress, address _staker, uint256 _amount) internal {\n\n        require(_poolStakingAddress != address(0));\n\n        require(_amount != 0);\n\n\n\n        // How much can `staker` withdraw from `_poolStakingAddress` at the moment?\n\n        require(_amount <= maxWithdrawAllowed(_poolStakingAddress, _staker));\n\n\n\n        uint256 currentStakeAmount = stakeAmount(_poolStakingAddress, _staker);\n\n        uint256 alreadyOrderedAmount = orderedWithdrawAmount(_poolStakingAddress, _staker);\n\n        uint256 resultingStakeAmount = currentStakeAmount.sub(alreadyOrderedAmount).sub(_amount);\n\n\n\n        // The amount to be withdrawn must be the whole staked amount or\n\n        // must not exceed the diff between the entire amount and MIN_STAKE\n\n        uint256 minAllowedStake = (_poolStakingAddress == _staker) ? getCandidateMinStake() : getDelegatorMinStake();\n\n        require(resultingStakeAmount == 0 || resultingStakeAmount >= minAllowedStake);\n\n\n\n        _setStakeAmount(_poolStakingAddress, _staker, currentStakeAmount.sub(_amount));\n\n        uint256 amountByEpoch = stakeAmountByCurrentEpoch(_poolStakingAddress, _staker);\n\n        _setStakeAmountByCurrentEpoch(\n\n            _poolStakingAddress,\n\n            _staker,\n\n            amountByEpoch >= _amount ? amountByEpoch - _amount : 0\n\n        );\n\n        _setStakeAmountTotal(_poolStakingAddress, stakeAmountTotal(_poolStakingAddress).sub(_amount));\n\n\n\n        if (resultingStakeAmount == 0) {\n\n            _withdrawCheckPool(_poolStakingAddress, _staker);\n\n        }\n\n\n\n        _setLikelihood(_poolStakingAddress);\n",
          "message": "Reentrancy in StakingBase._withdraw (StakingAuRaMock.sol#1340-1370):\n\tExternal calls:\n\t- require(bool)(_amount <= maxWithdrawAllowed(_poolStakingAddress,_staker)) (StakingAuRaMock.sol#1345)\n\t- _withdrawCheckPool(_poolStakingAddress,_staker) (StakingAuRaMock.sol#1366)\n\tState variables written after the call(s):\n\t- intArrayStorage (StakingAuRaMock.sol#1369)\n\t- intStorage (StakingAuRaMock.sol#1369)\n\t- uintStorage (StakingAuRaMock.sol#1366)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 480,
          "vulnerability_to_line": 517,
          "vulnerability_code": "    function claimOrderedWithdraw(address _poolStakingAddress) external gasPriceIsValid onlyInitialized {\n\n        IValidatorSet validatorSetContract = validatorSetContract();\n\n        uint256 epoch = stakingEpoch();\n\n        address payable staker = msg.sender;\n\n\n\n        require(_poolStakingAddress != address(0));\n\n        require(epoch > orderWithdrawEpoch(_poolStakingAddress, staker));\n\n        require(_isWithdrawAllowed(validatorSetContract.miningByStakingAddress(_poolStakingAddress)));\n\n\n\n        uint256 claimAmount = orderedWithdrawAmount(_poolStakingAddress, staker);\n\n        require(claimAmount != 0);\n\n\n\n        uint256 resultingStakeAmount = stakeAmount(_poolStakingAddress, staker).sub(claimAmount);\n\n\n\n        _setOrderedWithdrawAmount(_poolStakingAddress, staker, 0);\n\n        _setOrderedWithdrawAmountTotal(\n\n            _poolStakingAddress,\n\n            orderedWithdrawAmountTotal(_poolStakingAddress).sub(claimAmount)\n\n        );\n\n        _setStakeAmount(_poolStakingAddress, staker, resultingStakeAmount);\n\n        _setStakeAmountTotal(_poolStakingAddress, stakeAmountTotal(_poolStakingAddress).sub(claimAmount));\n\n\n\n        if (resultingStakeAmount == 0) {\n\n            _withdrawCheckPool(_poolStakingAddress, staker);\n\n        }\n\n\n\n        _setLikelihood(_poolStakingAddress);\n\n\n\n        IERC20Minting tokenContract = IERC20Minting(erc20TokenContract());\n\n        if (address(tokenContract) != address(0)) {\n\n            tokenContract.withdraw(staker, claimAmount);\n\n        } else {\n\n            require(boolStorage[ERC20_RESTRICTED]);\n\n            staker.transfer(claimAmount);\n\n        }\n\n\n\n        emit Claimed(_poolStakingAddress, staker, epoch, claimAmount);\n",
          "message": "Reentrancy in StakingBase.claimOrderedWithdraw (StakingAuRaMock.sol#480-517):\n\tExternal calls:\n\t- require(bool)(_isWithdrawAllowed(validatorSetContract.miningByStakingAddress(_poolStakingAddress))) (StakingAuRaMock.sol#487)\n\tState variables written after the call(s):\n\t- uintStorage (StakingAuRaMock.sol#494)\n\t- uintStorage (StakingAuRaMock.sol#495-498)\n\t- uintStorage (StakingAuRaMock.sol#499)\n\t- uintStorage (StakingAuRaMock.sol#500)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 480,
          "vulnerability_to_line": 517,
          "vulnerability_code": "    function claimOrderedWithdraw(address _poolStakingAddress) external gasPriceIsValid onlyInitialized {\n\n        IValidatorSet validatorSetContract = validatorSetContract();\n\n        uint256 epoch = stakingEpoch();\n\n        address payable staker = msg.sender;\n\n\n\n        require(_poolStakingAddress != address(0));\n\n        require(epoch > orderWithdrawEpoch(_poolStakingAddress, staker));\n\n        require(_isWithdrawAllowed(validatorSetContract.miningByStakingAddress(_poolStakingAddress)));\n\n\n\n        uint256 claimAmount = orderedWithdrawAmount(_poolStakingAddress, staker);\n\n        require(claimAmount != 0);\n\n\n\n        uint256 resultingStakeAmount = stakeAmount(_poolStakingAddress, staker).sub(claimAmount);\n\n\n\n        _setOrderedWithdrawAmount(_poolStakingAddress, staker, 0);\n\n        _setOrderedWithdrawAmountTotal(\n\n            _poolStakingAddress,\n\n            orderedWithdrawAmountTotal(_poolStakingAddress).sub(claimAmount)\n\n        );\n\n        _setStakeAmount(_poolStakingAddress, staker, resultingStakeAmount);\n\n        _setStakeAmountTotal(_poolStakingAddress, stakeAmountTotal(_poolStakingAddress).sub(claimAmount));\n\n\n\n        if (resultingStakeAmount == 0) {\n\n            _withdrawCheckPool(_poolStakingAddress, staker);\n\n        }\n\n\n\n        _setLikelihood(_poolStakingAddress);\n\n\n\n        IERC20Minting tokenContract = IERC20Minting(erc20TokenContract());\n\n        if (address(tokenContract) != address(0)) {\n\n            tokenContract.withdraw(staker, claimAmount);\n\n        } else {\n\n            require(boolStorage[ERC20_RESTRICTED]);\n\n            staker.transfer(claimAmount);\n\n        }\n\n\n\n        emit Claimed(_poolStakingAddress, staker, epoch, claimAmount);\n",
          "message": "Reentrancy in StakingBase.claimOrderedWithdraw (StakingAuRaMock.sol#480-517):\n\tExternal calls:\n\t- require(bool)(_isWithdrawAllowed(validatorSetContract.miningByStakingAddress(_poolStakingAddress))) (StakingAuRaMock.sol#487)\n\t- _withdrawCheckPool(_poolStakingAddress,staker) (StakingAuRaMock.sol#503)\n\tState variables written after the call(s):\n\t- intArrayStorage (StakingAuRaMock.sol#506)\n\t- intStorage (StakingAuRaMock.sol#506)\n\t- uintStorage (StakingAuRaMock.sol#503)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 1511,
          "vulnerability_to_line": 1537,
          "vulnerability_code": "    function initialize(\n\n        address _validatorSetContract,\n\n        address[] calldata _initialStakingAddresses,\n\n        uint256 _delegatorMinStake,\n\n        uint256 _candidateMinStake,\n\n        uint256 _stakingEpochDuration,\n\n        uint256 _stakingEpochStartBlock,\n\n        uint256 _stakeWithdrawDisallowPeriod,\n\n        bool _erc20Restricted\n\n    ) external {\n\n        require(_stakingEpochDuration != 0);\n\n        require(_stakingEpochDuration > _stakeWithdrawDisallowPeriod);\n\n        IValidatorSet validatorSet = IValidatorSet(_validatorSetContract);\n\n        IBlockReward blockReward = IBlockReward(validatorSet.blockRewardContract());\n\n        require(_stakingEpochDuration >= validatorSet.MAX_VALIDATORS() * blockReward.DELEGATORS_ALIQUOT() * 2 + 1);\n\n        require(_stakeWithdrawDisallowPeriod != 0);\n\n        super._initialize(\n\n            _validatorSetContract,\n\n            _initialStakingAddresses,\n\n            _delegatorMinStake,\n\n            _candidateMinStake,\n\n            _erc20Restricted\n\n        );\n\n        uintStorage[STAKING_EPOCH_DURATION] = _stakingEpochDuration;\n\n        uintStorage[STAKE_WITHDRAW_DISALLOW_PERIOD] = _stakeWithdrawDisallowPeriod;\n\n        uintStorage[STAKING_EPOCH_START_BLOCK] = _stakingEpochStartBlock;\n",
          "message": "Reentrancy in StakingAuRa.initialize (StakingAuRaMock.sol#1511-1537):\n\tExternal calls:\n\t- blockReward = IBlockReward(validatorSet.blockRewardContract()) (StakingAuRaMock.sol#1524)\n\t- require(bool)(_stakingEpochDuration >= validatorSet.MAX_VALIDATORS() * blockReward.DELEGATORS_ALIQUOT() * 2 + 1) (StakingAuRaMock.sol#1525)\n\t- super._initialize(_validatorSetContract,_initialStakingAddresses,_delegatorMinStake,_candidateMinStake,_erc20Restricted) (StakingAuRaMock.sol#1527-1533)\n\tState variables written after the call(s):\n\t- uintStorage (StakingAuRaMock.sol#1534)\n\t- uintStorage (StakingAuRaMock.sol#1535)\n\t- uintStorage (StakingAuRaMock.sol#1536)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 352,
          "vulnerability_to_line": 362,
          "vulnerability_code": "    function moveStake(\n\n        address _fromPoolStakingAddress,\n\n        address _toPoolStakingAddress,\n\n        uint256 _amount\n\n    ) external gasPriceIsValid onlyInitialized {\n\n        require(_fromPoolStakingAddress != _toPoolStakingAddress);\n\n        address staker = msg.sender;\n\n        _withdraw(_fromPoolStakingAddress, staker, _amount);\n\n        _stake(_toPoolStakingAddress, staker, _amount);\n\n        emit StakeMoved(_fromPoolStakingAddress, _toPoolStakingAddress, staker, stakingEpoch(), _amount);\n",
          "message": "Reentrancy in StakingBase.moveStake (StakingAuRaMock.sol#352-362):\n\tExternal calls:\n\t- _withdraw(_fromPoolStakingAddress,staker,_amount) (StakingAuRaMock.sol#359)\n\t- _stake(_toPoolStakingAddress,staker,_amount) (StakingAuRaMock.sol#360)\n\tState variables written after the call(s):\n\t- addressArrayStorage (StakingAuRaMock.sol#360)\n\t- intArrayStorage (StakingAuRaMock.sol#360)\n\t- intStorage (StakingAuRaMock.sol#360)\n\t- uintStorage (StakingAuRaMock.sol#360)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 406,
          "vulnerability_to_line": 475,
          "vulnerability_code": "    function orderWithdraw(address _poolStakingAddress, int256 _amount) external gasPriceIsValid onlyInitialized {\n\n        IValidatorSet validatorSetContract = validatorSetContract();\n\n\n\n        require(_poolStakingAddress != address(0));\n\n        require(_amount != 0);\n\n        require(_isWithdrawAllowed(validatorSetContract.miningByStakingAddress(_poolStakingAddress)));\n\n\n\n        address staker = msg.sender;\n\n\n\n        // How much can `staker` order for withdrawal from `_poolStakingAddress` at the moment?\n\n        require(_amount < 0 || uint256(_amount) <= maxWithdrawOrderAllowed(_poolStakingAddress, staker));\n\n\n\n        uint256 alreadyOrderedAmount = orderedWithdrawAmount(_poolStakingAddress, staker);\n\n\n\n        require(_amount > 0 || uint256(-_amount) <= alreadyOrderedAmount);\n\n\n\n        uint256 newOrderedAmount;\n\n        if (_amount > 0) {\n\n            newOrderedAmount = alreadyOrderedAmount.add(uint256(_amount));\n\n        } else {\n\n            newOrderedAmount = alreadyOrderedAmount.sub(uint256(-_amount));\n\n        }\n\n        _setOrderedWithdrawAmount(_poolStakingAddress, staker, newOrderedAmount);\n\n\n\n        // The amount to be withdrawn must be the whole staked amount or\n\n        // must not exceed the diff between the entire amount and MIN_STAKE\n\n        uint256 newStakeAmount = stakeAmount(_poolStakingAddress, staker).sub(newOrderedAmount);\n\n        if (staker == _poolStakingAddress) {\n\n            require(newStakeAmount == 0 || newStakeAmount >= getCandidateMinStake());\n\n\n\n            address unremovableStakingAddress = validatorSetContract.unremovableValidator();\n\n\n\n            if (_amount > 0) {\n\n                if (newStakeAmount == 0 && _poolStakingAddress != unremovableStakingAddress) {\n\n                    _addPoolToBeRemoved(_poolStakingAddress);\n\n                }\n\n            } else {\n\n                _addPoolActive(_poolStakingAddress, _poolStakingAddress != unremovableStakingAddress);\n\n            }\n\n        } else {\n\n            require(newStakeAmount == 0 || newStakeAmount >= getDelegatorMinStake());\n\n\n\n            if (_amount > 0) {\n\n                if (newStakeAmount == 0) {\n\n                    _removePoolDelegator(_poolStakingAddress, staker);\n\n                }\n\n            } else {\n\n                _addPoolDelegator(_poolStakingAddress, staker);\n\n            }\n\n        }\n\n\n\n        // Set total ordered amount for this pool\n\n        alreadyOrderedAmount = orderedWithdrawAmountTotal(_poolStakingAddress);\n\n        if (_amount > 0) {\n\n            newOrderedAmount = alreadyOrderedAmount.add(uint256(_amount));\n\n        } else {\n\n            newOrderedAmount = alreadyOrderedAmount.sub(uint256(-_amount));\n\n        }\n\n        _setOrderedWithdrawAmountTotal(_poolStakingAddress, newOrderedAmount);\n\n\n\n        uint256 epoch = stakingEpoch();\n\n\n\n        if (_amount > 0) {\n\n            _setOrderWithdrawEpoch(_poolStakingAddress, staker, epoch);\n\n        }\n\n\n\n        _setLikelihood(_poolStakingAddress);\n\n\n\n        emit WithdrawalOrdered(_poolStakingAddress, staker, epoch, _amount);\n",
          "message": "Reentrancy in StakingBase.orderWithdraw (StakingAuRaMock.sol#406-475):\n\tExternal calls:\n\t- require(bool)(_isWithdrawAllowed(validatorSetContract.miningByStakingAddress(_poolStakingAddress))) (StakingAuRaMock.sol#411)\n\t- require(bool)(_amount < 0 || uint256(_amount) <= maxWithdrawOrderAllowed(_poolStakingAddress,staker)) (StakingAuRaMock.sol#416)\n\tState variables written after the call(s):\n\t- uintStorage (StakingAuRaMock.sol#428)\n\t- uintStorage (StakingAuRaMock.sol#450)\n\t- uintStorage (StakingAuRaMock.sol#453)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 406,
          "vulnerability_to_line": 475,
          "vulnerability_code": "    function orderWithdraw(address _poolStakingAddress, int256 _amount) external gasPriceIsValid onlyInitialized {\n\n        IValidatorSet validatorSetContract = validatorSetContract();\n\n\n\n        require(_poolStakingAddress != address(0));\n\n        require(_amount != 0);\n\n        require(_isWithdrawAllowed(validatorSetContract.miningByStakingAddress(_poolStakingAddress)));\n\n\n\n        address staker = msg.sender;\n\n\n\n        // How much can `staker` order for withdrawal from `_poolStakingAddress` at the moment?\n\n        require(_amount < 0 || uint256(_amount) <= maxWithdrawOrderAllowed(_poolStakingAddress, staker));\n\n\n\n        uint256 alreadyOrderedAmount = orderedWithdrawAmount(_poolStakingAddress, staker);\n\n\n\n        require(_amount > 0 || uint256(-_amount) <= alreadyOrderedAmount);\n\n\n\n        uint256 newOrderedAmount;\n\n        if (_amount > 0) {\n\n            newOrderedAmount = alreadyOrderedAmount.add(uint256(_amount));\n\n        } else {\n\n            newOrderedAmount = alreadyOrderedAmount.sub(uint256(-_amount));\n\n        }\n\n        _setOrderedWithdrawAmount(_poolStakingAddress, staker, newOrderedAmount);\n\n\n\n        // The amount to be withdrawn must be the whole staked amount or\n\n        // must not exceed the diff between the entire amount and MIN_STAKE\n\n        uint256 newStakeAmount = stakeAmount(_poolStakingAddress, staker).sub(newOrderedAmount);\n\n        if (staker == _poolStakingAddress) {\n\n            require(newStakeAmount == 0 || newStakeAmount >= getCandidateMinStake());\n\n\n\n            address unremovableStakingAddress = validatorSetContract.unremovableValidator();\n\n\n\n            if (_amount > 0) {\n\n                if (newStakeAmount == 0 && _poolStakingAddress != unremovableStakingAddress) {\n\n                    _addPoolToBeRemoved(_poolStakingAddress);\n\n                }\n\n            } else {\n\n                _addPoolActive(_poolStakingAddress, _poolStakingAddress != unremovableStakingAddress);\n\n            }\n\n        } else {\n\n            require(newStakeAmount == 0 || newStakeAmount >= getDelegatorMinStake());\n\n\n\n            if (_amount > 0) {\n\n                if (newStakeAmount == 0) {\n\n                    _removePoolDelegator(_poolStakingAddress, staker);\n\n                }\n\n            } else {\n\n                _addPoolDelegator(_poolStakingAddress, staker);\n\n            }\n\n        }\n\n\n\n        // Set total ordered amount for this pool\n\n        alreadyOrderedAmount = orderedWithdrawAmountTotal(_poolStakingAddress);\n\n        if (_amount > 0) {\n\n            newOrderedAmount = alreadyOrderedAmount.add(uint256(_amount));\n\n        } else {\n\n            newOrderedAmount = alreadyOrderedAmount.sub(uint256(-_amount));\n\n        }\n\n        _setOrderedWithdrawAmountTotal(_poolStakingAddress, newOrderedAmount);\n\n\n\n        uint256 epoch = stakingEpoch();\n\n\n\n        if (_amount > 0) {\n\n            _setOrderWithdrawEpoch(_poolStakingAddress, staker, epoch);\n\n        }\n\n\n\n        _setLikelihood(_poolStakingAddress);\n\n\n\n        emit WithdrawalOrdered(_poolStakingAddress, staker, epoch, _amount);\n",
          "message": "Reentrancy in StakingBase.orderWithdraw (StakingAuRaMock.sol#406-475):\n\tExternal calls:\n\t- require(bool)(_isWithdrawAllowed(validatorSetContract.miningByStakingAddress(_poolStakingAddress))) (StakingAuRaMock.sol#411)\n\t- require(bool)(_amount < 0 || uint256(_amount) <= maxWithdrawOrderAllowed(_poolStakingAddress,staker)) (StakingAuRaMock.sol#416)\n\t- unremovableStakingAddress = validatorSetContract.unremovableValidator() (StakingAuRaMock.sol#436)\n\tState variables written after the call(s):\n\t- uintStorage (StakingAuRaMock.sol#440)\n\t- uintStorage (StakingAuRaMock.sol#443)\n\t- uintStorage (StakingAuRaMock.sol#464)\n\t- uintStorage (StakingAuRaMock.sol#469)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 336,
          "vulnerability_to_line": 344,
          "vulnerability_code": "    function removeMyPool() external gasPriceIsValid onlyInitialized {\n\n        IValidatorSet validatorSet = validatorSetContract();\n\n        address stakingAddress = msg.sender;\n\n        address miningAddress = validatorSet.miningByStakingAddress(stakingAddress);\n\n        // initial validator cannot remove their pool during the initial staking epoch\n\n        require(stakingEpoch() > 0 || !validatorSet.isValidator(miningAddress));\n\n        require(stakingAddress != validatorSet.unremovableValidator());\n\n        _removePool(stakingAddress);\n",
          "message": "Reentrancy in StakingBase.removeMyPool (StakingAuRaMock.sol#336-344):\n\tExternal calls:\n\t- miningAddress = validatorSet.miningByStakingAddress(stakingAddress) (StakingAuRaMock.sol#339)\n\t- require(bool)(stakingEpoch() > 0 || ! validatorSet.isValidator(miningAddress)) (StakingAuRaMock.sol#341)\n\t- require(bool)(stakingAddress != validatorSet.unremovableValidator()) (StakingAuRaMock.sol#342)\n\tState variables written after the call(s):\n\t- uintStorage (StakingAuRaMock.sol#343)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": null,
          "vulnerability_code": "        IValidatorSet validatorSetContract = validatorSetContract();\n",
          "message": "StakingBase.orderWithdraw.validatorSetContract (local variable @ StakingAuRaMock.sol#407) shadows:\n\t- StakingBase.validatorSetContract (function @ StakingAuRaMock.sol#853-855)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 481,
          "vulnerability_to_line": null,
          "vulnerability_code": "        IValidatorSet validatorSetContract = validatorSetContract();\n",
          "message": "StakingBase.claimOrderedWithdraw.validatorSetContract (local variable @ StakingAuRaMock.sol#481) shadows:\n\t- StakingBase.validatorSetContract (function @ StakingAuRaMock.sol#853-855)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 633,
          "vulnerability_to_line": null,
          "vulnerability_code": "        IValidatorSet validatorSetContract = validatorSetContract();\n",
          "message": "StakingBase.maxWithdrawAllowed.validatorSetContract (local variable @ StakingAuRaMock.sol#633) shadows:\n\t- StakingBase.validatorSetContract (function @ StakingAuRaMock.sol#853-855)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 665,
          "vulnerability_to_line": null,
          "vulnerability_code": "        IValidatorSet validatorSetContract = validatorSetContract();\n",
          "message": "StakingBase.maxWithdrawOrderAllowed.validatorSetContract (local variable @ StakingAuRaMock.sol#665) shadows:\n\t- StakingBase.validatorSetContract (function @ StakingAuRaMock.sol#853-855)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1024,
          "vulnerability_to_line": 1056,
          "vulnerability_code": "    function _initialize(\n\n        address _validatorSetContract,\n\n        address[] memory _initialStakingAddresses,\n\n        uint256 _delegatorMinStake,\n\n        uint256 _candidateMinStake,\n\n        bool _erc20Restricted\n\n    ) internal {\n\n        require(!isInitialized()); // initialization can only be done once\n\n        require(_validatorSetContract != address(0));\n\n        require(_initialStakingAddresses.length > 0);\n\n        require(_delegatorMinStake != 0);\n\n        require(_candidateMinStake != 0);\n\n\n\n        IBlockReward blockRewardContract = IBlockReward(IValidatorSet(_validatorSetContract).blockRewardContract());\n\n        require(MAX_DELEGATORS_PER_POOL % blockRewardContract.DELEGATORS_ALIQUOT() == 0);\n\n\n\n        addressStorage[VALIDATOR_SET_CONTRACT] = _validatorSetContract;\n\n\n\n        address unremovableStakingAddress = IValidatorSet(_validatorSetContract).unremovableValidator();\n\n\n\n        for (uint256 i = 0; i < _initialStakingAddresses.length; i++) {\n\n            require(_initialStakingAddresses[i] != address(0));\n\n            _addPoolActive(_initialStakingAddresses[i], false);\n\n            if (_initialStakingAddresses[i] != unremovableStakingAddress) {\n\n                _addPoolToBeRemoved(_initialStakingAddresses[i]);\n\n            }\n\n        }\n\n\n\n        _setDelegatorMinStake(_delegatorMinStake);\n\n        _setCandidateMinStake(_candidateMinStake);\n\n\n\n        boolStorage[ERC20_RESTRICTED] = _erc20Restricted;\n",
          "message": "Reentrancy in StakingBase._initialize (StakingAuRaMock.sol#1024-1056):\n\tExternal calls:\n\t- blockRewardContract = IBlockReward(IValidatorSet(_validatorSetContract).blockRewardContract()) (StakingAuRaMock.sol#1037)\n\t- require(bool)(MAX_DELEGATORS_PER_POOL % blockRewardContract.DELEGATORS_ALIQUOT() == 0) (StakingAuRaMock.sol#1038)\n\t- unremovableStakingAddress = IValidatorSet(_validatorSetContract).unremovableValidator() (StakingAuRaMock.sol#1042)\n\tState variables written after the call(s):\n\t- addressArrayStorage (StakingAuRaMock.sol#1046)\n\t- addressArrayStorage (StakingAuRaMock.sol#1048)\n\t- boolStorage (StakingAuRaMock.sol#1055)\n\t- intArrayStorage (StakingAuRaMock.sol#1046)\n\t- intArrayStorage (StakingAuRaMock.sol#1048)\n\t- intStorage (StakingAuRaMock.sol#1048)\n\t- uintStorage (StakingAuRaMock.sol#1046)\n\t- uintStorage (StakingAuRaMock.sol#1048)\n\t- uintStorage (StakingAuRaMock.sol#1052)\n\t- uintStorage (StakingAuRaMock.sol#1053)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1296,
          "vulnerability_to_line": 1333,
          "vulnerability_code": "    function _stake(address _poolStakingAddress, address _staker, uint256 _amount) internal {\n\n        IValidatorSet validatorSet = validatorSetContract();\n\n        address poolMiningAddress = validatorSet.miningByStakingAddress(_poolStakingAddress);\n\n\n\n        require(poolMiningAddress != address(0));\n\n        require(_poolStakingAddress != address(0));\n\n        require(_amount != 0);\n\n        require(!validatorSet.isValidatorBanned(poolMiningAddress));\n\n        require(areStakeAndWithdrawAllowed());\n\n\n\n        uint256 newStakeAmount = stakeAmount(_poolStakingAddress, _staker).add(_amount);\n\n        if (_staker == _poolStakingAddress) {\n\n            require(newStakeAmount >= getCandidateMinStake()); // the staked amount must be at least CANDIDATE_MIN_STAKE\n\n        } else {\n\n            require(newStakeAmount >= getDelegatorMinStake()); // the staked amount must be at least DELEGATOR_MIN_STAKE\n\n\n\n            // The delegator cannot stake into the pool of the candidate which hasn't self-staked.\n\n            // Also, that candidate shouldn't want to withdraw all his funds.\n\n            require(stakeAmountMinusOrderedWithdraw(_poolStakingAddress, _poolStakingAddress) != 0);\n\n        }\n\n        _setStakeAmount(_poolStakingAddress, _staker, newStakeAmount);\n\n        _setStakeAmountByCurrentEpoch(\n\n            _poolStakingAddress,\n\n            _staker,\n\n            stakeAmountByCurrentEpoch(_poolStakingAddress, _staker).add(_amount)\n\n        );\n\n        _setStakeAmountTotal(_poolStakingAddress, stakeAmountTotal(_poolStakingAddress).add(_amount));\n\n\n\n        if (_staker == _poolStakingAddress) { // `staker` makes a stake for himself and becomes a candidate\n\n            // Add `_poolStakingAddress` to the array of pools\n\n            _addPoolActive(_poolStakingAddress, _poolStakingAddress != validatorSet.unremovableValidator());\n\n        } else {\n\n            // Add `_staker` to the array of pool's delegators\n\n            _addPoolDelegator(_poolStakingAddress, _staker);\n\n        }\n\n\n\n        _setLikelihood(_poolStakingAddress);\n",
          "message": "Reentrancy in StakingBase._stake (StakingAuRaMock.sol#1296-1333):\n\tExternal calls:\n\t- poolMiningAddress = validatorSet.miningByStakingAddress(_poolStakingAddress) (StakingAuRaMock.sol#1298)\n\t- require(bool)(! validatorSet.isValidatorBanned(poolMiningAddress)) (StakingAuRaMock.sol#1303)\n\tState variables written after the call(s):\n\t- addressArrayStorage (StakingAuRaMock.sol#1329)\n\t- uintStorage (StakingAuRaMock.sol#1316)\n\t- uintStorage (StakingAuRaMock.sol#1317-1321)\n\t- uintStorage (StakingAuRaMock.sol#1322)\n\t- uintStorage (StakingAuRaMock.sol#1329)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1296,
          "vulnerability_to_line": 1333,
          "vulnerability_code": "    function _stake(address _poolStakingAddress, address _staker, uint256 _amount) internal {\n\n        IValidatorSet validatorSet = validatorSetContract();\n\n        address poolMiningAddress = validatorSet.miningByStakingAddress(_poolStakingAddress);\n\n\n\n        require(poolMiningAddress != address(0));\n\n        require(_poolStakingAddress != address(0));\n\n        require(_amount != 0);\n\n        require(!validatorSet.isValidatorBanned(poolMiningAddress));\n\n        require(areStakeAndWithdrawAllowed());\n\n\n\n        uint256 newStakeAmount = stakeAmount(_poolStakingAddress, _staker).add(_amount);\n\n        if (_staker == _poolStakingAddress) {\n\n            require(newStakeAmount >= getCandidateMinStake()); // the staked amount must be at least CANDIDATE_MIN_STAKE\n\n        } else {\n\n            require(newStakeAmount >= getDelegatorMinStake()); // the staked amount must be at least DELEGATOR_MIN_STAKE\n\n\n\n            // The delegator cannot stake into the pool of the candidate which hasn't self-staked.\n\n            // Also, that candidate shouldn't want to withdraw all his funds.\n\n            require(stakeAmountMinusOrderedWithdraw(_poolStakingAddress, _poolStakingAddress) != 0);\n\n        }\n\n        _setStakeAmount(_poolStakingAddress, _staker, newStakeAmount);\n\n        _setStakeAmountByCurrentEpoch(\n\n            _poolStakingAddress,\n\n            _staker,\n\n            stakeAmountByCurrentEpoch(_poolStakingAddress, _staker).add(_amount)\n\n        );\n\n        _setStakeAmountTotal(_poolStakingAddress, stakeAmountTotal(_poolStakingAddress).add(_amount));\n\n\n\n        if (_staker == _poolStakingAddress) { // `staker` makes a stake for himself and becomes a candidate\n\n            // Add `_poolStakingAddress` to the array of pools\n\n            _addPoolActive(_poolStakingAddress, _poolStakingAddress != validatorSet.unremovableValidator());\n\n        } else {\n\n            // Add `_staker` to the array of pool's delegators\n\n            _addPoolDelegator(_poolStakingAddress, _staker);\n\n        }\n\n\n\n        _setLikelihood(_poolStakingAddress);\n",
          "message": "Reentrancy in StakingBase._stake (StakingAuRaMock.sol#1296-1333):\n\tExternal calls:\n\t- poolMiningAddress = validatorSet.miningByStakingAddress(_poolStakingAddress) (StakingAuRaMock.sol#1298)\n\t- require(bool)(! validatorSet.isValidatorBanned(poolMiningAddress)) (StakingAuRaMock.sol#1303)\n\t- _addPoolActive(_poolStakingAddress,_poolStakingAddress != validatorSet.unremovableValidator()) (StakingAuRaMock.sol#1326)\n\tState variables written after the call(s):\n\t- intStorage (StakingAuRaMock.sol#1332)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1376,
          "vulnerability_to_line": 1391,
          "vulnerability_code": "    function _withdrawCheckPool(address _poolStakingAddress, address _staker) internal {\n\n        if (_staker == _poolStakingAddress) {\n\n            IValidatorSet validatorSet = validatorSetContract();\n\n            address unremovableStakingAddress = validatorSet.unremovableValidator();\n\n\n\n            if (_poolStakingAddress != unremovableStakingAddress) {\n\n                if (validatorSet.isValidator(validatorSet.miningByStakingAddress(_poolStakingAddress))) {\n\n                    _addPoolToBeRemoved(_poolStakingAddress);\n\n                } else {\n\n                    _removePool(_poolStakingAddress);\n\n                }\n\n            }\n\n        } else {\n\n            _removePoolDelegator(_poolStakingAddress, _staker);\n\n        }\n",
          "message": "Reentrancy in StakingBase._withdrawCheckPool (StakingAuRaMock.sol#1376-1391):\n\tExternal calls:\n\t- unremovableStakingAddress = validatorSet.unremovableValidator() (StakingAuRaMock.sol#1379)\n\t- validatorSet.isValidator(validatorSet.miningByStakingAddress(_poolStakingAddress)) (StakingAuRaMock.sol#1382-1386)\n\tState variables written after the call(s):\n\t- addressArrayStorage (StakingAuRaMock.sol#1383)\n\t- intArrayStorage (StakingAuRaMock.sol#1383)\n\t- intStorage (StakingAuRaMock.sol#1383)\n\t- uintStorage (StakingAuRaMock.sol#1383)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1376,
          "vulnerability_to_line": 1391,
          "vulnerability_code": "    function _withdrawCheckPool(address _poolStakingAddress, address _staker) internal {\n\n        if (_staker == _poolStakingAddress) {\n\n            IValidatorSet validatorSet = validatorSetContract();\n\n            address unremovableStakingAddress = validatorSet.unremovableValidator();\n\n\n\n            if (_poolStakingAddress != unremovableStakingAddress) {\n\n                if (validatorSet.isValidator(validatorSet.miningByStakingAddress(_poolStakingAddress))) {\n\n                    _addPoolToBeRemoved(_poolStakingAddress);\n\n                } else {\n\n                    _removePool(_poolStakingAddress);\n\n                }\n\n            }\n\n        } else {\n\n            _removePoolDelegator(_poolStakingAddress, _staker);\n\n        }\n",
          "message": "Reentrancy in StakingBase._withdrawCheckPool (StakingAuRaMock.sol#1376-1391):\n\tExternal calls:\n\t- unremovableStakingAddress = validatorSet.unremovableValidator() (StakingAuRaMock.sol#1379)\n\tState variables written after the call(s):\n\t- addressArrayStorage (StakingAuRaMock.sol#1385)\n\t- intArrayStorage (StakingAuRaMock.sol#1385)\n\t- intStorage (StakingAuRaMock.sol#1385)\n\t- uintStorage (StakingAuRaMock.sol#1385)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1511,
          "vulnerability_to_line": 1537,
          "vulnerability_code": "    function initialize(\n\n        address _validatorSetContract,\n\n        address[] calldata _initialStakingAddresses,\n\n        uint256 _delegatorMinStake,\n\n        uint256 _candidateMinStake,\n\n        uint256 _stakingEpochDuration,\n\n        uint256 _stakingEpochStartBlock,\n\n        uint256 _stakeWithdrawDisallowPeriod,\n\n        bool _erc20Restricted\n\n    ) external {\n\n        require(_stakingEpochDuration != 0);\n\n        require(_stakingEpochDuration > _stakeWithdrawDisallowPeriod);\n\n        IValidatorSet validatorSet = IValidatorSet(_validatorSetContract);\n\n        IBlockReward blockReward = IBlockReward(validatorSet.blockRewardContract());\n\n        require(_stakingEpochDuration >= validatorSet.MAX_VALIDATORS() * blockReward.DELEGATORS_ALIQUOT() * 2 + 1);\n\n        require(_stakeWithdrawDisallowPeriod != 0);\n\n        super._initialize(\n\n            _validatorSetContract,\n\n            _initialStakingAddresses,\n\n            _delegatorMinStake,\n\n            _candidateMinStake,\n\n            _erc20Restricted\n\n        );\n\n        uintStorage[STAKING_EPOCH_DURATION] = _stakingEpochDuration;\n\n        uintStorage[STAKE_WITHDRAW_DISALLOW_PERIOD] = _stakeWithdrawDisallowPeriod;\n\n        uintStorage[STAKING_EPOCH_START_BLOCK] = _stakingEpochStartBlock;\n",
          "message": "Reentrancy in StakingAuRa.initialize (StakingAuRaMock.sol#1511-1537):\n\tExternal calls:\n\t- blockReward = IBlockReward(validatorSet.blockRewardContract()) (StakingAuRaMock.sol#1524)\n\t- require(bool)(_stakingEpochDuration >= validatorSet.MAX_VALIDATORS() * blockReward.DELEGATORS_ALIQUOT() * 2 + 1) (StakingAuRaMock.sol#1525)\n\t- super._initialize(_validatorSetContract,_initialStakingAddresses,_delegatorMinStake,_candidateMinStake,_erc20Restricted) (StakingAuRaMock.sol#1527-1533)\n\tState variables written after the call(s):\n\t- boolStorage (StakingAuRaMock.sol#1527-1533)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 406,
          "vulnerability_to_line": 475,
          "vulnerability_code": "    function orderWithdraw(address _poolStakingAddress, int256 _amount) external gasPriceIsValid onlyInitialized {\n\n        IValidatorSet validatorSetContract = validatorSetContract();\n\n\n\n        require(_poolStakingAddress != address(0));\n\n        require(_amount != 0);\n\n        require(_isWithdrawAllowed(validatorSetContract.miningByStakingAddress(_poolStakingAddress)));\n\n\n\n        address staker = msg.sender;\n\n\n\n        // How much can `staker` order for withdrawal from `_poolStakingAddress` at the moment?\n\n        require(_amount < 0 || uint256(_amount) <= maxWithdrawOrderAllowed(_poolStakingAddress, staker));\n\n\n\n        uint256 alreadyOrderedAmount = orderedWithdrawAmount(_poolStakingAddress, staker);\n\n\n\n        require(_amount > 0 || uint256(-_amount) <= alreadyOrderedAmount);\n\n\n\n        uint256 newOrderedAmount;\n\n        if (_amount > 0) {\n\n            newOrderedAmount = alreadyOrderedAmount.add(uint256(_amount));\n\n        } else {\n\n            newOrderedAmount = alreadyOrderedAmount.sub(uint256(-_amount));\n\n        }\n\n        _setOrderedWithdrawAmount(_poolStakingAddress, staker, newOrderedAmount);\n\n\n\n        // The amount to be withdrawn must be the whole staked amount or\n\n        // must not exceed the diff between the entire amount and MIN_STAKE\n\n        uint256 newStakeAmount = stakeAmount(_poolStakingAddress, staker).sub(newOrderedAmount);\n\n        if (staker == _poolStakingAddress) {\n\n            require(newStakeAmount == 0 || newStakeAmount >= getCandidateMinStake());\n\n\n\n            address unremovableStakingAddress = validatorSetContract.unremovableValidator();\n\n\n\n            if (_amount > 0) {\n\n                if (newStakeAmount == 0 && _poolStakingAddress != unremovableStakingAddress) {\n\n                    _addPoolToBeRemoved(_poolStakingAddress);\n\n                }\n\n            } else {\n\n                _addPoolActive(_poolStakingAddress, _poolStakingAddress != unremovableStakingAddress);\n\n            }\n\n        } else {\n\n            require(newStakeAmount == 0 || newStakeAmount >= getDelegatorMinStake());\n\n\n\n            if (_amount > 0) {\n\n                if (newStakeAmount == 0) {\n\n                    _removePoolDelegator(_poolStakingAddress, staker);\n\n                }\n\n            } else {\n\n                _addPoolDelegator(_poolStakingAddress, staker);\n\n            }\n\n        }\n\n\n\n        // Set total ordered amount for this pool\n\n        alreadyOrderedAmount = orderedWithdrawAmountTotal(_poolStakingAddress);\n\n        if (_amount > 0) {\n\n            newOrderedAmount = alreadyOrderedAmount.add(uint256(_amount));\n\n        } else {\n\n            newOrderedAmount = alreadyOrderedAmount.sub(uint256(-_amount));\n\n        }\n\n        _setOrderedWithdrawAmountTotal(_poolStakingAddress, newOrderedAmount);\n\n\n\n        uint256 epoch = stakingEpoch();\n\n\n\n        if (_amount > 0) {\n\n            _setOrderWithdrawEpoch(_poolStakingAddress, staker, epoch);\n\n        }\n\n\n\n        _setLikelihood(_poolStakingAddress);\n\n\n\n        emit WithdrawalOrdered(_poolStakingAddress, staker, epoch, _amount);\n",
          "message": "Reentrancy in StakingBase.orderWithdraw (StakingAuRaMock.sol#406-475):\n\tExternal calls:\n\t- require(bool)(_isWithdrawAllowed(validatorSetContract.miningByStakingAddress(_poolStakingAddress))) (StakingAuRaMock.sol#411)\n\t- require(bool)(_amount < 0 || uint256(_amount) <= maxWithdrawOrderAllowed(_poolStakingAddress,staker)) (StakingAuRaMock.sol#416)\n\t- unremovableStakingAddress = validatorSetContract.unremovableValidator() (StakingAuRaMock.sol#436)\n\tState variables written after the call(s):\n\t- addressArrayStorage (StakingAuRaMock.sol#440)\n\t- addressArrayStorage (StakingAuRaMock.sol#443)\n\t- intArrayStorage (StakingAuRaMock.sol#440)\n\t- intArrayStorage (StakingAuRaMock.sol#443)\n\t- intArrayStorage (StakingAuRaMock.sol#472)\n\t- intStorage (StakingAuRaMock.sol#440)\n\t- intStorage (StakingAuRaMock.sol#472)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 406,
          "vulnerability_to_line": 475,
          "vulnerability_code": "    function orderWithdraw(address _poolStakingAddress, int256 _amount) external gasPriceIsValid onlyInitialized {\n\n        IValidatorSet validatorSetContract = validatorSetContract();\n\n\n\n        require(_poolStakingAddress != address(0));\n\n        require(_amount != 0);\n\n        require(_isWithdrawAllowed(validatorSetContract.miningByStakingAddress(_poolStakingAddress)));\n\n\n\n        address staker = msg.sender;\n\n\n\n        // How much can `staker` order for withdrawal from `_poolStakingAddress` at the moment?\n\n        require(_amount < 0 || uint256(_amount) <= maxWithdrawOrderAllowed(_poolStakingAddress, staker));\n\n\n\n        uint256 alreadyOrderedAmount = orderedWithdrawAmount(_poolStakingAddress, staker);\n\n\n\n        require(_amount > 0 || uint256(-_amount) <= alreadyOrderedAmount);\n\n\n\n        uint256 newOrderedAmount;\n\n        if (_amount > 0) {\n\n            newOrderedAmount = alreadyOrderedAmount.add(uint256(_amount));\n\n        } else {\n\n            newOrderedAmount = alreadyOrderedAmount.sub(uint256(-_amount));\n\n        }\n\n        _setOrderedWithdrawAmount(_poolStakingAddress, staker, newOrderedAmount);\n\n\n\n        // The amount to be withdrawn must be the whole staked amount or\n\n        // must not exceed the diff between the entire amount and MIN_STAKE\n\n        uint256 newStakeAmount = stakeAmount(_poolStakingAddress, staker).sub(newOrderedAmount);\n\n        if (staker == _poolStakingAddress) {\n\n            require(newStakeAmount == 0 || newStakeAmount >= getCandidateMinStake());\n\n\n\n            address unremovableStakingAddress = validatorSetContract.unremovableValidator();\n\n\n\n            if (_amount > 0) {\n\n                if (newStakeAmount == 0 && _poolStakingAddress != unremovableStakingAddress) {\n\n                    _addPoolToBeRemoved(_poolStakingAddress);\n\n                }\n\n            } else {\n\n                _addPoolActive(_poolStakingAddress, _poolStakingAddress != unremovableStakingAddress);\n\n            }\n\n        } else {\n\n            require(newStakeAmount == 0 || newStakeAmount >= getDelegatorMinStake());\n\n\n\n            if (_amount > 0) {\n\n                if (newStakeAmount == 0) {\n\n                    _removePoolDelegator(_poolStakingAddress, staker);\n\n                }\n\n            } else {\n\n                _addPoolDelegator(_poolStakingAddress, staker);\n\n            }\n\n        }\n\n\n\n        // Set total ordered amount for this pool\n\n        alreadyOrderedAmount = orderedWithdrawAmountTotal(_poolStakingAddress);\n\n        if (_amount > 0) {\n\n            newOrderedAmount = alreadyOrderedAmount.add(uint256(_amount));\n\n        } else {\n\n            newOrderedAmount = alreadyOrderedAmount.sub(uint256(-_amount));\n\n        }\n\n        _setOrderedWithdrawAmountTotal(_poolStakingAddress, newOrderedAmount);\n\n\n\n        uint256 epoch = stakingEpoch();\n\n\n\n        if (_amount > 0) {\n\n            _setOrderWithdrawEpoch(_poolStakingAddress, staker, epoch);\n\n        }\n\n\n\n        _setLikelihood(_poolStakingAddress);\n\n\n\n        emit WithdrawalOrdered(_poolStakingAddress, staker, epoch, _amount);\n",
          "message": "Reentrancy in StakingBase.orderWithdraw (StakingAuRaMock.sol#406-475):\n\tExternal calls:\n\t- require(bool)(_isWithdrawAllowed(validatorSetContract.miningByStakingAddress(_poolStakingAddress))) (StakingAuRaMock.sol#411)\n\t- require(bool)(_amount < 0 || uint256(_amount) <= maxWithdrawOrderAllowed(_poolStakingAddress,staker)) (StakingAuRaMock.sol#416)\n\tState variables written after the call(s):\n\t- addressArrayStorage (StakingAuRaMock.sol#450)\n\t- addressArrayStorage (StakingAuRaMock.sol#453)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 336,
          "vulnerability_to_line": 344,
          "vulnerability_code": "    function removeMyPool() external gasPriceIsValid onlyInitialized {\n\n        IValidatorSet validatorSet = validatorSetContract();\n\n        address stakingAddress = msg.sender;\n\n        address miningAddress = validatorSet.miningByStakingAddress(stakingAddress);\n\n        // initial validator cannot remove their pool during the initial staking epoch\n\n        require(stakingEpoch() > 0 || !validatorSet.isValidator(miningAddress));\n\n        require(stakingAddress != validatorSet.unremovableValidator());\n\n        _removePool(stakingAddress);\n",
          "message": "Reentrancy in StakingBase.removeMyPool (StakingAuRaMock.sol#336-344):\n\tExternal calls:\n\t- miningAddress = validatorSet.miningByStakingAddress(stakingAddress) (StakingAuRaMock.sol#339)\n\t- require(bool)(stakingEpoch() > 0 || ! validatorSet.isValidator(miningAddress)) (StakingAuRaMock.sol#341)\n\t- require(bool)(stakingAddress != validatorSet.unremovableValidator()) (StakingAuRaMock.sol#342)\n\tState variables written after the call(s):\n\t- addressArrayStorage (StakingAuRaMock.sol#343)\n\t- intArrayStorage (StakingAuRaMock.sol#343)\n\t- intStorage (StakingAuRaMock.sol#343)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address internal _owner;\n",
          "message": "EternalStorage._owner should be constant (StakingAuRaMock.sol#97)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 596,
          "vulnerability_to_line": 598,
          "vulnerability_code": "    function erc20Restricted() public view returns(bool) {\n\n        return boolStorage[ERC20_RESTRICTED];\n",
          "message": "StakingBase.erc20Restricted (StakingAuRaMock.sol#596-598) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function erc20Restricted() external view returns(bool);\n",
          "message": "IStaking.erc20Restricted (StakingAuRaMock.sol#41) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 733,
          "vulnerability_to_line": 735,
          "vulnerability_code": "    function poolDelegators(address _poolStakingAddress) public view returns(address[] memory) {\n\n        return addressArrayStorage[keccak256(abi.encode(POOL_DELEGATORS, _poolStakingAddress))];\n",
          "message": "StakingBase.poolDelegators (StakingAuRaMock.sol#733-735) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function poolDelegators(address) external view returns(address[] memory);\n",
          "message": "IStaking.poolDelegators (StakingAuRaMock.sol#46) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 693,
          "vulnerability_to_line": 695,
          "vulnerability_code": "    function onTokenTransfer(address, uint256, bytes memory) public pure returns(bool) {\n\n        return false;\n",
          "message": "StakingBase.onTokenTransfer (StakingAuRaMock.sol#693-695) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 741,
          "vulnerability_to_line": 743,
          "vulnerability_code": "    function poolDelegatorsInactive(address _poolStakingAddress) public view returns(address[] memory) {\n\n        return addressArrayStorage[keccak256(abi.encode(POOL_DELEGATORS_INACTIVE, _poolStakingAddress))];\n",
          "message": "StakingBase.poolDelegatorsInactive (StakingAuRaMock.sol#741-743) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1457,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function stakingEpochEndBlock() external view returns(uint256);\n",
          "message": "IStakingAuRa.stakingEpochEndBlock (StakingAuRaMock.sol#1457) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1574,
          "vulnerability_to_line": 1577,
          "vulnerability_code": "    function stakingEpochEndBlock() public view returns(uint256) {\n\n        uint256 startBlock = stakingEpochStartBlock();\n\n        return startBlock + stakingEpochDuration() - (startBlock == 0 ? 0 : 1);\n",
          "message": "StakingAuRa.stakingEpochEndBlock (StakingAuRaMock.sol#1574-1577) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1595,
          "vulnerability_to_line": 1597,
          "vulnerability_code": "    function addPoolActiveMock(address _stakingAddress) public {\n\n        _addPoolActive(_stakingAddress, true);\n",
          "message": "StakingAuRaMock.addPoolActiveMock (StakingAuRaMock.sol#1595-1597) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1599,
          "vulnerability_to_line": 1601,
          "vulnerability_code": "    function addPoolInactiveMock(address _stakingAddress) public {\n\n        _addPoolInactive(_stakingAddress);\n",
          "message": "StakingAuRaMock.addPoolInactiveMock (StakingAuRaMock.sol#1599-1601) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1603,
          "vulnerability_to_line": 1605,
          "vulnerability_code": "    function setCurrentBlockNumber(uint256 _blockNumber) public {\n\n        uintStorage[keccak256(\"currentBlockNumber\")] = _blockNumber;\n",
          "message": "StakingAuRaMock.setCurrentBlockNumber (StakingAuRaMock.sol#1603-1605) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1607,
          "vulnerability_to_line": 1609,
          "vulnerability_code": "    function setErc20TokenContractMock(address _erc20TokenContract) public {\n\n        addressStorage[ERC20_TOKEN_CONTRACT] = _erc20TokenContract;\n",
          "message": "StakingAuRaMock.setErc20TokenContractMock (StakingAuRaMock.sol#1607-1609) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1611,
          "vulnerability_to_line": 1613,
          "vulnerability_code": "    function setErc20Restricted(bool _erc20Restricted) public {\n\n        boolStorage[ERC20_RESTRICTED] = _erc20Restricted;\n",
          "message": "StakingAuRaMock.setErc20Restricted (StakingAuRaMock.sol#1611-1613) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1615,
          "vulnerability_to_line": 1617,
          "vulnerability_code": "    function setStakeAmountTotal(address _poolStakingAddress, uint256 _amount) public {\n\n        _setStakeAmountTotal(_poolStakingAddress, _amount);\n",
          "message": "StakingAuRaMock.setStakeAmountTotal (StakingAuRaMock.sol#1615-1617) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1619,
          "vulnerability_to_line": 1621,
          "vulnerability_code": "    function setValidatorSetAddress(address _validatorSetAddress) public {\n\n        addressStorage[VALIDATOR_SET_CONTRACT] = _validatorSetAddress;\n",
          "message": "StakingAuRaMock.setValidatorSetAddress (StakingAuRaMock.sol#1619-1621) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.5.9;\n",
          "message": "Detected issues with version pragma in StakingAuRaMock.sol:\n\t- pragma solidity0.5.9 (StakingAuRaMock.sol#3): it allows old versions\n\t- pragma solidity0.5.9 (StakingAuRaMock.sol#17): it allows old versions\n\t- pragma solidity0.5.9 (StakingAuRaMock.sol#34): it allows old versions\n\t- pragma solidity0.5.9 (StakingAuRaMock.sol#54): it allows old versions\n\t- pragma solidity0.5.9 (StakingAuRaMock.sol#89): it allows old versions\n\t- pragma solidity0.5.9 (StakingAuRaMock.sol#120): it allows old versions\n\t- pragma solidity0.5.9 (StakingAuRaMock.sol#138): it allows old versions\n\t- pragma solidity0.5.9 (StakingAuRaMock.sol#177): it allows old versions\n\t- pragma solidity0.5.9 (StakingAuRaMock.sol#1440): it allows old versions\n\t- pragma solidity0.5.9 (StakingAuRaMock.sol#1462): it allows old versions\n\t- pragma solidity0.5.9 (StakingAuRaMock.sol#1589): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function initialize(address) external;\n",
          "message": "Parameter '' of IBlockReward.initialize (StakingAuRaMock.sol#7) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function DELEGATORS_ALIQUOT() external view returns(uint256); // solhint-disable-line func-name-mixedcase\n",
          "message": "Function 'IBlockReward.DELEGATORS_ALIQUOT' (StakingAuRaMock.sol#8) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address) external view returns(uint256);\n",
          "message": "Parameter '' of IERC20Minting.balanceOf (StakingAuRaMock.sol#29) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function clearUnremovableValidator(address) external;\n",
          "message": "Parameter '' of IStaking.clearUnremovableValidator (StakingAuRaMock.sol#38) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function removePool(address) external;\n",
          "message": "Parameter '' of IStaking.removePool (StakingAuRaMock.sol#40) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function poolDelegators(address) external view returns(address[] memory);\n",
          "message": "Parameter '' of IStaking.poolDelegators (StakingAuRaMock.sol#46) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function stakeAmountMinusOrderedWithdraw(address, address) external view returns(uint256);\n",
          "message": "Parameter '' of IStaking.stakeAmountMinusOrderedWithdraw (StakingAuRaMock.sol#47) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function stakeAmountMinusOrderedWithdraw(address, address) external view returns(uint256);\n",
          "message": "Parameter '_scope_0' of IStaking.stakeAmountMinusOrderedWithdraw (StakingAuRaMock.sol#47) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function stakeAmountTotalMinusOrderedWithdraw(address) external view returns(uint256);\n",
          "message": "Parameter '' of IStaking.stakeAmountTotalMinusOrderedWithdraw (StakingAuRaMock.sol#48) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address,\n",
          "message": "Parameter '' of IValidatorSet.initialize (StakingAuRaMock.sol#59) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address,\n",
          "message": "Parameter '_scope_0' of IValidatorSet.initialize (StakingAuRaMock.sol#60) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address,\n",
          "message": "Parameter '_scope_1' of IValidatorSet.initialize (StakingAuRaMock.sol#61) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] calldata,\n",
          "message": "Parameter '_scope_2' of IValidatorSet.initialize (StakingAuRaMock.sol#62) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] calldata,\n",
          "message": "Parameter '_scope_3' of IValidatorSet.initialize (StakingAuRaMock.sol#63) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool\n",
          "message": "Parameter '_scope_4' of IValidatorSet.initialize (StakingAuRaMock.sol#64) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setStakingAddress(address, address) external;\n",
          "message": "Parameter '' of IValidatorSet.setStakingAddress (StakingAuRaMock.sol#67) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setStakingAddress(address, address) external;\n",
          "message": "Parameter '_scope_0' of IValidatorSet.setStakingAddress (StakingAuRaMock.sol#67) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isReportValidatorValid(address) external view returns(bool);\n",
          "message": "Parameter '' of IValidatorSet.isReportValidatorValid (StakingAuRaMock.sol#74) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isValidator(address) external view returns(bool);\n",
          "message": "Parameter '' of IValidatorSet.isValidator (StakingAuRaMock.sol#75) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isValidatorBanned(address) external view returns(bool);\n",
          "message": "Parameter '' of IValidatorSet.isValidatorBanned (StakingAuRaMock.sol#76) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function MAX_VALIDATORS() external view returns(uint256); // solhint-disable-line func-name-mixedcase\n",
          "message": "Function 'IValidatorSet.MAX_VALIDATORS' (StakingAuRaMock.sol#77) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function miningByStakingAddress(address) external view returns(address);\n",
          "message": "Parameter '' of IValidatorSet.miningByStakingAddress (StakingAuRaMock.sol#78) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function stakingByMiningAddress(address) external view returns(address);\n",
          "message": "Parameter '' of IValidatorSet.stakingByMiningAddress (StakingAuRaMock.sol#80) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function validatorIndex(address) external view returns(uint256);\n",
          "message": "Parameter '' of IValidatorSet.validatorIndex (StakingAuRaMock.sol#83) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address internal _owner;\n",
          "message": "Variable 'EternalStorage._owner' (StakingAuRaMock.sol#97) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 308,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function clearUnremovableValidator(address _unremovableStakingAddress) external onlyValidatorSetContract {\n",
          "message": "Parameter '_unremovableStakingAddress' of StakingBase.clearUnremovableValidator (StakingAuRaMock.sol#308) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 328,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function removePool(address _stakingAddress) external onlyValidatorSetContract {\n",
          "message": "Parameter '_stakingAddress' of StakingBase.removePool (StakingAuRaMock.sol#328) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 733,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function poolDelegators(address _poolStakingAddress) public view returns(address[] memory) {\n",
          "message": "Parameter '_poolStakingAddress' of StakingBase.poolDelegators (StakingAuRaMock.sol#733) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 829,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _poolStakingAddress,\n",
          "message": "Parameter '_poolStakingAddress' of StakingBase.stakeAmountMinusOrderedWithdraw (StakingAuRaMock.sol#829) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 830,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _staker\n",
          "message": "Parameter '_staker' of StakingBase.stakeAmountMinusOrderedWithdraw (StakingAuRaMock.sol#830) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 841,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function stakeAmountTotalMinusOrderedWithdraw(address _poolStakingAddress) public view returns(uint256) {\n",
          "message": "Parameter '_poolStakingAddress' of StakingBase.stakeAmountTotalMinusOrderedWithdraw (StakingAuRaMock.sol#841) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 353,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _fromPoolStakingAddress,\n",
          "message": "Parameter '_fromPoolStakingAddress' of StakingBase.moveStake (StakingAuRaMock.sol#353) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 354,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _toPoolStakingAddress,\n",
          "message": "Parameter '_toPoolStakingAddress' of StakingBase.moveStake (StakingAuRaMock.sol#354) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 355,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _amount\n",
          "message": "Parameter '_amount' of StakingBase.moveStake (StakingAuRaMock.sol#355) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 368,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function stake(address _toPoolStakingAddress, uint256 _amount) external gasPriceIsValid onlyInitialized {\n",
          "message": "Parameter '_toPoolStakingAddress' of StakingBase.stake (StakingAuRaMock.sol#368) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 368,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function stake(address _toPoolStakingAddress, uint256 _amount) external gasPriceIsValid onlyInitialized {\n",
          "message": "Parameter '_amount' of StakingBase.stake (StakingAuRaMock.sol#368) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 375,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function stakeNative(address _toPoolStakingAddress) external gasPriceIsValid onlyInitialized payable {\n",
          "message": "Parameter '_toPoolStakingAddress' of StakingBase.stakeNative (StakingAuRaMock.sol#375) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 385,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(address _fromPoolStakingAddress, uint256 _amount) external gasPriceIsValid onlyInitialized {\n",
          "message": "Parameter '_fromPoolStakingAddress' of StakingBase.withdraw (StakingAuRaMock.sol#385) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 385,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(address _fromPoolStakingAddress, uint256 _amount) external gasPriceIsValid onlyInitialized {\n",
          "message": "Parameter '_amount' of StakingBase.withdraw (StakingAuRaMock.sol#385) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 406,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function orderWithdraw(address _poolStakingAddress, int256 _amount) external gasPriceIsValid onlyInitialized {\n",
          "message": "Parameter '_poolStakingAddress' of StakingBase.orderWithdraw (StakingAuRaMock.sol#406) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 406,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function orderWithdraw(address _poolStakingAddress, int256 _amount) external gasPriceIsValid onlyInitialized {\n",
          "message": "Parameter '_amount' of StakingBase.orderWithdraw (StakingAuRaMock.sol#406) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 480,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function claimOrderedWithdraw(address _poolStakingAddress) external gasPriceIsValid onlyInitialized {\n",
          "message": "Parameter '_poolStakingAddress' of StakingBase.claimOrderedWithdraw (StakingAuRaMock.sol#480) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 522,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setErc20TokenContract(address _erc20TokenContract) external onlyOwner onlyInitialized {\n",
          "message": "Parameter '_erc20TokenContract' of StakingBase.setErc20TokenContract (StakingAuRaMock.sol#522) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 531,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setCandidateMinStake(uint256 _minStake) external onlyOwner onlyInitialized {\n",
          "message": "Parameter '_minStake' of StakingBase.setCandidateMinStake (StakingAuRaMock.sol#531) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 538,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setDelegatorMinStake(uint256 _minStake) external onlyOwner onlyInitialized {\n",
          "message": "Parameter '_minStake' of StakingBase.setDelegatorMinStake (StakingAuRaMock.sol#538) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 623,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isPoolActive(address _stakingAddress) public view returns(bool) {\n",
          "message": "Parameter '_stakingAddress' of StakingBase.isPoolActive (StakingAuRaMock.sol#623) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 632,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function maxWithdrawAllowed(address _poolStakingAddress, address _staker) public view returns(uint256) {\n",
          "message": "Parameter '_poolStakingAddress' of StakingBase.maxWithdrawAllowed (StakingAuRaMock.sol#632) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 632,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function maxWithdrawAllowed(address _poolStakingAddress, address _staker) public view returns(uint256) {\n",
          "message": "Parameter '_staker' of StakingBase.maxWithdrawAllowed (StakingAuRaMock.sol#632) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 664,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function maxWithdrawOrderAllowed(address _poolStakingAddress, address _staker) public view returns(uint256) {\n",
          "message": "Parameter '_poolStakingAddress' of StakingBase.maxWithdrawOrderAllowed (StakingAuRaMock.sol#664) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 664,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function maxWithdrawOrderAllowed(address _poolStakingAddress, address _staker) public view returns(uint256) {\n",
          "message": "Parameter '_staker' of StakingBase.maxWithdrawOrderAllowed (StakingAuRaMock.sol#664) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 693,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function onTokenTransfer(address, uint256, bytes memory) public pure returns(bool) {\n",
          "message": "Parameter '' of StakingBase.onTokenTransfer (StakingAuRaMock.sol#693) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 693,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function onTokenTransfer(address, uint256, bytes memory) public pure returns(bool) {\n",
          "message": "Parameter '_scope_0' of StakingBase.onTokenTransfer (StakingAuRaMock.sol#693) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 693,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function onTokenTransfer(address, uint256, bytes memory) public pure returns(bool) {\n",
          "message": "Parameter '_scope_1' of StakingBase.onTokenTransfer (StakingAuRaMock.sol#693) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 701,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function orderedWithdrawAmount(address _poolStakingAddress, address _staker) public view returns(uint256) {\n",
          "message": "Parameter '_poolStakingAddress' of StakingBase.orderedWithdrawAmount (StakingAuRaMock.sol#701) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 701,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function orderedWithdrawAmount(address _poolStakingAddress, address _staker) public view returns(uint256) {\n",
          "message": "Parameter '_staker' of StakingBase.orderedWithdrawAmount (StakingAuRaMock.sol#701) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 708,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function orderedWithdrawAmountTotal(address _poolStakingAddress) public view returns(uint256) {\n",
          "message": "Parameter '_poolStakingAddress' of StakingBase.orderedWithdrawAmountTotal (StakingAuRaMock.sol#708) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 717,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function orderWithdrawEpoch(address _poolStakingAddress, address _staker) public view returns(uint256) {\n",
          "message": "Parameter '_poolStakingAddress' of StakingBase.orderWithdrawEpoch (StakingAuRaMock.sol#717) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 717,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function orderWithdrawEpoch(address _poolStakingAddress, address _staker) public view returns(uint256) {\n",
          "message": "Parameter '_staker' of StakingBase.orderWithdrawEpoch (StakingAuRaMock.sol#717) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 725,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function stakeAmountTotal(address _poolStakingAddress) public view returns(uint256) {\n",
          "message": "Parameter '_poolStakingAddress' of StakingBase.stakeAmountTotal (StakingAuRaMock.sol#725) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 741,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function poolDelegatorsInactive(address _poolStakingAddress) public view returns(address[] memory) {\n",
          "message": "Parameter '_poolStakingAddress' of StakingBase.poolDelegatorsInactive (StakingAuRaMock.sol#741) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 751,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function poolDelegatorIndex(address _poolStakingAddress, address _delegator) public view returns(uint256) {\n",
          "message": "Parameter '_poolStakingAddress' of StakingBase.poolDelegatorIndex (StakingAuRaMock.sol#751) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 751,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function poolDelegatorIndex(address _poolStakingAddress, address _delegator) public view returns(uint256) {\n",
          "message": "Parameter '_delegator' of StakingBase.poolDelegatorIndex (StakingAuRaMock.sol#751) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 761,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function poolDelegatorInactiveIndex(address _poolStakingAddress, address _delegator) public view returns(uint256) {\n",
          "message": "Parameter '_poolStakingAddress' of StakingBase.poolDelegatorInactiveIndex (StakingAuRaMock.sol#761) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 761,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function poolDelegatorInactiveIndex(address _poolStakingAddress, address _delegator) public view returns(uint256) {\n",
          "message": "Parameter '_delegator' of StakingBase.poolDelegatorInactiveIndex (StakingAuRaMock.sol#761) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 770,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function poolIndex(address _stakingAddress) public view returns(uint256) {\n",
          "message": "Parameter '_stakingAddress' of StakingBase.poolIndex (StakingAuRaMock.sol#770) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 777,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function poolInactiveIndex(address _stakingAddress) public view returns(uint256) {\n",
          "message": "Parameter '_stakingAddress' of StakingBase.poolInactiveIndex (StakingAuRaMock.sol#777) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 786,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function poolToBeElectedIndex(address _stakingAddress) public view returns(uint256) {\n",
          "message": "Parameter '_stakingAddress' of StakingBase.poolToBeElectedIndex (StakingAuRaMock.sol#786) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 795,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function poolToBeRemovedIndex(address _stakingAddress) public view returns(uint256) {\n",
          "message": "Parameter '_stakingAddress' of StakingBase.poolToBeRemovedIndex (StakingAuRaMock.sol#795) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 804,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function stakeAmount(address _poolStakingAddress, address _staker) public view returns(uint256) {\n",
          "message": "Parameter '_poolStakingAddress' of StakingBase.stakeAmount (StakingAuRaMock.sol#804) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 804,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function stakeAmount(address _poolStakingAddress, address _staker) public view returns(uint256) {\n",
          "message": "Parameter '_staker' of StakingBase.stakeAmount (StakingAuRaMock.sol#804) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 813,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function stakeAmountByCurrentEpoch(address _poolStakingAddress, address _staker)\n",
          "message": "Parameter '_poolStakingAddress' of StakingBase.stakeAmountByCurrentEpoch (StakingAuRaMock.sol#813) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 813,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function stakeAmountByCurrentEpoch(address _poolStakingAddress, address _staker)\n",
          "message": "Parameter '_staker' of StakingBase.stakeAmountByCurrentEpoch (StakingAuRaMock.sol#813) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 892,
          "vulnerability_to_line": 903,
          "vulnerability_code": "    function _addPoolActive(address _stakingAddress, bool _toBeElected) internal {\n\n        address[] storage pools = addressArrayStorage[POOLS];\n\n        if (!isPoolActive(_stakingAddress)) {\n\n            _setPoolIndex(_stakingAddress, pools.length);\n\n            pools.push(_stakingAddress);\n\n            require(pools.length <= _getMaxCandidates());\n\n        }\n\n        _removePoolInactive(_stakingAddress);\n\n        if (_toBeElected) {\n\n            _addPoolToBeElected(_stakingAddress);\n\n        }\n",
          "message": "Function 'StakingBase._addPoolActive' (StakingAuRaMock.sol#892-903) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 892,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _addPoolActive(address _stakingAddress, bool _toBeElected) internal {\n",
          "message": "Parameter '_stakingAddress' of StakingBase._addPoolActive (StakingAuRaMock.sol#892) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 892,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _addPoolActive(address _stakingAddress, bool _toBeElected) internal {\n",
          "message": "Parameter '_toBeElected' of StakingBase._addPoolActive (StakingAuRaMock.sol#892) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 908,
          "vulnerability_to_line": 915,
          "vulnerability_code": "    function _addPoolInactive(address _stakingAddress) internal {\n\n        address[] storage pools = addressArrayStorage[POOLS_INACTIVE];\n\n        uint256 index = poolInactiveIndex(_stakingAddress);\n\n        if (index >= pools.length || pools[index] != _stakingAddress) {\n\n            _setPoolInactiveIndex(_stakingAddress, pools.length);\n\n            pools.push(_stakingAddress);\n\n        }\n",
          "message": "Function 'StakingBase._addPoolInactive' (StakingAuRaMock.sol#908-915) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 908,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _addPoolInactive(address _stakingAddress) internal {\n",
          "message": "Parameter '_stakingAddress' of StakingBase._addPoolInactive (StakingAuRaMock.sol#908) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 920,
          "vulnerability_to_line": 929,
          "vulnerability_code": "    function _addPoolToBeElected(address _stakingAddress) internal {\n\n        address[] storage pools = addressArrayStorage[POOLS_TO_BE_ELECTED];\n\n        uint256 index = poolToBeElectedIndex(_stakingAddress);\n\n        if (index >= pools.length || pools[index] != _stakingAddress) {\n\n            _setPoolToBeElectedIndex(_stakingAddress, pools.length);\n\n            pools.push(_stakingAddress);\n\n            intArrayStorage[POOLS_LIKELIHOOD].push(0);\n\n        }\n\n        _deletePoolToBeRemoved(_stakingAddress);\n",
          "message": "Function 'StakingBase._addPoolToBeElected' (StakingAuRaMock.sol#920-929) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 920,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _addPoolToBeElected(address _stakingAddress) internal {\n",
          "message": "Parameter '_stakingAddress' of StakingBase._addPoolToBeElected (StakingAuRaMock.sol#920) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 934,
          "vulnerability_to_line": 942,
          "vulnerability_code": "    function _addPoolToBeRemoved(address _stakingAddress) internal {\n\n        address[] storage pools = addressArrayStorage[POOLS_TO_BE_REMOVED];\n\n        uint256 index = poolToBeRemovedIndex(_stakingAddress);\n\n        if (index >= pools.length || pools[index] != _stakingAddress) {\n\n            _setPoolToBeRemovedIndex(_stakingAddress, pools.length);\n\n            pools.push(_stakingAddress);\n\n        }\n\n        _deletePoolToBeElected(_stakingAddress);\n",
          "message": "Function 'StakingBase._addPoolToBeRemoved' (StakingAuRaMock.sol#934-942) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 934,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _addPoolToBeRemoved(address _stakingAddress) internal {\n",
          "message": "Parameter '_stakingAddress' of StakingBase._addPoolToBeRemoved (StakingAuRaMock.sol#934) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 948,
          "vulnerability_to_line": 965,
          "vulnerability_code": "    function _deletePoolToBeElected(address _stakingAddress) internal {\n\n        address[] storage pools = addressArrayStorage[POOLS_TO_BE_ELECTED];\n\n        int256[] storage likelihood = intArrayStorage[POOLS_LIKELIHOOD];\n\n        if (pools.length != likelihood.length) return;\n\n        uint256 indexToDelete = poolToBeElectedIndex(_stakingAddress);\n\n        if (pools.length > indexToDelete && pools[indexToDelete] == _stakingAddress) {\n\n            intStorage[POOLS_LIKELIHOOD_SUM] -= likelihood[indexToDelete];\n\n            if (intStorage[POOLS_LIKELIHOOD_SUM] < 0) {\n\n                intStorage[POOLS_LIKELIHOOD_SUM] = 0;\n\n            }\n\n            pools[indexToDelete] = pools[pools.length - 1];\n\n            likelihood[indexToDelete] = likelihood[pools.length - 1];\n\n            _setPoolToBeElectedIndex(pools[indexToDelete], indexToDelete);\n\n            _setPoolToBeElectedIndex(_stakingAddress, 0);\n\n            pools.length--;\n\n            likelihood.length--;\n\n        }\n",
          "message": "Function 'StakingBase._deletePoolToBeElected' (StakingAuRaMock.sol#948-965) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 948,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _deletePoolToBeElected(address _stakingAddress) internal {\n",
          "message": "Parameter '_stakingAddress' of StakingBase._deletePoolToBeElected (StakingAuRaMock.sol#948) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 971,
          "vulnerability_to_line": 980,
          "vulnerability_code": "    function _deletePoolToBeRemoved(address _stakingAddress) internal {\n\n        address[] storage pools = addressArrayStorage[POOLS_TO_BE_REMOVED];\n\n        uint256 indexToDelete = poolToBeRemovedIndex(_stakingAddress);\n\n        if (pools.length > indexToDelete && pools[indexToDelete] == _stakingAddress) {\n\n            pools[indexToDelete] = pools[pools.length - 1];\n\n            _setPoolToBeRemovedIndex(pools[indexToDelete], indexToDelete);\n\n            _setPoolToBeRemovedIndex(_stakingAddress, 0);\n\n            pools.length--;\n\n        }\n",
          "message": "Function 'StakingBase._deletePoolToBeRemoved' (StakingAuRaMock.sol#971-980) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 971,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _deletePoolToBeRemoved(address _stakingAddress) internal {\n",
          "message": "Parameter '_stakingAddress' of StakingBase._deletePoolToBeRemoved (StakingAuRaMock.sol#971) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 985,
          "vulnerability_to_line": 1001,
          "vulnerability_code": "    function _removePool(address _stakingAddress) internal {\n\n        uint256 indexToRemove = poolIndex(_stakingAddress);\n\n        address[] storage pools = addressArrayStorage[POOLS];\n\n        if (pools.length > indexToRemove && pools[indexToRemove] == _stakingAddress) {\n\n            pools[indexToRemove] = pools[pools.length - 1];\n\n            _setPoolIndex(pools[indexToRemove], indexToRemove);\n\n            _setPoolIndex(_stakingAddress, 0);\n\n            pools.length--;\n\n        }\n\n        if (stakeAmountTotal(_stakingAddress) != 0) {\n\n            _addPoolInactive(_stakingAddress);\n\n        } else {\n\n            _removePoolInactive(_stakingAddress);\n\n        }\n\n        _deletePoolToBeElected(_stakingAddress);\n\n        _deletePoolToBeRemoved(_stakingAddress);\n",
          "message": "Function 'StakingBase._removePool' (StakingAuRaMock.sol#985-1001) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 985,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _removePool(address _stakingAddress) internal {\n",
          "message": "Parameter '_stakingAddress' of StakingBase._removePool (StakingAuRaMock.sol#985) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1006,
          "vulnerability_to_line": 1015,
          "vulnerability_code": "    function _removePoolInactive(address _stakingAddress) internal {\n\n        address[] storage pools = addressArrayStorage[POOLS_INACTIVE];\n\n        uint256 indexToRemove = poolInactiveIndex(_stakingAddress);\n\n        if (pools.length > indexToRemove && pools[indexToRemove] == _stakingAddress) {\n\n            pools[indexToRemove] = pools[pools.length - 1];\n\n            _setPoolInactiveIndex(pools[indexToRemove], indexToRemove);\n\n            _setPoolInactiveIndex(_stakingAddress, 0);\n\n            pools.length--;\n\n        }\n",
          "message": "Function 'StakingBase._removePoolInactive' (StakingAuRaMock.sol#1006-1015) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1006,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _removePoolInactive(address _stakingAddress) internal {\n",
          "message": "Parameter '_stakingAddress' of StakingBase._removePoolInactive (StakingAuRaMock.sol#1006) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1024,
          "vulnerability_to_line": 1056,
          "vulnerability_code": "    function _initialize(\n\n        address _validatorSetContract,\n\n        address[] memory _initialStakingAddresses,\n\n        uint256 _delegatorMinStake,\n\n        uint256 _candidateMinStake,\n\n        bool _erc20Restricted\n\n    ) internal {\n\n        require(!isInitialized()); // initialization can only be done once\n\n        require(_validatorSetContract != address(0));\n\n        require(_initialStakingAddresses.length > 0);\n\n        require(_delegatorMinStake != 0);\n\n        require(_candidateMinStake != 0);\n\n\n\n        IBlockReward blockRewardContract = IBlockReward(IValidatorSet(_validatorSetContract).blockRewardContract());\n\n        require(MAX_DELEGATORS_PER_POOL % blockRewardContract.DELEGATORS_ALIQUOT() == 0);\n\n\n\n        addressStorage[VALIDATOR_SET_CONTRACT] = _validatorSetContract;\n\n\n\n        address unremovableStakingAddress = IValidatorSet(_validatorSetContract).unremovableValidator();\n\n\n\n        for (uint256 i = 0; i < _initialStakingAddresses.length; i++) {\n\n            require(_initialStakingAddresses[i] != address(0));\n\n            _addPoolActive(_initialStakingAddresses[i], false);\n\n            if (_initialStakingAddresses[i] != unremovableStakingAddress) {\n\n                _addPoolToBeRemoved(_initialStakingAddresses[i]);\n\n            }\n\n        }\n\n\n\n        _setDelegatorMinStake(_delegatorMinStake);\n\n        _setCandidateMinStake(_candidateMinStake);\n\n\n\n        boolStorage[ERC20_RESTRICTED] = _erc20Restricted;\n",
          "message": "Function 'StakingBase._initialize' (StakingAuRaMock.sol#1024-1056) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1025,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _validatorSetContract,\n",
          "message": "Parameter '_validatorSetContract' of StakingBase._initialize (StakingAuRaMock.sol#1025) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1026,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] memory _initialStakingAddresses,\n",
          "message": "Parameter '_initialStakingAddresses' of StakingBase._initialize (StakingAuRaMock.sol#1026) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1027,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _delegatorMinStake,\n",
          "message": "Parameter '_delegatorMinStake' of StakingBase._initialize (StakingAuRaMock.sol#1027) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1028,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _candidateMinStake,\n",
          "message": "Parameter '_candidateMinStake' of StakingBase._initialize (StakingAuRaMock.sol#1028) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1029,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool _erc20Restricted\n",
          "message": "Parameter '_erc20Restricted' of StakingBase._initialize (StakingAuRaMock.sol#1029) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1065,
          "vulnerability_to_line": 1067,
          "vulnerability_code": "    function _setOrderWithdrawEpoch(address _poolStakingAddress, address _staker, uint256 _stakingEpoch) internal {\n\n        uintStorage[keccak256(abi.encode(ORDER_WITHDRAW_EPOCH, _poolStakingAddress, _staker))] = _stakingEpoch;\n",
          "message": "Function 'StakingBase._setOrderWithdrawEpoch' (StakingAuRaMock.sol#1065-1067) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1065,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setOrderWithdrawEpoch(address _poolStakingAddress, address _staker, uint256 _stakingEpoch) internal {\n",
          "message": "Parameter '_poolStakingAddress' of StakingBase._setOrderWithdrawEpoch (StakingAuRaMock.sol#1065) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1065,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setOrderWithdrawEpoch(address _poolStakingAddress, address _staker, uint256 _stakingEpoch) internal {\n",
          "message": "Parameter '_staker' of StakingBase._setOrderWithdrawEpoch (StakingAuRaMock.sol#1065) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1065,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setOrderWithdrawEpoch(address _poolStakingAddress, address _staker, uint256 _stakingEpoch) internal {\n",
          "message": "Parameter '_stakingEpoch' of StakingBase._setOrderWithdrawEpoch (StakingAuRaMock.sol#1065) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1074,
          "vulnerability_to_line": 1076,
          "vulnerability_code": "    function _setPoolDelegatorIndex(address _poolStakingAddress, address _delegator, uint256 _index) internal {\n\n        uintStorage[keccak256(abi.encode(POOL_DELEGATOR_INDEX, _poolStakingAddress, _delegator))] = _index;\n",
          "message": "Function 'StakingBase._setPoolDelegatorIndex' (StakingAuRaMock.sol#1074-1076) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1074,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setPoolDelegatorIndex(address _poolStakingAddress, address _delegator, uint256 _index) internal {\n",
          "message": "Parameter '_poolStakingAddress' of StakingBase._setPoolDelegatorIndex (StakingAuRaMock.sol#1074) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1074,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setPoolDelegatorIndex(address _poolStakingAddress, address _delegator, uint256 _index) internal {\n",
          "message": "Parameter '_delegator' of StakingBase._setPoolDelegatorIndex (StakingAuRaMock.sol#1074) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1074,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setPoolDelegatorIndex(address _poolStakingAddress, address _delegator, uint256 _index) internal {\n",
          "message": "Parameter '_index' of StakingBase._setPoolDelegatorIndex (StakingAuRaMock.sol#1074) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1083,
          "vulnerability_to_line": 1085,
          "vulnerability_code": "    function _setPoolDelegatorInactiveIndex(address _poolStakingAddress, address _delegator, uint256 _index) internal {\n\n        uintStorage[keccak256(abi.encode(POOL_DELEGATOR_INACTIVE_INDEX, _poolStakingAddress, _delegator))] = _index;\n",
          "message": "Function 'StakingBase._setPoolDelegatorInactiveIndex' (StakingAuRaMock.sol#1083-1085) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1083,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setPoolDelegatorInactiveIndex(address _poolStakingAddress, address _delegator, uint256 _index) internal {\n",
          "message": "Parameter '_poolStakingAddress' of StakingBase._setPoolDelegatorInactiveIndex (StakingAuRaMock.sol#1083) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1083,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setPoolDelegatorInactiveIndex(address _poolStakingAddress, address _delegator, uint256 _index) internal {\n",
          "message": "Parameter '_delegator' of StakingBase._setPoolDelegatorInactiveIndex (StakingAuRaMock.sol#1083) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1083,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setPoolDelegatorInactiveIndex(address _poolStakingAddress, address _delegator, uint256 _index) internal {\n",
          "message": "Parameter '_index' of StakingBase._setPoolDelegatorInactiveIndex (StakingAuRaMock.sol#1083) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1091,
          "vulnerability_to_line": 1093,
          "vulnerability_code": "    function _setPoolIndex(address _stakingAddress, uint256 _index) internal {\n\n        uintStorage[keccak256(abi.encode(POOL_INDEX, _stakingAddress))] = _index;\n",
          "message": "Function 'StakingBase._setPoolIndex' (StakingAuRaMock.sol#1091-1093) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1091,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setPoolIndex(address _stakingAddress, uint256 _index) internal {\n",
          "message": "Parameter '_stakingAddress' of StakingBase._setPoolIndex (StakingAuRaMock.sol#1091) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1091,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setPoolIndex(address _stakingAddress, uint256 _index) internal {\n",
          "message": "Parameter '_index' of StakingBase._setPoolIndex (StakingAuRaMock.sol#1091) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1099,
          "vulnerability_to_line": 1101,
          "vulnerability_code": "    function _setPoolInactiveIndex(address _stakingAddress, uint256 _index) internal {\n\n        uintStorage[keccak256(abi.encode(POOL_INACTIVE_INDEX, _stakingAddress))] = _index;\n",
          "message": "Function 'StakingBase._setPoolInactiveIndex' (StakingAuRaMock.sol#1099-1101) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1099,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setPoolInactiveIndex(address _stakingAddress, uint256 _index) internal {\n",
          "message": "Parameter '_stakingAddress' of StakingBase._setPoolInactiveIndex (StakingAuRaMock.sol#1099) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1099,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setPoolInactiveIndex(address _stakingAddress, uint256 _index) internal {\n",
          "message": "Parameter '_index' of StakingBase._setPoolInactiveIndex (StakingAuRaMock.sol#1099) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1108,
          "vulnerability_to_line": 1110,
          "vulnerability_code": "    function _setPoolToBeElectedIndex(address _stakingAddress, uint256 _index) internal {\n\n        uintStorage[keccak256(abi.encode(POOL_TO_BE_ELECTED_INDEX, _stakingAddress))] = _index;\n",
          "message": "Function 'StakingBase._setPoolToBeElectedIndex' (StakingAuRaMock.sol#1108-1110) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1108,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setPoolToBeElectedIndex(address _stakingAddress, uint256 _index) internal {\n",
          "message": "Parameter '_stakingAddress' of StakingBase._setPoolToBeElectedIndex (StakingAuRaMock.sol#1108) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1108,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setPoolToBeElectedIndex(address _stakingAddress, uint256 _index) internal {\n",
          "message": "Parameter '_index' of StakingBase._setPoolToBeElectedIndex (StakingAuRaMock.sol#1108) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1117,
          "vulnerability_to_line": 1119,
          "vulnerability_code": "    function _setPoolToBeRemovedIndex(address _stakingAddress, uint256 _index) internal {\n\n        uintStorage[keccak256(abi.encode(POOL_TO_BE_REMOVED_INDEX, _stakingAddress))] = _index;\n",
          "message": "Function 'StakingBase._setPoolToBeRemovedIndex' (StakingAuRaMock.sol#1117-1119) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1117,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setPoolToBeRemovedIndex(address _stakingAddress, uint256 _index) internal {\n",
          "message": "Parameter '_stakingAddress' of StakingBase._setPoolToBeRemovedIndex (StakingAuRaMock.sol#1117) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1117,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setPoolToBeRemovedIndex(address _stakingAddress, uint256 _index) internal {\n",
          "message": "Parameter '_index' of StakingBase._setPoolToBeRemovedIndex (StakingAuRaMock.sol#1117) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1125,
          "vulnerability_to_line": 1135,
          "vulnerability_code": "    function _addPoolDelegator(address _poolStakingAddress, address _delegator) internal {\n\n        address[] storage delegators = addressArrayStorage[\n\n            keccak256(abi.encode(POOL_DELEGATORS, _poolStakingAddress))\n\n        ];\n\n        if (delegators.length == 0 || delegators[poolDelegatorIndex(_poolStakingAddress, _delegator)] != _delegator) {\n\n            _setPoolDelegatorIndex(_poolStakingAddress, _delegator, delegators.length);\n\n            delegators.push(_delegator);\n\n            require(delegators.length <= MAX_DELEGATORS_PER_POOL);\n\n        }\n\n        _removePoolDelegatorInactive(_poolStakingAddress, _delegator);\n",
          "message": "Function 'StakingBase._addPoolDelegator' (StakingAuRaMock.sol#1125-1135) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1125,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _addPoolDelegator(address _poolStakingAddress, address _delegator) internal {\n",
          "message": "Parameter '_poolStakingAddress' of StakingBase._addPoolDelegator (StakingAuRaMock.sol#1125) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1125,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _addPoolDelegator(address _poolStakingAddress, address _delegator) internal {\n",
          "message": "Parameter '_delegator' of StakingBase._addPoolDelegator (StakingAuRaMock.sol#1125) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1141,
          "vulnerability_to_line": 1152,
          "vulnerability_code": "    function _addPoolDelegatorInactive(address _poolStakingAddress, address _delegator) internal {\n\n        address[] storage delegators = addressArrayStorage[\n\n            keccak256(abi.encode(POOL_DELEGATORS_INACTIVE, _poolStakingAddress))\n\n        ];\n\n        if (\n\n            delegators.length == 0 ||\n\n            delegators[poolDelegatorInactiveIndex(_poolStakingAddress, _delegator)] != _delegator\n\n        ) {\n\n            _setPoolDelegatorInactiveIndex(_poolStakingAddress, _delegator, delegators.length);\n\n            delegators.push(_delegator);\n\n        }\n",
          "message": "Function 'StakingBase._addPoolDelegatorInactive' (StakingAuRaMock.sol#1141-1152) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1141,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _addPoolDelegatorInactive(address _poolStakingAddress, address _delegator) internal {\n",
          "message": "Parameter '_poolStakingAddress' of StakingBase._addPoolDelegatorInactive (StakingAuRaMock.sol#1141) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1141,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _addPoolDelegatorInactive(address _poolStakingAddress, address _delegator) internal {\n",
          "message": "Parameter '_delegator' of StakingBase._addPoolDelegatorInactive (StakingAuRaMock.sol#1141) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1158,
          "vulnerability_to_line": 1174,
          "vulnerability_code": "    function _removePoolDelegator(address _poolStakingAddress, address _delegator) internal {\n\n        address[] storage delegators = addressArrayStorage[\n\n            keccak256(abi.encode(POOL_DELEGATORS, _poolStakingAddress))\n\n        ];\n\n        uint256 indexToRemove = poolDelegatorIndex(_poolStakingAddress, _delegator);\n\n        if (delegators.length != 0 && delegators[indexToRemove] == _delegator) {\n\n            delegators[indexToRemove] = delegators[delegators.length - 1];\n\n            _setPoolDelegatorIndex(_poolStakingAddress, delegators[indexToRemove], indexToRemove);\n\n            _setPoolDelegatorIndex(_poolStakingAddress, _delegator, 0);\n\n            delegators.length--;\n\n        }\n\n        if (stakeAmount(_poolStakingAddress, _delegator) != 0) {\n\n            _addPoolDelegatorInactive(_poolStakingAddress, _delegator);\n\n        } else {\n\n            _removePoolDelegatorInactive(_poolStakingAddress, _delegator);\n\n        }\n",
          "message": "Function 'StakingBase._removePoolDelegator' (StakingAuRaMock.sol#1158-1174) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1158,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _removePoolDelegator(address _poolStakingAddress, address _delegator) internal {\n",
          "message": "Parameter '_poolStakingAddress' of StakingBase._removePoolDelegator (StakingAuRaMock.sol#1158) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1158,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _removePoolDelegator(address _poolStakingAddress, address _delegator) internal {\n",
          "message": "Parameter '_delegator' of StakingBase._removePoolDelegator (StakingAuRaMock.sol#1158) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1180,
          "vulnerability_to_line": 1191,
          "vulnerability_code": "    function _removePoolDelegatorInactive(address _poolStakingAddress, address _delegator) internal {\n\n        address[] storage delegators = addressArrayStorage[\n\n            keccak256(abi.encode(POOL_DELEGATORS_INACTIVE, _poolStakingAddress))\n\n        ];\n\n        uint256 indexToRemove = poolDelegatorInactiveIndex(_poolStakingAddress, _delegator);\n\n        if (delegators.length != 0 && delegators[indexToRemove] == _delegator) {\n\n            delegators[indexToRemove] = delegators[delegators.length - 1];\n\n            _setPoolDelegatorInactiveIndex(_poolStakingAddress, delegators[indexToRemove], indexToRemove);\n\n            _setPoolDelegatorInactiveIndex(_poolStakingAddress, _delegator, 0);\n\n            delegators.length--;\n\n        }\n",
          "message": "Function 'StakingBase._removePoolDelegatorInactive' (StakingAuRaMock.sol#1180-1191) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1180,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _removePoolDelegatorInactive(address _poolStakingAddress, address _delegator) internal {\n",
          "message": "Parameter '_poolStakingAddress' of StakingBase._removePoolDelegatorInactive (StakingAuRaMock.sol#1180) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1180,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _removePoolDelegatorInactive(address _poolStakingAddress, address _delegator) internal {\n",
          "message": "Parameter '_delegator' of StakingBase._removePoolDelegatorInactive (StakingAuRaMock.sol#1180) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1197,
          "vulnerability_to_line": 1207,
          "vulnerability_code": "    function _setLikelihood(address _poolStakingAddress) internal {\n\n        (bool isToBeElected, uint256 index) = _isPoolToBeElected(_poolStakingAddress);\n\n\n\n        if (!isToBeElected) return;\n\n\n\n        int256 oldValue = intArrayStorage[POOLS_LIKELIHOOD][index];\n\n        int256 newValue = int256(stakeAmountTotalMinusOrderedWithdraw(_poolStakingAddress) * 100 / STAKE_UNIT);\n\n\n\n        intArrayStorage[POOLS_LIKELIHOOD][index] = newValue;\n\n        intStorage[POOLS_LIKELIHOOD_SUM] += newValue - oldValue;\n",
          "message": "Function 'StakingBase._setLikelihood' (StakingAuRaMock.sol#1197-1207) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1197,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setLikelihood(address _poolStakingAddress) internal {\n",
          "message": "Parameter '_poolStakingAddress' of StakingBase._setLikelihood (StakingAuRaMock.sol#1197) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1214,
          "vulnerability_to_line": 1216,
          "vulnerability_code": "    function _setOrderedWithdrawAmount(address _poolStakingAddress, address _staker, uint256 _amount) internal {\n\n        uintStorage[keccak256(abi.encode(ORDERED_WITHDRAW_AMOUNT, _poolStakingAddress, _staker))] = _amount;\n",
          "message": "Function 'StakingBase._setOrderedWithdrawAmount' (StakingAuRaMock.sol#1214-1216) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1214,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setOrderedWithdrawAmount(address _poolStakingAddress, address _staker, uint256 _amount) internal {\n",
          "message": "Parameter '_poolStakingAddress' of StakingBase._setOrderedWithdrawAmount (StakingAuRaMock.sol#1214) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1214,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setOrderedWithdrawAmount(address _poolStakingAddress, address _staker, uint256 _amount) internal {\n",
          "message": "Parameter '_staker' of StakingBase._setOrderedWithdrawAmount (StakingAuRaMock.sol#1214) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1214,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setOrderedWithdrawAmount(address _poolStakingAddress, address _staker, uint256 _amount) internal {\n",
          "message": "Parameter '_amount' of StakingBase._setOrderedWithdrawAmount (StakingAuRaMock.sol#1214) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1222,
          "vulnerability_to_line": 1224,
          "vulnerability_code": "    function _setOrderedWithdrawAmountTotal(address _poolStakingAddress, uint256 _amount) internal {\n\n        uintStorage[keccak256(abi.encode(ORDERED_WITHDRAW_AMOUNT_TOTAL, _poolStakingAddress))] = _amount;\n",
          "message": "Function 'StakingBase._setOrderedWithdrawAmountTotal' (StakingAuRaMock.sol#1222-1224) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1222,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setOrderedWithdrawAmountTotal(address _poolStakingAddress, uint256 _amount) internal {\n",
          "message": "Parameter '_poolStakingAddress' of StakingBase._setOrderedWithdrawAmountTotal (StakingAuRaMock.sol#1222) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1222,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setOrderedWithdrawAmountTotal(address _poolStakingAddress, uint256 _amount) internal {\n",
          "message": "Parameter '_amount' of StakingBase._setOrderedWithdrawAmountTotal (StakingAuRaMock.sol#1222) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1231,
          "vulnerability_to_line": 1233,
          "vulnerability_code": "    function _setStakeAmount(address _poolStakingAddress, address _staker, uint256 _amount) internal {\n\n        uintStorage[keccak256(abi.encode(STAKE_AMOUNT, _poolStakingAddress, _staker))] = _amount;\n",
          "message": "Function 'StakingBase._setStakeAmount' (StakingAuRaMock.sol#1231-1233) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1231,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setStakeAmount(address _poolStakingAddress, address _staker, uint256 _amount) internal {\n",
          "message": "Parameter '_poolStakingAddress' of StakingBase._setStakeAmount (StakingAuRaMock.sol#1231) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1231,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setStakeAmount(address _poolStakingAddress, address _staker, uint256 _amount) internal {\n",
          "message": "Parameter '_staker' of StakingBase._setStakeAmount (StakingAuRaMock.sol#1231) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1231,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setStakeAmount(address _poolStakingAddress, address _staker, uint256 _amount) internal {\n",
          "message": "Parameter '_amount' of StakingBase._setStakeAmount (StakingAuRaMock.sol#1231) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1241,
          "vulnerability_to_line": 1249,
          "vulnerability_code": "    function _setStakeAmountByCurrentEpoch(\n\n        address _poolStakingAddress,\n\n        address _staker,\n\n        uint256 _amount\n\n    ) internal {\n\n        uintStorage[keccak256(abi.encode(\n\n            STAKE_AMOUNT_BY_EPOCH, _poolStakingAddress, _staker, stakingEpoch()\n\n        ))] = _amount;\n",
          "message": "Function 'StakingBase._setStakeAmountByCurrentEpoch' (StakingAuRaMock.sol#1241-1249) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1242,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _poolStakingAddress,\n",
          "message": "Parameter '_poolStakingAddress' of StakingBase._setStakeAmountByCurrentEpoch (StakingAuRaMock.sol#1242) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1243,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _staker,\n",
          "message": "Parameter '_staker' of StakingBase._setStakeAmountByCurrentEpoch (StakingAuRaMock.sol#1243) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1244,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _amount\n",
          "message": "Parameter '_amount' of StakingBase._setStakeAmountByCurrentEpoch (StakingAuRaMock.sol#1244) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1254,
          "vulnerability_to_line": 1256,
          "vulnerability_code": "    function _setStakeAmountTotal(address _poolStakingAddress, uint256 _amount) internal {\n\n        uintStorage[keccak256(abi.encode(STAKE_AMOUNT_TOTAL, _poolStakingAddress))] = _amount;\n",
          "message": "Function 'StakingBase._setStakeAmountTotal' (StakingAuRaMock.sol#1254-1256) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1254,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setStakeAmountTotal(address _poolStakingAddress, uint256 _amount) internal {\n",
          "message": "Parameter '_poolStakingAddress' of StakingBase._setStakeAmountTotal (StakingAuRaMock.sol#1254) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1254,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setStakeAmountTotal(address _poolStakingAddress, uint256 _amount) internal {\n",
          "message": "Parameter '_amount' of StakingBase._setStakeAmountTotal (StakingAuRaMock.sol#1254) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1261,
          "vulnerability_to_line": 1263,
          "vulnerability_code": "    function _setDelegatorMinStake(uint256 _minStake) internal {\n\n        uintStorage[DELEGATOR_MIN_STAKE] = _minStake * STAKE_UNIT;\n",
          "message": "Function 'StakingBase._setDelegatorMinStake' (StakingAuRaMock.sol#1261-1263) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1261,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setDelegatorMinStake(uint256 _minStake) internal {\n",
          "message": "Parameter '_minStake' of StakingBase._setDelegatorMinStake (StakingAuRaMock.sol#1261) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1268,
          "vulnerability_to_line": 1270,
          "vulnerability_code": "    function _setCandidateMinStake(uint256 _minStake) internal {\n\n        uintStorage[CANDIDATE_MIN_STAKE] = _minStake * STAKE_UNIT;\n",
          "message": "Function 'StakingBase._setCandidateMinStake' (StakingAuRaMock.sol#1268-1270) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1268,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setCandidateMinStake(uint256 _minStake) internal {\n",
          "message": "Parameter '_minStake' of StakingBase._setCandidateMinStake (StakingAuRaMock.sol#1268) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1276,
          "vulnerability_to_line": 1289,
          "vulnerability_code": "    function _stake(address _toPoolStakingAddress, uint256 _amount) internal {\n\n        IERC20Minting tokenContract = IERC20Minting(erc20TokenContract());\n\n        if (address(tokenContract) != address(0)) {\n\n            require(msg.value == 0);\n\n        }\n\n        address staker = msg.sender;\n\n        _stake(_toPoolStakingAddress, staker, _amount);\n\n        if (address(tokenContract) != address(0)) {\n\n            tokenContract.stake(staker, _amount);\n\n        } else {\n\n            require(boolStorage[ERC20_RESTRICTED]);\n\n        }\n\n        emit Staked(_toPoolStakingAddress, staker, stakingEpoch(), _amount);\n",
          "message": "Function 'StakingBase._stake' (StakingAuRaMock.sol#1276-1289) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1276,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _stake(address _toPoolStakingAddress, uint256 _amount) internal {\n",
          "message": "Parameter '_toPoolStakingAddress' of StakingBase._stake (StakingAuRaMock.sol#1276) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1276,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _stake(address _toPoolStakingAddress, uint256 _amount) internal {\n",
          "message": "Parameter '_amount' of StakingBase._stake (StakingAuRaMock.sol#1276) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1296,
          "vulnerability_to_line": 1333,
          "vulnerability_code": "    function _stake(address _poolStakingAddress, address _staker, uint256 _amount) internal {\n\n        IValidatorSet validatorSet = validatorSetContract();\n\n        address poolMiningAddress = validatorSet.miningByStakingAddress(_poolStakingAddress);\n\n\n\n        require(poolMiningAddress != address(0));\n\n        require(_poolStakingAddress != address(0));\n\n        require(_amount != 0);\n\n        require(!validatorSet.isValidatorBanned(poolMiningAddress));\n\n        require(areStakeAndWithdrawAllowed());\n\n\n\n        uint256 newStakeAmount = stakeAmount(_poolStakingAddress, _staker).add(_amount);\n\n        if (_staker == _poolStakingAddress) {\n\n            require(newStakeAmount >= getCandidateMinStake()); // the staked amount must be at least CANDIDATE_MIN_STAKE\n\n        } else {\n\n            require(newStakeAmount >= getDelegatorMinStake()); // the staked amount must be at least DELEGATOR_MIN_STAKE\n\n\n\n            // The delegator cannot stake into the pool of the candidate which hasn't self-staked.\n\n            // Also, that candidate shouldn't want to withdraw all his funds.\n\n            require(stakeAmountMinusOrderedWithdraw(_poolStakingAddress, _poolStakingAddress) != 0);\n\n        }\n\n        _setStakeAmount(_poolStakingAddress, _staker, newStakeAmount);\n\n        _setStakeAmountByCurrentEpoch(\n\n            _poolStakingAddress,\n\n            _staker,\n\n            stakeAmountByCurrentEpoch(_poolStakingAddress, _staker).add(_amount)\n\n        );\n\n        _setStakeAmountTotal(_poolStakingAddress, stakeAmountTotal(_poolStakingAddress).add(_amount));\n\n\n\n        if (_staker == _poolStakingAddress) { // `staker` makes a stake for himself and becomes a candidate\n\n            // Add `_poolStakingAddress` to the array of pools\n\n            _addPoolActive(_poolStakingAddress, _poolStakingAddress != validatorSet.unremovableValidator());\n\n        } else {\n\n            // Add `_staker` to the array of pool's delegators\n\n            _addPoolDelegator(_poolStakingAddress, _staker);\n\n        }\n\n\n\n        _setLikelihood(_poolStakingAddress);\n",
          "message": "Function 'StakingBase._stake' (StakingAuRaMock.sol#1296-1333) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1296,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _stake(address _poolStakingAddress, address _staker, uint256 _amount) internal {\n",
          "message": "Parameter '_poolStakingAddress' of StakingBase._stake (StakingAuRaMock.sol#1296) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1296,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _stake(address _poolStakingAddress, address _staker, uint256 _amount) internal {\n",
          "message": "Parameter '_staker' of StakingBase._stake (StakingAuRaMock.sol#1296) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1296,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _stake(address _poolStakingAddress, address _staker, uint256 _amount) internal {\n",
          "message": "Parameter '_amount' of StakingBase._stake (StakingAuRaMock.sol#1296) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1340,
          "vulnerability_to_line": 1370,
          "vulnerability_code": "    function _withdraw(address _poolStakingAddress, address _staker, uint256 _amount) internal {\n\n        require(_poolStakingAddress != address(0));\n\n        require(_amount != 0);\n\n\n\n        // How much can `staker` withdraw from `_poolStakingAddress` at the moment?\n\n        require(_amount <= maxWithdrawAllowed(_poolStakingAddress, _staker));\n\n\n\n        uint256 currentStakeAmount = stakeAmount(_poolStakingAddress, _staker);\n\n        uint256 alreadyOrderedAmount = orderedWithdrawAmount(_poolStakingAddress, _staker);\n\n        uint256 resultingStakeAmount = currentStakeAmount.sub(alreadyOrderedAmount).sub(_amount);\n\n\n\n        // The amount to be withdrawn must be the whole staked amount or\n\n        // must not exceed the diff between the entire amount and MIN_STAKE\n\n        uint256 minAllowedStake = (_poolStakingAddress == _staker) ? getCandidateMinStake() : getDelegatorMinStake();\n\n        require(resultingStakeAmount == 0 || resultingStakeAmount >= minAllowedStake);\n\n\n\n        _setStakeAmount(_poolStakingAddress, _staker, currentStakeAmount.sub(_amount));\n\n        uint256 amountByEpoch = stakeAmountByCurrentEpoch(_poolStakingAddress, _staker);\n\n        _setStakeAmountByCurrentEpoch(\n\n            _poolStakingAddress,\n\n            _staker,\n\n            amountByEpoch >= _amount ? amountByEpoch - _amount : 0\n\n        );\n\n        _setStakeAmountTotal(_poolStakingAddress, stakeAmountTotal(_poolStakingAddress).sub(_amount));\n\n\n\n        if (resultingStakeAmount == 0) {\n\n            _withdrawCheckPool(_poolStakingAddress, _staker);\n\n        }\n\n\n\n        _setLikelihood(_poolStakingAddress);\n",
          "message": "Function 'StakingBase._withdraw' (StakingAuRaMock.sol#1340-1370) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1340,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _withdraw(address _poolStakingAddress, address _staker, uint256 _amount) internal {\n",
          "message": "Parameter '_poolStakingAddress' of StakingBase._withdraw (StakingAuRaMock.sol#1340) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1340,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _withdraw(address _poolStakingAddress, address _staker, uint256 _amount) internal {\n",
          "message": "Parameter '_staker' of StakingBase._withdraw (StakingAuRaMock.sol#1340) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1340,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _withdraw(address _poolStakingAddress, address _staker, uint256 _amount) internal {\n",
          "message": "Parameter '_amount' of StakingBase._withdraw (StakingAuRaMock.sol#1340) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1376,
          "vulnerability_to_line": 1391,
          "vulnerability_code": "    function _withdrawCheckPool(address _poolStakingAddress, address _staker) internal {\n\n        if (_staker == _poolStakingAddress) {\n\n            IValidatorSet validatorSet = validatorSetContract();\n\n            address unremovableStakingAddress = validatorSet.unremovableValidator();\n\n\n\n            if (_poolStakingAddress != unremovableStakingAddress) {\n\n                if (validatorSet.isValidator(validatorSet.miningByStakingAddress(_poolStakingAddress))) {\n\n                    _addPoolToBeRemoved(_poolStakingAddress);\n\n                } else {\n\n                    _removePool(_poolStakingAddress);\n\n                }\n\n            }\n\n        } else {\n\n            _removePoolDelegator(_poolStakingAddress, _staker);\n\n        }\n",
          "message": "Function 'StakingBase._withdrawCheckPool' (StakingAuRaMock.sol#1376-1391) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1376,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _withdrawCheckPool(address _poolStakingAddress, address _staker) internal {\n",
          "message": "Parameter '_poolStakingAddress' of StakingBase._withdrawCheckPool (StakingAuRaMock.sol#1376) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1376,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _withdrawCheckPool(address _poolStakingAddress, address _staker) internal {\n",
          "message": "Parameter '_staker' of StakingBase._withdrawCheckPool (StakingAuRaMock.sol#1376) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1394,
          "vulnerability_to_line": 1396,
          "vulnerability_code": "    function _getCurrentBlockNumber() internal view returns(uint256) {\n\n        return block.number;\n",
          "message": "Function 'StakingBase._getCurrentBlockNumber' (StakingAuRaMock.sol#1394-1396) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1400,
          "vulnerability_to_line": 1402,
          "vulnerability_code": "    function _getMaxCandidates() internal pure returns(uint256) {\n\n        return MAX_CANDIDATES;\n",
          "message": "Function 'StakingBase._getMaxCandidates' (StakingAuRaMock.sol#1400-1402) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1410,
          "vulnerability_to_line": 1419,
          "vulnerability_code": "    function _isPoolToBeElected(address _stakingAddress) internal view returns(bool toBeElected, uint256 index) {\n\n        address[] storage pools = addressArrayStorage[POOLS_TO_BE_ELECTED];\n\n        if (pools.length != 0) {\n\n            index = poolToBeElectedIndex(_stakingAddress);\n\n            if (pools[index] == _stakingAddress) {\n\n                return (true, index);\n\n            }\n\n        }\n\n        return (false, 0);\n",
          "message": "Function 'StakingBase._isPoolToBeElected' (StakingAuRaMock.sol#1410-1419) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1410,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _isPoolToBeElected(address _stakingAddress) internal view returns(bool toBeElected, uint256 index) {\n",
          "message": "Parameter '_stakingAddress' of StakingBase._isPoolToBeElected (StakingAuRaMock.sol#1410) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1424,
          "vulnerability_to_line": 1435,
          "vulnerability_code": "    function _isWithdrawAllowed(address _miningAddress) internal view returns(bool) {\n\n        if (validatorSetContract().isValidatorBanned(_miningAddress)) {\n\n            // No one can withdraw from `_poolStakingAddress` until the ban is expired\n\n            return false;\n\n        }\n\n\n\n        if (!areStakeAndWithdrawAllowed()) {\n\n            return false;\n\n        }\n\n\n\n        return true;\n",
          "message": "Function 'StakingBase._isWithdrawAllowed' (StakingAuRaMock.sol#1424-1435) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1424,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _isWithdrawAllowed(address _miningAddress) internal view returns(bool) {\n",
          "message": "Parameter '_miningAddress' of StakingBase._isWithdrawAllowed (StakingAuRaMock.sol#1424) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1445,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address,\n",
          "message": "Parameter '' of IStakingAuRa.initialize (StakingAuRaMock.sol#1445) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1446,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] calldata,\n",
          "message": "Parameter '_scope_0' of IStakingAuRa.initialize (StakingAuRaMock.sol#1446) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1447,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256,\n",
          "message": "Parameter '_scope_1' of IStakingAuRa.initialize (StakingAuRaMock.sol#1447) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1448,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256,\n",
          "message": "Parameter '_scope_2' of IStakingAuRa.initialize (StakingAuRaMock.sol#1448) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1449,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256,\n",
          "message": "Parameter '_scope_3' of IStakingAuRa.initialize (StakingAuRaMock.sol#1449) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1450,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256,\n",
          "message": "Parameter '_scope_4' of IStakingAuRa.initialize (StakingAuRaMock.sol#1450) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1451,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256,\n",
          "message": "Parameter '_scope_5' of IStakingAuRa.initialize (StakingAuRaMock.sol#1451) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1452,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool\n",
          "message": "Parameter '_scope_6' of IStakingAuRa.initialize (StakingAuRaMock.sol#1452) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1454,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setStakingEpochStartBlock(uint256) external;\n",
          "message": "Parameter '' of IStakingAuRa.setStakingEpochStartBlock (StakingAuRaMock.sol#1454) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1512,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _validatorSetContract,\n",
          "message": "Parameter '_validatorSetContract' of StakingAuRa.initialize (StakingAuRaMock.sol#1512) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1513,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] calldata _initialStakingAddresses,\n",
          "message": "Parameter '_initialStakingAddresses' of StakingAuRa.initialize (StakingAuRaMock.sol#1513) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1514,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _delegatorMinStake,\n",
          "message": "Parameter '_delegatorMinStake' of StakingAuRa.initialize (StakingAuRaMock.sol#1514) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1515,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _candidateMinStake,\n",
          "message": "Parameter '_candidateMinStake' of StakingAuRa.initialize (StakingAuRaMock.sol#1515) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1516,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _stakingEpochDuration,\n",
          "message": "Parameter '_stakingEpochDuration' of StakingAuRa.initialize (StakingAuRaMock.sol#1516) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1517,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _stakingEpochStartBlock,\n",
          "message": "Parameter '_stakingEpochStartBlock' of StakingAuRa.initialize (StakingAuRaMock.sol#1517) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1518,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _stakeWithdrawDisallowPeriod,\n",
          "message": "Parameter '_stakeWithdrawDisallowPeriod' of StakingAuRa.initialize (StakingAuRaMock.sol#1518) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1519,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool _erc20Restricted\n",
          "message": "Parameter '_erc20Restricted' of StakingAuRa.initialize (StakingAuRaMock.sol#1519) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1542,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setStakingEpochStartBlock(uint256 _blockNumber) external onlyValidatorSetContract {\n",
          "message": "Parameter '_blockNumber' of StakingAuRa.setStakingEpochStartBlock (StakingAuRaMock.sol#1542) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1478,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addPool(uint256 _amount, address _miningAddress) external gasPriceIsValid onlyInitialized {\n",
          "message": "Parameter '_amount' of StakingAuRa.addPool (StakingAuRaMock.sol#1478) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1478,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addPool(uint256 _amount, address _miningAddress) external gasPriceIsValid onlyInitialized {\n",
          "message": "Parameter '_miningAddress' of StakingAuRa.addPool (StakingAuRaMock.sol#1478) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1490,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addPoolNative(address _miningAddress) external gasPriceIsValid onlyInitialized payable {\n",
          "message": "Parameter '_miningAddress' of StakingAuRa.addPoolNative (StakingAuRaMock.sol#1490) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1625,
          "vulnerability_to_line": 1627,
          "vulnerability_code": "    function _getCurrentBlockNumber() internal view returns(uint256) {\n\n        return uintStorage[keccak256(\"currentBlockNumber\")];\n",
          "message": "Function 'StakingAuRaMock._getCurrentBlockNumber' (StakingAuRaMock.sol#1625-1627) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1629,
          "vulnerability_to_line": 1631,
          "vulnerability_code": "    function _getMaxCandidates() internal pure returns(uint256) {\n\n        return 100;\n",
          "message": "Function 'StakingAuRaMock._getMaxCandidates' (StakingAuRaMock.sol#1629-1631) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1595,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addPoolActiveMock(address _stakingAddress) public {\n",
          "message": "Parameter '_stakingAddress' of StakingAuRaMock.addPoolActiveMock (StakingAuRaMock.sol#1595) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1599,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addPoolInactiveMock(address _stakingAddress) public {\n",
          "message": "Parameter '_stakingAddress' of StakingAuRaMock.addPoolInactiveMock (StakingAuRaMock.sol#1599) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1603,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setCurrentBlockNumber(uint256 _blockNumber) public {\n",
          "message": "Parameter '_blockNumber' of StakingAuRaMock.setCurrentBlockNumber (StakingAuRaMock.sol#1603) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1607,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setErc20TokenContractMock(address _erc20TokenContract) public {\n",
          "message": "Parameter '_erc20TokenContract' of StakingAuRaMock.setErc20TokenContractMock (StakingAuRaMock.sol#1607) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1611,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setErc20Restricted(bool _erc20Restricted) public {\n",
          "message": "Parameter '_erc20Restricted' of StakingAuRaMock.setErc20Restricted (StakingAuRaMock.sol#1611) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1615,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setStakeAmountTotal(address _poolStakingAddress, uint256 _amount) public {\n",
          "message": "Parameter '_poolStakingAddress' of StakingAuRaMock.setStakeAmountTotal (StakingAuRaMock.sol#1615) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1615,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setStakeAmountTotal(address _poolStakingAddress, uint256 _amount) public {\n",
          "message": "Parameter '_amount' of StakingAuRaMock.setStakeAmountTotal (StakingAuRaMock.sol#1615) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1619,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setValidatorSetAddress(address _validatorSetAddress) public {\n",
          "message": "Parameter '_validatorSetAddress' of StakingAuRaMock.setValidatorSetAddress (StakingAuRaMock.sol#1619) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes32 => string) internal stringStorage;\n",
          "message": "EternalStorage.stringStorage (StakingAuRaMock.sol#101) is never used in StakingAuRaMock\nEternalStorage.bytesStorage (StakingAuRaMock.sol#103) is never used in StakingAuRaMock\nEternalStorage.bytes32Storage (StakingAuRaMock.sol#106) is never used in StakingAuRaMock\nEternalStorage.uintArrayStorage (StakingAuRaMock.sol#108) is never used in StakingAuRaMock\nEternalStorage.stringArrayStorage (StakingAuRaMock.sol#109) is never used in StakingAuRaMock\nEternalStorage.bytesArrayStorage (StakingAuRaMock.sol#111) is never used in StakingAuRaMock\nEternalStorage.boolArrayStorage (StakingAuRaMock.sol#112) is never used in StakingAuRaMock\nEternalStorage.bytes32ArrayStorage (StakingAuRaMock.sol#114) is never used in StakingAuRaMock\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 962,
          "vulnerability_to_line": null,
          "vulnerability_code": "            pools.length--;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 963,
          "vulnerability_to_line": null,
          "vulnerability_code": "            likelihood.length--;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 978,
          "vulnerability_to_line": null,
          "vulnerability_code": "            pools.length--;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 992,
          "vulnerability_to_line": null,
          "vulnerability_code": "            pools.length--;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 1013,
          "vulnerability_to_line": null,
          "vulnerability_code": "            pools.length--;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 1167,
          "vulnerability_to_line": null,
          "vulnerability_code": "            delegators.length--;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 1189,
          "vulnerability_to_line": null,
          "vulnerability_code": "            delegators.length--;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 1044,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < _initialStakingAddresses.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1044,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < _initialStakingAddresses.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 1467,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract StakingAuRa is IStakingAuRa, StakingBase {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_MSGVALUE_EQUALS_ZERO",
          "vulnerability_from_line": 1279,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(msg.value == 0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 522,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setErc20TokenContract(address _erc20TokenContract) external onlyOwner onlyInitialized {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 531,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setCandidateMinStake(uint256 _minStake) external onlyOwner onlyInitialized {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 538,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setDelegatorMinStake(uint256 _minStake) external onlyOwner onlyInitialized {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 186,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getPoolsLikelihood() external view returns(int256[] memory, int256);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function newValidatorSet() external returns(bool, uint256);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 568,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getPoolsLikelihood() external view returns(int256[] memory likelihoods, int256 sum) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1410,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _isPoolToBeElected(address _stakingAddress) internal view returns(bool toBeElected, uint256 index) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1511,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function initialize(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1513,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] calldata _initialStakingAddresses,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1514,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _delegatorMinStake,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1515,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _candidateMinStake,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1516,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _stakingEpochDuration,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1517,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _stakingEpochStartBlock,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1518,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _stakeWithdrawDisallowPeriod,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1519,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool _erc20Restricted\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1521,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_stakingEpochDuration != 0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1522,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_stakingEpochDuration > _stakeWithdrawDisallowPeriod);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1522,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_stakingEpochDuration > _stakeWithdrawDisallowPeriod);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1523,
          "vulnerability_to_line": null,
          "vulnerability_code": "        IValidatorSet validatorSet = IValidatorSet(_validatorSetContract);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1524,
          "vulnerability_to_line": null,
          "vulnerability_code": "        IBlockReward blockReward = IBlockReward(validatorSet.blockRewardContract());\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1525,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_stakingEpochDuration >= validatorSet.MAX_VALIDATORS() * blockReward.DELEGATORS_ALIQUOT() * 2 + 1);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1525,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_stakingEpochDuration >= validatorSet.MAX_VALIDATORS() * blockReward.DELEGATORS_ALIQUOT() * 2 + 1);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1525,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_stakingEpochDuration >= validatorSet.MAX_VALIDATORS() * blockReward.DELEGATORS_ALIQUOT() * 2 + 1);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1525,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_stakingEpochDuration >= validatorSet.MAX_VALIDATORS() * blockReward.DELEGATORS_ALIQUOT() * 2 + 1);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1525,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_stakingEpochDuration >= validatorSet.MAX_VALIDATORS() * blockReward.DELEGATORS_ALIQUOT() * 2 + 1);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1526,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_stakeWithdrawDisallowPeriod != 0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1527,
          "vulnerability_to_line": null,
          "vulnerability_code": "        super._initialize(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1529,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _initialStakingAddresses,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1531,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _candidateMinStake,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1534,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uintStorage[STAKING_EPOCH_DURATION] = _stakingEpochDuration;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1535,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uintStorage[STAKE_WITHDRAW_DISALLOW_PERIOD] = _stakeWithdrawDisallowPeriod;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1536,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uintStorage[STAKING_EPOCH_START_BLOCK] = _stakingEpochStartBlock;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    }
  }
}