{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 396,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract MintableToken is StandardToken, Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 400,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bool public mintingFinished = false;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(string memory _name, string memory _symbol, uint8 _decimals) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": null,
          "vulnerability_code": "    name = _name;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 202,
          "vulnerability_to_line": null,
          "vulnerability_code": "    symbol = _symbol;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 203,
          "vulnerability_to_line": null,
          "vulnerability_code": "    decimals = _decimals;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 204,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 227,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "    owner = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 229,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 457,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 458,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string memory _name,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 459,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string memory _symbol,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 460,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 _decimals\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 461,
          "vulnerability_to_line": null,
          "vulnerability_code": "  ) public DetailedERC20(\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 462,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _name,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 463,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _symbol,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 464,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _decimals\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 465,
          "vulnerability_to_line": null,
          "vulnerability_code": "  ) {}\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 570,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 571,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string memory _name,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 572,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string memory _symbol,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 573,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 _decimals\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 574,
          "vulnerability_to_line": null,
          "vulnerability_code": "  ) public ERC677BridgeToken(\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 575,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _name,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 576,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _symbol,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 577,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _decimals\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 578,
          "vulnerability_to_line": null,
          "vulnerability_code": "  ) {}\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 645,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 646,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string memory _name,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 647,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string memory _symbol,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 648,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 _decimals\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 649,
          "vulnerability_to_line": null,
          "vulnerability_code": "  ) public ERC677BridgeTokenRewardable(\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 650,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _name,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 651,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _symbol,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 652,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _decimals\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 653,
          "vulnerability_to_line": null,
          "vulnerability_code": "  ) {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 654,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 601,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _receivers.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 468,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_bridgeContract != address(0) && isContract(_bridgeContract));\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 473,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_recipient != address(0) && _recipient != address(this));\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 591,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_blockRewardContract != address(0) && isContract(_blockRewardContract));\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 596,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_stakingContract != address(0) && isContract(_stakingContract));\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 507,
          "vulnerability_to_line": null,
          "vulnerability_code": "    if (isContract(_to) && !contractFallback(_to, _value, new bytes(0))) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 508,
          "vulnerability_to_line": null,
          "vulnerability_code": "      if (_to == bridgeContract) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 509,
          "vulnerability_to_line": null,
          "vulnerability_code": "        revert();\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 510,
          "vulnerability_to_line": null,
          "vulnerability_code": "      } else {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 511,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit ContractFallbackCallFailed(msg.sender, _to, _value);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 512,
          "vulnerability_to_line": null,
          "vulnerability_code": "      }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 513,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 601,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _receivers.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_86"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 531,
          "vulnerability_to_line": 539,
          "vulnerability_code": "  function isContract(address _addr)\n\n    internal\n\n    view\n\n    returns (bool)\n\n  {\n\n    uint length;\n\n    assembly { length := extcodesize(_addr) }\n\n    return length > 0;\n",
          "message": "ERC677BridgeToken.isContract (ERC677BridgeTokenRewardableMock.sol#531-539) is declared view but contains assembly code\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 531,
          "vulnerability_to_line": 539,
          "vulnerability_code": "  function isContract(address _addr)\n\n    internal\n\n    view\n\n    returns (bool)\n\n  {\n\n    uint length;\n\n    assembly { length := extcodesize(_addr) }\n\n    return length > 0;\n",
          "message": "ERC677BridgeToken.isContract uses assembly (ERC677BridgeTokenRewardableMock.sol#531-539)\n\t- ERC677BridgeTokenRewardableMock.sol#537\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function totalSupply() public view returns(uint256);\n",
          "message": "ERC20Basic.totalSupply (ERC677BridgeTokenRewardableMock.sol#26) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 127,
          "vulnerability_to_line": 129,
          "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return totalSupply_;\n",
          "message": "BasicToken.totalSupply (ERC677BridgeTokenRewardableMock.sol#127-129) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": 153,
          "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256) {\n\n    return balances[_owner];\n",
          "message": "BasicToken.balanceOf (ERC677BridgeTokenRewardableMock.sol#151-153) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address who) public view returns(uint256);\n",
          "message": "ERC20Basic.balanceOf (ERC677BridgeTokenRewardableMock.sol#27) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 326,
          "vulnerability_to_line": 335,
          "vulnerability_code": "  function allowance(\n\n    address _owner,\n\n    address _spender\n\n   )\n\n    public\n\n    view\n\n    returns (uint256)\n\n  {\n\n    return allowed[_owner][_spender];\n",
          "message": "StandardToken.allowance (ERC677BridgeTokenRewardableMock.sol#326-335) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address owner, address spender) public view returns(uint256);\n",
          "message": "ERC20.allowance (ERC677BridgeTokenRewardableMock.sol#39) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address spender, uint256 value) public returns(bool);\n",
          "message": "ERC20.approve (ERC677BridgeTokenRewardableMock.sol#41) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 314,
          "vulnerability_to_line": 318,
          "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n\n    allowed[msg.sender][_spender] = _value;\n\n    emit Approval(msg.sender, _spender, _value);\n\n    return true;\n",
          "message": "StandardToken.approve (ERC677BridgeTokenRewardableMock.sol#314-318) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 418,
          "vulnerability_to_line": 432,
          "vulnerability_code": "  function mint(\n\n    address _to,\n\n    uint256 _amount\n\n  )\n\n    hasMintPermission\n\n    canMint\n\n    public\n\n    returns (bool)\n\n  {\n\n    totalSupply_ = totalSupply_.add(_amount);\n\n    balances[_to] = balances[_to].add(_amount);\n\n    emit Mint(_to, _amount);\n\n    emit Transfer(address(0), _to, _amount);\n\n    return true;\n",
          "message": "MintableToken.mint (ERC677BridgeTokenRewardableMock.sol#418-432) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mint(address, uint256) public returns(bool);\n",
          "message": "IBurnableMintableERC677Token.mint (ERC677BridgeTokenRewardableMock.sol#54) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function burn(uint256 _value) public;\n",
          "message": "IBurnableMintableERC677Token.burn (ERC677BridgeTokenRewardableMock.sol#55) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 171,
          "vulnerability_to_line": 173,
          "vulnerability_code": "  function burn(uint256 _value) public {\n\n    _burn(msg.sender, _value);\n",
          "message": "BurnableToken.burn (ERC677BridgeTokenRewardableMock.sol#171-173) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 549,
          "vulnerability_to_line": 559,
          "vulnerability_code": "  function claimTokens(address _token, address payable _to) public onlyOwner {\n\n    require(_to != address(0));\n\n    if (_token == address(0)) {\n\n      _to.transfer(address(this).balance);\n\n      return;\n\n    }\n\n\n\n    DetailedERC20 token = DetailedERC20(_token);\n\n    uint256 balance = token.balanceOf(address(this));\n\n    require(token.transfer(_to, balance));\n",
          "message": "ERC677BridgeToken.claimTokens (ERC677BridgeTokenRewardableMock.sol#549-559) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function claimTokens(address _token, address payable _to) public;\n",
          "message": "IBurnableMintableERC677Token.claimTokens (ERC677BridgeTokenRewardableMock.sol#56) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 242,
          "vulnerability_to_line": 245,
          "vulnerability_code": "  function renounceOwnership() public onlyOwner {\n\n    emit OwnershipRenounced(owner);\n\n    owner = address(0);\n",
          "message": "Ownable.renounceOwnership (ERC677BridgeTokenRewardableMock.sol#242-245) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 545,
          "vulnerability_to_line": 547,
          "vulnerability_code": "  function renounceOwnership() public onlyOwner {\n\n    revert();\n",
          "message": "ERC677BridgeToken.renounceOwnership (ERC677BridgeTokenRewardableMock.sol#545-547) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 251,
          "vulnerability_to_line": 253,
          "vulnerability_code": "  function transferOwnership(address _newOwner) public onlyOwner {\n\n    _transferOwnership(_newOwner);\n",
          "message": "Ownable.transferOwnership (ERC677BridgeTokenRewardableMock.sol#251-253) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 347,
          "vulnerability_to_line": 357,
          "vulnerability_code": "  function increaseApproval(\n\n    address _spender,\n\n    uint _addedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
          "message": "StandardToken.increaseApproval (ERC677BridgeTokenRewardableMock.sol#347-357) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 369,
          "vulnerability_to_line": 384,
          "vulnerability_code": "  function decreaseApproval(\n\n    address _spender,\n\n    uint _subtractedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    uint oldValue = allowed[msg.sender][_spender];\n\n    if (_subtractedValue > oldValue) {\n\n      allowed[msg.sender][_spender] = 0;\n\n    } else {\n\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\n    }\n\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
          "message": "StandardToken.decreaseApproval (ERC677BridgeTokenRewardableMock.sol#369-384) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 541,
          "vulnerability_to_line": 543,
          "vulnerability_code": "  function finishMinting() public returns (bool) {\n\n    revert();\n",
          "message": "ERC677BridgeToken.finishMinting (ERC677BridgeTokenRewardableMock.sol#541-543) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 438,
          "vulnerability_to_line": 442,
          "vulnerability_code": "  function finishMinting() onlyOwner canMint public returns (bool) {\n\n    mintingFinished = true;\n\n    emit MintFinished();\n\n    return true;\n",
          "message": "MintableToken.finishMinting (ERC677BridgeTokenRewardableMock.sol#438-442) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 467,
          "vulnerability_to_line": 470,
          "vulnerability_code": "  function setBridgeContract(address _bridgeContract) onlyOwner public {\n\n    require(_bridgeContract != address(0) && isContract(_bridgeContract));\n\n    bridgeContract = _bridgeContract;\n",
          "message": "ERC677BridgeToken.setBridgeContract (ERC677BridgeTokenRewardableMock.sol#467-470) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 495,
          "vulnerability_to_line": 497,
          "vulnerability_code": "  function getTokenInterfacesVersion() public pure returns(uint64 major, uint64 minor, uint64 patch) {\n\n    return (2, 0, 0);\n",
          "message": "ERC677BridgeToken.getTokenInterfacesVersion (ERC677BridgeTokenRewardableMock.sol#495-497) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 590,
          "vulnerability_to_line": 593,
          "vulnerability_code": "  function setBlockRewardContract(address _blockRewardContract) onlyOwner public {\n\n    require(_blockRewardContract != address(0) && isContract(_blockRewardContract));\n\n    blockRewardContract = _blockRewardContract;\n",
          "message": "ERC677BridgeTokenRewardable.setBlockRewardContract (ERC677BridgeTokenRewardableMock.sol#590-593) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 595,
          "vulnerability_to_line": 598,
          "vulnerability_code": "  function setStakingContract(address _stakingContract) onlyOwner public {\n\n    require(_stakingContract != address(0) && isContract(_stakingContract));\n\n    stakingContract = _stakingContract;\n",
          "message": "ERC677BridgeTokenRewardable.setStakingContract (ERC677BridgeTokenRewardableMock.sol#595-598) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.5.9;\n",
          "message": "Detected issues with version pragma in ERC677BridgeTokenRewardableMock.sol:\n\t- pragma solidity0.5.9 (ERC677BridgeTokenRewardableMock.sol#3): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 517,
          "vulnerability_to_line": 529,
          "vulnerability_code": "  function contractFallback(\n\n    address _to,\n\n    uint _value,\n\n    bytes memory _data\n\n  )\n\n    private\n\n    returns(bool)\n\n  {\n\n    (bool success,) = _to.call(\n\n      abi.encodeWithSignature(\"onTokenTransfer(address,uint256,bytes)\", msg.sender, _value, _data)\n\n    );\n\n    return success;\n",
          "message": "Low level call in ERC677BridgeToken.contractFallback (ERC677BridgeTokenRewardableMock.sol#517-529):\n\t-(success) = _to.call(abi.encodeWithSignature(onTokenTransfer(address,uint256,bytes),msg.sender,_value,_data)) ERC677BridgeTokenRewardableMock.sol#525-527\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferAndCall(address, uint, bytes calldata) external returns(bool);\n",
          "message": "Parameter '' of ERC677.transferAndCall (ERC677BridgeTokenRewardableMock.sol#48) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferAndCall(address, uint, bytes calldata) external returns(bool);\n",
          "message": "Parameter '_scope_0' of ERC677.transferAndCall (ERC677BridgeTokenRewardableMock.sol#48) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferAndCall(address, uint, bytes calldata) external returns(bool);\n",
          "message": "Parameter '_scope_1' of ERC677.transferAndCall (ERC677BridgeTokenRewardableMock.sol#48) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mint(address, uint256) public returns(bool);\n",
          "message": "Parameter '' of IBurnableMintableERC677Token.mint (ERC677BridgeTokenRewardableMock.sol#54) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mint(address, uint256) public returns(bool);\n",
          "message": "Parameter '_scope_0' of IBurnableMintableERC677Token.mint (ERC677BridgeTokenRewardableMock.sol#54) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256) {\n",
          "message": "Parameter '_owner' of BasicToken.balanceOf (ERC677BridgeTokenRewardableMock.sol#151) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_to' of BasicToken.transfer (ERC677BridgeTokenRewardableMock.sol#136) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of BasicToken.transfer (ERC677BridgeTokenRewardableMock.sol#136) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 171,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function burn(uint256 _value) public {\n",
          "message": "Parameter '_value' of BurnableToken.burn (ERC677BridgeTokenRewardableMock.sol#171) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 175,
          "vulnerability_to_line": 184,
          "vulnerability_code": "  function _burn(address _who, uint256 _value) internal {\n\n    require(_value <= balances[_who]);\n\n    // no need to require value <= totalSupply, since that would imply the\n\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n\n\n    balances[_who] = balances[_who].sub(_value);\n\n    totalSupply_ = totalSupply_.sub(_value);\n\n    emit Burn(_who, _value);\n\n    emit Transfer(_who, address(0), _value);\n",
          "message": "Function 'BurnableToken._burn' (ERC677BridgeTokenRewardableMock.sol#175-184) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 175,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function _burn(address _who, uint256 _value) internal {\n",
          "message": "Parameter '_who' of BurnableToken._burn (ERC677BridgeTokenRewardableMock.sol#175) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 175,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function _burn(address _who, uint256 _value) internal {\n",
          "message": "Parameter '_value' of BurnableToken._burn (ERC677BridgeTokenRewardableMock.sol#175) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(string memory _name, string memory _symbol, uint8 _decimals) public {\n",
          "message": "Parameter '_name' of DetailedERC20. (ERC677BridgeTokenRewardableMock.sol#200) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(string memory _name, string memory _symbol, uint8 _decimals) public {\n",
          "message": "Parameter '_symbol' of DetailedERC20. (ERC677BridgeTokenRewardableMock.sol#200) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(string memory _name, string memory _symbol, uint8 _decimals) public {\n",
          "message": "Parameter '_decimals' of DetailedERC20. (ERC677BridgeTokenRewardableMock.sol#200) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 251,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferOwnership(address _newOwner) public onlyOwner {\n",
          "message": "Parameter '_newOwner' of Ownable.transferOwnership (ERC677BridgeTokenRewardableMock.sol#251) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 259,
          "vulnerability_to_line": 263,
          "vulnerability_code": "  function _transferOwnership(address _newOwner) internal {\n\n    require(_newOwner != address(0));\n\n    emit OwnershipTransferred(owner, _newOwner);\n\n    owner = _newOwner;\n",
          "message": "Function 'Ownable._transferOwnership' (ERC677BridgeTokenRewardableMock.sol#259-263) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 259,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function _transferOwnership(address _newOwner) internal {\n",
          "message": "Parameter '_newOwner' of Ownable._transferOwnership (ERC677BridgeTokenRewardableMock.sol#259) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 327,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _owner,\n",
          "message": "Parameter '_owner' of StandardToken.allowance (ERC677BridgeTokenRewardableMock.sol#327) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 328,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _spender\n",
          "message": "Parameter '_spender' of StandardToken.allowance (ERC677BridgeTokenRewardableMock.sol#328) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 286,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _from,\n",
          "message": "Parameter '_from' of StandardToken.transferFrom (ERC677BridgeTokenRewardableMock.sol#286) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 287,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _to,\n",
          "message": "Parameter '_to' of StandardToken.transferFrom (ERC677BridgeTokenRewardableMock.sol#287) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 288,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of StandardToken.transferFrom (ERC677BridgeTokenRewardableMock.sol#288) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 314,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_spender' of StandardToken.approve (ERC677BridgeTokenRewardableMock.sol#314) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 314,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of StandardToken.approve (ERC677BridgeTokenRewardableMock.sol#314) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 348,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _spender,\n",
          "message": "Parameter '_spender' of StandardToken.increaseApproval (ERC677BridgeTokenRewardableMock.sol#348) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 349,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint _addedValue\n",
          "message": "Parameter '_addedValue' of StandardToken.increaseApproval (ERC677BridgeTokenRewardableMock.sol#349) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 370,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _spender,\n",
          "message": "Parameter '_spender' of StandardToken.decreaseApproval (ERC677BridgeTokenRewardableMock.sol#370) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 371,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint _subtractedValue\n",
          "message": "Parameter '_subtractedValue' of StandardToken.decreaseApproval (ERC677BridgeTokenRewardableMock.sol#371) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 419,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _to,\n",
          "message": "Parameter '_to' of MintableToken.mint (ERC677BridgeTokenRewardableMock.sol#419) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 420,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _amount\n",
          "message": "Parameter '_amount' of MintableToken.mint (ERC677BridgeTokenRewardableMock.sol#420) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 504,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool)\n",
          "message": "Parameter '_to' of ERC677BridgeToken.transfer (ERC677BridgeTokenRewardableMock.sol#504) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 504,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool)\n",
          "message": "Parameter '_value' of ERC677BridgeToken.transfer (ERC677BridgeTokenRewardableMock.sol#504) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 478,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _to,\n",
          "message": "Parameter '_to' of ERC677BridgeToken.transferAndCall (ERC677BridgeTokenRewardableMock.sol#478) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 479,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint _value,\n",
          "message": "Parameter '_value' of ERC677BridgeToken.transferAndCall (ERC677BridgeTokenRewardableMock.sol#479) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 480,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes calldata _data\n",
          "message": "Parameter '_data' of ERC677BridgeToken.transferAndCall (ERC677BridgeTokenRewardableMock.sol#480) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 549,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function claimTokens(address _token, address payable _to) public onlyOwner {\n",
          "message": "Parameter '_token' of ERC677BridgeToken.claimTokens (ERC677BridgeTokenRewardableMock.sol#549) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 549,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function claimTokens(address _token, address payable _to) public onlyOwner {\n",
          "message": "Parameter '_to' of ERC677BridgeToken.claimTokens (ERC677BridgeTokenRewardableMock.sol#549) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 467,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setBridgeContract(address _bridgeContract) onlyOwner public {\n",
          "message": "Parameter '_bridgeContract' of ERC677BridgeToken.setBridgeContract (ERC677BridgeTokenRewardableMock.sol#467) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 499,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function superTransfer(address _to, uint256 _value) internal returns(bool)\n",
          "message": "Parameter '_to' of ERC677BridgeToken.superTransfer (ERC677BridgeTokenRewardableMock.sol#499) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 499,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function superTransfer(address _to, uint256 _value) internal returns(bool)\n",
          "message": "Parameter '_value' of ERC677BridgeToken.superTransfer (ERC677BridgeTokenRewardableMock.sol#499) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 518,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _to,\n",
          "message": "Parameter '_to' of ERC677BridgeToken.contractFallback (ERC677BridgeTokenRewardableMock.sol#518) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 519,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint _value,\n",
          "message": "Parameter '_value' of ERC677BridgeToken.contractFallback (ERC677BridgeTokenRewardableMock.sol#519) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 520,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes memory _data\n",
          "message": "Parameter '_data' of ERC677BridgeToken.contractFallback (ERC677BridgeTokenRewardableMock.sol#520) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 632,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns(bool) {\n",
          "message": "Parameter '_to' of ERC677BridgeTokenRewardable.transfer (ERC677BridgeTokenRewardableMock.sol#632) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 632,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns(bool) {\n",
          "message": "Parameter '_value' of ERC677BridgeTokenRewardable.transfer (ERC677BridgeTokenRewardableMock.sol#632) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 637,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n",
          "message": "Parameter '_from' of ERC677BridgeTokenRewardable.transferFrom (ERC677BridgeTokenRewardableMock.sol#637) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 637,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n",
          "message": "Parameter '_to' of ERC677BridgeTokenRewardable.transferFrom (ERC677BridgeTokenRewardableMock.sol#637) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 637,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n",
          "message": "Parameter '_value' of ERC677BridgeTokenRewardable.transferFrom (ERC677BridgeTokenRewardableMock.sol#637) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 590,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setBlockRewardContract(address _blockRewardContract) onlyOwner public {\n",
          "message": "Parameter '_blockRewardContract' of ERC677BridgeTokenRewardable.setBlockRewardContract (ERC677BridgeTokenRewardableMock.sol#590) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 595,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setStakingContract(address _stakingContract) onlyOwner public {\n",
          "message": "Parameter '_stakingContract' of ERC677BridgeTokenRewardable.setStakingContract (ERC677BridgeTokenRewardableMock.sol#595) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 600,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mintReward(address[] calldata _receivers, uint256[] calldata _rewards) external onlyBlockRewardContract {\n",
          "message": "Parameter '_receivers' of ERC677BridgeTokenRewardable.mintReward (ERC677BridgeTokenRewardableMock.sol#600) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 600,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mintReward(address[] calldata _receivers, uint256[] calldata _rewards) external onlyBlockRewardContract {\n",
          "message": "Parameter '_rewards' of ERC677BridgeTokenRewardable.mintReward (ERC677BridgeTokenRewardableMock.sol#600) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 616,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function stake(address _staker, uint256 _amount) external onlyStakingContract {\n",
          "message": "Parameter '_staker' of ERC677BridgeTokenRewardable.stake (ERC677BridgeTokenRewardableMock.sol#616) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 616,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function stake(address _staker, uint256 _amount) external onlyStakingContract {\n",
          "message": "Parameter '_amount' of ERC677BridgeTokenRewardable.stake (ERC677BridgeTokenRewardableMock.sol#616) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 624,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function withdraw(address _staker, uint256 _amount) external onlyStakingContract {\n",
          "message": "Parameter '_staker' of ERC677BridgeTokenRewardable.withdraw (ERC677BridgeTokenRewardableMock.sol#624) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 624,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function withdraw(address _staker, uint256 _amount) external onlyStakingContract {\n",
          "message": "Parameter '_amount' of ERC677BridgeTokenRewardable.withdraw (ERC677BridgeTokenRewardableMock.sol#624) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 244,
          "vulnerability_to_line": null,
          "vulnerability_code": "    owner = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 314,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 601,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _receivers.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 541,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function finishMinting() public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 601,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _receivers.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract IBurnableMintableERC677Token is ERC677 {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 467,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setBridgeContract(address _bridgeContract) onlyOwner public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 590,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setBlockRewardContract(address _blockRewardContract) onlyOwner public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 595,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setStakingContract(address _stakingContract) onlyOwner public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 508,
          "vulnerability_to_line": null,
          "vulnerability_code": "      if (_to == bridgeContract) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 531,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isContract(address _addr)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 495,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getTokenInterfacesVersion() public pure returns(uint64 major, uint64 minor, uint64 patch) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 525,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (bool success,) = _to.call(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function claimTokens(address _token, address payable _to) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 549,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function claimTokens(address _token, address payable _to) public onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 120,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping(address => uint256) balances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 122,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 totalSupply_;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 550,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_to != address(0));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 550,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_to != address(0));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 550,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_to != address(0));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 551,
          "vulnerability_to_line": null,
          "vulnerability_code": "    if (_token == address(0)) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 551,
          "vulnerability_to_line": null,
          "vulnerability_code": "    if (_token == address(0)) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 551,
          "vulnerability_to_line": null,
          "vulnerability_code": "    if (_token == address(0)) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 552,
          "vulnerability_to_line": null,
          "vulnerability_code": "      _to.transfer(address(this).balance);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 552,
          "vulnerability_to_line": null,
          "vulnerability_code": "      _to.transfer(address(this).balance);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 552,
          "vulnerability_to_line": null,
          "vulnerability_code": "      _to.transfer(address(this).balance);\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [
        "UNKNOWN INSTRUCTION: SHR"
      ],
      "vulnerability_findings": [
        {
          "name": "Callstack bug",
          "vulnerability_from_line": 525,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (bool success,) = _to.call(\n",
          "message": null
        },
        {
          "name": "Callstack bug",
          "vulnerability_from_line": 525,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (bool success,) = _to.call(\n",
          "message": null
        },
        {
          "name": "Callstack bug",
          "vulnerability_from_line": 525,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (bool success,) = _to.call(\n",
          "message": null
        }
      ]
    }
  }
}