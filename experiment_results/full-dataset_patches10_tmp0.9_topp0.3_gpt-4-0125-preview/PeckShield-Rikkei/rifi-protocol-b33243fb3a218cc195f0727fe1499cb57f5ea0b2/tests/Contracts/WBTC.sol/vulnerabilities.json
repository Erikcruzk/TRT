{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 491,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract MintableToken is StandardToken, Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 577,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Pausable is Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 689,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Claimable is Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 767,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract CanReclaimToken is Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 495,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bool public mintingFinished = false;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 581,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bool public paused = false;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 413,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(string memory _name, string memory _symbol, uint8 _decimals) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 414,
          "vulnerability_to_line": null,
          "vulnerability_code": "    name = _name;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 415,
          "vulnerability_to_line": null,
          "vulnerability_code": "    symbol = _symbol;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 416,
          "vulnerability_to_line": null,
          "vulnerability_code": "    decimals = _decimals;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 417,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 442,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 443,
          "vulnerability_to_line": null,
          "vulnerability_code": "    owner = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 444,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 800,
          "vulnerability_to_line": null,
          "vulnerability_code": "        revert(\"renouncing ownership is blocked\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_67"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 206,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
          "message": "BEP20Basic.totalSupply (WBTC.sol#206) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": 230,
          "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return totalSupply_;\n",
          "message": "BasirToken.totalSupply (WBTC.sol#228-230) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 207,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address _who) public view returns (uint256);\n",
          "message": "BEP20Basic.balanceOf (WBTC.sol#207) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": 254,
          "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256) {\n\n    return balances[_owner];\n",
          "message": "BasirToken.balanceOf (WBTC.sol#252-254) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 339,
          "vulnerability_to_line": 348,
          "vulnerability_code": "  function allowance(\n\n    address _owner,\n\n    address _spender\n\n   )\n\n    public\n\n    view\n\n    returns (uint256)\n\n  {\n\n    return allowed[_owner][_spender];\n",
          "message": "StandardToken.allowance (WBTC.sol#339-348) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 265,
          "vulnerability_to_line": 266,
          "vulnerability_code": "  function allowance(address _owner, address _spender)\n",
          "message": "BEP20.allowance (WBTC.sol#265-266) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 799,
          "vulnerability_to_line": 801,
          "vulnerability_code": "    function renounceOwnership() public onlyOwner {\n\n        revert(\"renouncing ownership is blocked\");\n",
          "message": "WBTRToken.renounceOwnership (WBTC.sol#799-801) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 460,
          "vulnerability_to_line": 463,
          "vulnerability_code": "  function renounceOwnership() public onlyOwner {\n\n    emit OwnershipRenounced(owner);\n\n    owner = address(0);\n",
          "message": "Ownable.renounceOwnership (WBTC.sol#460-463) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 469,
          "vulnerability_to_line": 471,
          "vulnerability_code": "  function transferOwnership(address _newOwner) public onlyOwner {\n\n    _transferOwnership(_newOwner);\n",
          "message": "Ownable.transferOwnership (WBTC.sol#469-471) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 704,
          "vulnerability_to_line": 706,
          "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    pendingOwner = newOwner;\n",
          "message": "Claimable.transferOwnership (WBTC.sol#704-706) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 514,
          "vulnerability_to_line": 528,
          "vulnerability_code": "  function mint(\n\n    address _to,\n\n    uint256 _amount\n\n  )\n\n    public\n\n    hasMintPermission\n\n    canMint\n\n    returns (bool)\n\n  {\n\n    totalSupply_ = totalSupply_.add(_amount);\n\n    balances[_to] = balances[_to].add(_amount);\n\n    emit Mint(_to, _amount);\n\n    emit Transfer(address(0), _to, _amount);\n\n    return true;\n",
          "message": "MintableToken.mint (WBTC.sol#514-528) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 795,
          "vulnerability_to_line": 797,
          "vulnerability_code": "    function finishMinting() public onlyOwner returns (bool) {\n\n        return false;\n",
          "message": "WBTRToken.finishMinting (WBTC.sol#795-797) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 534,
          "vulnerability_to_line": 538,
          "vulnerability_code": "  function finishMinting() public onlyOwner canMint returns (bool) {\n\n    mintingFinished = true;\n\n    emit MintFinished();\n\n    return true;\n",
          "message": "MintableToken.finishMinting (WBTC.sol#534-538) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 603,
          "vulnerability_to_line": 606,
          "vulnerability_code": "  function pause() public onlyOwner whenNotPaused {\n\n    paused = true;\n\n    emit Pause();\n",
          "message": "Pausable.pause (WBTC.sol#603-606) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 611,
          "vulnerability_to_line": 614,
          "vulnerability_code": "  function unpause() public onlyOwner whenPaused {\n\n    paused = false;\n\n    emit Unpause();\n",
          "message": "Pausable.unpause (WBTC.sol#611-614) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 711,
          "vulnerability_to_line": 715,
          "vulnerability_code": "  function claimOwnership() public onlyPendingOwner {\n\n    emit OwnershipTransferred(owner, pendingOwner);\n\n    owner = pendingOwner;\n\n    pendingOwner = address(0);\n",
          "message": "Claimable.claimOwnership (WBTC.sol#711-715) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 806,
          "vulnerability_to_line": 810,
          "vulnerability_code": "    function allocateTo(address _owner, uint256 value) public {\n\n        balances[_owner] += value;\n\n        totalSupply_ += value;\n\n        emit Transfer(address(this), _owner, value);\n",
          "message": "WBTRToken.allocateTo (WBTC.sol#806-810) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": "Detected issues with version pragma in WBTC.sol:\n\t- pragma solidity^0.5.16 (WBTC.sol#3): it allows old versions\n\t- pragma solidity^0.5.16 (WBTC.sol#196): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256) {\n",
          "message": "Parameter '_owner' of BasirToken.balanceOf (WBTC.sol#252) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 237,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_to' of BasirToken.transfer (WBTC.sol#237) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 237,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of BasirToken.transfer (WBTC.sol#237) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 340,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _owner,\n",
          "message": "Parameter '_owner' of StandardToken.allowance (WBTC.sol#340) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 341,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _spender\n",
          "message": "Parameter '_spender' of StandardToken.allowance (WBTC.sol#341) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 300,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _from,\n",
          "message": "Parameter '_from' of StandardToken.transferFrom (WBTC.sol#300) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 301,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _to,\n",
          "message": "Parameter '_to' of StandardToken.transferFrom (WBTC.sol#301) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 302,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of StandardToken.transferFrom (WBTC.sol#302) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 327,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_spender' of StandardToken.approve (WBTC.sol#327) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 327,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of StandardToken.approve (WBTC.sol#327) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 360,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _spender,\n",
          "message": "Parameter '_spender' of StandardToken.increaseApproval (WBTC.sol#360) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 361,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _addedValue\n",
          "message": "Parameter '_addedValue' of StandardToken.increaseApproval (WBTC.sol#361) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 382,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _spender,\n",
          "message": "Parameter '_spender' of StandardToken.decreaseApproval (WBTC.sol#382) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 383,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _subtractedValue\n",
          "message": "Parameter '_subtractedValue' of StandardToken.decreaseApproval (WBTC.sol#383) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 413,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(string memory _name, string memory _symbol, uint8 _decimals) public {\n",
          "message": "Parameter '_name' of DetailedBEP20. (WBTC.sol#413) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 413,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(string memory _name, string memory _symbol, uint8 _decimals) public {\n",
          "message": "Parameter '_symbol' of DetailedBEP20. (WBTC.sol#413) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 413,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(string memory _name, string memory _symbol, uint8 _decimals) public {\n",
          "message": "Parameter '_decimals' of DetailedBEP20. (WBTC.sol#413) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 469,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferOwnership(address _newOwner) public onlyOwner {\n",
          "message": "Parameter '_newOwner' of Ownable.transferOwnership (WBTC.sol#469) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 477,
          "vulnerability_to_line": 481,
          "vulnerability_code": "  function _transferOwnership(address _newOwner) internal {\n\n    require(_newOwner != address(0));\n\n    emit OwnershipTransferred(owner, _newOwner);\n\n    owner = _newOwner;\n",
          "message": "Function 'Ownable._transferOwnership' (WBTC.sol#477-481) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 477,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function _transferOwnership(address _newOwner) internal {\n",
          "message": "Parameter '_newOwner' of Ownable._transferOwnership (WBTC.sol#477) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 515,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _to,\n",
          "message": "Parameter '_to' of MintableToken.mint (WBTC.sol#515) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 516,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _amount\n",
          "message": "Parameter '_amount' of MintableToken.mint (WBTC.sol#516) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 555,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function burn(uint256 _value) public {\n",
          "message": "Parameter '_value' of BurnableToken.burn (WBTC.sol#555) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 559,
          "vulnerability_to_line": 568,
          "vulnerability_code": "  function _burn(address _who, uint256 _value) internal {\n\n    require(_value <= balances[_who]);\n\n    // no need to require value <= totalSupply, since that would imply the\n\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n\n\n    balances[_who] = balances[_who].sub(_value);\n\n    totalSupply_ = totalSupply_.sub(_value);\n\n    emit Burn(_who, _value);\n\n    emit Transfer(_who, address(0), _value);\n",
          "message": "Function 'BurnableToken._burn' (WBTC.sol#559-568) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 559,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function _burn(address _who, uint256 _value) internal {\n",
          "message": "Parameter '_who' of BurnableToken._burn (WBTC.sol#559) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 559,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function _burn(address _who, uint256 _value) internal {\n",
          "message": "Parameter '_value' of BurnableToken._burn (WBTC.sol#559) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 626,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _to,\n",
          "message": "Parameter '_to' of PausableToken.transfer (WBTC.sol#626) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 627,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of PausableToken.transfer (WBTC.sol#627) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 637,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _from,\n",
          "message": "Parameter '_from' of PausableToken.transferFrom (WBTC.sol#637) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 638,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _to,\n",
          "message": "Parameter '_to' of PausableToken.transferFrom (WBTC.sol#638) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 639,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of PausableToken.transferFrom (WBTC.sol#639) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 649,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _spender,\n",
          "message": "Parameter '_spender' of PausableToken.approve (WBTC.sol#649) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 650,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of PausableToken.approve (WBTC.sol#650) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 660,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _spender,\n",
          "message": "Parameter '_spender' of PausableToken.increaseApproval (WBTC.sol#660) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 661,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint _addedValue\n",
          "message": "Parameter '_addedValue' of PausableToken.increaseApproval (WBTC.sol#661) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 671,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _spender,\n",
          "message": "Parameter '_spender' of PausableToken.decreaseApproval (WBTC.sol#671) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 672,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint _subtractedValue\n",
          "message": "Parameter '_subtractedValue' of PausableToken.decreaseApproval (WBTC.sol#672) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 728,
          "vulnerability_to_line": null,
          "vulnerability_code": "    BEP20Basic _token,\n",
          "message": "Parameter '_token' of SafeBEP20.safeTransfer (WBTC.sol#728) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 729,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _to,\n",
          "message": "Parameter '_to' of SafeBEP20.safeTransfer (WBTC.sol#729) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 730,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of SafeBEP20.safeTransfer (WBTC.sol#730) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 738,
          "vulnerability_to_line": null,
          "vulnerability_code": "    BEP20 _token,\n",
          "message": "Parameter '_token' of SafeBEP20.safeTransferFrom (WBTC.sol#738) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 739,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _from,\n",
          "message": "Parameter '_from' of SafeBEP20.safeTransferFrom (WBTC.sol#739) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 740,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _to,\n",
          "message": "Parameter '_to' of SafeBEP20.safeTransferFrom (WBTC.sol#740) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 741,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of SafeBEP20.safeTransferFrom (WBTC.sol#741) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 749,
          "vulnerability_to_line": null,
          "vulnerability_code": "    BEP20 _token,\n",
          "message": "Parameter '_token' of SafeBEP20.safeApprove (WBTC.sol#749) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 750,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _spender,\n",
          "message": "Parameter '_spender' of SafeBEP20.safeApprove (WBTC.sol#750) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 751,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _value\n",
          "message": "Parameter '_value' of SafeBEP20.safeApprove (WBTC.sol#751) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 774,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function reclaimToken(BEP20Basic _token) external onlyOwner {\n",
          "message": "Parameter '_token' of CanReclaimToken.reclaimToken (WBTC.sol#774) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 806,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allocateTo(address _owner, uint256 value) public {\n",
          "message": "Parameter '_owner' of WBTRToken.allocateTo (WBTC.sol#806) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 462,
          "vulnerability_to_line": null,
          "vulnerability_code": "    owner = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 714,
          "vulnerability_to_line": null,
          "vulnerability_code": "    pendingOwner = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 327,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 648,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 196,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 219,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}