{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 313,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require((self.owner == msg.sender) && (_newOwner > 0));\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 325,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require((self.owner == msg.sender) && self.stillMinting);\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_60"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": 49,
          "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
          "message": "BasicMathLib.times (TestToken.sol#40-49) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": 72,
          "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
          "message": "BasicMathLib.dividedBy (TestToken.sol#57-72) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": 89,
          "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
          "message": "BasicMathLib.plus (TestToken.sol#80-89) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": 106,
          "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
          "message": "BasicMathLib.minus (TestToken.sol#97-106) is declared view but contains assembly code\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 287,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _newAllowed;\n",
          "message": "_newAllowed in TokenLib.approveChange (TestToken.sol#287) is a local variable never initialiazed\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": 49,
          "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
          "message": "BasicMathLib.times uses assembly (TestToken.sol#40-49)\n\t- TestToken.sol#41-49\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": 72,
          "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
          "message": "BasicMathLib.dividedBy uses assembly (TestToken.sol#57-72)\n\t- TestToken.sol#59-72\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": 89,
          "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
          "message": "BasicMathLib.plus uses assembly (TestToken.sol#80-89)\n\t- TestToken.sol#81-89\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": 106,
          "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
          "message": "BasicMathLib.minus uses assembly (TestToken.sol#97-106)\n\t- TestToken.sol#98-106\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": 49,
          "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
          "message": "BasicMathLib.times (TestToken.sol#40-49) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": 72,
          "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
          "message": "BasicMathLib.dividedBy (TestToken.sol#57-72) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": 89,
          "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
          "message": "BasicMathLib.plus (TestToken.sol#80-89) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": 106,
          "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
          "message": "BasicMathLib.minus (TestToken.sol#97-106) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": 191,
          "vulnerability_code": "  function init(TokenStorage storage self,\n\n                address _owner,\n\n                string _name,\n\n                string _symbol,\n\n                uint8 _decimals,\n\n                uint256 _initial_supply,\n\n                bool _allowMinting)\n\n                public\n\n  {\n\n    require(!self.initialized);\n\n    self.initialized = true;\n\n    self.name = _name;\n\n    self.symbol = _symbol;\n\n    self.totalSupply = _initial_supply;\n\n    self.initialSupply = _initial_supply;\n\n    self.decimals = _decimals;\n\n    self.owner = _owner;\n\n    self.stillMinting = _allowMinting;\n\n    self.balances[_owner] = _initial_supply;\n",
          "message": "TokenLib.init (TestToken.sol#172-191) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": 210,
          "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    bool err;\n\n    uint256 balance;\n\n\n\n    (err,balance) = self.balances[msg.sender].minus(_value);\n\n    require(!err);\n\n    self.balances[msg.sender] = balance;\n\n    //It's not possible to overflow token supply\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
          "message": "TokenLib.transfer (TestToken.sol#198-210) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 218,
          "vulnerability_to_line": 242,
          "vulnerability_code": "  function transferFrom(TokenStorage storage self,\n\n                        address _from,\n\n                        address _to,\n\n                        uint256 _value)\n\n                        public\n\n                        returns (bool)\n\n  {\n\n    var _allowance = self.allowed[_from][msg.sender];\n\n    bool err;\n\n    uint256 balanceOwner;\n\n    uint256 balanceSpender;\n\n\n\n    (err,balanceOwner) = self.balances[_from].minus(_value);\n\n    require(!err);\n\n\n\n    (err,balanceSpender) = _allowance.minus(_value);\n\n    require(!err);\n\n\n\n    self.balances[_from] = balanceOwner;\n\n    self.allowed[_from][msg.sender] = balanceSpender;\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n\n\n    Transfer(_from, _to, _value);\n\n    return true;\n",
          "message": "TokenLib.transferFrom (TestToken.sol#218-242) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 248,
          "vulnerability_to_line": 250,
          "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n\n    return self.balances[_owner];\n",
          "message": "TokenLib.balanceOf (TestToken.sol#248-250) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 257,
          "vulnerability_to_line": 264,
          "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n\n    // must set to zero before changing approval amount in accordance with spec\n\n    require((_value == 0) || (self.allowed[msg.sender][_spender] == 0));\n\n\n\n    self.allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n",
          "message": "TokenLib.approve (TestToken.sol#257-264) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 271,
          "vulnerability_to_line": 276,
          "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n\n                     public\n\n                     view\n\n                     returns (uint256 remaining) {\n\n    return self.allowed[_owner][_spender];\n",
          "message": "TokenLib.allowance (TestToken.sol#271-276) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 284,
          "vulnerability_to_line": 306,
          "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n\n                          public returns (bool)\n\n  {\n\n    uint256 _newAllowed;\n\n    bool err;\n\n\n\n    if(_increase) {\n\n      (err, _newAllowed) = self.allowed[msg.sender][_spender].plus(_valueChange);\n\n      require(!err);\n\n\n\n      self.allowed[msg.sender][_spender] = _newAllowed;\n\n    } else {\n\n      if (_valueChange > self.allowed[msg.sender][_spender]) {\n\n        self.allowed[msg.sender][_spender] = 0;\n\n      } else {\n\n        _newAllowed = self.allowed[msg.sender][_spender] - _valueChange;\n\n        self.allowed[msg.sender][_spender] = _newAllowed;\n\n      }\n\n    }\n\n\n\n    Approval(msg.sender, _spender, _newAllowed);\n\n    return true;\n",
          "message": "TokenLib.approveChange (TestToken.sol#284-306) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 312,
          "vulnerability_to_line": 318,
          "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n\n    require((self.owner == msg.sender) && (_newOwner > 0));\n\n\n\n    self.owner = _newOwner;\n\n    OwnerChange(msg.sender, _newOwner);\n\n    return true;\n",
          "message": "TokenLib.changeOwner (TestToken.sol#312-318) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 324,
          "vulnerability_to_line": 336,
          "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n    require((self.owner == msg.sender) && self.stillMinting);\n\n    uint256 _newAmount;\n\n    bool err;\n\n\n\n    (err, _newAmount) = self.totalSupply.plus(_amount);\n\n    require(!err);\n\n\n\n    self.totalSupply =  _newAmount;\n\n    self.balances[self.owner] = self.balances[self.owner] + _amount;\n\n    Transfer(0x0, self.owner, _amount);\n\n    return true;\n",
          "message": "TokenLib.mintToken (TestToken.sol#324-336) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 341,
          "vulnerability_to_line": 347,
          "vulnerability_code": "  function closeMint(TokenStorage storage self) public returns (bool) {\n\n    require(self.owner == msg.sender);\n\n\n\n    self.stillMinting = false;\n\n    MintingClosed(true);\n\n    return true;\n",
          "message": "TokenLib.closeMint (TestToken.sol#341-347) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 353,
          "vulnerability_to_line": 365,
          "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n      uint256 _newBalance;\n\n      bool err;\n\n\n\n      (err, _newBalance) = self.balances[msg.sender].minus(_amount);\n\n      require(!err);\n\n\n\n      self.balances[msg.sender] = _newBalance;\n\n      self.totalSupply = self.totalSupply - _amount;\n\n      Burn(msg.sender, _amount);\n\n      Transfer(msg.sender, 0x0, _amount);\n\n      return true;\n",
          "message": "TokenLib.burnToken (TestToken.sol#353-365) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 396,
          "vulnerability_to_line": 398,
          "vulnerability_code": "  function totalSupply() public view returns (uint) {\n\n    return token.totalSupply;\n",
          "message": "TestToken.totalSupply (TestToken.sol#396-398) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 400,
          "vulnerability_to_line": 402,
          "vulnerability_code": "  function balanceOf(address who) public view returns (uint) {\n\n    return token.balanceOf(who);\n",
          "message": "TestToken.balanceOf (TestToken.sol#400-402) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 404,
          "vulnerability_to_line": 406,
          "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint) {\n\n    return token.allowance(owner, spender);\n",
          "message": "TestToken.allowance (TestToken.sol#404-406) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 408,
          "vulnerability_to_line": 410,
          "vulnerability_code": "  function transfer(address to, uint value) public returns (bool ok) {\n\n    return token.transfer(to, value);\n",
          "message": "TestToken.transfer (TestToken.sol#408-410) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 412,
          "vulnerability_to_line": 414,
          "vulnerability_code": "  function transferFrom(address from, address to, uint value) public returns (bool ok) {\n\n    return token.transferFrom(from, to, value);\n",
          "message": "TestToken.transferFrom (TestToken.sol#412-414) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 416,
          "vulnerability_to_line": 418,
          "vulnerability_code": "  function approve(address spender, uint value) public returns (bool ok) {\n\n    return token.approve(spender, value);\n",
          "message": "TestToken.approve (TestToken.sol#416-418) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": "Detected issues with version pragma in TestToken.sol:\n\t- pragma solidity^0.4.18 (TestToken.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (TestToken.sol#111): it allows old versions\n\t- pragma solidity^0.4.18 (TestToken.sol#370): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": null,
          "vulnerability_code": "                address _owner,\n",
          "message": "Parameter '_owner' of TokenLib.init (TestToken.sol#173) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 174,
          "vulnerability_to_line": null,
          "vulnerability_code": "                string _name,\n",
          "message": "Parameter '_name' of TokenLib.init (TestToken.sol#174) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 175,
          "vulnerability_to_line": null,
          "vulnerability_code": "                string _symbol,\n",
          "message": "Parameter '_symbol' of TokenLib.init (TestToken.sol#175) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 176,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint8 _decimals,\n",
          "message": "Parameter '_decimals' of TokenLib.init (TestToken.sol#176) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 177,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint256 _initial_supply,\n",
          "message": "Parameter '_initial_supply' of TokenLib.init (TestToken.sol#177) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 178,
          "vulnerability_to_line": null,
          "vulnerability_code": "                bool _allowMinting)\n",
          "message": "Parameter '_allowMinting' of TokenLib.init (TestToken.sol#178) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_to' of TokenLib.transfer (TestToken.sol#198) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of TokenLib.transfer (TestToken.sol#198) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 219,
          "vulnerability_to_line": null,
          "vulnerability_code": "                        address _from,\n",
          "message": "Parameter '_from' of TokenLib.transferFrom (TestToken.sol#219) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": null,
          "vulnerability_code": "                        address _to,\n",
          "message": "Parameter '_to' of TokenLib.transferFrom (TestToken.sol#220) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 221,
          "vulnerability_to_line": null,
          "vulnerability_code": "                        uint256 _value)\n",
          "message": "Parameter '_value' of TokenLib.transferFrom (TestToken.sol#221) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 248,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n",
          "message": "Parameter '_owner' of TokenLib.balanceOf (TestToken.sol#248) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 257,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_spender' of TokenLib.approve (TestToken.sol#257) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 257,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of TokenLib.approve (TestToken.sol#257) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 271,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
          "message": "Parameter '_owner' of TokenLib.allowance (TestToken.sol#271) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 271,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
          "message": "Parameter '_spender' of TokenLib.allowance (TestToken.sol#271) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 284,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
          "message": "Parameter '_spender' of TokenLib.approveChange (TestToken.sol#284) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 284,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
          "message": "Parameter '_valueChange' of TokenLib.approveChange (TestToken.sol#284) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 284,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
          "message": "Parameter '_increase' of TokenLib.approveChange (TestToken.sol#284) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 312,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n",
          "message": "Parameter '_newOwner' of TokenLib.changeOwner (TestToken.sol#312) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 324,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
          "message": "Parameter '_amount' of TokenLib.mintToken (TestToken.sol#324) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 353,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
          "message": "Parameter '_amount' of TokenLib.burnToken (TestToken.sol#353) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 384,
          "vulnerability_to_line": 394,
          "vulnerability_code": "  function TestToken(\n\n                address _owner,\n\n                string _name,\n\n                string _symbol,\n\n                uint8 _decimals,\n\n                uint256 _initial_supply,\n\n                bool _allowMinting) \n\n                public \n\n  {\n\n    token.init(_owner,_name,_symbol,_decimals,_initial_supply,_allowMinting);\n",
          "message": "Function 'TestToken.TestToken' (TestToken.sol#384-394) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 385,
          "vulnerability_to_line": null,
          "vulnerability_code": "                address _owner,\n",
          "message": "Parameter '_owner' of TestToken.TestToken (TestToken.sol#385) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 386,
          "vulnerability_to_line": null,
          "vulnerability_code": "                string _name,\n",
          "message": "Parameter '_name' of TestToken.TestToken (TestToken.sol#386) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 387,
          "vulnerability_to_line": null,
          "vulnerability_code": "                string _symbol,\n",
          "message": "Parameter '_symbol' of TestToken.TestToken (TestToken.sol#387) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 388,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint8 _decimals,\n",
          "message": "Parameter '_decimals' of TestToken.TestToken (TestToken.sol#388) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 389,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint256 _initial_supply,\n",
          "message": "Parameter '_initial_supply' of TestToken.TestToken (TestToken.sol#389) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 390,
          "vulnerability_to_line": null,
          "vulnerability_code": "                bool _allowMinting) \n",
          "message": "Parameter '_allowMinting' of TestToken.TestToken (TestToken.sol#390) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 416,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address spender, uint value) public returns (bool ok) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 370,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function times(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public view returns (bool err,uint256 i) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function plus(uint256 a, uint256 b) public view returns (bool err, uint256 res) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function minus(uint256 a, uint256 b) public view returns (bool err,uint256 res) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 174,
          "vulnerability_to_line": null,
          "vulnerability_code": "                string _name,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 175,
          "vulnerability_to_line": null,
          "vulnerability_code": "                string _symbol,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 386,
          "vulnerability_to_line": null,
          "vulnerability_code": "                string _name,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 387,
          "vulnerability_to_line": null,
          "vulnerability_code": "                string _symbol,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly{\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly{\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly{\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly{\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 382,
          "vulnerability_to_line": null,
          "vulnerability_code": "  TokenLib.TokenStorage token;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "      res := add(a,b)\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 417,
          "vulnerability_to_line": null,
          "vulnerability_code": "    return token.approve(spender, value);\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 249,
          "vulnerability_to_line": null,
          "vulnerability_code": "    return self.balances[_owner];\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "      res := mul(a,b)\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "      res := add(a,b)\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n",
          "message": "The arithmetic operator can underflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "      res := sub(a,b)\n",
          "message": "The arithmetic operator can underflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 100,
          "vulnerability_to_line": null,
          "vulnerability_code": "      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Division bugs",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "      switch or(iszero(b), eq(div(res,b), a))\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "      res := mul(a,b)\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": null,
          "vulnerability_code": "    self.name = _name;\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 184,
          "vulnerability_to_line": null,
          "vulnerability_code": "    self.symbol = _symbol;\n",
          "message": null
        }
      ]
    }
  }
}