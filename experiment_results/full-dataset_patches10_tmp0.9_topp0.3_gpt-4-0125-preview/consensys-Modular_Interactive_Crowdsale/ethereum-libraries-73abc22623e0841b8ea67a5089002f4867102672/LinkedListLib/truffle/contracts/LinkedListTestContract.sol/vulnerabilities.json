{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (self.list[_node][PREV] == HEAD && self.list[_node][NEXT] == HEAD) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (self.list[HEAD][NEXT] == _node) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "                return true;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": null,
          "vulnerability_code": "            } else {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "                return false;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "            }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": null,
          "vulnerability_code": "        } else {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 79,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return true;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 156,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(!nodeExists(self,_new) && nodeExists(self,_node)) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "            uint256 c = self.list[_node][_direction];\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": null,
          "vulnerability_code": "            createLink(self, _node, _new, _direction);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 159,
          "vulnerability_to_line": null,
          "vulnerability_code": "            createLink(self, _new, c, _direction);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return true;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 161,
          "vulnerability_to_line": null,
          "vulnerability_code": "        } else {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 162,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return false;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 163,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "            numElements++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_44"
      ],
      "vulnerability_findings": [
        {
          "name": "unused-return",
          "vulnerability_from_line": 262,
          "vulnerability_to_line": 264,
          "vulnerability_code": "    function insert(uint256 _node, uint256 _new, bool _direction) public {\n\n        list.insert(_node,_new,_direction);\n",
          "message": "LinkedListTestContract.insert (LinkedListTestContract.sol#262-264) does not use the value returned by external calls:\n\t-list.insert(_node,_new,_direction) (LinkedListTestContract.sol#263)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 214,
          "vulnerability_to_line": 218,
          "vulnerability_code": "\tfunction listExists()\n\n        view public returns (bool)\n\n    {\n\n        return list.listExists();\n",
          "message": "LinkedListTestContract.listExists (LinkedListTestContract.sol#214-218) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 221,
          "vulnerability_to_line": 223,
          "vulnerability_code": "    function nodeExists(uint256 _node) view public returns (bool) {\n\n        return list.nodeExists(_node);\n",
          "message": "LinkedListTestContract.nodeExists (LinkedListTestContract.sol#221-223) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 226,
          "vulnerability_to_line": 228,
          "vulnerability_code": "    function sizeOf() view public returns (uint256 numElements) {\n\n        return list.sizeOf();\n",
          "message": "LinkedListTestContract.sizeOf (LinkedListTestContract.sol#226-228) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": 236,
          "vulnerability_code": "    function getNode(uint256 _node)\n\n\t\tview public returns (bool,uint256,uint256)\n\n    {\n\n        return list.getNode(_node);\n",
          "message": "LinkedListTestContract.getNode (LinkedListTestContract.sol#232-236) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 241,
          "vulnerability_to_line": 245,
          "vulnerability_code": "    function getAdjacent(uint256 _node, bool _direction)\n\n        view public returns (bool,uint256)\n\n    {\n\n        return list.getAdjacent(_node,_direction);\n",
          "message": "LinkedListTestContract.getAdjacent (LinkedListTestContract.sol#241-245) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": 256,
          "vulnerability_code": "    function getSortedSpot(uint256 _node, uint256 _value, bool _direction)\n\n        view public returns (uint256 next)\n\n    {\n\n        return list.getSortedSpot(_node,_value,_direction);\n",
          "message": "LinkedListTestContract.getSortedSpot (LinkedListTestContract.sol#252-256) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 262,
          "vulnerability_to_line": 264,
          "vulnerability_code": "    function insert(uint256 _node, uint256 _new, bool _direction) public {\n\n        list.insert(_node,_new,_direction);\n",
          "message": "LinkedListTestContract.insert (LinkedListTestContract.sol#262-264) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 268,
          "vulnerability_to_line": 270,
          "vulnerability_code": "    function remove(uint256 _node) public returns (uint256) {\n\n        return list.remove(_node);\n",
          "message": "LinkedListTestContract.remove (LinkedListTestContract.sol#268-270) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 275,
          "vulnerability_to_line": 277,
          "vulnerability_code": "    function push(uint256 _node, bool _direction) public {\n\n        list.push(_node,_direction);\n",
          "message": "LinkedListTestContract.push (LinkedListTestContract.sol#275-277) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 281,
          "vulnerability_to_line": 283,
          "vulnerability_code": "    function pop(bool _direction) public returns (uint256) {\n\n        return list.pop(_direction);\n",
          "message": "LinkedListTestContract.pop (LinkedListTestContract.sol#281-283) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": "Detected issues with version pragma in LinkedListTestContract.sol:\n\t- pragma solidity^0.4.18 (LinkedListTestContract.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (LinkedListTestContract.sol#200): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function nodeExists(LinkedList storage self, uint256 _node) \n",
          "message": "Parameter '_node' of LinkedListLib.nodeExists (LinkedListTestContract.sol#68) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getNode(LinkedList storage self, uint256 _node)\n",
          "message": "Parameter '_node' of LinkedListLib.getNode (LinkedListTestContract.sol#99) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAdjacent(LinkedList storage self, uint256 _node, bool _direction)\n",
          "message": "Parameter '_node' of LinkedListLib.getAdjacent (LinkedListTestContract.sol#113) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAdjacent(LinkedList storage self, uint256 _node, bool _direction)\n",
          "message": "Parameter '_direction' of LinkedListLib.getAdjacent (LinkedListTestContract.sol#113) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getSortedSpot(LinkedList storage self, uint256 _node, uint256 _value, bool _direction)\n",
          "message": "Parameter '_node' of LinkedListLib.getSortedSpot (LinkedListTestContract.sol#129) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getSortedSpot(LinkedList storage self, uint256 _node, uint256 _value, bool _direction)\n",
          "message": "Parameter '_value' of LinkedListLib.getSortedSpot (LinkedListTestContract.sol#129) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getSortedSpot(LinkedList storage self, uint256 _node, uint256 _value, bool _direction)\n",
          "message": "Parameter '_direction' of LinkedListLib.getSortedSpot (LinkedListTestContract.sol#129) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 145,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function createLink(LinkedList storage self, uint256 _node, uint256 _link, bool _direction) internal  {\n",
          "message": "Parameter '_node' of LinkedListLib.createLink (LinkedListTestContract.sol#145) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 145,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function createLink(LinkedList storage self, uint256 _node, uint256 _link, bool _direction) internal  {\n",
          "message": "Parameter '_link' of LinkedListLib.createLink (LinkedListTestContract.sol#145) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 145,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function createLink(LinkedList storage self, uint256 _node, uint256 _link, bool _direction) internal  {\n",
          "message": "Parameter '_direction' of LinkedListLib.createLink (LinkedListTestContract.sol#145) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function insert(LinkedList storage self, uint256 _node, uint256 _new, bool _direction) internal returns (bool) {\n",
          "message": "Parameter '_node' of LinkedListLib.insert (LinkedListTestContract.sol#155) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function insert(LinkedList storage self, uint256 _node, uint256 _new, bool _direction) internal returns (bool) {\n",
          "message": "Parameter '_new' of LinkedListLib.insert (LinkedListTestContract.sol#155) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function insert(LinkedList storage self, uint256 _node, uint256 _new, bool _direction) internal returns (bool) {\n",
          "message": "Parameter '_direction' of LinkedListLib.insert (LinkedListTestContract.sol#155) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 169,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function remove(LinkedList storage self, uint256 _node) internal returns (uint256) {\n",
          "message": "Parameter '_node' of LinkedListLib.remove (LinkedListTestContract.sol#169) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 181,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function push(LinkedList storage self, uint256 _node, bool _direction) internal  {\n",
          "message": "Parameter '_node' of LinkedListLib.push (LinkedListTestContract.sol#181) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 181,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function push(LinkedList storage self, uint256 _node, bool _direction) internal  {\n",
          "message": "Parameter '_direction' of LinkedListLib.push (LinkedListTestContract.sol#181) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 188,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function pop(LinkedList storage self, bool _direction) internal returns (uint256) {\n",
          "message": "Parameter '_direction' of LinkedListLib.pop (LinkedListTestContract.sol#188) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 221,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function nodeExists(uint256 _node) view public returns (bool) {\n",
          "message": "Parameter '_node' of LinkedListTestContract.nodeExists (LinkedListTestContract.sol#221) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getNode(uint256 _node)\n",
          "message": "Parameter '_node' of LinkedListTestContract.getNode (LinkedListTestContract.sol#232) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 241,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAdjacent(uint256 _node, bool _direction)\n",
          "message": "Parameter '_node' of LinkedListTestContract.getAdjacent (LinkedListTestContract.sol#241) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 241,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAdjacent(uint256 _node, bool _direction)\n",
          "message": "Parameter '_direction' of LinkedListTestContract.getAdjacent (LinkedListTestContract.sol#241) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getSortedSpot(uint256 _node, uint256 _value, bool _direction)\n",
          "message": "Parameter '_node' of LinkedListTestContract.getSortedSpot (LinkedListTestContract.sol#252) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getSortedSpot(uint256 _node, uint256 _value, bool _direction)\n",
          "message": "Parameter '_value' of LinkedListTestContract.getSortedSpot (LinkedListTestContract.sol#252) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getSortedSpot(uint256 _node, uint256 _value, bool _direction)\n",
          "message": "Parameter '_direction' of LinkedListTestContract.getSortedSpot (LinkedListTestContract.sol#252) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 262,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function insert(uint256 _node, uint256 _new, bool _direction) public {\n",
          "message": "Parameter '_node' of LinkedListTestContract.insert (LinkedListTestContract.sol#262) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 262,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function insert(uint256 _node, uint256 _new, bool _direction) public {\n",
          "message": "Parameter '_new' of LinkedListTestContract.insert (LinkedListTestContract.sol#262) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 262,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function insert(uint256 _node, uint256 _new, bool _direction) public {\n",
          "message": "Parameter '_direction' of LinkedListTestContract.insert (LinkedListTestContract.sol#262) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 268,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function remove(uint256 _node) public returns (uint256) {\n",
          "message": "Parameter '_node' of LinkedListTestContract.remove (LinkedListTestContract.sol#268) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 275,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function push(uint256 _node, bool _direction) public {\n",
          "message": "Parameter '_node' of LinkedListTestContract.push (LinkedListTestContract.sol#275) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 275,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function push(uint256 _node, bool _direction) public {\n",
          "message": "Parameter '_direction' of LinkedListTestContract.push (LinkedListTestContract.sol#275) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 281,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function pop(bool _direction) public returns (uint256) {\n",
          "message": "Parameter '_direction' of LinkedListTestContract.pop (LinkedListTestContract.sol#281) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tuint256 constant NULL = 0;\n",
          "message": "LinkedListTestContract.NULL (LinkedListTestContract.sol#205) is never used in LinkedListTestContract\nLinkedListTestContract.HEAD (LinkedListTestContract.sol#206) is never used in LinkedListTestContract\nLinkedListTestContract.PREV (LinkedListTestContract.sol#207) is never used in LinkedListTestContract\nLinkedListTestContract.NEXT (LinkedListTestContract.sol#208) is never used in LinkedListTestContract\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 89,
          "vulnerability_to_line": null,
          "vulnerability_code": "        while (i != HEAD) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 137,
          "vulnerability_to_line": null,
          "vulnerability_code": "        while  ((next != 0) && (_value != next) && ((_value < next) != _direction)) next = self.list[next][_direction];\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 100,
          "vulnerability_to_line": null,
          "vulnerability_code": "        internal view returns (bool,uint256,uint256)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "        internal view returns (bool,uint256)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 constant NULL = 0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 constant HEAD = 0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool constant PREV = false;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool constant NEXT = true;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tuint256 constant NULL = 0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 206,
          "vulnerability_to_line": null,
          "vulnerability_code": "  \tuint256 constant HEAD = 0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 207,
          "vulnerability_to_line": null,
          "vulnerability_code": "  \tbool constant PREV = false;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 208,
          "vulnerability_to_line": null,
          "vulnerability_code": "  \tbool constant NEXT = true;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 210,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tLinkedListLib.LinkedList list;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}