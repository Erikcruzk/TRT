{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": null,
          "vulnerability_code": "        delete self[self.length - 1];\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 225,
          "vulnerability_to_line": null,
          "vulnerability_code": "        self.length--;\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 171,
          "vulnerability_to_line": null,
          "vulnerability_code": "          temp = self[swap];\n",
          "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": null,
          "vulnerability_code": "          self[swap] = self[root];\n",
          "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": null,
          "vulnerability_code": "          self[root] = temp;\n",
          "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 184,
          "vulnerability_to_line": null,
          "vulnerability_code": "      temp = self[end];\n",
          "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 185,
          "vulnerability_to_line": null,
          "vulnerability_code": "      self[end] = self[0];\n",
          "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 186,
          "vulnerability_to_line": null,
          "vulnerability_code": "      self[0] = temp;\n",
          "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "          temp = self[swap];\n",
          "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": null,
          "vulnerability_code": "          self[swap] = self[root];\n",
          "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 202,
          "vulnerability_to_line": null,
          "vulnerability_code": "          self[root] = temp;\n",
          "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 166,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 167,
          "vulnerability_to_line": null,
          "vulnerability_code": "          swap = rChild;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 195,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 196,
          "vulnerability_to_line": null,
          "vulnerability_code": "          swap = rChild;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 225,
          "vulnerability_to_line": null,
          "vulnerability_code": "        self.length--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 226,
          "vulnerability_to_line": null,
          "vulnerability_code": "        i--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_14"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": 46,
          "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n\n      }\n\n    }\n",
          "message": "Array256Lib.sumElements (Array256Lib.sol#38-46) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": 63,
          "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n\n        case 1 {\n\n          maxValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
          "message": "Array256Lib.getMax (Array256Lib.sol#51-63) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": 80,
          "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      minValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n\n        case 0 {\n\n          minValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
          "message": "Array256Lib.getMin (Array256Lib.sol#68-80) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": 130,
          "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n\n           public\n\n           view\n\n           returns(bool found, uint256 index) {\n\n    assembly{\n\n      mstore(0x60,self_slot)\n\n      switch isSorted\n\n      case 1 {\n\n        let high := sub(sload(self_slot),1)\n\n        let mid := 0\n\n        let low := 0\n\n        for { } iszero(gt(low, high)) { } {\n\n          mid := div(add(low,high),2)\n\n\n\n          switch lt(sload(add(sha3(0x60,0x20),mid)),value)\n\n          case 1 {\n\n             low := add(mid,1)\n\n          }\n\n          case 0 {\n\n            switch gt(sload(add(sha3(0x60,0x20),mid)),value)\n\n            case 1 {\n\n              high := sub(mid,1)\n\n            }\n\n            case 0 {\n\n              found := 1\n\n              index := mid\n\n              low := add(high,1)\n\n            }\n\n          }\n\n        }\n\n      }\n\n      case 0 {\n\n        for { let low := 0 } lt(low, sload(self_slot)) { low := add(low, 1) } {\n\n          switch eq(sload(add(sha3(0x60,0x20),low)), value)\n\n          case 1 {\n\n            found := 1\n\n            index := low\n\n            low := sload(self_slot)\n\n          }\n\n        }\n\n      }\n\n    }\n",
          "message": "Array256Lib.indexOf (Array256Lib.sol#88-130) is declared view but contains assembly code\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": 46,
          "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n\n      }\n\n    }\n",
          "message": "Array256Lib.sumElements uses assembly (Array256Lib.sol#38-46)\n\t- Array256Lib.sol#39-46\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": 63,
          "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n\n        case 1 {\n\n          maxValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
          "message": "Array256Lib.getMax uses assembly (Array256Lib.sol#51-63)\n\t- Array256Lib.sol#52-63\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": 80,
          "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      minValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n\n        case 0 {\n\n          minValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
          "message": "Array256Lib.getMin uses assembly (Array256Lib.sol#68-80)\n\t- Array256Lib.sol#69-80\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": 130,
          "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n\n           public\n\n           view\n\n           returns(bool found, uint256 index) {\n\n    assembly{\n\n      mstore(0x60,self_slot)\n\n      switch isSorted\n\n      case 1 {\n\n        let high := sub(sload(self_slot),1)\n\n        let mid := 0\n\n        let low := 0\n\n        for { } iszero(gt(low, high)) { } {\n\n          mid := div(add(low,high),2)\n\n\n\n          switch lt(sload(add(sha3(0x60,0x20),mid)),value)\n\n          case 1 {\n\n             low := add(mid,1)\n\n          }\n\n          case 0 {\n\n            switch gt(sload(add(sha3(0x60,0x20),mid)),value)\n\n            case 1 {\n\n              high := sub(mid,1)\n\n            }\n\n            case 0 {\n\n              found := 1\n\n              index := mid\n\n              low := add(high,1)\n\n            }\n\n          }\n\n        }\n\n      }\n\n      case 0 {\n\n        for { let low := 0 } lt(low, sload(self_slot)) { low := add(low, 1) } {\n\n          switch eq(sload(add(sha3(0x60,0x20),low)), value)\n\n          case 1 {\n\n            found := 1\n\n            index := low\n\n            low := sload(self_slot)\n\n          }\n\n        }\n\n      }\n\n    }\n",
          "message": "Array256Lib.indexOf uses assembly (Array256Lib.sol#88-130)\n\t- Array256Lib.sol#92-130\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": 46,
          "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n\n      }\n\n    }\n",
          "message": "Array256Lib.sumElements (Array256Lib.sol#38-46) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": 63,
          "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n\n        case 1 {\n\n          maxValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
          "message": "Array256Lib.getMax (Array256Lib.sol#51-63) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": 80,
          "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      minValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n\n        case 0 {\n\n          minValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
          "message": "Array256Lib.getMin (Array256Lib.sol#68-80) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": 208,
          "vulnerability_code": "  function heapSort(uint256[] storage self) public {\n\n    uint256 end = self.length - 1;\n\n    uint256 start = getParentI(end);\n\n    uint256 root = start;\n\n    uint256 lChild;\n\n    uint256 rChild;\n\n    uint256 swap;\n\n    uint256 temp;\n\n    while(start >= 0){\n\n      root = start;\n\n      lChild = getLeftChildI(start);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end+1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n      if(start == 0)\n\n        break;\n\n      else\n\n        start = start - 1;\n\n    }\n\n    while(end > 0){\n\n      temp = self[end];\n\n      self[end] = self[0];\n\n      self[0] = temp;\n\n      end = end - 1;\n\n      root = 0;\n\n      lChild = getLeftChildI(0);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end + 1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n    }\n",
          "message": "Array256Lib.heapSort (Array256Lib.sol#150-208) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 212,
          "vulnerability_to_line": 231,
          "vulnerability_code": "  function uniq(uint256[] storage self) public returns (uint256 length) {\n\n    bool contains;\n\n    uint256 index;\n\n\n\n    for (uint256 i = 0; i < self.length; i++) {\n\n      (contains, index) = indexOf(self, self[i], false);\n\n\n\n      if (i > index) {\n\n        for (uint256 j = i; j < self.length - 1; j++){\n\n          self[j] = self[j + 1];\n\n        }\n\n\n\n        delete self[self.length - 1];\n\n        self.length--;\n\n        i--;\n\n      }\n\n    }\n\n\n\n    length = self.length;\n",
          "message": "Array256Lib.uniq (Array256Lib.sol#212-231) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": "Detected issues with version pragma in Array256Lib.sol:\n\t- pragma solidity^0.4.18 (Array256Lib.sol#4): it allows old versions\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 225,
          "vulnerability_to_line": null,
          "vulnerability_code": "        self.length--;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "      maxValue := sload(sha3(0x60,0x20))\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "          maxValue := sload(add(sha3(0x60,0x20),i))\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": null,
          "vulnerability_code": "      minValue := sload(sha3(0x60,0x20))\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "          minValue := sload(add(sha3(0x60,0x20),i))\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "          switch lt(sload(add(sha3(0x60,0x20),mid)),value)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "            switch gt(sload(add(sha3(0x60,0x20),mid)),value)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 121,
          "vulnerability_to_line": null,
          "vulnerability_code": "          switch eq(sload(add(sha3(0x60,0x20),low)), value)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 161,
          "vulnerability_to_line": null,
          "vulnerability_code": "      while(lChild <= end){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": null,
          "vulnerability_code": "      while(lChild <= end){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": null,
          "vulnerability_code": "    while(start >= 0){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": null,
          "vulnerability_code": "    while(start >= 0){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 92,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly{\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 120,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for { let low := 0 } lt(low, sload(self_slot)) { low := add(low, 1) } {\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 end = self.length - 1;\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}