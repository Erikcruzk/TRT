{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 275,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 276,
          "vulnerability_to_line": null,
          "vulnerability_code": "        totalSupply_ = _initialAmount;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 277,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balances[msg.sender] = _initialAmount;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": null,
          "vulnerability_code": "        name = _tokenName;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 279,
          "vulnerability_to_line": null,
          "vulnerability_code": "        symbol = _tokenSymbol;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 280,
          "vulnerability_to_line": null,
          "vulnerability_code": "        decimals = _decimalUnits;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 281,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_39"
      ],
      "vulnerability_findings": [
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": 15,
          "vulnerability_code": "contract ERC20BasicNS {\n\n    function totalSupply() public view returns (uint256);\n\n    function balanceOf(address who) public view returns (uint256);\n\n    function transfer(address to, uint256 value) public;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n",
          "message": "ERC20BasicNS (FaucetNonStandardToken.sol#10-15) has incorrect ERC20 function interface(s):\n\t-transfer (FaucetNonStandardToken.sol#13)\n"
        },
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": 120,
          "vulnerability_code": "contract BasicTokenNS is ERC20BasicNS {\n\n    using SafeMath for uint256;\n\n\n\n    mapping(address => uint256) balances;\n\n\n\n    uint256 totalSupply_;\n\n\n\n    /**\n\n    * @dev Total number of tokens in existence\n\n    */\n\n    function totalSupply() public view returns (uint256) {\n\n        return totalSupply_;\n\n    }\n\n\n\n    /**\n\n    * @dev Transfer token for a specified address\n\n    * @param _to The address to transfer to.\n\n    * @param _value The amount to be transferred.\n\n    */\n\n    function transfer(address _to, uint256 _value) public {\n\n        require(_to != address(0));\n\n        require(_value <= balances[msg.sender]);\n\n\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n\n        balances[_to] = balances[_to].add(_value);\n\n        emit Transfer(msg.sender, _to, _value);\n\n    }\n\n\n\n    /**\n\n    * @dev Gets the balance of the specified address.\n\n    * @param _owner The address to query the the balance of.\n\n    * @return An uint256 representing the amount owned by the passed address.\n\n    */\n\n    function balanceOf(address _owner) public view returns (uint256) {\n\n        return balances[_owner];\n\n    }\n\n\n",
          "message": "BasicTokenNS (FaucetNonStandardToken.sol#83-120) has incorrect ERC20 function interface(s):\n\t-transfer (FaucetNonStandardToken.sol#102-109)\n"
        },
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 131,
          "vulnerability_to_line": 137,
          "vulnerability_code": "contract ERC20NS is ERC20BasicNS {\n\n    function allowance(address owner, address spender) public view returns (uint256);\n\n    function transferFrom(address from, address to, uint256 value) public;\n\n    function approve(address spender, uint256 value) public returns (bool);\n\n\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n",
          "message": "ERC20NS (FaucetNonStandardToken.sol#131-137) has incorrect ERC20 function interface(s):\n\t-transferFrom (FaucetNonStandardToken.sol#133)\n"
        },
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": 259,
          "vulnerability_code": "contract NonStandardToken is ERC20NS, BasicTokenNS {\n\n\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n\n\n\n\n    /**\n\n     * @dev Transfer tokens from one address to another\n\n     * @param _from address The address which you want to send tokens from\n\n     * @param _to address The address which you want to transfer to\n\n     * @param _value uint256 the amount of tokens to be transferred\n\n     */\n\n    function transferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _value\n\n    )\n\n        public\n\n    {\n\n        require(_to != address(0));\n\n        require(_value <= balances[_from]);\n\n        require(_value <= allowed[_from][msg.sender]);\n\n\n\n        balances[_from] = balances[_from].sub(_value);\n\n        balances[_to] = balances[_to].add(_value);\n\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n        emit Transfer(_from, _to, _value);\n\n    }\n\n\n\n    /**\n\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n     * @param _spender The address which will spend the funds.\n\n     * @param _value The amount of tokens to be spent.\n\n     */\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n\n        allowed[msg.sender][_spender] = _value;\n\n        emit Approval(msg.sender, _spender, _value);\n\n        return true;\n\n    }\n\n\n\n    /**\n\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n\n     * @param _owner address The address which owns the funds.\n\n     * @param _spender address The address which will spend the funds.\n\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n\n     */\n\n    function allowance(\n\n        address _owner,\n\n        address _spender\n\n     )\n\n        public\n\n        view\n\n        returns (uint256)\n\n    {\n\n        return allowed[_owner][_spender];\n\n    }\n\n\n\n    /**\n\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n\n     * approve should be called when allowed[_spender] == 0. To increment\n\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n\n     * the first transaction is mined)\n\n     * From MonolithDAO Token.sol\n\n     * @param _spender The address which will spend the funds.\n\n     * @param _addedValue The amount of tokens to increase the allowance by.\n\n     */\n\n    function increaseApproval(\n\n        address _spender,\n\n        uint256 _addedValue\n\n    )\n\n        public\n\n        returns (bool)\n\n    {\n\n        allowed[msg.sender][_spender] = (\n\n            allowed[msg.sender][_spender].add(_addedValue));\n\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n\n    }\n\n\n\n    /**\n\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n\n     * approve should be called when allowed[_spender] == 0. To decrement\n\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n\n     * the first transaction is mined)\n\n     * From MonolithDAO Token.sol\n\n     * @param _spender The address which will spend the funds.\n\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n\n     */\n\n    function decreaseApproval(\n\n        address _spender,\n\n        uint256 _subtractedValue\n\n    )\n\n        public\n\n        returns (bool)\n\n    {\n\n        uint256 oldValue = allowed[msg.sender][_spender];\n\n        if (_subtractedValue > oldValue) {\n\n            allowed[msg.sender][_spender] = 0;\n\n        } else {\n\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\n        }\n\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n\n    }\n\n\n",
          "message": "NonStandardToken (FaucetNonStandardToken.sol#151-259) has incorrect ERC20 function interface(s):\n\t-transferFrom (FaucetNonStandardToken.sol#162-177)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function totalSupply() public view returns (uint256);\n",
          "message": "ERC20BasicNS.totalSupply (FaucetNonStandardToken.sol#11) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": 95,
          "vulnerability_code": "    function totalSupply() public view returns (uint256) {\n\n        return totalSupply_;\n",
          "message": "BasicTokenNS.totalSupply (FaucetNonStandardToken.sol#93-95) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": 118,
          "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint256) {\n\n        return balances[_owner];\n",
          "message": "BasicTokenNS.balanceOf (FaucetNonStandardToken.sol#116-118) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address who) public view returns (uint256);\n",
          "message": "ERC20BasicNS.balanceOf (FaucetNonStandardToken.sol#12) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address to, uint256 value) public;\n",
          "message": "ERC20BasicNS.transfer (FaucetNonStandardToken.sol#13) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": 109,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public {\n\n        require(_to != address(0));\n\n        require(_value <= balances[msg.sender]);\n\n\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n\n        balances[_to] = balances[_to].add(_value);\n\n        emit Transfer(msg.sender, _to, _value);\n",
          "message": "BasicTokenNS.transfer (FaucetNonStandardToken.sol#102-109) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": 209,
          "vulnerability_code": "    function allowance(\n\n        address _owner,\n\n        address _spender\n\n     )\n\n        public\n\n        view\n\n        returns (uint256)\n\n    {\n\n        return allowed[_owner][_spender];\n",
          "message": "NonStandardToken.allowance (FaucetNonStandardToken.sol#200-209) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 132,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address owner, address spender) public view returns (uint256);\n",
          "message": "ERC20NS.allowance (FaucetNonStandardToken.sol#132) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 133,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address from, address to, uint256 value) public;\n",
          "message": "ERC20NS.transferFrom (FaucetNonStandardToken.sol#133) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 162,
          "vulnerability_to_line": 177,
          "vulnerability_code": "    function transferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _value\n\n    )\n\n        public\n\n    {\n\n        require(_to != address(0));\n\n        require(_value <= balances[_from]);\n\n        require(_value <= allowed[_from][msg.sender]);\n\n\n\n        balances[_from] = balances[_from].sub(_value);\n\n        balances[_to] = balances[_to].add(_value);\n\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n        emit Transfer(_from, _to, _value);\n",
          "message": "NonStandardToken.transferFrom (FaucetNonStandardToken.sol#162-177) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 188,
          "vulnerability_to_line": 192,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n\n        allowed[msg.sender][_spender] = _value;\n\n        emit Approval(msg.sender, _spender, _value);\n\n        return true;\n",
          "message": "NonStandardToken.approve (FaucetNonStandardToken.sol#188-192) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address spender, uint256 value) public returns (bool);\n",
          "message": "ERC20NS.approve (FaucetNonStandardToken.sol#134) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": 231,
          "vulnerability_code": "    function increaseApproval(\n\n        address _spender,\n\n        uint256 _addedValue\n\n    )\n\n        public\n\n        returns (bool)\n\n    {\n\n        allowed[msg.sender][_spender] = (\n\n            allowed[msg.sender][_spender].add(_addedValue));\n\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n",
          "message": "NonStandardToken.increaseApproval (FaucetNonStandardToken.sol#220-231) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 242,
          "vulnerability_to_line": 257,
          "vulnerability_code": "    function decreaseApproval(\n\n        address _spender,\n\n        uint256 _subtractedValue\n\n    )\n\n        public\n\n        returns (bool)\n\n    {\n\n        uint256 oldValue = allowed[msg.sender][_spender];\n\n        if (_subtractedValue > oldValue) {\n\n            allowed[msg.sender][_spender] = 0;\n\n        } else {\n\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\n        }\n\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n",
          "message": "NonStandardToken.decreaseApproval (FaucetNonStandardToken.sol#242-257) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 286,
          "vulnerability_to_line": 290,
          "vulnerability_code": "    function allocateTo(address _owner, uint256 value) public {\n\n        balances[_owner] += value;\n\n        totalSupply_ += value;\n\n        emit Transfer(address(this), _owner, value);\n",
          "message": "FaucetNonStandardToken.allocateTo (FaucetNonStandardToken.sol#286-290) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.8;\n",
          "message": "Detected issues with version pragma in FaucetNonStandardToken.sol:\n\t- pragma solidity^0.5.8 (FaucetNonStandardToken.sol#3): it allows old versions\n\t- pragma solidity^0.5.8 (FaucetNonStandardToken.sol#19): it allows old versions\n\t- pragma solidity^0.5.8 (FaucetNonStandardToken.sol#74): it allows old versions\n\t- pragma solidity^0.5.8 (FaucetNonStandardToken.sol#124): it allows old versions\n\t- pragma solidity^0.5.8 (FaucetNonStandardToken.sol#141): it allows old versions\n\t- pragma solidity^0.5.8 (FaucetNonStandardToken.sol#263): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint256) {\n",
          "message": "Parameter '_owner' of BasicTokenNS.balanceOf (FaucetNonStandardToken.sol#116) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public {\n",
          "message": "Parameter '_to' of BasicTokenNS.transfer (FaucetNonStandardToken.sol#102) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public {\n",
          "message": "Parameter '_value' of BasicTokenNS.transfer (FaucetNonStandardToken.sol#102) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _owner,\n",
          "message": "Parameter '_owner' of NonStandardToken.allowance (FaucetNonStandardToken.sol#201) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 202,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _spender\n",
          "message": "Parameter '_spender' of NonStandardToken.allowance (FaucetNonStandardToken.sol#202) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 163,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _from,\n",
          "message": "Parameter '_from' of NonStandardToken.transferFrom (FaucetNonStandardToken.sol#163) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 164,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _to,\n",
          "message": "Parameter '_to' of NonStandardToken.transferFrom (FaucetNonStandardToken.sol#164) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 165,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _value\n",
          "message": "Parameter '_value' of NonStandardToken.transferFrom (FaucetNonStandardToken.sol#165) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 188,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_spender' of NonStandardToken.approve (FaucetNonStandardToken.sol#188) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 188,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of NonStandardToken.approve (FaucetNonStandardToken.sol#188) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 221,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _spender,\n",
          "message": "Parameter '_spender' of NonStandardToken.increaseApproval (FaucetNonStandardToken.sol#221) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 222,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _addedValue\n",
          "message": "Parameter '_addedValue' of NonStandardToken.increaseApproval (FaucetNonStandardToken.sol#222) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 243,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _spender,\n",
          "message": "Parameter '_spender' of NonStandardToken.decreaseApproval (FaucetNonStandardToken.sol#243) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 244,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _subtractedValue\n",
          "message": "Parameter '_subtractedValue' of NonStandardToken.decreaseApproval (FaucetNonStandardToken.sol#244) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 275,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Parameter '_initialAmount' of FaucetNonStandardToken. (FaucetNonStandardToken.sol#275) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 275,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Parameter '_tokenName' of FaucetNonStandardToken. (FaucetNonStandardToken.sol#275) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 275,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Parameter '_decimalUnits' of FaucetNonStandardToken. (FaucetNonStandardToken.sol#275) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 275,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n",
          "message": "Parameter '_tokenSymbol' of FaucetNonStandardToken. (FaucetNonStandardToken.sol#275) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 286,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allocateTo(address _owner, uint256 value) public {\n",
          "message": "Parameter '_owner' of FaucetNonStandardToken.allocateTo (FaucetNonStandardToken.sol#286) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 188,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.8;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.8;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.8;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 124,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.8;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.8;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 263,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.8;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint256) balances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 totalSupply_;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}