{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_4"
      ],
      "vulnerability_findings": [
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": 29,
          "vulnerability_code": "contract EIP20NonCompliantHarness {\n\n    bool garbage;\n\n\n\n    function transfer(address _to, uint256 _value) public returns (uint, uint) {\n\n        _to;\n\n        _value; // supress unused variable warning\n\n        garbage = false;\n\n\n\n        return (1, 2);\n\n    }\n\n\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (uint, uint) {\n\n        _from;\n\n        _to;\n\n        _value; // supress unused variable warning\n\n        garbage = false;\n\n\n\n        return (1, 2);\n\n    }\n",
          "message": "EIP20NonCompliantHarness (EIP20NonCompliantHarness.sol#10-29) has incorrect ERC20 function interface(s):\n\t-transfer (EIP20NonCompliantHarness.sol#13-19)\n\t-transferFrom (EIP20NonCompliantHarness.sol#21-28)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": 19,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (uint, uint) {\n\n        _to;\n\n        _value; // supress unused variable warning\n\n        garbage = false;\n\n\n\n        return (1, 2);\n",
          "message": "EIP20NonCompliantHarness.transfer (EIP20NonCompliantHarness.sol#13-19) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 28,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (uint, uint) {\n\n        _from;\n\n        _to;\n\n        _value; // supress unused variable warning\n\n        garbage = false;\n\n\n\n        return (1, 2);\n",
          "message": "EIP20NonCompliantHarness.transferFrom (EIP20NonCompliantHarness.sol#21-28) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.8;\n",
          "message": "Detected issues with version pragma in EIP20NonCompliantHarness.sol:\n\t- pragma solidity^0.5.8 (EIP20NonCompliantHarness.sol#8): it allows old versions\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.8;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (uint, uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (uint, uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool garbage;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}