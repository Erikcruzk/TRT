{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_14"
      ],
      "vulnerability_findings": [
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 totalSupply_;\n",
          "message": "BasicTokenNS.totalSupply_ (BasicTokenNS.sol#88) is never initialized. It is used in:\n\t- totalSupply (BasicTokenNS.sol#93-95)\n"
        },
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": 15,
          "vulnerability_code": "contract ERC20BasicNS {\n\n    function totalSupply() public view returns (uint256);\n\n    function balanceOf(address who) public view returns (uint256);\n\n    function transfer(address to, uint256 value) public;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n",
          "message": "ERC20BasicNS (BasicTokenNS.sol#10-15) has incorrect ERC20 function interface(s):\n\t-transfer (BasicTokenNS.sol#13)\n"
        },
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": 120,
          "vulnerability_code": "contract BasicTokenNS is ERC20BasicNS {\n\n    using SafeMath for uint256;\n\n\n\n    mapping(address => uint256) balances;\n\n\n\n    uint256 totalSupply_;\n\n\n\n    /**\n\n    * @dev Total number of tokens in existence\n\n    */\n\n    function totalSupply() public view returns (uint256) {\n\n        return totalSupply_;\n\n    }\n\n\n\n    /**\n\n    * @dev Transfer token for a specified address\n\n    * @param _to The address to transfer to.\n\n    * @param _value The amount to be transferred.\n\n    */\n\n    function transfer(address _to, uint256 _value) public {\n\n        require(_to != address(0));\n\n        require(_value <= balances[msg.sender]);\n\n\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n\n        balances[_to] = balances[_to].add(_value);\n\n        emit Transfer(msg.sender, _to, _value);\n\n    }\n\n\n\n    /**\n\n    * @dev Gets the balance of the specified address.\n\n    * @param _owner The address to query the the balance of.\n\n    * @return An uint256 representing the amount owned by the passed address.\n\n    */\n\n    function balanceOf(address _owner) public view returns (uint256) {\n\n        return balances[_owner];\n\n    }\n\n\n",
          "message": "BasicTokenNS (BasicTokenNS.sol#83-120) has incorrect ERC20 function interface(s):\n\t-transfer (BasicTokenNS.sol#102-109)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 totalSupply_;\n",
          "message": "BasicTokenNS.totalSupply_ should be constant (BasicTokenNS.sol#88)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": 95,
          "vulnerability_code": "    function totalSupply() public view returns (uint256) {\n\n        return totalSupply_;\n",
          "message": "BasicTokenNS.totalSupply (BasicTokenNS.sol#93-95) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function totalSupply() public view returns (uint256);\n",
          "message": "ERC20BasicNS.totalSupply (BasicTokenNS.sol#11) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address who) public view returns (uint256);\n",
          "message": "ERC20BasicNS.balanceOf (BasicTokenNS.sol#12) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": 118,
          "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint256) {\n\n        return balances[_owner];\n",
          "message": "BasicTokenNS.balanceOf (BasicTokenNS.sol#116-118) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address to, uint256 value) public;\n",
          "message": "ERC20BasicNS.transfer (BasicTokenNS.sol#13) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": 109,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public {\n\n        require(_to != address(0));\n\n        require(_value <= balances[msg.sender]);\n\n\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n\n        balances[_to] = balances[_to].add(_value);\n\n        emit Transfer(msg.sender, _to, _value);\n",
          "message": "BasicTokenNS.transfer (BasicTokenNS.sol#102-109) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.8;\n",
          "message": "Detected issues with version pragma in BasicTokenNS.sol:\n\t- pragma solidity^0.5.8 (BasicTokenNS.sol#3): it allows old versions\n\t- pragma solidity^0.5.8 (BasicTokenNS.sol#19): it allows old versions\n\t- pragma solidity^0.5.8 (BasicTokenNS.sol#74): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint256) {\n",
          "message": "Parameter '_owner' of BasicTokenNS.balanceOf (BasicTokenNS.sol#116) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public {\n",
          "message": "Parameter '_to' of BasicTokenNS.transfer (BasicTokenNS.sol#102) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public {\n",
          "message": "Parameter '_value' of BasicTokenNS.transfer (BasicTokenNS.sol#102) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.8;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.8;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.8;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint256) balances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 totalSupply_;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}