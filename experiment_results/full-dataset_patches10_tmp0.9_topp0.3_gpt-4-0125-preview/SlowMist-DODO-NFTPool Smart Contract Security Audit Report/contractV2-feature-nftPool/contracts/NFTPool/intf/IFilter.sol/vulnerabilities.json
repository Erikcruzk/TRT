{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_11"
      ],
      "vulnerability_findings": [
        {
          "name": "solc-version",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.6.9;\n",
          "message": "Detected issues with version pragma in IFilter.sol:\n\t- pragma solidity0.6.9 (IFilter.sol#10): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _NFT_COLLECTION_() external view returns (address);\n",
          "message": "Function 'IFilter._NFT_COLLECTION_' (IFilter.sol#25) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function queryNFTIn(uint256 NFTInAmount)\n",
          "message": "Parameter 'NFTInAmount' of IFilter.queryNFTIn (IFilter.sol#27) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function queryNFTTargetOut(uint256 NFTOutAmount)\n",
          "message": "Parameter 'NFTOutAmount' of IFilter.queryNFTTargetOut (IFilter.sol#32) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function queryNFTRandomOut(uint256 NFTOutAmount)\n",
          "message": "Parameter 'NFTOutAmount' of IFilter.queryNFTRandomOut (IFilter.sol#37) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ERC721In(uint256[] memory tokenIds, address to) external returns (uint256 received);\n",
          "message": "Function 'IFilter.ERC721In' (IFilter.sol#42) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ERC721TargetOut(uint256[] memory tokenIds, address to) external returns (uint256 paid);\n",
          "message": "Function 'IFilter.ERC721TargetOut' (IFilter.sol#44) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ERC721RandomOut(uint256 amount, address to) external returns (uint256 paid);\n",
          "message": "Function 'IFilter.ERC721RandomOut' (IFilter.sol#46) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ERC1155In(uint256[] memory tokenIds, address to) external returns (uint256 received);\n",
          "message": "Function 'IFilter.ERC1155In' (IFilter.sol#48) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": 54,
          "vulnerability_code": "    function ERC1155TargetOut(\n\n        uint256[] memory tokenIds,\n\n        uint256[] memory amounts,\n\n        address to\n",
          "message": "Function 'IFilter.ERC1155TargetOut' (IFilter.sol#50-54) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ERC1155RandomOut(uint256 amount, address to) external returns (uint256 paid);\n",
          "message": "Function 'IFilter.ERC1155RandomOut' (IFilter.sol#56) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns (uint256 rawReceive, uint256 received);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns (uint256 rawPay, uint256 pay);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns (uint256 rawPay, uint256 pay);\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "execution failed"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "input files do not contain any valid contracts"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}