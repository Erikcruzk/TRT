{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isContract(newImplementation), \"UpgradeableProxy: new implementation is not a contract\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isContract(newImplementation), \"UpgradeableProxy: new implementation is not a contract\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_18"
      ],
      "vulnerability_findings": [
        {
          "name": "controlled-delegatecall",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": 116,
          "vulnerability_code": "    constructor(address _logic, bytes memory _data) public payable {\n\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n\n        _setImplementation(_logic);\n\n        if(_data.length > 0) {\n\n            // solhint-disable-next-line avoid-low-level-calls\n\n            (bool success,) = _logic.delegatecall(_data);\n\n            require(success);\n\n        }\n",
          "message": "UpgradeableProxy.constructor (upgradableProxy.sol#108-116) uses delegatecall to a input-controlled function id\n\t(success) = _logic.delegatecall(_data) (upgradableProxy.sol#113)\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 133,
          "vulnerability_to_line": 139,
          "vulnerability_code": "    function _implementation() internal override view returns (address impl) {\n\n        bytes32 slot = _IMPLEMENTATION_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            impl := sload(slot)\n\n        }\n",
          "message": "UpgradeableProxy._implementation (upgradableProxy.sol#133-139) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 182,
          "vulnerability_to_line": 191,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        // This method relies on extcodesize, which returns 0 for contracts in\n\n        // construction, since the code is only stored at the end of the\n\n        // constructor execution.\n\n\n\n        uint256 size;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
          "message": "UpgradeableProxy.isContract (upgradableProxy.sol#182-191) is declared view but contains assembly code\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": 42,
          "vulnerability_code": "    function _delegate(address implementation) internal {\n\n        assembly {\n\n            // Copy msg.data. We take full control of memory in this inline assembly\n\n            // block because it will not return to Solidity code. We overwrite the\n\n            // Solidity scratch pad at memory position 0.\n\n            calldatacopy(0, 0, calldatasize())\n\n\n\n            // Call the implementation.\n\n            // out and outsize are 0 because we don't know the size yet.\n\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n\n\n            // Copy the returned data.\n\n            returndatacopy(0, 0, returndatasize())\n\n\n\n            switch result\n\n            // delegatecall returns 0 on error.\n\n            case 0 { revert(0, returndatasize()) }\n\n            default { return(0, returndatasize()) }\n\n        }\n",
          "message": "Proxy._delegate uses assembly (upgradableProxy.sol#23-42)\n\t- upgradableProxy.sol#24-41\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 133,
          "vulnerability_to_line": 139,
          "vulnerability_code": "    function _implementation() internal override view returns (address impl) {\n\n        bytes32 slot = _IMPLEMENTATION_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            impl := sload(slot)\n\n        }\n",
          "message": "UpgradeableProxy._implementation uses assembly (upgradableProxy.sol#133-139)\n\t- upgradableProxy.sol#136-138\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 154,
          "vulnerability_to_line": 163,
          "vulnerability_code": "    function _setImplementation(address newImplementation) private {\n\n        require(isContract(newImplementation), \"UpgradeableProxy: new implementation is not a contract\");\n\n\n\n        bytes32 slot = _IMPLEMENTATION_SLOT;\n\n\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            sstore(slot, newImplementation)\n\n        }\n",
          "message": "UpgradeableProxy._setImplementation uses assembly (upgradableProxy.sol#154-163)\n\t- upgradableProxy.sol#160-162\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 182,
          "vulnerability_to_line": 191,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        // This method relies on extcodesize, which returns 0 for contracts in\n\n        // construction, since the code is only stored at the end of the\n\n        // constructor execution.\n\n\n\n        uint256 size;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
          "message": "UpgradeableProxy.isContract uses assembly (upgradableProxy.sol#182-191)\n\t- upgradableProxy.sol#189\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.6.6;\n",
          "message": "Detected issues with version pragma in upgradableProxy.sol:\n\t- pragma solidity0.6.6 (upgradableProxy.sol#5): it allows old versions\n\t- pragma solidity0.6.6 (upgradableProxy.sol#90): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": 116,
          "vulnerability_code": "    constructor(address _logic, bytes memory _data) public payable {\n\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n\n        _setImplementation(_logic);\n\n        if(_data.length > 0) {\n\n            // solhint-disable-next-line avoid-low-level-calls\n\n            (bool success,) = _logic.delegatecall(_data);\n\n            require(success);\n\n        }\n",
          "message": "Low level call in UpgradeableProxy.constructor (upgradableProxy.sol#108-116):\n\t-(success) = _logic.delegatecall(_data) upgradableProxy.sol#113\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": 42,
          "vulnerability_code": "    function _delegate(address implementation) internal {\n\n        assembly {\n\n            // Copy msg.data. We take full control of memory in this inline assembly\n\n            // block because it will not return to Solidity code. We overwrite the\n\n            // Solidity scratch pad at memory position 0.\n\n            calldatacopy(0, 0, calldatasize())\n\n\n\n            // Call the implementation.\n\n            // out and outsize are 0 because we don't know the size yet.\n\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n\n\n            // Copy the returned data.\n\n            returndatacopy(0, 0, returndatasize())\n\n\n\n            switch result\n\n            // delegatecall returns 0 on error.\n\n            case 0 { revert(0, returndatasize()) }\n\n            default { return(0, returndatasize()) }\n\n        }\n",
          "message": "Function 'Proxy._delegate' (upgradableProxy.sol#23-42) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _implementation() internal virtual view returns (address);\n",
          "message": "Function 'Proxy._implementation' (upgradableProxy.sol#48) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": 58,
          "vulnerability_code": "    function _fallback() internal {\n\n        _beforeFallback();\n\n        _delegate(_implementation());\n",
          "message": "Function 'Proxy._fallback' (upgradableProxy.sol#55-58) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": 83,
          "vulnerability_code": "    function _beforeFallback() internal virtual {\n",
          "message": "Function 'Proxy._beforeFallback' (upgradableProxy.sol#82-83) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 133,
          "vulnerability_to_line": 139,
          "vulnerability_code": "    function _implementation() internal override view returns (address impl) {\n\n        bytes32 slot = _IMPLEMENTATION_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            impl := sload(slot)\n\n        }\n",
          "message": "Function 'UpgradeableProxy._implementation' (upgradableProxy.sol#133-139) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _logic, bytes memory _data) public payable {\n",
          "message": "Parameter '_logic' of UpgradeableProxy. (upgradableProxy.sol#108) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _logic, bytes memory _data) public payable {\n",
          "message": "Parameter '_data' of UpgradeableProxy. (upgradableProxy.sol#108) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 146,
          "vulnerability_to_line": 149,
          "vulnerability_code": "    function _upgradeTo(address newImplementation) internal {\n\n        _setImplementation(newImplementation);\n\n        emit Upgraded(newImplementation);\n",
          "message": "Function 'UpgradeableProxy._upgradeTo' (upgradableProxy.sol#146-149) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 154,
          "vulnerability_to_line": 163,
          "vulnerability_code": "    function _setImplementation(address newImplementation) private {\n\n        require(isContract(newImplementation), \"UpgradeableProxy: new implementation is not a contract\");\n\n\n\n        bytes32 slot = _IMPLEMENTATION_SLOT;\n\n\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            sstore(slot, newImplementation)\n\n        }\n",
          "message": "Function 'UpgradeableProxy._setImplementation' (upgradableProxy.sol#154-163) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 133,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _implementation() internal override view returns (address impl) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract UpgradeableProxy is Proxy {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32 private constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 133,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _implementation() internal override view returns (address impl) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 182,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "    fallback () payable external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _fallback();\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHL) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}