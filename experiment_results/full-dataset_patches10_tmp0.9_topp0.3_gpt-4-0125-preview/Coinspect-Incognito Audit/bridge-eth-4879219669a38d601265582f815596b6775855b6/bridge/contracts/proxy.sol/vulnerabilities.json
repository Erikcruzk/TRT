{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_7"
      ],
      "vulnerability_findings": [
        {
          "name": "locked-ether",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": 74,
          "vulnerability_code": "    receive () payable external {\n\n        _fallback();\n",
          "message": "Contract locking ether found in proxy.sol:\n\tContract Proxy has payable functions:\n\t - fallback (proxy.sol#72-74)\n\tBut does not have a function to withdraw the ether\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": 42,
          "vulnerability_code": "    function _delegate(address implementation) internal {\n\n        assembly {\n\n            // Copy msg.data. We take full control of memory in this inline assembly\n\n            // block because it will not return to Solidity code. We overwrite the\n\n            // Solidity scratch pad at memory position 0.\n\n            calldatacopy(0, 0, calldatasize())\n\n\n\n            // Call the implementation.\n\n            // out and outsize are 0 because we don't know the size yet.\n\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n\n\n            // Copy the returned data.\n\n            returndatacopy(0, 0, returndatasize())\n\n\n\n            switch result\n\n            // delegatecall returns 0 on error.\n\n            case 0 { revert(0, returndatasize()) }\n\n            default { return(0, returndatasize()) }\n\n        }\n",
          "message": "Proxy._delegate uses assembly (proxy.sol#23-42)\n\t- proxy.sol#24-41\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.6.6;\n",
          "message": "Detected issues with version pragma in proxy.sol:\n\t- pragma solidity0.6.6 (proxy.sol#5): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": 42,
          "vulnerability_code": "    function _delegate(address implementation) internal {\n\n        assembly {\n\n            // Copy msg.data. We take full control of memory in this inline assembly\n\n            // block because it will not return to Solidity code. We overwrite the\n\n            // Solidity scratch pad at memory position 0.\n\n            calldatacopy(0, 0, calldatasize())\n\n\n\n            // Call the implementation.\n\n            // out and outsize are 0 because we don't know the size yet.\n\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n\n\n            // Copy the returned data.\n\n            returndatacopy(0, 0, returndatasize())\n\n\n\n            switch result\n\n            // delegatecall returns 0 on error.\n\n            case 0 { revert(0, returndatasize()) }\n\n            default { return(0, returndatasize()) }\n\n        }\n",
          "message": "Function 'Proxy._delegate' (proxy.sol#23-42) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _implementation() internal virtual view returns (address);\n",
          "message": "Function 'Proxy._implementation' (proxy.sol#48) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": 58,
          "vulnerability_code": "    function _fallback() internal {\n\n        _beforeFallback();\n\n        _delegate(_implementation());\n",
          "message": "Function 'Proxy._fallback' (proxy.sol#55-58) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": 83,
          "vulnerability_code": "    function _beforeFallback() internal virtual {\n",
          "message": "Function 'Proxy._beforeFallback' (proxy.sol#82-83) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "    fallback () payable external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _fallback();\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "execution failed"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "input files do not contain any valid contracts"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}