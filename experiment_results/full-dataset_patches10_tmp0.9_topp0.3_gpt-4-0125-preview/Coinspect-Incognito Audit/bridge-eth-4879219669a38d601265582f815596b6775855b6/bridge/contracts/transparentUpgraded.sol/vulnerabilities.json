{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isContract(newImplementation), \"UpgradeableProxy: new implementation is not a contract\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 483,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newSuccessor != address(0), \"TransparentUpgradeableProxy: successor is the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 493,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == _successor(), \"TransparentUpgradeableProxy: unauthorized\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 502,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!_paused(), \"TransparentUpgradeableProxy: contract paused already\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 510,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_paused(), \"TransparentUpgradeableProxy: contract not paused\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 518,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newIncognito != address(0), \"TransparentUpgradeableProxy: incognito proxy is the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 527,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender != _admin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 528,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!_paused(), \"TransparentUpgradeableProxy: contract is paused\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isContract(newImplementation), \"UpgradeableProxy: new implementation is not a contract\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 483,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newSuccessor != address(0), \"TransparentUpgradeableProxy: successor is the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 493,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == _successor(), \"TransparentUpgradeableProxy: unauthorized\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 502,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!_paused(), \"TransparentUpgradeableProxy: contract paused already\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 510,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_paused(), \"TransparentUpgradeableProxy: contract not paused\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 518,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newIncognito != address(0), \"TransparentUpgradeableProxy: incognito proxy is the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 527,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender != _admin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 528,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!_paused(), \"TransparentUpgradeableProxy: contract is paused\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_45"
      ],
      "vulnerability_findings": [
        {
          "name": "controlled-delegatecall",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": 116,
          "vulnerability_code": "    constructor(address _logic, bytes memory _data) public payable {\n\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n\n        _setImplementation(_logic);\n\n        if(_data.length > 0) {\n\n            // solhint-disable-next-line avoid-low-level-calls\n\n            (bool success,) = _logic.delegatecall(_data);\n\n            require(success);\n\n        }\n",
          "message": "UpgradeableProxy.constructor (transparentUpgraded.sol#108-116) uses delegatecall to a input-controlled function id\n\t(success) = _logic.delegatecall(_data) (transparentUpgraded.sol#113)\n"
        },
        {
          "name": "controlled-delegatecall",
          "vulnerability_from_line": 380,
          "vulnerability_to_line": 385,
          "vulnerability_code": "    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\n\n        _upgradeTo(newImplementation);\n\n        // solhint-disable-next-line avoid-low-level-calls\n\n        (bool success,) = newImplementation.delegatecall(data);\n\n        require(success);\n",
          "message": "TransparentUpgradeableProxy.upgradeToAndCall (transparentUpgraded.sol#380-385) uses delegatecall to a input-controlled function id\n\t(success) = newImplementation.delegatecall(data) (transparentUpgraded.sol#383)\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 133,
          "vulnerability_to_line": 139,
          "vulnerability_code": "    function _implementation() internal override view returns (address impl) {\n\n        bytes32 slot = _IMPLEMENTATION_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            impl := sload(slot)\n\n        }\n",
          "message": "UpgradeableProxy._implementation (transparentUpgraded.sol#133-139) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 182,
          "vulnerability_to_line": 191,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        // This method relies on extcodesize, which returns 0 for contracts in\n\n        // construction, since the code is only stored at the end of the\n\n        // constructor execution.\n\n\n\n        uint256 size;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
          "message": "UpgradeableProxy.isContract (transparentUpgraded.sol#182-191) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 390,
          "vulnerability_to_line": 396,
          "vulnerability_code": "    function _admin() internal view returns (address adm) {\n\n        bytes32 slot = _ADMIN_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            adm := sload(slot)\n\n        }\n",
          "message": "TransparentUpgradeableProxy._admin (transparentUpgraded.sol#390-396) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 413,
          "vulnerability_to_line": 419,
          "vulnerability_code": "    function _successor() internal view returns (address sor) {\n\n        bytes32 slot = _SUCCESSOR_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            sor := sload(slot)\n\n        }\n",
          "message": "TransparentUpgradeableProxy._successor (transparentUpgraded.sol#413-419) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 436,
          "vulnerability_to_line": 442,
          "vulnerability_code": "    function _paused() internal view returns (bool psd) {\n\n        bytes32 slot = _PAUSED_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            psd := sload(slot)\n\n        }\n",
          "message": "TransparentUpgradeableProxy._paused (transparentUpgraded.sol#436-442) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 459,
          "vulnerability_to_line": 465,
          "vulnerability_code": "    function _incognito() internal view returns (address icg) {\n\n        bytes32 slot = _INCOGNITO_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            icg := sload(slot)\n\n        }\n",
          "message": "TransparentUpgradeableProxy._incognito (transparentUpgraded.sol#459-465) is declared view but contains assembly code\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 226,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _logic, address _admin, address _incognito, bytes memory _data) public payable UpgradeableProxy(_logic, _data) {\n",
          "message": "TransparentUpgradeableProxy.constructor._admin (local variable @ transparentUpgraded.sol#226) shadows:\n\t- TransparentUpgradeableProxy._admin (function @ transparentUpgraded.sol#390-396)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 226,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _logic, address _admin, address _incognito, bytes memory _data) public payable UpgradeableProxy(_logic, _data) {\n",
          "message": "TransparentUpgradeableProxy.constructor._incognito (local variable @ transparentUpgraded.sol#226) shadows:\n\t- TransparentUpgradeableProxy._incognito (function @ transparentUpgraded.sol#459-465)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": 42,
          "vulnerability_code": "    function _delegate(address implementation) internal {\n\n        assembly {\n\n            // Copy msg.data. We take full control of memory in this inline assembly\n\n            // block because it will not return to Solidity code. We overwrite the\n\n            // Solidity scratch pad at memory position 0.\n\n            calldatacopy(0, 0, calldatasize())\n\n\n\n            // Call the implementation.\n\n            // out and outsize are 0 because we don't know the size yet.\n\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n\n\n            // Copy the returned data.\n\n            returndatacopy(0, 0, returndatasize())\n\n\n\n            switch result\n\n            // delegatecall returns 0 on error.\n\n            case 0 { revert(0, returndatasize()) }\n\n            default { return(0, returndatasize()) }\n\n        }\n",
          "message": "Proxy._delegate uses assembly (transparentUpgraded.sol#23-42)\n\t- transparentUpgraded.sol#24-41\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 133,
          "vulnerability_to_line": 139,
          "vulnerability_code": "    function _implementation() internal override view returns (address impl) {\n\n        bytes32 slot = _IMPLEMENTATION_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            impl := sload(slot)\n\n        }\n",
          "message": "UpgradeableProxy._implementation uses assembly (transparentUpgraded.sol#133-139)\n\t- transparentUpgraded.sol#136-138\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 154,
          "vulnerability_to_line": 163,
          "vulnerability_code": "    function _setImplementation(address newImplementation) private {\n\n        require(isContract(newImplementation), \"UpgradeableProxy: new implementation is not a contract\");\n\n\n\n        bytes32 slot = _IMPLEMENTATION_SLOT;\n\n\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            sstore(slot, newImplementation)\n\n        }\n",
          "message": "UpgradeableProxy._setImplementation uses assembly (transparentUpgraded.sol#154-163)\n\t- transparentUpgraded.sol#160-162\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 182,
          "vulnerability_to_line": 191,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        // This method relies on extcodesize, which returns 0 for contracts in\n\n        // construction, since the code is only stored at the end of the\n\n        // constructor execution.\n\n\n\n        uint256 size;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
          "message": "UpgradeableProxy.isContract uses assembly (transparentUpgraded.sol#182-191)\n\t- transparentUpgraded.sol#189\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 390,
          "vulnerability_to_line": 396,
          "vulnerability_code": "    function _admin() internal view returns (address adm) {\n\n        bytes32 slot = _ADMIN_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            adm := sload(slot)\n\n        }\n",
          "message": "TransparentUpgradeableProxy._admin uses assembly (transparentUpgraded.sol#390-396)\n\t- transparentUpgraded.sol#393-395\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 401,
          "vulnerability_to_line": 408,
          "vulnerability_code": "    function _setAdmin(address newAdmin) private {\n\n        bytes32 slot = _ADMIN_SLOT;\n\n\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            sstore(slot, newAdmin)\n\n        }\n",
          "message": "TransparentUpgradeableProxy._setAdmin uses assembly (transparentUpgraded.sol#401-408)\n\t- transparentUpgraded.sol#405-407\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 413,
          "vulnerability_to_line": 419,
          "vulnerability_code": "    function _successor() internal view returns (address sor) {\n\n        bytes32 slot = _SUCCESSOR_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            sor := sload(slot)\n\n        }\n",
          "message": "TransparentUpgradeableProxy._successor uses assembly (transparentUpgraded.sol#413-419)\n\t- transparentUpgraded.sol#416-418\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 424,
          "vulnerability_to_line": 431,
          "vulnerability_code": "    function _setSuccesor(address newSuccessor) private {\n\n        bytes32 slot = _SUCCESSOR_SLOT;\n\n\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            sstore(slot, newSuccessor)\n\n        }\n",
          "message": "TransparentUpgradeableProxy._setSuccesor uses assembly (transparentUpgraded.sol#424-431)\n\t- transparentUpgraded.sol#428-430\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 436,
          "vulnerability_to_line": 442,
          "vulnerability_code": "    function _paused() internal view returns (bool psd) {\n\n        bytes32 slot = _PAUSED_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            psd := sload(slot)\n\n        }\n",
          "message": "TransparentUpgradeableProxy._paused uses assembly (transparentUpgraded.sol#436-442)\n\t- transparentUpgraded.sol#439-441\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 447,
          "vulnerability_to_line": 454,
          "vulnerability_code": "    function _setPaused(bool psd) private {\n\n        bytes32 slot = _PAUSED_SLOT;\n\n\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            sstore(slot, psd)\n\n        }\n",
          "message": "TransparentUpgradeableProxy._setPaused uses assembly (transparentUpgraded.sol#447-454)\n\t- transparentUpgraded.sol#451-453\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 459,
          "vulnerability_to_line": 465,
          "vulnerability_code": "    function _incognito() internal view returns (address icg) {\n\n        bytes32 slot = _INCOGNITO_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            icg := sload(slot)\n\n        }\n",
          "message": "TransparentUpgradeableProxy._incognito uses assembly (transparentUpgraded.sol#459-465)\n\t- transparentUpgraded.sol#462-464\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 470,
          "vulnerability_to_line": 477,
          "vulnerability_code": "    function _setIncognito(address newIncognito) private {\n\n        bytes32 slot = _INCOGNITO_SLOT;\n\n\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            sstore(slot, newIncognito)\n\n        }\n",
          "message": "TransparentUpgradeableProxy._setIncognito uses assembly (transparentUpgraded.sol#470-477)\n\t- transparentUpgraded.sol#474-476\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.6.6;\n",
          "message": "Detected issues with version pragma in transparentUpgraded.sol:\n\t- pragma solidity0.6.6 (transparentUpgraded.sol#5): it allows old versions\n\t- pragma solidity0.6.6 (transparentUpgraded.sol#90): it allows old versions\n\t- pragma solidity0.6.6 (transparentUpgraded.sol#198): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": 116,
          "vulnerability_code": "    constructor(address _logic, bytes memory _data) public payable {\n\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n\n        _setImplementation(_logic);\n\n        if(_data.length > 0) {\n\n            // solhint-disable-next-line avoid-low-level-calls\n\n            (bool success,) = _logic.delegatecall(_data);\n\n            require(success);\n\n        }\n",
          "message": "Low level call in UpgradeableProxy.constructor (transparentUpgraded.sol#108-116):\n\t-(success) = _logic.delegatecall(_data) transparentUpgraded.sol#113\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 380,
          "vulnerability_to_line": 385,
          "vulnerability_code": "    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\n\n        _upgradeTo(newImplementation);\n\n        // solhint-disable-next-line avoid-low-level-calls\n\n        (bool success,) = newImplementation.delegatecall(data);\n\n        require(success);\n",
          "message": "Low level call in TransparentUpgradeableProxy.upgradeToAndCall (transparentUpgraded.sol#380-385):\n\t-(success) = newImplementation.delegatecall(data) transparentUpgraded.sol#383\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": 42,
          "vulnerability_code": "    function _delegate(address implementation) internal {\n\n        assembly {\n\n            // Copy msg.data. We take full control of memory in this inline assembly\n\n            // block because it will not return to Solidity code. We overwrite the\n\n            // Solidity scratch pad at memory position 0.\n\n            calldatacopy(0, 0, calldatasize())\n\n\n\n            // Call the implementation.\n\n            // out and outsize are 0 because we don't know the size yet.\n\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n\n\n            // Copy the returned data.\n\n            returndatacopy(0, 0, returndatasize())\n\n\n\n            switch result\n\n            // delegatecall returns 0 on error.\n\n            case 0 { revert(0, returndatasize()) }\n\n            default { return(0, returndatasize()) }\n\n        }\n",
          "message": "Function 'Proxy._delegate' (transparentUpgraded.sol#23-42) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _implementation() internal virtual view returns (address);\n",
          "message": "Function 'Proxy._implementation' (transparentUpgraded.sol#48) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": 58,
          "vulnerability_code": "    function _fallback() internal {\n\n        _beforeFallback();\n\n        _delegate(_implementation());\n",
          "message": "Function 'Proxy._fallback' (transparentUpgraded.sol#55-58) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": 83,
          "vulnerability_code": "    function _beforeFallback() internal virtual {\n",
          "message": "Function 'Proxy._beforeFallback' (transparentUpgraded.sol#82-83) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 133,
          "vulnerability_to_line": 139,
          "vulnerability_code": "    function _implementation() internal override view returns (address impl) {\n\n        bytes32 slot = _IMPLEMENTATION_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            impl := sload(slot)\n\n        }\n",
          "message": "Function 'UpgradeableProxy._implementation' (transparentUpgraded.sol#133-139) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _logic, bytes memory _data) public payable {\n",
          "message": "Parameter '_logic' of UpgradeableProxy. (transparentUpgraded.sol#108) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _logic, bytes memory _data) public payable {\n",
          "message": "Parameter '_data' of UpgradeableProxy. (transparentUpgraded.sol#108) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 146,
          "vulnerability_to_line": 149,
          "vulnerability_code": "    function _upgradeTo(address newImplementation) internal {\n\n        _setImplementation(newImplementation);\n\n        emit Upgraded(newImplementation);\n",
          "message": "Function 'UpgradeableProxy._upgradeTo' (transparentUpgraded.sol#146-149) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 154,
          "vulnerability_to_line": 163,
          "vulnerability_code": "    function _setImplementation(address newImplementation) private {\n\n        require(isContract(newImplementation), \"UpgradeableProxy: new implementation is not a contract\");\n\n\n\n        bytes32 slot = _IMPLEMENTATION_SLOT;\n\n\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            sstore(slot, newImplementation)\n\n        }\n",
          "message": "Function 'UpgradeableProxy._setImplementation' (transparentUpgraded.sol#154-163) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 526,
          "vulnerability_to_line": 530,
          "vulnerability_code": "    function _beforeFallback() internal override virtual {\n\n        require(msg.sender != _admin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n\n        require(!_paused(), \"TransparentUpgradeableProxy: contract is paused\");\n\n        super._beforeFallback();\n",
          "message": "Function 'TransparentUpgradeableProxy._beforeFallback' (transparentUpgraded.sol#526-530) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 226,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _logic, address _admin, address _incognito, bytes memory _data) public payable UpgradeableProxy(_logic, _data) {\n",
          "message": "Parameter '_admin' of TransparentUpgradeableProxy. (transparentUpgraded.sol#226) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 226,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _logic, address _admin, address _incognito, bytes memory _data) public payable UpgradeableProxy(_logic, _data) {\n",
          "message": "Parameter '_incognito' of TransparentUpgradeableProxy. (transparentUpgraded.sol#226) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 390,
          "vulnerability_to_line": 396,
          "vulnerability_code": "    function _admin() internal view returns (address adm) {\n\n        bytes32 slot = _ADMIN_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            adm := sload(slot)\n\n        }\n",
          "message": "Function 'TransparentUpgradeableProxy._admin' (transparentUpgraded.sol#390-396) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 401,
          "vulnerability_to_line": 408,
          "vulnerability_code": "    function _setAdmin(address newAdmin) private {\n\n        bytes32 slot = _ADMIN_SLOT;\n\n\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            sstore(slot, newAdmin)\n\n        }\n",
          "message": "Function 'TransparentUpgradeableProxy._setAdmin' (transparentUpgraded.sol#401-408) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 413,
          "vulnerability_to_line": 419,
          "vulnerability_code": "    function _successor() internal view returns (address sor) {\n\n        bytes32 slot = _SUCCESSOR_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            sor := sload(slot)\n\n        }\n",
          "message": "Function 'TransparentUpgradeableProxy._successor' (transparentUpgraded.sol#413-419) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 424,
          "vulnerability_to_line": 431,
          "vulnerability_code": "    function _setSuccesor(address newSuccessor) private {\n\n        bytes32 slot = _SUCCESSOR_SLOT;\n\n\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            sstore(slot, newSuccessor)\n\n        }\n",
          "message": "Function 'TransparentUpgradeableProxy._setSuccesor' (transparentUpgraded.sol#424-431) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 436,
          "vulnerability_to_line": 442,
          "vulnerability_code": "    function _paused() internal view returns (bool psd) {\n\n        bytes32 slot = _PAUSED_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            psd := sload(slot)\n\n        }\n",
          "message": "Function 'TransparentUpgradeableProxy._paused' (transparentUpgraded.sol#436-442) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 447,
          "vulnerability_to_line": 454,
          "vulnerability_code": "    function _setPaused(bool psd) private {\n\n        bytes32 slot = _PAUSED_SLOT;\n\n\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            sstore(slot, psd)\n\n        }\n",
          "message": "Function 'TransparentUpgradeableProxy._setPaused' (transparentUpgraded.sol#447-454) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 459,
          "vulnerability_to_line": 465,
          "vulnerability_code": "    function _incognito() internal view returns (address icg) {\n\n        bytes32 slot = _INCOGNITO_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            icg := sload(slot)\n\n        }\n",
          "message": "Function 'TransparentUpgradeableProxy._incognito' (transparentUpgraded.sol#459-465) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 470,
          "vulnerability_to_line": 477,
          "vulnerability_code": "    function _setIncognito(address newIncognito) private {\n\n        bytes32 slot = _INCOGNITO_SLOT;\n\n\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            sstore(slot, newIncognito)\n\n        }\n",
          "message": "Function 'TransparentUpgradeableProxy._setIncognito' (transparentUpgraded.sol#470-477) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 133,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _implementation() internal override view returns (address impl) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 390,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _admin() internal view returns (address adm) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 413,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _successor() internal view returns (address sor) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 436,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _paused() internal view returns (bool psd) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 459,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _incognito() internal view returns (address icg) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract UpgradeableProxy is Proxy {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 221,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract TransparentUpgradeableProxy is UpgradeableProxy {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32 private constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 265,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 272,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32 private constant _SUCCESSOR_SLOT = 0x7b13fc932b1063ca775d428558b73e20eab6804d4d9b5a148d7cbae4488973f8;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 279,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32 private constant _PAUSED_SLOT = 0x8dea8703c3cf94703383ce38a9c894669dccd4ca8e65ddb43267aa0248711450;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 286,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32 private constant _INCOGNITO_SLOT = 0x62135fc083646fdb4e1a9d700e351b886a4a5a39da980650269edd1ade91ffd2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 133,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _implementation() internal override view returns (address impl) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 182,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 390,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _admin() internal view returns (address adm) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 413,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _successor() internal view returns (address sor) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 436,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _paused() internal view returns (bool psd) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 459,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _incognito() internal view returns (address icg) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 383,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success,) = newImplementation.delegatecall(data);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 393,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 405,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 416,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 428,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 439,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 451,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 462,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 474,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "    fallback () payable external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _fallback();\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHL) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}