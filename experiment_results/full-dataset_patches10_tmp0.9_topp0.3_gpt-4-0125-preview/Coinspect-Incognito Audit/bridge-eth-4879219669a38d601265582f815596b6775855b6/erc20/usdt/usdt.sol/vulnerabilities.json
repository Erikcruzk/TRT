{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 106,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract BasicToken is Ownable, ERC20Basic {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 230,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Pausable is Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 270,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract BlackList is Ownable, BasicToken {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public basisPointsRate = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public maximumFee = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 234,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bool public paused = false;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 207,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_52"
      ],
      "vulnerability_findings": [
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": 89,
          "vulnerability_code": "contract ERC20Basic {\n\n    uint public _totalSupply;\n\n    function totalSupply() public constant returns (uint);\n\n    function balanceOf(address who) public constant returns (uint);\n\n    function transfer(address to, uint value) public;\n\n    event Transfer(address indexed from, address indexed to, uint value);\n",
          "message": "ERC20Basic (usdt.sol#83-89) has incorrect ERC20 function interface(s):\n\t-transfer (usdt.sol#87)\n"
        },
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": 100,
          "vulnerability_code": "contract ERC20 is ERC20Basic {\n\n    function allowance(address owner, address spender) public constant returns (uint);\n\n    function transferFrom(address from, address to, uint value) public;\n\n    function approve(address spender, uint value) public;\n\n    event Approval(address indexed owner, address indexed spender, uint value);\n",
          "message": "ERC20 (usdt.sol#95-100) has incorrect ERC20 function interface(s):\n\t-transferFrom (usdt.sol#97)\n\t-approve (usdt.sol#98)\n"
        },
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 106,
          "vulnerability_to_line": 152,
          "vulnerability_code": "contract BasicToken is Ownable, ERC20Basic {\n\n    using SafeMath for uint;\n\n\n\n    mapping(address => uint) public balances;\n\n\n\n    // additional variables for use if transaction fees ever became necessary\n\n    uint public basisPointsRate = 0;\n\n    uint public maximumFee = 0;\n\n\n\n    /**\n\n    * @dev Fix for the ERC20 short address attack.\n\n    */\n\n    modifier onlyPayloadSize(uint size) {\n\n        require(!(msg.data.length < size + 4));\n\n        _;\n\n    }\n\n\n\n    /**\n\n    * @dev transfer token for a specified address\n\n    * @param _to The address to transfer to.\n\n    * @param _value The amount to be transferred.\n\n    */\n\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\n\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\n\n        if (fee > maximumFee) {\n\n            fee = maximumFee;\n\n        }\n\n        uint sendAmount = _value.sub(fee);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n\n        balances[_to] = balances[_to].add(sendAmount);\n\n        if (fee > 0) {\n\n            balances[owner] = balances[owner].add(fee);\n\n            Transfer(msg.sender, owner, fee);\n\n        }\n\n        Transfer(msg.sender, _to, sendAmount);\n\n    }\n\n\n\n    /**\n\n    * @dev Gets the balance of the specified address.\n\n    * @param _owner The address to query the the balance of.\n\n    * @return An uint representing the amount owned by the passed address.\n\n    */\n\n    function balanceOf(address _owner) public constant returns (uint balance) {\n\n        return balances[_owner];\n\n    }\n\n\n",
          "message": "BasicToken (usdt.sol#106-152) has incorrect ERC20 function interface(s):\n\t-transfer (usdt.sol#128-141)\n"
        },
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 161,
          "vulnerability_to_line": 223,
          "vulnerability_code": "contract StandardToken is BasicToken, ERC20 {\n\n\n\n    mapping (address => mapping (address => uint)) public allowed;\n\n\n\n    uint public constant MAX_UINT = 2**256 - 1;\n\n\n\n    /**\n\n    * @dev Transfer tokens from one address to another\n\n    * @param _from address The address which you want to send tokens from\n\n    * @param _to address The address which you want to transfer to\n\n    * @param _value uint the amount of tokens to be transferred\n\n    */\n\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\n\n        var _allowance = allowed[_from][msg.sender];\n\n\n\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n\n        // if (_value > _allowance) throw;\n\n\n\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\n\n        if (fee > maximumFee) {\n\n            fee = maximumFee;\n\n        }\n\n        if (_allowance < MAX_UINT) {\n\n            allowed[_from][msg.sender] = _allowance.sub(_value);\n\n        }\n\n        uint sendAmount = _value.sub(fee);\n\n        balances[_from] = balances[_from].sub(_value);\n\n        balances[_to] = balances[_to].add(sendAmount);\n\n        if (fee > 0) {\n\n            balances[owner] = balances[owner].add(fee);\n\n            Transfer(_from, owner, fee);\n\n        }\n\n        Transfer(_from, _to, sendAmount);\n\n    }\n\n\n\n    /**\n\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n\n    * @param _spender The address which will spend the funds.\n\n    * @param _value The amount of tokens to be spent.\n\n    */\n\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\n\n\n\n        // To change the approve amount you first have to reduce the addresses`\n\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n\n        //  already 0 to mitigate the race condition described here:\n\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\n\n\n\n        allowed[msg.sender][_spender] = _value;\n\n        Approval(msg.sender, _spender, _value);\n\n    }\n\n\n\n    /**\n\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\n\n    * @param _owner address The address which owns the funds.\n\n    * @param _spender address The address which will spend the funds.\n\n    * @return A uint specifying the amount of tokens still available for the spender.\n\n    */\n\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n\n        return allowed[_owner][_spender];\n\n    }\n\n\n",
          "message": "StandardToken (usdt.sol#161-223) has incorrect ERC20 function interface(s):\n\t-transferFrom (usdt.sol#173-194)\n\t-approve (usdt.sol#201-211)\n"
        },
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 317,
          "vulnerability_to_line": 453,
          "vulnerability_code": "contract TetherToken is Pausable, StandardToken, BlackList {\n\n\n\n    string public name;\n\n    string public symbol;\n\n    uint public decimals;\n\n    address public upgradedAddress;\n\n    bool public deprecated;\n\n\n\n    //  The contract can be initialized with a number of tokens\n\n    //  All the tokens are deposited to the owner address\n\n    //\n\n    // @param _balance Initial supply of the contract\n\n    // @param _name Token Name\n\n    // @param _symbol Token symbol\n\n    // @param _decimals Token decimals\n\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\n\n        _totalSupply = _initialSupply;\n\n        name = _name;\n\n        symbol = _symbol;\n\n        decimals = _decimals;\n\n        balances[owner] = _initialSupply;\n\n        deprecated = false;\n\n    }\n\n\n\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\n\n    function transfer(address _to, uint _value) public whenNotPaused {\n\n        require(!isBlackListed[msg.sender]);\n\n        if (deprecated) {\n\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\n\n        } else {\n\n            return super.transfer(_to, _value);\n\n        }\n\n    }\n\n\n\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\n\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\n\n        require(!isBlackListed[_from]);\n\n        if (deprecated) {\n\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\n\n        } else {\n\n            return super.transferFrom(_from, _to, _value);\n\n        }\n\n    }\n\n\n\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\n\n    function balanceOf(address who) public constant returns (uint) {\n\n        if (deprecated) {\n\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\n\n        } else {\n\n            return super.balanceOf(who);\n\n        }\n\n    }\n\n\n\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\n\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\n\n        if (deprecated) {\n\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\n\n        } else {\n\n            return super.approve(_spender, _value);\n\n        }\n\n    }\n\n\n\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\n\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n\n        if (deprecated) {\n\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\n\n        } else {\n\n            return super.allowance(_owner, _spender);\n\n        }\n\n    }\n\n\n\n    // deprecate current contract in favour of a new one\n\n    function deprecate(address _upgradedAddress) public onlyOwner {\n\n        deprecated = true;\n\n        upgradedAddress = _upgradedAddress;\n\n        Deprecate(_upgradedAddress);\n\n    }\n\n\n\n    // deprecate current contract if favour of a new one\n\n    function totalSupply() public constant returns (uint) {\n\n        if (deprecated) {\n\n            return StandardToken(upgradedAddress).totalSupply();\n\n        } else {\n\n            return _totalSupply;\n\n        }\n\n    }\n\n\n\n    // Issue a new amount of tokens\n\n    // these tokens are deposited into the owner address\n\n    //\n\n    // @param _amount Number of tokens to be issued\n\n    function issue(uint amount) public onlyOwner {\n\n        require(_totalSupply + amount > _totalSupply);\n\n        require(balances[owner] + amount > balances[owner]);\n\n\n\n        balances[owner] += amount;\n\n        _totalSupply += amount;\n\n        Issue(amount);\n\n    }\n\n\n\n    // Redeem tokens.\n\n    // These tokens are withdrawn from the owner address\n\n    // if the balance must be enough to cover the redeem\n\n    // or the call will fail.\n\n    // @param _amount Number of tokens to be issued\n\n    function redeem(uint amount) public onlyOwner {\n\n        require(_totalSupply >= amount);\n\n        require(balances[owner] >= amount);\n\n\n\n        _totalSupply -= amount;\n\n        balances[owner] -= amount;\n\n        Redeem(amount);\n\n    }\n\n\n\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\n\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\n\n        require(newBasisPoints < 20);\n\n        require(newMaxFee < 50);\n\n\n\n        basisPointsRate = newBasisPoints;\n\n        maximumFee = newMaxFee.mul(10**decimals);\n\n\n\n        Params(basisPointsRate, maximumFee);\n\n    }\n\n\n\n    // Called when new token are issued\n\n    event Issue(uint amount);\n\n\n\n    // Called when tokens are redeemed\n\n    event Redeem(uint amount);\n\n\n\n    // Called when contract is deprecated\n\n    event Deprecate(address newAddress);\n\n\n\n    // Called if contract ever adds fees\n\n    event Params(uint feeBasisPoints, uint maxFee);\n",
          "message": "TetherToken (usdt.sol#317-453) has incorrect ERC20 function interface(s):\n\t-transfer (usdt.sol#342-349)\n\t-transferFrom (usdt.sol#352-359)\n\t-approve (usdt.sol#371-377)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": 74,
          "vulnerability_code": "    function transferOwnership(address newOwner) public onlyOwner {\n\n        if (newOwner != address(0)) {\n\n            owner = newOwner;\n\n        }\n",
          "message": "Ownable.transferOwnership (usdt.sol#70-74) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 396,
          "vulnerability_to_line": 402,
          "vulnerability_code": "    function totalSupply() public constant returns (uint) {\n\n        if (deprecated) {\n\n            return StandardToken(upgradedAddress).totalSupply();\n\n        } else {\n\n            return _totalSupply;\n\n        }\n",
          "message": "TetherToken.totalSupply (usdt.sol#396-402) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function totalSupply() public constant returns (uint);\n",
          "message": "ERC20Basic.totalSupply (usdt.sol#85) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 256,
          "vulnerability_to_line": 259,
          "vulnerability_code": "  function pause() onlyOwner whenNotPaused public {\n\n    paused = true;\n\n    Pause();\n",
          "message": "Pausable.pause (usdt.sol#256-259) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 264,
          "vulnerability_to_line": 267,
          "vulnerability_code": "  function unpause() onlyOwner whenPaused public {\n\n    paused = false;\n\n    Unpause();\n",
          "message": "Pausable.unpause (usdt.sol#264-267) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 283,
          "vulnerability_to_line": 286,
          "vulnerability_code": "    function addBlackList (address _evilUser) public onlyOwner {\n\n        isBlackListed[_evilUser] = true;\n\n        AddedBlackList(_evilUser);\n",
          "message": "BlackList.addBlackList (usdt.sol#283-286) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 288,
          "vulnerability_to_line": 291,
          "vulnerability_code": "    function removeBlackList (address _clearedUser) public onlyOwner {\n\n        isBlackListed[_clearedUser] = false;\n\n        RemovedBlackList(_clearedUser);\n",
          "message": "BlackList.removeBlackList (usdt.sol#288-291) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 293,
          "vulnerability_to_line": 299,
          "vulnerability_code": "    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\n\n        require(isBlackListed[_blackListedUser]);\n\n        uint dirtyFunds = balanceOf(_blackListedUser);\n\n        balances[_blackListedUser] = 0;\n\n        _totalSupply -= dirtyFunds;\n\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\n",
          "message": "BlackList.destroyBlackFunds (usdt.sol#293-299) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 312,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferByLegacy(address from, address to, uint value) public;\n",
          "message": "UpgradedStandardToken.transferByLegacy (usdt.sol#312) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 313,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\n",
          "message": "UpgradedStandardToken.transferFromByLegacy (usdt.sol#313) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 314,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approveByLegacy(address from, address spender, uint value) public;\n",
          "message": "UpgradedStandardToken.approveByLegacy (usdt.sol#314) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 389,
          "vulnerability_to_line": 393,
          "vulnerability_code": "    function deprecate(address _upgradedAddress) public onlyOwner {\n\n        deprecated = true;\n\n        upgradedAddress = _upgradedAddress;\n\n        Deprecate(_upgradedAddress);\n",
          "message": "TetherToken.deprecate (usdt.sol#389-393) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 408,
          "vulnerability_to_line": 415,
          "vulnerability_code": "    function issue(uint amount) public onlyOwner {\n\n        require(_totalSupply + amount > _totalSupply);\n\n        require(balances[owner] + amount > balances[owner]);\n\n\n\n        balances[owner] += amount;\n\n        _totalSupply += amount;\n\n        Issue(amount);\n",
          "message": "TetherToken.issue (usdt.sol#408-415) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 422,
          "vulnerability_to_line": 429,
          "vulnerability_code": "    function redeem(uint amount) public onlyOwner {\n\n        require(_totalSupply >= amount);\n\n        require(balances[owner] >= amount);\n\n\n\n        _totalSupply -= amount;\n\n        balances[owner] -= amount;\n\n        Redeem(amount);\n",
          "message": "TetherToken.redeem (usdt.sol#422-429) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 431,
          "vulnerability_to_line": 440,
          "vulnerability_code": "    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\n\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\n\n        require(newBasisPoints < 20);\n\n        require(newMaxFee < 50);\n\n\n\n        basisPointsRate = newBasisPoints;\n\n        maximumFee = newMaxFee.mul(10**decimals);\n\n\n\n        Params(basisPointsRate, maximumFee);\n",
          "message": "TetherToken.setParams (usdt.sol#431-440) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.17;\n",
          "message": "Detected issues with version pragma in usdt.sol:\n\t- pragma solidity^0.4.17 (usdt.sol#7): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": 56,
          "vulnerability_code": "    function Ownable() public {\n\n        owner = msg.sender;\n",
          "message": "Function 'Ownable.Ownable' (usdt.sol#54-56) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public _totalSupply;\n",
          "message": "Variable 'ERC20Basic._totalSupply' (usdt.sol#84) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 148,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint balance) {\n",
          "message": "Parameter '_owner' of BasicToken.balanceOf (usdt.sol#148) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\n",
          "message": "Parameter '_to' of BasicToken.transfer (usdt.sol#128) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\n",
          "message": "Parameter '_value' of BasicToken.transfer (usdt.sol#128) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 219,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n",
          "message": "Parameter '_owner' of StandardToken.allowance (usdt.sol#219) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 219,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n",
          "message": "Parameter '_spender' of StandardToken.allowance (usdt.sol#219) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\n",
          "message": "Parameter '_from' of StandardToken.transferFrom (usdt.sol#173) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\n",
          "message": "Parameter '_to' of StandardToken.transferFrom (usdt.sol#173) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\n",
          "message": "Parameter '_value' of StandardToken.transferFrom (usdt.sol#173) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\n",
          "message": "Parameter '_spender' of StandardToken.approve (usdt.sol#201) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\n",
          "message": "Parameter '_value' of StandardToken.approve (usdt.sol#201) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 273,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBlackListStatus(address _maker) external constant returns (bool) {\n",
          "message": "Parameter '_maker' of BlackList.getBlackListStatus (usdt.sol#273) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 283,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addBlackList (address _evilUser) public onlyOwner {\n",
          "message": "Parameter '_evilUser' of BlackList.addBlackList (usdt.sol#283) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 288,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function removeBlackList (address _clearedUser) public onlyOwner {\n",
          "message": "Parameter '_clearedUser' of BlackList.removeBlackList (usdt.sol#288) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 293,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\n",
          "message": "Parameter '_blackListedUser' of BlackList.destroyBlackFunds (usdt.sol#293) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 342,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint _value) public whenNotPaused {\n",
          "message": "Parameter '_to' of TetherToken.transfer (usdt.sol#342) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 342,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint _value) public whenNotPaused {\n",
          "message": "Parameter '_value' of TetherToken.transfer (usdt.sol#342) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 380,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n",
          "message": "Parameter '_owner' of TetherToken.allowance (usdt.sol#380) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 380,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n",
          "message": "Parameter '_spender' of TetherToken.allowance (usdt.sol#380) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 352,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\n",
          "message": "Parameter '_from' of TetherToken.transferFrom (usdt.sol#352) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 352,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\n",
          "message": "Parameter '_to' of TetherToken.transferFrom (usdt.sol#352) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 352,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\n",
          "message": "Parameter '_value' of TetherToken.transferFrom (usdt.sol#352) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 371,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\n",
          "message": "Parameter '_spender' of TetherToken.approve (usdt.sol#371) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 371,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\n",
          "message": "Parameter '_value' of TetherToken.approve (usdt.sol#371) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": 339,
          "vulnerability_code": "    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\n\n        _totalSupply = _initialSupply;\n\n        name = _name;\n\n        symbol = _symbol;\n\n        decimals = _decimals;\n\n        balances[owner] = _initialSupply;\n\n        deprecated = false;\n",
          "message": "Function 'TetherToken.TetherToken' (usdt.sol#332-339) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\n",
          "message": "Parameter '_initialSupply' of TetherToken.TetherToken (usdt.sol#332) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\n",
          "message": "Parameter '_name' of TetherToken.TetherToken (usdt.sol#332) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\n",
          "message": "Parameter '_symbol' of TetherToken.TetherToken (usdt.sol#332) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\n",
          "message": "Parameter '_decimals' of TetherToken.TetherToken (usdt.sol#332) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 389,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deprecate(address _upgradedAddress) public onlyOwner {\n",
          "message": "Parameter '_upgradedAddress' of TetherToken.deprecate (usdt.sol#389) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function totalSupply() public constant returns (uint);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address who) public constant returns (uint);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address owner, address spender) public constant returns (uint);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 148,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint balance) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 219,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 273,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBlackListStatus(address _maker) external constant returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 277,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getOwner() external constant returns (address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 362,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address who) public constant returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 380,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 396,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function totalSupply() public constant returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 371,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 431,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.17;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 319,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string public name;\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 297,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _totalSupply -= dirtyFunds;\n",
          "message": null
        }
      ]
    }
  }
}