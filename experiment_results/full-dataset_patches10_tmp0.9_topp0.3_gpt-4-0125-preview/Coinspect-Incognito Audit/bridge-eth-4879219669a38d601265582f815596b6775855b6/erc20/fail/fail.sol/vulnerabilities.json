{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 initialSupply,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string memory tokenName,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint8 decimalUnits,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string memory tokenSymbol\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": null,
          "vulnerability_code": "        totalSupply = initialSupply;                        // Update total supply\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "        name = tokenName;                                   // Set the name for display purposes\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "        symbol = tokenSymbol;                               // Set the symbol for display purposes\n",
          "message": "Consider making costructor payable to save gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_19"
      ],
      "vulnerability_findings": [
        {
          "name": "shadowing-builtin",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": 41,
          "vulnerability_code": "  function assert(bool assertion) internal {\n\n    if (!assertion) {\n\n      revert();\n\n    }\n",
          "message": "SafeMath.assert (function @ fail.sol#37-41) shadows built-in symbol \"assert\"\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": 92,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns(bool success) {\n\n        if (_to == address(0x0)) revert();                               // Prevent transfer to 0x0 address. Use burn() instead\n\n\t\tif (_value <= 0) revert();\n\n        if (balanceOf[msg.sender] < _value) revert();           // Check if the sender has enough\n\n        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); // Check for overflows\n\n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                     // Subtract from the sender\n\n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                            // Add the same to the recipient\n\n        emit Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n\n        return false; // FAILLLLLLLL!!!!!\n",
          "message": "FAIL.transfer (fail.sol#83-92) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": 99,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool success) {\n\n\t\tif (_value <= 0) revert();\n\n        allowance[msg.sender][_spender] = _value;\n\n        return true;\n",
          "message": "FAIL.approve (fail.sol#95-99) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": 114,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n\n        if (_to == address(0x0)) revert();                                // Prevent transfer to 0x0 address. Use burn() instead\n\n\t\tif (_value <= 0) revert();\n\n        if (balanceOf[_from] < _value) revert();                 // Check if the sender has enough\n\n        if (balanceOf[_to] + _value < balanceOf[_to]) revert();  // Check for overflows\n\n        if (_value > allowance[_from][msg.sender]) revert();     // Check allowance\n\n        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);                           // Subtract from the sender\n\n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                             // Add the same to the recipient\n\n        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\n\n        emit Transfer(_from, _to, _value);\n\n        return false; // FAILLLLLLLL!!!!!\n",
          "message": "FAIL.transferFrom (fail.sol#103-114) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": 123,
          "vulnerability_code": "    function burn(uint256 _value) public returns (bool success) {\n\n        if (balanceOf[msg.sender] < _value) revert();            // Check if the sender has enough\n\n\t\tif (_value <= 0) revert();\n\n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                      // Subtract from the sender\n\n        totalSupply = SafeMath.safeSub(totalSupply,_value);                                // Updates totalSupply\n\n        emit Burn(msg.sender, _value);\n\n        return true;\n",
          "message": "FAIL.burn (fail.sol#116-123) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": 132,
          "vulnerability_code": "\tfunction freeze(uint256 _value) public returns (bool success) {\n\n        if (balanceOf[msg.sender] < _value) revert();            // Check if the sender has enough\n\n\t\tif (_value <= 0) revert();\n\n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                      // Subtract from the sender\n\n        freezeOf[msg.sender] = SafeMath.safeAdd(freezeOf[msg.sender], _value);                                // Updates totalSupply\n\n        emit Freeze(msg.sender, _value);\n\n        return true;\n",
          "message": "FAIL.freeze (fail.sol#125-132) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": 141,
          "vulnerability_code": "\tfunction unfreeze(uint256 _value) public returns (bool success) {\n\n        if (freezeOf[msg.sender] < _value) revert();            // Check if the sender has enough\n\n\t\tif (_value <= 0) revert();\n\n        freezeOf[msg.sender] = SafeMath.safeSub(freezeOf[msg.sender], _value);                      // Subtract from the sender\n\n\t\tbalanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], _value);\n\n        emit Unfreeze(msg.sender, _value);\n\n        return true;\n",
          "message": "FAIL.unfreeze (fail.sol#134-141) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 144,
          "vulnerability_to_line": 147,
          "vulnerability_code": "\tfunction withdrawEther(uint256 amount) public {\n\n\t\tif(msg.sender != owner) revert();\n\n\t\towner.transfer(amount);\n",
          "message": "FAIL.withdrawEther (fail.sol#144-147) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.8;\n",
          "message": "Detected issues with version pragma in fail.sol:\n\t- pragma solidity^0.5.8 (fail.sol#7): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns(bool success) {\n",
          "message": "Parameter '_to' of FAIL.transfer (fail.sol#83) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns(bool success) {\n",
          "message": "Parameter '_value' of FAIL.transfer (fail.sol#83) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool success) {\n",
          "message": "Parameter '_spender' of FAIL.approve (fail.sol#95) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool success) {\n",
          "message": "Parameter '_value' of FAIL.approve (fail.sol#95) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n",
          "message": "Parameter '_from' of FAIL.transferFrom (fail.sol#103) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n",
          "message": "Parameter '_to' of FAIL.transferFrom (fail.sol#103) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n",
          "message": "Parameter '_value' of FAIL.transferFrom (fail.sol#103) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function burn(uint256 _value) public returns (bool success) {\n",
          "message": "Parameter '_value' of FAIL.burn (fail.sol#116) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction freeze(uint256 _value) public returns (bool success) {\n",
          "message": "Parameter '_value' of FAIL.freeze (fail.sol#125) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction unfreeze(uint256 _value) public returns (bool success) {\n",
          "message": "Parameter '_value' of FAIL.unfreeze (fail.sol#134) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (_to == address(0x0)) revert();                               // Prevent transfer to 0x0 address. Use burn() instead\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (_to == address(0x0)) revert();                                // Prevent transfer to 0x0 address. Use burn() instead\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.8;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "    if (!assertion) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (_to == address(0x0)) revert();                               // Prevent transfer to 0x0 address. Use burn() instead\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tif (_value <= 0) revert();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (balanceOf[msg.sender] < _value) revert();           // Check if the sender has enough\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); // Check for overflows\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tif (_value <= 0) revert();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (_to == address(0x0)) revert();                                // Prevent transfer to 0x0 address. Use burn() instead\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tif (_value <= 0) revert();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 106,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (balanceOf[_from] < _value) revert();                 // Check if the sender has enough\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (balanceOf[_to] + _value < balanceOf[_to]) revert();  // Check for overflows\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (_value > allowance[_from][msg.sender]) revert();     // Check allowance\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (balanceOf[msg.sender] < _value) revert();            // Check if the sender has enough\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tif (_value <= 0) revert();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 126,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (balanceOf[msg.sender] < _value) revert();            // Check if the sender has enough\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 127,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tif (_value <= 0) revert();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (freezeOf[msg.sender] < _value) revert();            // Check if the sender has enough\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tif (_value <= 0) revert();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 145,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tif(msg.sender != owner) revert();\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}