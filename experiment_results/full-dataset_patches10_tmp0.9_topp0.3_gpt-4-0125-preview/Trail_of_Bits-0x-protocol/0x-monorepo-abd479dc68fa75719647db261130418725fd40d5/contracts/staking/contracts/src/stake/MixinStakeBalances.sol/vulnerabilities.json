{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(STANDARD_ERROR_SELECTOR, bytes(message));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(UINT256_BINOP_ERROR_SELECTOR, errorCode, a, b);\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(UINT256_DOWNCAST_ERROR_SELECTOR, errorCode, a);\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 382,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(ONLY_OWNER_ERROR_SELECTOR, sender, owner);\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1038,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1039,
          "vulnerability_to_line": null,
          "vulnerability_code": "            MISCALCULATED_REWARDS_ERROR_SELECTOR,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1040,
          "vulnerability_to_line": null,
          "vulnerability_code": "            totalRewardsPaid,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1041,
          "vulnerability_to_line": null,
          "vulnerability_code": "            initialContractBalance\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1042,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1052,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1053,
          "vulnerability_to_line": null,
          "vulnerability_code": "            ONLY_CALLABLE_BY_EXCHANGE_ERROR_SELECTOR,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1054,
          "vulnerability_to_line": null,
          "vulnerability_code": "            senderAddress\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1055,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1065,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1066,
          "vulnerability_to_line": null,
          "vulnerability_code": "            EXCHANGE_ADDRESS_ALREADY_REGISTERED_ERROR_SELECTOR,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1067,
          "vulnerability_to_line": null,
          "vulnerability_code": "            exchangeAddress\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1068,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1078,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1079,
          "vulnerability_to_line": null,
          "vulnerability_code": "            EXCHANGE_ADDRESS_NOT_REGISTERED_ERROR_SELECTOR,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1080,
          "vulnerability_to_line": null,
          "vulnerability_code": "            exchangeAddress\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1081,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1092,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1093,
          "vulnerability_to_line": null,
          "vulnerability_code": "            INSUFFICIENT_BALANCE_ERROR_SELECTOR,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1094,
          "vulnerability_to_line": null,
          "vulnerability_code": "            amount,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1095,
          "vulnerability_to_line": null,
          "vulnerability_code": "            balance\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1096,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1107,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1108,
          "vulnerability_to_line": null,
          "vulnerability_code": "            ONLY_CALLABLE_BY_POOL_OPERATOR_ERROR_SELECTOR,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1109,
          "vulnerability_to_line": null,
          "vulnerability_code": "            senderAddress,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1110,
          "vulnerability_to_line": null,
          "vulnerability_code": "            poolOperatorAddress\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1111,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1123,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1124,
          "vulnerability_to_line": null,
          "vulnerability_code": "            ONLY_CALLABLE_BY_POOL_OPERATOR_OR_MAKER_ERROR_SELECTOR,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1125,
          "vulnerability_to_line": null,
          "vulnerability_code": "            senderAddress,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1126,
          "vulnerability_to_line": null,
          "vulnerability_code": "            poolOperatorAddress,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1127,
          "vulnerability_to_line": null,
          "vulnerability_code": "            makerAddress\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1128,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1140,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1141,
          "vulnerability_to_line": null,
          "vulnerability_code": "            MAKER_POOL_ASSIGNMENT_ERROR_SELECTOR,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1142,
          "vulnerability_to_line": null,
          "vulnerability_code": "            errorCode,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1143,
          "vulnerability_to_line": null,
          "vulnerability_code": "            makerAddress,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1144,
          "vulnerability_to_line": null,
          "vulnerability_code": "            poolId\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1145,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1156,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1157,
          "vulnerability_to_line": null,
          "vulnerability_code": "            WITHDRAW_AMOUNT_EXCEEDS_MEMBER_BALANCE_ERROR_SELECTOR,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1158,
          "vulnerability_to_line": null,
          "vulnerability_code": "            withdrawAmount,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1159,
          "vulnerability_to_line": null,
          "vulnerability_code": "            balance\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1160,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1171,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1172,
          "vulnerability_to_line": null,
          "vulnerability_code": "            BLOCK_TIMESTAMP_TOO_LOW_ERROR_SELECTOR,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1173,
          "vulnerability_to_line": null,
          "vulnerability_code": "            epochEndTime,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1174,
          "vulnerability_to_line": null,
          "vulnerability_code": "            currentBlockTimestamp\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1175,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1185,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1186,
          "vulnerability_to_line": null,
          "vulnerability_code": "            ONLY_CALLABLE_BY_STAKING_CONTRACT_ERROR_SELECTOR,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1187,
          "vulnerability_to_line": null,
          "vulnerability_code": "            senderAddress\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1188,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1215,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1216,
          "vulnerability_to_line": null,
          "vulnerability_code": "            AMOUNT_EXCEEDS_BALANCE_OF_POOL_ERROR_SELECTOR,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1217,
          "vulnerability_to_line": null,
          "vulnerability_code": "            amount,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1218,
          "vulnerability_to_line": null,
          "vulnerability_code": "            poolBalance\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1219,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1230,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1231,
          "vulnerability_to_line": null,
          "vulnerability_code": "            INVALID_POOL_OPERATOR_SHARE_ERROR_SELECTOR,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1232,
          "vulnerability_to_line": null,
          "vulnerability_code": "            poolId,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1233,
          "vulnerability_to_line": null,
          "vulnerability_code": "            poolOperatorShare\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1234,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1244,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1245,
          "vulnerability_to_line": null,
          "vulnerability_code": "            POOL_ALREADY_EXISTS_ERROR_SELECTOR,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1246,
          "vulnerability_to_line": null,
          "vulnerability_code": "            poolId\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1247,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1258,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1259,
          "vulnerability_to_line": null,
          "vulnerability_code": "            INVALID_COBB_DOUGLAS_ALPHA_ERROR_SELECTOR,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1260,
          "vulnerability_to_line": null,
          "vulnerability_code": "            numerator,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1261,
          "vulnerability_to_line": null,
          "vulnerability_code": "            denominator\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1262,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1270,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1271,
          "vulnerability_to_line": null,
          "vulnerability_code": "            ETH_VAULT_NOT_SET_ERROR_SELECTOR\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1272,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1280,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1281,
          "vulnerability_to_line": null,
          "vulnerability_code": "            REWARD_VAULT_NOT_SET_ERROR_SELECTOR\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1282,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1290,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1291,
          "vulnerability_to_line": null,
          "vulnerability_code": "            INVALID_STAKE_STATUS_ERROR_SELECTOR,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1292,
          "vulnerability_to_line": null,
          "vulnerability_code": "            status\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1293,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 825,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Ownable,\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 419,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 420,
          "vulnerability_to_line": null,
          "vulnerability_code": "        owner = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 421,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 828,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor()\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 829,
          "vulnerability_to_line": null,
          "vulnerability_code": "        public\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 830,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Ownable()\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 831,
          "vulnerability_to_line": null,
          "vulnerability_code": "    {}\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1612,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1613,
          "vulnerability_to_line": null,
          "vulnerability_code": "            address(_zrxVault) != address(0),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1614,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"INVALID_ZRX_VAULT\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1615,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1626,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1627,
          "vulnerability_to_line": null,
          "vulnerability_code": "            address(_zrxVault) != address(0),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1628,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"INVALID_ZRX_VAULT\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1629,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1641,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1642,
          "vulnerability_to_line": null,
          "vulnerability_code": "            address(_zrxVault) != address(0),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1643,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"INVALID_ZRX_VAULT\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1644,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_77"
      ],
      "vulnerability_findings": [
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 844,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => IStructs.StoredBalance) internal activeStakeByOwner;\n",
          "message": "MixinStorage.activeStakeByOwner (MixinStakeBalances.sol#844) is never initialized. It is used in:\n\t- getActiveStake (MixinStakeBalances.sol#1977-1987)\n"
        },
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 848,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => IStructs.StoredBalance) internal inactiveStakeByOwner;\n",
          "message": "MixinStorage.inactiveStakeByOwner (MixinStakeBalances.sol#848) is never initialized. It is used in:\n\t- getInactiveStake (MixinStakeBalances.sol#1992-2002)\n\t- _computeWithdrawableStake (MixinStakeBalances.sol#2065-2080)\n"
        },
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 852,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => IStructs.StoredBalance) internal delegatedStakeByOwner;\n",
          "message": "MixinStorage.delegatedStakeByOwner (MixinStakeBalances.sol#852) is never initialized. It is used in:\n\t- getStakeDelegatedByOwner (MixinStakeBalances.sol#2018-2028)\n"
        },
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 856,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => mapping (bytes32 => IStructs.StoredBalance)) internal delegatedStakeToPoolByOwner;\n",
          "message": "MixinStorage.delegatedStakeToPoolByOwner (MixinStakeBalances.sol#856) is never initialized. It is used in:\n\t- getStakeDelegatedToPoolByOwner (MixinStakeBalances.sol#2034-2044)\n"
        },
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 860,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (bytes32 => IStructs.StoredBalance) internal delegatedStakeByPoolId;\n",
          "message": "MixinStorage.delegatedStakeByPoolId (MixinStakeBalances.sol#860) is never initialized. It is used in:\n\t- getTotalStakeDelegatedToPool (MixinStakeBalances.sol#2049-2059)\n"
        },
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 863,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => uint256) internal withdrawableStakeByOwner;\n",
          "message": "MixinStorage.withdrawableStakeByOwner (MixinStakeBalances.sol#863) is never initialized. It is used in:\n\t- getWithdrawableStake (MixinStakeBalances.sol#2007-2013)\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": 42,
          "vulnerability_code": "    function rrevert(bytes memory errorData) internal pure {\n\n        assembly {\n\n            revert(add(errorData, 0x20), mload(errorData))\n\n        }\n",
          "message": "LibRichErrors.rrevert (MixinStakeBalances.sol#38-42) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 1902,
          "vulnerability_to_line": 1919,
          "vulnerability_code": "    function _arePointersEqual(\n\n        // solhint-disable-next-line no-unused-vars\n\n        IStructs.StoredBalance storage balancePtrA,\n\n        // solhint-disable-next-line no-unused-vars\n\n        IStructs.StoredBalance storage balancePtrB\n\n    )\n\n        private\n\n        pure\n\n        returns (bool areEqual)\n\n    {\n\n        assembly {\n\n            areEqual := and(\n\n                eq(balancePtrA_slot, balancePtrB_slot),\n\n                eq(balancePtrA_offset, balancePtrB_offset)\n\n            )\n\n        }\n\n        return areEqual;\n",
          "message": "MixinStakeStorage._arePointersEqual (MixinStakeBalances.sol#1902-1919) is declared view but contains assembly code\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 1608,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _depositFromOwnerIntoZrxVault(address owner, uint256 amount)\n",
          "message": "MixinZrxVault._depositFromOwnerIntoZrxVault.owner (local variable @ MixinStakeBalances.sol#1608) shadows:\n\t- Ownable.owner (state variable @ MixinStakeBalances.sol#417)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 1622,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _withdrawToOwnerFromZrxVault(address owner, uint256 amount)\n",
          "message": "MixinZrxVault._withdrawToOwnerFromZrxVault.owner (local variable @ MixinStakeBalances.sol#1622) shadows:\n\t- Ownable.owner (state variable @ MixinStakeBalances.sol#417)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 1635,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _balanceOfOwnerInZrxVault(address owner)\n",
          "message": "MixinZrxVault._balanceOfOwnerInZrxVault.owner (local variable @ MixinStakeBalances.sol#1635) shadows:\n\t- Ownable.owner (state variable @ MixinStakeBalances.sol#417)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 1801,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 currentEpoch = getCurrentEpoch();\n",
          "message": "MixinStakeStorage._loadAndSyncBalance.currentEpoch (local variable @ MixinStakeBalances.sol#1801) shadows:\n\t- MixinStorage.currentEpoch (state variable @ MixinStakeBalances.sol#879)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 1966,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTotalStake(address owner)\n",
          "message": "MixinStakeBalances.getTotalStake.owner (local variable @ MixinStakeBalances.sol#1966) shadows:\n\t- Ownable.owner (state variable @ MixinStakeBalances.sol#417)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 1977,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getActiveStake(address owner)\n",
          "message": "MixinStakeBalances.getActiveStake.owner (local variable @ MixinStakeBalances.sol#1977) shadows:\n\t- Ownable.owner (state variable @ MixinStakeBalances.sol#417)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 1992,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getInactiveStake(address owner)\n",
          "message": "MixinStakeBalances.getInactiveStake.owner (local variable @ MixinStakeBalances.sol#1992) shadows:\n\t- Ownable.owner (state variable @ MixinStakeBalances.sol#417)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 2007,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getWithdrawableStake(address owner)\n",
          "message": "MixinStakeBalances.getWithdrawableStake.owner (local variable @ MixinStakeBalances.sol#2007) shadows:\n\t- Ownable.owner (state variable @ MixinStakeBalances.sol#417)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 2018,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getStakeDelegatedByOwner(address owner)\n",
          "message": "MixinStakeBalances.getStakeDelegatedByOwner.owner (local variable @ MixinStakeBalances.sol#2018) shadows:\n\t- Ownable.owner (state variable @ MixinStakeBalances.sol#417)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 2034,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getStakeDelegatedToPoolByOwner(address owner, bytes32 poolId)\n",
          "message": "MixinStakeBalances.getStakeDelegatedToPoolByOwner.owner (local variable @ MixinStakeBalances.sol#2034) shadows:\n\t- Ownable.owner (state variable @ MixinStakeBalances.sol#417)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 2065,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _computeWithdrawableStake(address owner, uint256 lastStoredWithdrawableStake)\n",
          "message": "MixinStakeBalances._computeWithdrawableStake.owner (local variable @ MixinStakeBalances.sol#2065) shadows:\n\t- Ownable.owner (state variable @ MixinStakeBalances.sol#417)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 1526,
          "vulnerability_to_line": 1554,
          "vulnerability_code": "    function _goToNextEpoch()\n\n        internal\n\n    {\n\n        // get current timestamp\n\n        // solhint-disable-next-line not-rely-on-time\n\n        uint256 currentBlockTimestamp = block.timestamp;\n\n\n\n        // validate that we can increment the current epoch\n\n        uint256 epochEndTime = getCurrentEpochEarliestEndTimeInSeconds();\n\n        if (epochEndTime > currentBlockTimestamp) {\n\n            LibRichErrors.rrevert(LibStakingRichErrors.BlockTimestampTooLowError(\n\n                epochEndTime,\n\n                currentBlockTimestamp\n\n            ));\n\n        }\n\n\n\n        // incremment epoch\n\n        uint256 nextEpoch = currentEpoch.safeAdd(1);\n\n        currentEpoch = nextEpoch;\n\n        currentEpochStartTimeInSeconds = currentBlockTimestamp;\n\n        uint256 earliestEndTimeInSeconds = currentEpochStartTimeInSeconds.safeAdd(getEpochDurationInSeconds());\n\n\n\n        // notify of epoch change\n\n        emit EpochChanged(\n\n            currentEpoch,\n\n            currentEpochStartTimeInSeconds,\n\n            earliestEndTimeInSeconds\n\n        );\n",
          "message": "MixinScheduler._goToNextEpoch (MixinStakeBalances.sol#1526-1554) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- epochEndTime > currentBlockTimestamp (MixinStakeBalances.sol#1535-1540)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": 42,
          "vulnerability_code": "    function rrevert(bytes memory errorData) internal pure {\n\n        assembly {\n\n            revert(add(errorData, 0x20), mload(errorData))\n\n        }\n",
          "message": "LibRichErrors.rrevert uses assembly (MixinStakeBalances.sol#38-42)\n\t- MixinStakeBalances.sol#39-41\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 1902,
          "vulnerability_to_line": 1919,
          "vulnerability_code": "    function _arePointersEqual(\n\n        // solhint-disable-next-line no-unused-vars\n\n        IStructs.StoredBalance storage balancePtrA,\n\n        // solhint-disable-next-line no-unused-vars\n\n        IStructs.StoredBalance storage balancePtrB\n\n    )\n\n        private\n\n        pure\n\n        returns (bool areEqual)\n\n    {\n\n        assembly {\n\n            areEqual := and(\n\n                eq(balancePtrA_slot, balancePtrB_slot),\n\n                eq(balancePtrA_offset, balancePtrB_offset)\n\n            )\n\n        }\n\n        return areEqual;\n",
          "message": "MixinStakeStorage._arePointersEqual uses assembly (MixinStakeBalances.sol#1902-1919)\n\t- MixinStakeBalances.sol#1912-1917\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 912,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 internal cobbDouglasAlphaDenomintor = 6;\n",
          "message": "MixinStorage.cobbDouglasAlphaDenomintor should be constant (MixinStakeBalances.sol#912)\nMixinStorage.cobbDouglasAlphaNumerator should be constant (MixinStakeBalances.sol#909)\nMixinStorage.nextPoolId should be constant (MixinStakeBalances.sol#866)\nMixinStorage.readOnlyProxy should be constant (MixinStakeBalances.sol#837)\nMixinStorage.readOnlyProxyCallee should be constant (MixinStakeBalances.sol#840)\nMixinStorage.stakingContract should be constant (MixinStakeBalances.sol#834)\n"
        },
        {
          "name": "pragma",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": "Different versions of Solidity is used in MixinStakeBalances.sol:\n\t- Version used: ['ABIEncoderV2', '^0.5.9']\n\t- MixinStakeBalances.sol#21 declares pragma solidity^0.5.9\n\t- MixinStakeBalances.sol#47 declares pragma solidity^0.5.9\n\t- MixinStakeBalances.sol#80 declares pragma solidity^0.5.9\n\t- MixinStakeBalances.sol#163 declares pragma solidity^0.5.9\n\t- MixinStakeBalances.sol#272 declares pragma solidity^0.5.9\n\t- MixinStakeBalances.sol#311 declares pragma solidity^0.5.9\n\t- MixinStakeBalances.sol#357 declares pragma solidity^0.5.9\n\t- MixinStakeBalances.sol#372 declares pragma solidity^0.5.9\n\t- MixinStakeBalances.sol#410 declares pragma solidity^0.5.9\n\t- MixinStakeBalances.sol#466 declares pragma solidity^0.5.9\n\t- MixinStakeBalances.sol#562 declares pragma solidity^0.5.9\n\t- MixinStakeBalances.sol#636 declares pragma solidity^0.5.9\n\t- MixinStakeBalances.sol#815 declares pragma solidity^0.5.9\n\t- MixinStakeBalances.sol#935 declares pragma solidity^0.5.9\n\t- MixinStakeBalances.sol#1308 declares pragma solidity^0.5.9\n\t- MixinStakeBalances.sol#1458 declares pragma solidity^0.5.9\n\t- MixinStakeBalances.sol#1577 declares pragma solidity^0.5.9\n\t- MixinStakeBalances.sol#1669 declares pragma solidity^0.5.9\n\t- MixinStakeBalances.sol#1729 declares pragma solidity^0.5.9\n\t- MixinStakeBalances.sol#1942 declares pragma solidity^0.5.9\n\t- MixinStakeBalances.sol#1943 declares pragma experimentalABIEncoderV2\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 430,
          "vulnerability_to_line": 437,
          "vulnerability_code": "    function transferOwnership(address newOwner) public onlyOwner {\n\n        if (newOwner == address(0)) {\n\n            LibRichErrors.rrevert(LibOwnableRichErrors.TransferOwnerToZeroError());\n\n        } else {\n\n            owner = newOwner;\n\n            emit OwnershipTransferred(msg.sender, newOwner);\n\n        }\n",
          "message": "Ownable.transferOwnership (MixinStakeBalances.sol#430-437) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 367,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferOwnership(address newOwner) public;\n",
          "message": "IOwnable.transferOwnership (MixinStakeBalances.sol#367) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1597,
          "vulnerability_to_line": 1603,
          "vulnerability_code": "    function getZrxVault()\n\n        public\n\n        view\n\n        returns (address)\n\n    {\n\n        return address(zrxVault);\n",
          "message": "MixinZrxVault.getZrxVault (MixinStakeBalances.sol#1597-1603) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1966,
          "vulnerability_to_line": 1972,
          "vulnerability_code": "    function getTotalStake(address owner)\n\n        public\n\n        view\n\n        returns (uint256)\n\n    {\n\n        return _balanceOfOwnerInZrxVault(owner);\n",
          "message": "MixinStakeBalances.getTotalStake (MixinStakeBalances.sol#1966-1972) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1977,
          "vulnerability_to_line": 1987,
          "vulnerability_code": "    function getActiveStake(address owner)\n\n        public\n\n        view\n\n        returns (IStructs.StakeBalance memory balance)\n\n    {\n\n        IStructs.StoredBalance memory storedBalance = _loadAndSyncBalance(activeStakeByOwner[owner]);\n\n        return IStructs.StakeBalance({\n\n            currentEpochBalance: storedBalance.currentEpochBalance,\n\n            nextEpochBalance: storedBalance.nextEpochBalance\n\n        });\n",
          "message": "MixinStakeBalances.getActiveStake (MixinStakeBalances.sol#1977-1987) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1992,
          "vulnerability_to_line": 2002,
          "vulnerability_code": "    function getInactiveStake(address owner)\n\n        public\n\n        view\n\n        returns (IStructs.StakeBalance memory balance)\n\n    {\n\n        IStructs.StoredBalance memory storedBalance = _loadAndSyncBalance(inactiveStakeByOwner[owner]);\n\n        return IStructs.StakeBalance({\n\n            currentEpochBalance: storedBalance.currentEpochBalance,\n\n            nextEpochBalance: storedBalance.nextEpochBalance\n\n        });\n",
          "message": "MixinStakeBalances.getInactiveStake (MixinStakeBalances.sol#1992-2002) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 2007,
          "vulnerability_to_line": 2013,
          "vulnerability_code": "    function getWithdrawableStake(address owner)\n\n        public\n\n        view\n\n        returns (uint256)\n\n    {\n\n        return _computeWithdrawableStake(owner, withdrawableStakeByOwner[owner]);\n",
          "message": "MixinStakeBalances.getWithdrawableStake (MixinStakeBalances.sol#2007-2013) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 2018,
          "vulnerability_to_line": 2028,
          "vulnerability_code": "    function getStakeDelegatedByOwner(address owner)\n\n        public\n\n        view\n\n        returns (IStructs.StakeBalance memory balance)\n\n    {\n\n        IStructs.StoredBalance memory storedBalance = _loadAndSyncBalance(delegatedStakeByOwner[owner]);\n\n        return IStructs.StakeBalance({\n\n            currentEpochBalance: storedBalance.currentEpochBalance,\n\n            nextEpochBalance: storedBalance.nextEpochBalance\n\n        });\n",
          "message": "MixinStakeBalances.getStakeDelegatedByOwner (MixinStakeBalances.sol#2018-2028) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 2034,
          "vulnerability_to_line": 2044,
          "vulnerability_code": "    function getStakeDelegatedToPoolByOwner(address owner, bytes32 poolId)\n\n        public\n\n        view\n\n        returns (IStructs.StakeBalance memory balance)\n\n    {\n\n        IStructs.StoredBalance memory storedBalance = _loadAndSyncBalance(delegatedStakeToPoolByOwner[owner][poolId]);\n\n        return IStructs.StakeBalance({\n\n            currentEpochBalance: storedBalance.currentEpochBalance,\n\n            nextEpochBalance: storedBalance.nextEpochBalance\n\n        });\n",
          "message": "MixinStakeBalances.getStakeDelegatedToPoolByOwner (MixinStakeBalances.sol#2034-2044) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 2049,
          "vulnerability_to_line": 2059,
          "vulnerability_code": "    function getTotalStakeDelegatedToPool(bytes32 poolId)\n\n        public\n\n        view\n\n        returns (IStructs.StakeBalance memory balance)\n\n    {\n\n        IStructs.StoredBalance memory storedBalance = _loadAndSyncBalance(delegatedStakeByPoolId[poolId]);\n\n        return IStructs.StakeBalance({\n\n            currentEpochBalance: storedBalance.currentEpochBalance,\n\n            nextEpochBalance: storedBalance.nextEpochBalance\n\n        });\n",
          "message": "MixinStakeBalances.getTotalStakeDelegatedToPool (MixinStakeBalances.sol#2049-2059) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": "Detected issues with version pragma in MixinStakeBalances.sol:\n\t- pragma solidity^0.5.9 (MixinStakeBalances.sol#21): it allows old versions\n\t- pragma solidity^0.5.9 (MixinStakeBalances.sol#47): it allows old versions\n\t- pragma solidity^0.5.9 (MixinStakeBalances.sol#80): it allows old versions\n\t- pragma solidity^0.5.9 (MixinStakeBalances.sol#163): it allows old versions\n\t- pragma solidity^0.5.9 (MixinStakeBalances.sol#272): it allows old versions\n\t- pragma solidity^0.5.9 (MixinStakeBalances.sol#311): it allows old versions\n\t- pragma solidity^0.5.9 (MixinStakeBalances.sol#357): it allows old versions\n\t- pragma solidity^0.5.9 (MixinStakeBalances.sol#372): it allows old versions\n\t- pragma solidity^0.5.9 (MixinStakeBalances.sol#410): it allows old versions\n\t- pragma solidity^0.5.9 (MixinStakeBalances.sol#466): it allows old versions\n\t- pragma solidity^0.5.9 (MixinStakeBalances.sol#562): it allows old versions\n\t- pragma solidity^0.5.9 (MixinStakeBalances.sol#636): it allows old versions\n\t- pragma solidity^0.5.9 (MixinStakeBalances.sol#815): it allows old versions\n\t- pragma solidity^0.5.9 (MixinStakeBalances.sol#935): it allows old versions\n\t- pragma solidity^0.5.9 (MixinStakeBalances.sol#1308): it allows old versions\n\t- pragma solidity^0.5.9 (MixinStakeBalances.sol#1458): it allows old versions\n\t- pragma solidity^0.5.9 (MixinStakeBalances.sol#1577): it allows old versions\n\t- pragma solidity^0.5.9 (MixinStakeBalances.sol#1669): it allows old versions\n\t- pragma solidity^0.5.9 (MixinStakeBalances.sol#1729): it allows old versions\n\t- pragma solidity^0.5.9 (MixinStakeBalances.sol#1942): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": 34,
          "vulnerability_code": "    function StandardError(string memory message) internal pure returns (bytes memory) {\n\n        return abi.encodeWithSelector(STANDARD_ERROR_SELECTOR, bytes(message));\n",
          "message": "Function 'LibRichErrors.StandardError' (MixinStakeBalances.sol#32-34) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": 71,
          "vulnerability_code": "    function Uint256BinOpError(BinOpErrorCodes errorCode, uint256 a, uint256 b) internal pure returns (bytes memory) {\n\n        return abi.encodeWithSelector(UINT256_BINOP_ERROR_SELECTOR, errorCode, a, b);\n",
          "message": "Function 'LibSafeMathRichErrors.Uint256BinOpError' (MixinStakeBalances.sol#69-71) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": 75,
          "vulnerability_code": "    function Uint256DowncastError(DowncastErrorCodes errorCode, uint256 a) internal pure returns (bytes memory) {\n\n        return abi.encodeWithSelector(UINT256_DOWNCAST_ERROR_SELECTOR, errorCode, a);\n",
          "message": "Function 'LibSafeMathRichErrors.Uint256DowncastError' (MixinStakeBalances.sol#73-75) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 381,
          "vulnerability_to_line": 383,
          "vulnerability_code": "    function OnlyOwnerError(address sender, address owner) internal pure returns (bytes memory) {\n\n        return abi.encodeWithSelector(ONLY_OWNER_ERROR_SELECTOR, sender, owner);\n",
          "message": "Function 'LibOwnableRichErrors.OnlyOwnerError' (MixinStakeBalances.sol#381-383) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 385,
          "vulnerability_to_line": 387,
          "vulnerability_code": "    function TransferOwnerToZeroError() internal pure returns (bytes memory) {\n\n        return TRANSFER_OWNER_TO_ZERO_ERROR_BYTES;\n",
          "message": "Function 'LibOwnableRichErrors.TransferOwnerToZeroError' (MixinStakeBalances.sol#385-387) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 439,
          "vulnerability_to_line": 443,
          "vulnerability_code": "    function _assertSenderIsOwner() internal view {\n\n        if (msg.sender != owner) {\n\n            LibRichErrors.rrevert(LibOwnableRichErrors.OnlyOwnerError(msg.sender, owner));\n\n        }\n",
          "message": "Function 'Ownable._assertSenderIsOwner' (MixinStakeBalances.sol#439-443) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1030,
          "vulnerability_to_line": 1043,
          "vulnerability_code": "    function MiscalculatedRewardsError(\n\n        uint256 totalRewardsPaid,\n\n        uint256 initialContractBalance\n\n    )\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        return abi.encodeWithSelector(\n\n            MISCALCULATED_REWARDS_ERROR_SELECTOR,\n\n            totalRewardsPaid,\n\n            initialContractBalance\n\n        );\n",
          "message": "Function 'LibStakingRichErrors.MiscalculatedRewardsError' (MixinStakeBalances.sol#1030-1043) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1045,
          "vulnerability_to_line": 1056,
          "vulnerability_code": "    function OnlyCallableByExchangeError(\n\n        address senderAddress\n\n    )\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        return abi.encodeWithSelector(\n\n            ONLY_CALLABLE_BY_EXCHANGE_ERROR_SELECTOR,\n\n            senderAddress\n\n        );\n",
          "message": "Function 'LibStakingRichErrors.OnlyCallableByExchangeError' (MixinStakeBalances.sol#1045-1056) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1058,
          "vulnerability_to_line": 1069,
          "vulnerability_code": "    function ExchangeAddressAlreadyRegisteredError(\n\n        address exchangeAddress\n\n    )\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        return abi.encodeWithSelector(\n\n            EXCHANGE_ADDRESS_ALREADY_REGISTERED_ERROR_SELECTOR,\n\n            exchangeAddress\n\n        );\n",
          "message": "Function 'LibStakingRichErrors.ExchangeAddressAlreadyRegisteredError' (MixinStakeBalances.sol#1058-1069) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1071,
          "vulnerability_to_line": 1082,
          "vulnerability_code": "    function ExchangeAddressNotRegisteredError(\n\n        address exchangeAddress\n\n    )\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        return abi.encodeWithSelector(\n\n            EXCHANGE_ADDRESS_NOT_REGISTERED_ERROR_SELECTOR,\n\n            exchangeAddress\n\n        );\n",
          "message": "Function 'LibStakingRichErrors.ExchangeAddressNotRegisteredError' (MixinStakeBalances.sol#1071-1082) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1084,
          "vulnerability_to_line": 1097,
          "vulnerability_code": "    function InsufficientBalanceError(\n\n        uint256 amount,\n\n        uint256 balance\n\n    )\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        return abi.encodeWithSelector(\n\n            INSUFFICIENT_BALANCE_ERROR_SELECTOR,\n\n            amount,\n\n            balance\n\n        );\n",
          "message": "Function 'LibStakingRichErrors.InsufficientBalanceError' (MixinStakeBalances.sol#1084-1097) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1099,
          "vulnerability_to_line": 1112,
          "vulnerability_code": "    function OnlyCallableByPoolOperatorError(\n\n        address senderAddress,\n\n        address poolOperatorAddress\n\n    )\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        return abi.encodeWithSelector(\n\n            ONLY_CALLABLE_BY_POOL_OPERATOR_ERROR_SELECTOR,\n\n            senderAddress,\n\n            poolOperatorAddress\n\n        );\n",
          "message": "Function 'LibStakingRichErrors.OnlyCallableByPoolOperatorError' (MixinStakeBalances.sol#1099-1112) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1114,
          "vulnerability_to_line": 1129,
          "vulnerability_code": "    function OnlyCallableByPoolOperatorOrMakerError(\n\n        address senderAddress,\n\n        address poolOperatorAddress,\n\n        address makerAddress\n\n    )\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        return abi.encodeWithSelector(\n\n            ONLY_CALLABLE_BY_POOL_OPERATOR_OR_MAKER_ERROR_SELECTOR,\n\n            senderAddress,\n\n            poolOperatorAddress,\n\n            makerAddress\n\n        );\n",
          "message": "Function 'LibStakingRichErrors.OnlyCallableByPoolOperatorOrMakerError' (MixinStakeBalances.sol#1114-1129) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1131,
          "vulnerability_to_line": 1146,
          "vulnerability_code": "    function MakerPoolAssignmentError(\n\n        MakerPoolAssignmentErrorCodes errorCode,\n\n        address makerAddress,\n\n        bytes32 poolId\n\n    )\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        return abi.encodeWithSelector(\n\n            MAKER_POOL_ASSIGNMENT_ERROR_SELECTOR,\n\n            errorCode,\n\n            makerAddress,\n\n            poolId\n\n        );\n",
          "message": "Function 'LibStakingRichErrors.MakerPoolAssignmentError' (MixinStakeBalances.sol#1131-1146) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1148,
          "vulnerability_to_line": 1161,
          "vulnerability_code": "    function WithdrawAmountExceedsMemberBalanceError(\n\n        uint256 withdrawAmount,\n\n        uint256 balance\n\n    )\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        return abi.encodeWithSelector(\n\n            WITHDRAW_AMOUNT_EXCEEDS_MEMBER_BALANCE_ERROR_SELECTOR,\n\n            withdrawAmount,\n\n            balance\n\n        );\n",
          "message": "Function 'LibStakingRichErrors.WithdrawAmountExceedsMemberBalanceError' (MixinStakeBalances.sol#1148-1161) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1163,
          "vulnerability_to_line": 1176,
          "vulnerability_code": "    function BlockTimestampTooLowError(\n\n        uint256 epochEndTime,\n\n        uint256 currentBlockTimestamp\n\n    )\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        return abi.encodeWithSelector(\n\n            BLOCK_TIMESTAMP_TOO_LOW_ERROR_SELECTOR,\n\n            epochEndTime,\n\n            currentBlockTimestamp\n\n        );\n",
          "message": "Function 'LibStakingRichErrors.BlockTimestampTooLowError' (MixinStakeBalances.sol#1163-1176) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1178,
          "vulnerability_to_line": 1189,
          "vulnerability_code": "    function OnlyCallableByStakingContractError(\n\n        address senderAddress\n\n    )\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        return abi.encodeWithSelector(\n\n            ONLY_CALLABLE_BY_STAKING_CONTRACT_ERROR_SELECTOR,\n\n            senderAddress\n\n        );\n",
          "message": "Function 'LibStakingRichErrors.OnlyCallableByStakingContractError' (MixinStakeBalances.sol#1178-1189) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1191,
          "vulnerability_to_line": 1197,
          "vulnerability_code": "    function OnlyCallableIfInCatastrophicFailureError()\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        return ONLY_CALLABLE_IF_IN_CATASTROPHIC_FAILURE_ERROR;\n",
          "message": "Function 'LibStakingRichErrors.OnlyCallableIfInCatastrophicFailureError' (MixinStakeBalances.sol#1191-1197) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1199,
          "vulnerability_to_line": 1205,
          "vulnerability_code": "    function OnlyCallableIfNotInCatastrophicFailureError()\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        return ONLY_CALLABLE_IF_NOT_IN_CATASTROPHIC_FAILURE_ERROR;\n",
          "message": "Function 'LibStakingRichErrors.OnlyCallableIfNotInCatastrophicFailureError' (MixinStakeBalances.sol#1199-1205) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1207,
          "vulnerability_to_line": 1220,
          "vulnerability_code": "    function AmountExceedsBalanceOfPoolError(\n\n        uint256 amount,\n\n        uint96 poolBalance\n\n    )\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        return abi.encodeWithSelector(\n\n            AMOUNT_EXCEEDS_BALANCE_OF_POOL_ERROR_SELECTOR,\n\n            amount,\n\n            poolBalance\n\n        );\n",
          "message": "Function 'LibStakingRichErrors.AmountExceedsBalanceOfPoolError' (MixinStakeBalances.sol#1207-1220) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1222,
          "vulnerability_to_line": 1235,
          "vulnerability_code": "    function InvalidPoolOperatorShareError(\n\n        bytes32 poolId,\n\n        uint32 poolOperatorShare\n\n    )\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        return abi.encodeWithSelector(\n\n            INVALID_POOL_OPERATOR_SHARE_ERROR_SELECTOR,\n\n            poolId,\n\n            poolOperatorShare\n\n        );\n",
          "message": "Function 'LibStakingRichErrors.InvalidPoolOperatorShareError' (MixinStakeBalances.sol#1222-1235) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1237,
          "vulnerability_to_line": 1248,
          "vulnerability_code": "    function PoolAlreadyExistsError(\n\n        bytes32 poolId\n\n    )\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        return abi.encodeWithSelector(\n\n            POOL_ALREADY_EXISTS_ERROR_SELECTOR,\n\n            poolId\n\n        );\n",
          "message": "Function 'LibStakingRichErrors.PoolAlreadyExistsError' (MixinStakeBalances.sol#1237-1248) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1250,
          "vulnerability_to_line": 1263,
          "vulnerability_code": "    function InvalidCobbDouglasAlphaError(\n\n        uint256 numerator,\n\n        uint256 denominator\n\n    )\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        return abi.encodeWithSelector(\n\n            INVALID_COBB_DOUGLAS_ALPHA_ERROR_SELECTOR,\n\n            numerator,\n\n            denominator\n\n        );\n",
          "message": "Function 'LibStakingRichErrors.InvalidCobbDouglasAlphaError' (MixinStakeBalances.sol#1250-1263) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1265,
          "vulnerability_to_line": 1273,
          "vulnerability_code": "    function EthVaultNotSetError()\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        return abi.encodeWithSelector(\n\n            ETH_VAULT_NOT_SET_ERROR_SELECTOR\n\n        );\n",
          "message": "Function 'LibStakingRichErrors.EthVaultNotSetError' (MixinStakeBalances.sol#1265-1273) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1275,
          "vulnerability_to_line": 1283,
          "vulnerability_code": "    function RewardVaultNotSetError()\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        return abi.encodeWithSelector(\n\n            REWARD_VAULT_NOT_SET_ERROR_SELECTOR\n\n        );\n",
          "message": "Function 'LibStakingRichErrors.RewardVaultNotSetError' (MixinStakeBalances.sol#1275-1283) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1285,
          "vulnerability_to_line": 1294,
          "vulnerability_code": "    function InvalidStakeStatusError(uint256 status)\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        return abi.encodeWithSelector(\n\n            INVALID_STAKE_STATUS_ERROR_SELECTOR,\n\n            status\n\n        );\n",
          "message": "Function 'LibStakingRichErrors.InvalidStakeStatusError' (MixinStakeBalances.sol#1285-1294) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1296,
          "vulnerability_to_line": 1302,
          "vulnerability_code": "    function ProxyDestinationCannotBeNil()\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        return PROXY_DESTINATION_CANNOT_BE_NIL;\n",
          "message": "Function 'LibStakingRichErrors.ProxyDestinationCannotBeNil' (MixinStakeBalances.sol#1296-1302) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1526,
          "vulnerability_to_line": 1554,
          "vulnerability_code": "    function _goToNextEpoch()\n\n        internal\n\n    {\n\n        // get current timestamp\n\n        // solhint-disable-next-line not-rely-on-time\n\n        uint256 currentBlockTimestamp = block.timestamp;\n\n\n\n        // validate that we can increment the current epoch\n\n        uint256 epochEndTime = getCurrentEpochEarliestEndTimeInSeconds();\n\n        if (epochEndTime > currentBlockTimestamp) {\n\n            LibRichErrors.rrevert(LibStakingRichErrors.BlockTimestampTooLowError(\n\n                epochEndTime,\n\n                currentBlockTimestamp\n\n            ));\n\n        }\n\n\n\n        // incremment epoch\n\n        uint256 nextEpoch = currentEpoch.safeAdd(1);\n\n        currentEpoch = nextEpoch;\n\n        currentEpochStartTimeInSeconds = currentBlockTimestamp;\n\n        uint256 earliestEndTimeInSeconds = currentEpochStartTimeInSeconds.safeAdd(getEpochDurationInSeconds());\n\n\n\n        // notify of epoch change\n\n        emit EpochChanged(\n\n            currentEpoch,\n\n            currentEpochStartTimeInSeconds,\n\n            earliestEndTimeInSeconds\n\n        );\n",
          "message": "Function 'MixinScheduler._goToNextEpoch' (MixinStakeBalances.sol#1526-1554) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1608,
          "vulnerability_to_line": 1617,
          "vulnerability_code": "    function _depositFromOwnerIntoZrxVault(address owner, uint256 amount)\n\n        internal\n\n    {\n\n        IZrxVault _zrxVault = zrxVault;\n\n        require(\n\n            address(_zrxVault) != address(0),\n\n            \"INVALID_ZRX_VAULT\"\n\n        );\n\n        _zrxVault.depositFrom(owner, amount);\n",
          "message": "Function 'MixinZrxVault._depositFromOwnerIntoZrxVault' (MixinStakeBalances.sol#1608-1617) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1622,
          "vulnerability_to_line": 1631,
          "vulnerability_code": "    function _withdrawToOwnerFromZrxVault(address owner, uint256 amount)\n\n        internal\n\n    {\n\n        IZrxVault _zrxVault = zrxVault;\n\n        require(\n\n            address(_zrxVault) != address(0),\n\n            \"INVALID_ZRX_VAULT\"\n\n        );\n\n        _zrxVault.withdrawFrom(owner, amount);\n",
          "message": "Function 'MixinZrxVault._withdrawToOwnerFromZrxVault' (MixinStakeBalances.sol#1622-1631) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1635,
          "vulnerability_to_line": 1646,
          "vulnerability_code": "    function _balanceOfOwnerInZrxVault(address owner)\n\n        internal\n\n        view\n\n        returns (uint256)\n\n    {\n\n        IZrxVault _zrxVault = zrxVault;\n\n        require(\n\n            address(_zrxVault) != address(0),\n\n            \"INVALID_ZRX_VAULT\"\n\n        );\n\n        return _zrxVault.balanceOf(owner);\n",
          "message": "Function 'MixinZrxVault._balanceOfOwnerInZrxVault' (MixinStakeBalances.sol#1635-1646) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1752,
          "vulnerability_to_line": 1785,
          "vulnerability_code": "    function _moveStake(\n\n        IStructs.StoredBalance storage fromPtr,\n\n        IStructs.StoredBalance storage toPtr,\n\n        uint256 amount\n\n    )\n\n        internal\n\n    {\n\n        // do nothing if pointers are equal\n\n        if (_arePointersEqual(fromPtr, toPtr)) {\n\n            return;\n\n        }\n\n\n\n        // load balance from storage and synchronize it\n\n        IStructs.StoredBalance memory from = _loadAndSyncBalance(fromPtr);\n\n        IStructs.StoredBalance memory to = _loadAndSyncBalance(toPtr);\n\n\n\n        // sanity check on balance\n\n        if (amount > from.nextEpochBalance) {\n\n            LibRichErrors.rrevert(\n\n                LibStakingRichErrors.InsufficientBalanceError(\n\n                    amount,\n\n                    from.nextEpochBalance\n\n                )\n\n            );\n\n        }\n\n\n\n        // move stake for next epoch\n\n        from.nextEpochBalance = uint256(from.nextEpochBalance).safeSub(amount).downcastToUint96();\n\n        to.nextEpochBalance = uint256(to.nextEpochBalance).safeAdd(amount).downcastToUint96();\n\n\n\n        // update state in storage\n\n        _storeBalance(fromPtr, from);\n\n        _storeBalance(toPtr, to);\n",
          "message": "Function 'MixinStakeStorage._moveStake' (MixinStakeBalances.sol#1752-1785) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1793,
          "vulnerability_to_line": 1807,
          "vulnerability_code": "    function _loadAndSyncBalance(IStructs.StoredBalance storage balancePtr)\n\n        internal\n\n        view\n\n        returns (IStructs.StoredBalance memory balance)\n\n    {\n\n        // load from storage\n\n        balance = balancePtr;\n\n        // sync\n\n        uint256 currentEpoch = getCurrentEpoch();\n\n        if (currentEpoch > balance.currentEpoch) {\n\n            balance.currentEpoch = currentEpoch.downcastToUint64();\n\n            balance.currentEpochBalance = balance.nextEpochBalance;\n\n        }\n\n        return balance;\n",
          "message": "Function 'MixinStakeStorage._loadAndSyncBalance' (MixinStakeBalances.sol#1793-1807) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1815,
          "vulnerability_to_line": 1822,
          "vulnerability_code": "    function _loadUnsyncedBalance(IStructs.StoredBalance storage balancePtr)\n\n        internal\n\n        view\n\n        returns (IStructs.StoredBalance memory balance)\n\n    {\n\n        balance = balancePtr;\n\n        return balance;\n",
          "message": "Function 'MixinStakeStorage._loadUnsyncedBalance' (MixinStakeBalances.sol#1815-1822) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1827,
          "vulnerability_to_line": 1837,
          "vulnerability_code": "    function _incrementCurrentAndNextBalance(IStructs.StoredBalance storage balancePtr, uint256 amount)\n\n        internal\n\n    {\n\n        // Remove stake from balance\n\n        IStructs.StoredBalance memory balance = _loadAndSyncBalance(balancePtr);\n\n        balance.nextEpochBalance = uint256(balance.nextEpochBalance).safeAdd(amount).downcastToUint96();\n\n        balance.currentEpochBalance = uint256(balance.currentEpochBalance).safeAdd(amount).downcastToUint96();\n\n\n\n        // update state\n\n        _storeBalance(balancePtr, balance);\n",
          "message": "Function 'MixinStakeStorage._incrementCurrentAndNextBalance' (MixinStakeBalances.sol#1827-1837) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1842,
          "vulnerability_to_line": 1852,
          "vulnerability_code": "    function _decrementCurrentAndNextBalance(IStructs.StoredBalance storage balancePtr, uint256 amount)\n\n        internal\n\n    {\n\n        // Remove stake from balance\n\n        IStructs.StoredBalance memory balance = _loadAndSyncBalance(balancePtr);\n\n        balance.nextEpochBalance = uint256(balance.nextEpochBalance).safeSub(amount).downcastToUint96();\n\n        balance.currentEpochBalance = uint256(balance.currentEpochBalance).safeSub(amount).downcastToUint96();\n\n\n\n        // update state\n\n        _storeBalance(balancePtr, balance);\n",
          "message": "Function 'MixinStakeStorage._decrementCurrentAndNextBalance' (MixinStakeBalances.sol#1842-1852) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1857,
          "vulnerability_to_line": 1866,
          "vulnerability_code": "    function _incrementNextBalance(IStructs.StoredBalance storage balancePtr, uint256 amount)\n\n        internal\n\n    {\n\n        // Add stake to balance\n\n        IStructs.StoredBalance memory balance = _loadAndSyncBalance(balancePtr);\n\n        balance.nextEpochBalance = uint256(balance.nextEpochBalance).safeAdd(amount).downcastToUint96();\n\n\n\n        // update state\n\n        _storeBalance(balancePtr, balance);\n",
          "message": "Function 'MixinStakeStorage._incrementNextBalance' (MixinStakeBalances.sol#1857-1866) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1871,
          "vulnerability_to_line": 1880,
          "vulnerability_code": "    function _decrementNextBalance(IStructs.StoredBalance storage balancePtr, uint256 amount)\n\n        internal\n\n    {\n\n        // Remove stake from balance\n\n        IStructs.StoredBalance memory balance = _loadAndSyncBalance(balancePtr);\n\n        balance.nextEpochBalance = uint256(balance.nextEpochBalance).safeSub(amount).downcastToUint96();\n\n\n\n        // update state\n\n        _storeBalance(balancePtr, balance);\n",
          "message": "Function 'MixinStakeStorage._decrementNextBalance' (MixinStakeBalances.sol#1871-1880) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1885,
          "vulnerability_to_line": 1896,
          "vulnerability_code": "    function _storeBalance(\n\n        IStructs.StoredBalance storage balancePtr,\n\n        IStructs.StoredBalance memory balance\n\n    )\n\n        private\n\n    {\n\n        // note - this compresses into a single `sstore` when optimizations are enabled,\n\n        // since the StakeBalance struct occupies a single word of storage.\n\n        balancePtr.currentEpoch = balance.currentEpoch;\n\n        balancePtr.nextEpochBalance = balance.nextEpochBalance;\n\n        balancePtr.currentEpochBalance = balance.currentEpochBalance;\n",
          "message": "Function 'MixinStakeStorage._storeBalance' (MixinStakeBalances.sol#1885-1896) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1902,
          "vulnerability_to_line": 1919,
          "vulnerability_code": "    function _arePointersEqual(\n\n        // solhint-disable-next-line no-unused-vars\n\n        IStructs.StoredBalance storage balancePtrA,\n\n        // solhint-disable-next-line no-unused-vars\n\n        IStructs.StoredBalance storage balancePtrB\n\n    )\n\n        private\n\n        pure\n\n        returns (bool areEqual)\n\n    {\n\n        assembly {\n\n            areEqual := and(\n\n                eq(balancePtrA_slot, balancePtrB_slot),\n\n                eq(balancePtrA_offset, balancePtrB_offset)\n\n            )\n\n        }\n\n        return areEqual;\n",
          "message": "Function 'MixinStakeStorage._arePointersEqual' (MixinStakeBalances.sol#1902-1919) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2065,
          "vulnerability_to_line": 2080,
          "vulnerability_code": "    function _computeWithdrawableStake(address owner, uint256 lastStoredWithdrawableStake)\n\n        internal\n\n        view\n\n        returns (uint256)\n\n    {\n\n        // stake cannot be withdrawn if it has been reallocated for the `next` epoch;\n\n        // so the upper bound of withdrawable stake is always limited by the value of `next`.\n\n        IStructs.StoredBalance memory storedBalance = _loadUnsyncedBalance(inactiveStakeByOwner[owner]);\n\n        if (storedBalance.currentEpoch == currentEpoch) {\n\n            return LibSafeMath.min256(storedBalance.nextEpochBalance, lastStoredWithdrawableStake);\n\n        } else if (uint256(storedBalance.currentEpoch).safeAdd(1) == currentEpoch) {\n\n            return LibSafeMath.min256(storedBalance.nextEpochBalance, storedBalance.currentEpochBalance);\n\n        } else {\n\n            return storedBalance.nextEpochBalance;\n\n        }\n",
          "message": "Function 'MixinStakeBalances._computeWithdrawableStake' (MixinStakeBalances.sol#2065-2080) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 281,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 constant internal TIMELOCK_DURATION_IN_EPOCHS = 3;\n",
          "message": "MixinDeploymentConstants.TIMELOCK_DURATION_IN_EPOCHS (MixinStakeBalances.sol#281) is never used in MixinStakeBalances\nMixinDeploymentConstants.REWARD_DELEGATED_STAKE_WEIGHT (MixinStakeBalances.sol#284) is never used in MixinStakeBalances\nMixinDeploymentConstants.CHAIN_ID (MixinStakeBalances.sol#286) is never used in MixinStakeBalances\nMixinDeploymentConstants.MAX_MAKERS_IN_POOL (MixinStakeBalances.sol#288) is never used in MixinStakeBalances\nMixinConstants.PPM_DENOMINATOR (MixinStakeBalances.sol#316) is never used in MixinStakeBalances\nMixinConstants.INITIAL_POOL_ID (MixinStakeBalances.sol#319) is never used in MixinStakeBalances\nMixinConstants.POOL_ID_INCREMENT_AMOUNT (MixinStakeBalances.sol#322) is never used in MixinStakeBalances\nMixinConstants.NIL_POOL_ID (MixinStakeBalances.sol#324) is never used in MixinStakeBalances\nMixinConstants.NIL_ADDRESS (MixinStakeBalances.sol#326) is never used in MixinStakeBalances\nMixinConstants.UNKNOWN_STAKING_POOL_ID (MixinStakeBalances.sol#328) is never used in MixinStakeBalances\nMixinConstants.INITIAL_EPOCH (MixinStakeBalances.sol#330) is never used in MixinStakeBalances\nMixinConstants.INITIAL_TIMELOCK_PERIOD (MixinStakeBalances.sol#332) is never used in MixinStakeBalances\nMixinConstants.MIN_TOKEN_VALUE (MixinStakeBalances.sol#334) is never used in MixinStakeBalances\nMixinStorage.stakingContract (MixinStakeBalances.sol#834) is never used in MixinStakeBalances\nMixinStorage.readOnlyProxy (MixinStakeBalances.sol#837) is never used in MixinStakeBalances\nMixinStorage.readOnlyProxyCallee (MixinStakeBalances.sol#840) is never used in MixinStakeBalances\nMixinStorage.nextPoolId (MixinStakeBalances.sol#866) is never used in MixinStakeBalances\nMixinStorage.poolById (MixinStakeBalances.sol#869) is never used in MixinStakeBalances\nMixinStorage.poolJoinedByMakerAddress (MixinStakeBalances.sol#873) is never used in MixinStakeBalances\nMixinStorage.numMakersByPoolId (MixinStakeBalances.sol#876) is never used in MixinStakeBalances\nMixinStorage.protocolFeesThisEpochByPool (MixinStakeBalances.sol#885) is never used in MixinStakeBalances\nMixinStorage.activePoolsThisEpoch (MixinStakeBalances.sol#888) is never used in MixinStakeBalances\nMixinStorage.cumulativeRewardsByPool (MixinStakeBalances.sol#891) is never used in MixinStakeBalances\nMixinStorage.cumulativeRewardsByPoolLastStored (MixinStakeBalances.sol#894) is never used in MixinStakeBalances\nMixinStorage.validExchanges (MixinStakeBalances.sol#897) is never used in MixinStakeBalances\nMixinStorage.ethVault (MixinStakeBalances.sol#903) is never used in MixinStakeBalances\nMixinStorage.rewardVault (MixinStakeBalances.sol#906) is never used in MixinStakeBalances\nMixinStorage.cobbDouglasAlphaNumerator (MixinStakeBalances.sol#909) is never used in MixinStakeBalances\nMixinStorage.cobbDouglasAlphaDenomintor (MixinStakeBalances.sol#912) is never used in MixinStakeBalances\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 326,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address constant internal NIL_ADDRESS = 0x0000000000000000000000000000000000000000;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR = 0xe946c1bb;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR = 0xc996af7b;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 376,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 internal constant ONLY_OWNER_ERROR_SELECTOR = 0x1de45ad1;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 940,
          "vulnerability_to_line": null,
          "vulnerability_code": "        0xf7806c4e;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 944,
          "vulnerability_to_line": null,
          "vulnerability_code": "        0xb56d2df0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 948,
          "vulnerability_to_line": null,
          "vulnerability_code": "        0xc87a78b7;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 952,
          "vulnerability_to_line": null,
          "vulnerability_code": "        0x7dc025b0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 956,
          "vulnerability_to_line": null,
          "vulnerability_code": "        0x84c8b7c9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 960,
          "vulnerability_to_line": null,
          "vulnerability_code": "        0x6cfa0c22;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 964,
          "vulnerability_to_line": null,
          "vulnerability_code": "        0x7d9e1c10;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 968,
          "vulnerability_to_line": null,
          "vulnerability_code": "        0x69945e3f;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 972,
          "vulnerability_to_line": null,
          "vulnerability_code": "        0xfc9c065f;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 976,
          "vulnerability_to_line": null,
          "vulnerability_code": "        0xa6bcde47;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 980,
          "vulnerability_to_line": null,
          "vulnerability_code": "        0xca1d07a2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 992,
          "vulnerability_to_line": null,
          "vulnerability_code": "        0x4c5c09dd;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 996,
          "vulnerability_to_line": null,
          "vulnerability_code": "        0x70f55b5a;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 1000,
          "vulnerability_to_line": null,
          "vulnerability_code": "        0x2a5e4dcf;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 1004,
          "vulnerability_to_line": null,
          "vulnerability_code": "        0x8f8e73de;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 1008,
          "vulnerability_to_line": null,
          "vulnerability_code": "        0xa067f596;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 1012,
          "vulnerability_to_line": null,
          "vulnerability_code": "        0xe6976d70;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 1016,
          "vulnerability_to_line": null,
          "vulnerability_code": "        0xb7161acd;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 1588,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setZrxVault(address zrxVaultAddress)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 163,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 272,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 311,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 357,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 372,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 410,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 466,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 562,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 636,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 815,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 935,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1308,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1458,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1577,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1669,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1729,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1942,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function rrevert(bytes memory errorData) internal pure {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 1902,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _arePointersEqual(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 726,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1912,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}