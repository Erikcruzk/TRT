{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.value != 0, \"Zero value should not be sent to this contract.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(address(this).balance == msg.value, \"A full refund was not provided by `refundNonzeroBalance`\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 283,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(balanceWithinCall == msg.value, \"Incorrect inner balance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 310,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(balanceWithinCall == msg.value, \"Incorrect inner balance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(address(this).balance == 0, \"Incorrect balance for TestRefundableReceiver\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 335,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(address(testRefundable).balance == msg.value, \"Incorrect balance for TestRefundable\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 338,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(address(this).balance == msg.value, \"Incorrect balance for TestRefundableReceiver\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 341,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(address(testRefundable).balance == 0, \"Incorrect balance for TestRefundable\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 346,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(testRefundable.getShouldNotRefund() == shouldNotRefund, \"Incorrect shouldNotRefund value\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.value != 0, \"Zero value should not be sent to this contract.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(address(this).balance == msg.value, \"A full refund was not provided by `refundNonzeroBalance`\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(address(this).balance == 0, \"Incorrect balance for TestRefundableReceiver\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 335,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(address(testRefundable).balance == msg.value, \"Incorrect balance for TestRefundable\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 338,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(address(this).balance == msg.value, \"Incorrect balance for TestRefundableReceiver\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 341,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(address(testRefundable).balance == 0, \"Incorrect balance for TestRefundable\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_13"
      ],
      "vulnerability_findings": [
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": 59,
          "vulnerability_code": "    function _refundNonZeroBalance()\n\n        internal\n\n    {\n\n        uint256 balance = address(this).balance;\n\n        if (balance > 0) {\n\n            msg.sender.transfer(balance);\n\n        }\n",
          "message": "Refundable._refundNonZeroBalance (TestRefundableReceiver.sol#52-59) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(balance) (TestRefundableReceiver.sol#57)\n"
        },
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 321,
          "vulnerability_to_line": 350,
          "vulnerability_code": "    function requireCorrectFinalBalancesAndState(\n\n        TestRefundable testRefundable,\n\n        bool shouldNotRefund\n\n    )\n\n        internal\n\n    {\n\n        // If `shouldNotRefund` was true, then this contract should have a balance of zero,\n\n        // and `testRefundable` should have a balance of `msg.value`. Otherwise, the opposite\n\n        // should be true.\n\n        if (shouldNotRefund) {\n\n            // Ensure that this contract's balance is zero.\n\n            require(address(this).balance == 0, \"Incorrect balance for TestRefundableReceiver\");\n\n\n\n            // Ensure that the other contract's balance is equal to `msg.value`.\n\n            require(address(testRefundable).balance == msg.value, \"Incorrect balance for TestRefundable\");\n\n        } else {\n\n            // Ensure that this contract's balance is `msg.value`.\n\n            require(address(this).balance == msg.value, \"Incorrect balance for TestRefundableReceiver\");\n\n\n\n            // Ensure that the other contract's balance is equal to zero.\n\n            require(address(testRefundable).balance == 0, \"Incorrect balance for TestRefundable\");\n\n        }\n\n\n\n        // Ensure that `shouldNotRefund` in TestRefundable is set to the parameter `shouldNotRefund`\n\n        // after the call (i.e. the value didn't change during the function call).\n\n        require(testRefundable.getShouldNotRefund() == shouldNotRefund, \"Incorrect shouldNotRefund value\");\n\n\n\n        // Drain the contract of funds so that subsequent tests don't have to account for leftover ether.\n\n        msg.sender.transfer(address(this).balance);\n",
          "message": "TestRefundableReceiver.requireCorrectFinalBalancesAndState (TestRefundableReceiver.sol#321-350) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(address(this).balance) (TestRefundableReceiver.sol#349)\n"
        },
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 321,
          "vulnerability_to_line": 350,
          "vulnerability_code": "    function requireCorrectFinalBalancesAndState(\n\n        TestRefundable testRefundable,\n\n        bool shouldNotRefund\n\n    )\n\n        internal\n\n    {\n\n        // If `shouldNotRefund` was true, then this contract should have a balance of zero,\n\n        // and `testRefundable` should have a balance of `msg.value`. Otherwise, the opposite\n\n        // should be true.\n\n        if (shouldNotRefund) {\n\n            // Ensure that this contract's balance is zero.\n\n            require(address(this).balance == 0, \"Incorrect balance for TestRefundableReceiver\");\n\n\n\n            // Ensure that the other contract's balance is equal to `msg.value`.\n\n            require(address(testRefundable).balance == msg.value, \"Incorrect balance for TestRefundable\");\n\n        } else {\n\n            // Ensure that this contract's balance is `msg.value`.\n\n            require(address(this).balance == msg.value, \"Incorrect balance for TestRefundableReceiver\");\n\n\n\n            // Ensure that the other contract's balance is equal to zero.\n\n            require(address(testRefundable).balance == 0, \"Incorrect balance for TestRefundable\");\n\n        }\n\n\n\n        // Ensure that `shouldNotRefund` in TestRefundable is set to the parameter `shouldNotRefund`\n\n        // after the call (i.e. the value didn't change during the function call).\n\n        require(testRefundable.getShouldNotRefund() == shouldNotRefund, \"Incorrect shouldNotRefund value\");\n\n\n\n        // Drain the contract of funds so that subsequent tests don't have to account for leftover ether.\n\n        msg.sender.transfer(address(this).balance);\n",
          "message": "TestRefundableReceiver.requireCorrectFinalBalancesAndState (TestRefundableReceiver.sol#321-350) uses a dangerous strict equality:\n\t- require(bool,string)(address(this).balance == 0,Incorrect balance for TestRefundableReceiver)\n\t- require(bool,string)(address(testRefundable).balance == msg.value,Incorrect balance for TestRefundable)\n\t- require(bool,string)(address(this).balance == msg.value,Incorrect balance for TestRefundableReceiver)\n\t- require(bool,string)(address(testRefundable).balance == 0,Incorrect balance for TestRefundable)\n"
        },
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 321,
          "vulnerability_to_line": 350,
          "vulnerability_code": "    function requireCorrectFinalBalancesAndState(\n\n        TestRefundable testRefundable,\n\n        bool shouldNotRefund\n\n    )\n\n        internal\n\n    {\n\n        // If `shouldNotRefund` was true, then this contract should have a balance of zero,\n\n        // and `testRefundable` should have a balance of `msg.value`. Otherwise, the opposite\n\n        // should be true.\n\n        if (shouldNotRefund) {\n\n            // Ensure that this contract's balance is zero.\n\n            require(address(this).balance == 0, \"Incorrect balance for TestRefundableReceiver\");\n\n\n\n            // Ensure that the other contract's balance is equal to `msg.value`.\n\n            require(address(testRefundable).balance == msg.value, \"Incorrect balance for TestRefundable\");\n\n        } else {\n\n            // Ensure that this contract's balance is `msg.value`.\n\n            require(address(this).balance == msg.value, \"Incorrect balance for TestRefundableReceiver\");\n\n\n\n            // Ensure that the other contract's balance is equal to zero.\n\n            require(address(testRefundable).balance == 0, \"Incorrect balance for TestRefundable\");\n\n        }\n\n\n\n        // Ensure that `shouldNotRefund` in TestRefundable is set to the parameter `shouldNotRefund`\n\n        // after the call (i.e. the value didn't change during the function call).\n\n        require(testRefundable.getShouldNotRefund() == shouldNotRefund, \"Incorrect shouldNotRefund value\");\n\n\n\n        // Drain the contract of funds so that subsequent tests don't have to account for leftover ether.\n\n        msg.sender.transfer(address(this).balance);\n",
          "message": "TestRefundableReceiver.requireCorrectFinalBalancesAndState (TestRefundableReceiver.sol#321-350) uses a dangerous strict equality:\n\t- require(bool,string)(address(this).balance == 0,Incorrect balance for TestRefundableReceiver)\n\t- require(bool,string)(address(testRefundable).balance == msg.value,Incorrect balance for TestRefundable)\n\t- require(bool,string)(address(this).balance == msg.value,Incorrect balance for TestRefundableReceiver)\n\t- require(bool,string)(address(testRefundable).balance == 0,Incorrect balance for TestRefundable)\nTestRefundableReceiver.testRefundNonZeroBalance (TestRefundableReceiver.sol#200-213) uses a dangerous strict equality:\n\t- require(bool,string)(address(this).balance == msg.value,A full refund was not provided by `refundNonzeroBalance`)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": 149,
          "vulnerability_code": "    function nestedDisableRefundUntilEndFunction()\n\n        public\n\n        payable\n\n        disableRefundUntilEnd\n\n        returns (uint256)\n\n    {\n\n        disableRefundUntilEndFunction();\n\n        return address(this).balance;\n",
          "message": "TestRefundable.nestedDisableRefundUntilEndFunction (TestRefundableReceiver.sol#141-149) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": 159,
          "vulnerability_code": "    function mixedRefundModifierFunction()\n\n        public\n\n        payable\n\n        disableRefundUntilEnd\n\n        returns (uint256)\n\n    {\n\n        refundFinalBalanceFunction();\n\n        return address(this).balance;\n",
          "message": "TestRefundable.mixedRefundModifierFunction (TestRefundableReceiver.sol#151-159) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": "Detected issues with version pragma in TestRefundableReceiver.sol:\n\t- pragma solidity^0.5.9 (TestRefundableReceiver.sol#21): it allows old versions\n\t- pragma solidity^0.5.9 (TestRefundableReceiver.sol#103): it allows old versions\n\t- pragma solidity^0.5.9 (TestRefundableReceiver.sol#182): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": 50,
          "vulnerability_code": "    function _refundNonZeroBalanceIfEnabled()\n\n        internal\n\n    {\n\n        if (!_areRefundsDisabled()) {\n\n            _refundNonZeroBalance();\n\n        }\n",
          "message": "Function 'Refundable._refundNonZeroBalanceIfEnabled' (TestRefundableReceiver.sol#44-50) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": 59,
          "vulnerability_code": "    function _refundNonZeroBalance()\n\n        internal\n\n    {\n\n        uint256 balance = address(this).balance;\n\n        if (balance > 0) {\n\n            msg.sender.transfer(balance);\n\n        }\n",
          "message": "Function 'Refundable._refundNonZeroBalance' (TestRefundableReceiver.sol#52-59) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": 65,
          "vulnerability_code": "    function _disableRefund()\n\n        internal\n\n    {\n\n        _shouldNotRefund = true;\n",
          "message": "Function 'Refundable._disableRefund' (TestRefundableReceiver.sol#61-65) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": 72,
          "vulnerability_code": "    function _enableAndRefundNonZeroBalance()\n\n        internal\n\n    {\n\n        _shouldNotRefund = false;\n\n        _refundNonZeroBalance();\n",
          "message": "Function 'Refundable._enableAndRefundNonZeroBalance' (TestRefundableReceiver.sol#67-72) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": 80,
          "vulnerability_code": "    function _areRefundsDisabled()\n\n        internal\n\n        view\n\n        returns (bool)\n\n    {\n\n        return _shouldNotRefund;\n",
          "message": "Function 'Refundable._areRefundsDisabled' (TestRefundableReceiver.sol#74-80) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool internal _shouldNotRefund;\n",
          "message": "Variable 'Refundable._shouldNotRefund' (TestRefundableReceiver.sol#27) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_BALANCE_EQUALITY",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(address(this).balance == msg.value, \"A full refund was not provided by `refundNonzeroBalance`\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_BALANCE_EQUALITY",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(address(this).balance == 0, \"Incorrect balance for TestRefundableReceiver\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_BALANCE_EQUALITY",
          "vulnerability_from_line": 335,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(address(testRefundable).balance == msg.value, \"Incorrect balance for TestRefundable\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_BALANCE_EQUALITY",
          "vulnerability_from_line": 338,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(address(this).balance == msg.value, \"Incorrect balance for TestRefundableReceiver\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_BALANCE_EQUALITY",
          "vulnerability_from_line": 341,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(address(testRefundable).balance == 0, \"Incorrect balance for TestRefundable\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract TestRefundable is\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 182,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 303,
          "vulnerability_to_line": null,
          "vulnerability_code": "        testRefundable.setShouldNotRefund(shouldNotRefund);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 306,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 balanceWithinCall = testRefundable.mixedRefundModifierFunction.value(msg.value)();\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 306,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 balanceWithinCall = testRefundable.mixedRefundModifierFunction.value(msg.value)();\n",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 306,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 balanceWithinCall = testRefundable.mixedRefundModifierFunction.value(msg.value)();\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 253,
          "vulnerability_to_line": null,
          "vulnerability_code": "        testRefundable.setShouldNotRefund(shouldNotRefund);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 256,
          "vulnerability_to_line": null,
          "vulnerability_code": "        testRefundable.disableRefundUntilEndFunction.value(msg.value)();\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 256,
          "vulnerability_to_line": null,
          "vulnerability_code": "        testRefundable.disableRefundUntilEndFunction.value(msg.value)();\n",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 256,
          "vulnerability_to_line": null,
          "vulnerability_code": "        testRefundable.disableRefundUntilEndFunction.value(msg.value)();\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 229,
          "vulnerability_to_line": null,
          "vulnerability_code": "        testRefundable.setShouldNotRefund(shouldNotRefund);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "        testRefundable.refundFinalBalanceFunction.value(msg.value)();\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "        testRefundable.refundFinalBalanceFunction.value(msg.value)();\n",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "        testRefundable.refundFinalBalanceFunction.value(msg.value)();\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "        testRefundable.refundNonZeroBalanceExternal.value(msg.value)();\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Unprotected Ether Withdrawal (SWC 105)",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "        testRefundable.refundNonZeroBalanceExternal.value(msg.value)();\n",
          "message": "Any sender can withdraw Ether from the contract account.\nArbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.\nClassification: SWC-105"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 276,
          "vulnerability_to_line": null,
          "vulnerability_code": "        testRefundable.setShouldNotRefund(shouldNotRefund);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 279,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 balanceWithinCall = testRefundable.nestedDisableRefundUntilEndFunction.value(msg.value)();\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 279,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 balanceWithinCall = testRefundable.nestedDisableRefundUntilEndFunction.value(msg.value)();\n",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 279,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 balanceWithinCall = testRefundable.nestedDisableRefundUntilEndFunction.value(msg.value)();\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 349,
          "vulnerability_to_line": null,
          "vulnerability_code": "        msg.sender.transfer(address(this).balance);\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 349,
          "vulnerability_to_line": null,
          "vulnerability_code": "        msg.sender.transfer(address(this).balance);\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}