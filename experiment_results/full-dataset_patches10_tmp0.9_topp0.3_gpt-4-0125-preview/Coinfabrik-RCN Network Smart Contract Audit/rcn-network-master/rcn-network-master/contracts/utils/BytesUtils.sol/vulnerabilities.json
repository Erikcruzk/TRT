{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_data.length >= _la, \"Reading bytes out of bounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 189,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_24"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 12,
          "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n\n        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, mul(32, index))))\n\n        }\n",
          "message": "BytesUtils.readBytes32 (BytesUtils.sol#7-12) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": 21,
          "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n\n        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, offset)))\n\n            let lb := sub(32, length)\n\n            if lb { o := div(o, exp(2, mul(lb, 8))) }\n\n        }\n",
          "message": "BytesUtils.read (BytesUtils.sol#14-21) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": 33,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la\n\n    ) internal pure returns (bytes32 _a) {\n\n        require(_data.length >= _la, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            _a := mload(add(_data, 32))\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n        }\n",
          "message": "BytesUtils.decode (BytesUtils.sol#23-33) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": 53,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb\n\n    ) internal pure returns (bytes32 _a, bytes32 _b) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode (BytesUtils.sol#35-53) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": 78,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode (BytesUtils.sol#55-78) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": 108,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode (BytesUtils.sol#80-108) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": 143,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode (BytesUtils.sol#110-143) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 145,
          "vulnerability_to_line": 190,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le,\n\n        uint256 _lf\n\n    ) internal pure returns (\n\n        bytes32 _a,\n\n        bytes32 _b,\n\n        bytes32 _c,\n\n        bytes32 _d,\n\n        bytes32 _e,\n\n        bytes32 _f\n\n    ) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := add(o, _le)\n\n            _f := mload(o)\n\n            l := sub(32, _lf)\n\n            if l { _f := div(_f, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode (BytesUtils.sol#145-190) is declared view but contains assembly code\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 12,
          "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n\n        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, mul(32, index))))\n\n        }\n",
          "message": "BytesUtils.readBytes32 uses assembly (BytesUtils.sol#7-12)\n\t- BytesUtils.sol#9-11\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": 21,
          "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n\n        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, offset)))\n\n            let lb := sub(32, length)\n\n            if lb { o := div(o, exp(2, mul(lb, 8))) }\n\n        }\n",
          "message": "BytesUtils.read uses assembly (BytesUtils.sol#14-21)\n\t- BytesUtils.sol#16-20\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": 33,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la\n\n    ) internal pure returns (bytes32 _a) {\n\n        require(_data.length >= _la, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            _a := mload(add(_data, 32))\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n        }\n",
          "message": "BytesUtils.decode uses assembly (BytesUtils.sol#23-33)\n\t- BytesUtils.sol#28-32\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": 53,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb\n\n    ) internal pure returns (bytes32 _a, bytes32 _b) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode uses assembly (BytesUtils.sol#35-53)\n\t- BytesUtils.sol#41-51\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": 78,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode uses assembly (BytesUtils.sol#55-78)\n\t- BytesUtils.sol#62-76\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": 108,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode uses assembly (BytesUtils.sol#80-108)\n\t- BytesUtils.sol#88-106\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": 143,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode uses assembly (BytesUtils.sol#110-143)\n\t- BytesUtils.sol#119-141\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 145,
          "vulnerability_to_line": 190,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le,\n\n        uint256 _lf\n\n    ) internal pure returns (\n\n        bytes32 _a,\n\n        bytes32 _b,\n\n        bytes32 _c,\n\n        bytes32 _d,\n\n        bytes32 _e,\n\n        bytes32 _f\n\n    ) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := add(o, _le)\n\n            _f := mload(o)\n\n            l := sub(32, _lf)\n\n            if l { _f := div(_f, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode uses assembly (BytesUtils.sol#145-190)\n\t- BytesUtils.sol#162-188\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": "Detected issues with version pragma in BytesUtils.sol:\n\t- pragma solidity^0.5.11 (BytesUtils.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _data,\n",
          "message": "Parameter '_data' of BytesUtils.decode (BytesUtils.sol#24) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _la\n",
          "message": "Parameter '_la' of BytesUtils.decode (BytesUtils.sol#25) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _data,\n",
          "message": "Parameter '_data' of BytesUtils.decode (BytesUtils.sol#36) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _data,\n",
          "message": "Parameter '_data' of BytesUtils.decode (BytesUtils.sol#56) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _data,\n",
          "message": "Parameter '_data' of BytesUtils.decode (BytesUtils.sol#81) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _data,\n",
          "message": "Parameter '_data' of BytesUtils.decode (BytesUtils.sol#111) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 146,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _data,\n",
          "message": "Parameter '_data' of BytesUtils.decode (BytesUtils.sol#146) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 145,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 145,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 153,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) internal pure returns (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 119,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 162,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}