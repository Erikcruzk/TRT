{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if ((success==1)&&(result==1)) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return true;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_7"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": 49,
          "vulnerability_code": "    function _noThrowImplements(\n\n        address _contract,\n\n        bytes4 _interfaceId\n\n    ) private view returns (uint256 success, uint256 result) {\n\n        bytes4 erc165ID = ERC165ID;\n\n        assembly {\n\n            let x := mload(0x40)               // Find empty storage location using \"free memory pointer\"\n\n            mstore(x, erc165ID)                // Place signature at begining of empty storage\n\n            mstore(add(x, 0x04), _interfaceId) // Place first argument directly next to signature\n\n\n\n            success := staticcall(\n\n                                30000,         // 30k gas\n\n                                _contract,     // To addr\n\n                                x,             // Inputs are stored at location x\n\n                                0x24,          // Inputs are 32 bytes long\n\n                                x,             // Store output over input (saves space)\n\n                                0x20)          // Outputs are 32 bytes long\n\n\n\n            result := mload(x)                 // Load the result\n\n        }\n",
          "message": "ImplementsInterface._noThrowImplements (ImplementsInterface.sol#29-49) is declared view but contains assembly code\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": 49,
          "vulnerability_code": "    function _noThrowImplements(\n\n        address _contract,\n\n        bytes4 _interfaceId\n\n    ) private view returns (uint256 success, uint256 result) {\n\n        bytes4 erc165ID = ERC165ID;\n\n        assembly {\n\n            let x := mload(0x40)               // Find empty storage location using \"free memory pointer\"\n\n            mstore(x, erc165ID)                // Place signature at begining of empty storage\n\n            mstore(add(x, 0x04), _interfaceId) // Place first argument directly next to signature\n\n\n\n            success := staticcall(\n\n                                30000,         // 30k gas\n\n                                _contract,     // To addr\n\n                                x,             // Inputs are stored at location x\n\n                                0x24,          // Inputs are 32 bytes long\n\n                                x,             // Store output over input (saves space)\n\n                                0x20)          // Outputs are 32 bytes long\n\n\n\n            result := mload(x)                 // Load the result\n\n        }\n",
          "message": "ImplementsInterface._noThrowImplements uses assembly (ImplementsInterface.sol#29-49)\n\t- ImplementsInterface.sol#34-48\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": "Detected issues with version pragma in ImplementsInterface.sol:\n\t- pragma solidity^0.5.11 (ImplementsInterface.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function implementsMethod(address _contract, bytes4 _interfaceId) internal view returns (bool) {\n",
          "message": "Parameter '_contract' of ImplementsInterface.implementsMethod (ImplementsInterface.sol#10) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function implementsMethod(address _contract, bytes4 _interfaceId) internal view returns (bool) {\n",
          "message": "Parameter '_interfaceId' of ImplementsInterface.implementsMethod (ImplementsInterface.sol#10) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": 49,
          "vulnerability_code": "    function _noThrowImplements(\n\n        address _contract,\n\n        bytes4 _interfaceId\n\n    ) private view returns (uint256 success, uint256 result) {\n\n        bytes4 erc165ID = ERC165ID;\n\n        assembly {\n\n            let x := mload(0x40)               // Find empty storage location using \"free memory pointer\"\n\n            mstore(x, erc165ID)                // Place signature at begining of empty storage\n\n            mstore(add(x, 0x04), _interfaceId) // Place first argument directly next to signature\n\n\n\n            success := staticcall(\n\n                                30000,         // 30k gas\n\n                                _contract,     // To addr\n\n                                x,             // Inputs are stored at location x\n\n                                0x24,          // Inputs are 32 bytes long\n\n                                x,             // Store output over input (saves space)\n\n                                0x20)          // Outputs are 32 bytes long\n\n\n\n            result := mload(x)                 // Load the result\n\n        }\n",
          "message": "Function 'ImplementsInterface._noThrowImplements' (ImplementsInterface.sol#29-49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant InvalidID = 0xffffffff;\n",
          "message": "Constant 'ImplementsInterface.InvalidID' (ImplementsInterface.sol#7) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant InvalidID = 0xffffffff;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant ERC165ID = 0x01ffc9a7;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _noThrowImplements(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _noThrowImplements(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) private view returns (uint256 success, uint256 result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant InvalidID = 0xffffffff;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant ERC165ID = 0x01ffc9a7;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}