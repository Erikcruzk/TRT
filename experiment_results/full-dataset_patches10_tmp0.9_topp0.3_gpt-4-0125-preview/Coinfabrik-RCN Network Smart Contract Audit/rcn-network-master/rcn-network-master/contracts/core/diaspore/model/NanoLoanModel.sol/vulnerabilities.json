{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 703,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract NanoLoanModel is ERC165, BytesUtils, Ownable, Model, ModelDescriptor, MinMax  {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 388,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 389,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _owner = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 390,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit OwnershipTransferred(address(0x0), msg.sender);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 391,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 434,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor()\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 435,
          "vulnerability_to_line": null,
          "vulnerability_code": "        internal\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 436,
          "vulnerability_to_line": null,
          "vulnerability_code": "    {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 437,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _registerInterface(_InterfaceId_ERC165);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 438,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 726,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 727,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _registerInterface(MODEL_INTERFACE);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 728,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _registerInterface(MODEL_DESCRIPTOR_INTERFACE);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 729,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 384,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == _owner, \"The owner should be the sender\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 403,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_newOwner != address(0), \"0x0 Is not a valid owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 457,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 470,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(z >= x, \"Add overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 475,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(x >= y, \"Sub overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 485,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(z/x == y, \"Mult overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 497,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 504,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 516,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_data.length >= _la, \"Reading bytes out of bounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 541,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 566,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 596,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 631,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 678,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 748,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == engine, \"Only engine allowed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 830,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_cancelableAt <= _duesIn, \"The cancelableAt should be less or equal than duesIn\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 831,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_interestRate > 1000, \"Interest rate too high\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 832,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_interestRatePunitory > 1000, \"Punitory interest rate too high\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 833,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_amount != 0, \"amount can't be 0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 835,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(uint64(now) + _duesIn > uint64(now), \"duesIn should be not 0 or overflow now plus duesIn\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 912,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(configs[id].interestRate == 0, \"Entry already exist\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 959,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(state.status != STATUS_PAID, \"The loan status should not be paid\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 967,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newPay < U_128_OVERFLOW, \"Paid overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1021,
          "vulnerability_to_line": null,
          "vulnerability_code": "                require(newTimestamp < U_64_OVERFLOW, \"newTimestamp overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1026,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    require(newInterest < U_128_OVERFLOW, \"newInterest overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1032,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    require(newPunitoryInterest < U_128_OVERFLOW, \"newPunitoryInterest overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1065,
          "vulnerability_to_line": null,
          "vulnerability_code": "        revert(\"Not implemented!\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1102,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_data.length == L_DATA, \"Invalid data length\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 869,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (timestamp > config.dueTime && timestamp > state.interestTimestamp) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 870,
          "vulnerability_to_line": null,
          "vulnerability_code": "            uint256 debt = config.amount.add(calcInterest).add(state.interest);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 871,
          "vulnerability_to_line": null,
          "vulnerability_code": "            uint256 pending = min(debt, debt.add(state.punitoryInterest).sub(state.paid));\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 872,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 873,
          "vulnerability_to_line": null,
          "vulnerability_code": "            (, debt) = _calculateInterest(timestamp - max(config.dueTime, state.interestTimestamp), config.interestRatePunitory, pending);// cant overflow, check in the previus if\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 874,
          "vulnerability_to_line": null,
          "vulnerability_code": "            calcInterest = debt.add(calcInterest);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 875,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 830,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_cancelableAt <= _duesIn, \"The cancelableAt should be less or equal than duesIn\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 835,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(uint64(now) + _duesIn > uint64(now), \"duesIn should be not 0 or overflow now plus duesIn\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 959,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(state.status != STATUS_PAID, \"The loan status should not be paid\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_70"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 496,
          "vulnerability_to_line": 501,
          "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n\n        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, mul(32, index))))\n\n        }\n",
          "message": "BytesUtils.readBytes32 (NanoLoanModel.sol#496-501) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 503,
          "vulnerability_to_line": 510,
          "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n\n        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, offset)))\n\n            let lb := sub(32, length)\n\n            if lb { o := div(o, exp(2, mul(lb, 8))) }\n\n        }\n",
          "message": "BytesUtils.read (NanoLoanModel.sol#503-510) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 512,
          "vulnerability_to_line": 522,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la\n\n    ) internal pure returns (bytes32 _a) {\n\n        require(_data.length >= _la, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            _a := mload(add(_data, 32))\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n        }\n",
          "message": "BytesUtils.decode (NanoLoanModel.sol#512-522) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 524,
          "vulnerability_to_line": 542,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb\n\n    ) internal pure returns (bytes32 _a, bytes32 _b) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode (NanoLoanModel.sol#524-542) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 544,
          "vulnerability_to_line": 567,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode (NanoLoanModel.sol#544-567) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 569,
          "vulnerability_to_line": 597,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode (NanoLoanModel.sol#569-597) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 599,
          "vulnerability_to_line": 632,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode (NanoLoanModel.sol#599-632) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 634,
          "vulnerability_to_line": 679,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le,\n\n        uint256 _lf\n\n    ) internal pure returns (\n\n        bytes32 _a,\n\n        bytes32 _b,\n\n        bytes32 _c,\n\n        bytes32 _d,\n\n        bytes32 _e,\n\n        bytes32 _f\n\n    ) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := add(o, _le)\n\n            _f := mload(o)\n\n            l := sub(32, _lf)\n\n            if l { _f := div(_f, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode (NanoLoanModel.sol#634-679) is declared view but contains assembly code\n"
        },
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 1051,
          "vulnerability_to_line": 1062,
          "vulnerability_code": "    function _calculateInterest(\n\n        uint256 timeDelta,\n\n        uint256 interestRate,\n\n        uint256 amount\n\n    ) internal pure returns (uint256 realDelta, uint256 interest) {\n\n        if (amount == 0) {\n\n            realDelta = timeDelta;\n\n        } else {\n\n            interest = timeDelta.mult(amount * 100000) / interestRate;\n\n            realDelta = interest.mult(interestRate) / (amount * 100000);\n\n        }\n",
          "message": "NanoLoanModel._calculateInterest (NanoLoanModel.sol#1051-1062) uses a dangerous strict equality:\n\t- amount == 0\n"
        },
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 1051,
          "vulnerability_to_line": 1062,
          "vulnerability_code": "    function _calculateInterest(\n\n        uint256 timeDelta,\n\n        uint256 interestRate,\n\n        uint256 amount\n\n    ) internal pure returns (uint256 realDelta, uint256 interest) {\n\n        if (amount == 0) {\n\n            realDelta = timeDelta;\n\n        } else {\n\n            interest = timeDelta.mult(amount * 100000) / interestRate;\n\n            realDelta = interest.mult(interestRate) / (amount * 100000);\n\n        }\n",
          "message": "NanoLoanModel._calculateInterest (NanoLoanModel.sol#1051-1062) uses a dangerous strict equality:\n\t- amount == 0\nNanoLoanModel.addPaid (NanoLoanModel.sol#956-975) uses a dangerous strict equality:\n\t- totalDebt - newPay == 0\n"
        },
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 1051,
          "vulnerability_to_line": 1062,
          "vulnerability_code": "    function _calculateInterest(\n\n        uint256 timeDelta,\n\n        uint256 interestRate,\n\n        uint256 amount\n\n    ) internal pure returns (uint256 realDelta, uint256 interest) {\n\n        if (amount == 0) {\n\n            realDelta = timeDelta;\n\n        } else {\n\n            interest = timeDelta.mult(amount * 100000) / interestRate;\n\n            realDelta = interest.mult(interestRate) / (amount * 100000);\n\n        }\n",
          "message": "NanoLoanModel._calculateInterest (NanoLoanModel.sol#1051-1062) uses a dangerous strict equality:\n\t- amount == 0\nNanoLoanModel.addPaid (NanoLoanModel.sol#956-975) uses a dangerous strict equality:\n\t- totalDebt - newPay == 0\nNanoLoanModel.create (NanoLoanModel.sol#911-941) uses a dangerous strict equality:\n\t- require(bool,string)(configs[id].interestRate == 0,Entry already exist)\n"
        },
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 1051,
          "vulnerability_to_line": 1062,
          "vulnerability_code": "    function _calculateInterest(\n\n        uint256 timeDelta,\n\n        uint256 interestRate,\n\n        uint256 amount\n\n    ) internal pure returns (uint256 realDelta, uint256 interest) {\n\n        if (amount == 0) {\n\n            realDelta = timeDelta;\n\n        } else {\n\n            interest = timeDelta.mult(amount * 100000) / interestRate;\n\n            realDelta = interest.mult(interestRate) / (amount * 100000);\n\n        }\n",
          "message": "NanoLoanModel._calculateInterest (NanoLoanModel.sol#1051-1062) uses a dangerous strict equality:\n\t- amount == 0\nNanoLoanModel.addPaid (NanoLoanModel.sol#956-975) uses a dangerous strict equality:\n\t- totalDebt - newPay == 0\nNanoLoanModel.create (NanoLoanModel.sol#911-941) uses a dangerous strict equality:\n\t- require(bool,string)(configs[id].interestRate == 0,Entry already exist)\nNanoLoanModel.getDueTime (NanoLoanModel.sol#884-886) uses a dangerous strict equality:\n\t- states[id].status == STATUS_PAID\n"
        },
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 1051,
          "vulnerability_to_line": 1062,
          "vulnerability_code": "    function _calculateInterest(\n\n        uint256 timeDelta,\n\n        uint256 interestRate,\n\n        uint256 amount\n\n    ) internal pure returns (uint256 realDelta, uint256 interest) {\n\n        if (amount == 0) {\n\n            realDelta = timeDelta;\n\n        } else {\n\n            interest = timeDelta.mult(amount * 100000) / interestRate;\n\n            realDelta = interest.mult(interestRate) / (amount * 100000);\n\n        }\n",
          "message": "NanoLoanModel._calculateInterest (NanoLoanModel.sol#1051-1062) uses a dangerous strict equality:\n\t- amount == 0\nNanoLoanModel.addPaid (NanoLoanModel.sol#956-975) uses a dangerous strict equality:\n\t- totalDebt - newPay == 0\nNanoLoanModel.create (NanoLoanModel.sol#911-941) uses a dangerous strict equality:\n\t- require(bool,string)(configs[id].interestRate == 0,Entry already exist)\nNanoLoanModel.getDueTime (NanoLoanModel.sol#884-886) uses a dangerous strict equality:\n\t- states[id].status == STATUS_PAID\nNanoLoanModel.getFrequency (NanoLoanModel.sol#892-894) uses a dangerous strict equality:\n\t- configs[id].dueTime == 0\n"
        },
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 1051,
          "vulnerability_to_line": 1062,
          "vulnerability_code": "    function _calculateInterest(\n\n        uint256 timeDelta,\n\n        uint256 interestRate,\n\n        uint256 amount\n\n    ) internal pure returns (uint256 realDelta, uint256 interest) {\n\n        if (amount == 0) {\n\n            realDelta = timeDelta;\n\n        } else {\n\n            interest = timeDelta.mult(amount * 100000) / interestRate;\n\n            realDelta = interest.mult(interestRate) / (amount * 100000);\n\n        }\n",
          "message": "NanoLoanModel._calculateInterest (NanoLoanModel.sol#1051-1062) uses a dangerous strict equality:\n\t- amount == 0\nNanoLoanModel.addPaid (NanoLoanModel.sol#956-975) uses a dangerous strict equality:\n\t- totalDebt - newPay == 0\nNanoLoanModel.create (NanoLoanModel.sol#911-941) uses a dangerous strict equality:\n\t- require(bool,string)(configs[id].interestRate == 0,Entry already exist)\nNanoLoanModel.getDueTime (NanoLoanModel.sol#884-886) uses a dangerous strict equality:\n\t- states[id].status == STATUS_PAID\nNanoLoanModel.getFrequency (NanoLoanModel.sol#892-894) uses a dangerous strict equality:\n\t- configs[id].dueTime == 0\nNanoLoanModel.getInstallments (NanoLoanModel.sol#896-898) uses a dangerous strict equality:\n\t- configs[id].dueTime == 0\n"
        },
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 1051,
          "vulnerability_to_line": 1062,
          "vulnerability_code": "    function _calculateInterest(\n\n        uint256 timeDelta,\n\n        uint256 interestRate,\n\n        uint256 amount\n\n    ) internal pure returns (uint256 realDelta, uint256 interest) {\n\n        if (amount == 0) {\n\n            realDelta = timeDelta;\n\n        } else {\n\n            interest = timeDelta.mult(amount * 100000) / interestRate;\n\n            realDelta = interest.mult(interestRate) / (amount * 100000);\n\n        }\n",
          "message": "NanoLoanModel._calculateInterest (NanoLoanModel.sol#1051-1062) uses a dangerous strict equality:\n\t- amount == 0\nNanoLoanModel.addPaid (NanoLoanModel.sol#956-975) uses a dangerous strict equality:\n\t- totalDebt - newPay == 0\nNanoLoanModel.create (NanoLoanModel.sol#911-941) uses a dangerous strict equality:\n\t- require(bool,string)(configs[id].interestRate == 0,Entry already exist)\nNanoLoanModel.getDueTime (NanoLoanModel.sol#884-886) uses a dangerous strict equality:\n\t- states[id].status == STATUS_PAID\nNanoLoanModel.getFrequency (NanoLoanModel.sol#892-894) uses a dangerous strict equality:\n\t- configs[id].dueTime == 0\nNanoLoanModel.getInstallments (NanoLoanModel.sol#896-898) uses a dangerous strict equality:\n\t- configs[id].dueTime == 0\nNanoLoanModel.getObligation (NanoLoanModel.sol#849-852) uses a dangerous strict equality:\n\t- defined = timestamp == now || timestamp <= states[id].interestTimestamp\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 1008,
          "vulnerability_to_line": null,
          "vulnerability_code": "            uint256 newPunitoryInterest;\n",
          "message": "newPunitoryInterest in NanoLoanModel._addInterest (NanoLoanModel.sol#1008) is a local variable never initialiazed\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 860,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 calcInterest;\n",
          "message": "calcInterest in NanoLoanModel._getObligation (NanoLoanModel.sol#860) is a local variable never initialiazed\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 995,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 pending;\n",
          "message": "pending in NanoLoanModel._addInterest (NanoLoanModel.sol#995) is a local variable never initialiazed\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 994,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 newTimestamp;\n",
          "message": "newTimestamp in NanoLoanModel._addInterest (NanoLoanModel.sol#994) is a local variable never initialiazed\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 496,
          "vulnerability_to_line": 501,
          "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n\n        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, mul(32, index))))\n\n        }\n",
          "message": "BytesUtils.readBytes32 uses assembly (NanoLoanModel.sol#496-501)\n\t- NanoLoanModel.sol#498-500\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 503,
          "vulnerability_to_line": 510,
          "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n\n        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, offset)))\n\n            let lb := sub(32, length)\n\n            if lb { o := div(o, exp(2, mul(lb, 8))) }\n\n        }\n",
          "message": "BytesUtils.read uses assembly (NanoLoanModel.sol#503-510)\n\t- NanoLoanModel.sol#505-509\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 512,
          "vulnerability_to_line": 522,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la\n\n    ) internal pure returns (bytes32 _a) {\n\n        require(_data.length >= _la, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            _a := mload(add(_data, 32))\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n        }\n",
          "message": "BytesUtils.decode uses assembly (NanoLoanModel.sol#512-522)\n\t- NanoLoanModel.sol#517-521\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 524,
          "vulnerability_to_line": 542,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb\n\n    ) internal pure returns (bytes32 _a, bytes32 _b) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode uses assembly (NanoLoanModel.sol#524-542)\n\t- NanoLoanModel.sol#530-540\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 544,
          "vulnerability_to_line": 567,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode uses assembly (NanoLoanModel.sol#544-567)\n\t- NanoLoanModel.sol#551-565\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 569,
          "vulnerability_to_line": 597,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode uses assembly (NanoLoanModel.sol#569-597)\n\t- NanoLoanModel.sol#577-595\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 599,
          "vulnerability_to_line": 632,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode uses assembly (NanoLoanModel.sol#599-632)\n\t- NanoLoanModel.sol#608-630\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 634,
          "vulnerability_to_line": 679,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le,\n\n        uint256 _lf\n\n    ) internal pure returns (\n\n        bytes32 _a,\n\n        bytes32 _b,\n\n        bytes32 _c,\n\n        bytes32 _d,\n\n        bytes32 _e,\n\n        bytes32 _f\n\n    ) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := add(o, _le)\n\n            _f := mload(o)\n\n            l := sub(32, _lf)\n\n            if l { _f := div(_f, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode uses assembly (NanoLoanModel.sol#634-679)\n\t- NanoLoanModel.sol#651-677\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": "Detected issues with version pragma in NanoLoanModel.sol:\n\t- pragma solidity^0.5.11 (NanoLoanModel.sol#3): it allows old versions\n\t- pragma solidity^0.5.11 (NanoLoanModel.sol#18): it allows old versions\n\t- pragma solidity^0.5.11 (NanoLoanModel.sol#341): it allows old versions\n\t- pragma solidity^0.5.11 (NanoLoanModel.sol#357): it allows old versions\n\t- pragma solidity^0.5.11 (NanoLoanModel.sol#378): it allows old versions\n\t- pragma solidity^0.5.11 (NanoLoanModel.sol#411): it allows old versions\n\t- pragma solidity^0.5.11 (NanoLoanModel.sol#464): it allows old versions\n\t- pragma solidity^0.5.11 (NanoLoanModel.sol#492): it allows old versions\n\t- pragma solidity^0.5.11 (NanoLoanModel.sol#685): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 402,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferOwnership(address _newOwner) external onlyOwner {\n",
          "message": "Parameter '_newOwner' of Ownable.transferOwnership (NanoLoanModel.sol#402) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 381,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address internal _owner;\n",
          "message": "Variable 'Ownable._owner' (NanoLoanModel.sol#381) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 454,
          "vulnerability_to_line": 459,
          "vulnerability_code": "    function _registerInterface(bytes4 interfaceId)\n\n        internal\n\n    {\n\n        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n\n        _supportedInterfaces[interfaceId] = true;\n",
          "message": "Function 'ERC165._registerInterface' (NanoLoanModel.sol#454-459) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 419,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
          "message": "Constant 'ERC165._InterfaceId_ERC165' (NanoLoanModel.sol#419) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 513,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _data,\n",
          "message": "Parameter '_data' of BytesUtils.decode (NanoLoanModel.sol#513) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 514,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _la\n",
          "message": "Parameter '_la' of BytesUtils.decode (NanoLoanModel.sol#514) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 525,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _data,\n",
          "message": "Parameter '_data' of BytesUtils.decode (NanoLoanModel.sol#525) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 545,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _data,\n",
          "message": "Parameter '_data' of BytesUtils.decode (NanoLoanModel.sol#545) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 570,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _data,\n",
          "message": "Parameter '_data' of BytesUtils.decode (NanoLoanModel.sol#570) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 600,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _data,\n",
          "message": "Parameter '_data' of BytesUtils.decode (NanoLoanModel.sol#600) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 635,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _data,\n",
          "message": "Parameter '_data' of BytesUtils.decode (NanoLoanModel.sol#635) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 720,
          "vulnerability_to_line": null,
          "vulnerability_code": "    event _setEngine(address _engine);\n",
          "message": "Event 'NanoLoanModel._setEngine' (NanoLoanModel.sol#720) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 721,
          "vulnerability_to_line": null,
          "vulnerability_code": "    event _setDescriptor(address _descriptor);\n",
          "message": "Event 'NanoLoanModel._setDescriptor' (NanoLoanModel.sol#721) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 722,
          "vulnerability_to_line": null,
          "vulnerability_code": "    event _setInterest(bytes32 _id, uint128 _interest);\n",
          "message": "Event 'NanoLoanModel._setInterest' (NanoLoanModel.sol#722) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 723,
          "vulnerability_to_line": null,
          "vulnerability_code": "    event _setPunitoryInterest(bytes32 _id, uint128 _punitoryInterest);\n",
          "message": "Event 'NanoLoanModel._setPunitoryInterest' (NanoLoanModel.sol#723) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 724,
          "vulnerability_to_line": null,
          "vulnerability_code": "    event _setInterestTimestamp(bytes32 _id, uint256 _interestTimestamp);\n",
          "message": "Event 'NanoLoanModel._setInterestTimestamp' (NanoLoanModel.sol#724) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 789,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isOperator(address _target) external view returns (bool) {\n",
          "message": "Parameter '_target' of NanoLoanModel.isOperator (NanoLoanModel.sol#789) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1064,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addDebt(bytes32, uint256) external onlyEngine returns (bool) {\n",
          "message": "Parameter '' of NanoLoanModel.addDebt (NanoLoanModel.sol#1064) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1064,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addDebt(bytes32, uint256) external onlyEngine returns (bool) {\n",
          "message": "Parameter '_scope_0' of NanoLoanModel.addDebt (NanoLoanModel.sol#1064) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1115,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function simFirstObligation(bytes calldata _data) external view returns (uint256 amount, uint256 cancelableAt) {\n",
          "message": "Parameter '_data' of NanoLoanModel.simFirstObligation (NanoLoanModel.sol#1115) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1122,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function simTotalObligation(bytes calldata _data) external view returns (uint256 amount) {\n",
          "message": "Parameter '_data' of NanoLoanModel.simTotalObligation (NanoLoanModel.sol#1122) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1130,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function simDuration(bytes calldata _data) external view returns (uint256 duration) {\n",
          "message": "Parameter '_data' of NanoLoanModel.simDuration (NanoLoanModel.sol#1130) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1134,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function simPunitiveInterestRate(bytes calldata _data) external view returns (uint256 punitiveInterestRate) {\n",
          "message": "Parameter '_data' of NanoLoanModel.simPunitiveInterestRate (NanoLoanModel.sol#1134) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 761,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setEngine(address _engine) external onlyOwner returns (bool) {\n",
          "message": "Parameter '_engine' of NanoLoanModel.setEngine (NanoLoanModel.sol#761) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 767,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setDescriptor(address _descriptor) external onlyOwner returns (bool) {\n",
          "message": "Parameter '_descriptor' of NanoLoanModel.setDescriptor (NanoLoanModel.sol#767) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 774,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint128 _amount,\n",
          "message": "Parameter '_amount' of NanoLoanModel.encodeData (NanoLoanModel.sol#774) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 775,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _interestRate,\n",
          "message": "Parameter '_interestRate' of NanoLoanModel.encodeData (NanoLoanModel.sol#775) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 776,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _interestRatePunitory,\n",
          "message": "Parameter '_interestRatePunitory' of NanoLoanModel.encodeData (NanoLoanModel.sol#776) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 777,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint64  _dueTime,\n",
          "message": "Parameter '_dueTime' of NanoLoanModel.encodeData (NanoLoanModel.sol#777) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 778,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint64  _cancelableAt\n",
          "message": "Parameter '_cancelableAt' of NanoLoanModel.encodeData (NanoLoanModel.sol#778) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 823,
          "vulnerability_to_line": 839,
          "vulnerability_code": "    function _validate(\n\n        uint128 _amount,\n\n        uint256 _interestRate,\n\n        uint256 _interestRatePunitory,\n\n        uint64 _duesIn,\n\n        uint64 _cancelableAt\n\n    ) internal view {\n\n        require(_cancelableAt <= _duesIn, \"The cancelableAt should be less or equal than duesIn\");\n\n        require(_interestRate > 1000, \"Interest rate too high\");\n\n        require(_interestRatePunitory > 1000, \"Punitory interest rate too high\");\n\n        require(_amount != 0, \"amount can't be 0\");\n\n\n\n        require(uint64(now) + _duesIn > uint64(now), \"duesIn should be not 0 or overflow now plus duesIn\");\n\n        // cancelableAt cant make overflow because:\n\n        //     cancelableAt <= duesIn\n\n        // and we check the sum of duesIn and now in the previus requiere\n",
          "message": "Function 'NanoLoanModel._validate' (NanoLoanModel.sol#823-839) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 824,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint128 _amount,\n",
          "message": "Parameter '_amount' of NanoLoanModel._validate (NanoLoanModel.sol#824) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 825,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _interestRate,\n",
          "message": "Parameter '_interestRate' of NanoLoanModel._validate (NanoLoanModel.sol#825) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 826,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _interestRatePunitory,\n",
          "message": "Parameter '_interestRatePunitory' of NanoLoanModel._validate (NanoLoanModel.sol#826) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 827,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint64 _duesIn,\n",
          "message": "Parameter '_duesIn' of NanoLoanModel._validate (NanoLoanModel.sol#827) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 828,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint64 _cancelableAt\n",
          "message": "Parameter '_cancelableAt' of NanoLoanModel._validate (NanoLoanModel.sol#828) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 854,
          "vulnerability_to_line": 878,
          "vulnerability_code": "    function _getObligation(bytes32 id, uint256 timestamp) internal view returns (uint256 total){\n\n        State storage state = states[id];\n\n        if (state.status == STATUS_PAID)\n\n            return 0;\n\n        Config storage config = configs[id];\n\n\n\n        uint256 calcInterest;\n\n        uint256 endNonPunitory = min(timestamp, config.dueTime);\n\n\n\n        if (state.paid < config.amount)\n\n            total = config.amount - state.paid;\n\n\n\n        if (state.interestTimestamp < endNonPunitory)\n\n            (, calcInterest) = _calculateInterest(endNonPunitory - state.interestTimestamp, config.interestRate, total);\n\n\n\n        if (timestamp > config.dueTime && timestamp > state.interestTimestamp) {\n\n            uint256 debt = config.amount.add(calcInterest).add(state.interest);\n\n            uint256 pending = min(debt, debt.add(state.punitoryInterest).sub(state.paid));\n\n\n\n            (, debt) = _calculateInterest(timestamp - max(config.dueTime, state.interestTimestamp), config.interestRatePunitory, pending);// cant overflow, check in the previus if\n\n            calcInterest = debt.add(calcInterest);\n\n        }\n\n\n\n        total = total.add(calcInterest).add(state.interest).add(state.punitoryInterest);\n",
          "message": "Function 'NanoLoanModel._getObligation' (NanoLoanModel.sol#854-878) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 985,
          "vulnerability_to_line": 1039,
          "vulnerability_code": "    function _addInterest(bytes32 id, uint256 timestamp) internal returns(bool) {\n\n        Config storage config = configs[id];\n\n        State storage state = states[id];\n\n\n\n        uint256 newInterest = state.interest;\n\n\n\n        uint256 realDelta;\n\n        uint256 calculatedInterest;\n\n\n\n        uint256 newTimestamp;\n\n        uint256 pending;\n\n        if (state.interestTimestamp < timestamp) {\n\n            uint256 endNonPunitory = min(timestamp, config.dueTime);\n\n            if (state.interestTimestamp < endNonPunitory) {\n\n                if (state.paid < config.amount)\n\n                    pending = config.amount - state.paid;// cant overflow, check in if-condition\n\n\n\n                (realDelta, calculatedInterest) = _calculateInterest(endNonPunitory - state.interestTimestamp, config.interestRate, pending);// cant overflow, check in if-condition\n\n                newInterest = calculatedInterest.add(newInterest);\n\n                newTimestamp = state.interestTimestamp.add(realDelta);\n\n            }\n\n\n\n            uint256 startPunitory;\n\n            uint256 newPunitoryInterest;\n\n            if (config.dueTime < timestamp) {\n\n                startPunitory = max(config.dueTime, state.interestTimestamp);\n\n                uint256 debt = config.amount.add(newInterest);\n\n                newPunitoryInterest = state.punitoryInterest;\n\n                pending = min(debt, debt.add(newPunitoryInterest).sub(state.paid));\n\n\n\n                (realDelta, calculatedInterest) = _calculateInterest(timestamp - startPunitory, config.interestRatePunitory, pending);// cant overflow, check in the previus if\n\n                newPunitoryInterest = newPunitoryInterest.add(calculatedInterest);\n\n                newTimestamp = startPunitory.add(realDelta);\n\n            }\n\n\n\n            if (newInterest != state.interest || newPunitoryInterest != state.punitoryInterest) {\n\n                require(newTimestamp < U_64_OVERFLOW, \"newTimestamp overflow\");\n\n                state.interestTimestamp = uint64(newTimestamp);\n\n                emit _setInterestTimestamp(id, newTimestamp);\n\n\n\n                if (newInterest != state.interest) {\n\n                    require(newInterest < U_128_OVERFLOW, \"newInterest overflow\");\n\n                    state.interest = uint128(newInterest);\n\n                    emit _setInterest(id, uint128(newInterest));\n\n                }\n\n\n\n                if (newPunitoryInterest != state.punitoryInterest) {\n\n                    require(newPunitoryInterest < U_128_OVERFLOW, \"newPunitoryInterest overflow\");\n\n                    state.punitoryInterest = uint128(newPunitoryInterest);\n\n                    emit _setPunitoryInterest(id, uint128(newPunitoryInterest));\n\n                }\n\n                return true;\n\n            }\n\n        }\n",
          "message": "Function 'NanoLoanModel._addInterest' (NanoLoanModel.sol#985-1039) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1051,
          "vulnerability_to_line": 1062,
          "vulnerability_code": "    function _calculateInterest(\n\n        uint256 timeDelta,\n\n        uint256 interestRate,\n\n        uint256 amount\n\n    ) internal pure returns (uint256 realDelta, uint256 interest) {\n\n        if (amount == 0) {\n\n            realDelta = timeDelta;\n\n        } else {\n\n            interest = timeDelta.mult(amount * 100000) / interestRate;\n\n            realDelta = interest.mult(interestRate) / (amount * 100000);\n\n        }\n",
          "message": "Function 'NanoLoanModel._calculateInterest' (NanoLoanModel.sol#1051-1062) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1099,
          "vulnerability_to_line": 1112,
          "vulnerability_code": "    function _decodeData(\n\n        bytes memory _data\n\n    ) internal pure returns (uint128, uint256, uint256, uint64, uint64) {\n\n        require(_data.length == L_DATA, \"Invalid data length\");\n\n        (bytes32 amount, bytes32 interestRate, bytes32 interestRatePunitory,\n\n            bytes32 duesIn, bytes32 cancelableAt) = decode(_data, 16, 32, 32, 8, 8);\n\n        return (\n\n            uint128(uint256(amount)),\n\n            uint256(interestRate),\n\n            uint256(interestRatePunitory),\n\n            uint64(uint256(duesIn)),\n\n            uint64(uint256(cancelableAt))\n\n        );\n",
          "message": "Function 'NanoLoanModel._decodeData' (NanoLoanModel.sol#1099-1112) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1100,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _data\n",
          "message": "Parameter '_data' of NanoLoanModel._decodeData (NanoLoanModel.sol#1100) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 713,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes4 => bool) private _supportedInterface;\n",
          "message": "NanoLoanModel._supportedInterface (NanoLoanModel.sol#713) is never used in NanoLoanModel\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 internal constant MODEL_INTERFACE = 0xaf498c35;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 345,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 internal constant MODEL_DESCRIPTOR_INTERFACE = 0x02735375;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 419,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 457,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXACT_TIME",
          "vulnerability_from_line": 851,
          "vulnerability_to_line": null,
          "vulnerability_code": "        defined = timestamp == now || timestamp <= states[id].interestTimestamp;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 1064,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addDebt(bytes32, uint256) external onlyEngine returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 496,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 503,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 512,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 524,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 544,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 569,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 599,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 634,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 761,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setEngine(address _engine) external onlyOwner returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 767,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setDescriptor(address _descriptor) external onlyOwner returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 341,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 357,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 378,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 411,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 464,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 492,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 685,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 419,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 428,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes4 => bool) private _supportedInterfaces;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 709,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address private altDescriptor;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 713,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes4 => bool) private _supportedInterface;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 717,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private constant U_128_OVERFLOW = 2 ** 128;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 718,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private constant U_64_OVERFLOW = 2 ** 64;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 704,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 705,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint128;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 706,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint64;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 496,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 503,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 512,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 524,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 544,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 569,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 599,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 634,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 191,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getObligation(bytes32 id, uint64 timestamp) external view returns (uint256 amount, bool defined);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 347,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function simFirstObligation(bytes calldata data) external view returns (uint256 amount, uint256 time);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 528,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 549,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 575,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 606,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 642,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) internal pure returns (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 849,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getObligation(bytes32 id, uint64 timestamp) external view returns (uint256 amount, bool defined) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1055,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) internal pure returns (uint256 realDelta, uint256 interest) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1101,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) internal pure returns (uint128, uint256, uint256, uint64, uint64) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1115,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function simFirstObligation(bytes calldata _data) external view returns (uint256 amount, uint256 cancelableAt) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 498,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 505,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 517,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 530,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 551,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 577,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 608,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 651,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Dependence on predictable environment variable (SWC 116)",
          "vulnerability_from_line": 851,
          "vulnerability_to_line": null,
          "vulnerability_code": "        defined = timestamp == now || timestamp <= states[id].interestTimestamp;\n",
          "message": "A control flow decision is made based on The block.timestamp environment variable.\nThe block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-116"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 479,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mult(uint256 x, uint256 y) internal pure returns (uint256) {\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "Dependence on predictable environment variable (SWC 116)",
          "vulnerability_from_line": 835,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(uint64(now) + _duesIn > uint64(now), \"duesIn should be not 0 or overflow now plus duesIn\");\n",
          "message": "A control flow decision is made based on The block.timestamp environment variable.\nThe block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-116"
        },
        {
          "name": "Dependence on predictable environment variable (SWC 116)",
          "vulnerability_from_line": 996,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (state.interestTimestamp < timestamp) {\n",
          "message": "A control flow decision is made based on The block.timestamp environment variable.\nThe block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-116"
        },
        {
          "name": "Dependence on predictable environment variable (SWC 116)",
          "vulnerability_from_line": 998,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (state.interestTimestamp < endNonPunitory) {\n",
          "message": "A control flow decision is made based on The block.timestamp environment variable.\nThe block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-116"
        },
        {
          "name": "Dependence on predictable environment variable (SWC 116)",
          "vulnerability_from_line": 1009,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (config.dueTime < timestamp) {\n",
          "message": "A control flow decision is made based on The block.timestamp environment variable.\nThe block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-116"
        },
        {
          "name": "Dependence on predictable environment variable (SWC 116)",
          "vulnerability_from_line": 470,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(z >= x, \"Add overflow\");\n",
          "message": "A control flow decision is made based on The block.timestamp environment variable.\nThe block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-116"
        },
        {
          "name": "Dependence on predictable environment variable (SWC 116)",
          "vulnerability_from_line": 694,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return (a < b) ? a : b;\n",
          "message": "A control flow decision is made based on The block.timestamp environment variable.\nThe block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-116"
        },
        {
          "name": "Dependence on predictable environment variable (SWC 116)",
          "vulnerability_from_line": 869,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (timestamp > config.dueTime && timestamp > state.interestTimestamp) {\n",
          "message": "A control flow decision is made based on The block.timestamp environment variable.\nThe block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-116"
        },
        {
          "name": "Dependence on predictable environment variable (SWC 116)",
          "vulnerability_from_line": 869,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (timestamp > config.dueTime && timestamp > state.interestTimestamp) {\n",
          "message": "A control flow decision is made based on The block.timestamp environment variable.\nThe block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-116"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}