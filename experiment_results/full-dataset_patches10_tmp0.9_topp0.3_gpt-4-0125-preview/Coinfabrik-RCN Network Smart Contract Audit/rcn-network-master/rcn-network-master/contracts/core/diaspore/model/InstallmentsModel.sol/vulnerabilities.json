{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 663,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract InstallmentsModel is ERC165, BytesUtils, Ownable, Model, ModelDescriptor {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 388,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 389,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _owner = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 390,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit OwnershipTransferred(address(0x0), msg.sender);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 391,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 434,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor()\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 435,
          "vulnerability_to_line": null,
          "vulnerability_code": "        internal\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 436,
          "vulnerability_to_line": null,
          "vulnerability_code": "    {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 437,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _registerInterface(_InterfaceId_ERC165);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 438,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 667,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 668,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _registerInterface(MODEL_INTERFACE);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 669,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _registerInterface(MODEL_DESCRIPTOR_INTERFACE);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 670,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 384,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == _owner, \"The owner should be the sender\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 403,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_newOwner != address(0), \"0x0 Is not a valid owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 457,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 469,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 476,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 488,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_data.length >= _la, \"Reading bytes out of bounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 513,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 538,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 568,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 603,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 650,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 711,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == engine, \"Only engine allowed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 748,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(configs[id].cuota == 0, \"Entry already exist\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 783,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(available < U_128_OVERFLOW, \"Amount overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 826,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(paid < U_128_OVERFLOW, \"Paid overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 836,
          "vulnerability_to_line": null,
          "vulnerability_code": "        revert(\"Not implemented!\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 840,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(target <= now, \"Forbidden advance clock into the future\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 844,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(lentTime < target, \"Clock can't go negative\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 846,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(targetClock > state.clock, \"Clock is ahead of target\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 857,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(config.lentTime != 0, \"The registry does not exist\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1015,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(newClock < U_64_OVERFLOW, \"Clock overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1016,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(newInterest < U_128_OVERFLOW, \"Interest overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1142,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newInterest < U_128_OVERFLOW, \"New interest overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1161,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(cuota > 0, \"Cuota can't be 0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1162,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(installments > 0, \"Installments can't be 0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1163,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(timeUnit > 0, \"Time unit can't be 0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1165,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(timeUnit <= duration, \"Time unit must be lower or equal than installment duration\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1166,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(timeUnit < interestRate, \"Interest rate by time unit is too low\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1172,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_data.length == L_DATA, \"Invalid data length\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 813,
          "vulnerability_to_line": null,
          "vulnerability_code": "                if (clock / duration >= config.installments && baseDebt + interest <= paid) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 814,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    // Registry paid!\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 815,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    state.status = uint8(STATUS_PAID);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 816,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    emit ChangedStatus(id, now, STATUS_PAID);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 817,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    break;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 818,
          "vulnerability_to_line": null,
          "vulnerability_code": "                }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1121,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (nextInstallmentDelta <= _targetDelta && _clock / _duration < _installments) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1122,
          "vulnerability_to_line": null,
          "vulnerability_code": "            delta = nextInstallmentDelta;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1123,
          "vulnerability_to_line": null,
          "vulnerability_code": "            installmentCompleted = true;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1124,
          "vulnerability_to_line": null,
          "vulnerability_code": "        } else {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1125,
          "vulnerability_to_line": null,
          "vulnerability_code": "            delta = _targetDelta;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1126,
          "vulnerability_to_line": null,
          "vulnerability_code": "            installmentCompleted = false;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1127,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 840,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(target <= now, \"Forbidden advance clock into the future\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1165,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(timeUnit <= duration, \"Time unit must be lower or equal than installment duration\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1166,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(timeUnit < interestRate, \"Interest rate by time unit is too low\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_87"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 468,
          "vulnerability_to_line": 473,
          "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n\n        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, mul(32, index))))\n\n        }\n",
          "message": "BytesUtils.readBytes32 (InstallmentsModel.sol#468-473) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 475,
          "vulnerability_to_line": 482,
          "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n\n        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, offset)))\n\n            let lb := sub(32, length)\n\n            if lb { o := div(o, exp(2, mul(lb, 8))) }\n\n        }\n",
          "message": "BytesUtils.read (InstallmentsModel.sol#475-482) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 484,
          "vulnerability_to_line": 494,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la\n\n    ) internal pure returns (bytes32 _a) {\n\n        require(_data.length >= _la, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            _a := mload(add(_data, 32))\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n        }\n",
          "message": "BytesUtils.decode (InstallmentsModel.sol#484-494) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 496,
          "vulnerability_to_line": 514,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb\n\n    ) internal pure returns (bytes32 _a, bytes32 _b) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode (InstallmentsModel.sol#496-514) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 516,
          "vulnerability_to_line": 539,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode (InstallmentsModel.sol#516-539) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 541,
          "vulnerability_to_line": 569,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode (InstallmentsModel.sol#541-569) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 571,
          "vulnerability_to_line": 604,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode (InstallmentsModel.sol#571-604) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 606,
          "vulnerability_to_line": 651,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le,\n\n        uint256 _lf\n\n    ) internal pure returns (\n\n        bytes32 _a,\n\n        bytes32 _b,\n\n        bytes32 _c,\n\n        bytes32 _d,\n\n        bytes32 _e,\n\n        bytes32 _f\n\n    ) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := add(o, _le)\n\n            _f := mload(o)\n\n            l := sub(32, _lf)\n\n            if l { _f := div(_f, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode (InstallmentsModel.sol#606-651) is declared view but contains assembly code\n"
        },
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 747,
          "vulnerability_to_line": 767,
          "vulnerability_code": "    function create(bytes32 id, bytes calldata data) external onlyEngine returns (bool) {\n\n        require(configs[id].cuota == 0, \"Entry already exist\");\n\n\n\n        (uint128 cuota, uint256 interestRate, uint24 installments, uint40 duration, uint32 timeUnit) = _validate(data);\n\n\n\n        configs[id] = Config({\n\n            installments: installments,\n\n            duration: duration,\n\n            lentTime: uint64(now),\n\n            cuota: cuota,\n\n            interestRate: interestRate,\n\n            timeUnit: timeUnit\n\n        });\n\n\n\n        states[id].clock = duration;\n\n\n\n        emit Created(id);\n\n        emit _setClock(id, duration);\n\n\n\n        return true;\n",
          "message": "InstallmentsModel.create (InstallmentsModel.sol#747-767) uses a dangerous strict equality:\n\t- require(bool,string)(configs[id].cuota == 0,Entry already exist)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 468,
          "vulnerability_to_line": 473,
          "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n\n        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, mul(32, index))))\n\n        }\n",
          "message": "BytesUtils.readBytes32 uses assembly (InstallmentsModel.sol#468-473)\n\t- InstallmentsModel.sol#470-472\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 475,
          "vulnerability_to_line": 482,
          "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n\n        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, offset)))\n\n            let lb := sub(32, length)\n\n            if lb { o := div(o, exp(2, mul(lb, 8))) }\n\n        }\n",
          "message": "BytesUtils.read uses assembly (InstallmentsModel.sol#475-482)\n\t- InstallmentsModel.sol#477-481\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 484,
          "vulnerability_to_line": 494,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la\n\n    ) internal pure returns (bytes32 _a) {\n\n        require(_data.length >= _la, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            _a := mload(add(_data, 32))\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n        }\n",
          "message": "BytesUtils.decode uses assembly (InstallmentsModel.sol#484-494)\n\t- InstallmentsModel.sol#489-493\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 496,
          "vulnerability_to_line": 514,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb\n\n    ) internal pure returns (bytes32 _a, bytes32 _b) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode uses assembly (InstallmentsModel.sol#496-514)\n\t- InstallmentsModel.sol#502-512\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 516,
          "vulnerability_to_line": 539,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode uses assembly (InstallmentsModel.sol#516-539)\n\t- InstallmentsModel.sol#523-537\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 541,
          "vulnerability_to_line": 569,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode uses assembly (InstallmentsModel.sol#541-569)\n\t- InstallmentsModel.sol#549-567\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 571,
          "vulnerability_to_line": 604,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode uses assembly (InstallmentsModel.sol#571-604)\n\t- InstallmentsModel.sol#580-602\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 606,
          "vulnerability_to_line": 651,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le,\n\n        uint256 _lf\n\n    ) internal pure returns (\n\n        bytes32 _a,\n\n        bytes32 _b,\n\n        bytes32 _c,\n\n        bytes32 _d,\n\n        bytes32 _e,\n\n        bytes32 _f\n\n    ) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := add(o, _le)\n\n            _f := mload(o)\n\n            l := sub(32, _lf)\n\n            if l { _f := div(_f, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode uses assembly (InstallmentsModel.sol#606-651)\n\t- InstallmentsModel.sol#623-649\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": "Detected issues with version pragma in InstallmentsModel.sol:\n\t- pragma solidity^0.5.11 (InstallmentsModel.sol#3): it allows old versions\n\t- pragma solidity^0.5.11 (InstallmentsModel.sol#18): it allows old versions\n\t- pragma solidity^0.5.11 (InstallmentsModel.sol#341): it allows old versions\n\t- pragma solidity^0.5.11 (InstallmentsModel.sol#357): it allows old versions\n\t- pragma solidity^0.5.11 (InstallmentsModel.sol#378): it allows old versions\n\t- pragma solidity^0.5.11 (InstallmentsModel.sol#411): it allows old versions\n\t- pragma solidity^0.5.11 (InstallmentsModel.sol#464): it allows old versions\n\t- pragma solidity^0.5.11 (InstallmentsModel.sol#657): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 402,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferOwnership(address _newOwner) external onlyOwner {\n",
          "message": "Parameter '_newOwner' of Ownable.transferOwnership (InstallmentsModel.sol#402) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 381,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address internal _owner;\n",
          "message": "Variable 'Ownable._owner' (InstallmentsModel.sol#381) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 454,
          "vulnerability_to_line": 459,
          "vulnerability_code": "    function _registerInterface(bytes4 interfaceId)\n\n        internal\n\n    {\n\n        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n\n        _supportedInterfaces[interfaceId] = true;\n",
          "message": "Function 'ERC165._registerInterface' (InstallmentsModel.sol#454-459) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 419,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
          "message": "Constant 'ERC165._InterfaceId_ERC165' (InstallmentsModel.sol#419) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 485,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _data,\n",
          "message": "Parameter '_data' of BytesUtils.decode (InstallmentsModel.sol#485) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 486,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _la\n",
          "message": "Parameter '_la' of BytesUtils.decode (InstallmentsModel.sol#486) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 497,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _data,\n",
          "message": "Parameter '_data' of BytesUtils.decode (InstallmentsModel.sol#497) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 517,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _data,\n",
          "message": "Parameter '_data' of BytesUtils.decode (InstallmentsModel.sol#517) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 542,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _data,\n",
          "message": "Parameter '_data' of BytesUtils.decode (InstallmentsModel.sol#542) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 572,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _data,\n",
          "message": "Parameter '_data' of BytesUtils.decode (InstallmentsModel.sol#572) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 607,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _data,\n",
          "message": "Parameter '_data' of BytesUtils.decode (InstallmentsModel.sol#607) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 685,
          "vulnerability_to_line": null,
          "vulnerability_code": "    event _setEngine(address _engine);\n",
          "message": "Event 'InstallmentsModel._setEngine' (InstallmentsModel.sol#685) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 686,
          "vulnerability_to_line": null,
          "vulnerability_code": "    event _setDescriptor(address _descriptor);\n",
          "message": "Event 'InstallmentsModel._setDescriptor' (InstallmentsModel.sol#686) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 688,
          "vulnerability_to_line": null,
          "vulnerability_code": "    event _setClock(bytes32 _id, uint64 _to);\n",
          "message": "Event 'InstallmentsModel._setClock' (InstallmentsModel.sol#688) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 689,
          "vulnerability_to_line": null,
          "vulnerability_code": "    event _setPaidBase(bytes32 _id, uint128 _paidBase);\n",
          "message": "Event 'InstallmentsModel._setPaidBase' (InstallmentsModel.sol#689) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 690,
          "vulnerability_to_line": null,
          "vulnerability_code": "    event _setInterest(bytes32 _id, uint128 _interest);\n",
          "message": "Event 'InstallmentsModel._setInterest' (InstallmentsModel.sol#690) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 850,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isOperator(address _target) external view returns (bool) {\n",
          "message": "Parameter '_target' of InstallmentsModel.isOperator (InstallmentsModel.sol#850) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 971,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function simFirstObligation(bytes calldata _data) external view returns (uint256 amount, uint256 time) {\n",
          "message": "Parameter '_data' of InstallmentsModel.simFirstObligation (InstallmentsModel.sol#971) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 975,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function simTotalObligation(bytes calldata _data) external view returns (uint256 amount) {\n",
          "message": "Parameter '_data' of InstallmentsModel.simTotalObligation (InstallmentsModel.sol#975) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 980,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function simDuration(bytes calldata _data) external view returns (uint256 duration) {\n",
          "message": "Parameter '_data' of InstallmentsModel.simDuration (InstallmentsModel.sol#980) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 985,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function simPunitiveInterestRate(bytes calldata _data) external view returns (uint256 punitiveInterestRate) {\n",
          "message": "Parameter '_data' of InstallmentsModel.simPunitiveInterestRate (InstallmentsModel.sol#985) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 989,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function simFrequency(bytes calldata _data) external view returns (uint256 frequency) {\n",
          "message": "Parameter '_data' of InstallmentsModel.simFrequency (InstallmentsModel.sol#989) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 993,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function simInstallments(bytes calldata _data) external view returns (uint256 installments) {\n",
          "message": "Parameter '_data' of InstallmentsModel.simInstallments (InstallmentsModel.sol#993) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 725,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setEngine(address _engine) external onlyOwner returns (bool) {\n",
          "message": "Parameter '_engine' of InstallmentsModel.setEngine (InstallmentsModel.sol#725) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 731,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setDescriptor(address _descriptor) external onlyOwner returns (bool) {\n",
          "message": "Parameter '_descriptor' of InstallmentsModel.setDescriptor (InstallmentsModel.sol#731) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 738,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint128 _cuota,\n",
          "message": "Parameter '_cuota' of InstallmentsModel.encodeData (InstallmentsModel.sol#738) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 739,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _interestRate,\n",
          "message": "Parameter '_interestRate' of InstallmentsModel.encodeData (InstallmentsModel.sol#739) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 740,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint24 _installments,\n",
          "message": "Parameter '_installments' of InstallmentsModel.encodeData (InstallmentsModel.sol#740) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 741,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint40 _duration,\n",
          "message": "Parameter '_duration' of InstallmentsModel.encodeData (InstallmentsModel.sol#741) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 742,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint32 _timeUnit\n",
          "message": "Parameter '_timeUnit' of InstallmentsModel.encodeData (InstallmentsModel.sol#742) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 910,
          "vulnerability_to_line": 928,
          "vulnerability_code": "    function _simRunClock(\n\n        uint256 _clock,\n\n        uint256 _targetClock,\n\n        uint256 _prevInterest,\n\n        Config memory _config,\n\n        State memory _state\n\n    ) internal pure returns (uint256 interest, uint256 clock) {\n\n        (interest, clock) = _runAdvanceClock({\n\n            _clock: _clock,\n\n            _timeUnit: _config.timeUnit,\n\n            _interest: _prevInterest,\n\n            _duration: _config.duration,\n\n            _cuota: _config.cuota,\n\n            _installments: _config.installments,\n\n            _paidBase: _state.paidBase,\n\n            _interestRate: _config.interestRate,\n\n            _targetClock: _targetClock\n\n        });\n",
          "message": "Function 'InstallmentsModel._simRunClock' (InstallmentsModel.sol#910-928) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 911,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _clock,\n",
          "message": "Parameter '_clock' of InstallmentsModel._simRunClock (InstallmentsModel.sol#911) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 912,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _targetClock,\n",
          "message": "Parameter '_targetClock' of InstallmentsModel._simRunClock (InstallmentsModel.sol#912) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 913,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _prevInterest,\n",
          "message": "Parameter '_prevInterest' of InstallmentsModel._simRunClock (InstallmentsModel.sol#913) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 914,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Config memory _config,\n",
          "message": "Parameter '_config' of InstallmentsModel._simRunClock (InstallmentsModel.sol#914) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 915,
          "vulnerability_to_line": null,
          "vulnerability_code": "        State memory _state\n",
          "message": "Parameter '_state' of InstallmentsModel._simRunClock (InstallmentsModel.sol#915) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 997,
          "vulnerability_to_line": 1029,
          "vulnerability_code": "    function _advanceClock(bytes32 id, uint256 _target) internal returns (bool) {\n\n        Config storage config = configs[id];\n\n        State storage state = states[id];\n\n\n\n        uint256 clock = state.clock;\n\n        if (clock < _target) {\n\n            (uint256 newInterest, uint256 newClock) = _runAdvanceClock({\n\n                _clock: clock,\n\n                _timeUnit: config.timeUnit,\n\n                _interest: state.interest,\n\n                _duration: config.duration,\n\n                _cuota: config.cuota,\n\n                _installments: config.installments,\n\n                _paidBase: state.paidBase,\n\n                _interestRate: config.interestRate,\n\n                _targetClock: _target\n\n            });\n\n\n\n            require(newClock < U_64_OVERFLOW, \"Clock overflow\");\n\n            require(newInterest < U_128_OVERFLOW, \"Interest overflow\");\n\n\n\n            emit _setClock(id, uint64(newClock));\n\n\n\n            if (newInterest != 0) {\n\n                emit _setInterest(id, uint128(newInterest));\n\n            }\n\n\n\n            state.clock = uint64(newClock);\n\n            state.interest = uint128(newInterest);\n\n\n\n            return true;\n\n        }\n",
          "message": "Function 'InstallmentsModel._advanceClock' (InstallmentsModel.sol#997-1029) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 997,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _advanceClock(bytes32 id, uint256 _target) internal returns (bool) {\n",
          "message": "Parameter '_target' of InstallmentsModel._advanceClock (InstallmentsModel.sol#997) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1031,
          "vulnerability_to_line": 1062,
          "vulnerability_code": "    function _getClosingObligation(bytes32 id) internal view returns (uint256) {\n\n        State storage state = states[id];\n\n        Config storage config = configs[id];\n\n\n\n        // Static storage loads\n\n        uint256 installments = config.installments;\n\n        uint256 cuota = config.cuota;\n\n        uint256 currentClock = uint64(now) - config.lentTime;\n\n\n\n        uint256 interest;\n\n        uint256 clock = state.clock;\n\n\n\n        if (clock >= currentClock) {\n\n            interest = state.interest;\n\n        } else {\n\n            (interest,) = _runAdvanceClock({\n\n                _clock: clock,\n\n                _timeUnit: config.timeUnit,\n\n                _interest: state.interest,\n\n                _duration: config.duration,\n\n                _cuota: cuota,\n\n                _installments: installments,\n\n                _paidBase: state.paidBase,\n\n                _interestRate: config.interestRate,\n\n                _targetClock: currentClock\n\n            });\n\n        }\n\n\n\n        uint256 debt = cuota * installments + interest;\n\n        uint256 paid = state.paid;\n\n        return debt > paid ? debt - paid : 0;\n",
          "message": "Function 'InstallmentsModel._getClosingObligation' (InstallmentsModel.sol#1031-1062) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1064,
          "vulnerability_to_line": 1112,
          "vulnerability_code": "    function _runAdvanceClock(\n\n        uint256 _clock,\n\n        uint256 _timeUnit,\n\n        uint256 _interest,\n\n        uint256 _duration,\n\n        uint256 _cuota,\n\n        uint256 _installments,\n\n        uint256 _paidBase,\n\n        uint256 _interestRate,\n\n        uint256 _targetClock\n\n    ) internal pure returns (uint256 interest, uint256 clock) {\n\n        // Advance clock to lentTime if never advanced before\n\n        clock = _clock;\n\n        interest = _interest;\n\n\n\n        // Aux variables\n\n        uint256 delta;\n\n        bool installmentCompleted;\n\n\n\n        do {\n\n            // Delta to next installment and absolute delta (no exceeding 1 installment)\n\n            (delta, installmentCompleted) = _calcDelta({\n\n                _targetDelta: _targetClock - clock,\n\n                _clock: clock,\n\n                _duration: _duration,\n\n                _installments: _installments\n\n            });\n\n\n\n            // Running debt\n\n            uint256 newInterest = _newInterest({\n\n                _clock: clock,\n\n                _timeUnit: _timeUnit,\n\n                _duration: _duration,\n\n                _installments: _installments,\n\n                _cuota: _cuota,\n\n                _paidBase: _paidBase,\n\n                _delta: delta,\n\n                _interestRate: _interestRate\n\n            });\n\n\n\n            // Don't change clock unless we have a change\n\n            if (installmentCompleted || newInterest > 0) {\n\n                clock += delta;\n\n                interest += newInterest;\n\n            } else {\n\n                break;\n\n            }\n\n        } while (clock < _targetClock);\n",
          "message": "Function 'InstallmentsModel._runAdvanceClock' (InstallmentsModel.sol#1064-1112) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1065,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _clock,\n",
          "message": "Parameter '_clock' of InstallmentsModel._runAdvanceClock (InstallmentsModel.sol#1065) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1066,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _timeUnit,\n",
          "message": "Parameter '_timeUnit' of InstallmentsModel._runAdvanceClock (InstallmentsModel.sol#1066) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1067,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _interest,\n",
          "message": "Parameter '_interest' of InstallmentsModel._runAdvanceClock (InstallmentsModel.sol#1067) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1068,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _duration,\n",
          "message": "Parameter '_duration' of InstallmentsModel._runAdvanceClock (InstallmentsModel.sol#1068) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1069,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _cuota,\n",
          "message": "Parameter '_cuota' of InstallmentsModel._runAdvanceClock (InstallmentsModel.sol#1069) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1070,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _installments,\n",
          "message": "Parameter '_installments' of InstallmentsModel._runAdvanceClock (InstallmentsModel.sol#1070) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1071,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _paidBase,\n",
          "message": "Parameter '_paidBase' of InstallmentsModel._runAdvanceClock (InstallmentsModel.sol#1071) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1072,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _interestRate,\n",
          "message": "Parameter '_interestRate' of InstallmentsModel._runAdvanceClock (InstallmentsModel.sol#1072) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1073,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _targetClock\n",
          "message": "Parameter '_targetClock' of InstallmentsModel._runAdvanceClock (InstallmentsModel.sol#1073) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1114,
          "vulnerability_to_line": 1128,
          "vulnerability_code": "    function _calcDelta(\n\n        uint256 _targetDelta,\n\n        uint256 _clock,\n\n        uint256 _duration,\n\n        uint256 _installments\n\n    ) internal pure returns (uint256 delta, bool installmentCompleted) {\n\n        uint256 nextInstallmentDelta = _duration - _clock % _duration;\n\n        if (nextInstallmentDelta <= _targetDelta && _clock / _duration < _installments) {\n\n            delta = nextInstallmentDelta;\n\n            installmentCompleted = true;\n\n        } else {\n\n            delta = _targetDelta;\n\n            installmentCompleted = false;\n\n        }\n",
          "message": "Function 'InstallmentsModel._calcDelta' (InstallmentsModel.sol#1114-1128) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1115,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _targetDelta,\n",
          "message": "Parameter '_targetDelta' of InstallmentsModel._calcDelta (InstallmentsModel.sol#1115) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1116,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _clock,\n",
          "message": "Parameter '_clock' of InstallmentsModel._calcDelta (InstallmentsModel.sol#1116) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1117,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _duration,\n",
          "message": "Parameter '_duration' of InstallmentsModel._calcDelta (InstallmentsModel.sol#1117) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1118,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _installments\n",
          "message": "Parameter '_installments' of InstallmentsModel._calcDelta (InstallmentsModel.sol#1118) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1130,
          "vulnerability_to_line": 1144,
          "vulnerability_code": "    function _newInterest(\n\n        uint256 _clock,\n\n        uint256 _timeUnit,\n\n        uint256 _duration,\n\n        uint256 _installments,\n\n        uint256 _cuota,\n\n        uint256 _paidBase,\n\n        uint256 _delta,\n\n        uint256 _interestRate\n\n    ) internal pure returns (uint256) {\n\n        uint256 runningDebt = _baseDebt(_clock, _duration, _installments, _cuota) - _paidBase;\n\n        uint256 newInterest = (100000 * (_delta / _timeUnit) * runningDebt) / (_interestRate / _timeUnit);\n\n        require(newInterest < U_128_OVERFLOW, \"New interest overflow\");\n\n        return newInterest;\n",
          "message": "Function 'InstallmentsModel._newInterest' (InstallmentsModel.sol#1130-1144) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1131,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _clock,\n",
          "message": "Parameter '_clock' of InstallmentsModel._newInterest (InstallmentsModel.sol#1131) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1132,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _timeUnit,\n",
          "message": "Parameter '_timeUnit' of InstallmentsModel._newInterest (InstallmentsModel.sol#1132) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1133,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _duration,\n",
          "message": "Parameter '_duration' of InstallmentsModel._newInterest (InstallmentsModel.sol#1133) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1134,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _installments,\n",
          "message": "Parameter '_installments' of InstallmentsModel._newInterest (InstallmentsModel.sol#1134) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1135,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _cuota,\n",
          "message": "Parameter '_cuota' of InstallmentsModel._newInterest (InstallmentsModel.sol#1135) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1136,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _paidBase,\n",
          "message": "Parameter '_paidBase' of InstallmentsModel._newInterest (InstallmentsModel.sol#1136) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1137,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _delta,\n",
          "message": "Parameter '_delta' of InstallmentsModel._newInterest (InstallmentsModel.sol#1137) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1138,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _interestRate\n",
          "message": "Parameter '_interestRate' of InstallmentsModel._newInterest (InstallmentsModel.sol#1138) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1146,
          "vulnerability_to_line": 1154,
          "vulnerability_code": "    function _baseDebt(\n\n        uint256 clock,\n\n        uint256 duration,\n\n        uint256 installments,\n\n        uint256 cuota\n\n    ) internal pure returns (uint256 base) {\n\n        uint256 installment = clock / duration;\n\n        return uint128(installment < installments ? installment * cuota : installments * cuota);\n",
          "message": "Function 'InstallmentsModel._baseDebt' (InstallmentsModel.sol#1146-1154) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1156,
          "vulnerability_to_line": 1167,
          "vulnerability_code": "    function _validate(\n\n        bytes memory _data\n\n    ) internal pure returns (uint128 cuota, uint256 interestRate, uint24 installments, uint40 duration, uint32 timeUnit) {\n\n        (cuota, interestRate, installments, duration, timeUnit) = _decodeData(_data);\n\n\n\n        require(cuota > 0, \"Cuota can't be 0\");\n\n        require(installments > 0, \"Installments can't be 0\");\n\n        require(timeUnit > 0, \"Time unit can't be 0\");\n\n\n\n        require(timeUnit <= duration, \"Time unit must be lower or equal than installment duration\");\n\n        require(timeUnit < interestRate, \"Interest rate by time unit is too low\");\n",
          "message": "Function 'InstallmentsModel._validate' (InstallmentsModel.sol#1156-1167) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1157,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _data\n",
          "message": "Parameter '_data' of InstallmentsModel._validate (InstallmentsModel.sol#1157) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1169,
          "vulnerability_to_line": 1181,
          "vulnerability_code": "    function _decodeData(\n\n        bytes memory _data\n\n    ) internal pure returns (uint128, uint256, uint24, uint40, uint32) {\n\n        require(_data.length == L_DATA, \"Invalid data length\");\n\n        (\n\n            bytes32 cuota,\n\n            bytes32 interestRate,\n\n            bytes32 installments,\n\n            bytes32 duration,\n\n            bytes32 timeUnit\n\n        ) = decode(_data, 16, 32, 3, 5, 4);\n\n        return (uint128(uint256(cuota)), uint256(interestRate), uint24(uint256(installments)), uint40(uint256(duration)), uint32(uint256(timeUnit)));\n",
          "message": "Function 'InstallmentsModel._decodeData' (InstallmentsModel.sol#1169-1181) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1170,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _data\n",
          "message": "Parameter '_data' of InstallmentsModel._decodeData (InstallmentsModel.sol#1170) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 665,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes4 => bool) private _supportedInterface;\n",
          "message": "InstallmentsModel._supportedInterface (InstallmentsModel.sol#665) is never used in InstallmentsModel\nInstallmentsModel.U_40_OVERFLOW (InstallmentsModel.sol#682) is never used in InstallmentsModel\nInstallmentsModel.U_24_OVERFLOW (InstallmentsModel.sol#683) is never used in InstallmentsModel\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 internal constant MODEL_INTERFACE = 0xaf498c35;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 345,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 internal constant MODEL_DESCRIPTOR_INTERFACE = 0x02735375;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 419,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 457,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DIV_MUL",
          "vulnerability_from_line": 1141,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 newInterest = (100000 * (_delta / _timeUnit) * runningDebt) / (_interestRate / _timeUnit);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DIV_MUL",
          "vulnerability_from_line": 1141,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 newInterest = (100000 * (_delta / _timeUnit) * runningDebt) / (_interestRate / _timeUnit);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 835,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addDebt(bytes32 id, uint256 amount) external onlyEngine returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 468,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 475,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 484,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 496,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 516,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 541,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 571,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 606,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 725,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setEngine(address _engine) external onlyOwner returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 731,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setDescriptor(address _descriptor) external onlyOwner returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 341,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 357,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 378,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 411,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 464,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 657,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 419,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 428,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes4 => bool) private _supportedInterfaces;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 665,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes4 => bool) private _supportedInterface;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 673,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address private altDescriptor;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 680,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private constant U_128_OVERFLOW = 2 ** 128;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 681,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private constant U_64_OVERFLOW = 2 ** 64;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 682,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private constant U_40_OVERFLOW = 2 ** 40;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 683,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private constant U_24_OVERFLOW = 2 ** 24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 468,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 475,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 484,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 496,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 516,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 541,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 571,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 606,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 191,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getObligation(bytes32 id, uint64 timestamp) external view returns (uint256 amount, bool defined);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 347,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function simFirstObligation(bytes calldata data) external view returns (uint256 amount, uint256 time);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 500,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 521,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 547,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 578,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 614,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) internal pure returns (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 865,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getObligation(bytes32 id, uint64 timestamp) external view returns (uint256, bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 916,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) internal pure returns (uint256 interest, uint256 clock) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 971,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function simFirstObligation(bytes calldata _data) external view returns (uint256 amount, uint256 time) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1074,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) internal pure returns (uint256 interest, uint256 clock) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1119,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) internal pure returns (uint256 delta, bool installmentCompleted) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1158,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) internal pure returns (uint128 cuota, uint256 interestRate, uint24 installments, uint40 duration, uint32 timeUnit) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1171,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) internal pure returns (uint128, uint256, uint24, uint40, uint32) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 470,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 477,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 489,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 502,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 523,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 549,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 580,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 623,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Dependence on predictable environment variable (SWC 116)",
          "vulnerability_from_line": 840,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(target <= now, \"Forbidden advance clock into the future\");\n",
          "message": "A control flow decision is made based on The block.timestamp environment variable.\nThe block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-116"
        },
        {
          "name": "Dependence on predictable environment variable (SWC 116)",
          "vulnerability_from_line": 1002,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (clock < _target) {\n",
          "message": "A control flow decision is made based on The block.timestamp environment variable.\nThe block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-116"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 877,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 base = _baseDebt(\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 795,
          "vulnerability_to_line": null,
          "vulnerability_code": "                baseDebt = _baseDebt(clock, duration, config.installments, config.cuota);\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "Dependence on predictable environment variable (SWC 116)",
          "vulnerability_from_line": 1043,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (clock >= currentClock) {\n",
          "message": "A control flow decision is made based on The block.timestamp environment variable.\nThe block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-116"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 1085,
          "vulnerability_to_line": null,
          "vulnerability_code": "            (delta, installmentCompleted) = _calcDelta({\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}