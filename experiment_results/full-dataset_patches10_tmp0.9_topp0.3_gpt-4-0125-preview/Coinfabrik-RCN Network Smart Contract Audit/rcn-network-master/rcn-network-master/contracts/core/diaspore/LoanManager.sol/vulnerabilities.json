{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 948,
          "vulnerability_to_line": null,
          "vulnerability_code": "            (bool success, bytes4 result) = _noThrowCall(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 949,
          "vulnerability_to_line": null,
          "vulnerability_code": "                _to,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 950,
          "vulnerability_to_line": null,
          "vulnerability_code": "                abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 951,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    ERC721_RECEIVED,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 952,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    msg.sender,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 953,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    holder,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 954,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    _assetId,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 955,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    _userData\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 956,
          "vulnerability_to_line": null,
          "vulnerability_code": "                )\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 957,
          "vulnerability_to_line": null,
          "vulnerability_code": "            );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 962,
          "vulnerability_to_line": null,
          "vulnerability_code": "                (success, result) = _noThrowCall(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 963,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    _to,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 964,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 965,
          "vulnerability_to_line": null,
          "vulnerability_code": "                        ERC721_RECEIVED_LEGACY,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 966,
          "vulnerability_to_line": null,
          "vulnerability_code": "                        holder,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 967,
          "vulnerability_to_line": null,
          "vulnerability_code": "                        _assetId,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 968,
          "vulnerability_to_line": null,
          "vulnerability_code": "                        _userData\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 969,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    )\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 970,
          "vulnerability_to_line": null,
          "vulnerability_code": "                );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1548,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, bytes32 paid) = _safeGasCall(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1549,
          "vulnerability_to_line": null,
          "vulnerability_code": "            address(_model),\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1550,
          "vulnerability_to_line": null,
          "vulnerability_code": "            abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1551,
          "vulnerability_to_line": null,
          "vulnerability_code": "                _model.addPaid.selector,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1552,
          "vulnerability_to_line": null,
          "vulnerability_code": "                _id,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1553,
          "vulnerability_to_line": null,
          "vulnerability_code": "                _available\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1554,
          "vulnerability_to_line": null,
          "vulnerability_code": "            )\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1555,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1630,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, bytes32 result) = _safeGasCall(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1631,
          "vulnerability_to_line": null,
          "vulnerability_code": "            address(debt.model),\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1632,
          "vulnerability_to_line": null,
          "vulnerability_code": "            abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1633,
          "vulnerability_to_line": null,
          "vulnerability_code": "                debt.model.run.selector,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1634,
          "vulnerability_to_line": null,
          "vulnerability_code": "                _id\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1635,
          "vulnerability_to_line": null,
          "vulnerability_code": "            )\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1636,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1724,
          "vulnerability_to_line": null,
          "vulnerability_code": "            (bool success, uint256 result) = _safeGasStaticCall(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1725,
          "vulnerability_to_line": null,
          "vulnerability_code": "                address(debt.model),\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1726,
          "vulnerability_to_line": null,
          "vulnerability_code": "                abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1727,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    debt.model.getStatus.selector,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1728,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    _id\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1729,
          "vulnerability_to_line": null,
          "vulnerability_code": "                )\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 1730,
          "vulnerability_to_line": null,
          "vulnerability_code": "            );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 2423,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, bytes32 result) = _safeCall(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 2424,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _borrower,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 2425,
          "vulnerability_to_line": null,
          "vulnerability_code": "            abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 2426,
          "vulnerability_to_line": null,
          "vulnerability_code": "                0x76ba6009,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 2427,
          "vulnerability_to_line": null,
          "vulnerability_code": "                _id\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 2428,
          "vulnerability_to_line": null,
          "vulnerability_code": "            )\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 2429,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 1068,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract DebtEngine is ERC721Base, Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 370,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() internal {}\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 481,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor()\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 482,
          "vulnerability_to_line": null,
          "vulnerability_code": "        internal\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 483,
          "vulnerability_to_line": null,
          "vulnerability_code": "    {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 484,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _registerInterface(_InterfaceId_ERC165);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 485,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 545,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 546,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string memory name,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 547,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string memory symbol\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 548,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 549,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _name = name;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 550,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _symbol = symbol;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 551,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 552,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _registerInterface(ERC_721_INTERFACE);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 553,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _registerInterface(ERC_721_METADATA_INTERFACE);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 554,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _registerInterface(ERC_721_ENUMERATION_INTERFACE);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1038,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1039,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _owner = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1040,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit OwnershipTransferred(address(0x0), msg.sender);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1041,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1156,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1157,
          "vulnerability_to_line": null,
          "vulnerability_code": "        IERC20 _token\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1158,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) public ERC721Base(\"RCN Debt Record\", \"RDR\") {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1159,
          "vulnerability_to_line": null,
          "vulnerability_code": "        token = _token;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1160,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1161,
          "vulnerability_to_line": null,
          "vulnerability_code": "        // Sanity checks\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1162,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(_token).isContract(), \"Token should be a contract\");\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1163,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 2208,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(DebtEngine _debtEngine) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 2209,
          "vulnerability_to_line": null,
          "vulnerability_code": "        debtEngine = _debtEngine;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 2210,
          "vulnerability_to_line": null,
          "vulnerability_code": "        token = debtEngine.token();\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 2211,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(token) != address(0), \"Error loading token\");\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 2212,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1705,
          "vulnerability_to_line": null,
          "vulnerability_code": "                balance = debts[target].balance;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1706,
          "vulnerability_to_line": null,
          "vulnerability_code": "                debts[target].balance = 0;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1438,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < count; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1473,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < count; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1702,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < _ids.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 436,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(z >= x, \"Add overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 441,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(x >= y, \"Sub overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 451,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(z/x == y, \"Mult overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 504,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 589,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_holderOf[_tokenId] != address(0), \"Asset does not exist\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 647,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_index < _allTokens.length, \"Index out of bounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 661,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_owner != address(0), \"0x0 Is not a valid owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 662,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_index < _balanceOf(_owner), \"Index out of bounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 748,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_operator != address(0), \"0x0 is an invalid operator\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 777,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == holder || _isApprovedForAll(msg.sender, holder), \"msg.sender can't approve\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 838,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_holderOf[_assetId] == address(0), \"Asset already exists\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 850,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_isAuthorized(msg.sender, _assetId), \"msg.sender Not authorized\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 855,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_ownerOf(_assetId) == _from, \"Not current owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 860,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_target != address(0), \"Target can't be 0x0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 972,
          "vulnerability_to_line": null,
          "vulnerability_code": "                require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 973,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    success && result == ERC721_RECEIVED_LEGACY,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 974,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    \"Contract rejected the token\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 975,
          "vulnerability_to_line": null,
          "vulnerability_code": "                );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1034,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == _owner, \"The owner should be the sender\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1053,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_newOwner != address(0), \"0x0 Is not a valid owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1162,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(_token).isContract(), \"Token should be a contract\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1194,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_model.create(id, _data), \"Error creating debt in model\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1231,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_model.create(id, _data), \"Error creating debt in model\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1265,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_model.create(id, _data), \"Error creating debt in model\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1331,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(paid <= _amount, \"Paid can't be more than requested\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1344,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(token.transferFrom(msg.sender, address(this), paidToken), \"Error pulling payment tokens\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1348,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newBalance < 340282366920938463463374607431768211456, \"uint128 Overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1388,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(paid <= available, \"Paid can't exceed available\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1393,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(paidToken <= amount, \"Paid can't exceed requested\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1399,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(token.transferFrom(msg.sender, address(this), paidToken), \"Error pulling tokens\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1404,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(available < 340282366920938463463374607431768211456, \"uint128 Overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1427,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(count == _amounts.length, \"_ids and _amounts should have the same length\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1462,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(count == _tokenAmounts.length, \"_ids and _amounts should have the same length\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1482,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(paidTokens[i] <= tokenAmount, \"Paid can't exceed requested\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1527,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(paid <= _amount, \"Paid can't be more than requested\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1533,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(token.transferFrom(msg.sender, address(this), paidToken), \"Error pulling payment tokens\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1537,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newBalance < 340282366920938463463374607431768211456, \"uint128 Overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1546,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_model != Model(0), \"Debt does not exist\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1600,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_tokens != 0 && _equivalent != 0, \"Oracle provided invalid rate\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1622,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_tokens != 0 && _equivalent != 0, \"Oracle provided invalid rate\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1628,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(debt.model != Model(0), \"Debt does not exist\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1668,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_to != address(0x0), \"_to should not be 0x0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1669,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_isAuthorized(msg.sender, uint256(_id)), \"Sender not authorized\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1673,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(token.transfer(_to, amount), \"Error sending tokens\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1683,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_to != address(0x0), \"_to should not be 0x0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1684,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_isAuthorized(msg.sender, uint256(_id)), \"Sender not authorized\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1686,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(debt.balance >= _amount, \"Debt balance is not enought\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1688,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(token.transfer(_to, _amount), \"Error sending tokens\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1699,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_to != address(0x0), \"_to should not be 0x0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1716,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(token.transfer(_to, total), \"Error sending tokens\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1964,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1971,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1983,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_data.length >= _la, \"Reading bytes out of bounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2008,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2033,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2063,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2098,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2145,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2211,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(token) != address(0), \"Error loading token\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2330,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(request.borrower != address(0), \"Request does not exist\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2355,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_borrower != address(0), \"The request should have a borrower\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2356,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(Model(_model).validate(_loanData), \"The loan data is not valid\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2370,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!canceledSettles[id], \"The debt was canceled\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2372,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(requests[id].borrower == address(0), \"Request already exist\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2449,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == request.borrower, \"Only borrower can approve\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2508,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(request.open, \"Request is no longer open\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2509,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(request.approved, \"The request is not approved by the borrower\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2510,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(request.expiration > now, \"The request is expired\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2515,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2516,
          "vulnerability_to_line": null,
          "vulnerability_code": "            token.transferFrom(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2517,
          "vulnerability_to_line": null,
          "vulnerability_code": "                msg.sender,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2518,
          "vulnerability_to_line": null,
          "vulnerability_code": "                request.borrower,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2519,
          "vulnerability_to_line": null,
          "vulnerability_code": "                tokens\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2520,
          "vulnerability_to_line": null,
          "vulnerability_code": "            ),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2521,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Error sending tokens to borrower\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2522,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2527,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2528,
          "vulnerability_to_line": null,
          "vulnerability_code": "            debtEngine.create2(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2529,
          "vulnerability_to_line": null,
          "vulnerability_code": "                Model(request.model),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2530,
          "vulnerability_to_line": null,
          "vulnerability_code": "                msg.sender,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2531,
          "vulnerability_to_line": null,
          "vulnerability_code": "                request.oracle,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2532,
          "vulnerability_to_line": null,
          "vulnerability_code": "                _internalSalt(request),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2533,
          "vulnerability_to_line": null,
          "vulnerability_code": "                request.loanData\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2534,
          "vulnerability_to_line": null,
          "vulnerability_code": "            ) == _id,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2535,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Error creating the debt\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2536,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2543,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2544,
          "vulnerability_to_line": null,
          "vulnerability_code": "                Cosigner(_cosigner).requestCosign(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2545,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    address(this),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2546,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    uint256(_id),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2547,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    _cosignerData,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2548,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    _oracleData\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2549,
          "vulnerability_to_line": null,
          "vulnerability_code": "                ),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2550,
          "vulnerability_to_line": null,
          "vulnerability_code": "                \"Cosign method returned false\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2551,
          "vulnerability_to_line": null,
          "vulnerability_code": "            );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2552,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(request.cosigner == _cosigner, \"Cosigner didn't callback\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2559,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(LoanCallback(callback).onLent.gas(GAS_CALLBACK)(_id, msg.sender, _callbackData), \"Rejected by loan callback\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2568,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(request.open, \"Request is no longer open or not requested\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2569,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2570,
          "vulnerability_to_line": null,
          "vulnerability_code": "            request.creator == msg.sender || request.borrower == msg.sender,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2571,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Only borrower or creator can cancel a request\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2572,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2585,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(request.cosigner != address(0), \"Cosigner 0x0 is not valid\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2586,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(request.expiration > now, \"Request is expired\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2587,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(request.cosigner == address(uint256(msg.sender) + 2), \"Cosigner not valid\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2590,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(request.salt >= _cost, \"Cosigner cost exceeded\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2591,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(token.transferFrom(debtEngine.ownerOf(_id), msg.sender, _cost), \"Error paying cosigner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2670,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(uint256(read(_requestData, O_EXPIRATION, L_EXPIRATION)) > now, \"Loan request is expired\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2676,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(requests[id].borrower == address(0), \"Request already exist\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2680,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2681,
          "vulnerability_to_line": null,
          "vulnerability_code": "            token.transferFrom(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2682,
          "vulnerability_to_line": null,
          "vulnerability_code": "                msg.sender,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2683,
          "vulnerability_to_line": null,
          "vulnerability_code": "                address(uint256(read(_requestData, O_BORROWER, L_BORROWER))),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2684,
          "vulnerability_to_line": null,
          "vulnerability_code": "                tokens\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2685,
          "vulnerability_to_line": null,
          "vulnerability_code": "            ),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2686,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Error sending tokens to borrower\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2687,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2690,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2691,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _createDebt(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2692,
          "vulnerability_to_line": null,
          "vulnerability_code": "                _requestData,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2693,
          "vulnerability_to_line": null,
          "vulnerability_code": "                _loanData,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2694,
          "vulnerability_to_line": null,
          "vulnerability_code": "                innerSalt\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2695,
          "vulnerability_to_line": null,
          "vulnerability_code": "            ) == id,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2696,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Error creating debt registry\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2697,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2725,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(Cosigner(_cosigner).requestCosign(address(this), uint256(id), _cosignerData, _oracleData), \"Cosign method returned false\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2726,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(request.cosigner == _cosigner, \"Cosigner didn't callback\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2733,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(LoanCallback(callback).onLent.gas(GAS_CALLBACK)(id, msg.sender, _callbackData), \"Rejected by loan callback\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2742,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2743,
          "vulnerability_to_line": null,
          "vulnerability_code": "            msg.sender == address(uint256(read(_requestData, O_BORROWER, L_BORROWER))) ||\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2744,
          "vulnerability_to_line": null,
          "vulnerability_code": "            msg.sender == address(uint256(read(_requestData, O_CREATOR, L_CREATOR))),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2745,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Only borrower or creator can cancel a settle\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2746,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2760,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!canceledSettles[_id], \"Settle was canceled\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2769,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2770,
          "vulnerability_to_line": null,
          "vulnerability_code": "                LoanApprover(borrower).settleApproveRequest(_requestData, _loanData, true, uint256(_id)) == expected,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2771,
          "vulnerability_to_line": null,
          "vulnerability_code": "                \"Borrower contract rejected the loan\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2772,
          "vulnerability_to_line": null,
          "vulnerability_code": "            );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2782,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2783,
          "vulnerability_to_line": null,
          "vulnerability_code": "                borrower == ecrecovery(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _hash)), _borrowerSig),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2784,
          "vulnerability_to_line": null,
          "vulnerability_code": "                \"Invalid borrower signature\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2785,
          "vulnerability_to_line": null,
          "vulnerability_code": "            );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2792,
          "vulnerability_to_line": null,
          "vulnerability_code": "                require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2793,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    LoanApprover(creator).settleApproveRequest(_requestData, _loanData, false, uint256(_id)) == expected,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2794,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    \"Creator contract rejected the loan\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2795,
          "vulnerability_to_line": null,
          "vulnerability_code": "                );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2805,
          "vulnerability_to_line": null,
          "vulnerability_code": "                require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2806,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    creator == ecrecovery(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _hash)), _creatorSig),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2807,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    \"Invalid creator signature\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2808,
          "vulnerability_to_line": null,
          "vulnerability_code": "                );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 972,
          "vulnerability_to_line": null,
          "vulnerability_code": "                require(\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 973,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    success && result == ERC721_RECEIVED_LEGACY,\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 974,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    \"Contract rejected the token\"\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 975,
          "vulnerability_to_line": null,
          "vulnerability_code": "                );\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 1600,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_tokens != 0 && _equivalent != 0, \"Oracle provided invalid rate\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 1622,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_tokens != 0 && _equivalent != 0, \"Oracle provided invalid rate\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 944,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (_doCheck && _to.isContract()) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 945,
          "vulnerability_to_line": null,
          "vulnerability_code": "            // Call dest contract\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 946,
          "vulnerability_to_line": null,
          "vulnerability_code": "            // Perform check with the new safe call\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 947,
          "vulnerability_to_line": null,
          "vulnerability_code": "            // onERC721Received(address,address,uint256,bytes)\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 948,
          "vulnerability_to_line": null,
          "vulnerability_code": "            (bool success, bytes4 result) = _noThrowCall(\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 949,
          "vulnerability_to_line": null,
          "vulnerability_code": "                _to,\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 950,
          "vulnerability_to_line": null,
          "vulnerability_code": "                abi.encodeWithSelector(\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 951,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    ERC721_RECEIVED,\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 952,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    msg.sender,\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 953,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    holder,\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1927,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if ((success==1)&&(result==1)) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1928,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return true;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1929,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 2406,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (_borrower.isContract() && _borrower.implementsMethod(0x76ba6009)) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 2407,
          "vulnerability_to_line": null,
          "vulnerability_code": "                approved = _requestContractApprove(id, _borrower);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 2408,
          "vulnerability_to_line": null,
          "vulnerability_code": "                requests[id].approved = approved;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 2409,
          "vulnerability_to_line": null,
          "vulnerability_code": "            }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 2465,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (borrower.isContract() && borrower.implementsMethod(0x76ba6009)) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 2466,
          "vulnerability_to_line": null,
          "vulnerability_code": "                approved = _requestContractApprove(_id, borrower);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 2467,
          "vulnerability_to_line": null,
          "vulnerability_code": "            } else {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 2468,
          "vulnerability_to_line": null,
          "vulnerability_code": "                bytes32 _hash = keccak256(\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 2469,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    abi.encodePacked(\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 2470,
          "vulnerability_to_line": null,
          "vulnerability_code": "                        _id,\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 2471,
          "vulnerability_to_line": null,
          "vulnerability_code": "                        \"sign approve request\"\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 2472,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    )\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 2473,
          "vulnerability_to_line": null,
          "vulnerability_code": "                );\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 2474,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 2493,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (approved && !request.approved) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 2494,
          "vulnerability_to_line": null,
          "vulnerability_code": "            request.approved = true;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 2495,
          "vulnerability_to_line": null,
          "vulnerability_code": "            emit Approved(_id);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 2496,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 815,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _assetsOf[_from].length--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1438,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < count; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1473,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < count; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1702,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < _ids.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1331,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(paid <= _amount, \"Paid can't be more than requested\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1427,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(count == _amounts.length, \"_ids and _amounts should have the same length\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1462,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(count == _tokenAmounts.length, \"_ids and _amounts should have the same length\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1527,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(paid <= _amount, \"Paid can't be more than requested\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 2355,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_borrower != address(0), \"The request should have a borrower\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 2509,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(request.approved, \"The request is not approved by the borrower\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 2568,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(request.open, \"Request is no longer open or not requested\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 2569,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 2570,
          "vulnerability_to_line": null,
          "vulnerability_code": "            request.creator == msg.sender || request.borrower == msg.sender,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 2571,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Only borrower or creator can cancel a request\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 2572,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 2742,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 2743,
          "vulnerability_to_line": null,
          "vulnerability_code": "            msg.sender == address(uint256(read(_requestData, O_BORROWER, L_BORROWER))) ||\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 2744,
          "vulnerability_to_line": null,
          "vulnerability_code": "            msg.sender == address(uint256(read(_requestData, O_CREATOR, L_CREATOR))),\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 2745,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Only borrower or creator can cancel a settle\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 2746,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 2769,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 2770,
          "vulnerability_to_line": null,
          "vulnerability_code": "                LoanApprover(borrower).settleApproveRequest(_requestData, _loanData, true, uint256(_id)) == expected,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 2771,
          "vulnerability_to_line": null,
          "vulnerability_code": "                \"Borrower contract rejected the loan\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 2772,
          "vulnerability_to_line": null,
          "vulnerability_code": "            );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 2792,
          "vulnerability_to_line": null,
          "vulnerability_code": "                require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 2793,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    LoanApprover(creator).settleApproveRequest(_requestData, _loanData, false, uint256(_id)) == expected,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 2794,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    \"Creator contract rejected the loan\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 2795,
          "vulnerability_to_line": null,
          "vulnerability_code": "                );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_76"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 421,
          "vulnerability_to_line": 425,
          "vulnerability_code": "    function isContract(address _addr) internal view returns (bool) {\n\n        uint size;\n\n        assembly { size := extcodesize(_addr) }\n\n        return size > 0;\n",
          "message": "IsContract.isContract (LoanManager.sol#421-425) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 1934,
          "vulnerability_to_line": 1954,
          "vulnerability_code": "    function _noThrowImplements(\n\n        address _contract,\n\n        bytes4 _interfaceId\n\n    ) private view returns (uint256 success, uint256 result) {\n\n        bytes4 erc165ID = ERC165ID;\n\n        assembly {\n\n            let x := mload(0x40)               // Find empty storage location using \"free memory pointer\"\n\n            mstore(x, erc165ID)                // Place signature at begining of empty storage\n\n            mstore(add(x, 0x04), _interfaceId) // Place first argument directly next to signature\n\n\n\n            success := staticcall(\n\n                                30000,         // 30k gas\n\n                                _contract,     // To addr\n\n                                x,             // Inputs are stored at location x\n\n                                0x24,          // Inputs are 32 bytes long\n\n                                x,             // Store output over input (saves space)\n\n                                0x20)          // Outputs are 32 bytes long\n\n\n\n            result := mload(x)                 // Load the result\n\n        }\n",
          "message": "ImplementsInterface._noThrowImplements (LoanManager.sol#1934-1954) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 1963,
          "vulnerability_to_line": 1968,
          "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n\n        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, mul(32, index))))\n\n        }\n",
          "message": "BytesUtils.readBytes32 (LoanManager.sol#1963-1968) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 1970,
          "vulnerability_to_line": 1977,
          "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n\n        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, offset)))\n\n            let lb := sub(32, length)\n\n            if lb { o := div(o, exp(2, mul(lb, 8))) }\n\n        }\n",
          "message": "BytesUtils.read (LoanManager.sol#1970-1977) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 1979,
          "vulnerability_to_line": 1989,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la\n\n    ) internal pure returns (bytes32 _a) {\n\n        require(_data.length >= _la, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            _a := mload(add(_data, 32))\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n        }\n",
          "message": "BytesUtils.decode (LoanManager.sol#1979-1989) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 1991,
          "vulnerability_to_line": 2009,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb\n\n    ) internal pure returns (bytes32 _a, bytes32 _b) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode (LoanManager.sol#1991-2009) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 2011,
          "vulnerability_to_line": 2034,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode (LoanManager.sol#2011-2034) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 2036,
          "vulnerability_to_line": 2064,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode (LoanManager.sol#2036-2064) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 2066,
          "vulnerability_to_line": 2099,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode (LoanManager.sol#2066-2099) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 2101,
          "vulnerability_to_line": 2146,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le,\n\n        uint256 _lf\n\n    ) internal pure returns (\n\n        bytes32 _a,\n\n        bytes32 _b,\n\n        bytes32 _c,\n\n        bytes32 _d,\n\n        bytes32 _e,\n\n        bytes32 _f\n\n    ) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := add(o, _le)\n\n            _f := mload(o)\n\n            l := sub(32, _lf)\n\n            if l { _f := div(_f, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode (LoanManager.sol#2101-2146) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 2923,
          "vulnerability_to_line": 2939,
          "vulnerability_code": "    function ecrecovery(bytes32 _hash, bytes memory _sig) internal pure returns (address) {\n\n        bytes32 r;\n\n        bytes32 s;\n\n        uint8 v;\n\n\n\n        assembly {\n\n            r := mload(add(_sig, 32))\n\n            s := mload(add(_sig, 64))\n\n            v := and(mload(add(_sig, 65)), 255)\n\n        }\n\n\n\n        if (v < 27) {\n\n            v += 27;\n\n        }\n\n\n\n        return ecrecover(_hash, v, r, s);\n",
          "message": "LoanManager.ecrecovery (LoanManager.sol#2923-2939) is declared view but contains assembly code\n"
        },
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 520,
          "vulnerability_to_line": 1003,
          "vulnerability_code": "contract ERC721Base is ERC165 {\n\n    using SafeMath for uint256;\n\n    using IsContract for address;\n\n\n\n    mapping(uint256 => address) private _holderOf;\n\n\n\n    // Owner to array of assetId\n\n    mapping(address => uint256[]) private _assetsOf;\n\n    // AssetId to index on array in _assetsOf mapping\n\n    mapping(uint256 => uint256) private _indexOfAsset;\n\n\n\n    mapping(address => mapping(address => bool)) private _operators;\n\n    mapping(uint256 => address) private _approval;\n\n\n\n    bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n\n    bytes4 private constant ERC721_RECEIVED_LEGACY = 0xf0b9e5ba;\n\n\n\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n\n\n    bytes4 private constant ERC_721_INTERFACE = 0x80ac58cd;\n\n    bytes4 private constant ERC_721_METADATA_INTERFACE = 0x5b5e139f;\n\n    bytes4 private constant ERC_721_ENUMERATION_INTERFACE = 0x780e9d63;\n\n\n\n    constructor(\n\n        string memory name,\n\n        string memory symbol\n\n    ) public {\n\n        _name = name;\n\n        _symbol = symbol;\n\n\n\n        _registerInterface(ERC_721_INTERFACE);\n\n        _registerInterface(ERC_721_METADATA_INTERFACE);\n\n        _registerInterface(ERC_721_ENUMERATION_INTERFACE);\n\n    }\n\n\n\n    // ///\n\n    // ERC721 Metadata\n\n    // ///\n\n\n\n    /// ERC-721 Non-Fungible Token Standard, optional metadata extension\n\n    /// See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n\n    /// Note: the ERC-165 identifier for this interface is 0x5b5e139f.\n\n\n\n    event SetURIProvider(address _uriProvider);\n\n\n\n    string private _name;\n\n    string private _symbol;\n\n\n\n    URIProvider private _uriProvider;\n\n\n\n    // @notice A descriptive name for a collection of NFTs in this contract\n\n    function name() external view returns (string memory) {\n\n        return _name;\n\n    }\n\n\n\n    // @notice An abbreviated name for NFTs in this contract\n\n    function symbol() external view returns (string memory) {\n\n        return _symbol;\n\n    }\n\n\n\n    /**\n\n    * @notice A distinct Uniform Resource Identifier (URI) for a given asset.\n\n    * @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\n\n    *  3986. The URI may point to a JSON file that conforms to the \"ERC721\n\n    *  Metadata JSON Schema\".\n\n    */\n\n    function tokenURI(uint256 _tokenId) external view returns (string memory) {\n\n        require(_holderOf[_tokenId] != address(0), \"Asset does not exist\");\n\n        URIProvider provider = _uriProvider;\n\n        return address(provider) == address(0) ? \"\" : provider.tokenURI(_tokenId);\n\n    }\n\n\n\n    function _setURIProvider(URIProvider _provider) internal returns (bool) {\n\n        emit SetURIProvider(address(_provider));\n\n        _uriProvider = _provider;\n\n        return true;\n\n    }\n\n\n\n    // ///\n\n    // ERC721 Enumeration\n\n    // ///\n\n\n\n    ///  ERC-721 Non-Fungible Token Standard, optional enumeration extension\n\n    ///  See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n\n    ///  Note: the ERC-165 identifier for this interface is 0x780e9d63.\n\n\n\n    uint256[] private _allTokens;\n\n\n\n    /**\n\n     * @dev Gets the total of assets stored by the contract\n\n     *      Warning: this method can consume all the gas of the transaction, it should not be\n\n     *               called from another contract, it should only be used in external calls\n\n     * @return an array with total assets\n\n     */\n\n    function allTokens() external view returns (uint256[] memory) {\n\n        return _allTokens;\n\n    }\n\n\n\n    /**\n\n     * @dev Gets the total of assets of the owner\n\n     *      Warning: this method can consume all the gas of the transaction, it should not be\n\n     *               called from another contract, it should only be used in external calls\n\n     * @param _owner the address of owner\n\n     * @return an array with total assets of owner\n\n     */\n\n    function assetsOf(address _owner) external view returns (uint256[] memory) {\n\n        return _assetsOf[_owner];\n\n    }\n\n\n\n    /**\n\n     * @dev Gets the total amount of assets stored by the contract\n\n     * @return uint256 representing the total amount of assets\n\n     */\n\n    function totalSupply() external view returns (uint256) {\n\n        return _allTokens.length;\n\n    }\n\n\n\n    /**\n\n    * @notice Enumerate valid NFTs\n\n    * @dev Throws if `_index` >= `totalSupply()`.\n\n    * @param _index A counter less than `totalSupply()`\n\n    * @return The token identifier for the `_index` of the NFT,\n\n    *  (sort order not specified)\n\n    */\n\n    function tokenByIndex(uint256 _index) external view returns (uint256) {\n\n        require(_index < _allTokens.length, \"Index out of bounds\");\n\n        return _allTokens[_index];\n\n    }\n\n\n\n    /**\n\n    * @notice Enumerate NFTs assigned to an owner\n\n    * @dev Throws if `_index` >= `balanceOf(_owner)` or if\n\n    *  `_owner` is the zero address, representing invalid NFTs.\n\n    * @param _owner An address where we are interested in NFTs owned by them\n\n    * @param _index A counter less than `balanceOf(_owner)`\n\n    * @return The token identifier for the `_index` of the NFT assigned to `_owner`,\n\n    *   (sort order not specified)\n\n    */\n\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n\n        require(_owner != address(0), \"0x0 Is not a valid owner\");\n\n        require(_index < _balanceOf(_owner), \"Index out of bounds\");\n\n        return _assetsOf[_owner][_index];\n\n    }\n\n\n\n    //\n\n    // Asset-centric getter functions\n\n    //\n\n\n\n    /**\n\n     * @dev Queries what address owns an asset. This method does not throw.\n\n     * In order to check if the asset exists, use the `exists` function or check if the\n\n     * return value of this call is `0`.\n\n     * @return uint256 the assetId\n\n     */\n\n    function ownerOf(uint256 _assetId) external view returns (address) {\n\n        return _ownerOf(_assetId);\n\n    }\n\n\n\n    function _ownerOf(uint256 _assetId) internal view returns (address) {\n\n        return _holderOf[_assetId];\n\n    }\n\n\n\n    //\n\n    // Holder-centric getter functions\n\n    //\n\n    /**\n\n     * @dev Gets the balance of the specified address\n\n     * @param _owner address to query the balance of\n\n     * @return uint256 representing the amount owned by the passed address\n\n     */\n\n    function balanceOf(address _owner) external view returns (uint256) {\n\n        return _balanceOf(_owner);\n\n    }\n\n\n\n    function _balanceOf(address _owner) internal view returns (uint256) {\n\n        return _assetsOf[_owner].length;\n\n    }\n\n\n\n    //\n\n    // Authorization getters\n\n    //\n\n\n\n    /**\n\n     * @dev Query whether an address has been authorized to move any assets on behalf of someone else\n\n     * @param _operator the address that might be authorized\n\n     * @param _assetHolder the address that provided the authorization\n\n     * @return bool true if the operator has been authorized to move any assets\n\n     */\n\n    function isApprovedForAll(\n\n        address _operator,\n\n        address _assetHolder\n\n    ) external view returns (bool) {\n\n        return _isApprovedForAll(_operator, _assetHolder);\n\n    }\n\n\n\n    function _isApprovedForAll(\n\n        address _operator,\n\n        address _assetHolder\n\n    ) internal view returns (bool) {\n\n        return _operators[_assetHolder][_operator];\n\n    }\n\n\n\n    /**\n\n     * @dev Query what address has been particularly authorized to move an asset\n\n     * @param _assetId the asset to be queried for\n\n     * @return bool true if the asset has been approved by the holder\n\n     */\n\n    function getApproved(uint256 _assetId) external view returns (address) {\n\n        return _getApproved(_assetId);\n\n    }\n\n\n\n    function _getApproved(uint256 _assetId) internal view returns (address) {\n\n        return _approval[_assetId];\n\n    }\n\n\n\n    /**\n\n     * @dev Query if an operator can move an asset.\n\n     * @param _operator the address that might be authorized\n\n     * @param _assetId the asset that has been `approved` for transfer\n\n     * @return bool true if the asset has been approved by the holder\n\n     */\n\n    function isAuthorized(address _operator, uint256 _assetId) external view returns (bool) {\n\n        return _isAuthorized(_operator, _assetId);\n\n    }\n\n\n\n    function _isAuthorized(address _operator, uint256 _assetId) internal view returns (bool) {\n\n        require(_operator != address(0), \"0x0 is an invalid operator\");\n\n        address owner = _ownerOf(_assetId);\n\n\n\n        return _operator == owner || _isApprovedForAll(_operator, owner) || _getApproved(_assetId) == _operator;\n\n    }\n\n\n\n    //\n\n    // Authorization\n\n    //\n\n\n\n    /**\n\n     * @dev Authorize a third party operator to manage (send) msg.sender's asset\n\n     * @param _operator address to be approved\n\n     * @param _authorized bool set to true to authorize, false to withdraw authorization\n\n     */\n\n    function setApprovalForAll(address _operator, bool _authorized) external {\n\n        if (_operators[msg.sender][_operator] != _authorized) {\n\n            _operators[msg.sender][_operator] = _authorized;\n\n            emit ApprovalForAll(msg.sender, _operator, _authorized);\n\n        }\n\n    }\n\n\n\n    /**\n\n     * @dev Authorize a third party operator to manage one particular asset\n\n     * @param _operator address to be approved\n\n     * @param _assetId asset to approve\n\n     */\n\n    function approve(address _operator, uint256 _assetId) external {\n\n        address holder = _ownerOf(_assetId);\n\n        require(msg.sender == holder || _isApprovedForAll(msg.sender, holder), \"msg.sender can't approve\");\n\n        if (_getApproved(_assetId) != _operator) {\n\n            _approval[_assetId] = _operator;\n\n            emit Approval(holder, _operator, _assetId);\n\n        }\n\n    }\n\n\n\n    //\n\n    // Internal Operations\n\n    //\n\n\n\n    function _addAssetTo(address _to, uint256 _assetId) private {\n\n        // Store asset owner\n\n        _holderOf[_assetId] = _to;\n\n\n\n        // Store index of the asset\n\n        uint256 length = _balanceOf(_to);\n\n        _assetsOf[_to].push(_assetId);\n\n        _indexOfAsset[_assetId] = length;\n\n\n\n        // Save main enumerable\n\n        _allTokens.push(_assetId);\n\n    }\n\n\n\n    function _transferAsset(address _from, address _to, uint256 _assetId) private {\n\n        uint256 assetIndex = _indexOfAsset[_assetId];\n\n        uint256 lastAssetIndex = _balanceOf(_from).sub(1);\n\n\n\n        if (assetIndex != lastAssetIndex) {\n\n            // Replace current asset with last asset\n\n            uint256 lastAssetId = _assetsOf[_from][lastAssetIndex];\n\n            // Insert the last asset into the position previously occupied by the asset to be removed\n\n            _assetsOf[_from][assetIndex] = lastAssetId;\n\n            _indexOfAsset[lastAssetId] = assetIndex;\n\n        }\n\n\n\n        // Resize the array\n\n        _assetsOf[_from][lastAssetIndex] = 0;\n\n        _assetsOf[_from].length--;\n\n\n\n        // Change owner\n\n        _holderOf[_assetId] = _to;\n\n\n\n        // Update the index of positions of the asset\n\n        uint256 length = _balanceOf(_to);\n\n        _assetsOf[_to].push(_assetId);\n\n        _indexOfAsset[_assetId] = length;\n\n    }\n\n\n\n    function _clearApproval(address _holder, uint256 _assetId) private {\n\n        if (_approval[_assetId] != address(0)) {\n\n            _approval[_assetId] = address(0);\n\n            emit Approval(_holder, address(0), _assetId);\n\n        }\n\n    }\n\n\n\n    //\n\n    // Supply-altering functions\n\n    //\n\n\n\n    function _generate(uint256 _assetId, address _beneficiary) internal {\n\n        require(_holderOf[_assetId] == address(0), \"Asset already exists\");\n\n\n\n        _addAssetTo(_beneficiary, _assetId);\n\n\n\n        emit Transfer(address(0), _beneficiary, _assetId);\n\n    }\n\n\n\n    //\n\n    // Transaction related operations\n\n    //\n\n\n\n    modifier onlyAuthorized(uint256 _assetId) {\n\n        require(_isAuthorized(msg.sender, _assetId), \"msg.sender Not authorized\");\n\n        _;\n\n    }\n\n\n\n    modifier isCurrentOwner(address _from, uint256 _assetId) {\n\n        require(_ownerOf(_assetId) == _from, \"Not current owner\");\n\n        _;\n\n    }\n\n\n\n    modifier addressDefined(address _target) {\n\n        require(_target != address(0), \"Target can't be 0x0\");\n\n        _;\n\n    }\n\n\n\n    /**\n\n     * @dev Alias of `safeTransferFrom(from, to, assetId, '')`\n\n     *\n\n     * @param _from address that currently owns an asset\n\n     * @param _to address to receive the ownership of the asset\n\n     * @param _assetId uint256 ID of the asset to be transferred\n\n     */\n\n    function safeTransferFrom(address _from, address _to, uint256 _assetId) external {\n\n        return _doTransferFrom(\n\n            _from,\n\n            _to,\n\n            _assetId,\n\n            \"\",\n\n            true\n\n        );\n\n    }\n\n\n\n    /**\n\n     * @dev Securely transfers the ownership of a given asset from one address to\n\n     * another address, calling the method `onNFTReceived` on the target address if\n\n     * there's code associated with it\n\n     *\n\n     * @param _from address that currently owns an asset\n\n     * @param _to address to receive the ownership of the asset\n\n     * @param _assetId uint256 ID of the asset to be transferred\n\n     * @param _userData bytes arbitrary user information to attach to this transfer\n\n     */\n\n    function safeTransferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _assetId,\n\n        bytes calldata _userData\n\n    ) external {\n\n        return _doTransferFrom(\n\n            _from,\n\n            _to,\n\n            _assetId,\n\n            _userData,\n\n            true\n\n        );\n\n    }\n\n\n\n    /**\n\n     * @dev Transfers the ownership of a given asset from one address to another address\n\n     * Warning! This function does not attempt to verify that the target address can send\n\n     * tokens.\n\n     *\n\n     * @param _from address sending the asset\n\n     * @param _to address to receive the ownership of the asset\n\n     * @param _assetId uint256 ID of the asset to be transferred\n\n     */\n\n    function transferFrom(address _from, address _to, uint256 _assetId) external {\n\n        return _doTransferFrom(\n\n            _from,\n\n            _to,\n\n            _assetId,\n\n            \"\",\n\n            false\n\n        );\n\n    }\n\n\n\n    /**\n\n     * Internal function that moves an asset from one holder to another\n\n     */\n\n    function _doTransferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _assetId,\n\n        bytes memory _userData,\n\n        bool _doCheck\n\n    )\n\n        internal\n\n        onlyAuthorized(_assetId)\n\n        addressDefined(_to)\n\n        isCurrentOwner(_from, _assetId)\n\n    {\n\n        address holder = _holderOf[_assetId];\n\n        _clearApproval(holder, _assetId);\n\n        _transferAsset(holder, _to, _assetId);\n\n\n\n        if (_doCheck && _to.isContract()) {\n\n            // Call dest contract\n\n            // Perform check with the new safe call\n\n            // onERC721Received(address,address,uint256,bytes)\n\n            (bool success, bytes4 result) = _noThrowCall(\n\n                _to,\n\n                abi.encodeWithSelector(\n\n                    ERC721_RECEIVED,\n\n                    msg.sender,\n\n                    holder,\n\n                    _assetId,\n\n                    _userData\n\n                )\n\n            );\n\n\n\n            if (!success || result != ERC721_RECEIVED) {\n\n                // Try legacy safe call\n\n                // onERC721Received(address,uint256,bytes)\n\n                (success, result) = _noThrowCall(\n\n                    _to,\n\n                    abi.encodeWithSelector(\n\n                        ERC721_RECEIVED_LEGACY,\n\n                        holder,\n\n                        _assetId,\n\n                        _userData\n\n                    )\n\n                );\n\n\n\n                require(\n\n                    success && result == ERC721_RECEIVED_LEGACY,\n\n                    \"Contract rejected the token\"\n\n                );\n\n            }\n\n        }\n\n\n\n        emit Transfer(holder, _to, _assetId);\n\n    }\n\n\n\n    //\n\n    // Utilities\n\n    //\n\n\n\n    /**\n\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract),\n\n     * relaxing the requirement on the return value\n\n     * @param _contract The contract that receives the ERC721\n\n     * @param _data The call data\n\n     * @return True if the call not reverts and the result of the call\n\n     */\n\n    function _noThrowCall(\n\n        address _contract,\n\n        bytes memory _data\n\n    ) internal returns (bool success, bytes4 result) {\n\n        bytes memory returnData;\n\n        (success, returnData) = _contract.call(_data);\n\n\n\n        if (returnData.length > 0)\n\n            result = abi.decode(returnData, (bytes4));\n\n    }\n",
          "message": "ERC721Base (LoanManager.sol#520-1003) has incorrect ERC20 function interface(s):\n\t-approve (LoanManager.sol#775-782)\n\t-transferFrom (LoanManager.sol#915-923)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 1507,
          "vulnerability_to_line": 1539,
          "vulnerability_code": "    function _pay(\n\n        bytes32 _id,\n\n        address _oracle,\n\n        uint256 _amount,\n\n        uint256 _tokens,\n\n        uint256 _equivalent\n\n    ) internal returns (uint256 paid, uint256 paidToken){\n\n        Debt storage debt = debts[_id];\n\n\n\n        if (_oracle != debt.oracle) {\n\n            emit PayBatchError(\n\n                _id,\n\n                _oracle\n\n            );\n\n\n\n            return (0,0);\n\n        }\n\n\n\n        // Paid only required amount\n\n        paid = _safePay(_id, debt.model, _amount);\n\n        require(paid <= _amount, \"Paid can't be more than requested\");\n\n\n\n        // Get token amount to use as payment\n\n        paidToken = _oracle != address(0) ? _toToken(paid, _tokens, _equivalent) : paid;\n\n\n\n        // Pull tokens from payer\n\n        require(token.transferFrom(msg.sender, address(this), paidToken), \"Error pulling payment tokens\");\n\n\n\n        // Add balance to debt\n\n        uint256 newBalance = paidToken.add(debt.balance);\n\n        require(newBalance < 340282366920938463463374607431768211456, \"uint128 Overflow\");\n\n        debt.balance = uint128(newBalance);\n",
          "message": "Reentrancy in DebtEngine._pay (LoanManager.sol#1507-1539):\n\tExternal calls:\n\t- paid = _safePay(_id,debt.model,_amount) (LoanManager.sol#1526)\n\t- require(bool,string)(token.transferFrom(msg.sender,address(this),paidToken),Error pulling payment tokens) (LoanManager.sol#1533)\n\tState variables written after the call(s):\n\t- debts (LoanManager.sol#1538)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 2499,
          "vulnerability_to_line": 2563,
          "vulnerability_code": "    function lend(\n\n        bytes32 _id,\n\n        bytes memory _oracleData,\n\n        address _cosigner,\n\n        uint256 _cosignerLimit,\n\n        bytes memory _cosignerData,\n\n        bytes memory _callbackData\n\n    ) public returns (bool) {\n\n        Request storage request = requests[_id];\n\n        require(request.open, \"Request is no longer open\");\n\n        require(request.approved, \"The request is not approved by the borrower\");\n\n        require(request.expiration > now, \"The request is expired\");\n\n\n\n        request.open = false;\n\n\n\n        uint256 tokens = _currencyToToken(request.oracle, request.amount, _oracleData);\n\n        require(\n\n            token.transferFrom(\n\n                msg.sender,\n\n                request.borrower,\n\n                tokens\n\n            ),\n\n            \"Error sending tokens to borrower\"\n\n        );\n\n\n\n        emit Lent(_id, msg.sender, tokens);\n\n\n\n        // Generate the debt\n\n        require(\n\n            debtEngine.create2(\n\n                Model(request.model),\n\n                msg.sender,\n\n                request.oracle,\n\n                _internalSalt(request),\n\n                request.loanData\n\n            ) == _id,\n\n            \"Error creating the debt\"\n\n        );\n\n\n\n        // Call the cosigner\n\n        if (_cosigner != address(0)) {\n\n            uint256 auxSalt = request.salt;\n\n            request.cosigner = address(uint256(_cosigner) + 2);\n\n            request.salt = _cosignerLimit; // Risky ?\n\n            require(\n\n                Cosigner(_cosigner).requestCosign(\n\n                    address(this),\n\n                    uint256(_id),\n\n                    _cosignerData,\n\n                    _oracleData\n\n                ),\n\n                \"Cosign method returned false\"\n\n            );\n\n            require(request.cosigner == _cosigner, \"Cosigner didn't callback\");\n\n            request.salt = auxSalt;\n\n        }\n\n\n\n        // Call the loan callback\n\n        address callback = request.callback;\n\n        if (callback != address(0)) {\n\n            require(LoanCallback(callback).onLent.gas(GAS_CALLBACK)(_id, msg.sender, _callbackData), \"Rejected by loan callback\");\n\n        }\n\n\n\n        return true;\n",
          "message": "Reentrancy in LoanManager.lend (LoanManager.sol#2499-2563):\n\tExternal calls:\n\t- tokens = _currencyToToken(request.oracle,request.amount,_oracleData) (LoanManager.sol#2514)\n\t- require(bool,string)(token.transferFrom(msg.sender,request.borrower,tokens),Error sending tokens to borrower) (LoanManager.sol#2515-2522)\n\t- require(bool,string)(debtEngine.create2(Model(request.model),msg.sender,request.oracle,_internalSalt(request),request.loanData) == _id,Error creating the debt) (LoanManager.sol#2527-2536)\n\tState variables written after the call(s):\n\t- requests (LoanManager.sol#2541)\n\t- requests (LoanManager.sol#2542)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 2499,
          "vulnerability_to_line": 2563,
          "vulnerability_code": "    function lend(\n\n        bytes32 _id,\n\n        bytes memory _oracleData,\n\n        address _cosigner,\n\n        uint256 _cosignerLimit,\n\n        bytes memory _cosignerData,\n\n        bytes memory _callbackData\n\n    ) public returns (bool) {\n\n        Request storage request = requests[_id];\n\n        require(request.open, \"Request is no longer open\");\n\n        require(request.approved, \"The request is not approved by the borrower\");\n\n        require(request.expiration > now, \"The request is expired\");\n\n\n\n        request.open = false;\n\n\n\n        uint256 tokens = _currencyToToken(request.oracle, request.amount, _oracleData);\n\n        require(\n\n            token.transferFrom(\n\n                msg.sender,\n\n                request.borrower,\n\n                tokens\n\n            ),\n\n            \"Error sending tokens to borrower\"\n\n        );\n\n\n\n        emit Lent(_id, msg.sender, tokens);\n\n\n\n        // Generate the debt\n\n        require(\n\n            debtEngine.create2(\n\n                Model(request.model),\n\n                msg.sender,\n\n                request.oracle,\n\n                _internalSalt(request),\n\n                request.loanData\n\n            ) == _id,\n\n            \"Error creating the debt\"\n\n        );\n\n\n\n        // Call the cosigner\n\n        if (_cosigner != address(0)) {\n\n            uint256 auxSalt = request.salt;\n\n            request.cosigner = address(uint256(_cosigner) + 2);\n\n            request.salt = _cosignerLimit; // Risky ?\n\n            require(\n\n                Cosigner(_cosigner).requestCosign(\n\n                    address(this),\n\n                    uint256(_id),\n\n                    _cosignerData,\n\n                    _oracleData\n\n                ),\n\n                \"Cosign method returned false\"\n\n            );\n\n            require(request.cosigner == _cosigner, \"Cosigner didn't callback\");\n\n            request.salt = auxSalt;\n\n        }\n\n\n\n        // Call the loan callback\n\n        address callback = request.callback;\n\n        if (callback != address(0)) {\n\n            require(LoanCallback(callback).onLent.gas(GAS_CALLBACK)(_id, msg.sender, _callbackData), \"Rejected by loan callback\");\n\n        }\n\n\n\n        return true;\n",
          "message": "Reentrancy in LoanManager.lend (LoanManager.sol#2499-2563):\n\tExternal calls:\n\t- tokens = _currencyToToken(request.oracle,request.amount,_oracleData) (LoanManager.sol#2514)\n\t- require(bool,string)(token.transferFrom(msg.sender,request.borrower,tokens),Error sending tokens to borrower) (LoanManager.sol#2515-2522)\n\t- require(bool,string)(debtEngine.create2(Model(request.model),msg.sender,request.oracle,_internalSalt(request),request.loanData) == _id,Error creating the debt) (LoanManager.sol#2527-2536)\n\t- require(bool,string)(Cosigner(_cosigner).requestCosign(address(this),uint256(_id),_cosignerData,_oracleData),Cosign method returned false) (LoanManager.sol#2543-2551)\n\tState variables written after the call(s):\n\t- requests (LoanManager.sol#2553)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 1322,
          "vulnerability_to_line": 1361,
          "vulnerability_code": "    function pay(\n\n        bytes32 _id,\n\n        uint256 _amount,\n\n        address _origin,\n\n        bytes calldata _oracleData\n\n    ) external returns (uint256 paid, uint256 paidToken) {\n\n        Debt storage debt = debts[_id];\n\n        // Paid only required amount\n\n        paid = _safePay(_id, debt.model, _amount);\n\n        require(paid <= _amount, \"Paid can't be more than requested\");\n\n\n\n        RateOracle oracle = RateOracle(debt.oracle);\n\n        if (address(oracle) != address(0)) {\n\n            // Convert\n\n            (uint256 tokens, uint256 equivalent) = oracle.readSample(_oracleData);\n\n            emit ReadedOracle(_id, tokens, equivalent);\n\n            paidToken = _toToken(paid, tokens, equivalent);\n\n        } else {\n\n            paidToken = paid;\n\n        }\n\n\n\n        // Pull tokens from payer\n\n        require(token.transferFrom(msg.sender, address(this), paidToken), \"Error pulling payment tokens\");\n\n\n\n        // Add balance to the debt\n\n        uint256 newBalance = paidToken.add(debt.balance);\n\n        require(newBalance < 340282366920938463463374607431768211456, \"uint128 Overflow\");\n\n        debt.balance = uint128(newBalance);\n\n\n\n        // Emit pay event\n\n        emit Paid({\n\n            _id: _id,\n\n            _sender: msg.sender,\n\n            _origin: _origin,\n\n            _requested: _amount,\n\n            _requestedTokens: 0,\n\n            _paid: paid,\n\n            _tokens: paidToken\n\n        });\n",
          "message": "Reentrancy in DebtEngine.pay (LoanManager.sol#1322-1361):\n\tExternal calls:\n\t- paid = _safePay(_id,debt.model,_amount) (LoanManager.sol#1330)\n\t- (tokens,equivalent) = oracle.readSample(_oracleData) (LoanManager.sol#1336)\n\t- require(bool,string)(token.transferFrom(msg.sender,address(this),paidToken),Error pulling payment tokens) (LoanManager.sol#1344)\n\tState variables written after the call(s):\n\t- debts (LoanManager.sol#1349)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 1363,
          "vulnerability_to_line": 1417,
          "vulnerability_code": "    function payToken(\n\n        bytes32 id,\n\n        uint256 amount,\n\n        address origin,\n\n        bytes calldata oracleData\n\n    ) external returns (uint256 paid, uint256 paidToken) {\n\n        Debt storage debt = debts[id];\n\n        // Read storage\n\n        RateOracle oracle = RateOracle(debt.oracle);\n\n\n\n        uint256 equivalent;\n\n        uint256 tokens;\n\n        uint256 available;\n\n\n\n        // Get available <currency> amount\n\n        if (address(oracle) != address(0)) {\n\n            (tokens, equivalent) = oracle.readSample(oracleData);\n\n            emit ReadedOracle(id, tokens, equivalent);\n\n            available = _fromToken(amount, tokens, equivalent);\n\n        } else {\n\n            available = amount;\n\n        }\n\n\n\n        // Call addPaid on model\n\n        paid = _safePay(id, debt.model, available);\n\n        require(paid <= available, \"Paid can't exceed available\");\n\n\n\n        // Convert back to required pull amount\n\n        if (address(oracle) != address(0)) {\n\n            paidToken = _toToken(paid, tokens, equivalent);\n\n            require(paidToken <= amount, \"Paid can't exceed requested\");\n\n        } else {\n\n            paidToken = paid;\n\n        }\n\n\n\n        // Pull tokens from payer\n\n        require(token.transferFrom(msg.sender, address(this), paidToken), \"Error pulling tokens\");\n\n\n\n        // Add balance to the debt\n\n        // WARNING: Reusing variable **available**\n\n        available = paidToken.add(debt.balance);\n\n        require(available < 340282366920938463463374607431768211456, \"uint128 Overflow\");\n\n        debt.balance = uint128(available);\n\n\n\n        // Emit pay event\n\n        emit Paid({\n\n            _id: id,\n\n            _sender: msg.sender,\n\n            _origin: origin,\n\n            _requested: 0,\n\n            _requestedTokens: amount,\n\n            _paid: paid,\n\n            _tokens: paidToken\n\n        });\n",
          "message": "Reentrancy in DebtEngine.payToken (LoanManager.sol#1363-1417):\n\tExternal calls:\n\t- (tokens,equivalent) = oracle.readSample(oracleData) (LoanManager.sol#1379)\n\t- paid = _safePay(id,debt.model,available) (LoanManager.sol#1387)\n\tState variables written after the call(s):\n\t- debts (LoanManager.sol#1387)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 1363,
          "vulnerability_to_line": 1417,
          "vulnerability_code": "    function payToken(\n\n        bytes32 id,\n\n        uint256 amount,\n\n        address origin,\n\n        bytes calldata oracleData\n\n    ) external returns (uint256 paid, uint256 paidToken) {\n\n        Debt storage debt = debts[id];\n\n        // Read storage\n\n        RateOracle oracle = RateOracle(debt.oracle);\n\n\n\n        uint256 equivalent;\n\n        uint256 tokens;\n\n        uint256 available;\n\n\n\n        // Get available <currency> amount\n\n        if (address(oracle) != address(0)) {\n\n            (tokens, equivalent) = oracle.readSample(oracleData);\n\n            emit ReadedOracle(id, tokens, equivalent);\n\n            available = _fromToken(amount, tokens, equivalent);\n\n        } else {\n\n            available = amount;\n\n        }\n\n\n\n        // Call addPaid on model\n\n        paid = _safePay(id, debt.model, available);\n\n        require(paid <= available, \"Paid can't exceed available\");\n\n\n\n        // Convert back to required pull amount\n\n        if (address(oracle) != address(0)) {\n\n            paidToken = _toToken(paid, tokens, equivalent);\n\n            require(paidToken <= amount, \"Paid can't exceed requested\");\n\n        } else {\n\n            paidToken = paid;\n\n        }\n\n\n\n        // Pull tokens from payer\n\n        require(token.transferFrom(msg.sender, address(this), paidToken), \"Error pulling tokens\");\n\n\n\n        // Add balance to the debt\n\n        // WARNING: Reusing variable **available**\n\n        available = paidToken.add(debt.balance);\n\n        require(available < 340282366920938463463374607431768211456, \"uint128 Overflow\");\n\n        debt.balance = uint128(available);\n\n\n\n        // Emit pay event\n\n        emit Paid({\n\n            _id: id,\n\n            _sender: msg.sender,\n\n            _origin: origin,\n\n            _requested: 0,\n\n            _requestedTokens: amount,\n\n            _paid: paid,\n\n            _tokens: paidToken\n\n        });\n",
          "message": "Reentrancy in DebtEngine.payToken (LoanManager.sol#1363-1417):\n\tExternal calls:\n\t- (tokens,equivalent) = oracle.readSample(oracleData) (LoanManager.sol#1379)\n\t- paid = _safePay(id,debt.model,available) (LoanManager.sol#1387)\n\t- require(bool,string)(token.transferFrom(msg.sender,address(this),paidToken),Error pulling tokens) (LoanManager.sol#1399)\n\tState variables written after the call(s):\n\t- debts (LoanManager.sol#1405)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 2457,
          "vulnerability_to_line": 2497,
          "vulnerability_code": "    function registerApproveRequest(\n\n        bytes32 _id,\n\n        bytes calldata _signature\n\n    ) external returns (bool approved) {\n\n        Request storage request = requests[_id];\n\n        address borrower = request.borrower;\n\n\n\n        if (!request.approved) {\n\n            if (borrower.isContract() && borrower.implementsMethod(0x76ba6009)) {\n\n                approved = _requestContractApprove(_id, borrower);\n\n            } else {\n\n                bytes32 _hash = keccak256(\n\n                    abi.encodePacked(\n\n                        _id,\n\n                        \"sign approve request\"\n\n                    )\n\n                );\n\n\n\n                address signer = ecrecovery(\n\n                    keccak256(\n\n                        abi.encodePacked(\n\n                            \"\\x19Ethereum Signed Message:\\n32\",\n\n                            _hash\n\n                        )\n\n                    ),\n\n                    _signature\n\n                );\n\n\n\n                if (borrower == signer) {\n\n                    emit ApprovedBySignature(_id);\n\n                    approved = true;\n\n                }\n\n            }\n\n        }\n\n\n\n        // Check request.approved again, protect against reentrancy\n\n        if (approved && !request.approved) {\n\n            request.approved = true;\n\n            emit Approved(_id);\n\n        }\n",
          "message": "Reentrancy in LoanManager.registerApproveRequest (LoanManager.sol#2457-2497):\n\tExternal calls:\n\t- approved = _requestContractApprove(_id,borrower) (LoanManager.sol#2466)\n\tState variables written after the call(s):\n\t- requests (LoanManager.sol#2494)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 2345,
          "vulnerability_to_line": 2415,
          "vulnerability_code": "    function requestLoan(\n\n        uint128 _amount,\n\n        address _model,\n\n        address _oracle,\n\n        address _borrower,\n\n        address _callback,\n\n        uint256 _salt,\n\n        uint64 _expiration,\n\n        bytes calldata _loanData\n\n    ) external returns (bytes32 id) {\n\n        require(_borrower != address(0), \"The request should have a borrower\");\n\n        require(Model(_model).validate(_loanData), \"The loan data is not valid\");\n\n\n\n        id = calcId(\n\n            _amount,\n\n            _borrower,\n\n            msg.sender,\n\n            _model,\n\n            _oracle,\n\n            _callback,\n\n            _salt,\n\n            _expiration,\n\n            _loanData\n\n        );\n\n\n\n        require(!canceledSettles[id], \"The debt was canceled\");\n\n\n\n        require(requests[id].borrower == address(0), \"Request already exist\");\n\n\n\n        bool approved = msg.sender == _borrower;\n\n\n\n        requests[id] = Request({\n\n            open: true,\n\n            approved: approved,\n\n            cosigner: address(0),\n\n            amount: _amount,\n\n            model: _model,\n\n            creator: msg.sender,\n\n            oracle: _oracle,\n\n            borrower: _borrower,\n\n            callback: _callback,\n\n            salt: _salt,\n\n            loanData: _loanData,\n\n            expiration: _expiration\n\n        });\n\n\n\n        emit Requested(\n\n            id,\n\n            _amount,\n\n            _model,\n\n            msg.sender,\n\n            _oracle,\n\n            _borrower,\n\n            _callback,\n\n            _salt,\n\n            _loanData,\n\n            _expiration\n\n        );\n\n\n\n        if (!approved) {\n\n            // implements: 0x76ba6009 = approveRequest(bytes32)\n\n            if (_borrower.isContract() && _borrower.implementsMethod(0x76ba6009)) {\n\n                approved = _requestContractApprove(id, _borrower);\n\n                requests[id].approved = approved;\n\n            }\n\n        }\n\n\n\n        if (approved) {\n\n            emit Approved(id);\n\n        }\n",
          "message": "Reentrancy in LoanManager.requestLoan (LoanManager.sol#2345-2415):\n\tExternal calls:\n\t- require(bool,string)(Model(_model).validate(_loanData),The loan data is not valid) (LoanManager.sol#2356)\n\t- approved = _requestContractApprove(id,_borrower) (LoanManager.sol#2407)\n\tState variables written after the call(s):\n\t- requests (LoanManager.sol#2408)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 1626,
          "vulnerability_to_line": 1665,
          "vulnerability_code": "    function run(bytes32 _id) external returns (bool) {\n\n        Debt storage debt = debts[_id];\n\n        require(debt.model != Model(0), \"Debt does not exist\");\n\n\n\n        (bool success, bytes32 result) = _safeGasCall(\n\n            address(debt.model),\n\n            abi.encodeWithSelector(\n\n                debt.model.run.selector,\n\n                _id\n\n            )\n\n        );\n\n\n\n        if (success) {\n\n            if (debt.error) {\n\n                emit ErrorRecover({\n\n                    _id: _id,\n\n                    _sender: msg.sender,\n\n                    _value: 0,\n\n                    _gasLeft: gasleft(),\n\n                    _gasLimit: block.gaslimit,\n\n                    _result: result,\n\n                    _callData: msg.data\n\n                });\n\n\n\n                delete debt.error;\n\n            }\n\n\n\n            return result == bytes32(uint256(1));\n\n        } else {\n\n            emit Error({\n\n                _id: _id,\n\n                _sender: msg.sender,\n\n                _value: 0,\n\n                _gasLeft: gasleft(),\n\n                _gasLimit: block.gaslimit,\n\n                _callData: msg.data\n\n            });\n\n            debt.error = true;\n\n        }\n",
          "message": "Reentrancy in DebtEngine.run (LoanManager.sol#1626-1665):\n\tExternal calls:\n\t- (success,result) = _safeGasCall(address(debt.model),abi.encodeWithSelector(debt.model.run.selector,_id)) (LoanManager.sol#1630-1636)\n\tState variables written after the call(s):\n\t- debts (LoanManager.sol#1663)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 2658,
          "vulnerability_to_line": 2735,
          "vulnerability_code": "    function settleLend(\n\n        bytes memory _requestData,\n\n        bytes memory _loanData,\n\n        address _cosigner,\n\n        uint256 _maxCosignerCost,\n\n        bytes memory _cosignerData,\n\n        bytes memory _oracleData,\n\n        bytes memory _creatorSig,\n\n        bytes memory _borrowerSig,\n\n        bytes memory _callbackData\n\n    ) public returns (bytes32 id) {\n\n        // Validate request\n\n        require(uint256(read(_requestData, O_EXPIRATION, L_EXPIRATION)) > now, \"Loan request is expired\");\n\n\n\n        // Get id\n\n        uint256 innerSalt;\n\n        (id, innerSalt) = _buildSettleId(_requestData, _loanData);\n\n\n\n        require(requests[id].borrower == address(0), \"Request already exist\");\n\n\n\n        // Transfer tokens to borrower\n\n        uint256 tokens = _currencyToToken(_requestData, _oracleData);\n\n        require(\n\n            token.transferFrom(\n\n                msg.sender,\n\n                address(uint256(read(_requestData, O_BORROWER, L_BORROWER))),\n\n                tokens\n\n            ),\n\n            \"Error sending tokens to borrower\"\n\n        );\n\n\n\n        // Generate the debt\n\n        require(\n\n            _createDebt(\n\n                _requestData,\n\n                _loanData,\n\n                innerSalt\n\n            ) == id,\n\n            \"Error creating debt registry\"\n\n        );\n\n\n\n        emit SettledLend(id, msg.sender, tokens);\n\n\n\n        // Save the request info\n\n        requests[id] = Request({\n\n            open: false,\n\n            approved: true,\n\n            cosigner: _cosigner,\n\n            amount: uint128(uint256(read(_requestData, O_AMOUNT, L_AMOUNT))),\n\n            model: address(uint256(read(_requestData, O_MODEL, L_MODEL))),\n\n            creator: address(uint256(read(_requestData, O_CREATOR, L_CREATOR))),\n\n            oracle: address(uint256(read(_requestData, O_ORACLE, L_ORACLE))),\n\n            borrower: address(uint256(read(_requestData, O_BORROWER, L_BORROWER))),\n\n            callback: address(uint256(read(_requestData, O_CALLBACK, L_CALLBACK))),\n\n            salt: _cosigner != address(0) ? _maxCosignerCost : uint256(read(_requestData, O_SALT, L_SALT)),\n\n            loanData: _loanData,\n\n            expiration: uint64(uint256(read(_requestData, O_EXPIRATION, L_EXPIRATION)))\n\n        });\n\n\n\n        Request storage request = requests[id];\n\n\n\n        // Validate signatures\n\n        _validateSettleSignatures(id, _requestData, _loanData, _creatorSig, _borrowerSig);\n\n\n\n        // Call the cosigner\n\n        if (_cosigner != address(0)) {\n\n            request.cosigner = address(uint256(_cosigner) + 2);\n\n            require(Cosigner(_cosigner).requestCosign(address(this), uint256(id), _cosignerData, _oracleData), \"Cosign method returned false\");\n\n            require(request.cosigner == _cosigner, \"Cosigner didn't callback\");\n\n            request.salt = uint256(read(_requestData, O_SALT, L_SALT));\n\n        }\n\n\n\n        // Call the loan callback\n\n        address callback = address(uint256(read(_requestData, O_CALLBACK, L_CALLBACK)));\n\n        if (callback != address(0)) {\n\n            require(LoanCallback(callback).onLent.gas(GAS_CALLBACK)(id, msg.sender, _callbackData), \"Rejected by loan callback\");\n\n        }\n",
          "message": "Reentrancy in LoanManager.settleLend (LoanManager.sol#2658-2735):\n\tExternal calls:\n\t- (id,innerSalt) = _buildSettleId(_requestData,_loanData) (LoanManager.sol#2674)\n\t- tokens = _currencyToToken(_requestData,_oracleData) (LoanManager.sol#2679)\n\t- require(bool,string)(token.transferFrom(msg.sender,address(uint256(read(_requestData,O_BORROWER,L_BORROWER))),tokens),Error sending tokens to borrower) (LoanManager.sol#2680-2687)\n\t- require(bool,string)(_createDebt(_requestData,_loanData,innerSalt) == id,Error creating debt registry) (LoanManager.sol#2690-2697)\n\t- _validateSettleSignatures(id,_requestData,_loanData,_creatorSig,_borrowerSig) (LoanManager.sol#2720)\n\tState variables written after the call(s):\n\t- requests (LoanManager.sol#2724)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 2658,
          "vulnerability_to_line": 2735,
          "vulnerability_code": "    function settleLend(\n\n        bytes memory _requestData,\n\n        bytes memory _loanData,\n\n        address _cosigner,\n\n        uint256 _maxCosignerCost,\n\n        bytes memory _cosignerData,\n\n        bytes memory _oracleData,\n\n        bytes memory _creatorSig,\n\n        bytes memory _borrowerSig,\n\n        bytes memory _callbackData\n\n    ) public returns (bytes32 id) {\n\n        // Validate request\n\n        require(uint256(read(_requestData, O_EXPIRATION, L_EXPIRATION)) > now, \"Loan request is expired\");\n\n\n\n        // Get id\n\n        uint256 innerSalt;\n\n        (id, innerSalt) = _buildSettleId(_requestData, _loanData);\n\n\n\n        require(requests[id].borrower == address(0), \"Request already exist\");\n\n\n\n        // Transfer tokens to borrower\n\n        uint256 tokens = _currencyToToken(_requestData, _oracleData);\n\n        require(\n\n            token.transferFrom(\n\n                msg.sender,\n\n                address(uint256(read(_requestData, O_BORROWER, L_BORROWER))),\n\n                tokens\n\n            ),\n\n            \"Error sending tokens to borrower\"\n\n        );\n\n\n\n        // Generate the debt\n\n        require(\n\n            _createDebt(\n\n                _requestData,\n\n                _loanData,\n\n                innerSalt\n\n            ) == id,\n\n            \"Error creating debt registry\"\n\n        );\n\n\n\n        emit SettledLend(id, msg.sender, tokens);\n\n\n\n        // Save the request info\n\n        requests[id] = Request({\n\n            open: false,\n\n            approved: true,\n\n            cosigner: _cosigner,\n\n            amount: uint128(uint256(read(_requestData, O_AMOUNT, L_AMOUNT))),\n\n            model: address(uint256(read(_requestData, O_MODEL, L_MODEL))),\n\n            creator: address(uint256(read(_requestData, O_CREATOR, L_CREATOR))),\n\n            oracle: address(uint256(read(_requestData, O_ORACLE, L_ORACLE))),\n\n            borrower: address(uint256(read(_requestData, O_BORROWER, L_BORROWER))),\n\n            callback: address(uint256(read(_requestData, O_CALLBACK, L_CALLBACK))),\n\n            salt: _cosigner != address(0) ? _maxCosignerCost : uint256(read(_requestData, O_SALT, L_SALT)),\n\n            loanData: _loanData,\n\n            expiration: uint64(uint256(read(_requestData, O_EXPIRATION, L_EXPIRATION)))\n\n        });\n\n\n\n        Request storage request = requests[id];\n\n\n\n        // Validate signatures\n\n        _validateSettleSignatures(id, _requestData, _loanData, _creatorSig, _borrowerSig);\n\n\n\n        // Call the cosigner\n\n        if (_cosigner != address(0)) {\n\n            request.cosigner = address(uint256(_cosigner) + 2);\n\n            require(Cosigner(_cosigner).requestCosign(address(this), uint256(id), _cosignerData, _oracleData), \"Cosign method returned false\");\n\n            require(request.cosigner == _cosigner, \"Cosigner didn't callback\");\n\n            request.salt = uint256(read(_requestData, O_SALT, L_SALT));\n\n        }\n\n\n\n        // Call the loan callback\n\n        address callback = address(uint256(read(_requestData, O_CALLBACK, L_CALLBACK)));\n\n        if (callback != address(0)) {\n\n            require(LoanCallback(callback).onLent.gas(GAS_CALLBACK)(id, msg.sender, _callbackData), \"Rejected by loan callback\");\n\n        }\n",
          "message": "Reentrancy in LoanManager.settleLend (LoanManager.sol#2658-2735):\n\tExternal calls:\n\t- (id,innerSalt) = _buildSettleId(_requestData,_loanData) (LoanManager.sol#2674)\n\t- tokens = _currencyToToken(_requestData,_oracleData) (LoanManager.sol#2679)\n\t- require(bool,string)(token.transferFrom(msg.sender,address(uint256(read(_requestData,O_BORROWER,L_BORROWER))),tokens),Error sending tokens to borrower) (LoanManager.sol#2680-2687)\n\t- require(bool,string)(_createDebt(_requestData,_loanData,innerSalt) == id,Error creating debt registry) (LoanManager.sol#2690-2697)\n\t- _validateSettleSignatures(id,_requestData,_loanData,_creatorSig,_borrowerSig) (LoanManager.sol#2720)\n\t- require(bool,string)(Cosigner(_cosigner).requestCosign(address(this),uint256(id),_cosignerData,_oracleData),Cosign method returned false) (LoanManager.sol#2725)\n\tState variables written after the call(s):\n\t- requests (LoanManager.sol#2727)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 2658,
          "vulnerability_to_line": 2735,
          "vulnerability_code": "    function settleLend(\n\n        bytes memory _requestData,\n\n        bytes memory _loanData,\n\n        address _cosigner,\n\n        uint256 _maxCosignerCost,\n\n        bytes memory _cosignerData,\n\n        bytes memory _oracleData,\n\n        bytes memory _creatorSig,\n\n        bytes memory _borrowerSig,\n\n        bytes memory _callbackData\n\n    ) public returns (bytes32 id) {\n\n        // Validate request\n\n        require(uint256(read(_requestData, O_EXPIRATION, L_EXPIRATION)) > now, \"Loan request is expired\");\n\n\n\n        // Get id\n\n        uint256 innerSalt;\n\n        (id, innerSalt) = _buildSettleId(_requestData, _loanData);\n\n\n\n        require(requests[id].borrower == address(0), \"Request already exist\");\n\n\n\n        // Transfer tokens to borrower\n\n        uint256 tokens = _currencyToToken(_requestData, _oracleData);\n\n        require(\n\n            token.transferFrom(\n\n                msg.sender,\n\n                address(uint256(read(_requestData, O_BORROWER, L_BORROWER))),\n\n                tokens\n\n            ),\n\n            \"Error sending tokens to borrower\"\n\n        );\n\n\n\n        // Generate the debt\n\n        require(\n\n            _createDebt(\n\n                _requestData,\n\n                _loanData,\n\n                innerSalt\n\n            ) == id,\n\n            \"Error creating debt registry\"\n\n        );\n\n\n\n        emit SettledLend(id, msg.sender, tokens);\n\n\n\n        // Save the request info\n\n        requests[id] = Request({\n\n            open: false,\n\n            approved: true,\n\n            cosigner: _cosigner,\n\n            amount: uint128(uint256(read(_requestData, O_AMOUNT, L_AMOUNT))),\n\n            model: address(uint256(read(_requestData, O_MODEL, L_MODEL))),\n\n            creator: address(uint256(read(_requestData, O_CREATOR, L_CREATOR))),\n\n            oracle: address(uint256(read(_requestData, O_ORACLE, L_ORACLE))),\n\n            borrower: address(uint256(read(_requestData, O_BORROWER, L_BORROWER))),\n\n            callback: address(uint256(read(_requestData, O_CALLBACK, L_CALLBACK))),\n\n            salt: _cosigner != address(0) ? _maxCosignerCost : uint256(read(_requestData, O_SALT, L_SALT)),\n\n            loanData: _loanData,\n\n            expiration: uint64(uint256(read(_requestData, O_EXPIRATION, L_EXPIRATION)))\n\n        });\n\n\n\n        Request storage request = requests[id];\n\n\n\n        // Validate signatures\n\n        _validateSettleSignatures(id, _requestData, _loanData, _creatorSig, _borrowerSig);\n\n\n\n        // Call the cosigner\n\n        if (_cosigner != address(0)) {\n\n            request.cosigner = address(uint256(_cosigner) + 2);\n\n            require(Cosigner(_cosigner).requestCosign(address(this), uint256(id), _cosignerData, _oracleData), \"Cosign method returned false\");\n\n            require(request.cosigner == _cosigner, \"Cosigner didn't callback\");\n\n            request.salt = uint256(read(_requestData, O_SALT, L_SALT));\n\n        }\n\n\n\n        // Call the loan callback\n\n        address callback = address(uint256(read(_requestData, O_CALLBACK, L_CALLBACK)));\n\n        if (callback != address(0)) {\n\n            require(LoanCallback(callback).onLent.gas(GAS_CALLBACK)(id, msg.sender, _callbackData), \"Rejected by loan callback\");\n\n        }\n",
          "message": "Reentrancy in LoanManager.settleLend (LoanManager.sol#2658-2735):\n\tExternal calls:\n\t- (id,innerSalt) = _buildSettleId(_requestData,_loanData) (LoanManager.sol#2674)\n\t- tokens = _currencyToToken(_requestData,_oracleData) (LoanManager.sol#2679)\n\t- require(bool,string)(token.transferFrom(msg.sender,address(uint256(read(_requestData,O_BORROWER,L_BORROWER))),tokens),Error sending tokens to borrower) (LoanManager.sol#2680-2687)\n\t- require(bool,string)(_createDebt(_requestData,_loanData,innerSalt) == id,Error creating debt registry) (LoanManager.sol#2690-2697)\n\tState variables written after the call(s):\n\t- requests (LoanManager.sol#2702-2715)\n\t- requests (LoanManager.sol#2702-2715)\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 1429,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 tokens;\n",
          "message": "tokens in DebtEngine.payBatch (LoanManager.sol#1429) is a local variable never initialiazed\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 1373,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 equivalent;\n",
          "message": "equivalent in DebtEngine.payToken (LoanManager.sol#1373) is a local variable never initialiazed\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 1464,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 tokens;\n",
          "message": "tokens in DebtEngine.payTokenBatch (LoanManager.sol#1464) is a local variable never initialiazed\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 1374,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 tokens;\n",
          "message": "tokens in DebtEngine.payToken (LoanManager.sol#1374) is a local variable never initialiazed\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 1465,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 equivalent;\n",
          "message": "equivalent in DebtEngine.payTokenBatch (LoanManager.sol#1465) is a local variable never initialiazed\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 1430,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 equivalent;\n",
          "message": "equivalent in DebtEngine.payBatch (LoanManager.sol#1430) is a local variable never initialiazed\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 546,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string memory name,\n",
          "message": "ERC721Base.constructor.name (local variable @ LoanManager.sol#546) shadows:\n\t- ERC721Base.name (function @ LoanManager.sol#573-575)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 547,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string memory symbol\n",
          "message": "ERC721Base.constructor.symbol (local variable @ LoanManager.sol#547) shadows:\n\t- ERC721Base.symbol (function @ LoanManager.sol#578-580)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 1171,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _owner,\n",
          "message": "DebtEngine.create._owner (local variable @ LoanManager.sol#1171) shadows:\n\t- Ownable._owner (state variable @ LoanManager.sol#1031)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 1205,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _owner,\n",
          "message": "DebtEngine.create2._owner (local variable @ LoanManager.sol#1205) shadows:\n\t- Ownable._owner (state variable @ LoanManager.sol#1031)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 1242,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _owner,\n",
          "message": "DebtEngine.create3._owner (local variable @ LoanManager.sol#1242) shadows:\n\t- Ownable._owner (state variable @ LoanManager.sol#1031)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 2288,
          "vulnerability_to_line": 2295,
          "vulnerability_code": "        uint256 internalSalt = _buildInternalSalt(\n\n            _amount,\n\n            _borrower,\n\n            _creator,\n\n            _callback,\n\n            _salt,\n\n            _expiration\n",
          "message": "LoanManager.calcId.internalSalt (local variable @ LoanManager.sol#2288-2295) shadows:\n\t- LoanManager.internalSalt (function @ LoanManager.sol#2328-2332)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1541,
          "vulnerability_to_line": 1584,
          "vulnerability_code": "    function _safePay(\n\n        bytes32 _id,\n\n        Model _model,\n\n        uint256 _available\n\n    ) internal returns (uint256) {\n\n        require(_model != Model(0), \"Debt does not exist\");\n\n\n\n        (bool success, bytes32 paid) = _safeGasCall(\n\n            address(_model),\n\n            abi.encodeWithSelector(\n\n                _model.addPaid.selector,\n\n                _id,\n\n                _available\n\n            )\n\n        );\n\n\n\n        if (success) {\n\n            if (debts[_id].error) {\n\n                emit ErrorRecover({\n\n                    _id: _id,\n\n                    _sender: msg.sender,\n\n                    _value: 0,\n\n                    _gasLeft: gasleft(),\n\n                    _gasLimit: block.gaslimit,\n\n                    _result: paid,\n\n                    _callData: msg.data\n\n                });\n\n\n\n                delete debts[_id].error;\n\n            }\n\n\n\n            return uint256(paid);\n\n        } else {\n\n            emit Error({\n\n                _id: _id,\n\n                _sender: msg.sender,\n\n                _value: msg.value,\n\n                _gasLeft: gasleft(),\n\n                _gasLimit: block.gaslimit,\n\n                _callData: msg.data\n\n            });\n\n            debts[_id].error = true;\n\n        }\n",
          "message": "Reentrancy in DebtEngine._safePay (LoanManager.sol#1541-1584):\n\tExternal calls:\n\t- (success,paid) = _safeGasCall(address(_model),abi.encodeWithSelector(_model.addPaid.selector,_id,_available)) (LoanManager.sol#1548-1555)\n\tState variables written after the call(s):\n\t- debts (LoanManager.sol#1569)\n\t- debts (LoanManager.sol#1582)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 2345,
          "vulnerability_to_line": 2415,
          "vulnerability_code": "    function requestLoan(\n\n        uint128 _amount,\n\n        address _model,\n\n        address _oracle,\n\n        address _borrower,\n\n        address _callback,\n\n        uint256 _salt,\n\n        uint64 _expiration,\n\n        bytes calldata _loanData\n\n    ) external returns (bytes32 id) {\n\n        require(_borrower != address(0), \"The request should have a borrower\");\n\n        require(Model(_model).validate(_loanData), \"The loan data is not valid\");\n\n\n\n        id = calcId(\n\n            _amount,\n\n            _borrower,\n\n            msg.sender,\n\n            _model,\n\n            _oracle,\n\n            _callback,\n\n            _salt,\n\n            _expiration,\n\n            _loanData\n\n        );\n\n\n\n        require(!canceledSettles[id], \"The debt was canceled\");\n\n\n\n        require(requests[id].borrower == address(0), \"Request already exist\");\n\n\n\n        bool approved = msg.sender == _borrower;\n\n\n\n        requests[id] = Request({\n\n            open: true,\n\n            approved: approved,\n\n            cosigner: address(0),\n\n            amount: _amount,\n\n            model: _model,\n\n            creator: msg.sender,\n\n            oracle: _oracle,\n\n            borrower: _borrower,\n\n            callback: _callback,\n\n            salt: _salt,\n\n            loanData: _loanData,\n\n            expiration: _expiration\n\n        });\n\n\n\n        emit Requested(\n\n            id,\n\n            _amount,\n\n            _model,\n\n            msg.sender,\n\n            _oracle,\n\n            _borrower,\n\n            _callback,\n\n            _salt,\n\n            _loanData,\n\n            _expiration\n\n        );\n\n\n\n        if (!approved) {\n\n            // implements: 0x76ba6009 = approveRequest(bytes32)\n\n            if (_borrower.isContract() && _borrower.implementsMethod(0x76ba6009)) {\n\n                approved = _requestContractApprove(id, _borrower);\n\n                requests[id].approved = approved;\n\n            }\n\n        }\n\n\n\n        if (approved) {\n\n            emit Approved(id);\n\n        }\n",
          "message": "Reentrancy in LoanManager.requestLoan (LoanManager.sol#2345-2415):\n\tExternal calls:\n\t- require(bool,string)(Model(_model).validate(_loanData),The loan data is not valid) (LoanManager.sol#2356)\n\tState variables written after the call(s):\n\t- requests (LoanManager.sol#2376-2389)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 2737,
          "vulnerability_to_line": 2751,
          "vulnerability_code": "    function settleCancel(\n\n        bytes calldata _requestData,\n\n        bytes calldata _loanData\n\n    ) external returns (bool) {\n\n        (bytes32 id, ) = _buildSettleId(_requestData, _loanData);\n\n        require(\n\n            msg.sender == address(uint256(read(_requestData, O_BORROWER, L_BORROWER))) ||\n\n            msg.sender == address(uint256(read(_requestData, O_CREATOR, L_CREATOR))),\n\n            \"Only borrower or creator can cancel a settle\"\n\n        );\n\n        canceledSettles[id] = true;\n\n        emit SettledCancel(id, msg.sender);\n\n\n\n        return true;\n",
          "message": "Reentrancy in LoanManager.settleCancel (LoanManager.sol#2737-2751):\n\tExternal calls:\n\t- (id) = _buildSettleId(_requestData,_loanData) (LoanManager.sol#2741)\n\tState variables written after the call(s):\n\t- canceledSettles (LoanManager.sol#2747)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 421,
          "vulnerability_to_line": 425,
          "vulnerability_code": "    function isContract(address _addr) internal view returns (bool) {\n\n        uint size;\n\n        assembly { size := extcodesize(_addr) }\n\n        return size > 0;\n",
          "message": "IsContract.isContract uses assembly (LoanManager.sol#421-425)\n\t- LoanManager.sol#423\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 1934,
          "vulnerability_to_line": 1954,
          "vulnerability_code": "    function _noThrowImplements(\n\n        address _contract,\n\n        bytes4 _interfaceId\n\n    ) private view returns (uint256 success, uint256 result) {\n\n        bytes4 erc165ID = ERC165ID;\n\n        assembly {\n\n            let x := mload(0x40)               // Find empty storage location using \"free memory pointer\"\n\n            mstore(x, erc165ID)                // Place signature at begining of empty storage\n\n            mstore(add(x, 0x04), _interfaceId) // Place first argument directly next to signature\n\n\n\n            success := staticcall(\n\n                                30000,         // 30k gas\n\n                                _contract,     // To addr\n\n                                x,             // Inputs are stored at location x\n\n                                0x24,          // Inputs are 32 bytes long\n\n                                x,             // Store output over input (saves space)\n\n                                0x20)          // Outputs are 32 bytes long\n\n\n\n            result := mload(x)                 // Load the result\n\n        }\n",
          "message": "ImplementsInterface._noThrowImplements uses assembly (LoanManager.sol#1934-1954)\n\t- LoanManager.sol#1939-1953\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 1963,
          "vulnerability_to_line": 1968,
          "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n\n        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, mul(32, index))))\n\n        }\n",
          "message": "BytesUtils.readBytes32 uses assembly (LoanManager.sol#1963-1968)\n\t- LoanManager.sol#1965-1967\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 1970,
          "vulnerability_to_line": 1977,
          "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n\n        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, offset)))\n\n            let lb := sub(32, length)\n\n            if lb { o := div(o, exp(2, mul(lb, 8))) }\n\n        }\n",
          "message": "BytesUtils.read uses assembly (LoanManager.sol#1970-1977)\n\t- LoanManager.sol#1972-1976\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 1979,
          "vulnerability_to_line": 1989,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la\n\n    ) internal pure returns (bytes32 _a) {\n\n        require(_data.length >= _la, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            _a := mload(add(_data, 32))\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n        }\n",
          "message": "BytesUtils.decode uses assembly (LoanManager.sol#1979-1989)\n\t- LoanManager.sol#1984-1988\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 1991,
          "vulnerability_to_line": 2009,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb\n\n    ) internal pure returns (bytes32 _a, bytes32 _b) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode uses assembly (LoanManager.sol#1991-2009)\n\t- LoanManager.sol#1997-2007\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 2011,
          "vulnerability_to_line": 2034,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode uses assembly (LoanManager.sol#2011-2034)\n\t- LoanManager.sol#2018-2032\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 2036,
          "vulnerability_to_line": 2064,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode uses assembly (LoanManager.sol#2036-2064)\n\t- LoanManager.sol#2044-2062\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 2066,
          "vulnerability_to_line": 2099,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode uses assembly (LoanManager.sol#2066-2099)\n\t- LoanManager.sol#2075-2097\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 2101,
          "vulnerability_to_line": 2146,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le,\n\n        uint256 _lf\n\n    ) internal pure returns (\n\n        bytes32 _a,\n\n        bytes32 _b,\n\n        bytes32 _c,\n\n        bytes32 _d,\n\n        bytes32 _e,\n\n        bytes32 _f\n\n    ) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := add(o, _le)\n\n            _f := mload(o)\n\n            l := sub(32, _lf)\n\n            if l { _f := div(_f, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode uses assembly (LoanManager.sol#2101-2146)\n\t- LoanManager.sol#2118-2144\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 2923,
          "vulnerability_to_line": 2939,
          "vulnerability_code": "    function ecrecovery(bytes32 _hash, bytes memory _sig) internal pure returns (address) {\n\n        bytes32 r;\n\n        bytes32 s;\n\n        uint8 v;\n\n\n\n        assembly {\n\n            r := mload(add(_sig, 32))\n\n            s := mload(add(_sig, 64))\n\n            v := and(mload(add(_sig, 65)), 255)\n\n        }\n\n\n\n        if (v < 27) {\n\n            v += 27;\n\n        }\n\n\n\n        return ecrecover(_hash, v, r, s);\n",
          "message": "LoanManager.ecrecovery uses assembly (LoanManager.sol#2923-2939)\n\t- LoanManager.sol#2928-2932\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1867,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function url() public view returns (string memory);\n",
          "message": "Cosigner.url (LoanManager.sol#1867) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1874,
          "vulnerability_to_line": 1880,
          "vulnerability_code": "    function cost(\n\n        address engine,\n\n        uint256 index,\n\n        bytes memory data,\n\n        bytes memory oracleData\n\n    )\n",
          "message": "Cosigner.cost (LoanManager.sol#1874-1880) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1889,
          "vulnerability_to_line": 1895,
          "vulnerability_code": "    function requestCosign(\n\n        address engine,\n\n        uint256 index,\n\n        bytes memory data,\n\n        bytes memory oracleData\n\n    )\n",
          "message": "Cosigner.requestCosign (LoanManager.sol#1889-1895) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1903,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function claim(address engine, uint256 index, bytes memory oracleData) public returns (bool);\n",
          "message": "Cosigner.claim (LoanManager.sol#1903) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 2499,
          "vulnerability_to_line": 2563,
          "vulnerability_code": "    function lend(\n\n        bytes32 _id,\n\n        bytes memory _oracleData,\n\n        address _cosigner,\n\n        uint256 _cosignerLimit,\n\n        bytes memory _cosignerData,\n\n        bytes memory _callbackData\n\n    ) public returns (bool) {\n\n        Request storage request = requests[_id];\n\n        require(request.open, \"Request is no longer open\");\n\n        require(request.approved, \"The request is not approved by the borrower\");\n\n        require(request.expiration > now, \"The request is expired\");\n\n\n\n        request.open = false;\n\n\n\n        uint256 tokens = _currencyToToken(request.oracle, request.amount, _oracleData);\n\n        require(\n\n            token.transferFrom(\n\n                msg.sender,\n\n                request.borrower,\n\n                tokens\n\n            ),\n\n            \"Error sending tokens to borrower\"\n\n        );\n\n\n\n        emit Lent(_id, msg.sender, tokens);\n\n\n\n        // Generate the debt\n\n        require(\n\n            debtEngine.create2(\n\n                Model(request.model),\n\n                msg.sender,\n\n                request.oracle,\n\n                _internalSalt(request),\n\n                request.loanData\n\n            ) == _id,\n\n            \"Error creating the debt\"\n\n        );\n\n\n\n        // Call the cosigner\n\n        if (_cosigner != address(0)) {\n\n            uint256 auxSalt = request.salt;\n\n            request.cosigner = address(uint256(_cosigner) + 2);\n\n            request.salt = _cosignerLimit; // Risky ?\n\n            require(\n\n                Cosigner(_cosigner).requestCosign(\n\n                    address(this),\n\n                    uint256(_id),\n\n                    _cosignerData,\n\n                    _oracleData\n\n                ),\n\n                \"Cosign method returned false\"\n\n            );\n\n            require(request.cosigner == _cosigner, \"Cosigner didn't callback\");\n\n            request.salt = auxSalt;\n\n        }\n\n\n\n        // Call the loan callback\n\n        address callback = request.callback;\n\n        if (callback != address(0)) {\n\n            require(LoanCallback(callback).onLent.gas(GAS_CALLBACK)(_id, msg.sender, _callbackData), \"Rejected by loan callback\");\n\n        }\n\n\n\n        return true;\n",
          "message": "LoanManager.lend (LoanManager.sol#2499-2563) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 2658,
          "vulnerability_to_line": 2735,
          "vulnerability_code": "    function settleLend(\n\n        bytes memory _requestData,\n\n        bytes memory _loanData,\n\n        address _cosigner,\n\n        uint256 _maxCosignerCost,\n\n        bytes memory _cosignerData,\n\n        bytes memory _oracleData,\n\n        bytes memory _creatorSig,\n\n        bytes memory _borrowerSig,\n\n        bytes memory _callbackData\n\n    ) public returns (bytes32 id) {\n\n        // Validate request\n\n        require(uint256(read(_requestData, O_EXPIRATION, L_EXPIRATION)) > now, \"Loan request is expired\");\n\n\n\n        // Get id\n\n        uint256 innerSalt;\n\n        (id, innerSalt) = _buildSettleId(_requestData, _loanData);\n\n\n\n        require(requests[id].borrower == address(0), \"Request already exist\");\n\n\n\n        // Transfer tokens to borrower\n\n        uint256 tokens = _currencyToToken(_requestData, _oracleData);\n\n        require(\n\n            token.transferFrom(\n\n                msg.sender,\n\n                address(uint256(read(_requestData, O_BORROWER, L_BORROWER))),\n\n                tokens\n\n            ),\n\n            \"Error sending tokens to borrower\"\n\n        );\n\n\n\n        // Generate the debt\n\n        require(\n\n            _createDebt(\n\n                _requestData,\n\n                _loanData,\n\n                innerSalt\n\n            ) == id,\n\n            \"Error creating debt registry\"\n\n        );\n\n\n\n        emit SettledLend(id, msg.sender, tokens);\n\n\n\n        // Save the request info\n\n        requests[id] = Request({\n\n            open: false,\n\n            approved: true,\n\n            cosigner: _cosigner,\n\n            amount: uint128(uint256(read(_requestData, O_AMOUNT, L_AMOUNT))),\n\n            model: address(uint256(read(_requestData, O_MODEL, L_MODEL))),\n\n            creator: address(uint256(read(_requestData, O_CREATOR, L_CREATOR))),\n\n            oracle: address(uint256(read(_requestData, O_ORACLE, L_ORACLE))),\n\n            borrower: address(uint256(read(_requestData, O_BORROWER, L_BORROWER))),\n\n            callback: address(uint256(read(_requestData, O_CALLBACK, L_CALLBACK))),\n\n            salt: _cosigner != address(0) ? _maxCosignerCost : uint256(read(_requestData, O_SALT, L_SALT)),\n\n            loanData: _loanData,\n\n            expiration: uint64(uint256(read(_requestData, O_EXPIRATION, L_EXPIRATION)))\n\n        });\n\n\n\n        Request storage request = requests[id];\n\n\n\n        // Validate signatures\n\n        _validateSettleSignatures(id, _requestData, _loanData, _creatorSig, _borrowerSig);\n\n\n\n        // Call the cosigner\n\n        if (_cosigner != address(0)) {\n\n            request.cosigner = address(uint256(_cosigner) + 2);\n\n            require(Cosigner(_cosigner).requestCosign(address(this), uint256(id), _cosignerData, _oracleData), \"Cosign method returned false\");\n\n            require(request.cosigner == _cosigner, \"Cosigner didn't callback\");\n\n            request.salt = uint256(read(_requestData, O_SALT, L_SALT));\n\n        }\n\n\n\n        // Call the loan callback\n\n        address callback = address(uint256(read(_requestData, O_CALLBACK, L_CALLBACK)));\n\n        if (callback != address(0)) {\n\n            require(LoanCallback(callback).onLent.gas(GAS_CALLBACK)(id, msg.sender, _callbackData), \"Rejected by loan callback\");\n\n        }\n",
          "message": "LoanManager.settleLend (LoanManager.sol#2658-2735) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": "Detected issues with version pragma in LoanManager.sol:\n\t- pragma solidity^0.5.11 (LoanManager.sol#3): it allows old versions\n\t- pragma solidity^0.5.11 (LoanManager.sol#17): it allows old versions\n\t- pragma solidity^0.5.11 (LoanManager.sol#32): it allows old versions\n\t- pragma solidity^0.5.11 (LoanManager.sol#355): it allows old versions\n\t- pragma solidity^0.5.11 (LoanManager.sol#417): it allows old versions\n\t- pragma solidity^0.5.11 (LoanManager.sol#430): it allows old versions\n\t- pragma solidity^0.5.11 (LoanManager.sol#458): it allows old versions\n\t- pragma solidity^0.5.11 (LoanManager.sol#511): it allows old versions\n\t- pragma solidity^0.5.11 (LoanManager.sol#1007): it allows old versions\n\t- pragma solidity^0.5.11 (LoanManager.sol#1028): it allows old versions\n\t- pragma solidity^0.5.11 (LoanManager.sol#1061): it allows old versions\n\t- pragma solidity^0.5.11 (LoanManager.sol#1771): it allows old versions\n\t- pragma solidity^0.5.11 (LoanManager.sol#1823): it allows old versions\n\t- pragma solidity^0.5.11 (LoanManager.sol#1845): it allows old versions\n\t- pragma solidity^0.5.11 (LoanManager.sol#1908): it allows old versions\n\t- pragma solidity^0.5.11 (LoanManager.sol#1959): it allows old versions\n\t- pragma solidity^0.5.11 (LoanManager.sol#2152): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 993,
          "vulnerability_to_line": 1002,
          "vulnerability_code": "    function _noThrowCall(\n\n        address _contract,\n\n        bytes memory _data\n\n    ) internal returns (bool success, bytes4 result) {\n\n        bytes memory returnData;\n\n        (success, returnData) = _contract.call(_data);\n\n\n\n        if (returnData.length > 0)\n\n            result = abi.decode(returnData, (bytes4));\n",
          "message": "Low level call in ERC721Base._noThrowCall (LoanManager.sol#993-1002):\n\t-(success,returnData) = _contract.call(_data) LoanManager.sol#998\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 1735,
          "vulnerability_to_line": 1746,
          "vulnerability_code": "    function _safeGasStaticCall(\n\n        address _contract,\n\n        bytes memory _data\n\n    ) internal view returns (bool success, uint256 result) {\n\n        bytes memory returnData;\n\n        uint256 _gas = (block.gaslimit * 80) / 100;\n\n\n\n        (success, returnData) = _contract.staticcall.gas(gasleft() < _gas ? gasleft() : _gas)(_data);\n\n\n\n        if (returnData.length > 0)\n\n            result = abi.decode(returnData, (uint256));\n",
          "message": "Low level call in DebtEngine._safeGasStaticCall (LoanManager.sol#1735-1746):\n\t-(success,returnData) = _contract.staticcall.gas(gasleft()())(_data) LoanManager.sol#1742\n\t-(success,returnData) = _contract.staticcall.gas(_gas)(_data) LoanManager.sol#1742\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 1755,
          "vulnerability_to_line": 1766,
          "vulnerability_code": "    function _safeGasCall(\n\n        address _contract,\n\n        bytes memory _data\n\n    ) internal returns (bool success, bytes32 result) {\n\n        bytes memory returnData;\n\n        uint256 _gas = (block.gaslimit * 80) / 100;\n\n\n\n        (success, returnData) = _contract.call.gas(gasleft() < _gas ? gasleft() : _gas)(_data);\n\n\n\n        if (returnData.length > 0)\n\n            result = abi.decode(returnData, (bytes32));\n",
          "message": "Low level call in DebtEngine._safeGasCall (LoanManager.sol#1755-1766):\n\t-(success,returnData) = _contract.call.gas(gasleft()())(_data) LoanManager.sol#1762\n\t-(success,returnData) = _contract.call.gas(_gas)(_data) LoanManager.sol#1762\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 2961,
          "vulnerability_to_line": 2970,
          "vulnerability_code": "    function _safeCall(\n\n        address _contract,\n\n        bytes memory _data\n\n    ) internal returns (bool success, bytes32 result) {\n\n        bytes memory returnData;\n\n        (success, returnData) = _contract.call(_data);\n\n\n\n        if (returnData.length > 0)\n\n            result = abi.decode(returnData, (bytes32));\n",
          "message": "Low level call in LoanManager._safeCall (LoanManager.sol#2961-2970):\n\t-(success,returnData) = _contract.call(_data) LoanManager.sol#2966\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 501,
          "vulnerability_to_line": 506,
          "vulnerability_code": "    function _registerInterface(bytes4 interfaceId)\n\n        internal\n\n    {\n\n        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n\n        _supportedInterfaces[interfaceId] = true;\n",
          "message": "Function 'ERC165._registerInterface' (LoanManager.sol#501-506) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 466,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
          "message": "Constant 'ERC165._InterfaceId_ERC165' (LoanManager.sol#466) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 588,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function tokenURI(uint256 _tokenId) external view returns (string memory) {\n",
          "message": "Parameter '_tokenId' of ERC721Base.tokenURI (LoanManager.sol#588) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 594,
          "vulnerability_to_line": 598,
          "vulnerability_code": "    function _setURIProvider(URIProvider _provider) internal returns (bool) {\n\n        emit SetURIProvider(address(_provider));\n\n        _uriProvider = _provider;\n\n        return true;\n",
          "message": "Function 'ERC721Base._setURIProvider' (LoanManager.sol#594-598) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 594,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setURIProvider(URIProvider _provider) internal returns (bool) {\n",
          "message": "Parameter '_provider' of ERC721Base._setURIProvider (LoanManager.sol#594) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 627,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function assetsOf(address _owner) external view returns (uint256[] memory) {\n",
          "message": "Parameter '_owner' of ERC721Base.assetsOf (LoanManager.sol#627) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 646,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function tokenByIndex(uint256 _index) external view returns (uint256) {\n",
          "message": "Parameter '_index' of ERC721Base.tokenByIndex (LoanManager.sol#646) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 660,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n",
          "message": "Parameter '_owner' of ERC721Base.tokenOfOwnerByIndex (LoanManager.sol#660) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 660,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n",
          "message": "Parameter '_index' of ERC721Base.tokenOfOwnerByIndex (LoanManager.sol#660) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 676,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ownerOf(uint256 _assetId) external view returns (address) {\n",
          "message": "Parameter '_assetId' of ERC721Base.ownerOf (LoanManager.sol#676) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 680,
          "vulnerability_to_line": 682,
          "vulnerability_code": "    function _ownerOf(uint256 _assetId) internal view returns (address) {\n\n        return _holderOf[_assetId];\n",
          "message": "Function 'ERC721Base._ownerOf' (LoanManager.sol#680-682) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 680,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _ownerOf(uint256 _assetId) internal view returns (address) {\n",
          "message": "Parameter '_assetId' of ERC721Base._ownerOf (LoanManager.sol#680) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 692,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) external view returns (uint256) {\n",
          "message": "Parameter '_owner' of ERC721Base.balanceOf (LoanManager.sol#692) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 696,
          "vulnerability_to_line": 698,
          "vulnerability_code": "    function _balanceOf(address _owner) internal view returns (uint256) {\n\n        return _assetsOf[_owner].length;\n",
          "message": "Function 'ERC721Base._balanceOf' (LoanManager.sol#696-698) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 696,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _balanceOf(address _owner) internal view returns (uint256) {\n",
          "message": "Parameter '_owner' of ERC721Base._balanceOf (LoanManager.sol#696) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 711,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _operator,\n",
          "message": "Parameter '_operator' of ERC721Base.isApprovedForAll (LoanManager.sol#711) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 712,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _assetHolder\n",
          "message": "Parameter '_assetHolder' of ERC721Base.isApprovedForAll (LoanManager.sol#712) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 717,
          "vulnerability_to_line": 722,
          "vulnerability_code": "    function _isApprovedForAll(\n\n        address _operator,\n\n        address _assetHolder\n\n    ) internal view returns (bool) {\n\n        return _operators[_assetHolder][_operator];\n",
          "message": "Function 'ERC721Base._isApprovedForAll' (LoanManager.sol#717-722) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 718,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _operator,\n",
          "message": "Parameter '_operator' of ERC721Base._isApprovedForAll (LoanManager.sol#718) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 719,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _assetHolder\n",
          "message": "Parameter '_assetHolder' of ERC721Base._isApprovedForAll (LoanManager.sol#719) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 729,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getApproved(uint256 _assetId) external view returns (address) {\n",
          "message": "Parameter '_assetId' of ERC721Base.getApproved (LoanManager.sol#729) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 733,
          "vulnerability_to_line": 735,
          "vulnerability_code": "    function _getApproved(uint256 _assetId) internal view returns (address) {\n\n        return _approval[_assetId];\n",
          "message": "Function 'ERC721Base._getApproved' (LoanManager.sol#733-735) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 733,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _getApproved(uint256 _assetId) internal view returns (address) {\n",
          "message": "Parameter '_assetId' of ERC721Base._getApproved (LoanManager.sol#733) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 743,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isAuthorized(address _operator, uint256 _assetId) external view returns (bool) {\n",
          "message": "Parameter '_operator' of ERC721Base.isAuthorized (LoanManager.sol#743) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 743,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isAuthorized(address _operator, uint256 _assetId) external view returns (bool) {\n",
          "message": "Parameter '_assetId' of ERC721Base.isAuthorized (LoanManager.sol#743) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 747,
          "vulnerability_to_line": 752,
          "vulnerability_code": "    function _isAuthorized(address _operator, uint256 _assetId) internal view returns (bool) {\n\n        require(_operator != address(0), \"0x0 is an invalid operator\");\n\n        address owner = _ownerOf(_assetId);\n\n\n\n        return _operator == owner || _isApprovedForAll(_operator, owner) || _getApproved(_assetId) == _operator;\n",
          "message": "Function 'ERC721Base._isAuthorized' (LoanManager.sol#747-752) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 747,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _isAuthorized(address _operator, uint256 _assetId) internal view returns (bool) {\n",
          "message": "Parameter '_operator' of ERC721Base._isAuthorized (LoanManager.sol#747) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 747,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _isAuthorized(address _operator, uint256 _assetId) internal view returns (bool) {\n",
          "message": "Parameter '_assetId' of ERC721Base._isAuthorized (LoanManager.sol#747) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 763,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setApprovalForAll(address _operator, bool _authorized) external {\n",
          "message": "Parameter '_operator' of ERC721Base.setApprovalForAll (LoanManager.sol#763) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 763,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setApprovalForAll(address _operator, bool _authorized) external {\n",
          "message": "Parameter '_authorized' of ERC721Base.setApprovalForAll (LoanManager.sol#763) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 775,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _operator, uint256 _assetId) external {\n",
          "message": "Parameter '_operator' of ERC721Base.approve (LoanManager.sol#775) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 775,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _operator, uint256 _assetId) external {\n",
          "message": "Parameter '_assetId' of ERC721Base.approve (LoanManager.sol#775) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 788,
          "vulnerability_to_line": 799,
          "vulnerability_code": "    function _addAssetTo(address _to, uint256 _assetId) private {\n\n        // Store asset owner\n\n        _holderOf[_assetId] = _to;\n\n\n\n        // Store index of the asset\n\n        uint256 length = _balanceOf(_to);\n\n        _assetsOf[_to].push(_assetId);\n\n        _indexOfAsset[_assetId] = length;\n\n\n\n        // Save main enumerable\n\n        _allTokens.push(_assetId);\n",
          "message": "Function 'ERC721Base._addAssetTo' (LoanManager.sol#788-799) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 788,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _addAssetTo(address _to, uint256 _assetId) private {\n",
          "message": "Parameter '_to' of ERC721Base._addAssetTo (LoanManager.sol#788) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 788,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _addAssetTo(address _to, uint256 _assetId) private {\n",
          "message": "Parameter '_assetId' of ERC721Base._addAssetTo (LoanManager.sol#788) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 801,
          "vulnerability_to_line": 824,
          "vulnerability_code": "    function _transferAsset(address _from, address _to, uint256 _assetId) private {\n\n        uint256 assetIndex = _indexOfAsset[_assetId];\n\n        uint256 lastAssetIndex = _balanceOf(_from).sub(1);\n\n\n\n        if (assetIndex != lastAssetIndex) {\n\n            // Replace current asset with last asset\n\n            uint256 lastAssetId = _assetsOf[_from][lastAssetIndex];\n\n            // Insert the last asset into the position previously occupied by the asset to be removed\n\n            _assetsOf[_from][assetIndex] = lastAssetId;\n\n            _indexOfAsset[lastAssetId] = assetIndex;\n\n        }\n\n\n\n        // Resize the array\n\n        _assetsOf[_from][lastAssetIndex] = 0;\n\n        _assetsOf[_from].length--;\n\n\n\n        // Change owner\n\n        _holderOf[_assetId] = _to;\n\n\n\n        // Update the index of positions of the asset\n\n        uint256 length = _balanceOf(_to);\n\n        _assetsOf[_to].push(_assetId);\n\n        _indexOfAsset[_assetId] = length;\n",
          "message": "Function 'ERC721Base._transferAsset' (LoanManager.sol#801-824) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 801,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _transferAsset(address _from, address _to, uint256 _assetId) private {\n",
          "message": "Parameter '_from' of ERC721Base._transferAsset (LoanManager.sol#801) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 801,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _transferAsset(address _from, address _to, uint256 _assetId) private {\n",
          "message": "Parameter '_to' of ERC721Base._transferAsset (LoanManager.sol#801) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 801,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _transferAsset(address _from, address _to, uint256 _assetId) private {\n",
          "message": "Parameter '_assetId' of ERC721Base._transferAsset (LoanManager.sol#801) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 826,
          "vulnerability_to_line": 831,
          "vulnerability_code": "    function _clearApproval(address _holder, uint256 _assetId) private {\n\n        if (_approval[_assetId] != address(0)) {\n\n            _approval[_assetId] = address(0);\n\n            emit Approval(_holder, address(0), _assetId);\n\n        }\n",
          "message": "Function 'ERC721Base._clearApproval' (LoanManager.sol#826-831) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 826,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _clearApproval(address _holder, uint256 _assetId) private {\n",
          "message": "Parameter '_holder' of ERC721Base._clearApproval (LoanManager.sol#826) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 826,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _clearApproval(address _holder, uint256 _assetId) private {\n",
          "message": "Parameter '_assetId' of ERC721Base._clearApproval (LoanManager.sol#826) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 837,
          "vulnerability_to_line": 843,
          "vulnerability_code": "    function _generate(uint256 _assetId, address _beneficiary) internal {\n\n        require(_holderOf[_assetId] == address(0), \"Asset already exists\");\n\n\n\n        _addAssetTo(_beneficiary, _assetId);\n\n\n\n        emit Transfer(address(0), _beneficiary, _assetId);\n",
          "message": "Function 'ERC721Base._generate' (LoanManager.sol#837-843) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 837,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _generate(uint256 _assetId, address _beneficiary) internal {\n",
          "message": "Parameter '_assetId' of ERC721Base._generate (LoanManager.sol#837) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 837,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _generate(uint256 _assetId, address _beneficiary) internal {\n",
          "message": "Parameter '_beneficiary' of ERC721Base._generate (LoanManager.sol#837) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 871,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function safeTransferFrom(address _from, address _to, uint256 _assetId) external {\n",
          "message": "Parameter '_from' of ERC721Base.safeTransferFrom (LoanManager.sol#871) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 871,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function safeTransferFrom(address _from, address _to, uint256 _assetId) external {\n",
          "message": "Parameter '_to' of ERC721Base.safeTransferFrom (LoanManager.sol#871) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 871,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function safeTransferFrom(address _from, address _to, uint256 _assetId) external {\n",
          "message": "Parameter '_assetId' of ERC721Base.safeTransferFrom (LoanManager.sol#871) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 892,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _from,\n",
          "message": "Parameter '_from' of ERC721Base.safeTransferFrom (LoanManager.sol#892) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 893,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _to,\n",
          "message": "Parameter '_to' of ERC721Base.safeTransferFrom (LoanManager.sol#893) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 894,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _assetId,\n",
          "message": "Parameter '_assetId' of ERC721Base.safeTransferFrom (LoanManager.sol#894) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 895,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata _userData\n",
          "message": "Parameter '_userData' of ERC721Base.safeTransferFrom (LoanManager.sol#895) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 915,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _assetId) external {\n",
          "message": "Parameter '_from' of ERC721Base.transferFrom (LoanManager.sol#915) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 915,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _assetId) external {\n",
          "message": "Parameter '_to' of ERC721Base.transferFrom (LoanManager.sol#915) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 915,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _assetId) external {\n",
          "message": "Parameter '_assetId' of ERC721Base.transferFrom (LoanManager.sol#915) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 928,
          "vulnerability_to_line": 980,
          "vulnerability_code": "    function _doTransferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _assetId,\n\n        bytes memory _userData,\n\n        bool _doCheck\n\n    )\n\n        internal\n\n        onlyAuthorized(_assetId)\n\n        addressDefined(_to)\n\n        isCurrentOwner(_from, _assetId)\n\n    {\n\n        address holder = _holderOf[_assetId];\n\n        _clearApproval(holder, _assetId);\n\n        _transferAsset(holder, _to, _assetId);\n\n\n\n        if (_doCheck && _to.isContract()) {\n\n            // Call dest contract\n\n            // Perform check with the new safe call\n\n            // onERC721Received(address,address,uint256,bytes)\n\n            (bool success, bytes4 result) = _noThrowCall(\n\n                _to,\n\n                abi.encodeWithSelector(\n\n                    ERC721_RECEIVED,\n\n                    msg.sender,\n\n                    holder,\n\n                    _assetId,\n\n                    _userData\n\n                )\n\n            );\n\n\n\n            if (!success || result != ERC721_RECEIVED) {\n\n                // Try legacy safe call\n\n                // onERC721Received(address,uint256,bytes)\n\n                (success, result) = _noThrowCall(\n\n                    _to,\n\n                    abi.encodeWithSelector(\n\n                        ERC721_RECEIVED_LEGACY,\n\n                        holder,\n\n                        _assetId,\n\n                        _userData\n\n                    )\n\n                );\n\n\n\n                require(\n\n                    success && result == ERC721_RECEIVED_LEGACY,\n\n                    \"Contract rejected the token\"\n\n                );\n\n            }\n\n        }\n\n\n\n        emit Transfer(holder, _to, _assetId);\n",
          "message": "Function 'ERC721Base._doTransferFrom' (LoanManager.sol#928-980) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 930,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _to,\n",
          "message": "Parameter '_to' of ERC721Base._doTransferFrom (LoanManager.sol#930) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 931,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _assetId,\n",
          "message": "Parameter '_assetId' of ERC721Base._doTransferFrom (LoanManager.sol#931) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 932,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _userData,\n",
          "message": "Parameter '_userData' of ERC721Base._doTransferFrom (LoanManager.sol#932) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 933,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool _doCheck\n",
          "message": "Parameter '_doCheck' of ERC721Base._doTransferFrom (LoanManager.sol#933) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 993,
          "vulnerability_to_line": 1002,
          "vulnerability_code": "    function _noThrowCall(\n\n        address _contract,\n\n        bytes memory _data\n\n    ) internal returns (bool success, bytes4 result) {\n\n        bytes memory returnData;\n\n        (success, returnData) = _contract.call(_data);\n\n\n\n        if (returnData.length > 0)\n\n            result = abi.decode(returnData, (bytes4));\n",
          "message": "Function 'ERC721Base._noThrowCall' (LoanManager.sol#993-1002) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 994,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _contract,\n",
          "message": "Parameter '_contract' of ERC721Base._noThrowCall (LoanManager.sol#994) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 995,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _data\n",
          "message": "Parameter '_data' of ERC721Base._noThrowCall (LoanManager.sol#995) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1052,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferOwnership(address _newOwner) external onlyOwner {\n",
          "message": "Parameter '_newOwner' of Ownable.transferOwnership (LoanManager.sol#1052) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1031,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address internal _owner;\n",
          "message": "Variable 'Ownable._owner' (LoanManager.sol#1031) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1157,
          "vulnerability_to_line": null,
          "vulnerability_code": "        IERC20 _token\n",
          "message": "Parameter '_token' of DebtEngine. (LoanManager.sol#1157) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1165,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setURIProvider(URIProvider _provider) external onlyOwner {\n",
          "message": "Parameter '_provider' of DebtEngine.setURIProvider (LoanManager.sol#1165) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1170,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Model _model,\n",
          "message": "Parameter '_model' of DebtEngine.create (LoanManager.sol#1170) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1171,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _owner,\n",
          "message": "Parameter '_owner' of DebtEngine.create (LoanManager.sol#1171) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1172,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _oracle,\n",
          "message": "Parameter '_oracle' of DebtEngine.create (LoanManager.sol#1172) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1173,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata _data\n",
          "message": "Parameter '_data' of DebtEngine.create (LoanManager.sol#1173) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1204,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Model _model,\n",
          "message": "Parameter '_model' of DebtEngine.create2 (LoanManager.sol#1204) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1205,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _owner,\n",
          "message": "Parameter '_owner' of DebtEngine.create2 (LoanManager.sol#1205) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1206,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _oracle,\n",
          "message": "Parameter '_oracle' of DebtEngine.create2 (LoanManager.sol#1206) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1207,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _salt,\n",
          "message": "Parameter '_salt' of DebtEngine.create2 (LoanManager.sol#1207) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1208,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata _data\n",
          "message": "Parameter '_data' of DebtEngine.create2 (LoanManager.sol#1208) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1241,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Model _model,\n",
          "message": "Parameter '_model' of DebtEngine.create3 (LoanManager.sol#1241) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1242,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _owner,\n",
          "message": "Parameter '_owner' of DebtEngine.create3 (LoanManager.sol#1242) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1243,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _oracle,\n",
          "message": "Parameter '_oracle' of DebtEngine.create3 (LoanManager.sol#1243) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1244,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _salt,\n",
          "message": "Parameter '_salt' of DebtEngine.create3 (LoanManager.sol#1244) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1245,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata _data\n",
          "message": "Parameter '_data' of DebtEngine.create3 (LoanManager.sol#1245) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1275,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _creator,\n",
          "message": "Parameter '_creator' of DebtEngine.buildId (LoanManager.sol#1275) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1276,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _nonce\n",
          "message": "Parameter '_nonce' of DebtEngine.buildId (LoanManager.sol#1276) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1289,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _creator,\n",
          "message": "Parameter '_creator' of DebtEngine.buildId2 (LoanManager.sol#1289) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1290,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _model,\n",
          "message": "Parameter '_model' of DebtEngine.buildId2 (LoanManager.sol#1290) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1291,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _oracle,\n",
          "message": "Parameter '_oracle' of DebtEngine.buildId2 (LoanManager.sol#1291) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1292,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _salt,\n",
          "message": "Parameter '_salt' of DebtEngine.buildId2 (LoanManager.sol#1292) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1293,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata _data\n",
          "message": "Parameter '_data' of DebtEngine.buildId2 (LoanManager.sol#1293) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1309,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _creator,\n",
          "message": "Parameter '_creator' of DebtEngine.buildId3 (LoanManager.sol#1309) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1310,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _salt\n",
          "message": "Parameter '_salt' of DebtEngine.buildId3 (LoanManager.sol#1310) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1323,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32 _id,\n",
          "message": "Parameter '_id' of DebtEngine.pay (LoanManager.sol#1323) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1324,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _amount,\n",
          "message": "Parameter '_amount' of DebtEngine.pay (LoanManager.sol#1324) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1325,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _origin,\n",
          "message": "Parameter '_origin' of DebtEngine.pay (LoanManager.sol#1325) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1326,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata _oracleData\n",
          "message": "Parameter '_oracleData' of DebtEngine.pay (LoanManager.sol#1326) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1420,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32[] calldata _ids,\n",
          "message": "Parameter '_ids' of DebtEngine.payBatch (LoanManager.sol#1420) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1421,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256[] calldata _amounts,\n",
          "message": "Parameter '_amounts' of DebtEngine.payBatch (LoanManager.sol#1421) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1422,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _origin,\n",
          "message": "Parameter '_origin' of DebtEngine.payBatch (LoanManager.sol#1422) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1423,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _oracle,\n",
          "message": "Parameter '_oracle' of DebtEngine.payBatch (LoanManager.sol#1423) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1424,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata _oracleData\n",
          "message": "Parameter '_oracleData' of DebtEngine.payBatch (LoanManager.sol#1424) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1455,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32[] calldata _ids,\n",
          "message": "Parameter '_ids' of DebtEngine.payTokenBatch (LoanManager.sol#1455) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1456,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256[] calldata _tokenAmounts,\n",
          "message": "Parameter '_tokenAmounts' of DebtEngine.payTokenBatch (LoanManager.sol#1456) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1457,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _origin,\n",
          "message": "Parameter '_origin' of DebtEngine.payTokenBatch (LoanManager.sol#1457) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1458,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _oracle,\n",
          "message": "Parameter '_oracle' of DebtEngine.payTokenBatch (LoanManager.sol#1458) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1459,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata _oracleData\n",
          "message": "Parameter '_oracleData' of DebtEngine.payTokenBatch (LoanManager.sol#1459) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1507,
          "vulnerability_to_line": 1539,
          "vulnerability_code": "    function _pay(\n\n        bytes32 _id,\n\n        address _oracle,\n\n        uint256 _amount,\n\n        uint256 _tokens,\n\n        uint256 _equivalent\n\n    ) internal returns (uint256 paid, uint256 paidToken){\n\n        Debt storage debt = debts[_id];\n\n\n\n        if (_oracle != debt.oracle) {\n\n            emit PayBatchError(\n\n                _id,\n\n                _oracle\n\n            );\n\n\n\n            return (0,0);\n\n        }\n\n\n\n        // Paid only required amount\n\n        paid = _safePay(_id, debt.model, _amount);\n\n        require(paid <= _amount, \"Paid can't be more than requested\");\n\n\n\n        // Get token amount to use as payment\n\n        paidToken = _oracle != address(0) ? _toToken(paid, _tokens, _equivalent) : paid;\n\n\n\n        // Pull tokens from payer\n\n        require(token.transferFrom(msg.sender, address(this), paidToken), \"Error pulling payment tokens\");\n\n\n\n        // Add balance to debt\n\n        uint256 newBalance = paidToken.add(debt.balance);\n\n        require(newBalance < 340282366920938463463374607431768211456, \"uint128 Overflow\");\n\n        debt.balance = uint128(newBalance);\n",
          "message": "Function 'DebtEngine._pay' (LoanManager.sol#1507-1539) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1508,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32 _id,\n",
          "message": "Parameter '_id' of DebtEngine._pay (LoanManager.sol#1508) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1509,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _oracle,\n",
          "message": "Parameter '_oracle' of DebtEngine._pay (LoanManager.sol#1509) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1510,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _amount,\n",
          "message": "Parameter '_amount' of DebtEngine._pay (LoanManager.sol#1510) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1511,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _tokens,\n",
          "message": "Parameter '_tokens' of DebtEngine._pay (LoanManager.sol#1511) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1512,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _equivalent\n",
          "message": "Parameter '_equivalent' of DebtEngine._pay (LoanManager.sol#1512) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1541,
          "vulnerability_to_line": 1584,
          "vulnerability_code": "    function _safePay(\n\n        bytes32 _id,\n\n        Model _model,\n\n        uint256 _available\n\n    ) internal returns (uint256) {\n\n        require(_model != Model(0), \"Debt does not exist\");\n\n\n\n        (bool success, bytes32 paid) = _safeGasCall(\n\n            address(_model),\n\n            abi.encodeWithSelector(\n\n                _model.addPaid.selector,\n\n                _id,\n\n                _available\n\n            )\n\n        );\n\n\n\n        if (success) {\n\n            if (debts[_id].error) {\n\n                emit ErrorRecover({\n\n                    _id: _id,\n\n                    _sender: msg.sender,\n\n                    _value: 0,\n\n                    _gasLeft: gasleft(),\n\n                    _gasLimit: block.gaslimit,\n\n                    _result: paid,\n\n                    _callData: msg.data\n\n                });\n\n\n\n                delete debts[_id].error;\n\n            }\n\n\n\n            return uint256(paid);\n\n        } else {\n\n            emit Error({\n\n                _id: _id,\n\n                _sender: msg.sender,\n\n                _value: msg.value,\n\n                _gasLeft: gasleft(),\n\n                _gasLimit: block.gaslimit,\n\n                _callData: msg.data\n\n            });\n\n            debts[_id].error = true;\n\n        }\n",
          "message": "Function 'DebtEngine._safePay' (LoanManager.sol#1541-1584) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1542,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32 _id,\n",
          "message": "Parameter '_id' of DebtEngine._safePay (LoanManager.sol#1542) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1543,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Model _model,\n",
          "message": "Parameter '_model' of DebtEngine._safePay (LoanManager.sol#1543) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1544,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _available\n",
          "message": "Parameter '_available' of DebtEngine._safePay (LoanManager.sol#1544) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1595,
          "vulnerability_to_line": 1606,
          "vulnerability_code": "    function _toToken(\n\n        uint256 _amount,\n\n        uint256 _tokens,\n\n        uint256 _equivalent\n\n    ) internal pure returns (uint256 _result) {\n\n        require(_tokens != 0 && _equivalent != 0, \"Oracle provided invalid rate\");\n\n        uint256 aux = _tokens.mult(_amount);\n\n        _result = aux / _equivalent;\n\n        if (aux % _equivalent > 0) {\n\n            _result = _result.add(1);\n\n        }\n",
          "message": "Function 'DebtEngine._toToken' (LoanManager.sol#1595-1606) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1596,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _amount,\n",
          "message": "Parameter '_amount' of DebtEngine._toToken (LoanManager.sol#1596) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1597,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _tokens,\n",
          "message": "Parameter '_tokens' of DebtEngine._toToken (LoanManager.sol#1597) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1598,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _equivalent\n",
          "message": "Parameter '_equivalent' of DebtEngine._toToken (LoanManager.sol#1598) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1617,
          "vulnerability_to_line": 1624,
          "vulnerability_code": "    function _fromToken(\n\n        uint256 _amount,\n\n        uint256 _tokens,\n\n        uint256 _equivalent\n\n    ) internal pure returns (uint256) {\n\n        require(_tokens != 0 && _equivalent != 0, \"Oracle provided invalid rate\");\n\n        return _amount.mult(_equivalent) / _tokens;\n",
          "message": "Function 'DebtEngine._fromToken' (LoanManager.sol#1617-1624) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1618,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _amount,\n",
          "message": "Parameter '_amount' of DebtEngine._fromToken (LoanManager.sol#1618) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1619,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _tokens,\n",
          "message": "Parameter '_tokens' of DebtEngine._fromToken (LoanManager.sol#1619) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1620,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _equivalent\n",
          "message": "Parameter '_equivalent' of DebtEngine._fromToken (LoanManager.sol#1620) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1626,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function run(bytes32 _id) external returns (bool) {\n",
          "message": "Parameter '_id' of DebtEngine.run (LoanManager.sol#1626) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1667,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(bytes32 _id, address _to) external returns (uint256 amount) {\n",
          "message": "Parameter '_id' of DebtEngine.withdraw (LoanManager.sol#1667) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1667,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(bytes32 _id, address _to) external returns (uint256 amount) {\n",
          "message": "Parameter '_to' of DebtEngine.withdraw (LoanManager.sol#1667) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1682,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawPartial(bytes32 _id, address _to, uint256 _amount) external returns (bool success) {\n",
          "message": "Parameter '_id' of DebtEngine.withdrawPartial (LoanManager.sol#1682) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1682,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawPartial(bytes32 _id, address _to, uint256 _amount) external returns (bool success) {\n",
          "message": "Parameter '_to' of DebtEngine.withdrawPartial (LoanManager.sol#1682) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1682,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawPartial(bytes32 _id, address _to, uint256 _amount) external returns (bool success) {\n",
          "message": "Parameter '_amount' of DebtEngine.withdrawPartial (LoanManager.sol#1682) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1698,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawBatch(bytes32[] calldata _ids, address _to) external returns (uint256 total) {\n",
          "message": "Parameter '_ids' of DebtEngine.withdrawBatch (LoanManager.sol#1698) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1698,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawBatch(bytes32[] calldata _ids, address _to) external returns (uint256 total) {\n",
          "message": "Parameter '_to' of DebtEngine.withdrawBatch (LoanManager.sol#1698) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1719,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getStatus(bytes32 _id) external view returns (uint256) {\n",
          "message": "Parameter '_id' of DebtEngine.getStatus (LoanManager.sol#1719) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1735,
          "vulnerability_to_line": 1746,
          "vulnerability_code": "    function _safeGasStaticCall(\n\n        address _contract,\n\n        bytes memory _data\n\n    ) internal view returns (bool success, uint256 result) {\n\n        bytes memory returnData;\n\n        uint256 _gas = (block.gaslimit * 80) / 100;\n\n\n\n        (success, returnData) = _contract.staticcall.gas(gasleft() < _gas ? gasleft() : _gas)(_data);\n\n\n\n        if (returnData.length > 0)\n\n            result = abi.decode(returnData, (uint256));\n",
          "message": "Function 'DebtEngine._safeGasStaticCall' (LoanManager.sol#1735-1746) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1736,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _contract,\n",
          "message": "Parameter '_contract' of DebtEngine._safeGasStaticCall (LoanManager.sol#1736) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1737,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _data\n",
          "message": "Parameter '_data' of DebtEngine._safeGasStaticCall (LoanManager.sol#1737) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1755,
          "vulnerability_to_line": 1766,
          "vulnerability_code": "    function _safeGasCall(\n\n        address _contract,\n\n        bytes memory _data\n\n    ) internal returns (bool success, bytes32 result) {\n\n        bytes memory returnData;\n\n        uint256 _gas = (block.gaslimit * 80) / 100;\n\n\n\n        (success, returnData) = _contract.call.gas(gasleft() < _gas ? gasleft() : _gas)(_data);\n\n\n\n        if (returnData.length > 0)\n\n            result = abi.decode(returnData, (bytes32));\n",
          "message": "Function 'DebtEngine._safeGasCall' (LoanManager.sol#1755-1766) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1756,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _contract,\n",
          "message": "Parameter '_contract' of DebtEngine._safeGasCall (LoanManager.sol#1756) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1757,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _data\n",
          "message": "Parameter '_data' of DebtEngine._safeGasCall (LoanManager.sol#1757) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1915,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function implementsMethod(address _contract, bytes4 _interfaceId) internal view returns (bool) {\n",
          "message": "Parameter '_contract' of ImplementsInterface.implementsMethod (LoanManager.sol#1915) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1915,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function implementsMethod(address _contract, bytes4 _interfaceId) internal view returns (bool) {\n",
          "message": "Parameter '_interfaceId' of ImplementsInterface.implementsMethod (LoanManager.sol#1915) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1934,
          "vulnerability_to_line": 1954,
          "vulnerability_code": "    function _noThrowImplements(\n\n        address _contract,\n\n        bytes4 _interfaceId\n\n    ) private view returns (uint256 success, uint256 result) {\n\n        bytes4 erc165ID = ERC165ID;\n\n        assembly {\n\n            let x := mload(0x40)               // Find empty storage location using \"free memory pointer\"\n\n            mstore(x, erc165ID)                // Place signature at begining of empty storage\n\n            mstore(add(x, 0x04), _interfaceId) // Place first argument directly next to signature\n\n\n\n            success := staticcall(\n\n                                30000,         // 30k gas\n\n                                _contract,     // To addr\n\n                                x,             // Inputs are stored at location x\n\n                                0x24,          // Inputs are 32 bytes long\n\n                                x,             // Store output over input (saves space)\n\n                                0x20)          // Outputs are 32 bytes long\n\n\n\n            result := mload(x)                 // Load the result\n\n        }\n",
          "message": "Function 'ImplementsInterface._noThrowImplements' (LoanManager.sol#1934-1954) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1912,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant InvalidID = 0xffffffff;\n",
          "message": "Constant 'ImplementsInterface.InvalidID' (LoanManager.sol#1912) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1980,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _data,\n",
          "message": "Parameter '_data' of BytesUtils.decode (LoanManager.sol#1980) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1981,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _la\n",
          "message": "Parameter '_la' of BytesUtils.decode (LoanManager.sol#1981) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1992,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _data,\n",
          "message": "Parameter '_data' of BytesUtils.decode (LoanManager.sol#1992) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2012,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _data,\n",
          "message": "Parameter '_data' of BytesUtils.decode (LoanManager.sol#2012) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2037,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _data,\n",
          "message": "Parameter '_data' of BytesUtils.decode (LoanManager.sol#2037) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2067,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _data,\n",
          "message": "Parameter '_data' of BytesUtils.decode (LoanManager.sol#2067) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2102,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _data,\n",
          "message": "Parameter '_data' of BytesUtils.decode (LoanManager.sol#2102) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2208,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(DebtEngine _debtEngine) public {\n",
          "message": "Parameter '_debtEngine' of LoanManager. (LoanManager.sol#2208) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2215,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBorrower(uint256 _id) external view returns (address) { return requests[bytes32(_id)].borrower; }\n",
          "message": "Parameter '_id' of LoanManager.getBorrower (LoanManager.sol#2215) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2216,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getCreator(uint256 _id) external view returns (address) { return requests[bytes32(_id)].creator; }\n",
          "message": "Parameter '_id' of LoanManager.getCreator (LoanManager.sol#2216) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2217,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getOracle(uint256 _id) external view returns (address) { return requests[bytes32(_id)].oracle; }\n",
          "message": "Parameter '_id' of LoanManager.getOracle (LoanManager.sol#2217) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2218,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getCosigner(uint256 _id) external view returns (address) { return requests[bytes32(_id)].cosigner; }\n",
          "message": "Parameter '_id' of LoanManager.getCosigner (LoanManager.sol#2218) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2219,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getCurrency(uint256 _id) external view returns (bytes32) {\n",
          "message": "Parameter '_id' of LoanManager.getCurrency (LoanManager.sol#2219) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2223,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAmount(uint256 _id) external view returns (uint256) { return requests[bytes32(_id)].amount; }\n",
          "message": "Parameter '_id' of LoanManager.getAmount (LoanManager.sol#2223) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2224,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getExpirationRequest(uint256 _id) external view returns (uint256) { return requests[bytes32(_id)].expiration; }\n",
          "message": "Parameter '_id' of LoanManager.getExpirationRequest (LoanManager.sol#2224) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2225,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getApproved(uint256 _id) external view returns (bool) { return requests[bytes32(_id)].approved; }\n",
          "message": "Parameter '_id' of LoanManager.getApproved (LoanManager.sol#2225) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2226,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getDueTime(uint256 _id) external view returns (uint256) { return Model(requests[bytes32(_id)].model).getDueTime(bytes32(_id)); }\n",
          "message": "Parameter '_id' of LoanManager.getDueTime (LoanManager.sol#2226) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2227,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getClosingObligation(uint256 _id) external view returns (uint256) { return Model(requests[bytes32(_id)].model).getClosingObligation(bytes32(_id)); }\n",
          "message": "Parameter '_id' of LoanManager.getClosingObligation (LoanManager.sol#2227) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2228,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getLoanData(uint256 _id) external view returns (bytes memory) { return requests[bytes32(_id)].loanData; }\n",
          "message": "Parameter '_id' of LoanManager.getLoanData (LoanManager.sol#2228) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2229,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getStatus(uint256 _id) external view returns (uint256) {\n",
          "message": "Parameter '_id' of LoanManager.getStatus (LoanManager.sol#2229) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2233,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ownerOf(uint256 _id) external view returns (address) {\n",
          "message": "Parameter '_id' of LoanManager.ownerOf (LoanManager.sol#2233) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2238,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBorrower(bytes32 _id) external view returns (address) { return requests[_id].borrower; }\n",
          "message": "Parameter '_id' of LoanManager.getBorrower (LoanManager.sol#2238) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2239,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getCreator(bytes32 _id) external view returns (address) { return requests[_id].creator; }\n",
          "message": "Parameter '_id' of LoanManager.getCreator (LoanManager.sol#2239) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2240,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getOracle(bytes32 _id) external view returns (address) { return requests[_id].oracle; }\n",
          "message": "Parameter '_id' of LoanManager.getOracle (LoanManager.sol#2240) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2241,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getCosigner(bytes32 _id) external view returns (address) { return requests[_id].cosigner; }\n",
          "message": "Parameter '_id' of LoanManager.getCosigner (LoanManager.sol#2241) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2242,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getCurrency(bytes32 _id) external view returns (bytes32) {\n",
          "message": "Parameter '_id' of LoanManager.getCurrency (LoanManager.sol#2242) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2246,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAmount(bytes32 _id) external view returns (uint256) { return requests[_id].amount; }\n",
          "message": "Parameter '_id' of LoanManager.getAmount (LoanManager.sol#2246) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2247,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getExpirationRequest(bytes32 _id) external view returns (uint256) { return requests[_id].expiration; }\n",
          "message": "Parameter '_id' of LoanManager.getExpirationRequest (LoanManager.sol#2247) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2248,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getApproved(bytes32 _id) external view returns (bool) { return requests[_id].approved; }\n",
          "message": "Parameter '_id' of LoanManager.getApproved (LoanManager.sol#2248) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2249,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getDueTime(bytes32 _id) external view returns (uint256) { return Model(requests[_id].model).getDueTime(bytes32(_id)); }\n",
          "message": "Parameter '_id' of LoanManager.getDueTime (LoanManager.sol#2249) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2250,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getClosingObligation(bytes32 _id) external view returns (uint256) { return Model(requests[_id].model).getClosingObligation(bytes32(_id)); }\n",
          "message": "Parameter '_id' of LoanManager.getClosingObligation (LoanManager.sol#2250) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2251,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getLoanData(bytes32 _id) external view returns (bytes memory) { return requests[_id].loanData; }\n",
          "message": "Parameter '_id' of LoanManager.getLoanData (LoanManager.sol#2251) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2252,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getStatus(bytes32 _id) external view returns (uint256) {\n",
          "message": "Parameter '_id' of LoanManager.getStatus (LoanManager.sol#2252) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2256,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ownerOf(bytes32 _id) external view returns (address) {\n",
          "message": "Parameter '_id' of LoanManager.ownerOf (LoanManager.sol#2256) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2260,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getCallback(bytes32 _id) external view returns (address) { return requests[_id].callback; }\n",
          "message": "Parameter '_id' of LoanManager.getCallback (LoanManager.sol#2260) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2278,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint128 _amount,\n",
          "message": "Parameter '_amount' of LoanManager.calcId (LoanManager.sol#2278) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2279,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _borrower,\n",
          "message": "Parameter '_borrower' of LoanManager.calcId (LoanManager.sol#2279) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2280,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _creator,\n",
          "message": "Parameter '_creator' of LoanManager.calcId (LoanManager.sol#2280) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2281,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _model,\n",
          "message": "Parameter '_model' of LoanManager.calcId (LoanManager.sol#2281) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2282,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _oracle,\n",
          "message": "Parameter '_oracle' of LoanManager.calcId (LoanManager.sol#2282) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2283,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _callback,\n",
          "message": "Parameter '_callback' of LoanManager.calcId (LoanManager.sol#2283) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2284,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _salt,\n",
          "message": "Parameter '_salt' of LoanManager.calcId (LoanManager.sol#2284) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2285,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint64 _expiration,\n",
          "message": "Parameter '_expiration' of LoanManager.calcId (LoanManager.sol#2285) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2286,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _data\n",
          "message": "Parameter '_data' of LoanManager.calcId (LoanManager.sol#2286) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2311,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint128 _amount,\n",
          "message": "Parameter '_amount' of LoanManager.buildInternalSalt (LoanManager.sol#2311) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2312,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _borrower,\n",
          "message": "Parameter '_borrower' of LoanManager.buildInternalSalt (LoanManager.sol#2312) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2313,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _creator,\n",
          "message": "Parameter '_creator' of LoanManager.buildInternalSalt (LoanManager.sol#2313) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2314,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _callback,\n",
          "message": "Parameter '_callback' of LoanManager.buildInternalSalt (LoanManager.sol#2314) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2315,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _salt,\n",
          "message": "Parameter '_salt' of LoanManager.buildInternalSalt (LoanManager.sol#2315) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2316,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint64 _expiration\n",
          "message": "Parameter '_expiration' of LoanManager.buildInternalSalt (LoanManager.sol#2316) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2328,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function internalSalt(bytes32 _id) external view returns (uint256) {\n",
          "message": "Parameter '_id' of LoanManager.internalSalt (LoanManager.sol#2328) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2334,
          "vulnerability_to_line": 2343,
          "vulnerability_code": "    function _internalSalt(Request memory _request) internal pure returns (uint256) {\n\n        return _buildInternalSalt(\n\n            _request.amount,\n\n            _request.borrower,\n\n            _request.creator,\n\n            _request.callback,\n\n            _request.salt,\n\n            _request.expiration\n\n        );\n",
          "message": "Function 'LoanManager._internalSalt' (LoanManager.sol#2334-2343) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2334,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _internalSalt(Request memory _request) internal pure returns (uint256) {\n",
          "message": "Parameter '_request' of LoanManager._internalSalt (LoanManager.sol#2334) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2346,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint128 _amount,\n",
          "message": "Parameter '_amount' of LoanManager.requestLoan (LoanManager.sol#2346) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2347,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _model,\n",
          "message": "Parameter '_model' of LoanManager.requestLoan (LoanManager.sol#2347) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2348,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _oracle,\n",
          "message": "Parameter '_oracle' of LoanManager.requestLoan (LoanManager.sol#2348) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2349,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _borrower,\n",
          "message": "Parameter '_borrower' of LoanManager.requestLoan (LoanManager.sol#2349) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2350,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _callback,\n",
          "message": "Parameter '_callback' of LoanManager.requestLoan (LoanManager.sol#2350) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2351,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _salt,\n",
          "message": "Parameter '_salt' of LoanManager.requestLoan (LoanManager.sol#2351) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2352,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint64 _expiration,\n",
          "message": "Parameter '_expiration' of LoanManager.requestLoan (LoanManager.sol#2352) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2353,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata _loanData\n",
          "message": "Parameter '_loanData' of LoanManager.requestLoan (LoanManager.sol#2353) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2417,
          "vulnerability_to_line": 2443,
          "vulnerability_code": "    function _requestContractApprove(\n\n        bytes32 _id,\n\n        address _borrower\n\n    ) internal returns (bool approved) {\n\n        // bytes32 expected = _id XOR keccak256(\"approve-loan-request\");\n\n        bytes32 expected = _id ^ 0xdfcb15a077f54a681c23131eacdfd6e12b5e099685b492d382c3fd8bfc1e9a2a;\n\n        (bool success, bytes32 result) = _safeCall(\n\n            _borrower,\n\n            abi.encodeWithSelector(\n\n                0x76ba6009,\n\n                _id\n\n            )\n\n        );\n\n\n\n        approved = success && result == expected;\n\n\n\n        // Emit events if approve was rejected or failed\n\n        if (approved) {\n\n            emit ApprovedByCallback(_id);\n\n        } else {\n\n            if (!success) {\n\n                emit ApprovedError(_id, result);\n\n            } else {\n\n                emit ApprovedRejected(_id, result);\n\n            }\n\n        }\n",
          "message": "Function 'LoanManager._requestContractApprove' (LoanManager.sol#2417-2443) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2418,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32 _id,\n",
          "message": "Parameter '_id' of LoanManager._requestContractApprove (LoanManager.sol#2418) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2419,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _borrower\n",
          "message": "Parameter '_borrower' of LoanManager._requestContractApprove (LoanManager.sol#2419) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2446,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32 _id\n",
          "message": "Parameter '_id' of LoanManager.approveRequest (LoanManager.sol#2446) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2458,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32 _id,\n",
          "message": "Parameter '_id' of LoanManager.registerApproveRequest (LoanManager.sol#2458) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2459,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata _signature\n",
          "message": "Parameter '_signature' of LoanManager.registerApproveRequest (LoanManager.sol#2459) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2500,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32 _id,\n",
          "message": "Parameter '_id' of LoanManager.lend (LoanManager.sol#2500) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2501,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _oracleData,\n",
          "message": "Parameter '_oracleData' of LoanManager.lend (LoanManager.sol#2501) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2502,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _cosigner,\n",
          "message": "Parameter '_cosigner' of LoanManager.lend (LoanManager.sol#2502) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2503,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _cosignerLimit,\n",
          "message": "Parameter '_cosignerLimit' of LoanManager.lend (LoanManager.sol#2503) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2504,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _cosignerData,\n",
          "message": "Parameter '_cosignerData' of LoanManager.lend (LoanManager.sol#2504) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2505,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _callbackData\n",
          "message": "Parameter '_callbackData' of LoanManager.lend (LoanManager.sol#2505) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2565,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function cancel(bytes32 _id) external returns (bool) {\n",
          "message": "Parameter '_id' of LoanManager.cancel (LoanManager.sol#2565) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2583,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function cosign(uint256 _id, uint256 _cost) external returns (bool) {\n",
          "message": "Parameter '_id' of LoanManager.cosign (LoanManager.sol#2583) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2583,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function cosign(uint256 _id, uint256 _cost) external returns (bool) {\n",
          "message": "Parameter '_cost' of LoanManager.cosign (LoanManager.sol#2583) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2619,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint128 _amount,\n",
          "message": "Parameter '_amount' of LoanManager.encodeRequest (LoanManager.sol#2619) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2620,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _model,\n",
          "message": "Parameter '_model' of LoanManager.encodeRequest (LoanManager.sol#2620) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2621,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _oracle,\n",
          "message": "Parameter '_oracle' of LoanManager.encodeRequest (LoanManager.sol#2621) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2622,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _borrower,\n",
          "message": "Parameter '_borrower' of LoanManager.encodeRequest (LoanManager.sol#2622) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2623,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _callback,\n",
          "message": "Parameter '_callback' of LoanManager.encodeRequest (LoanManager.sol#2623) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2624,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _salt,\n",
          "message": "Parameter '_salt' of LoanManager.encodeRequest (LoanManager.sol#2624) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2625,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint64 _expiration,\n",
          "message": "Parameter '_expiration' of LoanManager.encodeRequest (LoanManager.sol#2625) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2626,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _creator,\n",
          "message": "Parameter '_creator' of LoanManager.encodeRequest (LoanManager.sol#2626) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2627,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata _loanData\n",
          "message": "Parameter '_loanData' of LoanManager.encodeRequest (LoanManager.sol#2627) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2659,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _requestData,\n",
          "message": "Parameter '_requestData' of LoanManager.settleLend (LoanManager.sol#2659) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2660,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _loanData,\n",
          "message": "Parameter '_loanData' of LoanManager.settleLend (LoanManager.sol#2660) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2661,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _cosigner,\n",
          "message": "Parameter '_cosigner' of LoanManager.settleLend (LoanManager.sol#2661) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2662,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _maxCosignerCost,\n",
          "message": "Parameter '_maxCosignerCost' of LoanManager.settleLend (LoanManager.sol#2662) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2663,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _cosignerData,\n",
          "message": "Parameter '_cosignerData' of LoanManager.settleLend (LoanManager.sol#2663) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2664,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _oracleData,\n",
          "message": "Parameter '_oracleData' of LoanManager.settleLend (LoanManager.sol#2664) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2665,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _creatorSig,\n",
          "message": "Parameter '_creatorSig' of LoanManager.settleLend (LoanManager.sol#2665) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2666,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _borrowerSig,\n",
          "message": "Parameter '_borrowerSig' of LoanManager.settleLend (LoanManager.sol#2666) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2667,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _callbackData\n",
          "message": "Parameter '_callbackData' of LoanManager.settleLend (LoanManager.sol#2667) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2738,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata _requestData,\n",
          "message": "Parameter '_requestData' of LoanManager.settleCancel (LoanManager.sol#2738) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2739,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata _loanData\n",
          "message": "Parameter '_loanData' of LoanManager.settleCancel (LoanManager.sol#2739) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2753,
          "vulnerability_to_line": 2813,
          "vulnerability_code": "    function _validateSettleSignatures(\n\n        bytes32 _id,\n\n        bytes memory _requestData,\n\n        bytes memory _loanData,\n\n        bytes memory _creatorSig,\n\n        bytes memory _borrowerSig\n\n    ) internal {\n\n        require(!canceledSettles[_id], \"Settle was canceled\");\n\n\n\n        // bytes32 expected = uint256(_id) XOR keccak256(\"approve-loan-request\");\n\n        bytes32 expected = _id ^ 0xdfcb15a077f54a681c23131eacdfd6e12b5e099685b492d382c3fd8bfc1e9a2a;\n\n        address borrower = address(uint256(read(_requestData, O_BORROWER, L_BORROWER)));\n\n        address creator = address(uint256(read(_requestData, O_CREATOR, L_CREATOR)));\n\n        bytes32 _hash;\n\n\n\n        if (borrower.isContract()) {\n\n            require(\n\n                LoanApprover(borrower).settleApproveRequest(_requestData, _loanData, true, uint256(_id)) == expected,\n\n                \"Borrower contract rejected the loan\"\n\n            );\n\n\n\n            emit BorrowerByCallback(_id);\n\n        } else {\n\n            _hash = keccak256(\n\n                abi.encodePacked(\n\n                    _id,\n\n                    \"sign settle lend as borrower\"\n\n                )\n\n            );\n\n            require(\n\n                borrower == ecrecovery(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _hash)), _borrowerSig),\n\n                \"Invalid borrower signature\"\n\n            );\n\n\n\n            emit BorrowerBySignature(_id);\n\n        }\n\n\n\n        if (borrower != creator) {\n\n            if (creator.isContract()) {\n\n                require(\n\n                    LoanApprover(creator).settleApproveRequest(_requestData, _loanData, false, uint256(_id)) == expected,\n\n                    \"Creator contract rejected the loan\"\n\n                );\n\n\n\n                emit CreatorByCallback(_id);\n\n            } else {\n\n                _hash = keccak256(\n\n                    abi.encodePacked(\n\n                        _id,\n\n                        \"sign settle lend as creator\"\n\n                    )\n\n                );\n\n                require(\n\n                    creator == ecrecovery(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _hash)), _creatorSig),\n\n                    \"Invalid creator signature\"\n\n                );\n\n\n\n                emit CreatorBySignature(_id);\n\n            }\n\n        }\n",
          "message": "Function 'LoanManager._validateSettleSignatures' (LoanManager.sol#2753-2813) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2754,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32 _id,\n",
          "message": "Parameter '_id' of LoanManager._validateSettleSignatures (LoanManager.sol#2754) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2755,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _requestData,\n",
          "message": "Parameter '_requestData' of LoanManager._validateSettleSignatures (LoanManager.sol#2755) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2756,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _loanData,\n",
          "message": "Parameter '_loanData' of LoanManager._validateSettleSignatures (LoanManager.sol#2756) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2757,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _creatorSig,\n",
          "message": "Parameter '_creatorSig' of LoanManager._validateSettleSignatures (LoanManager.sol#2757) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2758,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _borrowerSig\n",
          "message": "Parameter '_borrowerSig' of LoanManager._validateSettleSignatures (LoanManager.sol#2758) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2815,
          "vulnerability_to_line": 2824,
          "vulnerability_code": "    function _currencyToToken(\n\n        bytes memory _requestData,\n\n        bytes memory _oracleData\n\n    ) internal returns (uint256) {\n\n        return _currencyToToken(\n\n            address(uint256(read(_requestData, O_ORACLE, L_ORACLE))),\n\n            uint256(read(_requestData, O_AMOUNT, L_AMOUNT)),\n\n            _oracleData\n\n        );\n",
          "message": "Function 'LoanManager._currencyToToken' (LoanManager.sol#2815-2824) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2816,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _requestData,\n",
          "message": "Parameter '_requestData' of LoanManager._currencyToToken (LoanManager.sol#2816) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2817,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _oracleData\n",
          "message": "Parameter '_oracleData' of LoanManager._currencyToToken (LoanManager.sol#2817) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2826,
          "vulnerability_to_line": 2838,
          "vulnerability_code": "    function _createDebt(\n\n        bytes memory _requestData,\n\n        bytes memory _loanData,\n\n        uint256 _innerSalt\n\n    ) internal returns (bytes32) {\n\n        return debtEngine.create2(\n\n            Model(address(uint256(read(_requestData, O_MODEL, L_MODEL)))),\n\n            msg.sender,\n\n            address(uint256(read(_requestData, O_ORACLE, L_ORACLE))),\n\n            _innerSalt,\n\n            _loanData\n\n        );\n",
          "message": "Function 'LoanManager._createDebt' (LoanManager.sol#2826-2838) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2827,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _requestData,\n",
          "message": "Parameter '_requestData' of LoanManager._createDebt (LoanManager.sol#2827) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2828,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _loanData,\n",
          "message": "Parameter '_loanData' of LoanManager._createDebt (LoanManager.sol#2828) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2829,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _innerSalt\n",
          "message": "Parameter '_innerSalt' of LoanManager._createDebt (LoanManager.sol#2829) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2840,
          "vulnerability_to_line": 2870,
          "vulnerability_code": "    function _buildSettleId(\n\n        bytes memory _requestData,\n\n        bytes memory _loanData\n\n    ) internal view returns (bytes32 id, uint256 innerSalt) {\n\n        (\n\n            uint128 amount,\n\n            address model,\n\n            address oracle,\n\n            address borrower,\n\n            uint256 salt,\n\n            uint64 expiration,\n\n            address creator\n\n        ) = _decodeSettle(_requestData);\n\n\n\n        innerSalt = _buildInternalSalt(\n\n            amount,\n\n            borrower,\n\n            creator,\n\n            address(uint256(read(_requestData, O_CALLBACK, L_CALLBACK))),\n\n            salt,\n\n            expiration\n\n        );\n\n\n\n        id = debtEngine.buildId2(\n\n            address(this),\n\n            model,\n\n            oracle,\n\n            innerSalt,\n\n            _loanData\n\n        );\n",
          "message": "Function 'LoanManager._buildSettleId' (LoanManager.sol#2840-2870) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2841,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _requestData,\n",
          "message": "Parameter '_requestData' of LoanManager._buildSettleId (LoanManager.sol#2841) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2842,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _loanData\n",
          "message": "Parameter '_loanData' of LoanManager._buildSettleId (LoanManager.sol#2842) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2872,
          "vulnerability_to_line": 2892,
          "vulnerability_code": "    function _buildInternalSalt(\n\n        uint128 _amount,\n\n        address _borrower,\n\n        address _creator,\n\n        address _callback,\n\n        uint256 _salt,\n\n        uint64 _expiration\n\n    ) internal pure returns (uint256) {\n\n        return uint256(\n\n            keccak256(\n\n                abi.encodePacked(\n\n                    _amount,\n\n                    _borrower,\n\n                    _creator,\n\n                    _callback,\n\n                    _salt,\n\n                    _expiration\n\n                )\n\n            )\n\n        );\n",
          "message": "Function 'LoanManager._buildInternalSalt' (LoanManager.sol#2872-2892) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2873,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint128 _amount,\n",
          "message": "Parameter '_amount' of LoanManager._buildInternalSalt (LoanManager.sol#2873) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2874,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _borrower,\n",
          "message": "Parameter '_borrower' of LoanManager._buildInternalSalt (LoanManager.sol#2874) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2875,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _creator,\n",
          "message": "Parameter '_creator' of LoanManager._buildInternalSalt (LoanManager.sol#2875) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2876,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _callback,\n",
          "message": "Parameter '_callback' of LoanManager._buildInternalSalt (LoanManager.sol#2876) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2877,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _salt,\n",
          "message": "Parameter '_salt' of LoanManager._buildInternalSalt (LoanManager.sol#2877) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2878,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint64 _expiration\n",
          "message": "Parameter '_expiration' of LoanManager._buildInternalSalt (LoanManager.sol#2878) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2894,
          "vulnerability_to_line": 2921,
          "vulnerability_code": "    function _decodeSettle(\n\n        bytes memory _data\n\n    ) internal pure returns (\n\n        uint128 amount,\n\n        address model,\n\n        address oracle,\n\n        address borrower,\n\n        uint256 salt,\n\n        uint64 expiration,\n\n        address creator\n\n    ) {\n\n        (\n\n            bytes32 _amount,\n\n            bytes32 _model,\n\n            bytes32 _oracle,\n\n            bytes32 _borrower,\n\n            bytes32 _salt,\n\n            bytes32 _expiration\n\n        ) = decode(_data, L_AMOUNT, L_MODEL, L_ORACLE, L_BORROWER, L_SALT, L_EXPIRATION);\n\n\n\n        amount = uint128(uint256(_amount));\n\n        model = address(uint256(_model));\n\n        oracle = address(uint256(_oracle));\n\n        borrower = address(uint256(_borrower));\n\n        salt = uint256(_salt);\n\n        expiration = uint64(uint256(_expiration));\n\n        creator = address(uint256(read(_data, O_CREATOR, L_CREATOR)));\n",
          "message": "Function 'LoanManager._decodeSettle' (LoanManager.sol#2894-2921) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2895,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _data\n",
          "message": "Parameter '_data' of LoanManager._decodeSettle (LoanManager.sol#2895) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2923,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ecrecovery(bytes32 _hash, bytes memory _sig) internal pure returns (address) {\n",
          "message": "Parameter '_hash' of LoanManager.ecrecovery (LoanManager.sol#2923) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2941,
          "vulnerability_to_line": 2952,
          "vulnerability_code": "    function _currencyToToken(\n\n        address _oracle,\n\n        uint256 _amount,\n\n        bytes memory _oracleData\n\n    ) internal returns (uint256) {\n\n        if (_oracle == address(0)) return _amount;\n\n        (uint256 tokens, uint256 equivalent) = RateOracle(_oracle).readSample(_oracleData);\n\n\n\n        emit ReadedOracle(_oracle, tokens, equivalent);\n\n\n\n        return tokens.mult(_amount) / equivalent;\n",
          "message": "Function 'LoanManager._currencyToToken' (LoanManager.sol#2941-2952) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2942,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _oracle,\n",
          "message": "Parameter '_oracle' of LoanManager._currencyToToken (LoanManager.sol#2942) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2943,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _amount,\n",
          "message": "Parameter '_amount' of LoanManager._currencyToToken (LoanManager.sol#2943) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2944,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _oracleData\n",
          "message": "Parameter '_oracleData' of LoanManager._currencyToToken (LoanManager.sol#2944) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2961,
          "vulnerability_to_line": 2970,
          "vulnerability_code": "    function _safeCall(\n\n        address _contract,\n\n        bytes memory _data\n\n    ) internal returns (bool success, bytes32 result) {\n\n        bytes memory returnData;\n\n        (success, returnData) = _contract.call(_data);\n\n\n\n        if (returnData.length > 0)\n\n            result = abi.decode(returnData, (bytes32));\n",
          "message": "Function 'LoanManager._safeCall' (LoanManager.sol#2961-2970) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2962,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _contract,\n",
          "message": "Parameter '_contract' of LoanManager._safeCall (LoanManager.sol#2962) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 2963,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _data\n",
          "message": "Parameter '_data' of LoanManager._safeCall (LoanManager.sol#2963) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 368,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 internal constant RATE_ORACLE_INTERFACE = 0xa265d8e0;\n",
          "message": "RateOracle.RATE_ORACLE_INTERFACE (LoanManager.sol#368) is never used in RateOracle\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 internal constant MODEL_INTERFACE = 0xaf498c35;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 368,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 internal constant RATE_ORACLE_INTERFACE = 0xa265d8e0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 466,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 504,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 534,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 535,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 private constant ERC721_RECEIVED_LEGACY = 0xf0b9e5ba;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 541,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 private constant ERC_721_INTERFACE = 0x80ac58cd;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 542,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 private constant ERC_721_METADATA_INTERFACE = 0x5b5e139f;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 543,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 private constant ERC_721_ENUMERATION_INTERFACE = 0x780e9d63;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 1912,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant InvalidID = 0xffffffff;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 1913,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant ERC165ID = 0x01ffc9a7;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 2406,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (_borrower.isContract() && _borrower.implementsMethod(0x76ba6009)) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 2426,
          "vulnerability_to_line": null,
          "vulnerability_code": "                0x76ba6009,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 2465,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (borrower.isContract() && borrower.implementsMethod(0x76ba6009)) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 828,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _approval[_assetId] = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 2221,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return oracle == address(0) ? bytes32(0x0) : RateOracle(oracle).currency();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 2244,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return oracle == address(0) ? bytes32(0x0) : RateOracle(oracle).currency();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 815,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _assetsOf[_from].length--;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 1934,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _noThrowImplements(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 1963,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 1970,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 1979,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 1991,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 2011,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 2036,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 2066,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 2101,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 1165,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setURIProvider(URIProvider _provider) external onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 355,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 417,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 430,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 458,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 511,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1007,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1028,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1061,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1771,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1823,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1845,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1908,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1959,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 2152,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 466,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 475,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes4 => bool) private _supportedInterfaces;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 524,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(uint256 => address) private _holderOf;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 527,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint256[]) private _assetsOf;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 529,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(uint256 => uint256) private _indexOfAsset;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 531,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => mapping(address => bool)) private _operators;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 532,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(uint256 => address) private _approval;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 534,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 535,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 private constant ERC721_RECEIVED_LEGACY = 0xf0b9e5ba;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 541,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 private constant ERC_721_INTERFACE = 0x80ac58cd;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 542,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 private constant ERC_721_METADATA_INTERFACE = 0x5b5e139f;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 543,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 private constant ERC_721_ENUMERATION_INTERFACE = 0x780e9d63;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 567,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private _name;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 568,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private _symbol;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 570,
          "vulnerability_to_line": null,
          "vulnerability_code": "    URIProvider private _uriProvider;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 608,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256[] private _allTokens;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 2601,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private constant L_AMOUNT = 16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 2602,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private constant O_AMOUNT = 0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 2603,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private constant O_MODEL = L_AMOUNT;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 2604,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private constant L_MODEL = 20;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 2605,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private constant O_ORACLE = O_MODEL + L_MODEL;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 2606,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private constant L_ORACLE = 20;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 2607,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private constant O_BORROWER = O_ORACLE + L_ORACLE;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 2608,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private constant L_BORROWER = 20;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 2609,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private constant O_SALT = O_BORROWER + L_BORROWER;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 2610,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private constant L_SALT = 32;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 2611,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private constant O_EXPIRATION = O_SALT + L_SALT;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 2612,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private constant L_EXPIRATION = 8;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 2613,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private constant O_CREATOR = O_EXPIRATION + L_EXPIRATION;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 2614,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private constant L_CREATOR = 20;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 2615,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private constant O_CALLBACK = O_CREATOR + L_CREATOR;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 2616,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private constant L_CALLBACK = 20;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 521,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 2165,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 1963,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 1970,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 1979,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 1991,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 2011,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 2036,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 2066,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 2101,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 2923,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ecrecovery(bytes32 _hash, bytes memory _sig) internal pure returns (address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 421,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isContract(address _addr) internal view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 1934,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _noThrowImplements(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getObligation(bytes32 id, uint64 timestamp) external view returns (uint256 amount, bool defined);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 412,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function readSample(bytes calldata _data) external returns (uint256 _tokens, uint256 _equivalent);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 996,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) internal returns (bool success, bytes4 result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1327,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) external returns (uint256 paid, uint256 paidToken) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1368,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) external returns (uint256 paid, uint256 paidToken) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1937,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) private view returns (uint256 success, uint256 result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1995,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 2016,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 2042,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 2073,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 2109,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) internal pure returns (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 2628,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) external view returns (bytes memory requestData, bytes32 id) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 2843,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) internal view returns (bytes32 id, uint256 innerSalt) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 2896,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) internal pure returns (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 2964,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) internal returns (bool success, bytes32 result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 998,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (success, returnData) = _contract.call(_data);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 2966,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (success, returnData) = _contract.call(_data);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1939,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1965,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1972,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1984,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1997,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 2018,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 2044,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 2075,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 2118,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 2928,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1419,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function payBatch(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1812,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function settleApproveRequest(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1421,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256[] calldata _amounts,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1422,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _origin,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1423,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _oracle,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1424,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata _oracleData\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1425,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) external returns (uint256[] memory paid, uint256[] memory paidTokens) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1425,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) external returns (uint256[] memory paid, uint256[] memory paidTokens) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1426,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 count = _ids.length;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1427,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(count == _amounts.length, \"_ids and _amounts should have the same length\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1427,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(count == _amounts.length, \"_ids and _amounts should have the same length\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1429,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 tokens;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1430,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 equivalent;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1431,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (_oracle != address(0)) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1431,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (_oracle != address(0)) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1431,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (_oracle != address(0)) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1432,
          "vulnerability_to_line": null,
          "vulnerability_code": "            (tokens, equivalent) = RateOracle(_oracle).readSample(_oracleData);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1433,
          "vulnerability_to_line": null,
          "vulnerability_code": "            emit ReadedOracleBatch(_oracle, count, tokens, equivalent);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1433,
          "vulnerability_to_line": null,
          "vulnerability_code": "            emit ReadedOracleBatch(_oracle, count, tokens, equivalent);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1433,
          "vulnerability_to_line": null,
          "vulnerability_code": "            emit ReadedOracleBatch(_oracle, count, tokens, equivalent);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1814,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata _loanData,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1815,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool _isBorrower,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1816,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _id\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1818,
          "vulnerability_to_line": null,
          "vulnerability_code": "        external returns (bytes32);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1912,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant InvalidID = 0xffffffff;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1913,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant ERC165ID = 0x01ffc9a7;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}