{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1336,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (inputId = 0; inputId < loanIds.length; inputId++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "inefficient-state-variable-increment",
          "vulnerability_from_line": 925,
          "vulnerability_to_line": null,
          "vulnerability_code": "        activeLoans += 1;\n",
          "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 540,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private activeLoans = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "        owner = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 648,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (IERC20 _rcn) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 649,
          "vulnerability_to_line": null,
          "vulnerability_code": "        owner = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 650,
          "vulnerability_to_line": null,
          "vulnerability_code": "        rcn = _rcn;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 651,
          "vulnerability_to_line": null,
          "vulnerability_code": "        // The loan 0 is a Invalid loan\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 652,
          "vulnerability_to_line": null,
          "vulnerability_code": "        loans.length++;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 653,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 596,
          "vulnerability_to_line": null,
          "vulnerability_code": "                if (loans[loanId].lender == _owner && loans[loanId].status == Status.lent) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 596,
          "vulnerability_to_line": null,
          "vulnerability_code": "                if (loans[loanId].lender == _owner && loans[loanId].status == Status.lent) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1337,
          "vulnerability_to_line": null,
          "vulnerability_code": "            Loan storage loan = loans[loanIds[inputId]];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == owner, \"The owner should be the sender\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_to != address(0), \"0x0 Is not a valid owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 334,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 341,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 353,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_data.length >= _la, \"Reading bytes out of bounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 378,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 403,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 433,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 468,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 515,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 130,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((z >= x) && (z >= y));\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 962,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(loan.status == Status.lent && (loan.dueTime - loan.duesIn) == block.timestamp);\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 984,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == loan.lender || (msg.sender == loan.borrower && loan.status == Status.initial));\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 596,
          "vulnerability_to_line": null,
          "vulnerability_code": "                if (loans[loanId].lender == _owner && loans[loanId].status == Status.lent) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 597,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    result[resultIndex] = loanId;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 598,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    resultIndex++;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 599,
          "vulnerability_to_line": null,
          "vulnerability_code": "                }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 595,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (loanId = 0; loanId <= totalLoans; loanId++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 598,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    resultIndex++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 652,
          "vulnerability_to_line": null,
          "vulnerability_code": "        loans.length++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1336,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (inputId = 0; inputId < loanIds.length; inputId++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "DOCKER_RECEIVED_SIGNAL_33"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": 98,
          "vulnerability_code": "    function encodeCurrency(string memory currency) public pure returns (bytes32 o) {\n\n        require(bytes(currency).length <= 32);\n\n        assembly {\n\n            o := mload(add(currency, 32))\n\n        }\n",
          "message": "Oracle.encodeCurrency (NanoLoanEngine.sol#93-98) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": 117,
          "vulnerability_code": "    function decodeCurrency(bytes32 b) public pure returns (string memory o) {\n\n        uint256 ns = 256;\n\n        while (true) {\n\n            if (ns == 0 || (b<<ns-8) != 0)\n\n                break;\n\n            ns -= 8;\n\n        }\n\n        assembly {\n\n            ns := div(ns, 8)\n\n            o := mload(0x40)\n\n            mstore(0x40, add(o, and(add(add(ns, 0x20), 0x1f), not(0x1f))))\n\n            mstore(o, ns)\n\n            mstore(add(o, 32), b)\n\n        }\n",
          "message": "Oracle.decodeCurrency (NanoLoanEngine.sol#103-117) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 333,
          "vulnerability_to_line": 338,
          "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n\n        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, mul(32, index))))\n\n        }\n",
          "message": "BytesUtils.readBytes32 (NanoLoanEngine.sol#333-338) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 340,
          "vulnerability_to_line": 347,
          "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n\n        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, offset)))\n\n            let lb := sub(32, length)\n\n            if lb { o := div(o, exp(2, mul(lb, 8))) }\n\n        }\n",
          "message": "BytesUtils.read (NanoLoanEngine.sol#340-347) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 349,
          "vulnerability_to_line": 359,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la\n\n    ) internal pure returns (bytes32 _a) {\n\n        require(_data.length >= _la, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            _a := mload(add(_data, 32))\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n        }\n",
          "message": "BytesUtils.decode (NanoLoanEngine.sol#349-359) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 361,
          "vulnerability_to_line": 379,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb\n\n    ) internal pure returns (bytes32 _a, bytes32 _b) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode (NanoLoanEngine.sol#361-379) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 381,
          "vulnerability_to_line": 404,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode (NanoLoanEngine.sol#381-404) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 406,
          "vulnerability_to_line": 434,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode (NanoLoanEngine.sol#406-434) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 436,
          "vulnerability_to_line": 469,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode (NanoLoanEngine.sol#436-469) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 471,
          "vulnerability_to_line": 516,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le,\n\n        uint256 _lf\n\n    ) internal pure returns (\n\n        bytes32 _a,\n\n        bytes32 _b,\n\n        bytes32 _c,\n\n        bytes32 _d,\n\n        bytes32 _e,\n\n        bytes32 _f\n\n    ) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := add(o, _le)\n\n            _f := mload(o)\n\n            l := sub(32, _lf)\n\n            if l { _f := div(_f, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode (NanoLoanEngine.sol#471-516) is declared view but contains assembly code\n"
        },
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 1140,
          "vulnerability_to_line": 1148,
          "vulnerability_code": "    function calculateInterest(uint256 timeDelta, uint256 interestRate, uint256 amount) internal pure returns (uint256 realDelta, uint256 interest) {\n\n        if (amount == 0) {\n\n            interest = 0;\n\n            realDelta = timeDelta;\n\n        } else {\n\n            interest = safeMult(safeMult(100000, amount), timeDelta) / interestRate;\n\n            realDelta = safeMult(interest, interestRate) / (amount * 100000);\n\n        }\n",
          "message": "NanoLoanEngine.calculateInterest (NanoLoanEngine.sol#1140-1148) uses a dangerous strict equality:\n\t- amount == 0\n"
        },
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 1140,
          "vulnerability_to_line": 1148,
          "vulnerability_code": "    function calculateInterest(uint256 timeDelta, uint256 interestRate, uint256 amount) internal pure returns (uint256 realDelta, uint256 interest) {\n\n        if (amount == 0) {\n\n            interest = 0;\n\n            realDelta = timeDelta;\n\n        } else {\n\n            interest = safeMult(safeMult(100000, amount), timeDelta) / interestRate;\n\n            realDelta = safeMult(interest, interestRate) / (amount * 100000);\n\n        }\n",
          "message": "NanoLoanEngine.calculateInterest (NanoLoanEngine.sol#1140-1148) uses a dangerous strict equality:\n\t- amount == 0\nNanoLoanEngine.convertRate (NanoLoanEngine.sol#1281-1293) uses a dangerous strict equality:\n\t- address(oracle) == address(0)\n"
        },
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 1140,
          "vulnerability_to_line": 1148,
          "vulnerability_code": "    function calculateInterest(uint256 timeDelta, uint256 interestRate, uint256 amount) internal pure returns (uint256 realDelta, uint256 interest) {\n\n        if (amount == 0) {\n\n            interest = 0;\n\n            realDelta = timeDelta;\n\n        } else {\n\n            interest = safeMult(safeMult(100000, amount), timeDelta) / interestRate;\n\n            realDelta = safeMult(interest, interestRate) / (amount * 100000);\n\n        }\n",
          "message": "NanoLoanEngine.calculateInterest (NanoLoanEngine.sol#1140-1148) uses a dangerous strict equality:\n\t- amount == 0\nNanoLoanEngine.convertRate (NanoLoanEngine.sol#1281-1293) uses a dangerous strict equality:\n\t- address(oracle) == address(0)\nNanoLoanEngine.cosign (NanoLoanEngine.sol#960-968) uses a dangerous strict equality:\n\t- require(bool)(loan.status == Status.lent && (loan.dueTime - loan.duesIn) == block.timestamp)\n"
        },
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 1140,
          "vulnerability_to_line": 1148,
          "vulnerability_code": "    function calculateInterest(uint256 timeDelta, uint256 interestRate, uint256 amount) internal pure returns (uint256 realDelta, uint256 interest) {\n\n        if (amount == 0) {\n\n            interest = 0;\n\n            realDelta = timeDelta;\n\n        } else {\n\n            interest = safeMult(safeMult(100000, amount), timeDelta) / interestRate;\n\n            realDelta = safeMult(interest, interestRate) / (amount * 100000);\n\n        }\n",
          "message": "NanoLoanEngine.calculateInterest (NanoLoanEngine.sol#1140-1148) uses a dangerous strict equality:\n\t- amount == 0\nNanoLoanEngine.convertRate (NanoLoanEngine.sol#1281-1293) uses a dangerous strict equality:\n\t- address(oracle) == address(0)\nNanoLoanEngine.cosign (NanoLoanEngine.sol#960-968) uses a dangerous strict equality:\n\t- require(bool)(loan.status == Status.lent && (loan.dueTime - loan.duesIn) == block.timestamp)\nNanoLoanEngine.lend (NanoLoanEngine.sol#911-948) uses a dangerous strict equality:\n\t- require(bool)(loan.cosigner == address(cosigner))\n"
        },
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 1140,
          "vulnerability_to_line": 1148,
          "vulnerability_code": "    function calculateInterest(uint256 timeDelta, uint256 interestRate, uint256 amount) internal pure returns (uint256 realDelta, uint256 interest) {\n\n        if (amount == 0) {\n\n            interest = 0;\n\n            realDelta = timeDelta;\n\n        } else {\n\n            interest = safeMult(safeMult(100000, amount), timeDelta) / interestRate;\n\n            realDelta = safeMult(interest, interestRate) / (amount * 100000);\n\n        }\n",
          "message": "NanoLoanEngine.calculateInterest (NanoLoanEngine.sol#1140-1148) uses a dangerous strict equality:\n\t- amount == 0\nNanoLoanEngine.convertRate (NanoLoanEngine.sol#1281-1293) uses a dangerous strict equality:\n\t- address(oracle) == address(0)\nNanoLoanEngine.cosign (NanoLoanEngine.sol#960-968) uses a dangerous strict equality:\n\t- require(bool)(loan.status == Status.lent && (loan.dueTime - loan.duesIn) == block.timestamp)\nNanoLoanEngine.lend (NanoLoanEngine.sol#911-948) uses a dangerous strict equality:\n\t- require(bool)(loan.cosigner == address(cosigner))\nNanoLoanEngine.transferFrom (NanoLoanEngine.sol#1063-1066) uses a dangerous strict equality:\n\t- require(bool)(loans[index].lender == from)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 911,
          "vulnerability_to_line": 948,
          "vulnerability_code": "    function lend(uint index, bytes memory oracleData, Cosigner cosigner, bytes memory cosignerData) public returns (bool) {\n\n        Loan storage loan = loans[index];\n\n\n\n        require(loan.status == Status.initial);\n\n        require(isApproved(index));\n\n        require(block.timestamp <= loan.expirationRequest);\n\n\n\n        loan.lender = msg.sender;\n\n        loan.dueTime = safeAdd(block.timestamp, loan.duesIn);\n\n        loan.interestTimestamp = block.timestamp;\n\n        loan.status = Status.lent;\n\n\n\n        // ERC721, create new loan and transfer it to the lender\n\n        emit Transfer(address(0), loan.lender, index);\n\n        activeLoans += 1;\n\n        lendersBalance[loan.lender] += 1;\n\n\n\n        if (loan.cancelableAt > 0)\n\n            internalAddInterest(loan, safeAdd(block.timestamp, loan.cancelableAt));\n\n\n\n        // Transfer the money to the borrower before handling the cosigner\n\n        // so the cosigner could require a specific usage for that money.\n\n        uint256 transferValue = convertRate(loan.oracle, loan.currency, oracleData, loan.amount);\n\n        require(rcn.transferFrom(msg.sender, loan.borrower, transferValue));\n\n\n\n        if (address(cosigner) != address(0)) {\n\n            // The cosigner it's temporary set to the next address (cosigner + 2), it's expected that the cosigner will\n\n            // call the method \"cosign\" to accept the conditions; that method also sets the cosigner to the right\n\n            // address. If that does not happen, the transaction fails.\n\n            loan.cosigner = address(uint256(address(cosigner)) + 2);\n\n            require(cosigner.requestCosign(address(this), index, cosignerData, oracleData));\n\n            require(loan.cosigner == address(cosigner));\n\n        }\n\n\n\n        emit Lent(index, loan.lender, address(cosigner));\n\n\n\n        return true;\n",
          "message": "Reentrancy in NanoLoanEngine.lend (NanoLoanEngine.sol#911-948):\n\tExternal calls:\n\t- transferValue = convertRate(loan.oracle,loan.currency,oracleData,loan.amount) (NanoLoanEngine.sol#933)\n\t- require(bool)(rcn.transferFrom(msg.sender,loan.borrower,transferValue)) (NanoLoanEngine.sol#934)\n\tState variables written after the call(s):\n\t- loans (NanoLoanEngine.sol#940)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 1244,
          "vulnerability_to_line": 1272,
          "vulnerability_code": "    function pay(uint index, uint256 _amount, address _from, bytes memory oracleData) public returns (bool) {\n\n        Loan storage loan = loans[index];\n\n\n\n        require(loan.status == Status.lent);\n\n        addInterest(index);\n\n        uint256 toPay = min(getPendingAmount(index), _amount);\n\n        emit PartialPayment(index, msg.sender, _from, toPay);\n\n\n\n        loan.paid = safeAdd(loan.paid, toPay);\n\n\n\n        if (getRawPendingAmount(index) == 0) {\n\n            emit TotalPayment(index);\n\n            loan.status = Status.paid;\n\n\n\n            // ERC721, remove loan from circulation\n\n            lendersBalance[loan.lender] -= 1;\n\n            activeLoans -= 1;\n\n            emit Transfer(loan.lender, address(0), index);\n\n        }\n\n\n\n        uint256 transferValue = convertRate(loan.oracle, loan.currency, oracleData, toPay);\n\n        require(transferValue > 0 || toPay < _amount);\n\n\n\n        lockTokens(address(rcn), transferValue);\n\n        require(rcn.transferFrom(msg.sender, address(this), transferValue));\n\n        loan.lenderBalance = safeAdd(transferValue, loan.lenderBalance);\n\n\n\n        return true;\n",
          "message": "Reentrancy in NanoLoanEngine.pay (NanoLoanEngine.sol#1244-1272):\n\tExternal calls:\n\t- transferValue = convertRate(loan.oracle,loan.currency,oracleData,toPay) (NanoLoanEngine.sol#1264)\n\t- require(bool)(rcn.transferFrom(msg.sender,address(this),transferValue)) (NanoLoanEngine.sol#1268)\n\tState variables written after the call(s):\n\t- loans (NanoLoanEngine.sol#1269)\n"
        },
        {
          "name": "shadowing-abstract",
          "vulnerability_from_line": 537,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public constant VERSION = 233;\n",
          "message": "NanoLoanEngine.VERSION (NanoLoanEngine.sol#537) shadows:\n\t- Engine.VERSION (NanoLoanEngine.sol#269)\n"
        },
        {
          "name": "shadowing-abstract",
          "vulnerability_from_line": 538,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string public constant VERSION_NAME = \"Basalt\";\n",
          "message": "NanoLoanEngine.VERSION_NAME (NanoLoanEngine.sol#538) shadows:\n\t- Engine.VERSION_NAME (NanoLoanEngine.sol#270)\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 1163,
          "vulnerability_to_line": null,
          "vulnerability_code": "            uint256 newTimestamp;\n",
          "message": "newTimestamp in NanoLoanEngine.internalAddInterest (NanoLoanEngine.sol#1163) is a local variable never initialiazed\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 772,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ownerOf(uint256 index) public view returns (address owner) { owner = loans[index].lender; }\n",
          "message": "NanoLoanEngine.ownerOf.owner (local variable @ NanoLoanEngine.sol#772) shadows:\n\t- OwnableBasalt.owner (state variable @ NanoLoanEngine.sol#21)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1244,
          "vulnerability_to_line": 1272,
          "vulnerability_code": "    function pay(uint index, uint256 _amount, address _from, bytes memory oracleData) public returns (bool) {\n\n        Loan storage loan = loans[index];\n\n\n\n        require(loan.status == Status.lent);\n\n        addInterest(index);\n\n        uint256 toPay = min(getPendingAmount(index), _amount);\n\n        emit PartialPayment(index, msg.sender, _from, toPay);\n\n\n\n        loan.paid = safeAdd(loan.paid, toPay);\n\n\n\n        if (getRawPendingAmount(index) == 0) {\n\n            emit TotalPayment(index);\n\n            loan.status = Status.paid;\n\n\n\n            // ERC721, remove loan from circulation\n\n            lendersBalance[loan.lender] -= 1;\n\n            activeLoans -= 1;\n\n            emit Transfer(loan.lender, address(0), index);\n\n        }\n\n\n\n        uint256 transferValue = convertRate(loan.oracle, loan.currency, oracleData, toPay);\n\n        require(transferValue > 0 || toPay < _amount);\n\n\n\n        lockTokens(address(rcn), transferValue);\n\n        require(rcn.transferFrom(msg.sender, address(this), transferValue));\n\n        loan.lenderBalance = safeAdd(transferValue, loan.lenderBalance);\n\n\n\n        return true;\n",
          "message": "Reentrancy in NanoLoanEngine.pay (NanoLoanEngine.sol#1244-1272):\n\tExternal calls:\n\t- transferValue = convertRate(loan.oracle,loan.currency,oracleData,toPay) (NanoLoanEngine.sol#1264)\n\tState variables written after the call(s):\n\t- lockedTokens (NanoLoanEngine.sol#1267)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1312,
          "vulnerability_to_line": 1319,
          "vulnerability_code": "    function withdrawal(uint index, address to, uint256 amount) public returns (bool) {\n\n        Loan storage loan = loans[index];\n\n        require(msg.sender == loan.lender);\n\n        loan.lenderBalance = safeSubtract(loan.lenderBalance, amount);\n\n        require(rcn.transfer(to, amount));\n\n        unlockTokens(address(rcn), amount);\n\n        return true;\n",
          "message": "Reentrancy in NanoLoanEngine.withdrawal (NanoLoanEngine.sol#1312-1319):\n\tExternal calls:\n\t- require(bool)(rcn.transfer(to,amount)) (NanoLoanEngine.sol#1316)\n\tState variables written after the call(s):\n\t- lockedTokens (NanoLoanEngine.sol#1317)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1332,
          "vulnerability_to_line": 1348,
          "vulnerability_code": "    function withdrawalList(uint256[] memory loanIds, address to) public returns (uint256) {\n\n        uint256 inputId;\n\n        uint256 totalWithdraw = 0;\n\n\n\n        for (inputId = 0; inputId < loanIds.length; inputId++) {\n\n            Loan storage loan = loans[loanIds[inputId]];\n\n            if (loan.lender == msg.sender) {\n\n                totalWithdraw += loan.lenderBalance;\n\n                loan.lenderBalance = 0;\n\n            }\n\n        }\n\n\n\n        require(rcn.transfer(to, totalWithdraw));\n\n        unlockTokens(address(rcn), totalWithdraw);\n\n\n\n        return totalWithdraw;\n",
          "message": "Reentrancy in NanoLoanEngine.withdrawalList (NanoLoanEngine.sol#1332-1348):\n\tExternal calls:\n\t- require(bool)(rcn.transfer(to,totalWithdraw)) (NanoLoanEngine.sol#1344)\n\tState variables written after the call(s):\n\t- lockedTokens (NanoLoanEngine.sol#1345)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": 132,
          "vulnerability_code": "    function safeAdd(uint256 x, uint256 y) internal pure returns(uint256) {\n\n        uint256 z = x + y;\n\n        require((z >= x) && (z >= y));\n\n        return z;\n",
          "message": "RpSafeMath.safeAdd (NanoLoanEngine.sol#128-132) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)((z >= x) && (z >= y)) (NanoLoanEngine.sol#130)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 960,
          "vulnerability_to_line": 968,
          "vulnerability_code": "    function cosign(uint index, uint256 cost) external returns (bool) {\n\n        Loan storage loan = loans[index];\n\n        require(loan.status == Status.lent && (loan.dueTime - loan.duesIn) == block.timestamp);\n\n        require(loan.cosigner != address(0));\n\n        require(loan.cosigner == address(uint256(msg.sender) + 2));\n\n        loan.cosigner = msg.sender;\n\n        require(rcn.transferFrom(loan.lender, msg.sender, cost));\n\n        return true;\n",
          "message": "NanoLoanEngine.cosign (NanoLoanEngine.sol#960-968) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(loan.status == Status.lent && (loan.dueTime - loan.duesIn) == block.timestamp) (NanoLoanEngine.sol#962)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 713,
          "vulnerability_to_line": 770,
          "vulnerability_code": "    function createLoan(\n\n        Oracle _oracleContract,\n\n        address _borrower,\n\n        bytes32 _currency,\n\n        uint256 _amount,\n\n        uint256 _interestRate,\n\n        uint256 _interestRatePunitory,\n\n        uint256 _duesIn,\n\n        uint256 _cancelableAt,\n\n        uint256 _expirationRequest,\n\n        string memory _metadata\n\n    ) public returns (uint256) {\n\n        require(!deprecated);\n\n        require(_cancelableAt <= _duesIn);\n\n        require(address(_oracleContract) != address(0) || _currency == bytes32(0));\n\n        require(_borrower != address(0));\n\n        require(_amount != 0);\n\n        require(_interestRatePunitory != 0);\n\n        require(_interestRate != 0);\n\n        require(_expirationRequest > block.timestamp);\n\n\n\n        Loan memory loan = Loan(\n\n            Status.initial,\n\n            _oracleContract,\n\n            _borrower,\n\n            address(0),\n\n            msg.sender,\n\n            address(0),\n\n            _amount,\n\n            0,\n\n            0,\n\n            0,\n\n            0,\n\n            _interestRate,\n\n            _interestRatePunitory,\n\n            0,\n\n            _duesIn,\n\n            _currency,\n\n            _cancelableAt,\n\n            0,\n\n            address(0),\n\n            _expirationRequest,\n\n            _metadata\n\n        );\n\n\n\n        uint index = loans.push(loan) - 1;\n\n        emit CreatedLoan(index, _borrower, msg.sender);\n\n\n\n        bytes32 identifier = getIdentifier(index);\n\n        require(identifierToIndex[identifier] == 0);\n\n        identifierToIndex[identifier] = index;\n\n\n\n        if (msg.sender == _borrower) {\n\n            approveLoan(index);\n\n        }\n\n\n\n        return index;\n",
          "message": "NanoLoanEngine.createLoan (NanoLoanEngine.sol#713-770) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(_expirationRequest > block.timestamp) (NanoLoanEngine.sol#732)\n\t- require(bool)(identifierToIndex[identifier] == 0) (NanoLoanEngine.sol#762)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 869,
          "vulnerability_to_line": 873,
          "vulnerability_code": "    function approveLoanIdentifier(bytes32 identifier) public returns (bool) {\n\n        uint256 index = identifierToIndex[identifier];\n\n        require(index != 0);\n\n        return approveLoan(index);\n",
          "message": "NanoLoanEngine.approveLoanIdentifier (NanoLoanEngine.sol#869-873) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(index != 0) (NanoLoanEngine.sol#871)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 884,
          "vulnerability_to_line": 894,
          "vulnerability_code": "    function registerApprove(bytes32 identifier, uint8 v, bytes32 r, bytes32 s) public returns (bool) {\n\n        uint256 index = identifierToIndex[identifier];\n\n        require(index != 0);\n\n        Loan storage loan = loans[index];\n\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\n\n        bytes32 preHash = keccak256(abi.encodePacked(prefix, identifier));\n\n        require(loan.borrower == ecrecover(preHash, v, r, s));\n\n        loan.approbations[loan.borrower] = true;\n\n        emit ApprovedBy(index, loan.borrower);\n\n        return true;\n",
          "message": "NanoLoanEngine.registerApprove (NanoLoanEngine.sol#884-894) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(index != 0) (NanoLoanEngine.sol#886)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 911,
          "vulnerability_to_line": 948,
          "vulnerability_code": "    function lend(uint index, bytes memory oracleData, Cosigner cosigner, bytes memory cosignerData) public returns (bool) {\n\n        Loan storage loan = loans[index];\n\n\n\n        require(loan.status == Status.initial);\n\n        require(isApproved(index));\n\n        require(block.timestamp <= loan.expirationRequest);\n\n\n\n        loan.lender = msg.sender;\n\n        loan.dueTime = safeAdd(block.timestamp, loan.duesIn);\n\n        loan.interestTimestamp = block.timestamp;\n\n        loan.status = Status.lent;\n\n\n\n        // ERC721, create new loan and transfer it to the lender\n\n        emit Transfer(address(0), loan.lender, index);\n\n        activeLoans += 1;\n\n        lendersBalance[loan.lender] += 1;\n\n\n\n        if (loan.cancelableAt > 0)\n\n            internalAddInterest(loan, safeAdd(block.timestamp, loan.cancelableAt));\n\n\n\n        // Transfer the money to the borrower before handling the cosigner\n\n        // so the cosigner could require a specific usage for that money.\n\n        uint256 transferValue = convertRate(loan.oracle, loan.currency, oracleData, loan.amount);\n\n        require(rcn.transferFrom(msg.sender, loan.borrower, transferValue));\n\n\n\n        if (address(cosigner) != address(0)) {\n\n            // The cosigner it's temporary set to the next address (cosigner + 2), it's expected that the cosigner will\n\n            // call the method \"cosign\" to accept the conditions; that method also sets the cosigner to the right\n\n            // address. If that does not happen, the transaction fails.\n\n            loan.cosigner = address(uint256(address(cosigner)) + 2);\n\n            require(cosigner.requestCosign(address(this), index, cosignerData, oracleData));\n\n            require(loan.cosigner == address(cosigner));\n\n        }\n\n\n\n        emit Lent(index, loan.lender, address(cosigner));\n\n\n\n        return true;\n",
          "message": "NanoLoanEngine.lend (NanoLoanEngine.sol#911-948) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- loan.cancelableAt > 0 (NanoLoanEngine.sol#928-929)\n\t- require(bool)(loan.cosigner == address(cosigner)) (NanoLoanEngine.sol#942)\n\t- require(bool)(block.timestamp <= loan.expirationRequest) (NanoLoanEngine.sol#916)\n\t- require(bool)(rcn.transferFrom(msg.sender,loan.borrower,transferValue)) (NanoLoanEngine.sol#934)\n\t- require(bool)(loan.status == Status.initial) (NanoLoanEngine.sol#914)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 1005,
          "vulnerability_to_line": 1009,
          "vulnerability_code": "    function destroyIdentifier(bytes32 identifier) public returns (bool) {\n\n        uint256 index = identifierToIndex[identifier];\n\n        require(index != 0);\n\n        return destroy(index);\n",
          "message": "NanoLoanEngine.destroyIdentifier (NanoLoanEngine.sol#1005-1009) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(index != 0) (NanoLoanEngine.sol#1007)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 1063,
          "vulnerability_to_line": 1066,
          "vulnerability_code": "    function transferFrom(address from, address to, uint256 index) public returns (bool) {\n\n        require(loans[index].lender == from);\n\n        return transfer(to, index);\n",
          "message": "NanoLoanEngine.transferFrom (NanoLoanEngine.sol#1063-1066) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(loans[index].lender == from) (NanoLoanEngine.sol#1064)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 1140,
          "vulnerability_to_line": 1148,
          "vulnerability_code": "    function calculateInterest(uint256 timeDelta, uint256 interestRate, uint256 amount) internal pure returns (uint256 realDelta, uint256 interest) {\n\n        if (amount == 0) {\n\n            interest = 0;\n\n            realDelta = timeDelta;\n\n        } else {\n\n            interest = safeMult(safeMult(100000, amount), timeDelta) / interestRate;\n\n            realDelta = safeMult(interest, interestRate) / (amount * 100000);\n\n        }\n",
          "message": "NanoLoanEngine.calculateInterest (NanoLoanEngine.sol#1140-1148) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- amount == 0 (NanoLoanEngine.sol#1141-1147)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 1158,
          "vulnerability_to_line": 1203,
          "vulnerability_code": "    function internalAddInterest(Loan storage loan, uint256 timestamp) internal {\n\n        if (timestamp > loan.interestTimestamp) {\n\n            uint256 newInterest = loan.interest;\n\n            uint256 newPunitoryInterest = loan.punitoryInterest;\n\n\n\n            uint256 newTimestamp;\n\n            uint256 realDelta;\n\n            uint256 calculatedInterest;\n\n\n\n            uint256 deltaTime;\n\n            uint256 pending;\n\n\n\n            uint256 endNonPunitory = min(timestamp, loan.dueTime);\n\n            if (endNonPunitory > loan.interestTimestamp) {\n\n                deltaTime = endNonPunitory - loan.interestTimestamp;\n\n\n\n                if (loan.paid < loan.amount) {\n\n                    pending = loan.amount - loan.paid;\n\n                } else {\n\n                    pending = 0;\n\n                }\n\n\n\n                (realDelta, calculatedInterest) = calculateInterest(deltaTime, loan.interestRate, pending);\n\n                newInterest = safeAdd(calculatedInterest, newInterest);\n\n                newTimestamp = loan.interestTimestamp + realDelta;\n\n            }\n\n\n\n            if (timestamp > loan.dueTime) {\n\n                uint256 startPunitory = max(loan.dueTime, loan.interestTimestamp);\n\n                deltaTime = timestamp - startPunitory;\n\n\n\n                uint256 debt = safeAdd(loan.amount, newInterest);\n\n                pending = min(debt, safeSubtract(safeAdd(debt, newPunitoryInterest), loan.paid));\n\n\n\n                (realDelta, calculatedInterest) = calculateInterest(deltaTime, loan.interestRatePunitory, pending);\n\n                newPunitoryInterest = safeAdd(newPunitoryInterest, calculatedInterest);\n\n                newTimestamp = startPunitory + realDelta;\n\n            }\n\n\n\n            if (newInterest != loan.interest || newPunitoryInterest != loan.punitoryInterest) {\n\n                loan.interestTimestamp = newTimestamp;\n\n                loan.interest = newInterest;\n\n                loan.punitoryInterest = newPunitoryInterest;\n\n            }\n\n        }\n",
          "message": "NanoLoanEngine.internalAddInterest (NanoLoanEngine.sol#1158-1203) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- endNonPunitory > loan.interestTimestamp (NanoLoanEngine.sol#1171-1183)\n\t- timestamp > loan.interestTimestamp (NanoLoanEngine.sol#1159-1202)\n\t- newInterest != loan.interest || newPunitoryInterest != loan.punitoryInterest (NanoLoanEngine.sol#1197-1201)\n\t- timestamp > loan.dueTime (NanoLoanEngine.sol#1185-1195)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 1281,
          "vulnerability_to_line": 1293,
          "vulnerability_code": "    function convertRate(Oracle oracle, bytes32 currency, bytes memory data, uint256 amount) public returns (uint256) {\n\n        if (address(oracle) == address(0)) {\n\n            return amount;\n\n        } else {\n\n            uint256 rate;\n\n            uint256 decimals;\n\n\n\n            (rate, decimals) = oracle.getRate(currency, data);\n\n\n\n            require(decimals <= RCN_DECIMALS);\n\n            return (safeMult(safeMult(amount, rate), (10**(RCN_DECIMALS-decimals)))) / PRECISION;\n\n        }\n",
          "message": "NanoLoanEngine.convertRate (NanoLoanEngine.sol#1281-1293) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(decimals <= RCN_DECIMALS) (NanoLoanEngine.sol#1290)\n\t- address(oracle) == address(0) (NanoLoanEngine.sol#1282-1292)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": 98,
          "vulnerability_code": "    function encodeCurrency(string memory currency) public pure returns (bytes32 o) {\n\n        require(bytes(currency).length <= 32);\n\n        assembly {\n\n            o := mload(add(currency, 32))\n\n        }\n",
          "message": "Oracle.encodeCurrency uses assembly (NanoLoanEngine.sol#93-98)\n\t- NanoLoanEngine.sol#95-97\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": 117,
          "vulnerability_code": "    function decodeCurrency(bytes32 b) public pure returns (string memory o) {\n\n        uint256 ns = 256;\n\n        while (true) {\n\n            if (ns == 0 || (b<<ns-8) != 0)\n\n                break;\n\n            ns -= 8;\n\n        }\n\n        assembly {\n\n            ns := div(ns, 8)\n\n            o := mload(0x40)\n\n            mstore(0x40, add(o, and(add(add(ns, 0x20), 0x1f), not(0x1f))))\n\n            mstore(o, ns)\n\n            mstore(add(o, 32), b)\n\n        }\n",
          "message": "Oracle.decodeCurrency uses assembly (NanoLoanEngine.sol#103-117)\n\t- NanoLoanEngine.sol#110-116\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 333,
          "vulnerability_to_line": 338,
          "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n\n        require(data.length / 32 > index, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, mul(32, index))))\n\n        }\n",
          "message": "BytesUtils.readBytes32 uses assembly (NanoLoanEngine.sol#333-338)\n\t- NanoLoanEngine.sol#335-337\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 340,
          "vulnerability_to_line": 347,
          "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n\n        require(data.length >= offset + length, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            o := mload(add(data, add(32, offset)))\n\n            let lb := sub(32, length)\n\n            if lb { o := div(o, exp(2, mul(lb, 8))) }\n\n        }\n",
          "message": "BytesUtils.read uses assembly (NanoLoanEngine.sol#340-347)\n\t- NanoLoanEngine.sol#342-346\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 349,
          "vulnerability_to_line": 359,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la\n\n    ) internal pure returns (bytes32 _a) {\n\n        require(_data.length >= _la, \"Reading bytes out of bounds\");\n\n        assembly {\n\n            _a := mload(add(_data, 32))\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n        }\n",
          "message": "BytesUtils.decode uses assembly (NanoLoanEngine.sol#349-359)\n\t- NanoLoanEngine.sol#354-358\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 361,
          "vulnerability_to_line": 379,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb\n\n    ) internal pure returns (bytes32 _a, bytes32 _b) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode uses assembly (NanoLoanEngine.sol#361-379)\n\t- NanoLoanEngine.sol#367-377\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 381,
          "vulnerability_to_line": 404,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode uses assembly (NanoLoanEngine.sol#381-404)\n\t- NanoLoanEngine.sol#388-402\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 406,
          "vulnerability_to_line": 434,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode uses assembly (NanoLoanEngine.sol#406-434)\n\t- NanoLoanEngine.sol#414-432\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 436,
          "vulnerability_to_line": 469,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le\n\n    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode uses assembly (NanoLoanEngine.sol#436-469)\n\t- NanoLoanEngine.sol#445-467\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 471,
          "vulnerability_to_line": 516,
          "vulnerability_code": "    function decode(\n\n        bytes memory _data,\n\n        uint256 _la,\n\n        uint256 _lb,\n\n        uint256 _lc,\n\n        uint256 _ld,\n\n        uint256 _le,\n\n        uint256 _lf\n\n    ) internal pure returns (\n\n        bytes32 _a,\n\n        bytes32 _b,\n\n        bytes32 _c,\n\n        bytes32 _d,\n\n        bytes32 _e,\n\n        bytes32 _f\n\n    ) {\n\n        uint256 o;\n\n        assembly {\n\n            let s := add(_data, 32)\n\n            _a := mload(s)\n\n            let l := sub(32, _la)\n\n            if l { _a := div(_a, exp(2, mul(l, 8))) }\n\n            o := add(s, _la)\n\n            _b := mload(o)\n\n            l := sub(32, _lb)\n\n            if l { _b := div(_b, exp(2, mul(l, 8))) }\n\n            o := add(o, _lb)\n\n            _c := mload(o)\n\n            l := sub(32, _lc)\n\n            if l { _c := div(_c, exp(2, mul(l, 8))) }\n\n            o := add(o, _lc)\n\n            _d := mload(o)\n\n            l := sub(32, _ld)\n\n            if l { _d := div(_d, exp(2, mul(l, 8))) }\n\n            o := add(o, _ld)\n\n            _e := mload(o)\n\n            l := sub(32, _le)\n\n            if l { _e := div(_e, exp(2, mul(l, 8))) }\n\n            o := add(o, _le)\n\n            _f := mload(o)\n\n            l := sub(32, _lf)\n\n            if l { _f := div(_f, exp(2, mul(l, 8))) }\n\n            o := sub(o, s)\n\n        }\n\n        require(_data.length >= o, \"Reading bytes out of bounds\");\n",
          "message": "BytesUtils.decode uses assembly (NanoLoanEngine.sol#471-516)\n\t- NanoLoanEngine.sol#488-514\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 269,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public VERSION;\n",
          "message": "Engine.VERSION should be constant (NanoLoanEngine.sol#269)\nEngine.VERSION_NAME should be constant (NanoLoanEngine.sol#270)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": 41,
          "vulnerability_code": "    function transferTo(address _to) public onlyOwner returns (bool) {\n\n        require(_to != address(0), \"0x0 Is not a valid owner\");\n\n        owner = _to;\n\n        return true;\n",
          "message": "OwnableBasalt.transferTo (NanoLoanEngine.sol#37-41) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function url() public view returns (string memory);\n",
          "message": "Oracle.url (NanoLoanEngine.sol#65) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getRate(bytes32 symbol, bytes memory data) public returns (uint256 rate, uint256 decimals);\n",
          "message": "Oracle.getRate (NanoLoanEngine.sol#73) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": 88,
          "vulnerability_code": "    function addCurrency(string memory ticker) public onlyOwner returns (bool) {\n\n        bytes32 currency = encodeCurrency(ticker);\n\n        emit NewSymbol(currency);\n\n        supported[currency] = true;\n\n        currencies.push(currency);\n\n        return true;\n",
          "message": "Oracle.addCurrency (NanoLoanEngine.sol#82-88) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": 117,
          "vulnerability_code": "    function decodeCurrency(bytes32 b) public pure returns (string memory o) {\n\n        uint256 ns = 256;\n\n        while (true) {\n\n            if (ns == 0 || (b<<ns-8) != 0)\n\n                break;\n\n            ns -= 8;\n\n        }\n\n        assembly {\n\n            ns := div(ns, 8)\n\n            o := mload(0x40)\n\n            mstore(0x40, add(o, and(add(add(ns, 0x20), 0x1f), not(0x1f))))\n\n            mstore(o, ns)\n\n            mstore(add(o, 32), b)\n\n        }\n",
          "message": "Oracle.decodeCurrency (NanoLoanEngine.sol#103-117) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 179,
          "vulnerability_to_line": 183,
          "vulnerability_code": "    function withdrawTokens(IERC20 token, address to, uint256 amount) public onlyOwner returns (bool) {\n\n        require(safeSubtract(token.balanceOf(address(this)), lockedTokens[address(token)]) >= amount);\n\n        require(to != address(0));\n\n        return token.transfer(to, amount);\n",
          "message": "TokenLockable.withdrawTokens (NanoLoanEngine.sol#179-183) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function url() public view returns (string memory);\n",
          "message": "Cosigner.url (NanoLoanEngine.sol#224) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 231,
          "vulnerability_to_line": 237,
          "vulnerability_code": "    function cost(\n\n        address engine,\n\n        uint256 index,\n\n        bytes memory data,\n\n        bytes memory oracleData\n\n    )\n",
          "message": "Cosigner.cost (NanoLoanEngine.sol#231-237) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 246,
          "vulnerability_to_line": 252,
          "vulnerability_code": "    function requestCosign(\n\n        address engine,\n\n        uint256 index,\n\n        bytes memory data,\n\n        bytes memory oracleData\n\n    )\n",
          "message": "Cosigner.requestCosign (NanoLoanEngine.sol#246-252) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 260,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function claim(address engine, uint256 index, bytes memory oracleData) public returns (bool);\n",
          "message": "Cosigner.claim (NanoLoanEngine.sol#260) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 773,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTotalLoans() public view returns (uint256) { return loans.length; }\n",
          "message": "NanoLoanEngine.getTotalLoans (NanoLoanEngine.sol#773) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 279,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTotalLoans() public view returns (uint256);\n",
          "message": "Engine.getTotalLoans (NanoLoanEngine.sol#279) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 280,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getOracle(uint index) public view returns (Oracle);\n",
          "message": "Engine.getOracle (NanoLoanEngine.sol#280) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 774,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getOracle(uint index) public view returns (Oracle) { return loans[index].oracle; }\n",
          "message": "NanoLoanEngine.getOracle (NanoLoanEngine.sol#774) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 775,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBorrower(uint index) public view returns (address) { return loans[index].borrower; }\n",
          "message": "NanoLoanEngine.getBorrower (NanoLoanEngine.sol#775) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 281,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBorrower(uint index) public view returns (address);\n",
          "message": "Engine.getBorrower (NanoLoanEngine.sol#281) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 282,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getCosigner(uint index) public view returns (address);\n",
          "message": "Engine.getCosigner (NanoLoanEngine.sol#282) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 776,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getCosigner(uint index) public view returns (address) { return loans[index].cosigner; }\n",
          "message": "NanoLoanEngine.getCosigner (NanoLoanEngine.sol#776) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 772,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ownerOf(uint256 index) public view returns (address owner) { owner = loans[index].lender; }\n",
          "message": "NanoLoanEngine.ownerOf (NanoLoanEngine.sol#772) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 283,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ownerOf(uint256) public view returns (address owner);\n",
          "message": "Engine.ownerOf (NanoLoanEngine.sol#283) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 284,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getCreator(uint index) public view returns (address);\n",
          "message": "Engine.getCreator (NanoLoanEngine.sol#284) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 777,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getCreator(uint index) public view returns (address) { return loans[index].creator; }\n",
          "message": "NanoLoanEngine.getCreator (NanoLoanEngine.sol#777) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 285,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAmount(uint index) public view returns (uint256);\n",
          "message": "Engine.getAmount (NanoLoanEngine.sol#285) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 778,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAmount(uint index) public view returns (uint256) { return loans[index].amount; }\n",
          "message": "NanoLoanEngine.getAmount (NanoLoanEngine.sol#778) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 781,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getPaid(uint index) public view returns (uint256) { return loans[index].paid; }\n",
          "message": "NanoLoanEngine.getPaid (NanoLoanEngine.sol#781) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 286,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getPaid(uint index) public view returns (uint256);\n",
          "message": "Engine.getPaid (NanoLoanEngine.sol#286) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 784,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getDueTime(uint index) public view returns (uint256) { return loans[index].dueTime; }\n",
          "message": "NanoLoanEngine.getDueTime (NanoLoanEngine.sol#784) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 287,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getDueTime(uint index) public view returns (uint256);\n",
          "message": "Engine.getDueTime (NanoLoanEngine.sol#287) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 787,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getApprobation(uint index, address _address) public view returns (bool) { return loans[index].approbations[_address]; }\n",
          "message": "NanoLoanEngine.getApprobation (NanoLoanEngine.sol#787) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 288,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getApprobation(uint index, address _address) public view returns (bool);\n",
          "message": "Engine.getApprobation (NanoLoanEngine.sol#288) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 788,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getStatus(uint index) public view returns (Status) { return loans[index].status; }\n",
          "message": "NanoLoanEngine.getStatus (NanoLoanEngine.sol#788) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 289,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getStatus(uint index) public view returns (Status);\n",
          "message": "Engine.getStatus (NanoLoanEngine.sol#289) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 791,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getCurrency(uint index) public view returns (bytes32) { return loans[index].currency; }\n",
          "message": "NanoLoanEngine.getCurrency (NanoLoanEngine.sol#791) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 292,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getCurrency(uint index) public view returns (bytes32);\n",
          "message": "Engine.getCurrency (NanoLoanEngine.sol#292) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 296,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function takeOwnership(uint256 index) public returns (bool);\n",
          "message": "Engine.takeOwnership (NanoLoanEngine.sol#296) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1048,
          "vulnerability_to_line": 1050,
          "vulnerability_code": "    function takeOwnership(uint256 _index) public returns (bool) {\n\n        return transfer(msg.sender, _index);\n",
          "message": "NanoLoanEngine.takeOwnership (NanoLoanEngine.sol#1048-1050) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1312,
          "vulnerability_to_line": 1319,
          "vulnerability_code": "    function withdrawal(uint index, address to, uint256 amount) public returns (bool) {\n\n        Loan storage loan = loans[index];\n\n        require(msg.sender == loan.lender);\n\n        loan.lenderBalance = safeSubtract(loan.lenderBalance, amount);\n\n        require(rcn.transfer(to, amount));\n\n        unlockTokens(address(rcn), amount);\n\n        return true;\n",
          "message": "NanoLoanEngine.withdrawal (NanoLoanEngine.sol#1312-1319) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 297,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawal(uint index, address to, uint256 amount) public returns (bool);\n",
          "message": "Engine.withdrawal (NanoLoanEngine.sol#297) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 307,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function name() public view returns (string memory _name);\n",
          "message": "ERC721.name (NanoLoanEngine.sol#307) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 543,
          "vulnerability_to_line": 545,
          "vulnerability_code": "    function name() public view returns (string memory _name) {\n\n        _name = \"RCN - Nano loan engine - Basalt 233\";\n",
          "message": "NanoLoanEngine.name (NanoLoanEngine.sol#543-545) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 547,
          "vulnerability_to_line": 549,
          "vulnerability_code": "    function symbol() public view returns (string memory _symbol) {\n\n        _symbol = \"RCN-NLE-233\";\n",
          "message": "NanoLoanEngine.symbol (NanoLoanEngine.sol#547-549) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 308,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function symbol() public view returns (string memory _symbol);\n",
          "message": "ERC721.symbol (NanoLoanEngine.sol#308) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 309,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function totalSupply() public view returns (uint256 _totalSupply);\n",
          "message": "ERC721.totalSupply (NanoLoanEngine.sol#309) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 557,
          "vulnerability_to_line": 559,
          "vulnerability_code": "    function totalSupply() public view returns (uint _totalSupply) {\n\n        _totalSupply = activeLoans;\n",
          "message": "NanoLoanEngine.totalSupply (NanoLoanEngine.sol#557-559) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 312,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ownerOf(uint256) public view returns (address owner);\n",
          "message": "ERC721.ownerOf (NanoLoanEngine.sol#312) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 313,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address, uint256) public returns (bool);\n",
          "message": "ERC721.approve (NanoLoanEngine.sol#313) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1081,
          "vulnerability_to_line": 1087,
          "vulnerability_code": "    function approve(address to, uint256 index) public returns (bool) {\n\n        Loan storage loan = loans[index];\n\n        require(msg.sender == loan.lender);\n\n        loan.approvedTransfer = to;\n\n        emit Approval(msg.sender, to, index);\n\n        return true;\n",
          "message": "NanoLoanEngine.approve (NanoLoanEngine.sol#1081-1087) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 314,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function takeOwnership(uint256) public returns (bool);\n",
          "message": "ERC721.takeOwnership (NanoLoanEngine.sol#314) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 316,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setApprovalForAll(address _operator, bool _approved) public returns (bool);\n",
          "message": "ERC721.setApprovalForAll (NanoLoanEngine.sol#316) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1095,
          "vulnerability_to_line": 1099,
          "vulnerability_code": "    function setApprovalForAll(address _operator, bool _approved) public returns (bool) {\n\n        operators[msg.sender][_operator] = _approved;\n\n        emit ApprovalForAll(msg.sender, _operator, _approved);\n\n        return true;\n",
          "message": "NanoLoanEngine.setApprovalForAll (NanoLoanEngine.sol#1095-1099) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 317,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getApproved(uint256 _tokenId) public view returns (address);\n",
          "message": "ERC721.getApproved (NanoLoanEngine.sol#317) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 790,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getApproved(uint index) public view returns (address) {return loans[index].approvedTransfer; }\n",
          "message": "NanoLoanEngine.getApproved (NanoLoanEngine.sol#790) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 318,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isApprovedForAll(address _owner, address _operator) public view returns (bool);\n",
          "message": "ERC721.isApprovedForAll (NanoLoanEngine.sol#318) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 611,
          "vulnerability_to_line": 613,
          "vulnerability_code": "    function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\n\n        return operators[_owner][_operator];\n",
          "message": "NanoLoanEngine.isApprovedForAll (NanoLoanEngine.sol#611-613) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function tokenMetadata(uint256 _tokenId) public view returns (string memory info);\n",
          "message": "ERC721.tokenMetadata (NanoLoanEngine.sol#320) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 622,
          "vulnerability_to_line": 624,
          "vulnerability_code": "    function tokenMetadata(uint256 index) public view returns (string memory) {\n\n        return loans[index].metadata;\n",
          "message": "NanoLoanEngine.tokenMetadata (NanoLoanEngine.sol#622-624) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 634,
          "vulnerability_to_line": 636,
          "vulnerability_code": "    function tokenMetadataHash(uint256 index) public view returns (bytes32) {\n\n        return keccak256(bytes(loans[index].metadata));\n",
          "message": "NanoLoanEngine.tokenMetadataHash (NanoLoanEngine.sol#634-636) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 713,
          "vulnerability_to_line": 770,
          "vulnerability_code": "    function createLoan(\n\n        Oracle _oracleContract,\n\n        address _borrower,\n\n        bytes32 _currency,\n\n        uint256 _amount,\n\n        uint256 _interestRate,\n\n        uint256 _interestRatePunitory,\n\n        uint256 _duesIn,\n\n        uint256 _cancelableAt,\n\n        uint256 _expirationRequest,\n\n        string memory _metadata\n\n    ) public returns (uint256) {\n\n        require(!deprecated);\n\n        require(_cancelableAt <= _duesIn);\n\n        require(address(_oracleContract) != address(0) || _currency == bytes32(0));\n\n        require(_borrower != address(0));\n\n        require(_amount != 0);\n\n        require(_interestRatePunitory != 0);\n\n        require(_interestRate != 0);\n\n        require(_expirationRequest > block.timestamp);\n\n\n\n        Loan memory loan = Loan(\n\n            Status.initial,\n\n            _oracleContract,\n\n            _borrower,\n\n            address(0),\n\n            msg.sender,\n\n            address(0),\n\n            _amount,\n\n            0,\n\n            0,\n\n            0,\n\n            0,\n\n            _interestRate,\n\n            _interestRatePunitory,\n\n            0,\n\n            _duesIn,\n\n            _currency,\n\n            _cancelableAt,\n\n            0,\n\n            address(0),\n\n            _expirationRequest,\n\n            _metadata\n\n        );\n\n\n\n        uint index = loans.push(loan) - 1;\n\n        emit CreatedLoan(index, _borrower, msg.sender);\n\n\n\n        bytes32 identifier = getIdentifier(index);\n\n        require(identifierToIndex[identifier] == 0);\n\n        identifierToIndex[identifier] = index;\n\n\n\n        if (msg.sender == _borrower) {\n\n            approveLoan(index);\n\n        }\n\n\n\n        return index;\n",
          "message": "NanoLoanEngine.createLoan (NanoLoanEngine.sol#713-770) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 779,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getPunitoryInterest(uint index) public view returns (uint256) { return loans[index].punitoryInterest; }\n",
          "message": "NanoLoanEngine.getPunitoryInterest (NanoLoanEngine.sol#779) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 780,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getInterestTimestamp(uint index) public view returns (uint256) { return loans[index].interestTimestamp; }\n",
          "message": "NanoLoanEngine.getInterestTimestamp (NanoLoanEngine.sol#780) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 782,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getInterestRate(uint index) public view returns (uint256) { return loans[index].interestRate; }\n",
          "message": "NanoLoanEngine.getInterestRate (NanoLoanEngine.sol#782) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 783,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getInterestRatePunitory(uint index) public view returns (uint256) { return loans[index].interestRatePunitory; }\n",
          "message": "NanoLoanEngine.getInterestRatePunitory (NanoLoanEngine.sol#783) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 785,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getDuesIn(uint index) public view returns (uint256) { return loans[index].duesIn; }\n",
          "message": "NanoLoanEngine.getDuesIn (NanoLoanEngine.sol#785) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 786,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getCancelableAt(uint index) public view returns (uint256) { return loans[index].cancelableAt; }\n",
          "message": "NanoLoanEngine.getCancelableAt (NanoLoanEngine.sol#786) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 789,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getLenderBalance(uint index) public view returns (uint256) { return loans[index].lenderBalance; }\n",
          "message": "NanoLoanEngine.getLenderBalance (NanoLoanEngine.sol#789) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 792,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getExpirationRequest(uint index) public view returns (uint256) { return loans[index].expirationRequest; }\n",
          "message": "NanoLoanEngine.getExpirationRequest (NanoLoanEngine.sol#792) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 793,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getInterest(uint index) public view returns (uint256) { return loans[index].interest; }\n",
          "message": "NanoLoanEngine.getInterest (NanoLoanEngine.sol#793) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 869,
          "vulnerability_to_line": 873,
          "vulnerability_code": "    function approveLoanIdentifier(bytes32 identifier) public returns (bool) {\n\n        uint256 index = identifierToIndex[identifier];\n\n        require(index != 0);\n\n        return approveLoan(index);\n",
          "message": "NanoLoanEngine.approveLoanIdentifier (NanoLoanEngine.sol#869-873) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 884,
          "vulnerability_to_line": 894,
          "vulnerability_code": "    function registerApprove(bytes32 identifier, uint8 v, bytes32 r, bytes32 s) public returns (bool) {\n\n        uint256 index = identifierToIndex[identifier];\n\n        require(index != 0);\n\n        Loan storage loan = loans[index];\n\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\n\n        bytes32 preHash = keccak256(abi.encodePacked(prefix, identifier));\n\n        require(loan.borrower == ecrecover(preHash, v, r, s));\n\n        loan.approbations[loan.borrower] = true;\n\n        emit ApprovedBy(index, loan.borrower);\n\n        return true;\n",
          "message": "NanoLoanEngine.registerApprove (NanoLoanEngine.sol#884-894) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 911,
          "vulnerability_to_line": 948,
          "vulnerability_code": "    function lend(uint index, bytes memory oracleData, Cosigner cosigner, bytes memory cosignerData) public returns (bool) {\n\n        Loan storage loan = loans[index];\n\n\n\n        require(loan.status == Status.initial);\n\n        require(isApproved(index));\n\n        require(block.timestamp <= loan.expirationRequest);\n\n\n\n        loan.lender = msg.sender;\n\n        loan.dueTime = safeAdd(block.timestamp, loan.duesIn);\n\n        loan.interestTimestamp = block.timestamp;\n\n        loan.status = Status.lent;\n\n\n\n        // ERC721, create new loan and transfer it to the lender\n\n        emit Transfer(address(0), loan.lender, index);\n\n        activeLoans += 1;\n\n        lendersBalance[loan.lender] += 1;\n\n\n\n        if (loan.cancelableAt > 0)\n\n            internalAddInterest(loan, safeAdd(block.timestamp, loan.cancelableAt));\n\n\n\n        // Transfer the money to the borrower before handling the cosigner\n\n        // so the cosigner could require a specific usage for that money.\n\n        uint256 transferValue = convertRate(loan.oracle, loan.currency, oracleData, loan.amount);\n\n        require(rcn.transferFrom(msg.sender, loan.borrower, transferValue));\n\n\n\n        if (address(cosigner) != address(0)) {\n\n            // The cosigner it's temporary set to the next address (cosigner + 2), it's expected that the cosigner will\n\n            // call the method \"cosign\" to accept the conditions; that method also sets the cosigner to the right\n\n            // address. If that does not happen, the transaction fails.\n\n            loan.cosigner = address(uint256(address(cosigner)) + 2);\n\n            require(cosigner.requestCosign(address(this), index, cosignerData, oracleData));\n\n            require(loan.cosigner == address(cosigner));\n\n        }\n\n\n\n        emit Lent(index, loan.lender, address(cosigner));\n\n\n\n        return true;\n",
          "message": "NanoLoanEngine.lend (NanoLoanEngine.sol#911-948) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1005,
          "vulnerability_to_line": 1009,
          "vulnerability_code": "    function destroyIdentifier(bytes32 identifier) public returns (bool) {\n\n        uint256 index = identifierToIndex[identifier];\n\n        require(index != 0);\n\n        return destroy(index);\n",
          "message": "NanoLoanEngine.destroyIdentifier (NanoLoanEngine.sol#1005-1009) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1063,
          "vulnerability_to_line": 1066,
          "vulnerability_code": "    function transferFrom(address from, address to, uint256 index) public returns (bool) {\n\n        require(loans[index].lender == from);\n\n        return transfer(to, index);\n",
          "message": "NanoLoanEngine.transferFrom (NanoLoanEngine.sol#1063-1066) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1244,
          "vulnerability_to_line": 1272,
          "vulnerability_code": "    function pay(uint index, uint256 _amount, address _from, bytes memory oracleData) public returns (bool) {\n\n        Loan storage loan = loans[index];\n\n\n\n        require(loan.status == Status.lent);\n\n        addInterest(index);\n\n        uint256 toPay = min(getPendingAmount(index), _amount);\n\n        emit PartialPayment(index, msg.sender, _from, toPay);\n\n\n\n        loan.paid = safeAdd(loan.paid, toPay);\n\n\n\n        if (getRawPendingAmount(index) == 0) {\n\n            emit TotalPayment(index);\n\n            loan.status = Status.paid;\n\n\n\n            // ERC721, remove loan from circulation\n\n            lendersBalance[loan.lender] -= 1;\n\n            activeLoans -= 1;\n\n            emit Transfer(loan.lender, address(0), index);\n\n        }\n\n\n\n        uint256 transferValue = convertRate(loan.oracle, loan.currency, oracleData, toPay);\n\n        require(transferValue > 0 || toPay < _amount);\n\n\n\n        lockTokens(address(rcn), transferValue);\n\n        require(rcn.transferFrom(msg.sender, address(this), transferValue));\n\n        loan.lenderBalance = safeAdd(transferValue, loan.lenderBalance);\n\n\n\n        return true;\n",
          "message": "NanoLoanEngine.pay (NanoLoanEngine.sol#1244-1272) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1332,
          "vulnerability_to_line": 1348,
          "vulnerability_code": "    function withdrawalList(uint256[] memory loanIds, address to) public returns (uint256) {\n\n        uint256 inputId;\n\n        uint256 totalWithdraw = 0;\n\n\n\n        for (inputId = 0; inputId < loanIds.length; inputId++) {\n\n            Loan storage loan = loans[loanIds[inputId]];\n\n            if (loan.lender == msg.sender) {\n\n                totalWithdraw += loan.lenderBalance;\n\n                loan.lenderBalance = 0;\n\n            }\n\n        }\n\n\n\n        require(rcn.transfer(to, totalWithdraw));\n\n        unlockTokens(address(rcn), totalWithdraw);\n\n\n\n        return totalWithdraw;\n",
          "message": "NanoLoanEngine.withdrawalList (NanoLoanEngine.sol#1332-1348) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1353,
          "vulnerability_to_line": 1355,
          "vulnerability_code": "    function setDeprecated(bool _deprecated) public onlyOwner {\n\n        deprecated = _deprecated;\n",
          "message": "NanoLoanEngine.setDeprecated (NanoLoanEngine.sol#1353-1355) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": "Detected issues with version pragma in NanoLoanEngine.sol:\n\t- pragma solidity^0.5.11 (NanoLoanEngine.sol#3): it allows old versions\n\t- pragma solidity^0.5.11 (NanoLoanEngine.sol#17): it allows old versions\n\t- pragma solidity^0.5.11 (NanoLoanEngine.sol#46): it allows old versions\n\t- pragma solidity^0.5.11 (NanoLoanEngine.sol#123): it allows old versions\n\t- pragma solidity^0.5.11 (NanoLoanEngine.sol#165): it allows old versions\n\t- pragma solidity^0.5.11 (NanoLoanEngine.sol#202): it allows old versions\n\t- pragma solidity^0.5.11 (NanoLoanEngine.sol#266): it allows old versions\n\t- pragma solidity^0.5.11 (NanoLoanEngine.sol#302): it allows old versions\n\t- pragma solidity^0.5.11 (NanoLoanEngine.sol#329): it allows old versions\n\t- pragma solidity^0.5.11 (NanoLoanEngine.sol#523): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferTo(address _to) public onlyOwner returns (bool) {\n",
          "message": "Parameter '_to' of OwnableBasalt.transferTo (NanoLoanEngine.sol#37) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 283,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ownerOf(uint256) public view returns (address owner);\n",
          "message": "Parameter '' of Engine.ownerOf (NanoLoanEngine.sol#283) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 269,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public VERSION;\n",
          "message": "Variable 'Engine.VERSION' (NanoLoanEngine.sol#269) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 270,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string public VERSION_NAME;\n",
          "message": "Variable 'Engine.VERSION_NAME' (NanoLoanEngine.sol#270) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 312,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ownerOf(uint256) public view returns (address owner);\n",
          "message": "Parameter '' of ERC721.ownerOf (NanoLoanEngine.sol#312) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 313,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address, uint256) public returns (bool);\n",
          "message": "Parameter '' of ERC721.approve (NanoLoanEngine.sol#313) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 313,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address, uint256) public returns (bool);\n",
          "message": "Parameter '_scope_0' of ERC721.approve (NanoLoanEngine.sol#313) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 314,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function takeOwnership(uint256) public returns (bool);\n",
          "message": "Parameter '' of ERC721.takeOwnership (NanoLoanEngine.sol#314) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 315,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address, uint256) public returns (bool);\n",
          "message": "Parameter '' of ERC721.transfer (NanoLoanEngine.sol#315) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 315,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address, uint256) public returns (bool);\n",
          "message": "Parameter '_scope_0' of ERC721.transfer (NanoLoanEngine.sol#315) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 350,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _data,\n",
          "message": "Parameter '_data' of BytesUtils.decode (NanoLoanEngine.sol#350) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 351,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _la\n",
          "message": "Parameter '_la' of BytesUtils.decode (NanoLoanEngine.sol#351) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 362,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _data,\n",
          "message": "Parameter '_data' of BytesUtils.decode (NanoLoanEngine.sol#362) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 382,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _data,\n",
          "message": "Parameter '_data' of BytesUtils.decode (NanoLoanEngine.sol#382) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _data,\n",
          "message": "Parameter '_data' of BytesUtils.decode (NanoLoanEngine.sol#407) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 437,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _data,\n",
          "message": "Parameter '_data' of BytesUtils.decode (NanoLoanEngine.sol#437) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 472,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _data,\n",
          "message": "Parameter '_data' of BytesUtils.decode (NanoLoanEngine.sol#472) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 569,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint _balance) {\n",
          "message": "Parameter '_owner' of NanoLoanEngine.balanceOf (NanoLoanEngine.sol#569) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1048,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function takeOwnership(uint256 _index) public returns (bool) {\n",
          "message": "Parameter '_index' of NanoLoanEngine.takeOwnership (NanoLoanEngine.sol#1048) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1095,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setApprovalForAll(address _operator, bool _approved) public returns (bool) {\n",
          "message": "Parameter '_operator' of NanoLoanEngine.setApprovalForAll (NanoLoanEngine.sol#1095) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1095,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setApprovalForAll(address _operator, bool _approved) public returns (bool) {\n",
          "message": "Parameter '_approved' of NanoLoanEngine.setApprovalForAll (NanoLoanEngine.sol#1095) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 611,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\n",
          "message": "Parameter '_owner' of NanoLoanEngine.isApprovedForAll (NanoLoanEngine.sol#611) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 611,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\n",
          "message": "Parameter '_operator' of NanoLoanEngine.isApprovedForAll (NanoLoanEngine.sol#611) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 787,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getApprobation(uint index, address _address) public view returns (bool) { return loans[index].approbations[_address]; }\n",
          "message": "Parameter '_address' of NanoLoanEngine.getApprobation (NanoLoanEngine.sol#787) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 582,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function tokensOfOwner(address _owner) external view returns(uint256[] memory ownerTokens) {\n",
          "message": "Parameter '_owner' of NanoLoanEngine.tokensOfOwner (NanoLoanEngine.sol#582) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 648,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (IERC20 _rcn) public {\n",
          "message": "Parameter '_rcn' of NanoLoanEngine. (NanoLoanEngine.sol#648) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 714,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Oracle _oracleContract,\n",
          "message": "Parameter '_oracleContract' of NanoLoanEngine.createLoan (NanoLoanEngine.sol#714) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 715,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _borrower,\n",
          "message": "Parameter '_borrower' of NanoLoanEngine.createLoan (NanoLoanEngine.sol#715) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 716,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32 _currency,\n",
          "message": "Parameter '_currency' of NanoLoanEngine.createLoan (NanoLoanEngine.sol#716) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 717,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _amount,\n",
          "message": "Parameter '_amount' of NanoLoanEngine.createLoan (NanoLoanEngine.sol#717) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 718,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _interestRate,\n",
          "message": "Parameter '_interestRate' of NanoLoanEngine.createLoan (NanoLoanEngine.sol#718) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 719,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _interestRatePunitory,\n",
          "message": "Parameter '_interestRatePunitory' of NanoLoanEngine.createLoan (NanoLoanEngine.sol#719) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 720,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _duesIn,\n",
          "message": "Parameter '_duesIn' of NanoLoanEngine.createLoan (NanoLoanEngine.sol#720) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 721,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _cancelableAt,\n",
          "message": "Parameter '_cancelableAt' of NanoLoanEngine.createLoan (NanoLoanEngine.sol#721) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 722,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _expirationRequest,\n",
          "message": "Parameter '_expirationRequest' of NanoLoanEngine.createLoan (NanoLoanEngine.sol#722) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 723,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string memory _metadata\n",
          "message": "Parameter '_metadata' of NanoLoanEngine.createLoan (NanoLoanEngine.sol#723) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1244,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function pay(uint index, uint256 _amount, address _from, bytes memory oracleData) public returns (bool) {\n",
          "message": "Parameter '_amount' of NanoLoanEngine.pay (NanoLoanEngine.sol#1244) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1244,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function pay(uint index, uint256 _amount, address _from, bytes memory oracleData) public returns (bool) {\n",
          "message": "Parameter '_from' of NanoLoanEngine.pay (NanoLoanEngine.sol#1244) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1353,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setDeprecated(bool _deprecated) public onlyOwner {\n",
          "message": "Parameter '_deprecated' of NanoLoanEngine.setDeprecated (NanoLoanEngine.sol#1353) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 1034,
          "vulnerability_to_line": null,
          "vulnerability_code": "        loan.approvedTransfer = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 652,
          "vulnerability_to_line": null,
          "vulnerability_code": "        loans.length++;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 1081,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address to, uint256 index) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXACT_TIME",
          "vulnerability_from_line": 962,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(loan.status == Status.lent && (loan.dueTime - loan.duesIn) == block.timestamp);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 1336,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (inputId = 0; inputId < loanIds.length; inputId++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 1212,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addInterest(uint index) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function encodeCurrency(string memory currency) public pure returns (bytes32 o) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decodeCurrency(bytes32 b) public pure returns (string memory o) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 333,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 340,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 349,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 361,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 381,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 406,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 436,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 471,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1336,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (inputId = 0; inputId < loanIds.length; inputId++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "        while (true) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 1353,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setDeprecated(bool _deprecated) public onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 165,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 202,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 266,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 302,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 329,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 523,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 540,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private activeLoans = 0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 541,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint256) private lendersBalance;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 685,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => mapping(address => bool)) private operators;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 688,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Loan[] private loans;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function encodeCurrency(string memory currency) public pure returns (bytes32 o) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decodeCurrency(bytes32 b) public pure returns (string memory o) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 333,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function readBytes32(bytes memory data, uint256 index) internal pure returns (bytes32 o) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 340,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function read(bytes memory data, uint256 offset, uint256 length) internal pure returns (bytes32 o) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 349,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 361,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 381,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 406,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 436,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 471,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decode(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getRate(bytes32 symbol, bytes memory data) public returns (uint256 rate, uint256 decimals);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 365,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 386,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 412,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 443,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) internal pure returns (bytes32 _a, bytes32 _b, bytes32 _c, bytes32 _d, bytes32 _e) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 479,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) internal pure returns (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1140,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function calculateInterest(uint256 timeDelta, uint256 interestRate, uint256 amount) internal pure returns (uint256 realDelta, uint256 interest) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 335,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 342,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 354,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 367,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 388,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 414,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 445,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 488,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 182,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return token.transfer(to, amount);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 182,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return token.transfer(to, amount);\n",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}