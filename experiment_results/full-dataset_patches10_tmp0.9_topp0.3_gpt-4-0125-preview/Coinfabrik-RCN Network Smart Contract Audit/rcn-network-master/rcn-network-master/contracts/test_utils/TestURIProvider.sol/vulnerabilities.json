{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 549,
          "vulnerability_to_line": null,
          "vulnerability_code": "            (bool success, bytes4 result) = _noThrowCall(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 550,
          "vulnerability_to_line": null,
          "vulnerability_code": "                _to,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 551,
          "vulnerability_to_line": null,
          "vulnerability_code": "                abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 552,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    ERC721_RECEIVED,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 553,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    msg.sender,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 554,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    holder,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 555,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    _assetId,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 556,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    _userData\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 557,
          "vulnerability_to_line": null,
          "vulnerability_code": "                )\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 558,
          "vulnerability_to_line": null,
          "vulnerability_code": "            );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 563,
          "vulnerability_to_line": null,
          "vulnerability_code": "                (success, result) = _noThrowCall(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 564,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    _to,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 565,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 566,
          "vulnerability_to_line": null,
          "vulnerability_code": "                        ERC721_RECEIVED_LEGACY,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 567,
          "vulnerability_to_line": null,
          "vulnerability_code": "                        holder,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 568,
          "vulnerability_to_line": null,
          "vulnerability_code": "                        _assetId,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 569,
          "vulnerability_to_line": null,
          "vulnerability_code": "                        _userData\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 570,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    )\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 571,
          "vulnerability_to_line": null,
          "vulnerability_code": "                );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor()\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": null,
          "vulnerability_code": "        internal\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": null,
          "vulnerability_code": "    {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _registerInterface(_InterfaceId_ERC165);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 146,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 147,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string memory name,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 148,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string memory symbol\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _name = name;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _symbol = symbol;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 152,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 153,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _registerInterface(ERC_721_INTERFACE);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 154,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _registerInterface(ERC_721_METADATA_INTERFACE);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _registerInterface(ERC_721_ENUMERATION_INTERFACE);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 614,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public ERC721Base(\"Test ERC721\", \"TST\") {}\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(z >= x, \"Add overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(x >= y, \"Sub overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(z/x == y, \"Mult overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 92,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_holderOf[_tokenId] != address(0), \"Asset does not exist\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 248,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_index < _allTokens.length, \"Index out of bounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 262,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_owner != address(0), \"0x0 Is not a valid owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 263,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_index < _balanceOf(_owner), \"Index out of bounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 349,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_operator != address(0), \"0x0 is an invalid operator\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 378,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == holder || _isApprovedForAll(msg.sender, holder), \"msg.sender can't approve\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 439,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_holderOf[_assetId] == address(0), \"Asset already exists\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 451,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_isAuthorized(msg.sender, _assetId), \"msg.sender Not authorized\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 456,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_ownerOf(_assetId) == _from, \"Not current owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 461,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_target != address(0), \"Target can't be 0x0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 573,
          "vulnerability_to_line": null,
          "vulnerability_code": "                require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 574,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    success && result == ERC721_RECEIVED_LEGACY,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 575,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    \"Contract rejected the token\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 576,
          "vulnerability_to_line": null,
          "vulnerability_code": "                );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 573,
          "vulnerability_to_line": null,
          "vulnerability_code": "                require(\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 574,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    success && result == ERC721_RECEIVED_LEGACY,\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 575,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    \"Contract rejected the token\"\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 576,
          "vulnerability_to_line": null,
          "vulnerability_code": "                );\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 545,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (_doCheck && _to.isContract()) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 546,
          "vulnerability_to_line": null,
          "vulnerability_code": "            // Call dest contract\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 547,
          "vulnerability_to_line": null,
          "vulnerability_code": "            // Perform check with the new safe call\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 548,
          "vulnerability_to_line": null,
          "vulnerability_code": "            // onERC721Received(address,address,uint256,bytes)\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 549,
          "vulnerability_to_line": null,
          "vulnerability_code": "            (bool success, bytes4 result) = _noThrowCall(\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 550,
          "vulnerability_to_line": null,
          "vulnerability_code": "                _to,\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 551,
          "vulnerability_to_line": null,
          "vulnerability_code": "                abi.encodeWithSelector(\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 552,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    ERC721_RECEIVED,\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 553,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    msg.sender,\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 554,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    holder,\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 416,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _assetsOf[_from].length--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_72"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": 107,
          "vulnerability_code": "    function isContract(address _addr) internal view returns (bool) {\n\n        uint size;\n\n        assembly { size := extcodesize(_addr) }\n\n        return size > 0;\n",
          "message": "IsContract.isContract (TestURIProvider.sol#103-107) is declared view but contains assembly code\n"
        },
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 121,
          "vulnerability_to_line": 604,
          "vulnerability_code": "contract ERC721Base is ERC165 {\n\n    using SafeMath for uint256;\n\n    using IsContract for address;\n\n\n\n    mapping(uint256 => address) private _holderOf;\n\n\n\n    // Owner to array of assetId\n\n    mapping(address => uint256[]) private _assetsOf;\n\n    // AssetId to index on array in _assetsOf mapping\n\n    mapping(uint256 => uint256) private _indexOfAsset;\n\n\n\n    mapping(address => mapping(address => bool)) private _operators;\n\n    mapping(uint256 => address) private _approval;\n\n\n\n    bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n\n    bytes4 private constant ERC721_RECEIVED_LEGACY = 0xf0b9e5ba;\n\n\n\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n\n\n    bytes4 private constant ERC_721_INTERFACE = 0x80ac58cd;\n\n    bytes4 private constant ERC_721_METADATA_INTERFACE = 0x5b5e139f;\n\n    bytes4 private constant ERC_721_ENUMERATION_INTERFACE = 0x780e9d63;\n\n\n\n    constructor(\n\n        string memory name,\n\n        string memory symbol\n\n    ) public {\n\n        _name = name;\n\n        _symbol = symbol;\n\n\n\n        _registerInterface(ERC_721_INTERFACE);\n\n        _registerInterface(ERC_721_METADATA_INTERFACE);\n\n        _registerInterface(ERC_721_ENUMERATION_INTERFACE);\n\n    }\n\n\n\n    // ///\n\n    // ERC721 Metadata\n\n    // ///\n\n\n\n    /// ERC-721 Non-Fungible Token Standard, optional metadata extension\n\n    /// See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n\n    /// Note: the ERC-165 identifier for this interface is 0x5b5e139f.\n\n\n\n    event SetURIProvider(address _uriProvider);\n\n\n\n    string private _name;\n\n    string private _symbol;\n\n\n\n    URIProvider private _uriProvider;\n\n\n\n    // @notice A descriptive name for a collection of NFTs in this contract\n\n    function name() external view returns (string memory) {\n\n        return _name;\n\n    }\n\n\n\n    // @notice An abbreviated name for NFTs in this contract\n\n    function symbol() external view returns (string memory) {\n\n        return _symbol;\n\n    }\n\n\n\n    /**\n\n    * @notice A distinct Uniform Resource Identifier (URI) for a given asset.\n\n    * @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\n\n    *  3986. The URI may point to a JSON file that conforms to the \"ERC721\n\n    *  Metadata JSON Schema\".\n\n    */\n\n    function tokenURI(uint256 _tokenId) external view returns (string memory) {\n\n        require(_holderOf[_tokenId] != address(0), \"Asset does not exist\");\n\n        URIProvider provider = _uriProvider;\n\n        return address(provider) == address(0) ? \"\" : provider.tokenURI(_tokenId);\n\n    }\n\n\n\n    function _setURIProvider(URIProvider _provider) internal returns (bool) {\n\n        emit SetURIProvider(address(_provider));\n\n        _uriProvider = _provider;\n\n        return true;\n\n    }\n\n\n\n    // ///\n\n    // ERC721 Enumeration\n\n    // ///\n\n\n\n    ///  ERC-721 Non-Fungible Token Standard, optional enumeration extension\n\n    ///  See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n\n    ///  Note: the ERC-165 identifier for this interface is 0x780e9d63.\n\n\n\n    uint256[] private _allTokens;\n\n\n\n    /**\n\n     * @dev Gets the total of assets stored by the contract\n\n     *      Warning: this method can consume all the gas of the transaction, it should not be\n\n     *               called from another contract, it should only be used in external calls\n\n     * @return an array with total assets\n\n     */\n\n    function allTokens() external view returns (uint256[] memory) {\n\n        return _allTokens;\n\n    }\n\n\n\n    /**\n\n     * @dev Gets the total of assets of the owner\n\n     *      Warning: this method can consume all the gas of the transaction, it should not be\n\n     *               called from another contract, it should only be used in external calls\n\n     * @param _owner the address of owner\n\n     * @return an array with total assets of owner\n\n     */\n\n    function assetsOf(address _owner) external view returns (uint256[] memory) {\n\n        return _assetsOf[_owner];\n\n    }\n\n\n\n    /**\n\n     * @dev Gets the total amount of assets stored by the contract\n\n     * @return uint256 representing the total amount of assets\n\n     */\n\n    function totalSupply() external view returns (uint256) {\n\n        return _allTokens.length;\n\n    }\n\n\n\n    /**\n\n    * @notice Enumerate valid NFTs\n\n    * @dev Throws if `_index` >= `totalSupply()`.\n\n    * @param _index A counter less than `totalSupply()`\n\n    * @return The token identifier for the `_index` of the NFT,\n\n    *  (sort order not specified)\n\n    */\n\n    function tokenByIndex(uint256 _index) external view returns (uint256) {\n\n        require(_index < _allTokens.length, \"Index out of bounds\");\n\n        return _allTokens[_index];\n\n    }\n\n\n\n    /**\n\n    * @notice Enumerate NFTs assigned to an owner\n\n    * @dev Throws if `_index` >= `balanceOf(_owner)` or if\n\n    *  `_owner` is the zero address, representing invalid NFTs.\n\n    * @param _owner An address where we are interested in NFTs owned by them\n\n    * @param _index A counter less than `balanceOf(_owner)`\n\n    * @return The token identifier for the `_index` of the NFT assigned to `_owner`,\n\n    *   (sort order not specified)\n\n    */\n\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n\n        require(_owner != address(0), \"0x0 Is not a valid owner\");\n\n        require(_index < _balanceOf(_owner), \"Index out of bounds\");\n\n        return _assetsOf[_owner][_index];\n\n    }\n\n\n\n    //\n\n    // Asset-centric getter functions\n\n    //\n\n\n\n    /**\n\n     * @dev Queries what address owns an asset. This method does not throw.\n\n     * In order to check if the asset exists, use the `exists` function or check if the\n\n     * return value of this call is `0`.\n\n     * @return uint256 the assetId\n\n     */\n\n    function ownerOf(uint256 _assetId) external view returns (address) {\n\n        return _ownerOf(_assetId);\n\n    }\n\n\n\n    function _ownerOf(uint256 _assetId) internal view returns (address) {\n\n        return _holderOf[_assetId];\n\n    }\n\n\n\n    //\n\n    // Holder-centric getter functions\n\n    //\n\n    /**\n\n     * @dev Gets the balance of the specified address\n\n     * @param _owner address to query the balance of\n\n     * @return uint256 representing the amount owned by the passed address\n\n     */\n\n    function balanceOf(address _owner) external view returns (uint256) {\n\n        return _balanceOf(_owner);\n\n    }\n\n\n\n    function _balanceOf(address _owner) internal view returns (uint256) {\n\n        return _assetsOf[_owner].length;\n\n    }\n\n\n\n    //\n\n    // Authorization getters\n\n    //\n\n\n\n    /**\n\n     * @dev Query whether an address has been authorized to move any assets on behalf of someone else\n\n     * @param _operator the address that might be authorized\n\n     * @param _assetHolder the address that provided the authorization\n\n     * @return bool true if the operator has been authorized to move any assets\n\n     */\n\n    function isApprovedForAll(\n\n        address _operator,\n\n        address _assetHolder\n\n    ) external view returns (bool) {\n\n        return _isApprovedForAll(_operator, _assetHolder);\n\n    }\n\n\n\n    function _isApprovedForAll(\n\n        address _operator,\n\n        address _assetHolder\n\n    ) internal view returns (bool) {\n\n        return _operators[_assetHolder][_operator];\n\n    }\n\n\n\n    /**\n\n     * @dev Query what address has been particularly authorized to move an asset\n\n     * @param _assetId the asset to be queried for\n\n     * @return bool true if the asset has been approved by the holder\n\n     */\n\n    function getApproved(uint256 _assetId) external view returns (address) {\n\n        return _getApproved(_assetId);\n\n    }\n\n\n\n    function _getApproved(uint256 _assetId) internal view returns (address) {\n\n        return _approval[_assetId];\n\n    }\n\n\n\n    /**\n\n     * @dev Query if an operator can move an asset.\n\n     * @param _operator the address that might be authorized\n\n     * @param _assetId the asset that has been `approved` for transfer\n\n     * @return bool true if the asset has been approved by the holder\n\n     */\n\n    function isAuthorized(address _operator, uint256 _assetId) external view returns (bool) {\n\n        return _isAuthorized(_operator, _assetId);\n\n    }\n\n\n\n    function _isAuthorized(address _operator, uint256 _assetId) internal view returns (bool) {\n\n        require(_operator != address(0), \"0x0 is an invalid operator\");\n\n        address owner = _ownerOf(_assetId);\n\n\n\n        return _operator == owner || _isApprovedForAll(_operator, owner) || _getApproved(_assetId) == _operator;\n\n    }\n\n\n\n    //\n\n    // Authorization\n\n    //\n\n\n\n    /**\n\n     * @dev Authorize a third party operator to manage (send) msg.sender's asset\n\n     * @param _operator address to be approved\n\n     * @param _authorized bool set to true to authorize, false to withdraw authorization\n\n     */\n\n    function setApprovalForAll(address _operator, bool _authorized) external {\n\n        if (_operators[msg.sender][_operator] != _authorized) {\n\n            _operators[msg.sender][_operator] = _authorized;\n\n            emit ApprovalForAll(msg.sender, _operator, _authorized);\n\n        }\n\n    }\n\n\n\n    /**\n\n     * @dev Authorize a third party operator to manage one particular asset\n\n     * @param _operator address to be approved\n\n     * @param _assetId asset to approve\n\n     */\n\n    function approve(address _operator, uint256 _assetId) external {\n\n        address holder = _ownerOf(_assetId);\n\n        require(msg.sender == holder || _isApprovedForAll(msg.sender, holder), \"msg.sender can't approve\");\n\n        if (_getApproved(_assetId) != _operator) {\n\n            _approval[_assetId] = _operator;\n\n            emit Approval(holder, _operator, _assetId);\n\n        }\n\n    }\n\n\n\n    //\n\n    // Internal Operations\n\n    //\n\n\n\n    function _addAssetTo(address _to, uint256 _assetId) private {\n\n        // Store asset owner\n\n        _holderOf[_assetId] = _to;\n\n\n\n        // Store index of the asset\n\n        uint256 length = _balanceOf(_to);\n\n        _assetsOf[_to].push(_assetId);\n\n        _indexOfAsset[_assetId] = length;\n\n\n\n        // Save main enumerable\n\n        _allTokens.push(_assetId);\n\n    }\n\n\n\n    function _transferAsset(address _from, address _to, uint256 _assetId) private {\n\n        uint256 assetIndex = _indexOfAsset[_assetId];\n\n        uint256 lastAssetIndex = _balanceOf(_from).sub(1);\n\n\n\n        if (assetIndex != lastAssetIndex) {\n\n            // Replace current asset with last asset\n\n            uint256 lastAssetId = _assetsOf[_from][lastAssetIndex];\n\n            // Insert the last asset into the position previously occupied by the asset to be removed\n\n            _assetsOf[_from][assetIndex] = lastAssetId;\n\n            _indexOfAsset[lastAssetId] = assetIndex;\n\n        }\n\n\n\n        // Resize the array\n\n        _assetsOf[_from][lastAssetIndex] = 0;\n\n        _assetsOf[_from].length--;\n\n\n\n        // Change owner\n\n        _holderOf[_assetId] = _to;\n\n\n\n        // Update the index of positions of the asset\n\n        uint256 length = _balanceOf(_to);\n\n        _assetsOf[_to].push(_assetId);\n\n        _indexOfAsset[_assetId] = length;\n\n    }\n\n\n\n    function _clearApproval(address _holder, uint256 _assetId) private {\n\n        if (_approval[_assetId] != address(0)) {\n\n            _approval[_assetId] = address(0);\n\n            emit Approval(_holder, address(0), _assetId);\n\n        }\n\n    }\n\n\n\n    //\n\n    // Supply-altering functions\n\n    //\n\n\n\n    function _generate(uint256 _assetId, address _beneficiary) internal {\n\n        require(_holderOf[_assetId] == address(0), \"Asset already exists\");\n\n\n\n        _addAssetTo(_beneficiary, _assetId);\n\n\n\n        emit Transfer(address(0), _beneficiary, _assetId);\n\n    }\n\n\n\n    //\n\n    // Transaction related operations\n\n    //\n\n\n\n    modifier onlyAuthorized(uint256 _assetId) {\n\n        require(_isAuthorized(msg.sender, _assetId), \"msg.sender Not authorized\");\n\n        _;\n\n    }\n\n\n\n    modifier isCurrentOwner(address _from, uint256 _assetId) {\n\n        require(_ownerOf(_assetId) == _from, \"Not current owner\");\n\n        _;\n\n    }\n\n\n\n    modifier addressDefined(address _target) {\n\n        require(_target != address(0), \"Target can't be 0x0\");\n\n        _;\n\n    }\n\n\n\n    /**\n\n     * @dev Alias of `safeTransferFrom(from, to, assetId, '')`\n\n     *\n\n     * @param _from address that currently owns an asset\n\n     * @param _to address to receive the ownership of the asset\n\n     * @param _assetId uint256 ID of the asset to be transferred\n\n     */\n\n    function safeTransferFrom(address _from, address _to, uint256 _assetId) external {\n\n        return _doTransferFrom(\n\n            _from,\n\n            _to,\n\n            _assetId,\n\n            \"\",\n\n            true\n\n        );\n\n    }\n\n\n\n    /**\n\n     * @dev Securely transfers the ownership of a given asset from one address to\n\n     * another address, calling the method `onNFTReceived` on the target address if\n\n     * there's code associated with it\n\n     *\n\n     * @param _from address that currently owns an asset\n\n     * @param _to address to receive the ownership of the asset\n\n     * @param _assetId uint256 ID of the asset to be transferred\n\n     * @param _userData bytes arbitrary user information to attach to this transfer\n\n     */\n\n    function safeTransferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _assetId,\n\n        bytes calldata _userData\n\n    ) external {\n\n        return _doTransferFrom(\n\n            _from,\n\n            _to,\n\n            _assetId,\n\n            _userData,\n\n            true\n\n        );\n\n    }\n\n\n\n    /**\n\n     * @dev Transfers the ownership of a given asset from one address to another address\n\n     * Warning! This function does not attempt to verify that the target address can send\n\n     * tokens.\n\n     *\n\n     * @param _from address sending the asset\n\n     * @param _to address to receive the ownership of the asset\n\n     * @param _assetId uint256 ID of the asset to be transferred\n\n     */\n\n    function transferFrom(address _from, address _to, uint256 _assetId) external {\n\n        return _doTransferFrom(\n\n            _from,\n\n            _to,\n\n            _assetId,\n\n            \"\",\n\n            false\n\n        );\n\n    }\n\n\n\n    /**\n\n     * Internal function that moves an asset from one holder to another\n\n     */\n\n    function _doTransferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _assetId,\n\n        bytes memory _userData,\n\n        bool _doCheck\n\n    )\n\n        internal\n\n        onlyAuthorized(_assetId)\n\n        addressDefined(_to)\n\n        isCurrentOwner(_from, _assetId)\n\n    {\n\n        address holder = _holderOf[_assetId];\n\n        _clearApproval(holder, _assetId);\n\n        _transferAsset(holder, _to, _assetId);\n\n\n\n        if (_doCheck && _to.isContract()) {\n\n            // Call dest contract\n\n            // Perform check with the new safe call\n\n            // onERC721Received(address,address,uint256,bytes)\n\n            (bool success, bytes4 result) = _noThrowCall(\n\n                _to,\n\n                abi.encodeWithSelector(\n\n                    ERC721_RECEIVED,\n\n                    msg.sender,\n\n                    holder,\n\n                    _assetId,\n\n                    _userData\n\n                )\n\n            );\n\n\n\n            if (!success || result != ERC721_RECEIVED) {\n\n                // Try legacy safe call\n\n                // onERC721Received(address,uint256,bytes)\n\n                (success, result) = _noThrowCall(\n\n                    _to,\n\n                    abi.encodeWithSelector(\n\n                        ERC721_RECEIVED_LEGACY,\n\n                        holder,\n\n                        _assetId,\n\n                        _userData\n\n                    )\n\n                );\n\n\n\n                require(\n\n                    success && result == ERC721_RECEIVED_LEGACY,\n\n                    \"Contract rejected the token\"\n\n                );\n\n            }\n\n        }\n\n\n\n        emit Transfer(holder, _to, _assetId);\n\n    }\n\n\n\n    //\n\n    // Utilities\n\n    //\n\n\n\n    /**\n\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract),\n\n     * relaxing the requirement on the return value\n\n     * @param _contract The contract that receives the ERC721\n\n     * @param _data The call data\n\n     * @return True if the call not reverts and the result of the call\n\n     */\n\n    function _noThrowCall(\n\n        address _contract,\n\n        bytes memory _data\n\n    ) internal returns (bool success, bytes4 result) {\n\n        bytes memory returnData;\n\n        (success, returnData) = _contract.call(_data);\n\n\n\n        if (returnData.length > 0)\n\n            result = abi.decode(returnData, (bytes4));\n\n    }\n",
          "message": "ERC721Base (TestURIProvider.sol#121-604) has incorrect ERC20 function interface(s):\n\t-approve (TestURIProvider.sol#376-383)\n\t-transferFrom (TestURIProvider.sol#516-524)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 147,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string memory name,\n",
          "message": "ERC721Base.constructor.name (local variable @ TestURIProvider.sol#147) shadows:\n\t- ERC721Base.name (function @ TestURIProvider.sol#174-176)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 148,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string memory symbol\n",
          "message": "ERC721Base.constructor.symbol (local variable @ TestURIProvider.sol#148) shadows:\n\t- ERC721Base.symbol (function @ TestURIProvider.sol#179-181)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": 107,
          "vulnerability_code": "    function isContract(address _addr) internal view returns (bool) {\n\n        uint size;\n\n        assembly { size := extcodesize(_addr) }\n\n        return size > 0;\n",
          "message": "IsContract.isContract uses assembly (TestURIProvider.sol#103-107)\n\t- TestURIProvider.sol#105\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 611,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string public uri = \"https://ripioCreditNetwork/debtId\";\n",
          "message": "TestURIProvider.uri should be constant (TestURIProvider.sol#611)\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": "Detected issues with version pragma in TestURIProvider.sol:\n\t- pragma solidity^0.5.11 (TestURIProvider.sol#3): it allows old versions\n\t- pragma solidity^0.5.11 (TestURIProvider.sol#31): it allows old versions\n\t- pragma solidity^0.5.11 (TestURIProvider.sol#46): it allows old versions\n\t- pragma solidity^0.5.11 (TestURIProvider.sol#99): it allows old versions\n\t- pragma solidity^0.5.11 (TestURIProvider.sol#112): it allows old versions\n\t- pragma solidity^0.5.11 (TestURIProvider.sol#608): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 594,
          "vulnerability_to_line": 603,
          "vulnerability_code": "    function _noThrowCall(\n\n        address _contract,\n\n        bytes memory _data\n\n    ) internal returns (bool success, bytes4 result) {\n\n        bytes memory returnData;\n\n        (success, returnData) = _contract.call(_data);\n\n\n\n        if (returnData.length > 0)\n\n            result = abi.decode(returnData, (bytes4));\n",
          "message": "Low level call in ERC721Base._noThrowCall (TestURIProvider.sol#594-603):\n\t-(success,returnData) = _contract.call(_data) TestURIProvider.sol#599\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 89,
          "vulnerability_to_line": 94,
          "vulnerability_code": "    function _registerInterface(bytes4 interfaceId)\n\n        internal\n\n    {\n\n        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n\n        _supportedInterfaces[interfaceId] = true;\n",
          "message": "Function 'ERC165._registerInterface' (TestURIProvider.sol#89-94) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
          "message": "Constant 'ERC165._InterfaceId_ERC165' (TestURIProvider.sol#54) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 189,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function tokenURI(uint256 _tokenId) external view returns (string memory) {\n",
          "message": "Parameter '_tokenId' of ERC721Base.tokenURI (TestURIProvider.sol#189) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 195,
          "vulnerability_to_line": 199,
          "vulnerability_code": "    function _setURIProvider(URIProvider _provider) internal returns (bool) {\n\n        emit SetURIProvider(address(_provider));\n\n        _uriProvider = _provider;\n\n        return true;\n",
          "message": "Function 'ERC721Base._setURIProvider' (TestURIProvider.sol#195-199) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 195,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setURIProvider(URIProvider _provider) internal returns (bool) {\n",
          "message": "Parameter '_provider' of ERC721Base._setURIProvider (TestURIProvider.sol#195) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function assetsOf(address _owner) external view returns (uint256[] memory) {\n",
          "message": "Parameter '_owner' of ERC721Base.assetsOf (TestURIProvider.sol#228) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 247,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function tokenByIndex(uint256 _index) external view returns (uint256) {\n",
          "message": "Parameter '_index' of ERC721Base.tokenByIndex (TestURIProvider.sol#247) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 261,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n",
          "message": "Parameter '_owner' of ERC721Base.tokenOfOwnerByIndex (TestURIProvider.sol#261) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 261,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n",
          "message": "Parameter '_index' of ERC721Base.tokenOfOwnerByIndex (TestURIProvider.sol#261) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 277,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ownerOf(uint256 _assetId) external view returns (address) {\n",
          "message": "Parameter '_assetId' of ERC721Base.ownerOf (TestURIProvider.sol#277) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 281,
          "vulnerability_to_line": 283,
          "vulnerability_code": "    function _ownerOf(uint256 _assetId) internal view returns (address) {\n\n        return _holderOf[_assetId];\n",
          "message": "Function 'ERC721Base._ownerOf' (TestURIProvider.sol#281-283) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 281,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _ownerOf(uint256 _assetId) internal view returns (address) {\n",
          "message": "Parameter '_assetId' of ERC721Base._ownerOf (TestURIProvider.sol#281) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 293,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) external view returns (uint256) {\n",
          "message": "Parameter '_owner' of ERC721Base.balanceOf (TestURIProvider.sol#293) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 297,
          "vulnerability_to_line": 299,
          "vulnerability_code": "    function _balanceOf(address _owner) internal view returns (uint256) {\n\n        return _assetsOf[_owner].length;\n",
          "message": "Function 'ERC721Base._balanceOf' (TestURIProvider.sol#297-299) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 297,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _balanceOf(address _owner) internal view returns (uint256) {\n",
          "message": "Parameter '_owner' of ERC721Base._balanceOf (TestURIProvider.sol#297) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 312,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _operator,\n",
          "message": "Parameter '_operator' of ERC721Base.isApprovedForAll (TestURIProvider.sol#312) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 313,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _assetHolder\n",
          "message": "Parameter '_assetHolder' of ERC721Base.isApprovedForAll (TestURIProvider.sol#313) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 318,
          "vulnerability_to_line": 323,
          "vulnerability_code": "    function _isApprovedForAll(\n\n        address _operator,\n\n        address _assetHolder\n\n    ) internal view returns (bool) {\n\n        return _operators[_assetHolder][_operator];\n",
          "message": "Function 'ERC721Base._isApprovedForAll' (TestURIProvider.sol#318-323) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 319,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _operator,\n",
          "message": "Parameter '_operator' of ERC721Base._isApprovedForAll (TestURIProvider.sol#319) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _assetHolder\n",
          "message": "Parameter '_assetHolder' of ERC721Base._isApprovedForAll (TestURIProvider.sol#320) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 330,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getApproved(uint256 _assetId) external view returns (address) {\n",
          "message": "Parameter '_assetId' of ERC721Base.getApproved (TestURIProvider.sol#330) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 334,
          "vulnerability_to_line": 336,
          "vulnerability_code": "    function _getApproved(uint256 _assetId) internal view returns (address) {\n\n        return _approval[_assetId];\n",
          "message": "Function 'ERC721Base._getApproved' (TestURIProvider.sol#334-336) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 334,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _getApproved(uint256 _assetId) internal view returns (address) {\n",
          "message": "Parameter '_assetId' of ERC721Base._getApproved (TestURIProvider.sol#334) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 344,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isAuthorized(address _operator, uint256 _assetId) external view returns (bool) {\n",
          "message": "Parameter '_operator' of ERC721Base.isAuthorized (TestURIProvider.sol#344) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 344,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isAuthorized(address _operator, uint256 _assetId) external view returns (bool) {\n",
          "message": "Parameter '_assetId' of ERC721Base.isAuthorized (TestURIProvider.sol#344) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 348,
          "vulnerability_to_line": 353,
          "vulnerability_code": "    function _isAuthorized(address _operator, uint256 _assetId) internal view returns (bool) {\n\n        require(_operator != address(0), \"0x0 is an invalid operator\");\n\n        address owner = _ownerOf(_assetId);\n\n\n\n        return _operator == owner || _isApprovedForAll(_operator, owner) || _getApproved(_assetId) == _operator;\n",
          "message": "Function 'ERC721Base._isAuthorized' (TestURIProvider.sol#348-353) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 348,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _isAuthorized(address _operator, uint256 _assetId) internal view returns (bool) {\n",
          "message": "Parameter '_operator' of ERC721Base._isAuthorized (TestURIProvider.sol#348) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 348,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _isAuthorized(address _operator, uint256 _assetId) internal view returns (bool) {\n",
          "message": "Parameter '_assetId' of ERC721Base._isAuthorized (TestURIProvider.sol#348) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 364,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setApprovalForAll(address _operator, bool _authorized) external {\n",
          "message": "Parameter '_operator' of ERC721Base.setApprovalForAll (TestURIProvider.sol#364) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 364,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setApprovalForAll(address _operator, bool _authorized) external {\n",
          "message": "Parameter '_authorized' of ERC721Base.setApprovalForAll (TestURIProvider.sol#364) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 376,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _operator, uint256 _assetId) external {\n",
          "message": "Parameter '_operator' of ERC721Base.approve (TestURIProvider.sol#376) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 376,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _operator, uint256 _assetId) external {\n",
          "message": "Parameter '_assetId' of ERC721Base.approve (TestURIProvider.sol#376) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 389,
          "vulnerability_to_line": 400,
          "vulnerability_code": "    function _addAssetTo(address _to, uint256 _assetId) private {\n\n        // Store asset owner\n\n        _holderOf[_assetId] = _to;\n\n\n\n        // Store index of the asset\n\n        uint256 length = _balanceOf(_to);\n\n        _assetsOf[_to].push(_assetId);\n\n        _indexOfAsset[_assetId] = length;\n\n\n\n        // Save main enumerable\n\n        _allTokens.push(_assetId);\n",
          "message": "Function 'ERC721Base._addAssetTo' (TestURIProvider.sol#389-400) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 389,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _addAssetTo(address _to, uint256 _assetId) private {\n",
          "message": "Parameter '_to' of ERC721Base._addAssetTo (TestURIProvider.sol#389) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 389,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _addAssetTo(address _to, uint256 _assetId) private {\n",
          "message": "Parameter '_assetId' of ERC721Base._addAssetTo (TestURIProvider.sol#389) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 402,
          "vulnerability_to_line": 425,
          "vulnerability_code": "    function _transferAsset(address _from, address _to, uint256 _assetId) private {\n\n        uint256 assetIndex = _indexOfAsset[_assetId];\n\n        uint256 lastAssetIndex = _balanceOf(_from).sub(1);\n\n\n\n        if (assetIndex != lastAssetIndex) {\n\n            // Replace current asset with last asset\n\n            uint256 lastAssetId = _assetsOf[_from][lastAssetIndex];\n\n            // Insert the last asset into the position previously occupied by the asset to be removed\n\n            _assetsOf[_from][assetIndex] = lastAssetId;\n\n            _indexOfAsset[lastAssetId] = assetIndex;\n\n        }\n\n\n\n        // Resize the array\n\n        _assetsOf[_from][lastAssetIndex] = 0;\n\n        _assetsOf[_from].length--;\n\n\n\n        // Change owner\n\n        _holderOf[_assetId] = _to;\n\n\n\n        // Update the index of positions of the asset\n\n        uint256 length = _balanceOf(_to);\n\n        _assetsOf[_to].push(_assetId);\n\n        _indexOfAsset[_assetId] = length;\n",
          "message": "Function 'ERC721Base._transferAsset' (TestURIProvider.sol#402-425) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 402,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _transferAsset(address _from, address _to, uint256 _assetId) private {\n",
          "message": "Parameter '_from' of ERC721Base._transferAsset (TestURIProvider.sol#402) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 402,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _transferAsset(address _from, address _to, uint256 _assetId) private {\n",
          "message": "Parameter '_to' of ERC721Base._transferAsset (TestURIProvider.sol#402) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 402,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _transferAsset(address _from, address _to, uint256 _assetId) private {\n",
          "message": "Parameter '_assetId' of ERC721Base._transferAsset (TestURIProvider.sol#402) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 427,
          "vulnerability_to_line": 432,
          "vulnerability_code": "    function _clearApproval(address _holder, uint256 _assetId) private {\n\n        if (_approval[_assetId] != address(0)) {\n\n            _approval[_assetId] = address(0);\n\n            emit Approval(_holder, address(0), _assetId);\n\n        }\n",
          "message": "Function 'ERC721Base._clearApproval' (TestURIProvider.sol#427-432) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 427,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _clearApproval(address _holder, uint256 _assetId) private {\n",
          "message": "Parameter '_holder' of ERC721Base._clearApproval (TestURIProvider.sol#427) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 427,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _clearApproval(address _holder, uint256 _assetId) private {\n",
          "message": "Parameter '_assetId' of ERC721Base._clearApproval (TestURIProvider.sol#427) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 438,
          "vulnerability_to_line": 444,
          "vulnerability_code": "    function _generate(uint256 _assetId, address _beneficiary) internal {\n\n        require(_holderOf[_assetId] == address(0), \"Asset already exists\");\n\n\n\n        _addAssetTo(_beneficiary, _assetId);\n\n\n\n        emit Transfer(address(0), _beneficiary, _assetId);\n",
          "message": "Function 'ERC721Base._generate' (TestURIProvider.sol#438-444) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 438,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _generate(uint256 _assetId, address _beneficiary) internal {\n",
          "message": "Parameter '_assetId' of ERC721Base._generate (TestURIProvider.sol#438) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 438,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _generate(uint256 _assetId, address _beneficiary) internal {\n",
          "message": "Parameter '_beneficiary' of ERC721Base._generate (TestURIProvider.sol#438) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 472,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function safeTransferFrom(address _from, address _to, uint256 _assetId) external {\n",
          "message": "Parameter '_from' of ERC721Base.safeTransferFrom (TestURIProvider.sol#472) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 472,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function safeTransferFrom(address _from, address _to, uint256 _assetId) external {\n",
          "message": "Parameter '_to' of ERC721Base.safeTransferFrom (TestURIProvider.sol#472) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 472,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function safeTransferFrom(address _from, address _to, uint256 _assetId) external {\n",
          "message": "Parameter '_assetId' of ERC721Base.safeTransferFrom (TestURIProvider.sol#472) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 493,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _from,\n",
          "message": "Parameter '_from' of ERC721Base.safeTransferFrom (TestURIProvider.sol#493) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 494,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _to,\n",
          "message": "Parameter '_to' of ERC721Base.safeTransferFrom (TestURIProvider.sol#494) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 495,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _assetId,\n",
          "message": "Parameter '_assetId' of ERC721Base.safeTransferFrom (TestURIProvider.sol#495) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 496,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata _userData\n",
          "message": "Parameter '_userData' of ERC721Base.safeTransferFrom (TestURIProvider.sol#496) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 516,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _assetId) external {\n",
          "message": "Parameter '_from' of ERC721Base.transferFrom (TestURIProvider.sol#516) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 516,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _assetId) external {\n",
          "message": "Parameter '_to' of ERC721Base.transferFrom (TestURIProvider.sol#516) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 516,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _assetId) external {\n",
          "message": "Parameter '_assetId' of ERC721Base.transferFrom (TestURIProvider.sol#516) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 529,
          "vulnerability_to_line": 581,
          "vulnerability_code": "    function _doTransferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _assetId,\n\n        bytes memory _userData,\n\n        bool _doCheck\n\n    )\n\n        internal\n\n        onlyAuthorized(_assetId)\n\n        addressDefined(_to)\n\n        isCurrentOwner(_from, _assetId)\n\n    {\n\n        address holder = _holderOf[_assetId];\n\n        _clearApproval(holder, _assetId);\n\n        _transferAsset(holder, _to, _assetId);\n\n\n\n        if (_doCheck && _to.isContract()) {\n\n            // Call dest contract\n\n            // Perform check with the new safe call\n\n            // onERC721Received(address,address,uint256,bytes)\n\n            (bool success, bytes4 result) = _noThrowCall(\n\n                _to,\n\n                abi.encodeWithSelector(\n\n                    ERC721_RECEIVED,\n\n                    msg.sender,\n\n                    holder,\n\n                    _assetId,\n\n                    _userData\n\n                )\n\n            );\n\n\n\n            if (!success || result != ERC721_RECEIVED) {\n\n                // Try legacy safe call\n\n                // onERC721Received(address,uint256,bytes)\n\n                (success, result) = _noThrowCall(\n\n                    _to,\n\n                    abi.encodeWithSelector(\n\n                        ERC721_RECEIVED_LEGACY,\n\n                        holder,\n\n                        _assetId,\n\n                        _userData\n\n                    )\n\n                );\n\n\n\n                require(\n\n                    success && result == ERC721_RECEIVED_LEGACY,\n\n                    \"Contract rejected the token\"\n\n                );\n\n            }\n\n        }\n\n\n\n        emit Transfer(holder, _to, _assetId);\n",
          "message": "Function 'ERC721Base._doTransferFrom' (TestURIProvider.sol#529-581) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 531,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _to,\n",
          "message": "Parameter '_to' of ERC721Base._doTransferFrom (TestURIProvider.sol#531) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 532,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _assetId,\n",
          "message": "Parameter '_assetId' of ERC721Base._doTransferFrom (TestURIProvider.sol#532) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 533,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _userData,\n",
          "message": "Parameter '_userData' of ERC721Base._doTransferFrom (TestURIProvider.sol#533) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 534,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool _doCheck\n",
          "message": "Parameter '_doCheck' of ERC721Base._doTransferFrom (TestURIProvider.sol#534) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 594,
          "vulnerability_to_line": 603,
          "vulnerability_code": "    function _noThrowCall(\n\n        address _contract,\n\n        bytes memory _data\n\n    ) internal returns (bool success, bytes4 result) {\n\n        bytes memory returnData;\n\n        (success, returnData) = _contract.call(_data);\n\n\n\n        if (returnData.length > 0)\n\n            result = abi.decode(returnData, (bytes4));\n",
          "message": "Function 'ERC721Base._noThrowCall' (TestURIProvider.sol#594-603) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 595,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _contract,\n",
          "message": "Parameter '_contract' of ERC721Base._noThrowCall (TestURIProvider.sol#595) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 596,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _data\n",
          "message": "Parameter '_data' of ERC721Base._noThrowCall (TestURIProvider.sol#596) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 629,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setURIProvider(URIProvider _provider) external  {\n",
          "message": "Parameter '_provider' of TestURIProvider.setURIProvider (TestURIProvider.sol#629) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 92,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 private constant ERC721_RECEIVED_LEGACY = 0xf0b9e5ba;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 private constant ERC_721_INTERFACE = 0x80ac58cd;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 private constant ERC_721_METADATA_INTERFACE = 0x5b5e139f;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 144,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 private constant ERC_721_ENUMERATION_INTERFACE = 0x780e9d63;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 429,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _approval[_assetId] = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 416,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _assetsOf[_from].length--;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 608,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes4 => bool) private _supportedInterfaces;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(uint256 => address) private _holderOf;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint256[]) private _assetsOf;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 130,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(uint256 => uint256) private _indexOfAsset;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 132,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => mapping(address => bool)) private _operators;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 133,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(uint256 => address) private _approval;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 private constant ERC721_RECEIVED_LEGACY = 0xf0b9e5ba;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 private constant ERC_721_INTERFACE = 0x80ac58cd;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 private constant ERC_721_METADATA_INTERFACE = 0x5b5e139f;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 144,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 private constant ERC_721_ENUMERATION_INTERFACE = 0x780e9d63;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 168,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private _name;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 169,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private _symbol;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 171,
          "vulnerability_to_line": null,
          "vulnerability_code": "    URIProvider private _uriProvider;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 209,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256[] private _allTokens;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 122,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isContract(address _addr) internal view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 597,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) internal returns (bool success, bytes4 result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 599,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (success, returnData) = _contract.call(_data);\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 626,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return uri;\n",
          "message": "The arithmetic operator can underflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 611,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string public uri = \"https://ripioCreditNetwork/debtId\";\n",
          "message": "The arithmetic operator can underflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}