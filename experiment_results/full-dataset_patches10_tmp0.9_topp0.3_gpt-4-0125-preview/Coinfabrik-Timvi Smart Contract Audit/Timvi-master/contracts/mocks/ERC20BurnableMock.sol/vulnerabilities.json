{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 389,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(string memory name, string memory symbol, uint8 decimals) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 390,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _name = name;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 391,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _symbol = symbol;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 392,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _decimals = decimals;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 393,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 427,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _settings) public ERC20Detailed(\"TimviToken\", \"TMV\", 18) {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 428,
          "vulnerability_to_line": null,
          "vulnerability_code": "        settings = Settings(_settings);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 429,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 439,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address initialAccount, uint256 initialBalance, address _settings) public TimviToken(_settings) {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 440,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _mint(initialAccount, initialBalance);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 441,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, 'mul');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b > 0, 'div');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b <= a, 'sub');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, 'add');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(settings.isContractManager(msg.sender), \"You have no access\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_29"
      ],
      "vulnerability_findings": [
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 389,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(string memory name, string memory symbol, uint8 decimals) public {\n",
          "message": "ERC20Detailed.constructor.name (local variable @ ERC20BurnableMock.sol#389) shadows:\n\t- ERC20Detailed.name (function @ ERC20BurnableMock.sol#398-400)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 389,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(string memory name, string memory symbol, uint8 decimals) public {\n",
          "message": "ERC20Detailed.constructor.symbol (local variable @ ERC20BurnableMock.sol#389) shadows:\n\t- ERC20Detailed.symbol (function @ ERC20BurnableMock.sol#405-407)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 389,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(string memory name, string memory symbol, uint8 decimals) public {\n",
          "message": "ERC20Detailed.constructor.decimals (local variable @ ERC20BurnableMock.sol#389) shadows:\n\t- ERC20Detailed.decimals (function @ ERC20BurnableMock.sol#412-414)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function totalSupply() external view returns (uint256);\n",
          "message": "IERC20.totalSupply (ERC20BurnableMock.sol#78) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": 143,
          "vulnerability_code": "    function totalSupply() public view returns (uint256) {\n\n        return _totalSupply;\n",
          "message": "ERC20.totalSupply (ERC20BurnableMock.sol#141-143) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": 152,
          "vulnerability_code": "    function balanceOf(address owner) public view returns (uint256) {\n\n        return _balances[owner];\n",
          "message": "ERC20.balanceOf (ERC20BurnableMock.sol#150-152) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address who) external view returns (uint256);\n",
          "message": "IERC20.balanceOf (ERC20BurnableMock.sol#80) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": 169,
          "vulnerability_code": "    function allowance(\n\n        address owner,\n\n        address spender\n\n    )\n\n    public\n\n    view\n\n    returns (uint256)\n\n    {\n\n        return _allowed[owner][spender];\n",
          "message": "ERC20.allowance (ERC20BurnableMock.sol#160-169) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": 83,
          "vulnerability_code": "    function allowance(address owner, address spender)\n",
          "message": "IERC20.allowance (ERC20BurnableMock.sol#82-83) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 176,
          "vulnerability_to_line": 179,
          "vulnerability_code": "    function transfer(address to, uint256 value) public returns (bool) {\n\n        _transfer(msg.sender, to, value);\n\n        return true;\n",
          "message": "ERC20.transfer (ERC20BurnableMock.sol#176-179) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address to, uint256 value) external returns (bool);\n",
          "message": "IERC20.transfer (ERC20BurnableMock.sol#85) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": 88,
          "vulnerability_code": "    function approve(address spender, uint256 value)\n",
          "message": "IERC20.approve (ERC20BurnableMock.sol#87-88) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": 196,
          "vulnerability_code": "    function approve(address spender, uint256 value) public returns (bool) {\n\n        require(spender != address(0));\n\n\n\n        _allowed[msg.sender][spender] = value;\n\n        emit Approval(msg.sender, spender, value);\n\n        return true;\n",
          "message": "ERC20.approve (ERC20BurnableMock.sol#190-196) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 204,
          "vulnerability_to_line": 215,
          "vulnerability_code": "    function transferFrom(\n\n        address from,\n\n        address to,\n\n        uint256 value\n\n    )\n\n    public\n\n    returns (bool)\n\n    {\n\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n\n        _transfer(from, to, value);\n\n        return true;\n",
          "message": "ERC20.transferFrom (ERC20BurnableMock.sol#204-215) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": 91,
          "vulnerability_code": "    function transferFrom(address from, address to, uint256 value)\n",
          "message": "IERC20.transferFrom (ERC20BurnableMock.sol#90-91) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 226,
          "vulnerability_to_line": 239,
          "vulnerability_code": "    function increaseAllowance(\n\n        address spender,\n\n        uint256 addedValue\n\n    )\n\n    public\n\n    returns (bool)\n\n    {\n\n        require(spender != address(0));\n\n\n\n        _allowed[msg.sender][spender] = (\n\n        _allowed[msg.sender][spender].add(addedValue));\n\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n        return true;\n",
          "message": "ERC20.increaseAllowance (ERC20BurnableMock.sol#226-239) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 250,
          "vulnerability_to_line": 263,
          "vulnerability_code": "    function decreaseAllowance(\n\n        address spender,\n\n        uint256 subtractedValue\n\n    )\n\n    public\n\n    returns (bool)\n\n    {\n\n        require(spender != address(0));\n\n\n\n        _allowed[msg.sender][spender] = (\n\n        _allowed[msg.sender][spender].sub(subtractedValue));\n\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n        return true;\n",
          "message": "ERC20.decreaseAllowance (ERC20BurnableMock.sol#250-263) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 330,
          "vulnerability_to_line": 332,
          "vulnerability_code": "    function burn(uint256 value) public onlyManager {\n\n        _burn(msg.sender, value);\n",
          "message": "ERC20Burnable.burn (ERC20BurnableMock.sol#330-332) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 339,
          "vulnerability_to_line": 341,
          "vulnerability_code": "    function burnLogic(address from, uint256 value) public onlyManager {\n\n        _burn(from, value);\n",
          "message": "ERC20Burnable.burnLogic (ERC20BurnableMock.sol#339-341) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 348,
          "vulnerability_to_line": 350,
          "vulnerability_code": "    function burnFrom(address from, uint256 value) public onlyManager {\n\n        _burnFrom(from, value);\n",
          "message": "ERC20Burnable.burnFrom (ERC20BurnableMock.sol#348-350) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 365,
          "vulnerability_to_line": 375,
          "vulnerability_code": "    function mint(\n\n        address to,\n\n        uint256 value\n\n    )\n\n    public\n\n    onlyManager\n\n    returns (bool)\n\n    {\n\n        _mint(to, value);\n\n        return true;\n",
          "message": "ERC20Mintable.mint (ERC20BurnableMock.sol#365-375) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 398,
          "vulnerability_to_line": 400,
          "vulnerability_code": "    function name() public view returns(string memory) {\n\n        return _name;\n",
          "message": "ERC20Detailed.name (ERC20BurnableMock.sol#398-400) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 405,
          "vulnerability_to_line": 407,
          "vulnerability_code": "    function symbol() public view returns(string memory) {\n\n        return _symbol;\n",
          "message": "ERC20Detailed.symbol (ERC20BurnableMock.sol#405-407) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 412,
          "vulnerability_to_line": 414,
          "vulnerability_code": "    function decimals() public view returns(uint8) {\n\n        return _decimals;\n",
          "message": "ERC20Detailed.decimals (ERC20BurnableMock.sol#412-414) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 271,
          "vulnerability_to_line": 277,
          "vulnerability_code": "    function _transfer(address from, address to, uint256 value) internal {\n\n        require(to != address(0));\n\n\n\n        _balances[from] = _balances[from].sub(value);\n\n        _balances[to] = _balances[to].add(value);\n\n        emit Transfer(from, to, value);\n",
          "message": "Function 'ERC20._transfer' (ERC20BurnableMock.sol#271-277) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 286,
          "vulnerability_to_line": 292,
          "vulnerability_code": "    function _mint(address account, uint256 value) internal {\n\n        require(account != address(0));\n\n\n\n        _totalSupply = _totalSupply.add(value);\n\n        _balances[account] = _balances[account].add(value);\n\n        emit Transfer(address(0), account, value);\n",
          "message": "Function 'ERC20._mint' (ERC20BurnableMock.sol#286-292) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 300,
          "vulnerability_to_line": 306,
          "vulnerability_code": "    function _burn(address account, uint256 value) internal {\n\n        require(account != address(0));\n\n\n\n        _totalSupply = _totalSupply.sub(value);\n\n        _balances[account] = _balances[account].sub(value);\n\n        emit Transfer(account, address(0), value);\n",
          "message": "Function 'ERC20._burn' (ERC20BurnableMock.sol#300-306) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 315,
          "vulnerability_to_line": 321,
          "vulnerability_code": "    function _burnFrom(address account, uint256 value) internal {\n\n        // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n\n        // this function needs to emit an event with the updated approval.\n\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n\n            value);\n\n        _burn(account, value);\n",
          "message": "Function 'ERC20._burnFrom' (ERC20BurnableMock.sol#315-321) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 427,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _settings) public ERC20Detailed(\"TimviToken\", \"TMV\", 18) {\n",
          "message": "Parameter '_settings' of TimviToken. (ERC20BurnableMock.sol#427) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address spender, uint256 value) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 132,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => uint256) private _balances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => mapping (address => uint256)) private _allowed;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _totalSupply;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 385,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private _name;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 386,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private _symbol;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 387,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 private _decimals;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 130,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 399,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return _name;\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 399,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return _name;\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 399,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return _name;\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}