{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor () internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "        settingsManager = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "        feeManager = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_4"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": 92,
          "vulnerability_code": "    function setContractManager(address account) public onlySettingsManager {\n\n        _setContract(account);\n",
          "message": "ManagerRole.setContractManager (ManagerRole.sol#90-92) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": 97,
          "vulnerability_code": "    function changeFeeManager(address account) public onlyFeeManager {\n\n        require(account != address(0));\n\n        feeManager = account;\n",
          "message": "ManagerRole.changeFeeManager (ManagerRole.sol#94-97) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": 101,
          "vulnerability_code": "    function renounceSettingsManager() public onlySettingsManager {\n\n        settingsManager = address(0);\n",
          "message": "ManagerRole.renounceSettingsManager (ManagerRole.sol#99-101) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": 107,
          "vulnerability_code": "    function _setContract(address account) internal {\n\n        tBoxManager = account;\n\n        emit ContractManagerAdded(account);\n",
          "message": "Function 'ManagerRole._setContract' (ManagerRole.sol#104-107) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 100,
          "vulnerability_to_line": null,
          "vulnerability_code": "        settingsManager = address(0);\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}