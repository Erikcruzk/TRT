{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor () internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "        settingsManager = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "        feeManager = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 137,
          "vulnerability_to_line": null,
          "vulnerability_code": "        minDeposit = 50 finney;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": null,
          "vulnerability_code": "        sysFee = 3000; // 3%\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 139,
          "vulnerability_to_line": null,
          "vulnerability_code": "        userFee = 3000; // 3%\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 140,
          "vulnerability_to_line": null,
          "vulnerability_code": "        globalSafetyBag = 34783; // 34,783%\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": null,
          "vulnerability_code": "        totalFee = 6000; //6%\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": null,
          "vulnerability_code": "        gasPriceLimit = 0.02 szabo; // 20 GWei\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 144,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit MinDepositUpdated(minDeposit);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 145,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit SysFeeUpdated(sysFee);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 153,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_value > 0 && _value < 10 ether, \"Value out of range\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 159,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_value <= totalFee / 2, \"Value out of range\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 167,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_totalFee > 1000 && _totalFee <= 6000, \"Value out of range\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 168,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_sysFee <= _totalFee / 2, \"Value out of range\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 178,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_addr != address(0), \"Zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_limit > 0.005 szabo, \"Gas price limit must be greater than 5 GWei\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 189,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_bag <= 100000, \"Value out of range\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 195,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_addr != address(0), \"Zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 153,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_value > 0 && _value < 10 ether, \"Value out of range\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 167,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_totalFee > 1000 && _totalFee <= 6000, \"Value out of range\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_limit > 0.005 szabo, \"Gas price limit must be greater than 5 GWei\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_13"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": 92,
          "vulnerability_code": "    function setContractManager(address account) public onlySettingsManager {\n\n        _setContract(account);\n",
          "message": "ManagerRole.setContractManager (TimviSettings.sol#90-92) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": 97,
          "vulnerability_code": "    function changeFeeManager(address account) public onlyFeeManager {\n\n        require(account != address(0));\n\n        feeManager = account;\n",
          "message": "ManagerRole.changeFeeManager (TimviSettings.sol#94-97) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": 101,
          "vulnerability_code": "    function renounceSettingsManager() public onlySettingsManager {\n\n        settingsManager = address(0);\n",
          "message": "ManagerRole.renounceSettingsManager (TimviSettings.sol#99-101) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": 213,
          "vulnerability_code": "    function globalTargetCollateralization() public view returns(uint256) {\n\n        return ratio() + globalSafetyBag;\n",
          "message": "TimviSettings.globalTargetCollateralization (TimviSettings.sol#211-213) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": 107,
          "vulnerability_code": "    function _setContract(address account) internal {\n\n        tBoxManager = account;\n\n        emit ContractManagerAdded(account);\n",
          "message": "Function 'ManagerRole._setContract' (TimviSettings.sol#104-107) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 152,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMinDepo(uint256 _value) external onlyFeeManager {\n",
          "message": "Parameter '_value' of TimviSettings.setMinDepo (TimviSettings.sol#152) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setSysCom(uint256 _value) external onlyFeeManager {\n",
          "message": "Parameter '_value' of TimviSettings.setSysCom (TimviSettings.sol#158) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 166,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setFeeTotal(uint256 _totalFee, uint256 _sysFee) external onlyFeeManager {\n",
          "message": "Parameter '_totalFee' of TimviSettings.setFeeTotal (TimviSettings.sol#166) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 166,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setFeeTotal(uint256 _totalFee, uint256 _sysFee) external onlyFeeManager {\n",
          "message": "Parameter '_sysFee' of TimviSettings.setFeeTotal (TimviSettings.sol#166) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 177,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setOracleAddress(address _addr) external onlyFeeManager {\n",
          "message": "Parameter '_addr' of TimviSettings.setOracleAddress (TimviSettings.sol#177) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 182,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setGasPriceLimit(uint256 _limit) external onlyFeeManager {\n",
          "message": "Parameter '_limit' of TimviSettings.setGasPriceLimit (TimviSettings.sol#182) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 188,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setSafetyBag(uint256 _bag) external onlyFeeManager {\n",
          "message": "Parameter '_bag' of TimviSettings.setSafetyBag (TimviSettings.sol#188) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTmvAddress(address _addr) external onlySettingsManager {\n",
          "message": "Parameter '_addr' of TimviSettings.setTmvAddress (TimviSettings.sol#194) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 100,
          "vulnerability_to_line": null,
          "vulnerability_code": "        settingsManager = address(0);\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return 100000 + totalFee;\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return 100000 + totalFee;\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 204,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return minStability() * 150 / 23 / 100 + minStability();\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 208,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return minStability() * 50 / 23 / 100 + maxStability();\n",
          "message": null
        }
      ]
    }
  }
}