{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 326,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < _ids.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(ISettings _settings) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 229,
          "vulnerability_to_line": null,
          "vulnerability_code": "        admin = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 230,
          "vulnerability_to_line": null,
          "vulnerability_code": "        timviWallet = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 231,
          "vulnerability_to_line": null,
          "vulnerability_code": "        settings = ISettings(_settings);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 233,
          "vulnerability_to_line": null,
          "vulnerability_code": "        feePercentTMV = 500; // 0.5%\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 234,
          "vulnerability_to_line": null,
          "vulnerability_code": "        feePercentETH = 500; // 0.5%\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 235,
          "vulnerability_to_line": null,
          "vulnerability_code": "        minOrder = 10 ** 18; // 1 TMV by default\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 236,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 237,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit GateTmvFeeUpdated(feePercentTMV);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 329,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(orders[id].owner != address(0), \"Order doesn't exist\");\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 331,
          "vulnerability_to_line": null,
          "vulnerability_code": "            uint256 tmv = orders[id].amount;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 336,
          "vulnerability_to_line": null,
          "vulnerability_code": "            address owner = orders[id].owner;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 338,
          "vulnerability_to_line": null,
          "vulnerability_code": "                delete orders[id];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 339,
          "vulnerability_to_line": null,
          "vulnerability_code": "                IToken(settings.tmvAddress()).transfer(timviWallet, tmv);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 339,
          "vulnerability_to_line": null,
          "vulnerability_code": "                IToken(settings.tmvAddress()).transfer(timviWallet, tmv);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 326,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < _ids.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, 'mul');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b > 0, 'div');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b <= a, 'sub');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, 'add');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 214,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(admin == msg.sender, \"You have no access\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(tx.gasprice <= settings.gasPriceLimit(), \"Gas price is greater than allowed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 250,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_beneficiary != address(0), \"Zero address, be careful\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 251,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= _amount, \"Insufficient funds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 258,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_value <= 10000, \"Too much\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 265,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_value <= 10000, \"Too much\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 273,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_value <= 100 ether, \"Too much\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 281,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_wallet != address(0), \"Zero address, be careful\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 289,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_newAdmin != address(0), \"Zero address, be careful\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_amount >= minOrder, \"Too small amount\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 296,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(IToken(settings.tmvAddress()).allowance(msg.sender, address(this)) >= _amount, \"Gate is not approved to transfer enough tokens\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 311,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(orders[_id].owner == msg.sender, \"Order isn't yours\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 329,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(orders[id].owner != address(0), \"Order doesn't exist\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 334,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(address(this).balance >= eth, \"Not enough funds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 347,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(orders[_id].owner != address(0), \"Order doesn't exist\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 356,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.value >= eth, \"Not enough funds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 326,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < _ids.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(tx.gasprice <= settings.gasPriceLimit(), \"Gas price is greater than allowed\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 296,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(IToken(settings.tmvAddress()).allowance(msg.sender, address(this)) >= _amount, \"Gate is not approved to transfer enough tokens\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_25"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": 343,
          "vulnerability_code": "    function multiFill(uint256[] _ids) external onlyAdmin() payable {\n\n\n\n        if (msg.value > 0) {\n\n            emit Funded(msg.value);\n\n        }\n\n\n\n        for (uint256 i = 0; i < _ids.length; i++) {\n\n            uint256 id = _ids[i];\n\n\n\n            require(orders[id].owner != address(0), \"Order doesn't exist\");\n\n\n\n            uint256 tmv = orders[id].amount;\n\n            uint256 eth = tmv2eth(tmv);\n\n\n\n            require(address(this).balance >= eth, \"Not enough funds\");\n\n\n\n            address owner = orders[id].owner;\n\n            if (owner.send(eth)) {\n\n                delete orders[id];\n\n                IToken(settings.tmvAddress()).transfer(timviWallet, tmv);\n\n                emit OrderFilledPool(id, owner, tmv, eth);\n\n            }\n\n        }\n",
          "message": "Reentrancy in Gate.multiFill (Gate.sol#320-343):\n\tExternal calls:\n\t- eth = tmv2eth(tmv) (Gate.sol#332)\n\tExternal calls sending eth:\n\t- owner.send(eth) (Gate.sol#337-341)\n\tState variables written after the call(s):\n\t- orders (Gate.sol#338)\n"
        },
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": 106,
          "vulnerability_code": "interface IToken {\n\n    function burnLogic(address from, uint256 value) external;\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function mint(address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 tokenId) external;\n",
          "message": "IToken (Gate.sol#98-106) has incorrect ERC20 function interface(s):\n\t-transferFrom (Gate.sol#105)\n"
        },
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 126,
          "vulnerability_to_line": 143,
          "vulnerability_code": "interface ITBoxManager {\n\n    function create(uint256 withdraw) external payable returns (uint256);\n\n    function precision() external view returns (uint256);\n\n    function rate() external view returns (uint256);\n\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    function close(uint256 id) external;\n\n    function withdrawPercent(uint256 _collateral) external view returns(uint256);\n\n    function boxes(uint256 id) external view returns(uint256, uint256);\n\n    function withdrawEth(uint256 _id, uint256 _amount) external;\n\n    function withdrawTmv(uint256 _id, uint256 _amount) external;\n\n    function withdrawableEth(uint256 id) external view returns(uint256);\n\n    function withdrawableTmv(uint256 collateral) external view returns(uint256);\n\n    function maxCapAmount(uint256 _id) external view returns (uint256);\n\n    function collateralPercent(uint256 _id) external view returns (uint256);\n\n    function capitalize(uint256 _id, uint256 _tmv) external;\n\n    function boxWithdrawableTmv(uint256 _id) external view returns(uint256);\n\n    function addEth(uint256 _id) external payable;\n",
          "message": "ITBoxManager (Gate.sol#126-143) has incorrect ERC20 function interface(s):\n\t-transferFrom (Gate.sol#130)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 346,
          "vulnerability_to_line": 379,
          "vulnerability_code": "    function fill(uint256 _id) external payable validTx {\n\n        require(orders[_id].owner != address(0), \"Order doesn't exist\");\n\n\n\n        // Retrieve values from storage\n\n        uint256 tmv = orders[_id].amount;\n\n        address owner = orders[_id].owner;\n\n\n\n        // Calculate the demand amount of Ether\n\n        uint256 eth = tmv.mul(precision()).div(rate());\n\n\n\n        require(msg.value >= eth, \"Not enough funds\");\n\n\n\n        emit Funded(eth);\n\n\n\n        // Calculate execution values\n\n        uint256 tmvFee = tmv.mul(feePercentTMV).div(precision());\n\n        uint256 ethFee = eth.mul(feePercentETH).div(precision());\n\n\n\n        uint256 tmvExecution = tmv.sub(tmvFee);\n\n        uint256 ethExecution = eth.sub(ethFee);\n\n\n\n        // Remove record about an order\n\n        delete orders[_id];\n\n\n\n        // Transfer order' funds\n\n        owner.transfer(ethExecution);\n\n        IToken(settings.tmvAddress()).transfer(msg.sender, tmvExecution);\n\n        IToken(settings.tmvAddress()).transfer(timviWallet, tmvFee);\n\n\n\n        // Return Ether rest if exist\n\n        msg.sender.transfer(msg.value.sub(eth));\n\n\n\n        emit OrderFilled(_id, owner, tmv, tmvExecution, eth, ethExecution);\n",
          "message": "Reentrancy in Gate.fill (Gate.sol#346-379):\n\tExternal calls:\n\t- eth = tmv.mul(precision()).div(rate()) (Gate.sol#354)\n\t- tmvFee = tmv.mul(feePercentTMV).div(precision()) (Gate.sol#361)\n\t- ethFee = eth.mul(feePercentETH).div(precision()) (Gate.sol#362)\n\tState variables written after the call(s):\n\t- orders (Gate.sol#368)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 310,
          "vulnerability_to_line": 317,
          "vulnerability_code": "    function cancel(uint256 _id) external {\n\n        require(orders[_id].owner == msg.sender, \"Order isn't yours\");\n\n\n\n        uint256 tmv = orders[_id].amount;\n\n        delete orders[_id];\n\n        IToken(settings.tmvAddress()).transfer(msg.sender, tmv);\n\n        emit OrderCancelled(_id, msg.sender, tmv);\n",
          "message": "Gate.cancel (Gate.sol#310-317) does not use the value returned by external calls:\n\t-IToken(settings.tmvAddress()).transfer(msg.sender,tmv) (Gate.sol#315)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": 343,
          "vulnerability_code": "    function multiFill(uint256[] _ids) external onlyAdmin() payable {\n\n\n\n        if (msg.value > 0) {\n\n            emit Funded(msg.value);\n\n        }\n\n\n\n        for (uint256 i = 0; i < _ids.length; i++) {\n\n            uint256 id = _ids[i];\n\n\n\n            require(orders[id].owner != address(0), \"Order doesn't exist\");\n\n\n\n            uint256 tmv = orders[id].amount;\n\n            uint256 eth = tmv2eth(tmv);\n\n\n\n            require(address(this).balance >= eth, \"Not enough funds\");\n\n\n\n            address owner = orders[id].owner;\n\n            if (owner.send(eth)) {\n\n                delete orders[id];\n\n                IToken(settings.tmvAddress()).transfer(timviWallet, tmv);\n\n                emit OrderFilledPool(id, owner, tmv, eth);\n\n            }\n\n        }\n",
          "message": "Gate.multiFill (Gate.sol#320-343) does not use the value returned by external calls:\n\t-IToken(settings.tmvAddress()).transfer(timviWallet,tmv) (Gate.sol#339)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 346,
          "vulnerability_to_line": 379,
          "vulnerability_code": "    function fill(uint256 _id) external payable validTx {\n\n        require(orders[_id].owner != address(0), \"Order doesn't exist\");\n\n\n\n        // Retrieve values from storage\n\n        uint256 tmv = orders[_id].amount;\n\n        address owner = orders[_id].owner;\n\n\n\n        // Calculate the demand amount of Ether\n\n        uint256 eth = tmv.mul(precision()).div(rate());\n\n\n\n        require(msg.value >= eth, \"Not enough funds\");\n\n\n\n        emit Funded(eth);\n\n\n\n        // Calculate execution values\n\n        uint256 tmvFee = tmv.mul(feePercentTMV).div(precision());\n\n        uint256 ethFee = eth.mul(feePercentETH).div(precision());\n\n\n\n        uint256 tmvExecution = tmv.sub(tmvFee);\n\n        uint256 ethExecution = eth.sub(ethFee);\n\n\n\n        // Remove record about an order\n\n        delete orders[_id];\n\n\n\n        // Transfer order' funds\n\n        owner.transfer(ethExecution);\n\n        IToken(settings.tmvAddress()).transfer(msg.sender, tmvExecution);\n\n        IToken(settings.tmvAddress()).transfer(timviWallet, tmvFee);\n\n\n\n        // Return Ether rest if exist\n\n        msg.sender.transfer(msg.value.sub(eth));\n\n\n\n        emit OrderFilled(_id, owner, tmv, tmvExecution, eth, ethExecution);\n",
          "message": "Gate.fill (Gate.sol#346-379) does not use the value returned by external calls:\n\t-IToken(settings.tmvAddress()).transfer(msg.sender,tmvExecution) (Gate.sol#372)\n\t-IToken(settings.tmvAddress()).transfer(timviWallet,tmvFee) (Gate.sol#373)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 337,
          "vulnerability_to_line": 341,
          "vulnerability_code": "            if (owner.send(eth)) {\n\n                delete orders[id];\n\n                IToken(settings.tmvAddress()).transfer(timviWallet, tmv);\n\n                emit OrderFilledPool(id, owner, tmv, eth);\n",
          "message": "Gate.multiFill has external calls inside a loop:\n\t- owner.send(eth) (Gate.sol#337-341)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 339,
          "vulnerability_to_line": null,
          "vulnerability_code": "                IToken(settings.tmvAddress()).transfer(timviWallet, tmv);\n",
          "message": "Gate.multiFill has external calls inside a loop:\n\t- IToken(settings.tmvAddress()).transfer(timviWallet,tmv) (Gate.sol#339)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": 307,
          "vulnerability_code": "    function convert(uint256 _amount) external validTx {\n\n        require(_amount >= minOrder, \"Too small amount\");\n\n        require(IToken(settings.tmvAddress()).allowance(msg.sender, address(this)) >= _amount, \"Gate is not approved to transfer enough tokens\");\n\n        uint256 eth = tmv2eth(_amount);\n\n        if (address(this).balance >= eth) {\n\n            IToken(settings.tmvAddress()).transferFrom(msg.sender, timviWallet, _amount);\n\n            msg.sender.transfer(eth);\n\n            emit Converted(msg.sender, _amount, eth);\n\n        } else {\n\n            IToken(settings.tmvAddress()).transferFrom(msg.sender, address(this), _amount);\n\n            uint256 id = orders.push(Order(msg.sender, _amount)).sub(1);\n\n            emit OrderCreated(id, msg.sender, _amount);\n\n        }\n",
          "message": "Reentrancy in Gate.convert (Gate.sol#294-307):\n\tExternal calls:\n\t- require(bool,string)(IToken(settings.tmvAddress()).allowance(msg.sender,address(this)) >= _amount,Gate is not approved to transfer enough tokens) (Gate.sol#296)\n\t- eth = tmv2eth(_amount) (Gate.sol#297)\n\t- IToken(settings.tmvAddress()).transferFrom(msg.sender,address(this),_amount) (Gate.sol#303)\n\tState variables written after the call(s):\n\t- orders (Gate.sol#304)\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(ISettings _settings) public {\n",
          "message": "Parameter '_settings' of Gate. (Gate.sol#228) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 249,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(address _beneficiary, uint256 _amount) external onlyAdmin {\n",
          "message": "Parameter '_beneficiary' of Gate.withdraw (Gate.sol#249) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 249,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(address _beneficiary, uint256 _amount) external onlyAdmin {\n",
          "message": "Parameter '_amount' of Gate.withdraw (Gate.sol#249) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 257,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTmvFee(uint256 _value) external onlyAdmin {\n",
          "message": "Parameter '_value' of Gate.setTmvFee (Gate.sol#257) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 264,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setEthFee(uint256 _value) external onlyAdmin {\n",
          "message": "Parameter '_value' of Gate.setEthFee (Gate.sol#264) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 271,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMinOrder(uint256 _value) external onlyAdmin {\n",
          "message": "Parameter '_value' of Gate.setMinOrder (Gate.sol#271) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 280,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTimviWallet(address _wallet) external onlyAdmin {\n",
          "message": "Parameter '_wallet' of Gate.setTimviWallet (Gate.sol#280) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 288,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function changeAdmin(address _newAdmin) external onlyAdmin {\n",
          "message": "Parameter '_newAdmin' of Gate.changeAdmin (Gate.sol#288) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function convert(uint256 _amount) external validTx {\n",
          "message": "Parameter '_amount' of Gate.convert (Gate.sol#294) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 310,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function cancel(uint256 _id) external {\n",
          "message": "Parameter '_id' of Gate.cancel (Gate.sol#310) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function multiFill(uint256[] _ids) external onlyAdmin() payable {\n",
          "message": "Parameter '_ids' of Gate.multiFill (Gate.sol#320) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 346,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function fill(uint256 _id) external payable validTx {\n",
          "message": "Parameter '_id' of Gate.fill (Gate.sol#346) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 392,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function tmv2eth(uint256 _amount) public view returns(uint256) {\n",
          "message": "Parameter '_amount' of Gate.tmv2eth (Gate.sol#392) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 398,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function chargeFee(uint256 _amount, uint256 _percent) public view returns(uint256) {\n",
          "message": "Parameter '_amount' of Gate.chargeFee (Gate.sol#398) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 398,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function chargeFee(uint256 _amount, uint256 _percent) public view returns(uint256) {\n",
          "message": "Parameter '_percent' of Gate.chargeFee (Gate.sol#398) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 326,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < _ids.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 326,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < _ids.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 176,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Order[] public orders;\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 383,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return IOracle(settings.oracleAddress()).ethUsdPrice();\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 383,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return IOracle(settings.oracleAddress()).ethUsdPrice();\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 383,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return IOracle(settings.oracleAddress()).ethUsdPrice();\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 383,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return IOracle(settings.oracleAddress()).ethUsdPrice();\n",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 346,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function fill(uint256 _id) external payable validTx {\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 310,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function cancel(uint256 _id) external {\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function multiFill(uint256[] _ids) external onlyAdmin() payable {\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 176,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Order[] public orders;\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 388,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return ITBoxManager(settings.tBoxManager()).precision();\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 388,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return ITBoxManager(settings.tBoxManager()).precision();\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 388,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return ITBoxManager(settings.tBoxManager()).precision();\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 388,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return ITBoxManager(settings.tBoxManager()).precision();\n",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 388,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return ITBoxManager(settings.tBoxManager()).precision();\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 388,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return ITBoxManager(settings.tBoxManager()).precision();\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 388,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return ITBoxManager(settings.tBoxManager()).precision();\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 388,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return ITBoxManager(settings.tBoxManager()).precision();\n",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 388,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return ITBoxManager(settings.tBoxManager()).precision();\n",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 388,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return ITBoxManager(settings.tBoxManager()).precision();\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 394,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return chargeFee(equivalent, feePercentETH);\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}