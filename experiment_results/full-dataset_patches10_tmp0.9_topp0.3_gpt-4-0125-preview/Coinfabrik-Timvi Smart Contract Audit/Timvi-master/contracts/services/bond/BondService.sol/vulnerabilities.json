{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 293,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(ISettings _settings) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": "        admin = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": null,
          "vulnerability_code": "        settings = _settings;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 296,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 297,
          "vulnerability_to_line": null,
          "vulnerability_code": "        issuerFee = 500; // 0.5%\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 298,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit BondIssuerFeeUpdated(issuerFee);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 299,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 300,
          "vulnerability_to_line": null,
          "vulnerability_code": "        holderFee = 10000; // 10%\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 301,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit BondHolderFeeUpdated(holderFee);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 302,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, 'mul');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b > 0, 'div');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b <= a, 'sub');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, 'add');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 235,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(tx.gasprice <= settings.gasPriceLimit(), \"Gas price is greater than allowed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 241,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(admin == msg.sender, \"You have no access\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 248,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bonds[_id].issuer == msg.sender, \"You are not the issuer\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 255,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bonds[_id].holder == msg.sender, \"You are not the holder\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 264,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_a || _b, \"You are not the single owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 271,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bonds[_id].issuer != address(0) && bonds[_id].holder == address(0), \"The bond isn't an emit request\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bonds[_id].holder != address(0) && bonds[_id].issuer == address(0), \"The bond isn't a buy request\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 285,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bonds[_id].issuer != address(0) && bonds[_id].holder != address(0), \"Bond isn't matched\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 313,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.value >= minEther, \"Too small funds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 314,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_percent >= ITBoxManager(settings.tBoxManager()).withdrawPercent(msg.value), \"Collateralization is not enough\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 315,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_expiration >= 1 days && _expiration <= 365 days, \"Expiration out of range\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 316,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_yearFee <= 25000, \"Fee out of range\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 326,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.value >= minEther, \"Too small funds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 327,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_expiration >= 1 days && _expiration <= 365 days, \"Expiration out of range\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 328,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_yearFee <= 25000, \"Fee out of range\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 405,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bonds[_id].holder == msg.sender && bonds[_id].issuer == address(0), \"You are not the holder or bond is matched\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 415,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_deposit >= minEther, \"Too small funds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 420,
          "vulnerability_to_line": null,
          "vulnerability_code": "                require(msg.value == _deposit.sub(_oldDeposit), \"Incorrect value\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 428,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_percent >= ITBoxManager(settings.tBoxManager()).withdrawPercent(bonds[_id].deposit), \"Collateralization is not enough\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 436,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_expiration >= 1 days && _expiration <= 365 days, \"Expiration out of range\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 444,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_yearFee <= 25000, \"Fee out of range\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 456,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.value == _eth, \"Incorrect ETH value\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 508,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(now < bond.expiration, \"Bond expired\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 549,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(now > bonds[_id].expiration, \"Bond hasn't expired\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 614,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_beneficiary != address(0), \"Zero address, be careful\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 615,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(systemETH > 0, \"There is no available ETH\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 626,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_beneficiary != address(0), \"Zero address, be careful\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 629,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_amount > 0, \"There are no tokens\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 636,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_value <= 10000, \"Too much\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 644,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_value <= 50000, \"Too much\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 652,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_value <= 100 ether, \"Too much\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 660,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_newAdmin != address(0), \"Zero address, be careful\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 676,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_to != address(0), \"Zero address, be careful\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 683,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_to != address(0), \"Zero address, be careful\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 271,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bonds[_id].issuer != address(0) && bonds[_id].holder == address(0), \"The bond isn't an emit request\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bonds[_id].holder != address(0) && bonds[_id].issuer == address(0), \"The bond isn't a buy request\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 285,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bonds[_id].issuer != address(0) && bonds[_id].holder != address(0), \"Bond isn't matched\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 315,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_expiration >= 1 days && _expiration <= 365 days, \"Expiration out of range\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 327,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_expiration >= 1 days && _expiration <= 365 days, \"Expiration out of range\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 405,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bonds[_id].holder == msg.sender && bonds[_id].issuer == address(0), \"You are not the holder or bond is matched\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 436,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_expiration >= 1 days && _expiration <= 365 days, \"Expiration out of range\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 414,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (_deposit != 0 && _oldDeposit != _deposit) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 415,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_deposit >= minEther, \"Too small funds\");\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 416,
          "vulnerability_to_line": null,
          "vulnerability_code": "            bonds[_id].deposit = _deposit;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 417,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (_oldDeposit > _deposit) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 418,
          "vulnerability_to_line": null,
          "vulnerability_code": "                msg.sender.transfer(_oldDeposit.sub(_deposit));\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 419,
          "vulnerability_to_line": null,
          "vulnerability_code": "            } else {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 420,
          "vulnerability_to_line": null,
          "vulnerability_code": "                require(msg.value == _deposit.sub(_oldDeposit), \"Incorrect value\");\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 421,
          "vulnerability_to_line": null,
          "vulnerability_code": "            }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 422,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 427,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (_percent != 0 && _oldPercent != _percent) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 428,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_percent >= ITBoxManager(settings.tBoxManager()).withdrawPercent(bonds[_id].deposit), \"Collateralization is not enough\");\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 429,
          "vulnerability_to_line": null,
          "vulnerability_code": "            bonds[_id].percent = _percent;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 430,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 235,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(tx.gasprice <= settings.gasPriceLimit(), \"Gas price is greater than allowed\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 405,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bonds[_id].holder == msg.sender && bonds[_id].issuer == address(0), \"You are not the holder or bond is matched\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_66"
      ],
      "vulnerability_findings": [
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 369,
          "vulnerability_to_line": 374,
          "vulnerability_code": "    function close(uint256 _id) external singleOwner(_id) {\n\n        uint256 _eth = bonds[_id].deposit;\n\n        delete bonds[_id];\n\n        msg.sender.transfer(_eth);\n\n        emit BondClosed(_id, msg.sender);\n",
          "message": "BondService.close (BondService.sol#369-374) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(_eth) (BondService.sol#372)\n"
        },
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 412,
          "vulnerability_to_line": 423,
          "vulnerability_code": "    function changeDeposit(uint256 _id, uint256 _deposit) internal {\n\n        uint256 _oldDeposit = bonds[_id].deposit;\n\n        if (_deposit != 0 && _oldDeposit != _deposit) {\n\n            require(_deposit >= minEther, \"Too small funds\");\n\n            bonds[_id].deposit = _deposit;\n\n            if (_oldDeposit > _deposit) {\n\n                msg.sender.transfer(_oldDeposit.sub(_deposit));\n\n            } else {\n\n                require(msg.value == _deposit.sub(_oldDeposit), \"Incorrect value\");\n\n            }\n\n        }\n",
          "message": "BondService.changeDeposit (BondService.sol#412-423) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(_oldDeposit.sub(_deposit)) (BondService.sol#418)\n"
        },
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 451,
          "vulnerability_to_line": 474,
          "vulnerability_code": "    function takeIssueRequest(uint256 _id) external payable issueRequest(_id) validTx {\n\n\n\n        address _issuer = bonds[_id].issuer;\n\n        uint256 _eth = bonds[_id].deposit.mul(divider).div(bonds[_id].percent);\n\n\n\n        require(msg.value == _eth, \"Incorrect ETH value\");\n\n\n\n        uint256 _sysEth = _eth.mul(issuerFee).div(divider);\n\n        systemETH = systemETH.add(_sysEth);\n\n\n\n        uint256 _tmv = _eth.mul(rate()).div(precision());\n\n        uint256 _box = ITBoxManager(settings.tBoxManager()).create.value(bonds[_id].deposit)(_tmv);\n\n\n\n        bonds[_id].holder = msg.sender;\n\n        bonds[_id].tmv = _tmv;\n\n        bonds[_id].expiration = bonds[_id].expiration.add(now);\n\n        bonds[_id].sysFee = holderFee;\n\n        bonds[_id].tBoxId = _box;\n\n        bonds[_id].createdAt = now;\n\n\n\n        _issuer.transfer(_eth.sub(_sysEth));\n\n        IToken(settings.tmvAddress()).transfer(msg.sender, _tmv);\n\n        emit BondMatched(_id, msg.sender, _box, _tmv, holderFee, _issuer);\n",
          "message": "BondService.takeIssueRequest (BondService.sol#451-474) sends eth to arbitrary user\n\tDangerous calls:\n\t- _box = ITBoxManager(settings.tBoxManager()).create.value(bonds[_id].deposit)(_tmv) (BondService.sol#462)\n"
        },
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 478,
          "vulnerability_to_line": 498,
          "vulnerability_code": "    function takeBuyRequest(uint256 _id) external payable buyRequest(_id) validTx {\n\n\n\n        address _holder = bonds[_id].holder;\n\n\n\n        uint256 _sysEth = bonds[_id].deposit.mul(issuerFee).div(divider);\n\n        systemETH = systemETH.add(_sysEth);\n\n\n\n        uint256 _tmv = bonds[_id].deposit.mul(rate()).div(precision());\n\n        uint256 _box = ITBoxManager(settings.tBoxManager()).create.value(msg.value)(_tmv);\n\n\n\n        bonds[_id].issuer = msg.sender;\n\n        bonds[_id].tmv = _tmv;\n\n        bonds[_id].expiration = bonds[_id].expiration.add(now);\n\n        bonds[_id].sysFee = holderFee;\n\n        bonds[_id].tBoxId = _box;\n\n        bonds[_id].createdAt = now;\n\n\n\n        msg.sender.transfer(bonds[_id].deposit.sub(_sysEth));\n\n        IToken(settings.tmvAddress()).transfer(_holder, _tmv);\n\n        emit BondMatched(_id, msg.sender, _box, _tmv, holderFee, _holder);\n",
          "message": "BondService.takeBuyRequest (BondService.sol#478-498) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(bonds[_id].deposit.sub(_sysEth)) (BondService.sol#495)\n"
        },
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 548,
          "vulnerability_to_line": 600,
          "vulnerability_code": "    function expire(uint256 _id) external matched(_id) validTx {\n\n        require(now > bonds[_id].expiration, \"Bond hasn't expired\");\n\n\n\n        (uint256 _eth, uint256 _tmv) = getBox(bonds[_id].tBoxId);\n\n\n\n        if (_eth == 0) {\n\n            emit BondExpired(_id, bonds[_id].issuer, bonds[_id].holder);\n\n            delete bonds[_id];\n\n            return;\n\n        }\n\n\n\n        uint256 _collateralPercent = ITBoxManager(settings.tBoxManager()).collateralPercent(bonds[_id].tBoxId);\n\n        uint256 _targetCollateralPercent = settings.globalTargetCollateralization();\n\n        if (_collateralPercent > _targetCollateralPercent) {\n\n            uint256 _ethTarget = _tmv.mul(_targetCollateralPercent).div(rate()); // mul and div by precision are omitted\n\n            uint256 _issuerEth = _eth.sub(_ethTarget);\n\n            uint256 _withdrawableEth = ITBoxManager(settings.tBoxManager()).withdrawableEth(\n\n                bonds[_id].tBoxId\n\n            );\n\n            if (_issuerEth > _withdrawableEth) {\n\n                _issuerEth = _withdrawableEth;\n\n            }\n\n            ITBoxManager(settings.tBoxManager()).withdrawEth(\n\n                bonds[_id].tBoxId,\n\n                _issuerEth\n\n            );\n\n            bonds[_id].issuer.transfer(_issuerEth);\n\n        }\n\n\n\n        _eth = ITBoxManager(settings.tBoxManager()).withdrawableEth(\n\n            bonds[_id].tBoxId\n\n        );\n\n\n\n        uint256 _commission = _eth.mul(bonds[_id].sysFee).div(divider);\n\n\n\n        if (_commission > 0) {\n\n            ITBoxManager(settings.tBoxManager()).withdrawEth(\n\n                bonds[_id].tBoxId,\n\n                _commission\n\n            );\n\n            systemETH = systemETH.add(_commission);\n\n        }\n\n\n\n        ITBoxManager(settings.tBoxManager()).transferFrom(\n\n            address(this),\n\n            bonds[_id].holder,\n\n            bonds[_id].tBoxId\n\n        );\n\n\n\n        emit BondExpired(_id, bonds[_id].issuer, bonds[_id].holder);\n\n\n\n        delete bonds[_id];\n",
          "message": "Reentrancy in BondService.expire (BondService.sol#548-600):\n\tExternal calls:\n\t- (_eth,_tmv) = getBox(bonds[_id].tBoxId) (BondService.sol#551)\n\t- _collateralPercent = ITBoxManager(settings.tBoxManager()).collateralPercent(bonds[_id].tBoxId) (BondService.sol#559)\n\t- _targetCollateralPercent = settings.globalTargetCollateralization() (BondService.sol#560)\n\t- _ethTarget = _tmv.mul(_targetCollateralPercent).div(rate()) (BondService.sol#562)\n\t- _withdrawableEth = ITBoxManager(settings.tBoxManager()).withdrawableEth(bonds[_id].tBoxId) (BondService.sol#564-566)\n\t- ITBoxManager(settings.tBoxManager()).withdrawEth(bonds[_id].tBoxId,_issuerEth) (BondService.sol#570-573)\n\t- _eth = ITBoxManager(settings.tBoxManager()).withdrawableEth(bonds[_id].tBoxId) (BondService.sol#577-579)\n\t- ITBoxManager(settings.tBoxManager()).withdrawEth(bonds[_id].tBoxId,_commission) (BondService.sol#584-587)\n\t- ITBoxManager(settings.tBoxManager()).transferFrom(address(this),bonds[_id].holder,bonds[_id].tBoxId) (BondService.sol#591-595)\n\tExternal calls sending eth:\n\t- bonds[_id].issuer.transfer(_issuerEth) (BondService.sol#574)\n\tState variables written after the call(s):\n\t- bonds (BondService.sol#599)\n"
        },
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 382,
          "vulnerability_to_line": 394,
          "vulnerability_code": "    function issuerChange(uint256 _id, uint256 _deposit, uint256 _percent, uint256 _expiration, uint256 _yearFee)\n\n        external\n\n        payable\n\n        singleOwner(_id)\n\n        onlyIssuer(_id)\n\n    {\n\n        changeDeposit(_id, _deposit);\n\n        changePercent(_id, _percent);\n\n        changeExpiration(_id, _expiration);\n\n        changeYearFee(_id, _yearFee);\n\n\n\n        emit BondChanged(_id, _deposit, _percent, _expiration, _yearFee, msg.sender);\n",
          "message": "Reentrancy in BondService.issuerChange (BondService.sol#382-394):\n\tExternal calls:\n\t- changePercent(_id,_percent) (BondService.sol#389)\n\tExternal calls sending eth:\n\t- changeDeposit(_id,_deposit) (BondService.sol#388)\n\tState variables written after the call(s):\n\t- bonds (BondService.sol#390)\n\t- bonds (BondService.sol#391)\n"
        },
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 478,
          "vulnerability_to_line": 498,
          "vulnerability_code": "    function takeBuyRequest(uint256 _id) external payable buyRequest(_id) validTx {\n\n\n\n        address _holder = bonds[_id].holder;\n\n\n\n        uint256 _sysEth = bonds[_id].deposit.mul(issuerFee).div(divider);\n\n        systemETH = systemETH.add(_sysEth);\n\n\n\n        uint256 _tmv = bonds[_id].deposit.mul(rate()).div(precision());\n\n        uint256 _box = ITBoxManager(settings.tBoxManager()).create.value(msg.value)(_tmv);\n\n\n\n        bonds[_id].issuer = msg.sender;\n\n        bonds[_id].tmv = _tmv;\n\n        bonds[_id].expiration = bonds[_id].expiration.add(now);\n\n        bonds[_id].sysFee = holderFee;\n\n        bonds[_id].tBoxId = _box;\n\n        bonds[_id].createdAt = now;\n\n\n\n        msg.sender.transfer(bonds[_id].deposit.sub(_sysEth));\n\n        IToken(settings.tmvAddress()).transfer(_holder, _tmv);\n\n        emit BondMatched(_id, msg.sender, _box, _tmv, holderFee, _holder);\n",
          "message": "Reentrancy in BondService.takeBuyRequest (BondService.sol#478-498):\n\tExternal calls:\n\t- _tmv = bonds[_id].deposit.mul(rate()).div(precision()) (BondService.sol#485)\n\t- _box = ITBoxManager(settings.tBoxManager()).create.value(msg.value)(_tmv) (BondService.sol#486)\n\tExternal calls sending eth:\n\t- _box = ITBoxManager(settings.tBoxManager()).create.value(msg.value)(_tmv) (BondService.sol#486)\n\tState variables written after the call(s):\n\t- bonds (BondService.sol#488)\n\t- bonds (BondService.sol#489)\n\t- bonds (BondService.sol#490)\n\t- bonds (BondService.sol#491)\n\t- bonds (BondService.sol#492)\n\t- bonds (BondService.sol#493)\n"
        },
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 451,
          "vulnerability_to_line": 474,
          "vulnerability_code": "    function takeIssueRequest(uint256 _id) external payable issueRequest(_id) validTx {\n\n\n\n        address _issuer = bonds[_id].issuer;\n\n        uint256 _eth = bonds[_id].deposit.mul(divider).div(bonds[_id].percent);\n\n\n\n        require(msg.value == _eth, \"Incorrect ETH value\");\n\n\n\n        uint256 _sysEth = _eth.mul(issuerFee).div(divider);\n\n        systemETH = systemETH.add(_sysEth);\n\n\n\n        uint256 _tmv = _eth.mul(rate()).div(precision());\n\n        uint256 _box = ITBoxManager(settings.tBoxManager()).create.value(bonds[_id].deposit)(_tmv);\n\n\n\n        bonds[_id].holder = msg.sender;\n\n        bonds[_id].tmv = _tmv;\n\n        bonds[_id].expiration = bonds[_id].expiration.add(now);\n\n        bonds[_id].sysFee = holderFee;\n\n        bonds[_id].tBoxId = _box;\n\n        bonds[_id].createdAt = now;\n\n\n\n        _issuer.transfer(_eth.sub(_sysEth));\n\n        IToken(settings.tmvAddress()).transfer(msg.sender, _tmv);\n\n        emit BondMatched(_id, msg.sender, _box, _tmv, holderFee, _issuer);\n",
          "message": "Reentrancy in BondService.takeIssueRequest (BondService.sol#451-474):\n\tExternal calls:\n\t- _tmv = _eth.mul(rate()).div(precision()) (BondService.sol#461)\n\t- _box = ITBoxManager(settings.tBoxManager()).create.value(bonds[_id].deposit)(_tmv) (BondService.sol#462)\n\tExternal calls sending eth:\n\t- _box = ITBoxManager(settings.tBoxManager()).create.value(bonds[_id].deposit)(_tmv) (BondService.sol#462)\n\tState variables written after the call(s):\n\t- bonds (BondService.sol#464)\n\t- bonds (BondService.sol#465)\n\t- bonds (BondService.sol#466)\n\t- bonds (BondService.sol#467)\n\t- bonds (BondService.sol#468)\n\t- bonds (BondService.sol#469)\n"
        },
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": 84,
          "vulnerability_code": "interface IToken {\n\n    function burnLogic(address from, uint256 value) external;\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function mint(address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 tokenId) external;\n",
          "message": "IToken (BondService.sol#76-84) has incorrect ERC20 function interface(s):\n\t-transferFrom (BondService.sol#83)\n"
        },
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": 132,
          "vulnerability_code": "interface ITBoxManager {\n\n    function create(uint256 withdraw) external payable returns (uint256);\n\n    function precision() external view returns (uint256);\n\n    function rate() external view returns (uint256);\n\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    function close(uint256 id) external;\n\n    function withdrawPercent(uint256 _collateral) external view returns(uint256);\n\n    function boxes(uint256 id) external view returns(uint256, uint256);\n\n    function withdrawEth(uint256 _id, uint256 _amount) external;\n\n    function withdrawTmv(uint256 _id, uint256 _amount) external;\n\n    function withdrawableEth(uint256 id) external view returns(uint256);\n\n    function withdrawableTmv(uint256 collateral) external view returns(uint256);\n\n    function maxCapAmount(uint256 _id) external view returns (uint256);\n\n    function collateralPercent(uint256 _id) external view returns (uint256);\n\n    function capitalize(uint256 _id, uint256 _tmv) external;\n\n    function boxWithdrawableTmv(uint256 _id) external view returns(uint256);\n\n    function addEth(uint256 _id) external payable;\n",
          "message": "ITBoxManager (BondService.sol#115-132) has incorrect ERC20 function interface(s):\n\t-transferFrom (BondService.sol#119)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 425,
          "vulnerability_to_line": 431,
          "vulnerability_code": "    function changePercent(uint256 _id, uint256 _percent) internal {\n\n        uint256 _oldPercent = bonds[_id].percent;\n\n        if (_percent != 0 && _oldPercent != _percent) {\n\n            require(_percent >= ITBoxManager(settings.tBoxManager()).withdrawPercent(bonds[_id].deposit), \"Collateralization is not enough\");\n\n            bonds[_id].percent = _percent;\n\n        }\n",
          "message": "Reentrancy in BondService.changePercent (BondService.sol#425-431):\n\tExternal calls:\n\t- require(bool,string)(_percent >= ITBoxManager(settings.tBoxManager()).withdrawPercent(bonds[_id].deposit),Collateralization is not enough) (BondService.sol#428)\n\tState variables written after the call(s):\n\t- bonds (BondService.sol#429)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 548,
          "vulnerability_to_line": 600,
          "vulnerability_code": "    function expire(uint256 _id) external matched(_id) validTx {\n\n        require(now > bonds[_id].expiration, \"Bond hasn't expired\");\n\n\n\n        (uint256 _eth, uint256 _tmv) = getBox(bonds[_id].tBoxId);\n\n\n\n        if (_eth == 0) {\n\n            emit BondExpired(_id, bonds[_id].issuer, bonds[_id].holder);\n\n            delete bonds[_id];\n\n            return;\n\n        }\n\n\n\n        uint256 _collateralPercent = ITBoxManager(settings.tBoxManager()).collateralPercent(bonds[_id].tBoxId);\n\n        uint256 _targetCollateralPercent = settings.globalTargetCollateralization();\n\n        if (_collateralPercent > _targetCollateralPercent) {\n\n            uint256 _ethTarget = _tmv.mul(_targetCollateralPercent).div(rate()); // mul and div by precision are omitted\n\n            uint256 _issuerEth = _eth.sub(_ethTarget);\n\n            uint256 _withdrawableEth = ITBoxManager(settings.tBoxManager()).withdrawableEth(\n\n                bonds[_id].tBoxId\n\n            );\n\n            if (_issuerEth > _withdrawableEth) {\n\n                _issuerEth = _withdrawableEth;\n\n            }\n\n            ITBoxManager(settings.tBoxManager()).withdrawEth(\n\n                bonds[_id].tBoxId,\n\n                _issuerEth\n\n            );\n\n            bonds[_id].issuer.transfer(_issuerEth);\n\n        }\n\n\n\n        _eth = ITBoxManager(settings.tBoxManager()).withdrawableEth(\n\n            bonds[_id].tBoxId\n\n        );\n\n\n\n        uint256 _commission = _eth.mul(bonds[_id].sysFee).div(divider);\n\n\n\n        if (_commission > 0) {\n\n            ITBoxManager(settings.tBoxManager()).withdrawEth(\n\n                bonds[_id].tBoxId,\n\n                _commission\n\n            );\n\n            systemETH = systemETH.add(_commission);\n\n        }\n\n\n\n        ITBoxManager(settings.tBoxManager()).transferFrom(\n\n            address(this),\n\n            bonds[_id].holder,\n\n            bonds[_id].tBoxId\n\n        );\n\n\n\n        emit BondExpired(_id, bonds[_id].issuer, bonds[_id].holder);\n\n\n\n        delete bonds[_id];\n",
          "message": "Reentrancy in BondService.expire (BondService.sol#548-600):\n\tExternal calls:\n\t- (_eth,_tmv) = getBox(bonds[_id].tBoxId) (BondService.sol#551)\n\tState variables written after the call(s):\n\t- bonds (BondService.sol#555)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 502,
          "vulnerability_to_line": 544,
          "vulnerability_code": "    function finish(uint256 _id) external onlyIssuer(_id) validTx {\n\n\n\n        Bond memory bond = bonds[_id];\n\n\n\n        // It's not necessary to check matching of the bond\n\n        // since the expiration period cannot exceed 365 days.\n\n        require(now < bond.expiration, \"Bond expired\");\n\n\n\n        uint256 _secondsPast = now.sub(bond.createdAt);\n\n        (uint256 _eth, ) = getBox(bond.tBoxId);\n\n\n\n        uint256 _yearFee = bond.tmv\n\n            .mul(_secondsPast)\n\n            .mul(bond.yearFee)\n\n            .div(365 days)\n\n            .div(divider);\n\n        uint256 _sysTMV = _yearFee.mul(bond.sysFee).div(divider);\n\n\n\n        address _holder = bond.holder;\n\n\n\n        if (_sysTMV > 0) {\n\n            IToken(settings.tmvAddress()).transferFrom(\n\n                msg.sender,\n\n                address(this),\n\n                _sysTMV\n\n            );\n\n        }\n\n        if (_yearFee > 0) {\n\n            IToken(settings.tmvAddress()).transferFrom(\n\n                msg.sender,\n\n                _holder,\n\n                _yearFee.sub(_sysTMV)\n\n            );\n\n        }\n\n\n\n        if (_eth > 0) {\n\n            ITBoxManager(settings.tBoxManager()).transferFrom(address(this), msg.sender, bond.tBoxId);\n\n        }\n\n        // when TBox no longer exists\n\n        delete bonds[_id];\n\n\n\n        emit BondFinished(_id, msg.sender, _holder);\n",
          "message": "Reentrancy in BondService.finish (BondService.sol#502-544):\n\tExternal calls:\n\t- (_eth) = getBox(bond.tBoxId) (BondService.sol#511)\n\t- IToken(settings.tmvAddress()).transferFrom(msg.sender,address(this),_sysTMV) (BondService.sol#523-527)\n\t- IToken(settings.tmvAddress()).transferFrom(msg.sender,_holder,_yearFee.sub(_sysTMV)) (BondService.sol#530-534)\n\t- ITBoxManager(settings.tBoxManager()).transferFrom(address(this),msg.sender,bond.tBoxId) (BondService.sol#538)\n\tState variables written after the call(s):\n\t- bonds (BondService.sol#541)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 451,
          "vulnerability_to_line": 474,
          "vulnerability_code": "    function takeIssueRequest(uint256 _id) external payable issueRequest(_id) validTx {\n\n\n\n        address _issuer = bonds[_id].issuer;\n\n        uint256 _eth = bonds[_id].deposit.mul(divider).div(bonds[_id].percent);\n\n\n\n        require(msg.value == _eth, \"Incorrect ETH value\");\n\n\n\n        uint256 _sysEth = _eth.mul(issuerFee).div(divider);\n\n        systemETH = systemETH.add(_sysEth);\n\n\n\n        uint256 _tmv = _eth.mul(rate()).div(precision());\n\n        uint256 _box = ITBoxManager(settings.tBoxManager()).create.value(bonds[_id].deposit)(_tmv);\n\n\n\n        bonds[_id].holder = msg.sender;\n\n        bonds[_id].tmv = _tmv;\n\n        bonds[_id].expiration = bonds[_id].expiration.add(now);\n\n        bonds[_id].sysFee = holderFee;\n\n        bonds[_id].tBoxId = _box;\n\n        bonds[_id].createdAt = now;\n\n\n\n        _issuer.transfer(_eth.sub(_sysEth));\n\n        IToken(settings.tmvAddress()).transfer(msg.sender, _tmv);\n\n        emit BondMatched(_id, msg.sender, _box, _tmv, holderFee, _issuer);\n",
          "message": "BondService.takeIssueRequest (BondService.sol#451-474) does not use the value returned by external calls:\n\t-IToken(settings.tmvAddress()).transfer(msg.sender,_tmv) (BondService.sol#472)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 478,
          "vulnerability_to_line": 498,
          "vulnerability_code": "    function takeBuyRequest(uint256 _id) external payable buyRequest(_id) validTx {\n\n\n\n        address _holder = bonds[_id].holder;\n\n\n\n        uint256 _sysEth = bonds[_id].deposit.mul(issuerFee).div(divider);\n\n        systemETH = systemETH.add(_sysEth);\n\n\n\n        uint256 _tmv = bonds[_id].deposit.mul(rate()).div(precision());\n\n        uint256 _box = ITBoxManager(settings.tBoxManager()).create.value(msg.value)(_tmv);\n\n\n\n        bonds[_id].issuer = msg.sender;\n\n        bonds[_id].tmv = _tmv;\n\n        bonds[_id].expiration = bonds[_id].expiration.add(now);\n\n        bonds[_id].sysFee = holderFee;\n\n        bonds[_id].tBoxId = _box;\n\n        bonds[_id].createdAt = now;\n\n\n\n        msg.sender.transfer(bonds[_id].deposit.sub(_sysEth));\n\n        IToken(settings.tmvAddress()).transfer(_holder, _tmv);\n\n        emit BondMatched(_id, msg.sender, _box, _tmv, holderFee, _holder);\n",
          "message": "BondService.takeBuyRequest (BondService.sol#478-498) does not use the value returned by external calls:\n\t-IToken(settings.tmvAddress()).transfer(_holder,_tmv) (BondService.sol#496)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 625,
          "vulnerability_to_line": 631,
          "vulnerability_code": "    function reclaimERC20(address _token, address _beneficiary) external onlyAdmin {\n\n        require(_beneficiary != address(0), \"Zero address, be careful\");\n\n\n\n        uint256 _amount = IToken(_token).balanceOf(address(this));\n\n        require(_amount > 0, \"There are no tokens\");\n\n        IToken(_token).transfer(_beneficiary, _amount);\n",
          "message": "BondService.reclaimERC20 (BondService.sol#625-631) does not use the value returned by external calls:\n\t-IToken(_token).transfer(_beneficiary,_amount) (BondService.sol#630)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 548,
          "vulnerability_to_line": 600,
          "vulnerability_code": "    function expire(uint256 _id) external matched(_id) validTx {\n\n        require(now > bonds[_id].expiration, \"Bond hasn't expired\");\n\n\n\n        (uint256 _eth, uint256 _tmv) = getBox(bonds[_id].tBoxId);\n\n\n\n        if (_eth == 0) {\n\n            emit BondExpired(_id, bonds[_id].issuer, bonds[_id].holder);\n\n            delete bonds[_id];\n\n            return;\n\n        }\n\n\n\n        uint256 _collateralPercent = ITBoxManager(settings.tBoxManager()).collateralPercent(bonds[_id].tBoxId);\n\n        uint256 _targetCollateralPercent = settings.globalTargetCollateralization();\n\n        if (_collateralPercent > _targetCollateralPercent) {\n\n            uint256 _ethTarget = _tmv.mul(_targetCollateralPercent).div(rate()); // mul and div by precision are omitted\n\n            uint256 _issuerEth = _eth.sub(_ethTarget);\n\n            uint256 _withdrawableEth = ITBoxManager(settings.tBoxManager()).withdrawableEth(\n\n                bonds[_id].tBoxId\n\n            );\n\n            if (_issuerEth > _withdrawableEth) {\n\n                _issuerEth = _withdrawableEth;\n\n            }\n\n            ITBoxManager(settings.tBoxManager()).withdrawEth(\n\n                bonds[_id].tBoxId,\n\n                _issuerEth\n\n            );\n\n            bonds[_id].issuer.transfer(_issuerEth);\n\n        }\n\n\n\n        _eth = ITBoxManager(settings.tBoxManager()).withdrawableEth(\n\n            bonds[_id].tBoxId\n\n        );\n\n\n\n        uint256 _commission = _eth.mul(bonds[_id].sysFee).div(divider);\n\n\n\n        if (_commission > 0) {\n\n            ITBoxManager(settings.tBoxManager()).withdrawEth(\n\n                bonds[_id].tBoxId,\n\n                _commission\n\n            );\n\n            systemETH = systemETH.add(_commission);\n\n        }\n\n\n\n        ITBoxManager(settings.tBoxManager()).transferFrom(\n\n            address(this),\n\n            bonds[_id].holder,\n\n            bonds[_id].tBoxId\n\n        );\n\n\n\n        emit BondExpired(_id, bonds[_id].issuer, bonds[_id].holder);\n\n\n\n        delete bonds[_id];\n",
          "message": "Reentrancy in BondService.expire (BondService.sol#548-600):\n\tExternal calls:\n\t- (_eth,_tmv) = getBox(bonds[_id].tBoxId) (BondService.sol#551)\n\t- _collateralPercent = ITBoxManager(settings.tBoxManager()).collateralPercent(bonds[_id].tBoxId) (BondService.sol#559)\n\t- _targetCollateralPercent = settings.globalTargetCollateralization() (BondService.sol#560)\n\t- _ethTarget = _tmv.mul(_targetCollateralPercent).div(rate()) (BondService.sol#562)\n\t- _withdrawableEth = ITBoxManager(settings.tBoxManager()).withdrawableEth(bonds[_id].tBoxId) (BondService.sol#564-566)\n\t- ITBoxManager(settings.tBoxManager()).withdrawEth(bonds[_id].tBoxId,_issuerEth) (BondService.sol#570-573)\n\t- _eth = ITBoxManager(settings.tBoxManager()).withdrawableEth(bonds[_id].tBoxId) (BondService.sol#577-579)\n\t- ITBoxManager(settings.tBoxManager()).withdrawEth(bonds[_id].tBoxId,_commission) (BondService.sol#584-587)\n\tExternal calls sending eth:\n\t- bonds[_id].issuer.transfer(_issuerEth) (BondService.sol#574)\n\tState variables written after the call(s):\n\t- systemETH (BondService.sol#588)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 312,
          "vulnerability_to_line": 319,
          "vulnerability_code": "    function leverage(uint256 _percent, uint256 _expiration, uint256 _yearFee) public payable returns (uint256) {\n\n        require(msg.value >= minEther, \"Too small funds\");\n\n        require(_percent >= ITBoxManager(settings.tBoxManager()).withdrawPercent(msg.value), \"Collateralization is not enough\");\n\n        require(_expiration >= 1 days && _expiration <= 365 days, \"Expiration out of range\");\n\n        require(_yearFee <= 25000, \"Fee out of range\");\n\n\n\n        return createBond(msg.sender, address(0), _percent, _expiration, _yearFee);\n",
          "message": "Reentrancy in BondService.leverage (BondService.sol#312-319):\n\tExternal calls:\n\t- require(bool,string)(_percent >= ITBoxManager(settings.tBoxManager()).withdrawPercent(msg.value),Collateralization is not enough) (BondService.sol#314)\n\tState variables written after the call(s):\n\t- bonds (BondService.sol#318)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 170,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public divider = 100000;\n",
          "message": "BondService.divider should be constant (BondService.sol#170)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 312,
          "vulnerability_to_line": 319,
          "vulnerability_code": "    function leverage(uint256 _percent, uint256 _expiration, uint256 _yearFee) public payable returns (uint256) {\n\n        require(msg.value >= minEther, \"Too small funds\");\n\n        require(_percent >= ITBoxManager(settings.tBoxManager()).withdrawPercent(msg.value), \"Collateralization is not enough\");\n\n        require(_expiration >= 1 days && _expiration <= 365 days, \"Expiration out of range\");\n\n        require(_yearFee <= 25000, \"Fee out of range\");\n\n\n\n        return createBond(msg.sender, address(0), _percent, _expiration, _yearFee);\n",
          "message": "BondService.leverage (BondService.sol#312-319) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 325,
          "vulnerability_to_line": 331,
          "vulnerability_code": "    function exchange(uint256 _expiration, uint256 _yearFee) public payable returns (uint256) {\n\n        require(msg.value >= minEther, \"Too small funds\");\n\n        require(_expiration >= 1 days && _expiration <= 365 days, \"Expiration out of range\");\n\n        require(_yearFee <= 25000, \"Fee out of range\");\n\n\n\n        return createBond(address(0), msg.sender, 0, _expiration, _yearFee);\n",
          "message": "BondService.exchange (BondService.sol#325-331) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 293,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(ISettings _settings) public {\n",
          "message": "Parameter '_settings' of BondService. (BondService.sol#293) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 312,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function leverage(uint256 _percent, uint256 _expiration, uint256 _yearFee) public payable returns (uint256) {\n",
          "message": "Parameter '_percent' of BondService.leverage (BondService.sol#312) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 312,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function leverage(uint256 _percent, uint256 _expiration, uint256 _yearFee) public payable returns (uint256) {\n",
          "message": "Parameter '_expiration' of BondService.leverage (BondService.sol#312) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 312,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function leverage(uint256 _percent, uint256 _expiration, uint256 _yearFee) public payable returns (uint256) {\n",
          "message": "Parameter '_yearFee' of BondService.leverage (BondService.sol#312) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 325,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function exchange(uint256 _expiration, uint256 _yearFee) public payable returns (uint256) {\n",
          "message": "Parameter '_expiration' of BondService.exchange (BondService.sol#325) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 325,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function exchange(uint256 _expiration, uint256 _yearFee) public payable returns (uint256) {\n",
          "message": "Parameter '_yearFee' of BondService.exchange (BondService.sol#325) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 341,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _issuer,\n",
          "message": "Parameter '_issuer' of BondService.createBond (BondService.sol#341) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 342,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _holder,\n",
          "message": "Parameter '_holder' of BondService.createBond (BondService.sol#342) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 343,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _percent,\n",
          "message": "Parameter '_percent' of BondService.createBond (BondService.sol#343) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 344,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _expiration,\n",
          "message": "Parameter '_expiration' of BondService.createBond (BondService.sol#344) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 345,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _yearFee\n",
          "message": "Parameter '_yearFee' of BondService.createBond (BondService.sol#345) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 369,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function close(uint256 _id) external singleOwner(_id) {\n",
          "message": "Parameter '_id' of BondService.close (BondService.sol#369) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 382,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function issuerChange(uint256 _id, uint256 _deposit, uint256 _percent, uint256 _expiration, uint256 _yearFee)\n",
          "message": "Parameter '_id' of BondService.issuerChange (BondService.sol#382) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 382,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function issuerChange(uint256 _id, uint256 _deposit, uint256 _percent, uint256 _expiration, uint256 _yearFee)\n",
          "message": "Parameter '_deposit' of BondService.issuerChange (BondService.sol#382) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 382,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function issuerChange(uint256 _id, uint256 _deposit, uint256 _percent, uint256 _expiration, uint256 _yearFee)\n",
          "message": "Parameter '_percent' of BondService.issuerChange (BondService.sol#382) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 382,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function issuerChange(uint256 _id, uint256 _deposit, uint256 _percent, uint256 _expiration, uint256 _yearFee)\n",
          "message": "Parameter '_expiration' of BondService.issuerChange (BondService.sol#382) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 382,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function issuerChange(uint256 _id, uint256 _deposit, uint256 _percent, uint256 _expiration, uint256 _yearFee)\n",
          "message": "Parameter '_yearFee' of BondService.issuerChange (BondService.sol#382) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 401,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function holderChange(uint256 _id, uint256 _deposit, uint256 _expiration, uint256 _yearFee)\n",
          "message": "Parameter '_id' of BondService.holderChange (BondService.sol#401) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 401,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function holderChange(uint256 _id, uint256 _deposit, uint256 _expiration, uint256 _yearFee)\n",
          "message": "Parameter '_deposit' of BondService.holderChange (BondService.sol#401) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 401,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function holderChange(uint256 _id, uint256 _deposit, uint256 _expiration, uint256 _yearFee)\n",
          "message": "Parameter '_expiration' of BondService.holderChange (BondService.sol#401) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 401,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function holderChange(uint256 _id, uint256 _deposit, uint256 _expiration, uint256 _yearFee)\n",
          "message": "Parameter '_yearFee' of BondService.holderChange (BondService.sol#401) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 412,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function changeDeposit(uint256 _id, uint256 _deposit) internal {\n",
          "message": "Parameter '_id' of BondService.changeDeposit (BondService.sol#412) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 412,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function changeDeposit(uint256 _id, uint256 _deposit) internal {\n",
          "message": "Parameter '_deposit' of BondService.changeDeposit (BondService.sol#412) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 425,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function changePercent(uint256 _id, uint256 _percent) internal {\n",
          "message": "Parameter '_id' of BondService.changePercent (BondService.sol#425) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 425,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function changePercent(uint256 _id, uint256 _percent) internal {\n",
          "message": "Parameter '_percent' of BondService.changePercent (BondService.sol#425) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 433,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function changeExpiration(uint256 _id, uint256 _expiration) internal {\n",
          "message": "Parameter '_id' of BondService.changeExpiration (BondService.sol#433) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 433,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function changeExpiration(uint256 _id, uint256 _expiration) internal {\n",
          "message": "Parameter '_expiration' of BondService.changeExpiration (BondService.sol#433) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 441,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function changeYearFee(uint256 _id, uint256 _yearFee) internal {\n",
          "message": "Parameter '_id' of BondService.changeYearFee (BondService.sol#441) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 441,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function changeYearFee(uint256 _id, uint256 _yearFee) internal {\n",
          "message": "Parameter '_yearFee' of BondService.changeYearFee (BondService.sol#441) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 451,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function takeIssueRequest(uint256 _id) external payable issueRequest(_id) validTx {\n",
          "message": "Parameter '_id' of BondService.takeIssueRequest (BondService.sol#451) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 478,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function takeBuyRequest(uint256 _id) external payable buyRequest(_id) validTx {\n",
          "message": "Parameter '_id' of BondService.takeBuyRequest (BondService.sol#478) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 502,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function finish(uint256 _id) external onlyIssuer(_id) validTx {\n",
          "message": "Parameter '_id' of BondService.finish (BondService.sol#502) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 548,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function expire(uint256 _id) external matched(_id) validTx {\n",
          "message": "Parameter '_id' of BondService.expire (BondService.sol#548) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 604,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBox(uint256 _id) public view returns(uint256, uint256) {\n",
          "message": "Parameter '_id' of BondService.getBox (BondService.sol#604) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 613,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawSystemETH(address _beneficiary) external onlyAdmin {\n",
          "message": "Parameter '_beneficiary' of BondService.withdrawSystemETH (BondService.sol#613) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 625,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function reclaimERC20(address _token, address _beneficiary) external onlyAdmin {\n",
          "message": "Parameter '_token' of BondService.reclaimERC20 (BondService.sol#625) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 625,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function reclaimERC20(address _token, address _beneficiary) external onlyAdmin {\n",
          "message": "Parameter '_beneficiary' of BondService.reclaimERC20 (BondService.sol#625) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 635,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setIssuerFee(uint256 _value) external onlyAdmin {\n",
          "message": "Parameter '_value' of BondService.setIssuerFee (BondService.sol#635) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 643,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setHolderFee(uint256 _value) external onlyAdmin {\n",
          "message": "Parameter '_value' of BondService.setHolderFee (BondService.sol#643) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 651,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMinEther(uint256 _value) external onlyAdmin {\n",
          "message": "Parameter '_value' of BondService.setMinEther (BondService.sol#651) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 659,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function changeAdmin(address _newAdmin) external onlyAdmin {\n",
          "message": "Parameter '_newAdmin' of BondService.changeAdmin (BondService.sol#659) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 675,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferIssuerRights(address _to, uint256 _id) external onlyIssuer(_id) {\n",
          "message": "Parameter '_to' of BondService.transferIssuerRights (BondService.sol#675) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 675,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferIssuerRights(address _to, uint256 _id) external onlyIssuer(_id) {\n",
          "message": "Parameter '_id' of BondService.transferIssuerRights (BondService.sol#675) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 682,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferHolderRights(address _to, uint256 _id) external onlyHolder(_id) {\n",
          "message": "Parameter '_to' of BondService.transferHolderRights (BondService.sol#682) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 682,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferHolderRights(address _to, uint256 _id) external onlyHolder(_id) {\n",
          "message": "Parameter '_id' of BondService.transferHolderRights (BondService.sol#682) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 318,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return createBond(msg.sender, address(0), _percent, _expiration, _yearFee);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 330,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return createBond(address(0), msg.sender, 0, _expiration, _yearFee);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 161,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private systemETH;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 370,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _eth = bonds[_id].deposit;\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 362,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _id = bonds.push(_bond).sub(1);\n",
          "message": null
        },
        {
          "name": "Transaction-Ordering Dependence (TOD)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 369,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function close(uint256 _id) external singleOwner(_id) {\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 671,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return IOracle(settings.oracleAddress()).ethUsdPrice();\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 671,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return IOracle(settings.oracleAddress()).ethUsdPrice();\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 671,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return IOracle(settings.oracleAddress()).ethUsdPrice();\n",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 682,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferHolderRights(address _to, uint256 _id) external onlyHolder(_id) {\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 180,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Bond[] public bonds;\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 628,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _amount = IToken(_token).balanceOf(address(this));\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 630,
          "vulnerability_to_line": null,
          "vulnerability_code": "        IToken(_token).transfer(_beneficiary, _amount);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 630,
          "vulnerability_to_line": null,
          "vulnerability_code": "        IToken(_token).transfer(_beneficiary, _amount);\n",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 401,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function holderChange(uint256 _id, uint256 _deposit, uint256 _expiration, uint256 _yearFee)\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 314,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_percent >= ITBoxManager(settings.tBoxManager()).withdrawPercent(msg.value), \"Collateralization is not enough\");\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 314,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_percent >= ITBoxManager(settings.tBoxManager()).withdrawPercent(msg.value), \"Collateralization is not enough\");\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 314,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_percent >= ITBoxManager(settings.tBoxManager()).withdrawPercent(msg.value), \"Collateralization is not enough\");\n",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 451,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function takeIssueRequest(uint256 _id) external payable issueRequest(_id) validTx {\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 548,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function expire(uint256 _id) external matched(_id) validTx {\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 382,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function issuerChange(uint256 _id, uint256 _deposit, uint256 _percent, uint256 _expiration, uint256 _yearFee)\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.\nClassification: SWC-110"
        },
        {
          "name": "Dependence on predictable environment variable (SWC 116)",
          "vulnerability_from_line": 508,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(now < bond.expiration, \"Bond expired\");\n",
          "message": "A control flow decision is made based on The block.timestamp environment variable.\nThe block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-116"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 666,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return ITBoxManager(settings.tBoxManager()).precision();\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 666,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return ITBoxManager(settings.tBoxManager()).precision();\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 666,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return ITBoxManager(settings.tBoxManager()).precision();\n",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 605,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return ITBoxManager(settings.tBoxManager()).boxes(_id);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 605,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return ITBoxManager(settings.tBoxManager()).boxes(_id);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 605,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return ITBoxManager(settings.tBoxManager()).boxes(_id);\n",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 478,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function takeBuyRequest(uint256 _id) external payable buyRequest(_id) validTx {\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 675,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferIssuerRights(address _to, uint256 _id) external onlyIssuer(_id) {\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 362,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _id = bonds.push(_bond).sub(1);\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 362,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _id = bonds.push(_bond).sub(1);\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 362,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _id = bonds.push(_bond).sub(1);\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 362,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _id = bonds.push(_bond).sub(1);\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 362,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _id = bonds.push(_bond).sub(1);\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 362,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _id = bonds.push(_bond).sub(1);\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 362,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _id = bonds.push(_bond).sub(1);\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 362,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _id = bonds.push(_bond).sub(1);\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 362,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _id = bonds.push(_bond).sub(1);\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 362,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _id = bonds.push(_bond).sub(1);\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 362,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _id = bonds.push(_bond).sub(1);\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 362,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _id = bonds.push(_bond).sub(1);\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "Dependence on predictable environment variable (SWC 116)",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b <= a, 'sub');\n",
          "message": "A control flow decision is made based on The block.timestamp environment variable.\nThe block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-116"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 428,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_percent >= ITBoxManager(settings.tBoxManager()).withdrawPercent(bonds[_id].deposit), \"Collateralization is not enough\");\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 428,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_percent >= ITBoxManager(settings.tBoxManager()).withdrawPercent(bonds[_id].deposit), \"Collateralization is not enough\");\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 428,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_percent >= ITBoxManager(settings.tBoxManager()).withdrawPercent(bonds[_id].deposit), \"Collateralization is not enough\");\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 428,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_percent >= ITBoxManager(settings.tBoxManager()).withdrawPercent(bonds[_id].deposit), \"Collateralization is not enough\");\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 428,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_percent >= ITBoxManager(settings.tBoxManager()).withdrawPercent(bonds[_id].deposit), \"Collateralization is not enough\");\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Concurrency bug",
          "vulnerability_from_line": 372,
          "vulnerability_to_line": null,
          "vulnerability_code": "        msg.sender.transfer(_eth);\n",
          "message": null
        },
        {
          "name": "Concurrency bug",
          "vulnerability_from_line": 418,
          "vulnerability_to_line": null,
          "vulnerability_code": "                msg.sender.transfer(_oldDeposit.sub(_deposit));\n",
          "message": null
        }
      ]
    }
  }
}