{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 226,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(ISettings _settings) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 227,
          "vulnerability_to_line": null,
          "vulnerability_code": "        admin = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "        settings = ISettings(_settings);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 229,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 230,
          "vulnerability_to_line": null,
          "vulnerability_code": "        feeLeverage = 500; // 0.5%\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 231,
          "vulnerability_to_line": null,
          "vulnerability_code": "        feeExchange = 500; // 0.5%\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit FeeUpdated(feeLeverage, feeExchange);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 233,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 234,
          "vulnerability_to_line": null,
          "vulnerability_code": "        minEther = 0.1 ether;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 235,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit MinEtherUpdated(minEther);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, 'mul');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b > 0, 'div');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b <= a, 'sub');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, 'add');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(tx.gasprice <= settings.gasPriceLimit(), \"Gas price is greater than allowed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(admin == msg.sender, \"You have no access\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 206,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(orders[_id].owner == msg.sender, \"Order isn't your\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(orders[_id].owner != address(0), \"Order doesn't exist\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 212,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(orders[_id].percent > 0, \"Not a leverage order\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(orders[_id].owner != address(0), \"Order doesn't exist\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 218,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(orders[_id].percent == 0, \"Not an exchange order\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 243,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_beneficiary != address(0), \"Zero address, be careful\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 244,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(systemETH > 0, \"There is no available ETH\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 256,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_beneficiary != address(0), \"Zero address, be careful\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 259,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_amount > 0, \"There are no tokens\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 265,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_leverage <= 10000 && _exchange <= 10000, \"Too much\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 273,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_value <= 100 ether, \"Too much\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 280,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_newAdmin != address(0), \"Zero address, be careful\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 286,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.value >= minEther, \"Too small funds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 287,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_percent == 0\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 288,
          "vulnerability_to_line": null,
          "vulnerability_code": "            || _percent >= ITBoxManager(settings.tBoxManager()).withdrawPercent(msg.value),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 289,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Collateral percent out of range\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 290,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 311,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.value == _eth, \"Incorrect ETH value\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 353,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_to != address(0), \"Zero address, be careful\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 265,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_leverage <= 10000 && _exchange <= 10000, \"Too much\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(tx.gasprice <= settings.gasPriceLimit(), \"Gas price is greater than allowed\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_25"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 335,
          "vulnerability_to_line": 349,
          "vulnerability_code": "    function takeExchangeOrder(uint256 _id) external payable ensureExchangeOrder(_id) validTx returns(uint256) {\n\n        address _owner = orders[_id].owner;\n\n        uint256 _eth = orders[_id].pack;\n\n        uint256 _sysEth = _eth.mul(feeExchange).div(divider);\n\n        systemETH = systemETH.add(_sysEth);\n\n        uint256 _tmv = _eth.mul(ITBoxManager(settings.tBoxManager()).rate()).div(ITBoxManager(settings.tBoxManager()).precision());\n\n        uint256 _box = ITBoxManager(settings.tBoxManager()).create.value(msg.value)(_tmv);\n\n        uint256 _sysTmv = _tmv.mul(feeExchange).div(divider);\n\n        delete orders[_id];\n\n        msg.sender.transfer(_eth.sub(_sysEth));\n\n        ITBoxManager(settings.tBoxManager()).transferFrom(address(this), msg.sender, _box);\n\n        IToken(settings.tmvAddress()).transfer(_owner, _tmv.sub(_sysTmv));\n\n        emit OrderMatched(_id, _box, msg.sender, _owner);\n\n        return _box;\n",
          "message": "Reentrancy in LeverageService.takeExchangeOrder (LeverageService.sol#335-349):\n\tExternal calls:\n\t- _tmv = _eth.mul(ITBoxManager(settings.tBoxManager()).rate()).div(ITBoxManager(settings.tBoxManager()).precision()) (LeverageService.sol#340)\n\t- _box = ITBoxManager(settings.tBoxManager()).create.value(msg.value)(_tmv) (LeverageService.sol#341)\n\tExternal calls sending eth:\n\t- _box = ITBoxManager(settings.tBoxManager()).create.value(msg.value)(_tmv) (LeverageService.sol#341)\n\tState variables written after the call(s):\n\t- orders (LeverageService.sol#343)\n"
        },
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 307,
          "vulnerability_to_line": 332,
          "vulnerability_code": "    function takeLeverageOrder(uint256 _id) external payable ensureLeverageOrder(_id) validTx returns(uint256) {\n\n        address _owner = orders[_id].owner;\n\n        uint256 _eth = orders[_id].pack.mul(divider).div(orders[_id].percent);\n\n\n\n        require(msg.value == _eth, \"Incorrect ETH value\");\n\n\n\n        uint256 _sysEth = _eth.mul(feeLeverage).div(divider);\n\n        systemETH = systemETH.add(_sysEth);\n\n        uint256 _tmv = _eth.mul(ITBoxManager(settings.tBoxManager()).rate()).div(\n\n            ITBoxManager(settings.tBoxManager()).precision()\n\n        );\n\n        uint256 _box = ITBoxManager(settings.tBoxManager()).create.value(\n\n            orders[_id].pack\n\n        )(_tmv);\n\n        uint256 _sysTmv = _tmv.mul(feeLeverage).div(divider);\n\n        delete orders[_id];\n\n        _owner.transfer(_eth.sub(_sysEth));\n\n        ITBoxManager(settings.tBoxManager()).transferFrom(\n\n            address(this),\n\n            _owner,\n\n            _box\n\n        );\n\n        IToken(settings.tmvAddress()).transfer(msg.sender, _tmv.sub(_sysTmv));\n\n        emit OrderMatched(_id, _box, msg.sender, _owner);\n\n        return _box;\n",
          "message": "Reentrancy in LeverageService.takeLeverageOrder (LeverageService.sol#307-332):\n\tExternal calls:\n\t- _tmv = _eth.mul(ITBoxManager(settings.tBoxManager()).rate()).div(ITBoxManager(settings.tBoxManager()).precision()) (LeverageService.sol#315-317)\n\t- _box = ITBoxManager(settings.tBoxManager()).create.value(orders[_id].pack)(_tmv) (LeverageService.sol#318-320)\n\tExternal calls sending eth:\n\t- _box = ITBoxManager(settings.tBoxManager()).create.value(orders[_id].pack)(_tmv) (LeverageService.sol#318-320)\n\tState variables written after the call(s):\n\t- orders (LeverageService.sol#322)\n"
        },
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": 106,
          "vulnerability_code": "interface IToken {\n\n    function burnLogic(address from, uint256 value) external;\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function mint(address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 tokenId) external;\n",
          "message": "IToken (LeverageService.sol#98-106) has incorrect ERC20 function interface(s):\n\t-transferFrom (LeverageService.sol#105)\n"
        },
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": 132,
          "vulnerability_code": "interface ITBoxManager {\n\n    function create(uint256 withdraw) external payable returns (uint256);\n\n    function precision() external view returns (uint256);\n\n    function rate() external view returns (uint256);\n\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    function close(uint256 id) external;\n\n    function withdrawPercent(uint256 _collateral) external view returns(uint256);\n\n    function boxes(uint256 id) external view returns(uint256, uint256);\n\n    function withdrawEth(uint256 _id, uint256 _amount) external;\n\n    function withdrawTmv(uint256 _id, uint256 _amount) external;\n\n    function withdrawableEth(uint256 id) external view returns(uint256);\n\n    function withdrawableTmv(uint256 collateral) external view returns(uint256);\n\n    function maxCapAmount(uint256 _id) external view returns (uint256);\n\n    function collateralPercent(uint256 _id) external view returns (uint256);\n\n    function capitalize(uint256 _id, uint256 _tmv) external;\n\n    function boxWithdrawableTmv(uint256 _id) external view returns(uint256);\n\n    function addEth(uint256 _id) external payable;\n",
          "message": "ITBoxManager (LeverageService.sol#115-132) has incorrect ERC20 function interface(s):\n\t-transferFrom (LeverageService.sol#119)\n"
        },
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": 357,
          "vulnerability_code": "contract LeverageService {\n\n    using SafeMath for uint256;\n\n\n\n    /// @notice The address of the admin account.\n\n    address public admin;\n\n\n\n    // The amount of Ether received from the commissions of the system.\n\n    uint256 public systemETH;\n\n\n\n    // Commission percentage of leverage\n\n    uint256 public feeLeverage;\n\n\n\n    // Commission percentage of exchange\n\n    uint256 public feeExchange;\n\n\n\n    // The percentage divider\n\n    uint256 public divider = 100000;\n\n\n\n    // The minimum deposit amount\n\n    uint256 public minEther;\n\n\n\n    ISettings public settings;\n\n\n\n    /// @dev An array containing the Order struct for all Orders in existence. The ID\n\n    ///  of each Order is actually an index into this array.\n\n    Order[] public orders;\n\n\n\n    /// @dev The main Order struct. Every Order is represented by a copy\n\n    ///  of this structure.\n\n    struct Order {\n\n        address owner;\n\n        uint256 pack;\n\n        // 0: exchange order\n\n        // > 0: leverage order\n\n        uint256 percent;\n\n    }\n\n\n\n    /// @dev The OrderCreated event is fired whenever a new Order comes into existence.\n\n    event OrderCreated(uint256 id, address owner, uint256 pack, uint256 percent);\n\n\n\n    /// @dev The OrderClosed event is fired whenever Order is closed.\n\n    event OrderClosed(uint256 id, address who);\n\n\n\n    /// @dev The OrderMatched event is fired whenever an Order is matched.\n\n    event OrderMatched(uint256 id, uint256 tBox, address who, address owner);\n\n\n\n    event FeeUpdated(uint256 leverage, uint256 exchange);\n\n    event MinEtherUpdated(uint256 value);\n\n    event Transferred(address indexed from, address indexed to, uint256 indexed id);\n\n\n\n    /// @dev Defends against front-running attacks.\n\n    modifier validTx() {\n\n        require(tx.gasprice <= settings.gasPriceLimit(), \"Gas price is greater than allowed\");\n\n        _;\n\n    }\n\n\n\n    /// @dev Access modifier for admin-only functionality.\n\n    modifier onlyAdmin() {\n\n        require(admin == msg.sender, \"You have no access\");\n\n        _;\n\n    }\n\n\n\n    /// @dev Access modifier for Order owner-only functionality.\n\n    modifier onlyOwner(uint256 _id) {\n\n        require(orders[_id].owner == msg.sender, \"Order isn't your\");\n\n        _;\n\n    }\n\n\n\n    modifier ensureLeverageOrder(uint256 _id) {\n\n        require(orders[_id].owner != address(0), \"Order doesn't exist\");\n\n        require(orders[_id].percent > 0, \"Not a leverage order\");\n\n        _;\n\n    }\n\n\n\n    modifier ensureExchangeOrder(uint256 _id) {\n\n        require(orders[_id].owner != address(0), \"Order doesn't exist\");\n\n        require(orders[_id].percent == 0, \"Not an exchange order\");\n\n        _;\n\n    }\n\n\n\n    /// @notice ISettings address couldn't be changed later.\n\n    /// @dev The contract constructor sets the original `admin` of the contract to the sender\n\n    //   account and sets the settings contract with provided address.\n\n    /// @param _settings The address of the settings contract.\n\n    constructor(ISettings _settings) public {\n\n        admin = msg.sender;\n\n        settings = ISettings(_settings);\n\n\n\n        feeLeverage = 500; // 0.5%\n\n        feeExchange = 500; // 0.5%\n\n        emit FeeUpdated(feeLeverage, feeExchange);\n\n\n\n        minEther = 0.1 ether;\n\n        emit MinEtherUpdated(minEther);\n\n    }\n\n\n\n    /// @dev Withdraws system fee.\n\n    function withdrawSystemETH(address _beneficiary)\n\n    external\n\n    onlyAdmin\n\n    {\n\n        require(_beneficiary != address(0), \"Zero address, be careful\");\n\n        require(systemETH > 0, \"There is no available ETH\");\n\n\n\n        uint256 _systemETH = systemETH;\n\n        systemETH = 0;\n\n        _beneficiary.transfer(_systemETH);\n\n    }\n\n\n\n    /// @dev Reclaims ERC20 tokens.\n\n    function reclaimERC20(address _token, address _beneficiary)\n\n    external\n\n    onlyAdmin\n\n    {\n\n        require(_beneficiary != address(0), \"Zero address, be careful\");\n\n\n\n        uint256 _amount = IToken(_token).balanceOf(address(this));\n\n        require(_amount > 0, \"There are no tokens\");\n\n        IToken(_token).transfer(_beneficiary, _amount);\n\n    }\n\n\n\n    /// @dev Sets commission.\n\n    function setCommission(uint256 _leverage, uint256 _exchange) external onlyAdmin {\n\n        require(_leverage <= 10000 && _exchange <= 10000, \"Too much\");\n\n        feeLeverage = _leverage;\n\n        feeExchange = _exchange;\n\n        emit FeeUpdated(_leverage, _exchange);\n\n    }\n\n\n\n    /// @dev Sets minimum deposit amount.\n\n    function setMinEther(uint256 _value) external onlyAdmin {\n\n        require(_value <= 100 ether, \"Too much\");\n\n        minEther = _value;\n\n        emit MinEtherUpdated(_value);\n\n    }\n\n\n\n    /// @dev Sets admin address.\n\n    function changeAdmin(address _newAdmin) external onlyAdmin {\n\n        require(_newAdmin != address(0), \"Zero address, be careful\");\n\n        admin = _newAdmin;\n\n    }\n\n\n\n    /// @dev Creates an Order.\n\n    function create(uint256 _percent) public payable returns (uint256) {\n\n        require(msg.value >= minEther, \"Too small funds\");\n\n        require(_percent == 0\n\n            || _percent >= ITBoxManager(settings.tBoxManager()).withdrawPercent(msg.value),\n\n            \"Collateral percent out of range\"\n\n        );\n\n\n\n        Order memory _order = Order(msg.sender, msg.value, _percent);\n\n        uint256 _id = orders.push(_order).sub(1);\n\n        emit OrderCreated(_id, msg.sender, msg.value, _percent);\n\n        return _id;\n\n    }\n\n\n\n    /// @dev Closes an Order.\n\n    function close(uint256 _id) external onlyOwner(_id) {\n\n        uint256 _eth = orders[_id].pack;\n\n        delete orders[_id];\n\n        msg.sender.transfer(_eth);\n\n        emit OrderClosed(_id, msg.sender);\n\n    }\n\n\n\n    /// @dev Uses to match a leverage Order.\n\n    function takeLeverageOrder(uint256 _id) external payable ensureLeverageOrder(_id) validTx returns(uint256) {\n\n        address _owner = orders[_id].owner;\n\n        uint256 _eth = orders[_id].pack.mul(divider).div(orders[_id].percent);\n\n\n\n        require(msg.value == _eth, \"Incorrect ETH value\");\n\n\n\n        uint256 _sysEth = _eth.mul(feeLeverage).div(divider);\n\n        systemETH = systemETH.add(_sysEth);\n\n        uint256 _tmv = _eth.mul(ITBoxManager(settings.tBoxManager()).rate()).div(\n\n            ITBoxManager(settings.tBoxManager()).precision()\n\n        );\n\n        uint256 _box = ITBoxManager(settings.tBoxManager()).create.value(\n\n            orders[_id].pack\n\n        )(_tmv);\n\n        uint256 _sysTmv = _tmv.mul(feeLeverage).div(divider);\n\n        delete orders[_id];\n\n        _owner.transfer(_eth.sub(_sysEth));\n\n        ITBoxManager(settings.tBoxManager()).transferFrom(\n\n            address(this),\n\n            _owner,\n\n            _box\n\n        );\n\n        IToken(settings.tmvAddress()).transfer(msg.sender, _tmv.sub(_sysTmv));\n\n        emit OrderMatched(_id, _box, msg.sender, _owner);\n\n        return _box;\n\n    }\n\n\n\n    /// @dev Uses to match an exchange Order.\n\n    function takeExchangeOrder(uint256 _id) external payable ensureExchangeOrder(_id) validTx returns(uint256) {\n\n        address _owner = orders[_id].owner;\n\n        uint256 _eth = orders[_id].pack;\n\n        uint256 _sysEth = _eth.mul(feeExchange).div(divider);\n\n        systemETH = systemETH.add(_sysEth);\n\n        uint256 _tmv = _eth.mul(ITBoxManager(settings.tBoxManager()).rate()).div(ITBoxManager(settings.tBoxManager()).precision());\n\n        uint256 _box = ITBoxManager(settings.tBoxManager()).create.value(msg.value)(_tmv);\n\n        uint256 _sysTmv = _tmv.mul(feeExchange).div(divider);\n\n        delete orders[_id];\n\n        msg.sender.transfer(_eth.sub(_sysEth));\n\n        ITBoxManager(settings.tBoxManager()).transferFrom(address(this), msg.sender, _box);\n\n        IToken(settings.tmvAddress()).transfer(_owner, _tmv.sub(_sysTmv));\n\n        emit OrderMatched(_id, _box, msg.sender, _owner);\n\n        return _box;\n\n    }\n\n\n\n    /// @dev Transfers ownership of an Order.\n\n    function transfer(address _to, uint256 _id) external onlyOwner(_id) {\n\n        require(_to != address(0), \"Zero address, be careful\");\n\n        orders[_id].owner = _to;\n\n        emit Transferred(msg.sender, _to, _id);\n\n    }\n",
          "message": "LeverageService (LeverageService.sol#142-357) has incorrect ERC20 function interface(s):\n\t-transfer (LeverageService.sol#352-356)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": 261,
          "vulnerability_code": "    function reclaimERC20(address _token, address _beneficiary)\n\n    external\n\n    onlyAdmin\n\n    {\n\n        require(_beneficiary != address(0), \"Zero address, be careful\");\n\n\n\n        uint256 _amount = IToken(_token).balanceOf(address(this));\n\n        require(_amount > 0, \"There are no tokens\");\n\n        IToken(_token).transfer(_beneficiary, _amount);\n",
          "message": "LeverageService.reclaimERC20 (LeverageService.sol#252-261) does not use the value returned by external calls:\n\t-IToken(_token).transfer(_beneficiary,_amount) (LeverageService.sol#260)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 307,
          "vulnerability_to_line": 332,
          "vulnerability_code": "    function takeLeverageOrder(uint256 _id) external payable ensureLeverageOrder(_id) validTx returns(uint256) {\n\n        address _owner = orders[_id].owner;\n\n        uint256 _eth = orders[_id].pack.mul(divider).div(orders[_id].percent);\n\n\n\n        require(msg.value == _eth, \"Incorrect ETH value\");\n\n\n\n        uint256 _sysEth = _eth.mul(feeLeverage).div(divider);\n\n        systemETH = systemETH.add(_sysEth);\n\n        uint256 _tmv = _eth.mul(ITBoxManager(settings.tBoxManager()).rate()).div(\n\n            ITBoxManager(settings.tBoxManager()).precision()\n\n        );\n\n        uint256 _box = ITBoxManager(settings.tBoxManager()).create.value(\n\n            orders[_id].pack\n\n        )(_tmv);\n\n        uint256 _sysTmv = _tmv.mul(feeLeverage).div(divider);\n\n        delete orders[_id];\n\n        _owner.transfer(_eth.sub(_sysEth));\n\n        ITBoxManager(settings.tBoxManager()).transferFrom(\n\n            address(this),\n\n            _owner,\n\n            _box\n\n        );\n\n        IToken(settings.tmvAddress()).transfer(msg.sender, _tmv.sub(_sysTmv));\n\n        emit OrderMatched(_id, _box, msg.sender, _owner);\n\n        return _box;\n",
          "message": "LeverageService.takeLeverageOrder (LeverageService.sol#307-332) does not use the value returned by external calls:\n\t-IToken(settings.tmvAddress()).transfer(msg.sender,_tmv.sub(_sysTmv)) (LeverageService.sol#329)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 335,
          "vulnerability_to_line": 349,
          "vulnerability_code": "    function takeExchangeOrder(uint256 _id) external payable ensureExchangeOrder(_id) validTx returns(uint256) {\n\n        address _owner = orders[_id].owner;\n\n        uint256 _eth = orders[_id].pack;\n\n        uint256 _sysEth = _eth.mul(feeExchange).div(divider);\n\n        systemETH = systemETH.add(_sysEth);\n\n        uint256 _tmv = _eth.mul(ITBoxManager(settings.tBoxManager()).rate()).div(ITBoxManager(settings.tBoxManager()).precision());\n\n        uint256 _box = ITBoxManager(settings.tBoxManager()).create.value(msg.value)(_tmv);\n\n        uint256 _sysTmv = _tmv.mul(feeExchange).div(divider);\n\n        delete orders[_id];\n\n        msg.sender.transfer(_eth.sub(_sysEth));\n\n        ITBoxManager(settings.tBoxManager()).transferFrom(address(this), msg.sender, _box);\n\n        IToken(settings.tmvAddress()).transfer(_owner, _tmv.sub(_sysTmv));\n\n        emit OrderMatched(_id, _box, msg.sender, _owner);\n\n        return _box;\n",
          "message": "LeverageService.takeExchangeOrder (LeverageService.sol#335-349) does not use the value returned by external calls:\n\t-IToken(settings.tmvAddress()).transfer(_owner,_tmv.sub(_sysTmv)) (LeverageService.sol#346)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 285,
          "vulnerability_to_line": 296,
          "vulnerability_code": "    function create(uint256 _percent) public payable returns (uint256) {\n\n        require(msg.value >= minEther, \"Too small funds\");\n\n        require(_percent == 0\n\n            || _percent >= ITBoxManager(settings.tBoxManager()).withdrawPercent(msg.value),\n\n            \"Collateral percent out of range\"\n\n        );\n\n\n\n        Order memory _order = Order(msg.sender, msg.value, _percent);\n\n        uint256 _id = orders.push(_order).sub(1);\n\n        emit OrderCreated(_id, msg.sender, msg.value, _percent);\n\n        return _id;\n",
          "message": "Reentrancy in LeverageService.create (LeverageService.sol#285-296):\n\tExternal calls:\n\t- require(bool,string)(_percent == 0 || _percent >= ITBoxManager(settings.tBoxManager()).withdrawPercent(msg.value),Collateral percent out of range) (LeverageService.sol#287-290)\n\tState variables written after the call(s):\n\t- orders (LeverageService.sol#293)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public divider = 100000;\n",
          "message": "LeverageService.divider should be constant (LeverageService.sol#158)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 285,
          "vulnerability_to_line": 296,
          "vulnerability_code": "    function create(uint256 _percent) public payable returns (uint256) {\n\n        require(msg.value >= minEther, \"Too small funds\");\n\n        require(_percent == 0\n\n            || _percent >= ITBoxManager(settings.tBoxManager()).withdrawPercent(msg.value),\n\n            \"Collateral percent out of range\"\n\n        );\n\n\n\n        Order memory _order = Order(msg.sender, msg.value, _percent);\n\n        uint256 _id = orders.push(_order).sub(1);\n\n        emit OrderCreated(_id, msg.sender, msg.value, _percent);\n\n        return _id;\n",
          "message": "LeverageService.create (LeverageService.sol#285-296) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 226,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(ISettings _settings) public {\n",
          "message": "Parameter '_settings' of LeverageService. (LeverageService.sol#226) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 239,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawSystemETH(address _beneficiary)\n",
          "message": "Parameter '_beneficiary' of LeverageService.withdrawSystemETH (LeverageService.sol#239) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function reclaimERC20(address _token, address _beneficiary)\n",
          "message": "Parameter '_token' of LeverageService.reclaimERC20 (LeverageService.sol#252) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function reclaimERC20(address _token, address _beneficiary)\n",
          "message": "Parameter '_beneficiary' of LeverageService.reclaimERC20 (LeverageService.sol#252) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 264,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setCommission(uint256 _leverage, uint256 _exchange) external onlyAdmin {\n",
          "message": "Parameter '_leverage' of LeverageService.setCommission (LeverageService.sol#264) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 264,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setCommission(uint256 _leverage, uint256 _exchange) external onlyAdmin {\n",
          "message": "Parameter '_exchange' of LeverageService.setCommission (LeverageService.sol#264) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 272,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMinEther(uint256 _value) external onlyAdmin {\n",
          "message": "Parameter '_value' of LeverageService.setMinEther (LeverageService.sol#272) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 279,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function changeAdmin(address _newAdmin) external onlyAdmin {\n",
          "message": "Parameter '_newAdmin' of LeverageService.changeAdmin (LeverageService.sol#279) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 285,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function create(uint256 _percent) public payable returns (uint256) {\n",
          "message": "Parameter '_percent' of LeverageService.create (LeverageService.sol#285) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 299,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function close(uint256 _id) external onlyOwner(_id) {\n",
          "message": "Parameter '_id' of LeverageService.close (LeverageService.sol#299) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 307,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function takeLeverageOrder(uint256 _id) external payable ensureLeverageOrder(_id) validTx returns(uint256) {\n",
          "message": "Parameter '_id' of LeverageService.takeLeverageOrder (LeverageService.sol#307) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 335,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function takeExchangeOrder(uint256 _id) external payable ensureExchangeOrder(_id) validTx returns(uint256) {\n",
          "message": "Parameter '_id' of LeverageService.takeExchangeOrder (LeverageService.sol#335) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 352,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _id) external onlyOwner(_id) {\n",
          "message": "Parameter '_to' of LeverageService.transfer (LeverageService.sol#352) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 352,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _id) external onlyOwner(_id) {\n",
          "message": "Parameter '_id' of LeverageService.transfer (LeverageService.sol#352) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 300,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _eth = orders[_id].pack;\n",
          "message": null
        },
        {
          "name": "Transaction-Ordering Dependence (TOD)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 299,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function close(uint256 _id) external onlyOwner(_id) {\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 335,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function takeExchangeOrder(uint256 _id) external payable ensureExchangeOrder(_id) validTx returns(uint256) {\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 258,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _amount = IToken(_token).balanceOf(address(this));\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 260,
          "vulnerability_to_line": null,
          "vulnerability_code": "        IToken(_token).transfer(_beneficiary, _amount);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 260,
          "vulnerability_to_line": null,
          "vulnerability_code": "        IToken(_token).transfer(_beneficiary, _amount);\n",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 307,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function takeLeverageOrder(uint256 _id) external payable ensureLeverageOrder(_id) validTx returns(uint256) {\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 288,
          "vulnerability_to_line": null,
          "vulnerability_code": "            || _percent >= ITBoxManager(settings.tBoxManager()).withdrawPercent(msg.value),\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 288,
          "vulnerability_to_line": null,
          "vulnerability_code": "            || _percent >= ITBoxManager(settings.tBoxManager()).withdrawPercent(msg.value),\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 288,
          "vulnerability_to_line": null,
          "vulnerability_code": "            || _percent >= ITBoxManager(settings.tBoxManager()).withdrawPercent(msg.value),\n",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 293,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _id = orders.push(_order).sub(1);\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 293,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _id = orders.push(_order).sub(1);\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 293,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _id = orders.push(_order).sub(1);\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 293,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _id = orders.push(_order).sub(1);\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 167,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Order[] public orders;\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 352,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _id) external onlyOwner(_id) {\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Concurrency bug",
          "vulnerability_from_line": 248,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _beneficiary.transfer(_systemETH);\n",
          "message": null
        },
        {
          "name": "Concurrency bug",
          "vulnerability_from_line": 302,
          "vulnerability_to_line": null,
          "vulnerability_code": "        msg.sender.transfer(_eth);\n",
          "message": null
        }
      ]
    }
  }
}