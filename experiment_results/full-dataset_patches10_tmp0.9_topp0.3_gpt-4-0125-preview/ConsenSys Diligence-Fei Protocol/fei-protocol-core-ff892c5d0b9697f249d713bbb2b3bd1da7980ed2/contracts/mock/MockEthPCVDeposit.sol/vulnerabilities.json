{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "inefficient-state-variable-increment",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "        total += amount;\n",
          "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 total = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tconstructor(address payable _beneficiary) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tbeneficiary = _beneficiary;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t}\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "    \trequire(amount == msg.value, \"MockEthPCVDeposit: Sent value does not equal input\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"MockEthPCVDeposit: Not enough value held\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "    \trequire(amount == msg.value, \"MockEthPCVDeposit: Sent value does not equal input\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"MockEthPCVDeposit: Not enough value held\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_5"
      ],
      "vulnerability_findings": [
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": 51,
          "vulnerability_code": "    function deposit(uint256 amount) external override payable {\n\n    \trequire(amount == msg.value, \"MockEthPCVDeposit: Sent value does not equal input\");\n\n    \tbeneficiary.transfer(amount);\n\n        total += amount;\n",
          "message": "MockEthPCVDeposit.deposit (MockEthPCVDeposit.sol#47-51) sends eth to arbitrary user\n\tDangerous calls:\n\t- beneficiary.transfer(amount) (MockEthPCVDeposit.sol#49)\n"
        },
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": 57,
          "vulnerability_code": "    function withdraw(address to, uint256 amount) external override {\n\n        require(address(this).balance >= amount, \"MockEthPCVDeposit: Not enough value held\");\n\n        total -= amount;\n\n        payable(to).transfer(amount);\n",
          "message": "MockEthPCVDeposit.withdraw (MockEthPCVDeposit.sol#53-57) sends eth to arbitrary user\n\tDangerous calls:\n\t- address(to).transfer(amount) (MockEthPCVDeposit.sol#56)\n"
        },
        {
          "name": "pragma",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.2;\n",
          "message": "Different versions of Solidity is used in MockEthPCVDeposit.sol:\n\t- Version used: ['ABIEncoderV2', '^0.6.0', '^0.6.2']\n\t- MockEthPCVDeposit.sol#3 declares pragma solidity^0.6.2\n\t- MockEthPCVDeposit.sol#35 declares pragma solidity^0.6.0\n\t- MockEthPCVDeposit.sol#36 declares pragma experimentalABIEncoderV2\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.2;\n",
          "message": "Detected issues with version pragma in MockEthPCVDeposit.sol:\n\t- pragma solidity^0.6.2 (MockEthPCVDeposit.sol#3): it allows old versions\n\t- pragma solidity^0.6.0 (MockEthPCVDeposit.sol#35): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tconstructor(address payable _beneficiary) public {\n",
          "message": "Parameter '_beneficiary' of MockEthPCVDeposit. (MockEthPCVDeposit.sol#43) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract MockEthPCVDeposit is IPCVDeposit {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tconstructor(address payable _beneficiary) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress payable beneficiary;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 total = 0;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Unprotected Ether Withdrawal (SWC 105)",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "    \tbeneficiary.transfer(amount);\n",
          "message": "Any sender can withdraw Ether from the contract account.\nArbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.\nClassification: SWC-105"
        },
        {
          "name": "Unprotected Ether Withdrawal (SWC 105)",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "        payable(to).transfer(amount);\n",
          "message": "Any sender can withdraw Ether from the contract account.\nArbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.\nClassification: SWC-105"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}