{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_113"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function pay0(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "AppMockUtilContext.pay0 (AppMockUtilContext.sol#9) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function pay1(address, uint, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "AppMockUtilContext.pay1 (AppMockUtilContext.sol#10) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function pay2(address, uint, address, uint, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "AppMockUtilContext.pay2 (AppMockUtilContext.sol#11) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function std0(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "AppMockUtilContext.std0 (AppMockUtilContext.sol#15) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function std1(bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "AppMockUtilContext.std1 (AppMockUtilContext.sol#16) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function std2(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "AppMockUtilContext.std2 (AppMockUtilContext.sol#17) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function emit0(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "AppMockUtilContext.emit0 (AppMockUtilContext.sol#21) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function emit1top0(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "AppMockUtilContext.emit1top0 (AppMockUtilContext.sol#22) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function emit1top0data(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "AppMockUtilContext.emit1top0data (AppMockUtilContext.sol#23) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function emit1top4data(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "AppMockUtilContext.emit1top4data (AppMockUtilContext.sol#24) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function emit2top1data(bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "AppMockUtilContext.emit2top1data (AppMockUtilContext.sol#25) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function emit2top4(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "AppMockUtilContext.emit2top4 (AppMockUtilContext.sol#26) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function req0(bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "AppMockUtilContext.req0 (AppMockUtilContext.sol#30) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function req1(address, uint, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "AppMockUtilContext.req1 (AppMockUtilContext.sol#31) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function req2(bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "AppMockUtilContext.req2 (AppMockUtilContext.sol#32) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function req3(address, uint, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "AppMockUtilContext.req3 (AppMockUtilContext.sol#33) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": 37,
          "vulnerability_code": "  function reqs0(\n\n    address, address, address, address,\n\n    bytes32, bytes memory\n",
          "message": "AppMockUtilContext.reqs0 (AppMockUtilContext.sol#34-37) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": 41,
          "vulnerability_code": "  function reqs1(\n\n    address, uint,\n\n    bytes32, bytes32, bytes32, bytes32, bytes memory\n",
          "message": "AppMockUtilContext.reqs1 (AppMockUtilContext.sol#38-41) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": 45,
          "vulnerability_code": "  function reqs2(\n\n    address, uint, bytes32[4] memory,\n\n    bytes32, bytes32, bytes memory\n",
          "message": "AppMockUtilContext.reqs2 (AppMockUtilContext.sol#42-45) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": 49,
          "vulnerability_code": "  function reqs3(\n\n    address, uint, bytes32,\n\n    bytes32, bytes32, bytes32, bytes32, bytes memory\n",
          "message": "AppMockUtilContext.reqs3 (AppMockUtilContext.sol#46-49) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function inv1(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "AppMockUtilContext.inv1 (AppMockUtilContext.sol#53) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function inv2(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "AppMockUtilContext.inv2 (AppMockUtilContext.sol#54) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function rev0(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "AppMockUtilContext.rev0 (AppMockUtilContext.sol#58) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function rev1(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "AppMockUtilContext.rev1 (AppMockUtilContext.sol#59) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function rev2(bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "AppMockUtilContext.rev2 (AppMockUtilContext.sol#60) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function throws1(bytes memory, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "AppMockUtilContext.throws1 (AppMockUtilContext.sol#61) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function throws2(bytes memory, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "AppMockUtilContext.throws2 (AppMockUtilContext.sol#62) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;\n",
          "message": "Detected issues with version pragma in AppMockUtilContext.sol:\n\t- pragma solidity^0.4.23 (AppMockUtilContext.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function pay0(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '' of AppMockUtilContext.pay0 (AppMockUtilContext.sol#9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function pay1(address, uint, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '' of AppMockUtilContext.pay1 (AppMockUtilContext.sol#10) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function pay1(address, uint, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '_scope_0' of AppMockUtilContext.pay1 (AppMockUtilContext.sol#10) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function pay1(address, uint, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '_scope_1' of AppMockUtilContext.pay1 (AppMockUtilContext.sol#10) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function pay2(address, uint, address, uint, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '' of AppMockUtilContext.pay2 (AppMockUtilContext.sol#11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function pay2(address, uint, address, uint, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '_scope_0' of AppMockUtilContext.pay2 (AppMockUtilContext.sol#11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function pay2(address, uint, address, uint, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '_scope_1' of AppMockUtilContext.pay2 (AppMockUtilContext.sol#11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function pay2(address, uint, address, uint, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '_scope_2' of AppMockUtilContext.pay2 (AppMockUtilContext.sol#11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function pay2(address, uint, address, uint, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '_scope_3' of AppMockUtilContext.pay2 (AppMockUtilContext.sol#11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function std0(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '' of AppMockUtilContext.std0 (AppMockUtilContext.sol#15) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function std1(bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '' of AppMockUtilContext.std1 (AppMockUtilContext.sol#16) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function std1(bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '_scope_0' of AppMockUtilContext.std1 (AppMockUtilContext.sol#16) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function std1(bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '_scope_1' of AppMockUtilContext.std1 (AppMockUtilContext.sol#16) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function std2(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '' of AppMockUtilContext.std2 (AppMockUtilContext.sol#17) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function std2(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '_scope_0' of AppMockUtilContext.std2 (AppMockUtilContext.sol#17) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function std2(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '_scope_1' of AppMockUtilContext.std2 (AppMockUtilContext.sol#17) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function std2(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '_scope_2' of AppMockUtilContext.std2 (AppMockUtilContext.sol#17) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function std2(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '_scope_3' of AppMockUtilContext.std2 (AppMockUtilContext.sol#17) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function emit0(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '' of AppMockUtilContext.emit0 (AppMockUtilContext.sol#21) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function emit1top0(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '' of AppMockUtilContext.emit1top0 (AppMockUtilContext.sol#22) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function emit1top0data(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '' of AppMockUtilContext.emit1top0data (AppMockUtilContext.sol#23) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function emit1top4data(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '' of AppMockUtilContext.emit1top4data (AppMockUtilContext.sol#24) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function emit1top4data(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '_scope_0' of AppMockUtilContext.emit1top4data (AppMockUtilContext.sol#24) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function emit1top4data(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '_scope_1' of AppMockUtilContext.emit1top4data (AppMockUtilContext.sol#24) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function emit1top4data(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '_scope_2' of AppMockUtilContext.emit1top4data (AppMockUtilContext.sol#24) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function emit1top4data(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '_scope_3' of AppMockUtilContext.emit1top4data (AppMockUtilContext.sol#24) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function emit2top1data(bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '' of AppMockUtilContext.emit2top1data (AppMockUtilContext.sol#25) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function emit2top1data(bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '_scope_0' of AppMockUtilContext.emit2top1data (AppMockUtilContext.sol#25) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function emit2top4(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '' of AppMockUtilContext.emit2top4 (AppMockUtilContext.sol#26) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function emit2top4(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '_scope_0' of AppMockUtilContext.emit2top4 (AppMockUtilContext.sol#26) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function emit2top4(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '_scope_1' of AppMockUtilContext.emit2top4 (AppMockUtilContext.sol#26) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function emit2top4(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '_scope_2' of AppMockUtilContext.emit2top4 (AppMockUtilContext.sol#26) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function emit2top4(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '_scope_3' of AppMockUtilContext.emit2top4 (AppMockUtilContext.sol#26) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function req0(bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '' of AppMockUtilContext.req0 (AppMockUtilContext.sol#30) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function req0(bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '_scope_0' of AppMockUtilContext.req0 (AppMockUtilContext.sol#30) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function req1(address, uint, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '' of AppMockUtilContext.req1 (AppMockUtilContext.sol#31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function req1(address, uint, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '_scope_0' of AppMockUtilContext.req1 (AppMockUtilContext.sol#31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function req1(address, uint, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '_scope_1' of AppMockUtilContext.req1 (AppMockUtilContext.sol#31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function req1(address, uint, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '_scope_2' of AppMockUtilContext.req1 (AppMockUtilContext.sol#31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function req1(address, uint, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '_scope_3' of AppMockUtilContext.req1 (AppMockUtilContext.sol#31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function req2(bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '' of AppMockUtilContext.req2 (AppMockUtilContext.sol#32) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function req2(bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '_scope_0' of AppMockUtilContext.req2 (AppMockUtilContext.sol#32) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function req2(bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '_scope_1' of AppMockUtilContext.req2 (AppMockUtilContext.sol#32) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function req2(bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '_scope_2' of AppMockUtilContext.req2 (AppMockUtilContext.sol#32) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function req3(address, uint, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '' of AppMockUtilContext.req3 (AppMockUtilContext.sol#33) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function req3(address, uint, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '_scope_0' of AppMockUtilContext.req3 (AppMockUtilContext.sol#33) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function req3(address, uint, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '_scope_1' of AppMockUtilContext.req3 (AppMockUtilContext.sol#33) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function req3(address, uint, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '_scope_2' of AppMockUtilContext.req3 (AppMockUtilContext.sol#33) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address, address, address, address,\n",
          "message": "Parameter '' of AppMockUtilContext.reqs0 (AppMockUtilContext.sol#35) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address, address, address, address,\n",
          "message": "Parameter '_scope_0' of AppMockUtilContext.reqs0 (AppMockUtilContext.sol#35) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address, address, address, address,\n",
          "message": "Parameter '_scope_1' of AppMockUtilContext.reqs0 (AppMockUtilContext.sol#35) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address, address, address, address,\n",
          "message": "Parameter '_scope_2' of AppMockUtilContext.reqs0 (AppMockUtilContext.sol#35) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32, bytes memory\n",
          "message": "Parameter '_scope_3' of AppMockUtilContext.reqs0 (AppMockUtilContext.sol#36) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32, bytes memory\n",
          "message": "Parameter '_scope_4' of AppMockUtilContext.reqs0 (AppMockUtilContext.sol#36) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address, uint,\n",
          "message": "Parameter '' of AppMockUtilContext.reqs1 (AppMockUtilContext.sol#39) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address, uint,\n",
          "message": "Parameter '_scope_0' of AppMockUtilContext.reqs1 (AppMockUtilContext.sol#39) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32, bytes32, bytes32, bytes32, bytes memory\n",
          "message": "Parameter '_scope_1' of AppMockUtilContext.reqs1 (AppMockUtilContext.sol#40) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32, bytes32, bytes32, bytes32, bytes memory\n",
          "message": "Parameter '_scope_2' of AppMockUtilContext.reqs1 (AppMockUtilContext.sol#40) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32, bytes32, bytes32, bytes32, bytes memory\n",
          "message": "Parameter '_scope_3' of AppMockUtilContext.reqs1 (AppMockUtilContext.sol#40) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32, bytes32, bytes32, bytes32, bytes memory\n",
          "message": "Parameter '_scope_4' of AppMockUtilContext.reqs1 (AppMockUtilContext.sol#40) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32, bytes32, bytes32, bytes32, bytes memory\n",
          "message": "Parameter '_scope_5' of AppMockUtilContext.reqs1 (AppMockUtilContext.sol#40) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address, uint, bytes32[4] memory,\n",
          "message": "Parameter '' of AppMockUtilContext.reqs2 (AppMockUtilContext.sol#43) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address, uint, bytes32[4] memory,\n",
          "message": "Parameter '_scope_0' of AppMockUtilContext.reqs2 (AppMockUtilContext.sol#43) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address, uint, bytes32[4] memory,\n",
          "message": "Parameter '_scope_1' of AppMockUtilContext.reqs2 (AppMockUtilContext.sol#43) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32, bytes32, bytes memory\n",
          "message": "Parameter '_scope_2' of AppMockUtilContext.reqs2 (AppMockUtilContext.sol#44) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32, bytes32, bytes memory\n",
          "message": "Parameter '_scope_3' of AppMockUtilContext.reqs2 (AppMockUtilContext.sol#44) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32, bytes32, bytes memory\n",
          "message": "Parameter '_scope_4' of AppMockUtilContext.reqs2 (AppMockUtilContext.sol#44) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address, uint, bytes32,\n",
          "message": "Parameter '' of AppMockUtilContext.reqs3 (AppMockUtilContext.sol#47) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address, uint, bytes32,\n",
          "message": "Parameter '_scope_0' of AppMockUtilContext.reqs3 (AppMockUtilContext.sol#47) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address, uint, bytes32,\n",
          "message": "Parameter '_scope_1' of AppMockUtilContext.reqs3 (AppMockUtilContext.sol#47) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32, bytes32, bytes32, bytes32, bytes memory\n",
          "message": "Parameter '_scope_2' of AppMockUtilContext.reqs3 (AppMockUtilContext.sol#48) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32, bytes32, bytes32, bytes32, bytes memory\n",
          "message": "Parameter '_scope_3' of AppMockUtilContext.reqs3 (AppMockUtilContext.sol#48) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32, bytes32, bytes32, bytes32, bytes memory\n",
          "message": "Parameter '_scope_4' of AppMockUtilContext.reqs3 (AppMockUtilContext.sol#48) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32, bytes32, bytes32, bytes32, bytes memory\n",
          "message": "Parameter '_scope_5' of AppMockUtilContext.reqs3 (AppMockUtilContext.sol#48) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32, bytes32, bytes32, bytes32, bytes memory\n",
          "message": "Parameter '_scope_6' of AppMockUtilContext.reqs3 (AppMockUtilContext.sol#48) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function inv1(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '' of AppMockUtilContext.inv1 (AppMockUtilContext.sol#53) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function inv2(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '' of AppMockUtilContext.inv2 (AppMockUtilContext.sol#54) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function rev0(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '' of AppMockUtilContext.rev0 (AppMockUtilContext.sol#58) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function rev1(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '' of AppMockUtilContext.rev1 (AppMockUtilContext.sol#59) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function rev2(bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '' of AppMockUtilContext.rev2 (AppMockUtilContext.sol#60) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function rev2(bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '_scope_0' of AppMockUtilContext.rev2 (AppMockUtilContext.sol#60) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function throws1(bytes memory, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '' of AppMockUtilContext.throws1 (AppMockUtilContext.sol#61) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function throws1(bytes memory, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '_scope_0' of AppMockUtilContext.throws1 (AppMockUtilContext.sol#61) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function throws2(bytes memory, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '' of AppMockUtilContext.throws2 (AppMockUtilContext.sol#62) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function throws2(bytes memory, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '_scope_0' of AppMockUtilContext.throws2 (AppMockUtilContext.sol#62) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function req2(bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function req2(bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function req0(bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function rev2(bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function emit1top0(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function pay2(address, uint, address, uint, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function reqs1(\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function throws1(bytes memory, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function rev1(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function emit1top0data(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function rev0(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function reqs2(\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function inv1(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function pay1(address, uint, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function pay0(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function emit2top1data(bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function req1(address, uint, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function std1(bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function emit2top4(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function emit0(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function std0(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function inv2(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function req3(address, uint, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function reqs0(\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function std2(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function reqs3(\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function emit1top4data(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function throws2(bytes memory, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}