{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_app_storage != 0, 'Invalid input');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(success, 'Execution failed');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 184,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_app_name != 0 && _init_calldata.length >= 4, 'invalid input');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 300,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_index != 0 && _implementation != 0, 'Invalid input');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 306,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(exec_id != 0, 'Invalid response from storage');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_app_name != 0 && _index != 0, 'Invalid input');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 333,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_selectors.length == _implementations.length && _selectors.length != 0, 'Invalid input');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 335,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(app_storage != 0 && registry_exec_id != 0 && provider != 0, 'Invalid state');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 344,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(emitted == 0 && paid == 0 && stored != 0, 'Invalid state change');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 357,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_app_name != 0 && _version_name != 0 && _index != 0, 'Invalid input');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 358,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_selectors.length == _implementations.length && _selectors.length != 0, 'Invalid input');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 360,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(app_storage != 0 && registry_exec_id != 0 && provider != 0, 'Invalid state');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 369,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(emitted == 0 && paid == 0 && stored != 0, 'Invalid state change');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 184,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_app_name != 0 && _init_calldata.length >= 4, 'invalid input');\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 300,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_index != 0 && _implementation != 0, 'Invalid input');\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_app_name != 0 && _index != 0, 'Invalid input');\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 333,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_selectors.length == _implementations.length && _selectors.length != 0, 'Invalid input');\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 335,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(app_storage != 0 && registry_exec_id != 0 && provider != 0, 'Invalid state');\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 344,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(emitted == 0 && paid == 0 && stored != 0, 'Invalid state change');\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 357,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_app_name != 0 && _version_name != 0 && _index != 0, 'Invalid input');\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 358,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_selectors.length == _implementations.length && _selectors.length != 0, 'Invalid input');\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 360,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(app_storage != 0 && registry_exec_id != 0 && provider != 0, 'Invalid state');\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 369,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(emitted == 0 && paid == 0 && stored != 0, 'Invalid state change');\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_65"
      ],
      "vulnerability_findings": [
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": 121,
          "vulnerability_code": "  function exec(bytes32 _exec_id, bytes _calldata) external payable returns (bool success) {\n\n    // Call 'exec' in AbstractStorage, passing in the sender's address, the app exec id, and the calldata to forward -\n\n    if (address(app_storage).call.value(msg.value)(abi.encodeWithSelector(\n\n      EXEC_SEL, msg.sender, _exec_id, _calldata\n\n    )) == false) {\n\n      // Call failed - emit error message from storage and return 'false'\n\n      checkErrors(_exec_id);\n\n      // Return unspent wei to sender\n\n      address(msg.sender).transfer(address(this).balance);\n\n      return false;\n\n    }\n\n\n\n    // Get returned data\n\n    success = checkReturn();\n\n    // If execution failed,\n\n    require(success, 'Execution failed');\n\n\n\n    // Transfer any returned wei back to the sender\n\n    address(msg.sender).transfer(address(this).balance);\n",
          "message": "ScriptExec.exec (RegistryExec.sol#102-121) sends eth to arbitrary user\n\tDangerous calls:\n\t- address(msg.sender).transfer(address(this).balance) (RegistryExec.sol#110)\n\t- address(msg.sender).transfer(address(this).balance) (RegistryExec.sol#120)\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 126,
          "vulnerability_to_line": 131,
          "vulnerability_code": "  function getAction(uint _ptr) internal pure returns (bytes4 action) {\n\n    assembly {\n\n      // Get the first 4 bytes stored at the pointer, and clean the rest of the bytes remaining\n\n      action := and(mload(_ptr), 0xffffffff00000000000000000000000000000000000000000000000000000000)\n\n    }\n",
          "message": "ScriptExec.getAction (RegistryExec.sol#126-131) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": 171,
          "vulnerability_code": "  function checkReturn() internal pure returns (bool success) {\n\n    success = false;\n\n    assembly {\n\n      // returndata size must be 0x60 bytes\n\n      if eq(returndatasize, 0x60) {\n\n        // Copy returned data to pointer and check that at least one value is nonzero\n\n        let ptr := mload(0x40)\n\n        returndatacopy(ptr, 0, returndatasize)\n\n        if iszero(iszero(mload(ptr))) { success := 1 }\n\n        if iszero(iszero(mload(add(0x20, ptr)))) { success := 1 }\n\n        if iszero(iszero(mload(add(0x40, ptr)))) { success := 1 }\n\n      }\n\n    }\n\n    return success;\n",
          "message": "ScriptExec.checkReturn (RegistryExec.sol#157-171) is declared view but contains assembly code\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": 198,
          "vulnerability_code": "  function createAppInstance(bytes32 _app_name, bytes _init_calldata) external returns (bytes32 exec_id, bytes32 version) {\n\n    require(_app_name != 0 && _init_calldata.length >= 4, 'invalid input');\n\n    (exec_id, version) = StorageInterface(app_storage).createInstance(\n\n      msg.sender, _app_name, provider, registry_exec_id, _init_calldata\n\n    );\n\n    // Set various app metadata values -\n\n    deployed_by[exec_id] = msg.sender;\n\n    app_instances[_app_name].push(exec_id);\n\n    Instance memory inst = Instance(\n\n      provider, registry_exec_id, exec_id, _app_name, version\n\n    );\n\n    instance_info[exec_id] = inst;\n\n    deployed_instances[msg.sender].push(inst);\n\n    // Emit event -\n\n    emit AppInstanceCreated(msg.sender, exec_id, _app_name, version);\n",
          "message": "Reentrancy in ScriptExec.createAppInstance (RegistryExec.sol#183-198):\n\tExternal calls:\n\t- (exec_id,version) = StorageInterface(app_storage).createInstance(msg.sender,_app_name,provider,registry_exec_id,_init_calldata) (RegistryExec.sol#185-187)\n\tState variables written after the call(s):\n\t- app_instances (RegistryExec.sol#190)\n\t- deployed_by (RegistryExec.sol#189)\n\t- deployed_instances (RegistryExec.sol#195)\n\t- instance_info (RegistryExec.sol#194)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 298,
          "vulnerability_to_line": 321,
          "vulnerability_code": "  function createRegistryInstance(address _index, address _implementation) external onlyAdmin() returns (bytes32 exec_id) {\n\n    // Validate input -\n\n    require(_index != 0 && _implementation != 0, 'Invalid input');\n\n\n\n    // Creates a registry from storage and returns the registry exec id -\n\n    exec_id = StorageInterface(app_storage).createRegistry(_index, _implementation);\n\n\n\n    // Ensure a valid execution id returned from storage -\n\n    require(exec_id != 0, 'Invalid response from storage');\n\n\n\n    // If there is not already a default registry exec id set, set it\n\n    if (registry_exec_id == 0)\n\n      registry_exec_id = exec_id;\n\n\n\n    // Create Registry struct in memory -\n\n    Registry memory reg = Registry(_index, _implementation);\n\n\n\n    // Set various app metadata values -\n\n    deployed_by[exec_id] = msg.sender;\n\n    registry_instance_info[exec_id] = reg;\n\n    deployed_registry_instances[msg.sender].push(reg);\n\n    // Emit event -\n\n    emit RegistryInstanceCreated(msg.sender, exec_id, _index, _implementation);\n",
          "message": "Reentrancy in RegistryExec.createRegistryInstance (RegistryExec.sol#298-321):\n\tExternal calls:\n\t- exec_id = StorageInterface(app_storage).createRegistry(_index,_implementation) (RegistryExec.sol#303)\n\tState variables written after the call(s):\n\t- deployed_by (RegistryExec.sol#316)\n\t- deployed_registry_instances (RegistryExec.sol#318)\n\t- registry_exec_id (RegistryExec.sol#310)\n\t- registry_instance_info (RegistryExec.sol#317)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 126,
          "vulnerability_to_line": 131,
          "vulnerability_code": "  function getAction(uint _ptr) internal pure returns (bytes4 action) {\n\n    assembly {\n\n      // Get the first 4 bytes stored at the pointer, and clean the rest of the bytes remaining\n\n      action := and(mload(_ptr), 0xffffffff00000000000000000000000000000000000000000000000000000000)\n\n    }\n",
          "message": "ScriptExec.getAction uses assembly (RegistryExec.sol#126-131)\n\t- RegistryExec.sol#127-131\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": 154,
          "vulnerability_code": "  function checkErrors(bytes32 _exec_id) internal {\n\n    // If the returned data begins with selector 'Error(string)', get the contained message -\n\n    string memory message;\n\n    bytes4 err_sel = ERR;\n\n    assembly {\n\n      // Get pointer to free memory, place returned data at pointer, and update free memory pointer\n\n      let ptr := mload(0x40)\n\n      returndatacopy(ptr, 0, returndatasize)\n\n      mstore(0x40, add(ptr, returndatasize))\n\n\n\n      // Check value at pointer for equality with Error selector -\n\n      if eq(mload(ptr), and(err_sel, 0xffffffff00000000000000000000000000000000000000000000000000000000)) {\n\n        message := add(0x24, ptr)\n\n      }\n\n    }\n\n    // If no returned message exists, emit a default error message. Otherwise, emit the error message\n\n    if (bytes(message).length == 0)\n\n      emit StorageException(_exec_id, \"No error recieved\");\n\n    else\n\n      emit StorageException(_exec_id, message);\n",
          "message": "ScriptExec.checkErrors uses assembly (RegistryExec.sol#134-154)\n\t- RegistryExec.sol#138-150\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": 171,
          "vulnerability_code": "  function checkReturn() internal pure returns (bool success) {\n\n    success = false;\n\n    assembly {\n\n      // returndata size must be 0x60 bytes\n\n      if eq(returndatasize, 0x60) {\n\n        // Copy returned data to pointer and check that at least one value is nonzero\n\n        let ptr := mload(0x40)\n\n        returndatacopy(ptr, 0, returndatasize)\n\n        if iszero(iszero(mload(ptr))) { success := 1 }\n\n        if iszero(iszero(mload(add(0x20, ptr)))) { success := 1 }\n\n        if iszero(iszero(mload(add(0x40, ptr)))) { success := 1 }\n\n      }\n\n    }\n\n    return success;\n",
          "message": "ScriptExec.checkReturn uses assembly (RegistryExec.sol#157-171)\n\t- RegistryExec.sol#159-170\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function () public payable { }\n",
          "message": "ScriptExec.fallback (RegistryExec.sol#72) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": 89,
          "vulnerability_code": "  function configure(address _exec_admin, address _app_storage, address _provider) public {\n\n    require(_app_storage != 0, 'Invalid input');\n\n    exec_admin = _exec_admin;\n\n    app_storage = _app_storage;\n\n    provider = _provider;\n\n\n\n    if (exec_admin == 0)\n\n      exec_admin = msg.sender;\n",
          "message": "ScriptExec.configure (RegistryExec.sol#81-89) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 206,
          "vulnerability_to_line": 208,
          "vulnerability_code": "  function setRegistryExecID(bytes32 _exec_id) public onlyAdmin() {\n\n    registry_exec_id = _exec_id;\n",
          "message": "ScriptExec.setRegistryExecID (RegistryExec.sol#206-208) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 214,
          "vulnerability_to_line": 216,
          "vulnerability_code": "  function setProvider(address _provider) public onlyAdmin() {\n\n    provider = _provider;\n",
          "message": "ScriptExec.setProvider (RegistryExec.sol#214-216) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 219,
          "vulnerability_to_line": 222,
          "vulnerability_code": "  function setAdmin(address _admin) public onlyAdmin() {\n\n    require(_admin != 0);\n\n    exec_admin = _admin;\n",
          "message": "ScriptExec.setAdmin (RegistryExec.sol#219-222) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 227,
          "vulnerability_to_line": 229,
          "vulnerability_code": "  function getInstances(bytes32 _app_name) public view returns (bytes32[] memory) {\n\n    return app_instances[_app_name];\n",
          "message": "ScriptExec.getInstances (RegistryExec.sol#227-229) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 236,
          "vulnerability_to_line": 238,
          "vulnerability_code": "  function getDeployedLength(address _deployer) public view returns (uint) {\n\n    return deployed_instances[_deployer].length;\n",
          "message": "ScriptExec.getDeployedLength (RegistryExec.sol#236-238) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 248,
          "vulnerability_to_line": 251,
          "vulnerability_code": "  function getRegistryImplementation() public view returns (address indx, address implementation) {\n\n    indx = StorageInterface(app_storage).getIndex(registry_exec_id);\n\n    implementation = StorageInterface(app_storage).getTarget(registry_exec_id, REGISTER_APP_SEL);\n",
          "message": "ScriptExec.getRegistryImplementation (RegistryExec.sol#248-251) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 260,
          "vulnerability_to_line": 267,
          "vulnerability_code": "  function getInstanceImplementation(bytes32 _exec_id) public view\n\n  returns (address index, bytes4[] memory functions, address[] memory implementations) {\n\n    Instance memory app = instance_info[_exec_id];\n\n    index = StorageInterface(app_storage).getIndex(app.current_registry_exec_id);\n\n    (index, functions, implementations) = RegistryInterface(index).getVersionImplementation(\n\n      app_storage, app.current_registry_exec_id, app.current_provider, app.app_name, app.version_name\n\n    );\n",
          "message": "ScriptExec.getInstanceImplementation (RegistryExec.sol#260-267) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;\n",
          "message": "Detected issues with version pragma in RegistryExec.sol:\n\t- pragma solidity^0.4.23 (RegistryExec.sol#3): it allows old versions\n\t- pragma solidity^0.4.23 (RegistryExec.sol#18): it allows old versions\n\t- pragma solidity^0.4.23 (RegistryExec.sol#29): it allows old versions\n\t- pragma solidity^0.4.23 (RegistryExec.sol#272): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": 121,
          "vulnerability_code": "  function exec(bytes32 _exec_id, bytes _calldata) external payable returns (bool success) {\n\n    // Call 'exec' in AbstractStorage, passing in the sender's address, the app exec id, and the calldata to forward -\n\n    if (address(app_storage).call.value(msg.value)(abi.encodeWithSelector(\n\n      EXEC_SEL, msg.sender, _exec_id, _calldata\n\n    )) == false) {\n\n      // Call failed - emit error message from storage and return 'false'\n\n      checkErrors(_exec_id);\n\n      // Return unspent wei to sender\n\n      address(msg.sender).transfer(address(this).balance);\n\n      return false;\n\n    }\n\n\n\n    // Get returned data\n\n    success = checkReturn();\n\n    // If execution failed,\n\n    require(success, 'Execution failed');\n\n\n\n    // Transfer any returned wei back to the sender\n\n    address(msg.sender).transfer(address(this).balance);\n",
          "message": "Low level call in ScriptExec.exec (RegistryExec.sol#102-121):\n\t-address(app_storage).call.value(msg.value)(abi.encodeWithSelector(EXEC_SEL,msg.sender,_exec_id,_calldata)) == false RegistryExec.sol#104-112\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getTarget(bytes32 exec_id, bytes4 selector)\n",
          "message": "Parameter 'exec_id' of StorageInterface.getTarget (RegistryExec.sol#6) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getIndex(bytes32 exec_id) external view returns (address index);\n",
          "message": "Parameter 'exec_id' of StorageInterface.getIndex (RegistryExec.sol#8) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function createInstance(address sender, bytes32 app_name, address provider, bytes32 registry_exec_id, bytes calldata)\n",
          "message": "Parameter 'app_name' of StorageInterface.createInstance (RegistryExec.sol#9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function createInstance(address sender, bytes32 app_name, address provider, bytes32 registry_exec_id, bytes calldata)\n",
          "message": "Parameter 'registry_exec_id' of StorageInterface.createInstance (RegistryExec.sol#9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function exec(address sender, bytes32 exec_id, bytes calldata)\n",
          "message": "Parameter 'exec_id' of StorageInterface.exec (RegistryExec.sol#12) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getLatestVersion(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name)\n",
          "message": "Parameter 'stor_addr' of RegistryInterface.getLatestVersion (RegistryExec.sol#21) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getLatestVersion(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name)\n",
          "message": "Parameter 'exec_id' of RegistryInterface.getLatestVersion (RegistryExec.sol#21) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getLatestVersion(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name)\n",
          "message": "Parameter 'app_name' of RegistryInterface.getLatestVersion (RegistryExec.sol#21) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getVersionImplementation(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name, bytes32 version_name)\n",
          "message": "Parameter 'stor_addr' of RegistryInterface.getVersionImplementation (RegistryExec.sol#23) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getVersionImplementation(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name, bytes32 version_name)\n",
          "message": "Parameter 'exec_id' of RegistryInterface.getVersionImplementation (RegistryExec.sol#23) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getVersionImplementation(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name, bytes32 version_name)\n",
          "message": "Parameter 'app_name' of RegistryInterface.getVersionImplementation (RegistryExec.sol#23) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getVersionImplementation(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name, bytes32 version_name)\n",
          "message": "Parameter 'version_name' of RegistryInterface.getVersionImplementation (RegistryExec.sol#23) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function configure(address _exec_admin, address _app_storage, address _provider) public {\n",
          "message": "Parameter '_exec_admin' of ScriptExec.configure (RegistryExec.sol#81) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function configure(address _exec_admin, address _app_storage, address _provider) public {\n",
          "message": "Parameter '_app_storage' of ScriptExec.configure (RegistryExec.sol#81) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function configure(address _exec_admin, address _app_storage, address _provider) public {\n",
          "message": "Parameter '_provider' of ScriptExec.configure (RegistryExec.sol#81) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function exec(bytes32 _exec_id, bytes _calldata) external payable returns (bool success) {\n",
          "message": "Parameter '_exec_id' of ScriptExec.exec (RegistryExec.sol#102) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function exec(bytes32 _exec_id, bytes _calldata) external payable returns (bool success) {\n",
          "message": "Parameter '_calldata' of ScriptExec.exec (RegistryExec.sol#102) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function checkErrors(bytes32 _exec_id) internal {\n",
          "message": "Parameter '_exec_id' of ScriptExec.checkErrors (RegistryExec.sol#134) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function createAppInstance(bytes32 _app_name, bytes _init_calldata) external returns (bytes32 exec_id, bytes32 version) {\n",
          "message": "Parameter '_app_name' of ScriptExec.createAppInstance (RegistryExec.sol#183) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function createAppInstance(bytes32 _app_name, bytes _init_calldata) external returns (bytes32 exec_id, bytes32 version) {\n",
          "message": "Parameter '_init_calldata' of ScriptExec.createAppInstance (RegistryExec.sol#183) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 206,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setRegistryExecID(bytes32 _exec_id) public onlyAdmin() {\n",
          "message": "Parameter '_exec_id' of ScriptExec.setRegistryExecID (RegistryExec.sol#206) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 214,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setProvider(address _provider) public onlyAdmin() {\n",
          "message": "Parameter '_provider' of ScriptExec.setProvider (RegistryExec.sol#214) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 219,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setAdmin(address _admin) public onlyAdmin() {\n",
          "message": "Parameter '_admin' of ScriptExec.setAdmin (RegistryExec.sol#219) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 227,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getInstances(bytes32 _app_name) public view returns (bytes32[] memory) {\n",
          "message": "Parameter '_app_name' of ScriptExec.getInstances (RegistryExec.sol#227) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 236,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getDeployedLength(address _deployer) public view returns (uint) {\n",
          "message": "Parameter '_deployer' of ScriptExec.getDeployedLength (RegistryExec.sol#236) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 260,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getInstanceImplementation(bytes32 _exec_id) public view\n",
          "message": "Parameter '_exec_id' of ScriptExec.getInstanceImplementation (RegistryExec.sol#260) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public app_storage;\n",
          "message": "Variable 'ScriptExec.app_storage' (RegistryExec.sol#36) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bytes32 public registry_exec_id;\n",
          "message": "Variable 'ScriptExec.registry_exec_id' (RegistryExec.sol#38) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public exec_admin;\n",
          "message": "Variable 'ScriptExec.exec_admin' (RegistryExec.sol#39) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping (bytes32 => address) public deployed_by;\n",
          "message": "Variable 'ScriptExec.deployed_by' (RegistryExec.sol#52) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping (bytes32 => Instance) public instance_info;\n",
          "message": "Variable 'ScriptExec.instance_info' (RegistryExec.sol#54) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping (address => Instance[]) public deployed_instances;\n",
          "message": "Variable 'ScriptExec.deployed_instances' (RegistryExec.sol#56) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping (bytes32 => bytes32[]) public app_instances;\n",
          "message": "Variable 'ScriptExec.app_instances' (RegistryExec.sol#58) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 298,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function createRegistryInstance(address _index, address _implementation) external onlyAdmin() returns (bytes32 exec_id) {\n",
          "message": "Parameter '_index' of RegistryExec.createRegistryInstance (RegistryExec.sol#298) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 298,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function createRegistryInstance(address _index, address _implementation) external onlyAdmin() returns (bytes32 exec_id) {\n",
          "message": "Parameter '_implementation' of RegistryExec.createRegistryInstance (RegistryExec.sol#298) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 330,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function registerApp(bytes32 _app_name, address _index, bytes4[] _selectors, address[] _implementations) external onlyAdmin() {\n",
          "message": "Parameter '_app_name' of RegistryExec.registerApp (RegistryExec.sol#330) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 330,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function registerApp(bytes32 _app_name, address _index, bytes4[] _selectors, address[] _implementations) external onlyAdmin() {\n",
          "message": "Parameter '_index' of RegistryExec.registerApp (RegistryExec.sol#330) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 330,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function registerApp(bytes32 _app_name, address _index, bytes4[] _selectors, address[] _implementations) external onlyAdmin() {\n",
          "message": "Parameter '_selectors' of RegistryExec.registerApp (RegistryExec.sol#330) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 330,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function registerApp(bytes32 _app_name, address _index, bytes4[] _selectors, address[] _implementations) external onlyAdmin() {\n",
          "message": "Parameter '_implementations' of RegistryExec.registerApp (RegistryExec.sol#330) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 355,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function registerAppVersion(bytes32 _app_name, bytes32 _version_name, address _index, bytes4[] _selectors, address[] _implementations) external onlyAdmin() {\n",
          "message": "Parameter '_app_name' of RegistryExec.registerAppVersion (RegistryExec.sol#355) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 355,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function registerAppVersion(bytes32 _app_name, bytes32 _version_name, address _index, bytes4[] _selectors, address[] _implementations) external onlyAdmin() {\n",
          "message": "Parameter '_version_name' of RegistryExec.registerAppVersion (RegistryExec.sol#355) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 355,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function registerAppVersion(bytes32 _app_name, bytes32 _version_name, address _index, bytes4[] _selectors, address[] _implementations) external onlyAdmin() {\n",
          "message": "Parameter '_index' of RegistryExec.registerAppVersion (RegistryExec.sol#355) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 355,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function registerAppVersion(bytes32 _app_name, bytes32 _version_name, address _index, bytes4[] _selectors, address[] _implementations) external onlyAdmin() {\n",
          "message": "Parameter '_selectors' of RegistryExec.registerAppVersion (RegistryExec.sol#355) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 355,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function registerAppVersion(bytes32 _app_name, bytes32 _version_name, address _index, bytes4[] _selectors, address[] _implementations) external onlyAdmin() {\n",
          "message": "Parameter '_implementations' of RegistryExec.registerAppVersion (RegistryExec.sol#355) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 282,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping (bytes32 => Registry) public registry_instance_info;\n",
          "message": "Variable 'RegistryExec.registry_instance_info' (RegistryExec.sol#282) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 284,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping (address => Registry[]) public deployed_registry_instances;\n",
          "message": "Variable 'RegistryExec.deployed_registry_instances' (RegistryExec.sol#284) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 126,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getAction(uint _ptr) internal pure returns (bytes4 action) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 272,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 126,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getAction(uint _ptr) internal pure returns (bytes4 action) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function checkReturn() internal pure returns (bool success) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function () public payable { }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 127,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 159,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 317,
          "vulnerability_to_line": null,
          "vulnerability_code": "    registry_instance_info[exec_id] = reg;\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "// File: ../sc_datasets/DAppSCAN/PepperSec-POA-Network-Wizard/core-cebb1089c417a8e26bd97a44f7234bdb9d0bd781/contracts/interfaces/StorageInterface.sol\n",
          "message": null
        },
        {
          "name": "Transaction-Ordering Dependence (TOD)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function exec(bytes32 _exec_id, bytes _calldata) external payable returns (bool success) {\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "// File: ../sc_datasets/DAppSCAN/PepperSec-POA-Network-Wizard/core-cebb1089c417a8e26bd97a44f7234bdb9d0bd781/contracts/interfaces/StorageInterface.sol\n",
          "message": null
        },
        {
          "name": "Transaction-Ordering Dependence (TOD)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "// File: ../sc_datasets/DAppSCAN/PepperSec-POA-Network-Wizard/core-cebb1089c417a8e26bd97a44f7234bdb9d0bd781/contracts/interfaces/StorageInterface.sol\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "    if (address(app_storage).call.value(msg.value)(abi.encodeWithSelector(\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 185,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (exec_id, version) = StorageInterface(app_storage).createInstance(\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 227,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getInstances(bytes32 _app_name) public view returns (bytes32[] memory) {\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "    return app_instances[_app_name];\n",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "    if (address(app_storage).call.value(msg.value)(abi.encodeWithSelector(\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "    if (address(app_storage).call.value(msg.value)(abi.encodeWithSelector(\n",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "// File: ../sc_datasets/DAppSCAN/PepperSec-POA-Network-Wizard/core-cebb1089c417a8e26bd97a44f7234bdb9d0bd781/contracts/interfaces/StorageInterface.sol\n",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "// File: ../sc_datasets/DAppSCAN/PepperSec-POA-Network-Wizard/core-cebb1089c417a8e26bd97a44f7234bdb9d0bd781/contracts/interfaces/StorageInterface.sol\n",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 185,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (exec_id, version) = StorageInterface(app_storage).createInstance(\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "// File: ../sc_datasets/DAppSCAN/PepperSec-POA-Network-Wizard/core-cebb1089c417a8e26bd97a44f7234bdb9d0bd781/contracts/interfaces/StorageInterface.sol\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "    if (address(app_storage).call.value(msg.value)(abi.encodeWithSelector(\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 185,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (exec_id, version) = StorageInterface(app_storage).createInstance(\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 227,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getInstances(bytes32 _app_name) public view returns (bytes32[] memory) {\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "    return app_instances[_app_name];\n",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "    if (address(app_storage).call.value(msg.value)(abi.encodeWithSelector(\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "    if (address(app_storage).call.value(msg.value)(abi.encodeWithSelector(\n",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "// File: ../sc_datasets/DAppSCAN/PepperSec-POA-Network-Wizard/core-cebb1089c417a8e26bd97a44f7234bdb9d0bd781/contracts/interfaces/StorageInterface.sol\n",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "// File: ../sc_datasets/DAppSCAN/PepperSec-POA-Network-Wizard/core-cebb1089c417a8e26bd97a44f7234bdb9d0bd781/contracts/interfaces/StorageInterface.sol\n",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 185,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (exec_id, version) = StorageInterface(app_storage).createInstance(\n",
          "message": null
        }
      ]
    }
  }
}