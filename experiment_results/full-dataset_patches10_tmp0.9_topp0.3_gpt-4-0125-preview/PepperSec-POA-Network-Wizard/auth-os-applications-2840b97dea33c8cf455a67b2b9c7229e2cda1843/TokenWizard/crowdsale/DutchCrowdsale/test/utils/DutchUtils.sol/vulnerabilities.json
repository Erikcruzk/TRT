{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_49"
      ],
      "vulnerability_findings": [
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": 51,
          "vulnerability_code": "contract DutchUtils {\n\n\n\n  function getSelectors() public pure returns (bytes4[] memory selectors) {\n\n    selectors = new bytes4[](13);\n\n\n\n    selectors[0] = this.initializeCrowdsale.selector;\n\n    selectors[1] = this.finalizeCrowdsale.selector;\n\n    selectors[2] = this.updateGlobalMinContribution.selector;\n\n    selectors[3] = this.whitelistMulti.selector;\n\n    selectors[4] = this.setCrowdsaleStartandDuration.selector;\n\n    selectors[5] = this.initCrowdsaleToken.selector;\n\n    selectors[6] = this.setTransferAgentStatus.selector;\n\n\n\n    selectors[7] = this.buy.selector;\n\n\n\n    selectors[8] = bytes4(keccak256('transfer(address,uint256)'));\n\n    selectors[9] = this.transferFrom.selector;\n\n    selectors[10] = this.approve.selector;\n\n    selectors[11] = this.increaseApproval.selector;\n\n    selectors[12] = this.decreaseApproval.selector;\n\n  }\n\n\n\n  // Admin\n\n  function initializeCrowdsale() public pure returns (bytes) { return msg.data; }\n\n  function finalizeCrowdsale() public pure returns (bytes) { return msg.data; }\n\n  function updateGlobalMinContribution(uint) public pure returns (bytes) { return msg.data; }\n\n  function whitelistMulti(address[], uint[], uint[]) public pure returns (bytes) { return msg.data; }\n\n  function setCrowdsaleStartandDuration(uint, uint) public pure returns (bytes) { return msg.data; }\n\n  function initCrowdsaleToken(bytes32, bytes32, uint) public pure returns (bytes) { return msg.data; }\n\n  function setTransferAgentStatus(address, bool) public pure returns (bytes) { return msg.data; }\n\n\n\n  // Sale\n\n  function buy() public pure returns (bytes) { return msg.data; }\n\n\n\n  // Token\n\n  function transfer(address, uint) public pure returns (bytes) { return msg.data; }\n\n  function transferFrom(address, address, uint) public pure returns (bytes) { return msg.data; }\n\n  function approve(address, uint) public pure returns (bytes) { return msg.data; }\n\n  function increaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n\n  function decreaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n\n\n\n  function init(\n\n    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n\n  ) public pure returns (bytes memory) {\n\n    return msg.data;\n\n  }\n",
          "message": "DutchUtils (DutchUtils.sol#5-51) has incorrect ERC20 function interface(s):\n\t-transfer (DutchUtils.sol#40)\n\t-transferFrom (DutchUtils.sol#41)\n\t-approve (DutchUtils.sol#42)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 25,
          "vulnerability_code": "  function getSelectors() public pure returns (bytes4[] memory selectors) {\n\n    selectors = new bytes4[](13);\n\n\n\n    selectors[0] = this.initializeCrowdsale.selector;\n\n    selectors[1] = this.finalizeCrowdsale.selector;\n\n    selectors[2] = this.updateGlobalMinContribution.selector;\n\n    selectors[3] = this.whitelistMulti.selector;\n\n    selectors[4] = this.setCrowdsaleStartandDuration.selector;\n\n    selectors[5] = this.initCrowdsaleToken.selector;\n\n    selectors[6] = this.setTransferAgentStatus.selector;\n\n\n\n    selectors[7] = this.buy.selector;\n\n\n\n    selectors[8] = bytes4(keccak256('transfer(address,uint256)'));\n\n    selectors[9] = this.transferFrom.selector;\n\n    selectors[10] = this.approve.selector;\n\n    selectors[11] = this.increaseApproval.selector;\n\n    selectors[12] = this.decreaseApproval.selector;\n",
          "message": "DutchUtils.getSelectors (DutchUtils.sol#7-25) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function initializeCrowdsale() public pure returns (bytes) { return msg.data; }\n",
          "message": "DutchUtils.initializeCrowdsale (DutchUtils.sol#28) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function finalizeCrowdsale() public pure returns (bytes) { return msg.data; }\n",
          "message": "DutchUtils.finalizeCrowdsale (DutchUtils.sol#29) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function updateGlobalMinContribution(uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "DutchUtils.updateGlobalMinContribution (DutchUtils.sol#30) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function whitelistMulti(address[], uint[], uint[]) public pure returns (bytes) { return msg.data; }\n",
          "message": "DutchUtils.whitelistMulti (DutchUtils.sol#31) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setCrowdsaleStartandDuration(uint, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "DutchUtils.setCrowdsaleStartandDuration (DutchUtils.sol#32) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function initCrowdsaleToken(bytes32, bytes32, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "DutchUtils.initCrowdsaleToken (DutchUtils.sol#33) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setTransferAgentStatus(address, bool) public pure returns (bytes) { return msg.data; }\n",
          "message": "DutchUtils.setTransferAgentStatus (DutchUtils.sol#34) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function buy() public pure returns (bytes) { return msg.data; }\n",
          "message": "DutchUtils.buy (DutchUtils.sol#37) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "DutchUtils.transfer (DutchUtils.sol#40) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address, address, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "DutchUtils.transferFrom (DutchUtils.sol#41) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "DutchUtils.approve (DutchUtils.sol#42) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function increaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "DutchUtils.increaseApproval (DutchUtils.sol#43) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function decreaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "DutchUtils.decreaseApproval (DutchUtils.sol#44) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": 50,
          "vulnerability_code": "  function init(\n\n    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n\n  ) public pure returns (bytes memory) {\n\n    return msg.data;\n",
          "message": "DutchUtils.init (DutchUtils.sol#46-50) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;\n",
          "message": "Detected issues with version pragma in DutchUtils.sol:\n\t- pragma solidity^0.4.23 (DutchUtils.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function updateGlobalMinContribution(uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "Parameter '' of DutchUtils.updateGlobalMinContribution (DutchUtils.sol#30) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function whitelistMulti(address[], uint[], uint[]) public pure returns (bytes) { return msg.data; }\n",
          "message": "Parameter '' of DutchUtils.whitelistMulti (DutchUtils.sol#31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function whitelistMulti(address[], uint[], uint[]) public pure returns (bytes) { return msg.data; }\n",
          "message": "Parameter '_scope_0' of DutchUtils.whitelistMulti (DutchUtils.sol#31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function whitelistMulti(address[], uint[], uint[]) public pure returns (bytes) { return msg.data; }\n",
          "message": "Parameter '_scope_1' of DutchUtils.whitelistMulti (DutchUtils.sol#31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setCrowdsaleStartandDuration(uint, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "Parameter '' of DutchUtils.setCrowdsaleStartandDuration (DutchUtils.sol#32) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setCrowdsaleStartandDuration(uint, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "Parameter '_scope_0' of DutchUtils.setCrowdsaleStartandDuration (DutchUtils.sol#32) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function initCrowdsaleToken(bytes32, bytes32, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "Parameter '' of DutchUtils.initCrowdsaleToken (DutchUtils.sol#33) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function initCrowdsaleToken(bytes32, bytes32, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "Parameter '_scope_0' of DutchUtils.initCrowdsaleToken (DutchUtils.sol#33) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function initCrowdsaleToken(bytes32, bytes32, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "Parameter '_scope_1' of DutchUtils.initCrowdsaleToken (DutchUtils.sol#33) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setTransferAgentStatus(address, bool) public pure returns (bytes) { return msg.data; }\n",
          "message": "Parameter '' of DutchUtils.setTransferAgentStatus (DutchUtils.sol#34) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setTransferAgentStatus(address, bool) public pure returns (bytes) { return msg.data; }\n",
          "message": "Parameter '_scope_0' of DutchUtils.setTransferAgentStatus (DutchUtils.sol#34) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "Parameter '' of DutchUtils.transfer (DutchUtils.sol#40) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "Parameter '_scope_0' of DutchUtils.transfer (DutchUtils.sol#40) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address, address, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "Parameter '' of DutchUtils.transferFrom (DutchUtils.sol#41) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address, address, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "Parameter '_scope_0' of DutchUtils.transferFrom (DutchUtils.sol#41) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address, address, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "Parameter '_scope_1' of DutchUtils.transferFrom (DutchUtils.sol#41) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "Parameter '' of DutchUtils.approve (DutchUtils.sol#42) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "Parameter '_scope_0' of DutchUtils.approve (DutchUtils.sol#42) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function increaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "Parameter '' of DutchUtils.increaseApproval (DutchUtils.sol#43) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function increaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "Parameter '_scope_0' of DutchUtils.increaseApproval (DutchUtils.sol#43) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function decreaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "Parameter '' of DutchUtils.decreaseApproval (DutchUtils.sol#44) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function decreaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "Parameter '_scope_0' of DutchUtils.decreaseApproval (DutchUtils.sol#44) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n",
          "message": "Parameter '' of DutchUtils.init (DutchUtils.sol#47) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n",
          "message": "Parameter '_scope_0' of DutchUtils.init (DutchUtils.sol#47) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n",
          "message": "Parameter '_scope_1' of DutchUtils.init (DutchUtils.sol#47) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n",
          "message": "Parameter '_scope_2' of DutchUtils.init (DutchUtils.sol#47) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n",
          "message": "Parameter '_scope_3' of DutchUtils.init (DutchUtils.sol#47) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n",
          "message": "Parameter '_scope_4' of DutchUtils.init (DutchUtils.sol#47) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n",
          "message": "Parameter '_scope_5' of DutchUtils.init (DutchUtils.sol#47) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n",
          "message": "Parameter '_scope_6' of DutchUtils.init (DutchUtils.sol#47) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n",
          "message": "Parameter '_scope_7' of DutchUtils.init (DutchUtils.sol#47) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n",
          "message": "Parameter '_scope_8' of DutchUtils.init (DutchUtils.sol#47) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function initializeCrowdsale() public pure returns (bytes) { return msg.data; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function finalizeCrowdsale() public pure returns (bytes) { return msg.data; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function updateGlobalMinContribution(uint) public pure returns (bytes) { return msg.data; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function whitelistMulti(address[], uint[], uint[]) public pure returns (bytes) { return msg.data; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function whitelistMulti(address[], uint[], uint[]) public pure returns (bytes) { return msg.data; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function whitelistMulti(address[], uint[], uint[]) public pure returns (bytes) { return msg.data; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function whitelistMulti(address[], uint[], uint[]) public pure returns (bytes) { return msg.data; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setCrowdsaleStartandDuration(uint, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function initCrowdsaleToken(bytes32, bytes32, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setTransferAgentStatus(address, bool) public pure returns (bytes) { return msg.data; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function buy() public pure returns (bytes) { return msg.data; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address, address, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function increaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function decreaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function whitelistMulti(address[], uint[], uint[]) public pure returns (bytes) { return msg.data; }\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}