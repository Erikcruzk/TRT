{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_21"
      ],
      "vulnerability_findings": [
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;\n",
          "message": "Detected issues with version pragma in IAdmin.sol:\n\t- pragma solidity^0.4.23 (IAdmin.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getWhitelistStatus(address) external view returns (uint, uint);\n",
          "message": "Parameter '' of IAdmin.getWhitelistStatus (IAdmin.sol#13) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getAdmin(address, bytes32) external view returns (address);\n",
          "message": "Parameter '' of AdminIdx.getAdmin (IAdmin.sol#18) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getAdmin(address, bytes32) external view returns (address);\n",
          "message": "Parameter '_scope_0' of AdminIdx.getAdmin (IAdmin.sol#18) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getCrowdsaleInfo(address, bytes32) external view returns (uint, address, uint, bool, bool, bool);\n",
          "message": "Parameter '' of AdminIdx.getCrowdsaleInfo (IAdmin.sol#19) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getCrowdsaleInfo(address, bytes32) external view returns (uint, address, uint, bool, bool, bool);\n",
          "message": "Parameter '_scope_0' of AdminIdx.getCrowdsaleInfo (IAdmin.sol#19) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isCrowdsaleFull(address, bytes32) external view returns (bool, uint);\n",
          "message": "Parameter '' of AdminIdx.isCrowdsaleFull (IAdmin.sol#20) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isCrowdsaleFull(address, bytes32) external view returns (bool, uint);\n",
          "message": "Parameter '_scope_0' of AdminIdx.isCrowdsaleFull (IAdmin.sol#20) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getCrowdsaleStartAndEndTimes(address, bytes32) external view returns (uint, uint);\n",
          "message": "Parameter '' of AdminIdx.getCrowdsaleStartAndEndTimes (IAdmin.sol#21) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getCrowdsaleStartAndEndTimes(address, bytes32) external view returns (uint, uint);\n",
          "message": "Parameter '_scope_0' of AdminIdx.getCrowdsaleStartAndEndTimes (IAdmin.sol#21) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getCrowdsaleStatus(address, bytes32) external view returns (uint, uint, uint, uint, uint, uint, bool);\n",
          "message": "Parameter '' of AdminIdx.getCrowdsaleStatus (IAdmin.sol#22) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getCrowdsaleStatus(address, bytes32) external view returns (uint, uint, uint, uint, uint, uint, bool);\n",
          "message": "Parameter '_scope_0' of AdminIdx.getCrowdsaleStatus (IAdmin.sol#22) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getTokensSold(address, bytes32) external view returns (uint);\n",
          "message": "Parameter '' of AdminIdx.getTokensSold (IAdmin.sol#23) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getTokensSold(address, bytes32) external view returns (uint);\n",
          "message": "Parameter '_scope_0' of AdminIdx.getTokensSold (IAdmin.sol#23) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getCrowdsaleWhitelist(address, bytes32) external view returns (uint, address[]);\n",
          "message": "Parameter '' of AdminIdx.getCrowdsaleWhitelist (IAdmin.sol#24) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getCrowdsaleWhitelist(address, bytes32) external view returns (uint, address[]);\n",
          "message": "Parameter '_scope_0' of AdminIdx.getCrowdsaleWhitelist (IAdmin.sol#24) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getWhitelistStatus(address, bytes32, address) external view returns (uint, uint);\n",
          "message": "Parameter '' of AdminIdx.getWhitelistStatus (IAdmin.sol#25) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getWhitelistStatus(address, bytes32, address) external view returns (uint, uint);\n",
          "message": "Parameter '_scope_0' of AdminIdx.getWhitelistStatus (IAdmin.sol#25) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getWhitelistStatus(address, bytes32, address) external view returns (uint, uint);\n",
          "message": "Parameter '_scope_1' of AdminIdx.getWhitelistStatus (IAdmin.sol#25) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getCrowdsaleUniqueBuyers(address, bytes32) external view returns (uint);\n",
          "message": "Parameter '' of AdminIdx.getCrowdsaleUniqueBuyers (IAdmin.sol#26) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getCrowdsaleUniqueBuyers(address, bytes32) external view returns (uint);\n",
          "message": "Parameter '_scope_0' of AdminIdx.getCrowdsaleUniqueBuyers (IAdmin.sol#26) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "execution failed"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "input files do not contain any valid contracts"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}