{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_70"
      ],
      "vulnerability_findings": [
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": 71,
          "vulnerability_code": "contract MintedCappedUtils {\n\n\n\n  function getSelectors() public pure returns (bytes4[] memory selectors) {\n\n    selectors = new bytes4[](19);\n\n\n\n    selectors[0] = this.initializeCrowdsale.selector;\n\n    selectors[1] = this.finalizeCrowdsale.selector;\n\n    selectors[2] = this.updateTierMinimum.selector;\n\n    selectors[3] = this.createCrowdsaleTiers.selector;\n\n    selectors[4] = this.whitelistMultiForTier.selector;\n\n    selectors[5] = this.updateTierDuration.selector;\n\n\n\n    selectors[6] = this.initCrowdsaleToken.selector;\n\n    selectors[7] = this.setTransferAgentStatus.selector;\n\n    selectors[8] = this.updateMultipleReservedTokens.selector;\n\n    selectors[9] = this.removeReservedTokens.selector;\n\n    selectors[10] = this.distributeReservedTokens.selector;\n\n    selectors[11] = this.finalizeCrowdsaleAndToken.selector;\n\n    selectors[12] = this.finalizeAndDistributeToken.selector;\n\n\n\n    selectors[13] = this.buy.selector;\n\n\n\n    selectors[14] = bytes4(keccak256('transfer(address,uint256)'));\n\n    selectors[15] = this.transferFrom.selector;\n\n    selectors[16] = this.approve.selector;\n\n    selectors[17] = this.increaseApproval.selector;\n\n    selectors[18] = this.decreaseApproval.selector;\n\n  }\n\n\n\n  // SaleManager\n\n  function initializeCrowdsale() public pure returns (bytes) { return msg.data; }\n\n  function finalizeCrowdsale() public pure returns (bytes) { return msg.data; }\n\n  function updateTierMinimum(uint, uint) public pure returns (bytes) { return msg.data; }\n\n  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n\n      public pure returns (bytes) { return msg.data; }\n\n  function whitelistMultiForTier(uint, address[], uint[], uint[])\n\n      public pure returns (bytes) { return msg.data; }\n\n  function updateTierDuration(uint, uint) public pure returns (bytes) { return msg.data; }\n\n\n\n  // TokenManager\n\n  function initCrowdsaleToken(bytes32, bytes32, uint) public pure returns (bytes) { return msg.data; }\n\n  function setTransferAgentStatus(address, bool) public pure returns (bytes) { return msg.data; }\n\n  function updateMultipleReservedTokens(address[], uint[], uint[], uint[])\n\n      public pure returns (bytes) { return msg.data; }\n\n  function removeReservedTokens(address) public pure returns (bytes) { return msg.data; }\n\n  function distributeReservedTokens(uint) public pure returns (bytes) { return msg.data; }\n\n  function finalizeCrowdsaleAndToken() public pure returns (bytes) { return msg.data; }\n\n  function finalizeAndDistributeToken() public pure returns (bytes) { return msg.data; }\n\n\n\n  // Sale\n\n  function buy() public pure returns (bytes) { return msg.data; }\n\n\n\n  // Token\n\n  function transfer(address, uint) public pure returns (bytes) { return msg.data; }\n\n  function transferFrom(address, address, uint) public pure returns (bytes) { return msg.data; }\n\n  function approve(address, uint) public pure returns (bytes) { return msg.data; }\n\n  function increaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n\n  function decreaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n\n\n\n  function init(\n\n    address, uint, bytes32, uint, uint, uint, uint, bool, bool, address\n\n  ) public pure returns (bytes memory) {\n\n    return msg.data;\n\n  }\n\n\n\n\n",
          "message": "MintedCappedUtils (MintedCappedUtils.sol#5-71) has incorrect ERC20 function interface(s):\n\t-transfer (MintedCappedUtils.sol#58)\n\t-transferFrom (MintedCappedUtils.sol#59)\n\t-approve (MintedCappedUtils.sol#60)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 32,
          "vulnerability_code": "  function getSelectors() public pure returns (bytes4[] memory selectors) {\n\n    selectors = new bytes4[](19);\n\n\n\n    selectors[0] = this.initializeCrowdsale.selector;\n\n    selectors[1] = this.finalizeCrowdsale.selector;\n\n    selectors[2] = this.updateTierMinimum.selector;\n\n    selectors[3] = this.createCrowdsaleTiers.selector;\n\n    selectors[4] = this.whitelistMultiForTier.selector;\n\n    selectors[5] = this.updateTierDuration.selector;\n\n\n\n    selectors[6] = this.initCrowdsaleToken.selector;\n\n    selectors[7] = this.setTransferAgentStatus.selector;\n\n    selectors[8] = this.updateMultipleReservedTokens.selector;\n\n    selectors[9] = this.removeReservedTokens.selector;\n\n    selectors[10] = this.distributeReservedTokens.selector;\n\n    selectors[11] = this.finalizeCrowdsaleAndToken.selector;\n\n    selectors[12] = this.finalizeAndDistributeToken.selector;\n\n\n\n    selectors[13] = this.buy.selector;\n\n\n\n    selectors[14] = bytes4(keccak256('transfer(address,uint256)'));\n\n    selectors[15] = this.transferFrom.selector;\n\n    selectors[16] = this.approve.selector;\n\n    selectors[17] = this.increaseApproval.selector;\n\n    selectors[18] = this.decreaseApproval.selector;\n",
          "message": "MintedCappedUtils.getSelectors (MintedCappedUtils.sol#7-32) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function initializeCrowdsale() public pure returns (bytes) { return msg.data; }\n",
          "message": "MintedCappedUtils.initializeCrowdsale (MintedCappedUtils.sol#35) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function finalizeCrowdsale() public pure returns (bytes) { return msg.data; }\n",
          "message": "MintedCappedUtils.finalizeCrowdsale (MintedCappedUtils.sol#36) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function updateTierMinimum(uint, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "MintedCappedUtils.updateTierMinimum (MintedCappedUtils.sol#37) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": 39,
          "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
          "message": "MintedCappedUtils.createCrowdsaleTiers (MintedCappedUtils.sol#38-39) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": 41,
          "vulnerability_code": "  function whitelistMultiForTier(uint, address[], uint[], uint[])\n",
          "message": "MintedCappedUtils.whitelistMultiForTier (MintedCappedUtils.sol#40-41) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function updateTierDuration(uint, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "MintedCappedUtils.updateTierDuration (MintedCappedUtils.sol#42) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function initCrowdsaleToken(bytes32, bytes32, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "MintedCappedUtils.initCrowdsaleToken (MintedCappedUtils.sol#45) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setTransferAgentStatus(address, bool) public pure returns (bytes) { return msg.data; }\n",
          "message": "MintedCappedUtils.setTransferAgentStatus (MintedCappedUtils.sol#46) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": 48,
          "vulnerability_code": "  function updateMultipleReservedTokens(address[], uint[], uint[], uint[])\n",
          "message": "MintedCappedUtils.updateMultipleReservedTokens (MintedCappedUtils.sol#47-48) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function removeReservedTokens(address) public pure returns (bytes) { return msg.data; }\n",
          "message": "MintedCappedUtils.removeReservedTokens (MintedCappedUtils.sol#49) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function distributeReservedTokens(uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "MintedCappedUtils.distributeReservedTokens (MintedCappedUtils.sol#50) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function finalizeCrowdsaleAndToken() public pure returns (bytes) { return msg.data; }\n",
          "message": "MintedCappedUtils.finalizeCrowdsaleAndToken (MintedCappedUtils.sol#51) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function finalizeAndDistributeToken() public pure returns (bytes) { return msg.data; }\n",
          "message": "MintedCappedUtils.finalizeAndDistributeToken (MintedCappedUtils.sol#52) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function buy() public pure returns (bytes) { return msg.data; }\n",
          "message": "MintedCappedUtils.buy (MintedCappedUtils.sol#55) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "MintedCappedUtils.transfer (MintedCappedUtils.sol#58) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address, address, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "MintedCappedUtils.transferFrom (MintedCappedUtils.sol#59) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "MintedCappedUtils.approve (MintedCappedUtils.sol#60) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function increaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "MintedCappedUtils.increaseApproval (MintedCappedUtils.sol#61) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function decreaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "MintedCappedUtils.decreaseApproval (MintedCappedUtils.sol#62) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": 68,
          "vulnerability_code": "  function init(\n\n    address, uint, bytes32, uint, uint, uint, uint, bool, bool, address\n\n  ) public pure returns (bytes memory) {\n\n    return msg.data;\n",
          "message": "MintedCappedUtils.init (MintedCappedUtils.sol#64-68) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;\n",
          "message": "Detected issues with version pragma in MintedCappedUtils.sol:\n\t- pragma solidity^0.4.23 (MintedCappedUtils.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function updateTierMinimum(uint, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "Parameter '' of MintedCappedUtils.updateTierMinimum (MintedCappedUtils.sol#37) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function updateTierMinimum(uint, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "Parameter '_scope_0' of MintedCappedUtils.updateTierMinimum (MintedCappedUtils.sol#37) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
          "message": "Parameter '' of MintedCappedUtils.createCrowdsaleTiers (MintedCappedUtils.sol#38) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
          "message": "Parameter '_scope_0' of MintedCappedUtils.createCrowdsaleTiers (MintedCappedUtils.sol#38) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
          "message": "Parameter '_scope_1' of MintedCappedUtils.createCrowdsaleTiers (MintedCappedUtils.sol#38) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
          "message": "Parameter '_scope_2' of MintedCappedUtils.createCrowdsaleTiers (MintedCappedUtils.sol#38) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
          "message": "Parameter '_scope_3' of MintedCappedUtils.createCrowdsaleTiers (MintedCappedUtils.sol#38) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
          "message": "Parameter '_scope_4' of MintedCappedUtils.createCrowdsaleTiers (MintedCappedUtils.sol#38) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
          "message": "Parameter '_scope_5' of MintedCappedUtils.createCrowdsaleTiers (MintedCappedUtils.sol#38) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function whitelistMultiForTier(uint, address[], uint[], uint[])\n",
          "message": "Parameter '' of MintedCappedUtils.whitelistMultiForTier (MintedCappedUtils.sol#40) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function whitelistMultiForTier(uint, address[], uint[], uint[])\n",
          "message": "Parameter '_scope_0' of MintedCappedUtils.whitelistMultiForTier (MintedCappedUtils.sol#40) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function whitelistMultiForTier(uint, address[], uint[], uint[])\n",
          "message": "Parameter '_scope_1' of MintedCappedUtils.whitelistMultiForTier (MintedCappedUtils.sol#40) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function whitelistMultiForTier(uint, address[], uint[], uint[])\n",
          "message": "Parameter '_scope_2' of MintedCappedUtils.whitelistMultiForTier (MintedCappedUtils.sol#40) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function updateTierDuration(uint, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "Parameter '' of MintedCappedUtils.updateTierDuration (MintedCappedUtils.sol#42) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function updateTierDuration(uint, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "Parameter '_scope_0' of MintedCappedUtils.updateTierDuration (MintedCappedUtils.sol#42) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function initCrowdsaleToken(bytes32, bytes32, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "Parameter '' of MintedCappedUtils.initCrowdsaleToken (MintedCappedUtils.sol#45) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function initCrowdsaleToken(bytes32, bytes32, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "Parameter '_scope_0' of MintedCappedUtils.initCrowdsaleToken (MintedCappedUtils.sol#45) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function initCrowdsaleToken(bytes32, bytes32, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "Parameter '_scope_1' of MintedCappedUtils.initCrowdsaleToken (MintedCappedUtils.sol#45) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setTransferAgentStatus(address, bool) public pure returns (bytes) { return msg.data; }\n",
          "message": "Parameter '' of MintedCappedUtils.setTransferAgentStatus (MintedCappedUtils.sol#46) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setTransferAgentStatus(address, bool) public pure returns (bytes) { return msg.data; }\n",
          "message": "Parameter '_scope_0' of MintedCappedUtils.setTransferAgentStatus (MintedCappedUtils.sol#46) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function updateMultipleReservedTokens(address[], uint[], uint[], uint[])\n",
          "message": "Parameter '' of MintedCappedUtils.updateMultipleReservedTokens (MintedCappedUtils.sol#47) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function updateMultipleReservedTokens(address[], uint[], uint[], uint[])\n",
          "message": "Parameter '_scope_0' of MintedCappedUtils.updateMultipleReservedTokens (MintedCappedUtils.sol#47) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function updateMultipleReservedTokens(address[], uint[], uint[], uint[])\n",
          "message": "Parameter '_scope_1' of MintedCappedUtils.updateMultipleReservedTokens (MintedCappedUtils.sol#47) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function updateMultipleReservedTokens(address[], uint[], uint[], uint[])\n",
          "message": "Parameter '_scope_2' of MintedCappedUtils.updateMultipleReservedTokens (MintedCappedUtils.sol#47) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function removeReservedTokens(address) public pure returns (bytes) { return msg.data; }\n",
          "message": "Parameter '' of MintedCappedUtils.removeReservedTokens (MintedCappedUtils.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function distributeReservedTokens(uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "Parameter '' of MintedCappedUtils.distributeReservedTokens (MintedCappedUtils.sol#50) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "Parameter '' of MintedCappedUtils.transfer (MintedCappedUtils.sol#58) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "Parameter '_scope_0' of MintedCappedUtils.transfer (MintedCappedUtils.sol#58) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address, address, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "Parameter '' of MintedCappedUtils.transferFrom (MintedCappedUtils.sol#59) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address, address, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "Parameter '_scope_0' of MintedCappedUtils.transferFrom (MintedCappedUtils.sol#59) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address, address, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "Parameter '_scope_1' of MintedCappedUtils.transferFrom (MintedCappedUtils.sol#59) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "Parameter '' of MintedCappedUtils.approve (MintedCappedUtils.sol#60) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "Parameter '_scope_0' of MintedCappedUtils.approve (MintedCappedUtils.sol#60) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function increaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "Parameter '' of MintedCappedUtils.increaseApproval (MintedCappedUtils.sol#61) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function increaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "Parameter '_scope_0' of MintedCappedUtils.increaseApproval (MintedCappedUtils.sol#61) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function decreaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "Parameter '' of MintedCappedUtils.decreaseApproval (MintedCappedUtils.sol#62) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function decreaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": "Parameter '_scope_0' of MintedCappedUtils.decreaseApproval (MintedCappedUtils.sol#62) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address, uint, bytes32, uint, uint, uint, uint, bool, bool, address\n",
          "message": "Parameter '' of MintedCappedUtils.init (MintedCappedUtils.sol#65) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address, uint, bytes32, uint, uint, uint, uint, bool, bool, address\n",
          "message": "Parameter '_scope_0' of MintedCappedUtils.init (MintedCappedUtils.sol#65) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address, uint, bytes32, uint, uint, uint, uint, bool, bool, address\n",
          "message": "Parameter '_scope_1' of MintedCappedUtils.init (MintedCappedUtils.sol#65) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address, uint, bytes32, uint, uint, uint, uint, bool, bool, address\n",
          "message": "Parameter '_scope_2' of MintedCappedUtils.init (MintedCappedUtils.sol#65) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address, uint, bytes32, uint, uint, uint, uint, bool, bool, address\n",
          "message": "Parameter '_scope_3' of MintedCappedUtils.init (MintedCappedUtils.sol#65) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address, uint, bytes32, uint, uint, uint, uint, bool, bool, address\n",
          "message": "Parameter '_scope_4' of MintedCappedUtils.init (MintedCappedUtils.sol#65) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address, uint, bytes32, uint, uint, uint, uint, bool, bool, address\n",
          "message": "Parameter '_scope_5' of MintedCappedUtils.init (MintedCappedUtils.sol#65) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address, uint, bytes32, uint, uint, uint, uint, bool, bool, address\n",
          "message": "Parameter '_scope_6' of MintedCappedUtils.init (MintedCappedUtils.sol#65) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address, uint, bytes32, uint, uint, uint, uint, bool, bool, address\n",
          "message": "Parameter '_scope_7' of MintedCappedUtils.init (MintedCappedUtils.sol#65) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address, uint, bytes32, uint, uint, uint, uint, bool, bool, address\n",
          "message": "Parameter '_scope_8' of MintedCappedUtils.init (MintedCappedUtils.sol#65) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function initializeCrowdsale() public pure returns (bytes) { return msg.data; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function finalizeCrowdsale() public pure returns (bytes) { return msg.data; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function updateTierMinimum(uint, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": null,
          "vulnerability_code": "      public pure returns (bytes) { return msg.data; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function whitelistMultiForTier(uint, address[], uint[], uint[])\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function whitelistMultiForTier(uint, address[], uint[], uint[])\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function whitelistMultiForTier(uint, address[], uint[], uint[])\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "      public pure returns (bytes) { return msg.data; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function updateTierDuration(uint, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function initCrowdsaleToken(bytes32, bytes32, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setTransferAgentStatus(address, bool) public pure returns (bytes) { return msg.data; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function updateMultipleReservedTokens(address[], uint[], uint[], uint[])\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function updateMultipleReservedTokens(address[], uint[], uint[], uint[])\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function updateMultipleReservedTokens(address[], uint[], uint[], uint[])\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function updateMultipleReservedTokens(address[], uint[], uint[], uint[])\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "      public pure returns (bytes) { return msg.data; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function removeReservedTokens(address) public pure returns (bytes) { return msg.data; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function distributeReservedTokens(uint) public pure returns (bytes) { return msg.data; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function finalizeCrowdsaleAndToken() public pure returns (bytes) { return msg.data; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function finalizeAndDistributeToken() public pure returns (bytes) { return msg.data; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function buy() public pure returns (bytes) { return msg.data; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address, address, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function increaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function decreaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address, uint) public pure returns (bytes) { return msg.data; }\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "    selectors[14] = bytes4(keccak256('transfer(address,uint256)'));\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function whitelistMultiForTier(uint, address[], uint[], uint[])\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function updateMultipleReservedTokens(address[], uint[], uint[], uint[])\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}