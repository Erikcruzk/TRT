{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(app_storage == 0, \"ScriptExec already configured\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_app_storage != 0, 'Invalid input');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 165,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_app_name != 0 && _init_calldata.length >= 4, 'invalid input');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 165,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_app_name != 0 && _init_calldata.length >= 4, 'invalid input');\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_50"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": 112,
          "vulnerability_code": "  function getAction(uint _ptr) internal pure returns (bytes4 action) {\n\n    assembly {\n\n      // Get the first 4 bytes stored at the pointer, and clean the rest of the bytes remaining\n\n      action := and(mload(_ptr), 0xffffffff00000000000000000000000000000000000000000000000000000000)\n\n    }\n",
          "message": "ScriptExec.getAction (ScriptExec.sol#107-112) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": 152,
          "vulnerability_code": "  function checkReturn() internal pure returns (bool success) {\n\n    success = false;\n\n    assembly {\n\n      // returndata size must be 0x60 bytes\n\n      if eq(returndatasize, 0x60) {\n\n        // Copy returned data to pointer and check that at least one value is nonzero\n\n        let ptr := mload(0x40)\n\n        returndatacopy(ptr, 0, returndatasize)\n\n        if iszero(iszero(mload(ptr))) { success := 1 }\n\n        if iszero(iszero(mload(add(0x20, ptr)))) { success := 1 }\n\n        if iszero(iszero(mload(add(0x40, ptr)))) { success := 1 }\n\n      }\n\n    }\n\n    return success;\n",
          "message": "ScriptExec.checkReturn (ScriptExec.sol#138-152) is declared view but contains assembly code\n"
        },
        {
          "name": "locked-ether",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function () public payable { }\n",
          "message": "Contract locking ether found in ScriptExec.sol:\n\tContract ScriptExec has payable functions:\n\t - fallback (ScriptExec.sol#72)\n\t - exec (ScriptExec.sol#102)\n\tBut does not have a function to withdraw the ether\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 164,
          "vulnerability_to_line": 179,
          "vulnerability_code": "  function createAppInstance(bytes32 _app_name, bytes _init_calldata) external returns (bytes32 exec_id, bytes32 version) {\n\n    require(_app_name != 0 && _init_calldata.length >= 4, 'invalid input');\n\n    (exec_id, version) = StorageInterface(app_storage).createInstance(\n\n      msg.sender, _app_name, provider, registry_exec_id, _init_calldata\n\n    );\n\n    // Set various app metadata values -\n\n    deployed_by[exec_id] = msg.sender;\n\n    app_instances[_app_name].push(exec_id);\n\n    Instance memory inst = Instance(\n\n      provider, registry_exec_id, exec_id, _app_name, version\n\n    );\n\n    instance_info[exec_id] = inst;\n\n    deployed_instances[msg.sender].push(inst);\n\n    // Emit event -\n\n    emit AppInstanceCreated(msg.sender, exec_id, _app_name, version);\n",
          "message": "Reentrancy in ScriptExec.createAppInstance (ScriptExec.sol#164-179):\n\tExternal calls:\n\t- (exec_id,version) = StorageInterface(app_storage).createInstance(msg.sender,_app_name,provider,registry_exec_id,_init_calldata) (ScriptExec.sol#166-168)\n\tState variables written after the call(s):\n\t- app_instances (ScriptExec.sol#171)\n\t- deployed_by (ScriptExec.sol#170)\n\t- deployed_instances (ScriptExec.sol#176)\n\t- instance_info (ScriptExec.sol#175)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": 112,
          "vulnerability_code": "  function getAction(uint _ptr) internal pure returns (bytes4 action) {\n\n    assembly {\n\n      // Get the first 4 bytes stored at the pointer, and clean the rest of the bytes remaining\n\n      action := and(mload(_ptr), 0xffffffff00000000000000000000000000000000000000000000000000000000)\n\n    }\n",
          "message": "ScriptExec.getAction uses assembly (ScriptExec.sol#107-112)\n\t- ScriptExec.sol#108-112\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": 135,
          "vulnerability_code": "  function checkErrors(bytes32 _exec_id) internal {\n\n    // If the returned data begins with selector 'Error(string)', get the contained message -\n\n    string memory message;\n\n    bytes4 err_sel = ERR;\n\n    assembly {\n\n      // Get pointer to free memory, place returned data at pointer, and update free memory pointer\n\n      let ptr := mload(0x40)\n\n      returndatacopy(ptr, 0, returndatasize)\n\n      mstore(0x40, add(ptr, returndatasize))\n\n\n\n      // Check value at pointer for equality with Error selector -\n\n      if eq(mload(ptr), and(err_sel, 0xffffffff00000000000000000000000000000000000000000000000000000000)) {\n\n        message := add(0x24, ptr)\n\n      }\n\n    }\n\n    // If no returned message exists, emit a default error message. Otherwise, emit the error message\n\n    if (bytes(message).length == 0)\n\n      emit StorageException(_exec_id, \"No error recieved\");\n\n    else\n\n      emit StorageException(_exec_id, message);\n",
          "message": "ScriptExec.checkErrors uses assembly (ScriptExec.sol#115-135)\n\t- ScriptExec.sol#119-131\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": 152,
          "vulnerability_code": "  function checkReturn() internal pure returns (bool success) {\n\n    success = false;\n\n    assembly {\n\n      // returndata size must be 0x60 bytes\n\n      if eq(returndatasize, 0x60) {\n\n        // Copy returned data to pointer and check that at least one value is nonzero\n\n        let ptr := mload(0x40)\n\n        returndatacopy(ptr, 0, returndatasize)\n\n        if iszero(iszero(mload(ptr))) { success := 1 }\n\n        if iszero(iszero(mload(add(0x20, ptr)))) { success := 1 }\n\n        if iszero(iszero(mload(add(0x40, ptr)))) { success := 1 }\n\n      }\n\n    }\n\n    return success;\n",
          "message": "ScriptExec.checkReturn uses assembly (ScriptExec.sol#138-152)\n\t- ScriptExec.sol#140-151\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function () public payable { }\n",
          "message": "ScriptExec.fallback (ScriptExec.sol#72) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": 89,
          "vulnerability_code": "  function configure(address _exec_admin, address _app_storage, address _provider) public {\n\n    require(app_storage == 0, \"ScriptExec already configured\");\n\n    require(_app_storage != 0, 'Invalid input');\n\n    exec_admin = _exec_admin;\n\n    app_storage = _app_storage;\n\n    provider = _provider;\n\n\n\n    if (exec_admin == 0)\n\n      exec_admin = msg.sender;\n",
          "message": "ScriptExec.configure (ScriptExec.sol#80-89) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 187,
          "vulnerability_to_line": 189,
          "vulnerability_code": "  function setRegistryExecID(bytes32 _exec_id) public onlyAdmin() {\n\n    registry_exec_id = _exec_id;\n",
          "message": "ScriptExec.setRegistryExecID (ScriptExec.sol#187-189) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 195,
          "vulnerability_to_line": 197,
          "vulnerability_code": "  function setProvider(address _provider) public onlyAdmin() {\n\n    provider = _provider;\n",
          "message": "ScriptExec.setProvider (ScriptExec.sol#195-197) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": 203,
          "vulnerability_code": "  function setAdmin(address _admin) public onlyAdmin() {\n\n    require(_admin != 0);\n\n    exec_admin = _admin;\n",
          "message": "ScriptExec.setAdmin (ScriptExec.sol#200-203) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 208,
          "vulnerability_to_line": 210,
          "vulnerability_code": "  function getInstances(bytes32 _app_name) public view returns (bytes32[] memory) {\n\n    return app_instances[_app_name];\n",
          "message": "ScriptExec.getInstances (ScriptExec.sol#208-210) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": 219,
          "vulnerability_code": "  function getDeployedLength(address _deployer) public view returns (uint) {\n\n    return deployed_instances[_deployer].length;\n",
          "message": "ScriptExec.getDeployedLength (ScriptExec.sol#217-219) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 229,
          "vulnerability_to_line": 232,
          "vulnerability_code": "  function getRegistryImplementation() public view returns (address index, address implementation) {\n\n    index = StorageInterface(app_storage).getIndex(registry_exec_id);\n\n    implementation = StorageInterface(app_storage).getTarget(registry_exec_id, REGISTER_APP_SEL);\n",
          "message": "ScriptExec.getRegistryImplementation (ScriptExec.sol#229-232) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 241,
          "vulnerability_to_line": 248,
          "vulnerability_code": "  function getInstanceImplementation(bytes32 _exec_id) public view\n\n  returns (address index, bytes4[] memory functions, address[] memory implementations) {\n\n    Instance memory app = instance_info[_exec_id];\n\n    index = StorageInterface(app_storage).getIndex(app.current_registry_exec_id);\n\n    (index, functions, implementations) = RegistryInterface(index).getVersionImplementation(\n\n      app_storage, app.current_registry_exec_id, app.current_provider, app.app_name, app.version_name\n\n    );\n",
          "message": "ScriptExec.getInstanceImplementation (ScriptExec.sol#241-248) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;\n",
          "message": "Detected issues with version pragma in ScriptExec.sol:\n\t- pragma solidity^0.4.23 (ScriptExec.sol#3): it allows old versions\n\t- pragma solidity^0.4.23 (ScriptExec.sol#18): it allows old versions\n\t- pragma solidity^0.4.23 (ScriptExec.sol#29): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getTarget(bytes32 exec_id, bytes4 selector)\n",
          "message": "Parameter 'exec_id' of StorageInterface.getTarget (ScriptExec.sol#6) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getIndex(bytes32 exec_id) external view returns (address index);\n",
          "message": "Parameter 'exec_id' of StorageInterface.getIndex (ScriptExec.sol#8) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function createInstance(address sender, bytes32 app_name, address provider, bytes32 registry_exec_id, bytes calldata)\n",
          "message": "Parameter 'app_name' of StorageInterface.createInstance (ScriptExec.sol#9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function createInstance(address sender, bytes32 app_name, address provider, bytes32 registry_exec_id, bytes calldata)\n",
          "message": "Parameter 'registry_exec_id' of StorageInterface.createInstance (ScriptExec.sol#9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function exec(address sender, bytes32 exec_id, bytes calldata)\n",
          "message": "Parameter 'exec_id' of StorageInterface.exec (ScriptExec.sol#12) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getLatestVersion(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name)\n",
          "message": "Parameter 'stor_addr' of RegistryInterface.getLatestVersion (ScriptExec.sol#21) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getLatestVersion(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name)\n",
          "message": "Parameter 'exec_id' of RegistryInterface.getLatestVersion (ScriptExec.sol#21) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getLatestVersion(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name)\n",
          "message": "Parameter 'app_name' of RegistryInterface.getLatestVersion (ScriptExec.sol#21) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getVersionImplementation(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name, bytes32 version_name)\n",
          "message": "Parameter 'stor_addr' of RegistryInterface.getVersionImplementation (ScriptExec.sol#23) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getVersionImplementation(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name, bytes32 version_name)\n",
          "message": "Parameter 'exec_id' of RegistryInterface.getVersionImplementation (ScriptExec.sol#23) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getVersionImplementation(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name, bytes32 version_name)\n",
          "message": "Parameter 'app_name' of RegistryInterface.getVersionImplementation (ScriptExec.sol#23) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getVersionImplementation(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name, bytes32 version_name)\n",
          "message": "Parameter 'version_name' of RegistryInterface.getVersionImplementation (ScriptExec.sol#23) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function configure(address _exec_admin, address _app_storage, address _provider) public {\n",
          "message": "Parameter '_exec_admin' of ScriptExec.configure (ScriptExec.sol#80) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function configure(address _exec_admin, address _app_storage, address _provider) public {\n",
          "message": "Parameter '_app_storage' of ScriptExec.configure (ScriptExec.sol#80) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function configure(address _exec_admin, address _app_storage, address _provider) public {\n",
          "message": "Parameter '_provider' of ScriptExec.configure (ScriptExec.sol#80) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function exec(bytes32 _exec_id, bytes _calldata) external payable returns (bool success);\n",
          "message": "Parameter '_exec_id' of ScriptExec.exec (ScriptExec.sol#102) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function checkErrors(bytes32 _exec_id) internal {\n",
          "message": "Parameter '_exec_id' of ScriptExec.checkErrors (ScriptExec.sol#115) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 164,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function createAppInstance(bytes32 _app_name, bytes _init_calldata) external returns (bytes32 exec_id, bytes32 version) {\n",
          "message": "Parameter '_app_name' of ScriptExec.createAppInstance (ScriptExec.sol#164) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 164,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function createAppInstance(bytes32 _app_name, bytes _init_calldata) external returns (bytes32 exec_id, bytes32 version) {\n",
          "message": "Parameter '_init_calldata' of ScriptExec.createAppInstance (ScriptExec.sol#164) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 187,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setRegistryExecID(bytes32 _exec_id) public onlyAdmin() {\n",
          "message": "Parameter '_exec_id' of ScriptExec.setRegistryExecID (ScriptExec.sol#187) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 195,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setProvider(address _provider) public onlyAdmin() {\n",
          "message": "Parameter '_provider' of ScriptExec.setProvider (ScriptExec.sol#195) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setAdmin(address _admin) public onlyAdmin() {\n",
          "message": "Parameter '_admin' of ScriptExec.setAdmin (ScriptExec.sol#200) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 208,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getInstances(bytes32 _app_name) public view returns (bytes32[] memory) {\n",
          "message": "Parameter '_app_name' of ScriptExec.getInstances (ScriptExec.sol#208) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getDeployedLength(address _deployer) public view returns (uint) {\n",
          "message": "Parameter '_deployer' of ScriptExec.getDeployedLength (ScriptExec.sol#217) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 241,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getInstanceImplementation(bytes32 _exec_id) public view\n",
          "message": "Parameter '_exec_id' of ScriptExec.getInstanceImplementation (ScriptExec.sol#241) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public app_storage;\n",
          "message": "Variable 'ScriptExec.app_storage' (ScriptExec.sol#36) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bytes32 public registry_exec_id;\n",
          "message": "Variable 'ScriptExec.registry_exec_id' (ScriptExec.sol#38) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public exec_admin;\n",
          "message": "Variable 'ScriptExec.exec_admin' (ScriptExec.sol#39) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping (bytes32 => address) public deployed_by;\n",
          "message": "Variable 'ScriptExec.deployed_by' (ScriptExec.sol#52) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping (bytes32 => Instance) public instance_info;\n",
          "message": "Variable 'ScriptExec.instance_info' (ScriptExec.sol#54) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping (address => Instance[]) public deployed_instances;\n",
          "message": "Variable 'ScriptExec.deployed_instances' (ScriptExec.sol#56) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping (bytes32 => bytes32[]) public app_instances;\n",
          "message": "Variable 'ScriptExec.app_instances' (ScriptExec.sol#58) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bytes4 internal constant EXEC_SEL = bytes4(keccak256('exec(address,bytes32,bytes)'));\n",
          "message": "ScriptExec.EXEC_SEL (ScriptExec.sol#93) is never used in ScriptExec\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getAction(uint _ptr) internal pure returns (bytes4 action) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract ScriptExec {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getAction(uint _ptr) internal pure returns (bytes4 action) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function checkReturn() internal pure returns (bool success) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function () public payable { }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 119,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 140,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "execution failed"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "input files do not contain any valid contracts"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}