{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "    RevertHelper.revertBytes(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "      abi.encodeWithSelector(STORES, uint(1), execPermissions(msg.sender), bytes32(1))\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes memory temp = abi.encodeWithSelector(THROWS, uint(4));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "    RevertHelper.revertBytes(abi.encodeWithSelector(EMITS, uint(1), uint(1), _t1, uint(0)));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "    RevertHelper.revertBytes(abi.encodeWithSelector(PAYS, uint(1), msg.value, _dest));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "    RevertHelper.revertBytes(abi.encodeWithSelector(STORES, uint(1), _location, _val));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_8"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 12,
          "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n\n    assembly {\n\n      mstore(sub(_in, 0x20), 0x20)\n\n      revert (sub(_in, 0x20), add(0x40, mload(_in)))\n\n    }\n",
          "message": "RevertHelper.revertBytes (AppInitMock.sol#7-12) is declared view but contains assembly code\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 12,
          "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n\n    assembly {\n\n      mstore(sub(_in, 0x20), 0x20)\n\n      revert (sub(_in, 0x20), add(0x40, mload(_in)))\n\n    }\n",
          "message": "RevertHelper.revertBytes uses assembly (AppInitMock.sol#7-12)\n\t- AppInitMock.sol#8-12\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;\n",
          "message": "Detected issues with version pragma in AppInitMock.sol:\n\t- pragma solidity^0.4.23 (AppInitMock.sol#3): it allows old versions\n\t- pragma solidity^0.4.23 (AppInitMock.sol#17): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function execPermissions(address _exec) internal pure returns (bytes32 location) {\n",
          "message": "Parameter '_exec' of AppInitMock.execPermissions (AppInitMock.sol#29) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function initEmits(bytes32 _t1) external pure {\n",
          "message": "Parameter '_t1' of AppInitMock.initEmits (AppInitMock.sol#52) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function initPays(address _dest) external view {\n",
          "message": "Parameter '_dest' of AppInitMock.initPays (AppInitMock.sol#56) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function initStores(bytes32 _location, bytes32 _val) external pure {\n",
          "message": "Parameter '_location' of AppInitMock.initStores (AppInitMock.sol#60) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function initStores(bytes32 _location, bytes32 _val) external pure {\n",
          "message": "Parameter '_val' of AppInitMock.initStores (AppInitMock.sol#60) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "    RevertHelper.revertBytes(abi.encodePacked(temp, bytes4(0xffffffff)));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "    location = keccak256(_exec, EXEC_PERMISSIONS);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "    RevertHelper.revertBytes(abi.encodePacked(temp, bytes4(0xffffffff)));\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "      mstore(sub(_in, 0x20), 0x20)\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}