{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    RevertHelper.revertBytes(abi.encodeWithSelector(EMITS, uint(0)));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "    RevertHelper.revertBytes(abi.encodeWithSelector(EMITS, uint(1), uint(0), uint(0)));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes memory temp = abi.encodeWithSelector(EMITS, uint(1), uint(0));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes memory temp = abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "      EMITS, uint(1),\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "      uint(4), _t1, _t2, _t3, _t4\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes memory temp = abi.encodeWithSelector(EMITS, uint(2), uint(1), _t1);\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes memory temp = abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "      EMITS, uint(2), uint(4), _t1, _t2, _t3, _t4, uint(0)\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_16"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 12,
          "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n\n    assembly {\n\n      mstore(sub(_in, 0x20), 0x20)\n\n      revert (sub(_in, 0x20), add(0x40, mload(_in)))\n\n    }\n",
          "message": "RevertHelper.revertBytes (EmitsApp.sol#7-12) is declared view but contains assembly code\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 12,
          "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n\n    assembly {\n\n      mstore(sub(_in, 0x20), 0x20)\n\n      revert (sub(_in, 0x20), add(0x40, mload(_in)))\n\n    }\n",
          "message": "RevertHelper.revertBytes uses assembly (EmitsApp.sol#7-12)\n\t- EmitsApp.sol#8-12\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;\n",
          "message": "Detected issues with version pragma in EmitsApp.sol:\n\t- pragma solidity^0.4.23 (EmitsApp.sol#3): it allows old versions\n\t- pragma solidity^0.4.23 (EmitsApp.sol#17): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function emit1top0data(bytes _data) external pure {\n",
          "message": "Parameter '_data' of EmitsApp.emit1top0data (EmitsApp.sol#34) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function emit1top4data(bytes32 _t1, bytes32 _t2, bytes32 _t3, bytes32 _t4, bytes _data) external pure {\n",
          "message": "Parameter '_t1' of EmitsApp.emit1top4data (EmitsApp.sol#40) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function emit1top4data(bytes32 _t1, bytes32 _t2, bytes32 _t3, bytes32 _t4, bytes _data) external pure {\n",
          "message": "Parameter '_t2' of EmitsApp.emit1top4data (EmitsApp.sol#40) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function emit1top4data(bytes32 _t1, bytes32 _t2, bytes32 _t3, bytes32 _t4, bytes _data) external pure {\n",
          "message": "Parameter '_t3' of EmitsApp.emit1top4data (EmitsApp.sol#40) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function emit1top4data(bytes32 _t1, bytes32 _t2, bytes32 _t3, bytes32 _t4, bytes _data) external pure {\n",
          "message": "Parameter '_t4' of EmitsApp.emit1top4data (EmitsApp.sol#40) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function emit1top4data(bytes32 _t1, bytes32 _t2, bytes32 _t3, bytes32 _t4, bytes _data) external pure {\n",
          "message": "Parameter '_data' of EmitsApp.emit1top4data (EmitsApp.sol#40) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function emit2top1data(bytes32 _t1, bytes _data1, bytes _data2) external pure {\n",
          "message": "Parameter '_t1' of EmitsApp.emit2top1data (EmitsApp.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function emit2top1data(bytes32 _t1, bytes _data1, bytes _data2) external pure {\n",
          "message": "Parameter '_data1' of EmitsApp.emit2top1data (EmitsApp.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function emit2top1data(bytes32 _t1, bytes _data1, bytes _data2) external pure {\n",
          "message": "Parameter '_data2' of EmitsApp.emit2top1data (EmitsApp.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function emit2top4(bytes32 _t1, bytes32 _t2, bytes32 _t3, bytes32 _t4) external pure {\n",
          "message": "Parameter '_t1' of EmitsApp.emit2top4 (EmitsApp.sol#58) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function emit2top4(bytes32 _t1, bytes32 _t2, bytes32 _t3, bytes32 _t4) external pure {\n",
          "message": "Parameter '_t2' of EmitsApp.emit2top4 (EmitsApp.sol#58) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function emit2top4(bytes32 _t1, bytes32 _t2, bytes32 _t3, bytes32 _t4) external pure {\n",
          "message": "Parameter '_t3' of EmitsApp.emit2top4 (EmitsApp.sol#58) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function emit2top4(bytes32 _t1, bytes32 _t2, bytes32 _t3, bytes32 _t4) external pure {\n",
          "message": "Parameter '_t4' of EmitsApp.emit2top4 (EmitsApp.sol#58) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "      mstore(sub(_in, 0x20), 0x20)\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}