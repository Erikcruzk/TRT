{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes memory temp = abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "      EMITS, uint(1), uint(1), _t1, uint(0)\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes memory temp = abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": null,
          "vulnerability_code": "      PAYS, uint(1), msg.value, _dest\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes memory temp = abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "      EMITS, uint(1), uint(1), uint(_t1), uint(0)\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes memory temp = abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "      PAYS, uint(1), msg.value, _dest\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes memory temp = abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "      PAYS, uint(2), (msg.value / 2), _dest1, (msg.value / 2), _dest2\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes memory temp = abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "      EMITS, uint(2), uint(0)\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes memory temp = abi.encodeWithSelector(PAYS, uint(1), msg.value, _dest);\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 109,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes memory temp = abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "      STORES, uint(2), _loc1, _val1, _loc2, _val2\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_35"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 12,
          "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n\n    assembly {\n\n      mstore(sub(_in, 0x20), 0x20)\n\n      revert (sub(_in, 0x20), add(0x40, mload(_in)))\n\n    }\n",
          "message": "RevertHelper.revertBytes (MixedApp.sol#7-12) is declared view but contains assembly code\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 12,
          "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n\n    assembly {\n\n      mstore(sub(_in, 0x20), 0x20)\n\n      revert (sub(_in, 0x20), add(0x40, mload(_in)))\n\n    }\n",
          "message": "RevertHelper.revertBytes uses assembly (MixedApp.sol#7-12)\n\t- MixedApp.sol#8-12\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;\n",
          "message": "Detected issues with version pragma in MixedApp.sol:\n\t- pragma solidity^0.4.23 (MixedApp.sol#3): it allows old versions\n\t- pragma solidity^0.4.23 (MixedApp.sol#17): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function req0(bytes32 _t1) external pure {\n",
          "message": "Parameter '_t1' of MixedApp.req0 (MixedApp.sol#29) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function req1(address _dest, bytes32 _loc, bytes32 _val) external view {\n",
          "message": "Parameter '_dest' of MixedApp.req1 (MixedApp.sol#37) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function req1(address _dest, bytes32 _loc, bytes32 _val) external view {\n",
          "message": "Parameter '_loc' of MixedApp.req1 (MixedApp.sol#37) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function req1(address _dest, bytes32 _loc, bytes32 _val) external view {\n",
          "message": "Parameter '_val' of MixedApp.req1 (MixedApp.sol#37) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function req2(bytes32 _t1, bytes32 _loc, bytes32 _val) external pure {\n",
          "message": "Parameter '_t1' of MixedApp.req2 (MixedApp.sol#45) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function req2(bytes32 _t1, bytes32 _loc, bytes32 _val) external pure {\n",
          "message": "Parameter '_loc' of MixedApp.req2 (MixedApp.sol#45) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function req2(bytes32 _t1, bytes32 _loc, bytes32 _val) external pure {\n",
          "message": "Parameter '_val' of MixedApp.req2 (MixedApp.sol#45) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function req3(address _dest, bytes32 _t1) external view {\n",
          "message": "Parameter '_dest' of MixedApp.req3 (MixedApp.sol#53) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function req3(address _dest, bytes32 _t1) external view {\n",
          "message": "Parameter '_t1' of MixedApp.req3 (MixedApp.sol#53) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function reqs0(address _dest1, address _dest2, bytes32 _t1, bytes _data) external view {\n",
          "message": "Parameter '_dest1' of MixedApp.reqs0 (MixedApp.sol#61) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function reqs0(address _dest1, address _dest2, bytes32 _t1, bytes _data) external view {\n",
          "message": "Parameter '_dest2' of MixedApp.reqs0 (MixedApp.sol#61) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function reqs0(address _dest1, address _dest2, bytes32 _t1, bytes _data) external view {\n",
          "message": "Parameter '_t1' of MixedApp.reqs0 (MixedApp.sol#61) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function reqs0(address _dest1, address _dest2, bytes32 _t1, bytes _data) external view {\n",
          "message": "Parameter '_data' of MixedApp.reqs0 (MixedApp.sol#61) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _dest, bytes _data1, bytes _data2, bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
          "message": "Parameter '_dest' of MixedApp.reqs1 (MixedApp.sol#73) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _dest, bytes _data1, bytes _data2, bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
          "message": "Parameter '_data1' of MixedApp.reqs1 (MixedApp.sol#73) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _dest, bytes _data1, bytes _data2, bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
          "message": "Parameter '_data2' of MixedApp.reqs1 (MixedApp.sol#73) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _dest, bytes _data1, bytes _data2, bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
          "message": "Parameter '_loc1' of MixedApp.reqs1 (MixedApp.sol#73) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _dest, bytes _data1, bytes _data2, bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
          "message": "Parameter '_val1' of MixedApp.reqs1 (MixedApp.sol#73) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _dest, bytes _data1, bytes _data2, bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
          "message": "Parameter '_loc2' of MixedApp.reqs1 (MixedApp.sol#73) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _dest, bytes _data1, bytes _data2, bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
          "message": "Parameter '_val2' of MixedApp.reqs1 (MixedApp.sol#73) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _dest, bytes32[4] _topics, bytes _data, bytes32 _loc, bytes32 _val1\n",
          "message": "Parameter '_dest' of MixedApp.reqs2 (MixedApp.sol#86) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _dest, bytes32[4] _topics, bytes _data, bytes32 _loc, bytes32 _val1\n",
          "message": "Parameter '_topics' of MixedApp.reqs2 (MixedApp.sol#86) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _dest, bytes32[4] _topics, bytes _data, bytes32 _loc, bytes32 _val1\n",
          "message": "Parameter '_data' of MixedApp.reqs2 (MixedApp.sol#86) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _dest, bytes32[4] _topics, bytes _data, bytes32 _loc, bytes32 _val1\n",
          "message": "Parameter '_loc' of MixedApp.reqs2 (MixedApp.sol#86) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _dest, bytes32[4] _topics, bytes _data, bytes32 _loc, bytes32 _val1\n",
          "message": "Parameter '_val1' of MixedApp.reqs2 (MixedApp.sol#86) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _dest, bytes32 _t1, bytes _data, bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
          "message": "Parameter '_dest' of MixedApp.reqs3 (MixedApp.sol#107) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _dest, bytes32 _t1, bytes _data, bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
          "message": "Parameter '_t1' of MixedApp.reqs3 (MixedApp.sol#107) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _dest, bytes32 _t1, bytes _data, bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
          "message": "Parameter '_data' of MixedApp.reqs3 (MixedApp.sol#107) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _dest, bytes32 _t1, bytes _data, bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
          "message": "Parameter '_loc1' of MixedApp.reqs3 (MixedApp.sol#107) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _dest, bytes32 _t1, bytes _data, bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
          "message": "Parameter '_val1' of MixedApp.reqs3 (MixedApp.sol#107) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _dest, bytes32 _t1, bytes _data, bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
          "message": "Parameter '_loc2' of MixedApp.reqs3 (MixedApp.sol#107) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _dest, bytes32 _t1, bytes _data, bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
          "message": "Parameter '_val2' of MixedApp.reqs3 (MixedApp.sol#107) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bytes4 internal constant THROWS = bytes4(keccak256('Error(string)'));\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bytes4 internal constant THROWS = bytes4(keccak256('Error(string)'));\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "SYMBOLIC EXECUTION TIMEOUT"
      ],
      "vulnerability_findings": []
    }
  }
}