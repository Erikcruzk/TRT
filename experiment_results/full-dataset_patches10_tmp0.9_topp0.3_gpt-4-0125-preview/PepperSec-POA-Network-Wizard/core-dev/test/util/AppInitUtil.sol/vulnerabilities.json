{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_18"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 26,
          "vulnerability_code": "  function parseInit(bytes memory _data) public pure returns (address exec, address updater) {\n\n    assembly {\n\n      exec := mload(add(0x20, _data))\n\n      updater := mload(add(0x40, _data))\n\n    }\n",
          "message": "AppInitUtil.parseInit (AppInitUtil.sol#21-26) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": 34,
          "vulnerability_code": "  function parseInstanceCreated(bytes memory _data) public pure returns (address storage_addr, bytes32 app, bytes32 version) {\n\n    assembly {\n\n      storage_addr := mload(add(0x20, _data))\n\n      app := mload(add(0x40, _data))\n\n      version := mload(add(0x60, _data))\n\n    }\n",
          "message": "AppInitUtil.parseInstanceCreated (AppInitUtil.sol#28-34) is declared view but contains assembly code\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 26,
          "vulnerability_code": "  function parseInit(bytes memory _data) public pure returns (address exec, address updater) {\n\n    assembly {\n\n      exec := mload(add(0x20, _data))\n\n      updater := mload(add(0x40, _data))\n\n    }\n",
          "message": "AppInitUtil.parseInit uses assembly (AppInitUtil.sol#21-26)\n\t- AppInitUtil.sol#22-26\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": 34,
          "vulnerability_code": "  function parseInstanceCreated(bytes memory _data) public pure returns (address storage_addr, bytes32 app, bytes32 version) {\n\n    assembly {\n\n      storage_addr := mload(add(0x20, _data))\n\n      app := mload(add(0x40, _data))\n\n      version := mload(add(0x60, _data))\n\n    }\n",
          "message": "AppInitUtil.parseInstanceCreated uses assembly (AppInitUtil.sol#28-34)\n\t- AppInitUtil.sol#29-34\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function init() public pure returns (bytes memory) { return msg.data; }\n",
          "message": "AppInitUtil.init (AppInitUtil.sol#7) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function initInvalid() public pure returns (bytes memory) { return msg.data; }\n",
          "message": "AppInitUtil.initInvalid (AppInitUtil.sol#9) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function initNullAction() public pure returns (bytes memory) { return msg.data; }\n",
          "message": "AppInitUtil.initNullAction (AppInitUtil.sol#11) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function initThrowsAction() public pure returns (bytes memory) { return msg.data; }\n",
          "message": "AppInitUtil.initThrowsAction (AppInitUtil.sol#13) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function initEmits(bytes32) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "AppInitUtil.initEmits (AppInitUtil.sol#15) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function initPays(address) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "AppInitUtil.initPays (AppInitUtil.sol#17) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function initStores(bytes32, bytes32) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "AppInitUtil.initStores (AppInitUtil.sol#19) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 26,
          "vulnerability_code": "  function parseInit(bytes memory _data) public pure returns (address exec, address updater) {\n\n    assembly {\n\n      exec := mload(add(0x20, _data))\n\n      updater := mload(add(0x40, _data))\n\n    }\n",
          "message": "AppInitUtil.parseInit (AppInitUtil.sol#21-26) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": 34,
          "vulnerability_code": "  function parseInstanceCreated(bytes memory _data) public pure returns (address storage_addr, bytes32 app, bytes32 version) {\n\n    assembly {\n\n      storage_addr := mload(add(0x20, _data))\n\n      app := mload(add(0x40, _data))\n\n      version := mload(add(0x60, _data))\n\n    }\n",
          "message": "AppInitUtil.parseInstanceCreated (AppInitUtil.sol#28-34) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;\n",
          "message": "Detected issues with version pragma in AppInitUtil.sol:\n\t- pragma solidity^0.4.23 (AppInitUtil.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function initEmits(bytes32) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '' of AppInitUtil.initEmits (AppInitUtil.sol#15) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function initPays(address) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '' of AppInitUtil.initPays (AppInitUtil.sol#17) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function initStores(bytes32, bytes32) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '' of AppInitUtil.initStores (AppInitUtil.sol#19) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function initStores(bytes32, bytes32) public pure returns (bytes memory) { return msg.data; }\n",
          "message": "Parameter '_scope_0' of AppInitUtil.initStores (AppInitUtil.sol#19) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function parseInit(bytes memory _data) public pure returns (address exec, address updater) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function parseInstanceCreated(bytes memory _data) public pure returns (address storage_addr, bytes32 app, bytes32 version) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function parseInit(bytes memory _data) public pure returns (address exec, address updater) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function parseInstanceCreated(bytes memory _data) public pure returns (address storage_addr, bytes32 app, bytes32 version) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function initNullAction() public pure returns (bytes memory) { return msg.data; }\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function parseInstanceCreated(bytes memory _data) public pure returns (address storage_addr, bytes32 app, bytes32 version) {\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function parseInstanceCreated(bytes memory _data) public pure returns (address storage_addr, bytes32 app, bytes32 version) {\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function parseInit(bytes memory _data) public pure returns (address exec, address updater) {\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function parseInit(bytes memory _data) public pure returns (address exec, address updater) {\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}