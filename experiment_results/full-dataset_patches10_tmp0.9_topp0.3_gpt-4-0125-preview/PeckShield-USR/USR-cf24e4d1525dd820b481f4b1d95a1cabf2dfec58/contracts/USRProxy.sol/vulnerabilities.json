{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _implementation) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assert(IMPLEMENTATION_SLOT == keccak256(\"org.zeppelinos.proxy.implementation\"));\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _setImplementation(_implementation);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _implementation) UpgradeabilityProxy(_implementation) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assert(ADMIN_SLOT == keccak256(\"org.zeppelinos.proxy.admin\"));\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _setAdmin(msg.sender);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 146,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _implementation) public AdminUpgradeabilityProxy(_implementation) {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 147,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(AddressUtils.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(AddressUtils.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_25"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": 41,
          "vulnerability_code": "    function isContract(address addr) internal view returns (bool) {\n\n        uint256 size;\n\n\n\n        assembly { size := extcodesize(addr) }\n\n        return size > 0;\n",
          "message": "AddressUtils.isContract (USRProxy.sol#36-41) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": 61,
          "vulnerability_code": "    function _implementation() internal view returns (address impl) {\n\n        bytes32 slot = IMPLEMENTATION_SLOT;\n\n        assembly {\n\n            impl := sload(slot)\n\n        }\n",
          "message": "UpgradeabilityProxy._implementation (USRProxy.sol#56-61) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 124,
          "vulnerability_to_line": 129,
          "vulnerability_code": "    function _admin() internal view returns (address adm) {\n\n        bytes32 slot = ADMIN_SLOT;\n\n        assembly {\n\n            adm := sload(slot)\n\n        }\n",
          "message": "AdminUpgradeabilityProxy._admin (USRProxy.sol#124-129) is declared view but contains assembly code\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _implementation) public {\n",
          "message": "UpgradeabilityProxy.constructor._implementation (local variable @ USRProxy.sol#50) shadows:\n\t- UpgradeabilityProxy._implementation (function @ USRProxy.sol#56-61)\n\t- Proxy._implementation (function @ USRProxy.sol#10)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _implementation) UpgradeabilityProxy(_implementation) public {\n",
          "message": "AdminUpgradeabilityProxy.constructor._implementation (local variable @ USRProxy.sol#93) shadows:\n\t- UpgradeabilityProxy._implementation (function @ USRProxy.sol#56-61)\n\t- Proxy._implementation (function @ USRProxy.sol#10)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 146,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _implementation) public AdminUpgradeabilityProxy(_implementation) {\n",
          "message": "USRProxy.constructor._implementation (local variable @ USRProxy.sol#146) shadows:\n\t- UpgradeabilityProxy._implementation (function @ USRProxy.sol#56-61)\n\t- Proxy._implementation (function @ USRProxy.sol#10)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": 23,
          "vulnerability_code": "    function _delegate(address implementation) internal {\n\n        assembly {\n\n            calldatacopy(0, 0, calldatasize)\n\n\n\n            let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\n\n            returndatacopy(0, 0, returndatasize)\n\n\n\n            switch result\n\n            case 0 { revert(0, returndatasize) }\n\n            default { return(0, returndatasize) }\n\n        }\n",
          "message": "Proxy._delegate uses assembly (USRProxy.sol#12-23)\n\t- USRProxy.sol#13-22\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": 41,
          "vulnerability_code": "    function isContract(address addr) internal view returns (bool) {\n\n        uint256 size;\n\n\n\n        assembly { size := extcodesize(addr) }\n\n        return size > 0;\n",
          "message": "AddressUtils.isContract uses assembly (USRProxy.sol#36-41)\n\t- USRProxy.sol#39\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": 61,
          "vulnerability_code": "    function _implementation() internal view returns (address impl) {\n\n        bytes32 slot = IMPLEMENTATION_SLOT;\n\n        assembly {\n\n            impl := sload(slot)\n\n        }\n",
          "message": "UpgradeabilityProxy._implementation uses assembly (USRProxy.sol#56-61)\n\t- USRProxy.sol#58-60\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": 76,
          "vulnerability_code": "    function _setImplementation(address newImplementation) private {\n\n        require(AddressUtils.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n\n\n\n        bytes32 slot = IMPLEMENTATION_SLOT;\n\n\n\n        assembly {\n\n            sstore(slot, newImplementation)\n\n        }\n",
          "message": "UpgradeabilityProxy._setImplementation uses assembly (USRProxy.sol#68-76)\n\t- USRProxy.sol#73-75\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 124,
          "vulnerability_to_line": 129,
          "vulnerability_code": "    function _admin() internal view returns (address adm) {\n\n        bytes32 slot = ADMIN_SLOT;\n\n        assembly {\n\n            adm := sload(slot)\n\n        }\n",
          "message": "AdminUpgradeabilityProxy._admin uses assembly (USRProxy.sol#124-129)\n\t- USRProxy.sol#126-128\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 131,
          "vulnerability_to_line": 137,
          "vulnerability_code": "    function _setAdmin(address newAdmin) internal {\n\n        bytes32 slot = ADMIN_SLOT;\n\n\n\n        assembly {\n\n            sstore(slot, newAdmin)\n\n        }\n",
          "message": "AdminUpgradeabilityProxy._setAdmin uses assembly (USRProxy.sol#131-137)\n\t- USRProxy.sol#134-136\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.12;\n",
          "message": "Detected issues with version pragma in USRProxy.sol:\n\t- pragma solidity^0.5.12 (USRProxy.sol#3): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": 122,
          "vulnerability_code": "    function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {\n\n        _upgradeTo(newImplementation);\n\n        (bool success,) = address(this).call.value(msg.value)(data);\n\n        require(success);\n\n        // require(address(this).call.value(msg.value)(data));\n",
          "message": "Low level call in AdminUpgradeabilityProxy.upgradeToAndCall (USRProxy.sol#117-122):\n\t-(success) = address(this).call.value(msg.value)(data) USRProxy.sol#119\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _implementation() internal view returns (address);\n",
          "message": "Function 'Proxy._implementation' (USRProxy.sol#10) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": 23,
          "vulnerability_code": "    function _delegate(address implementation) internal {\n\n        assembly {\n\n            calldatacopy(0, 0, calldatasize)\n\n\n\n            let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\n\n            returndatacopy(0, 0, returndatasize)\n\n\n\n            switch result\n\n            case 0 { revert(0, returndatasize) }\n\n            default { return(0, returndatasize) }\n\n        }\n",
          "message": "Function 'Proxy._delegate' (USRProxy.sol#12-23) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": 26,
          "vulnerability_code": "    function _willFallback() internal {\n",
          "message": "Function 'Proxy._willFallback' (USRProxy.sol#25-26) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": 31,
          "vulnerability_code": "    function _fallback() internal {\n\n        _willFallback();\n\n        _delegate(_implementation());\n",
          "message": "Function 'Proxy._fallback' (USRProxy.sol#28-31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": 61,
          "vulnerability_code": "    function _implementation() internal view returns (address impl) {\n\n        bytes32 slot = IMPLEMENTATION_SLOT;\n\n        assembly {\n\n            impl := sload(slot)\n\n        }\n",
          "message": "Function 'UpgradeabilityProxy._implementation' (USRProxy.sol#56-61) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _implementation) public {\n",
          "message": "Parameter '_implementation' of UpgradeabilityProxy. (USRProxy.sol#50) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": 66,
          "vulnerability_code": "    function _upgradeTo(address newImplementation) internal {\n\n        _setImplementation(newImplementation);\n\n        emit Upgraded(newImplementation);\n",
          "message": "Function 'UpgradeabilityProxy._upgradeTo' (USRProxy.sol#63-66) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": 76,
          "vulnerability_code": "    function _setImplementation(address newImplementation) private {\n\n        require(AddressUtils.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n\n\n\n        bytes32 slot = IMPLEMENTATION_SLOT;\n\n\n\n        assembly {\n\n            sstore(slot, newImplementation)\n\n        }\n",
          "message": "Function 'UpgradeabilityProxy._setImplementation' (USRProxy.sol#68-76) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 139,
          "vulnerability_to_line": 142,
          "vulnerability_code": "    function _willFallback() internal {\n\n        // require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\n\n        super._willFallback();\n",
          "message": "Function 'AdminUpgradeabilityProxy._willFallback' (USRProxy.sol#139-142) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 124,
          "vulnerability_to_line": 129,
          "vulnerability_code": "    function _admin() internal view returns (address adm) {\n\n        bytes32 slot = ADMIN_SLOT;\n\n        assembly {\n\n            adm := sload(slot)\n\n        }\n",
          "message": "Function 'AdminUpgradeabilityProxy._admin' (USRProxy.sol#124-129) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 131,
          "vulnerability_to_line": 137,
          "vulnerability_code": "    function _setAdmin(address newAdmin) internal {\n\n        bytes32 slot = ADMIN_SLOT;\n\n\n\n        assembly {\n\n            sstore(slot, newAdmin)\n\n        }\n",
          "message": "Function 'AdminUpgradeabilityProxy._setAdmin' (USRProxy.sol#131-137) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _implementation() internal view returns (address impl) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 124,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _admin() internal view returns (address adm) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Proxy {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.12;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32 private constant IMPLEMENTATION_SLOT = 0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32 private constant ADMIN_SLOT = 0x10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isContract(address addr) internal view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _implementation() internal view returns (address impl) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 124,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _admin() internal view returns (address adm) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 119,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success,) = address(this).call.value(msg.value)(data);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 126,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}