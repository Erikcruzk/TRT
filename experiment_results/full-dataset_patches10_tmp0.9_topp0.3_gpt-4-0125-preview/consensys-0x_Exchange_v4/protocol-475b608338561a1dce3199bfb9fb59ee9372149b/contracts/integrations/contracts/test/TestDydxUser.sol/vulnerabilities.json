{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 147,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 148,
          "vulnerability_to_line": null,
          "vulnerability_code": "            daiBalance > 0,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"TestDydxUser/DAI_BALANCE_MUST_BE_NONZERO\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 153,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 154,
          "vulnerability_to_line": null,
          "vulnerability_code": "            IERC20Token(DAI_ADDRESS).approve(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": null,
          "vulnerability_code": "                DYDX_ADDRESS,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 156,
          "vulnerability_to_line": null,
          "vulnerability_code": "                daiBalance\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "            ),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"TestDydxUser/FAILED_TO_SET_DAI_ALLOWANCE\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 159,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 147,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 148,
          "vulnerability_to_line": null,
          "vulnerability_code": "            daiBalance > 0,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"TestDydxUser/DAI_BALANCE_MUST_BE_NONZERO\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 153,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 154,
          "vulnerability_to_line": null,
          "vulnerability_code": "            IERC20Token(DAI_ADDRESS).approve(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": null,
          "vulnerability_code": "                DYDX_ADDRESS,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 156,
          "vulnerability_to_line": null,
          "vulnerability_code": "                daiBalance\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "            ),\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"TestDydxUser/FAILED_TO_SET_DAI_ALLOWANCE\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 159,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_3"
      ],
      "vulnerability_findings": [
        {
          "name": "pragma",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": "Different versions of Solidity is used in TestDydxUser.sol:\n\t- Version used: ['ABIEncoderV2', '^0.5.9']\n\t- TestDydxUser.sol#21 declares pragma solidity^0.5.9\n\t- TestDydxUser.sol#22 declares pragma experimentalABIEncoderV2\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": 208,
          "vulnerability_code": "    function init()\n\n        public\n\n        returns (bytes4)\n\n    {\n\n        // 1. Assert that this account has DAI.\n\n        uint256 daiBalance = IERC20Token(DAI_ADDRESS).balanceOf(address(this));\n\n        require(\n\n            daiBalance > 0,\n\n            \"TestDydxUser/DAI_BALANCE_MUST_BE_NONZERO\"\n\n        );\n\n\n\n        // 2. Set allowance for Dydx to transfer DAI.\n\n        require(\n\n            IERC20Token(DAI_ADDRESS).approve(\n\n                DYDX_ADDRESS,\n\n                daiBalance\n\n            ),\n\n            \"TestDydxUser/FAILED_TO_SET_DAI_ALLOWANCE\"\n\n        );\n\n\n\n        // 3. Add DydxBridge as operator on dydx.\n\n        //    This will revert on failure.\n\n        IDydx.OperatorArg[] memory operatorArgs = new IDydx.OperatorArg[](1);\n\n        operatorArgs[0] = IDydx.OperatorArg({\n\n            operator: DYDX_BRIDGE_ADDRESS,\n\n            trusted: true\n\n        });\n\n        IDydx(DYDX_ADDRESS).setOperators(operatorArgs);\n\n\n\n        // 4. Deposit 1/2 DAI balance into dydx. This allows us to test withdrawals.\n\n        // 4.i Create dydx account struct.\n\n        IDydx.AccountInfo[] memory accounts = new IDydx.AccountInfo[](1);\n\n        accounts[0] = IDydx.AccountInfo({\n\n            owner: address(this),\n\n            number: 0\n\n        });\n\n\n\n         // 4.ii Create dydx amount.\n\n        IDydx.AssetAmount memory dydxAmount = IDydx.AssetAmount({\n\n            sign: true,                                 // true if positive.\n\n            denomination: IDydx.AssetDenomination.Wei,  // Wei => actual token amount held in account.\n\n            ref: IDydx.AssetReference.Delta,            // Delta => a relative amount.\n\n            value: daiBalance / 2                       // amount to deposit.\n\n        });\n\n\n\n        // 4.iii Create dydx deposit action.\n\n        IDydx.ActionArgs[] memory actions = new IDydx.ActionArgs[](1);\n\n        actions[0] = IDydx.ActionArgs({\n\n            actionType: IDydx.ActionType.Deposit,           // deposit tokens.\n\n            amount: dydxAmount,                             // amount to deposit.\n\n            accountId: 0,                                   // index in the `accounts` when calling `operate`.\n\n            primaryMarketId: DYDX_DAI_MARKET_ID,            // indicates which token to deposit.\n\n            otherAddress: address(this),                    // deposit from the account owner.\n\n            // unused parameters\n\n            secondaryMarketId: 0,\n\n            otherAccountId: 0,\n\n            data: hex''\n\n        });\n\n\n\n        // 4.iv Deposit DAI into dydx. This will revert on failure.\n\n        IDydx(DYDX_ADDRESS).operate(\n\n            accounts,\n\n            actions\n\n        );\n\n\n\n        // Return magic bytes on success.\n\n        return MAGIC_BYTES;\n",
          "message": "TestDydxUser.init (TestDydxUser.sol#141-208) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": "Detected issues with version pragma in TestDydxUser.sol:\n\t- pragma solidity^0.5.9 (TestDydxUser.sol#21): it allows old versions\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address public constant DYDX_BRIDGE_ADDRESS = 0x55dC8f21D20D4c6ED3C82916A438A413ca68e335;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address public constant DYDX_ADDRESS = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 137,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address public constant DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}