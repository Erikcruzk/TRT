{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_6"
      ],
      "vulnerability_findings": [
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 160,
          "vulnerability_code": "contract IERC721Token {\n\n\n\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\n\n    ///      This event emits when NFTs are created (`from` == 0) and destroyed\n\n    ///      (`to` == 0). Exception: during contract creation, any number of NFTs\n\n    ///      may be created and assigned without emitting Transfer. At the time of\n\n    ///      any transfer, the approved address for that NFT (if any) is reset to none.\n\n    event Transfer(\n\n        address indexed _from,\n\n        address indexed _to,\n\n        uint256 indexed _tokenId\n\n    );\n\n\n\n    /// @dev This emits when the approved address for an NFT is changed or\n\n    ///      reaffirmed. The zero address indicates there is no approved address.\n\n    ///      When a Transfer event emits, this also indicates that the approved\n\n    ///      address for that NFT (if any) is reset to none.\n\n    event Approval(\n\n        address indexed _owner,\n\n        address indexed _approved,\n\n        uint256 indexed _tokenId\n\n    );\n\n\n\n    /// @dev This emits when an operator is enabled or disabled for an owner.\n\n    ///      The operator can manage all NFTs of the owner.\n\n    event ApprovalForAll(\n\n        address indexed _owner,\n\n        address indexed _operator,\n\n        bool _approved\n\n    );\n\n\n\n    /// @notice Transfers the ownership of an NFT from one address to another address\n\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n\n    ///      perator, or the approved address for this NFT. Throws if `_from` is\n\n    ///      not the current owner. Throws if `_to` is the zero address. Throws if\n\n    ///      `_tokenId` is not a valid NFT. When transfer is complete, this function\n\n    ///      checks if `_to` is a smart contract (code size > 0). If so, it calls\n\n    ///      `onERC721Received` on `_to` and throws if the return value is not\n\n    ///      `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\n\n    /// @param _from The current owner of the NFT\n\n    /// @param _to The new owner\n\n    /// @param _tokenId The NFT to transfer\n\n    /// @param _data Additional data with no specified format, sent in call to `_to`\n\n    function safeTransferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _tokenId,\n\n        bytes calldata _data\n\n    )\n\n        external;\n\n\n\n    /// @notice Transfers the ownership of an NFT from one address to another address\n\n    /// @dev This works identically to the other function with an extra data parameter,\n\n    ///      except this function just sets data to \"\".\n\n    /// @param _from The current owner of the NFT\n\n    /// @param _to The new owner\n\n    /// @param _tokenId The NFT to transfer\n\n    function safeTransferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _tokenId\n\n    )\n\n        external;\n\n\n\n    /// @notice Change or reaffirm the approved address for an NFT\n\n    /// @dev The zero address indicates there is no approved address.\n\n    ///      Throws unless `msg.sender` is the current NFT owner, or an authorized\n\n    ///      operator of the current owner.\n\n    /// @param _approved The new approved NFT controller\n\n    /// @param _tokenId The NFT to approve\n\n    function approve(address _approved, uint256 _tokenId)\n\n        external;\n\n\n\n    /// @notice Enable or disable approval for a third party (\"operator\") to manage\n\n    ///         all of `msg.sender`'s assets\n\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\n\n    ///      multiple operators per owner.\n\n    /// @param _operator Address to add to the set of authorized operators\n\n    /// @param _approved True if the operator is approved, false to revoke approval\n\n    function setApprovalForAll(address _operator, bool _approved)\n\n        external;\n\n\n\n    /// @notice Count all NFTs assigned to an owner\n\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\n\n    ///      function throws for queries about the zero address.\n\n    /// @param _owner An address for whom to query the balance\n\n    /// @return The number of NFTs owned by `_owner`, possibly zero\n\n    function balanceOf(address _owner)\n\n        external\n\n        view\n\n        returns (uint256);\n\n\n\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\n\n    ///         TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\n\n    ///         THEY MAY BE PERMANENTLY LOST\n\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n\n    ///      operator, or the approved address for this NFT. Throws if `_from` is\n\n    ///      not the current owner. Throws if `_to` is the zero address. Throws if\n\n    ///      `_tokenId` is not a valid NFT.\n\n    /// @param _from The current owner of the NFT\n\n    /// @param _to The new owner\n\n    /// @param _tokenId The NFT to transfer\n\n    function transferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _tokenId\n\n    )\n\n        public;\n\n\n\n    /// @notice Find the owner of an NFT\n\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\n\n    ///      about them do throw.\n\n    /// @param _tokenId The identifier for an NFT\n\n    /// @return The address of the owner of the NFT\n\n    function ownerOf(uint256 _tokenId)\n\n        public\n\n        view\n\n        returns (address);\n\n\n\n    /// @notice Get the approved address for a single NFT\n\n    /// @dev Throws if `_tokenId` is not a valid NFT.\n\n    /// @param _tokenId The NFT to find the approved address for\n\n    /// @return The approved address for this NFT, or the zero address if there is none\n\n    function getApproved(uint256 _tokenId) \n\n        public\n\n        view\n\n        returns (address);\n\n    \n\n    /// @notice Query if an address is an authorized operator for another address\n\n    /// @param _owner The address that owns the NFTs\n\n    /// @param _operator The address that acts on behalf of the owner\n\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\n\n    function isApprovedForAll(address _owner, address _operator)\n\n        public\n\n        view\n\n        returns (bool);\n",
          "message": "IERC721Token (IERC721Token.sol#24-160) has incorrect ERC20 function interface(s):\n\t-approve (IERC721Token.sol#94-95)\n\t-transferFrom (IERC721Token.sol#126-131)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 126,
          "vulnerability_to_line": 131,
          "vulnerability_code": "    function transferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _tokenId\n\n    )\n",
          "message": "IERC721Token.transferFrom (IERC721Token.sol#126-131) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": 141,
          "vulnerability_code": "    function ownerOf(uint256 _tokenId)\n\n        public\n\n        view\n",
          "message": "IERC721Token.ownerOf (IERC721Token.sol#138-141) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 147,
          "vulnerability_to_line": 150,
          "vulnerability_code": "    function getApproved(uint256 _tokenId) \n\n        public\n\n        view\n",
          "message": "IERC721Token.getApproved (IERC721Token.sol#147-150) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 156,
          "vulnerability_to_line": 159,
          "vulnerability_code": "    function isApprovedForAll(address _owner, address _operator)\n\n        public\n\n        view\n",
          "message": "IERC721Token.isApprovedForAll (IERC721Token.sol#156-159) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": "Detected issues with version pragma in IERC721Token.sol:\n\t- pragma solidity^0.5.9 (IERC721Token.sol#21): it allows old versions\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "execution failed"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "input files do not contain any valid contracts"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}