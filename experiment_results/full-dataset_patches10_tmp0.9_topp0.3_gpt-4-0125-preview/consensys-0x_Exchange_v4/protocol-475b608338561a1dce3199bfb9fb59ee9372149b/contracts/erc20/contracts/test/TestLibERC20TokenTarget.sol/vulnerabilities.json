{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_4"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 100,
          "vulnerability_to_line": 107,
          "vulnerability_code": "    function _execute() private view {\n\n        if (_shouldRevert) {\n\n            bytes memory revertData = _revertData;\n\n            assembly { revert(add(revertData, 0x20), mload(revertData)) }\n\n        }\n\n        bytes memory returnData = _returnData;\n\n        assembly { return(add(returnData, 0x20), mload(returnData)) }\n",
          "message": "TestLibERC20TokenTarget._execute (TestLibERC20TokenTarget.sol#100-107) is declared view but contains assembly code\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 100,
          "vulnerability_to_line": 107,
          "vulnerability_code": "    function _execute() private view {\n\n        if (_shouldRevert) {\n\n            bytes memory revertData = _revertData;\n\n            assembly { revert(add(revertData, 0x20), mload(revertData)) }\n\n        }\n\n        bytes memory returnData = _returnData;\n\n        assembly { return(add(returnData, 0x20), mload(returnData)) }\n",
          "message": "TestLibERC20TokenTarget._execute uses assembly (TestLibERC20TokenTarget.sol#100-107)\n\t- TestLibERC20TokenTarget.sol#103\n\t- TestLibERC20TokenTarget.sol#106\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": "Detected issues with version pragma in TestLibERC20TokenTarget.sol:\n\t- pragma solidity^0.5.9 (TestLibERC20TokenTarget.sol#21): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 100,
          "vulnerability_to_line": 107,
          "vulnerability_code": "    function _execute() private view {\n\n        if (_shouldRevert) {\n\n            bytes memory revertData = _revertData;\n\n            assembly { revert(add(revertData, 0x20), mload(revertData)) }\n\n        }\n\n        bytes memory returnData = _returnData;\n\n        assembly { return(add(returnData, 0x20), mload(returnData)) }\n",
          "message": "Function 'TestLibERC20TokenTarget._execute' (TestLibERC20TokenTarget.sol#100-107) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool private _shouldRevert;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes private _revertData;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes private _returnData;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setBehavior(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata revertData,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata returnData\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _revertData = revertData;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _returnData = returnData;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory returnData = _returnData;\n",
          "message": "The arithmetic operator can underflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory returnData = _returnData;\n",
          "message": "The arithmetic operator can underflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": "The arithmetic operator can underflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.\nClassification: SWC-101"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}