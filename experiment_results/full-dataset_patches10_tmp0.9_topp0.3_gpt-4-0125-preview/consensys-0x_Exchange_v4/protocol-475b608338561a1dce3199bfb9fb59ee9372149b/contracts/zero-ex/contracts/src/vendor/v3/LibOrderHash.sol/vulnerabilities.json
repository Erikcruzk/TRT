{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_8"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": 249,
          "vulnerability_code": "    function getStructHash(IExchange.Order memory order)\n\n        internal\n\n        pure\n\n        returns (bytes32 result)\n\n    {\n\n        bytes32 schemaHash = _EIP712_ORDER_SCHEMA_HASH;\n\n        bytes memory makerAssetData = order.makerAssetData;\n\n        bytes memory takerAssetData = order.takerAssetData;\n\n        bytes memory makerFeeAssetData = order.makerFeeAssetData;\n\n        bytes memory takerFeeAssetData = order.takerFeeAssetData;\n\n\n\n        // Assembly for more efficiently computing:\n\n        // keccak256(abi.encodePacked(\n\n        //     EIP712_ORDER_SCHEMA_HASH,\n\n        //     uint256(order.makerAddress),\n\n        //     uint256(order.takerAddress),\n\n        //     uint256(order.feeRecipientAddress),\n\n        //     uint256(order.senderAddress),\n\n        //     order.makerAssetAmount,\n\n        //     order.takerAssetAmount,\n\n        //     order.makerFee,\n\n        //     order.takerFee,\n\n        //     order.expirationTimeSeconds,\n\n        //     order.salt,\n\n        //     keccak256(order.makerAssetData),\n\n        //     keccak256(order.takerAssetData),\n\n        //     keccak256(order.makerFeeAssetData),\n\n        //     keccak256(order.takerFeeAssetData)\n\n        // ));\n\n\n\n        assembly {\n\n            // Assert order offset (this is an internal error that should never be triggered)\n\n            if lt(order, 32) {\n\n                invalid()\n\n            }\n\n\n\n            // Calculate memory addresses that will be swapped out before hashing\n\n            let pos1 := sub(order, 32)\n\n            let pos2 := add(order, 320)\n\n            let pos3 := add(order, 352)\n\n            let pos4 := add(order, 384)\n\n            let pos5 := add(order, 416)\n\n\n\n            // Backup\n\n            let temp1 := mload(pos1)\n\n            let temp2 := mload(pos2)\n\n            let temp3 := mload(pos3)\n\n            let temp4 := mload(pos4)\n\n            let temp5 := mload(pos5)\n\n\n\n            // Hash in place\n\n            mstore(pos1, schemaHash)\n\n            mstore(pos2, keccak256(add(makerAssetData, 32), mload(makerAssetData)))        // store hash of makerAssetData\n\n            mstore(pos3, keccak256(add(takerAssetData, 32), mload(takerAssetData)))        // store hash of takerAssetData\n\n            mstore(pos4, keccak256(add(makerFeeAssetData, 32), mload(makerFeeAssetData)))  // store hash of makerFeeAssetData\n\n            mstore(pos5, keccak256(add(takerFeeAssetData, 32), mload(takerFeeAssetData)))  // store hash of takerFeeAssetData\n\n            result := keccak256(pos1, 480)\n\n\n\n            // Restore\n\n            mstore(pos1, temp1)\n\n            mstore(pos2, temp2)\n\n            mstore(pos3, temp3)\n\n            mstore(pos4, temp4)\n\n            mstore(pos5, temp5)\n\n        }\n\n        return result;\n",
          "message": "LibOrderHash.getStructHash (LibOrderHash.sol#183-249) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 256,
          "vulnerability_to_line": 280,
          "vulnerability_code": "    function _hashEIP712Message(bytes32 eip712DomainHash, bytes32 hashStruct)\n\n        internal\n\n        pure\n\n        returns (bytes32 result)\n\n    {\n\n        // Assembly for more efficient computing:\n\n        // keccak256(abi.encodePacked(\n\n        //     EIP191_HEADER,\n\n        //     EIP712_DOMAIN_HASH,\n\n        //     hashStruct\n\n        // ));\n\n\n\n        assembly {\n\n            // Load free memory pointer\n\n            let memPtr := mload(64)\n\n\n\n            mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000)  // EIP191 header\n\n            mstore(add(memPtr, 2), eip712DomainHash)                                            // EIP712 domain hash\n\n            mstore(add(memPtr, 34), hashStruct)                                                 // Hash of struct\n\n\n\n            // Compute hash\n\n            result := keccak256(memPtr, 66)\n\n        }\n\n        return result;\n",
          "message": "LibOrderHash._hashEIP712Message (LibOrderHash.sol#256-280) is declared view but contains assembly code\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": 249,
          "vulnerability_code": "    function getStructHash(IExchange.Order memory order)\n\n        internal\n\n        pure\n\n        returns (bytes32 result)\n\n    {\n\n        bytes32 schemaHash = _EIP712_ORDER_SCHEMA_HASH;\n\n        bytes memory makerAssetData = order.makerAssetData;\n\n        bytes memory takerAssetData = order.takerAssetData;\n\n        bytes memory makerFeeAssetData = order.makerFeeAssetData;\n\n        bytes memory takerFeeAssetData = order.takerFeeAssetData;\n\n\n\n        // Assembly for more efficiently computing:\n\n        // keccak256(abi.encodePacked(\n\n        //     EIP712_ORDER_SCHEMA_HASH,\n\n        //     uint256(order.makerAddress),\n\n        //     uint256(order.takerAddress),\n\n        //     uint256(order.feeRecipientAddress),\n\n        //     uint256(order.senderAddress),\n\n        //     order.makerAssetAmount,\n\n        //     order.takerAssetAmount,\n\n        //     order.makerFee,\n\n        //     order.takerFee,\n\n        //     order.expirationTimeSeconds,\n\n        //     order.salt,\n\n        //     keccak256(order.makerAssetData),\n\n        //     keccak256(order.takerAssetData),\n\n        //     keccak256(order.makerFeeAssetData),\n\n        //     keccak256(order.takerFeeAssetData)\n\n        // ));\n\n\n\n        assembly {\n\n            // Assert order offset (this is an internal error that should never be triggered)\n\n            if lt(order, 32) {\n\n                invalid()\n\n            }\n\n\n\n            // Calculate memory addresses that will be swapped out before hashing\n\n            let pos1 := sub(order, 32)\n\n            let pos2 := add(order, 320)\n\n            let pos3 := add(order, 352)\n\n            let pos4 := add(order, 384)\n\n            let pos5 := add(order, 416)\n\n\n\n            // Backup\n\n            let temp1 := mload(pos1)\n\n            let temp2 := mload(pos2)\n\n            let temp3 := mload(pos3)\n\n            let temp4 := mload(pos4)\n\n            let temp5 := mload(pos5)\n\n\n\n            // Hash in place\n\n            mstore(pos1, schemaHash)\n\n            mstore(pos2, keccak256(add(makerAssetData, 32), mload(makerAssetData)))        // store hash of makerAssetData\n\n            mstore(pos3, keccak256(add(takerAssetData, 32), mload(takerAssetData)))        // store hash of takerAssetData\n\n            mstore(pos4, keccak256(add(makerFeeAssetData, 32), mload(makerFeeAssetData)))  // store hash of makerFeeAssetData\n\n            mstore(pos5, keccak256(add(takerFeeAssetData, 32), mload(takerFeeAssetData)))  // store hash of takerFeeAssetData\n\n            result := keccak256(pos1, 480)\n\n\n\n            // Restore\n\n            mstore(pos1, temp1)\n\n            mstore(pos2, temp2)\n\n            mstore(pos3, temp3)\n\n            mstore(pos4, temp4)\n\n            mstore(pos5, temp5)\n\n        }\n\n        return result;\n",
          "message": "LibOrderHash.getStructHash uses assembly (LibOrderHash.sol#183-249)\n\t- LibOrderHash.sol#213-247\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 256,
          "vulnerability_to_line": 280,
          "vulnerability_code": "    function _hashEIP712Message(bytes32 eip712DomainHash, bytes32 hashStruct)\n\n        internal\n\n        pure\n\n        returns (bytes32 result)\n\n    {\n\n        // Assembly for more efficient computing:\n\n        // keccak256(abi.encodePacked(\n\n        //     EIP191_HEADER,\n\n        //     EIP712_DOMAIN_HASH,\n\n        //     hashStruct\n\n        // ));\n\n\n\n        assembly {\n\n            // Load free memory pointer\n\n            let memPtr := mload(64)\n\n\n\n            mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000)  // EIP191 header\n\n            mstore(add(memPtr, 2), eip712DomainHash)                                            // EIP712 domain hash\n\n            mstore(add(memPtr, 34), hashStruct)                                                 // Hash of struct\n\n\n\n            // Compute hash\n\n            result := keccak256(memPtr, 66)\n\n        }\n\n        return result;\n",
          "message": "LibOrderHash._hashEIP712Message uses assembly (LibOrderHash.sol#256-280)\n\t- LibOrderHash.sol#268-278\n"
        },
        {
          "name": "pragma",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.5;\n",
          "message": "Different versions of Solidity is used in LibOrderHash.sol:\n\t- Version used: ['ABIEncoderV2', '^0.6.5']\n\t- LibOrderHash.sol#21 declares pragma solidity^0.6.5\n\t- LibOrderHash.sol#22 declares pragma experimentalABIEncoderV2\n\t- LibOrderHash.sol#136 declares pragma solidity^0.6.5\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.5;\n",
          "message": "Detected issues with version pragma in LibOrderHash.sol:\n\t- pragma solidity^0.6.5 (LibOrderHash.sol#21): it allows old versions\n\t- pragma solidity^0.6.5 (LibOrderHash.sol#136): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": 113,
          "vulnerability_code": "    function EIP712_EXCHANGE_DOMAIN_HASH()\n\n        external\n\n        view\n",
          "message": "Function 'IExchange.EIP712_EXCHANGE_DOMAIN_HASH' (LibOrderHash.sol#110-113) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 256,
          "vulnerability_to_line": 280,
          "vulnerability_code": "    function _hashEIP712Message(bytes32 eip712DomainHash, bytes32 hashStruct)\n\n        internal\n\n        pure\n\n        returns (bytes32 result)\n\n    {\n\n        // Assembly for more efficient computing:\n\n        // keccak256(abi.encodePacked(\n\n        //     EIP191_HEADER,\n\n        //     EIP712_DOMAIN_HASH,\n\n        //     hashStruct\n\n        // ));\n\n\n\n        assembly {\n\n            // Load free memory pointer\n\n            let memPtr := mload(64)\n\n\n\n            mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000)  // EIP191 header\n\n            mstore(add(memPtr, 2), eip712DomainHash)                                            // EIP712 domain hash\n\n            mstore(add(memPtr, 34), hashStruct)                                                 // Hash of struct\n\n\n\n            // Compute hash\n\n            result := keccak256(memPtr, 66)\n\n        }\n\n        return result;\n",
          "message": "Function 'LibOrderHash._hashEIP712Message' (LibOrderHash.sol#256-280) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.5;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.5;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getStructHash(IExchange.Order memory order)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 256,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _hashEIP712Message(bytes32 eip712DomainHash, bytes32 hashStruct)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 213,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 268,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}